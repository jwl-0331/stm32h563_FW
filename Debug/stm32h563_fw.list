
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023cbc  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  08023f0c  08023f0c  00033f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       00003d64  08023f3c  08023f3c  00033f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08027ca0  08027ca0  000400e8  2**0
                  CONTENTS
  5 .ARM          00000008  08027ca0  08027ca0  00037ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08027ca8  08027ca8  000400e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08027ca8  08027ca8  00037ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08027cac  08027cac  00037cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e8  20050000  08027cb0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00011e58  200500e8  08027d98  000400e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20061f40  08027d98  00041f40  2**0
                  ALLOC
 12 .lwip_sec     00000200  20040000  20040000  00050000  2**2
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0004011e  2**0
                  CONTENTS, READONLY
 15 .debug_info   00048b65  00000000  00000000  00040161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000ab8e  00000000  00000000  00088cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000036e8  00000000  00000000  00093858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002b12  00000000  00000000  00096f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00048a4f  00000000  00000000  00099a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00054175  00000000  00000000  000e24a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00177dd2  00000000  00000000  00136616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000efe4  00000000  00000000  002ae3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  002bd3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200500e8 	.word	0x200500e8
 800026c:	00000000 	.word	0x00000000
 8000270:	08023ef4 	.word	0x08023ef4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200500ec 	.word	0x200500ec
 800028c:	08023ef4 	.word	0x08023ef4

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
  }
}

void AppMain()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
  __enable_irq();

  RESET_Init();
 80005de:	f003 fa6b 	bl	8003ab8 <RESET_Init>
  LED_Init();
 80005e2:	f003 f9b9 	bl	8003958 <LED_Init>
  LED_SimpleAnimation();
 80005e6:	f003 fa11 	bl	8003a0c <LED_SimpleAnimation>

  svDebugInit();
 80005ea:	f003 fc7b 	bl	8003ee4 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 80005ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f2:	2000      	movs	r0, #0
 80005f4:	f003 fac8 	bl	8003b88 <UART_Init>

  CAN_Init();
 80005f8:	f001 fefc 	bl	80023f4 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 80005fc:	2305      	movs	r3, #5
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f001 ff78 	bl	80024fc <CAN_Open>

  //ethernetif_notify_conn_changed(&gnetif);

  // Chk Reset Count
  //uint32_t pre_time = HAL_GetTick();
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <AppMain+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <AppMain+0x46>
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <AppMain+0x68>)
 8000616:	f003 fc99 	bl	8003f4c <svDebugMessage>
  /* Init scheduler */
  osKernelInitialize();
 800061a:	f010 fc7d 	bl	8010f18 <osKernelInitialize>

  g_hTaskMain = osThreadNew(TaskMain, NULL, &TaskMain_attributes);
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <AppMain+0x6c>)
 8000620:	2100      	movs	r1, #0
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <AppMain+0x70>)
 8000624:	f010 fcdc 	bl	8010fe0 <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <AppMain+0x74>)
 800062c:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800062e:	f010 fc99 	bl	8010f64 <osKernelStart>
  while(1)
  {
    /* End OF ECHO SERVER  */


    svDebugProcess();
 8000632:	f003 fbff 	bl	8003e34 <svDebugProcess>
 8000636:	e7fc      	b.n	8000632 <AppMain+0x5e>
 8000638:	2005003c 	.word	0x2005003c
 800063c:	08023f64 	.word	0x08023f64
 8000640:	0802786c 	.word	0x0802786c
 8000644:	0800064d 	.word	0x0800064d
 8000648:	20050104 	.word	0x20050104

0800064c <TaskMain>:
    */
  }
}

void TaskMain(void* argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MX_LWIP_Init();
 8000654:	f000 ff42 	bl	80014dc <MX_LWIP_Init>

  echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <TaskMain+0x44>)
 800065a:	2100      	movs	r1, #0
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <TaskMain+0x48>)
 800065e:	f010 fcbf 	bl	8010fe0 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <TaskMain+0x4c>)
 8000666:	6013      	str	r3, [r2, #0]
  tcpClientTaskHandle = osThreadNew(StartTcpClientTask, NULL, &tcpClientTask_attributes);
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <TaskMain+0x50>)
 800066a:	2100      	movs	r1, #0
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <TaskMain+0x54>)
 800066e:	f010 fcb7 	bl	8010fe0 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <TaskMain+0x58>)
 8000676:	6013      	str	r3, [r2, #0]
  for(;;)
  {
    svDebugProcess();
 8000678:	f003 fbdc 	bl	8003e34 <svDebugProcess>
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin); //toggle running led
 800067c:	2101      	movs	r1, #1
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <TaskMain+0x5c>)
 8000680:	f006 fffa 	bl	8007678 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000688:	f010 fd3c 	bl	8011104 <osDelay>
    svDebugProcess();
 800068c:	e7f4      	b.n	8000678 <TaskMain+0x2c>
 800068e:	bf00      	nop
 8000690:	08027890 	.word	0x08027890
 8000694:	080006ad 	.word	0x080006ad
 8000698:	20050108 	.word	0x20050108
 800069c:	080278b4 	.word	0x080278b4
 80006a0:	08000779 	.word	0x08000779
 80006a4:	2005010c 	.word	0x2005010c
 80006a8:	42020400 	.word	0x42020400

080006ac <StartEchoTask>:
  }

}

void StartEchoTask(void const *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
  void *data;
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  conn = netconn_new(NETCONN_TCP); //new tcp netconn , create new connection
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2010      	movs	r0, #16
 80006ba:	f014 f95f 	bl	801497c <netconn_new_with_proto_and_callback>
 80006be:	61f8      	str	r0, [r7, #28]

  if (conn != NULL)
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d052      	beq.n	800076c <StartEchoTask+0xc0>
  {
    err = netconn_bind(conn, NULL, 7); //bind to port 7
 80006c6:	2207      	movs	r2, #7
 80006c8:	2100      	movs	r1, #0
 80006ca:	69f8      	ldr	r0, [r7, #28]
 80006cc:	f014 fa10 	bl	8014af0 <netconn_bind>
 80006d0:	4603      	mov	r3, r0
 80006d2:	76fb      	strb	r3, [r7, #27]

    if (err == ERR_OK)
 80006d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d143      	bne.n	8000764 <StartEchoTask+0xb8>
    {
      netconn_listen(conn); //listen at port 7
 80006dc:	21ff      	movs	r1, #255	; 0xff
 80006de:	69f8      	ldr	r0, [r7, #28]
 80006e0:	f014 fa76 	bl	8014bd0 <netconn_listen_with_backlog>

      while (1)
      {
        accept_err = netconn_accept(conn, &newconn); //accept new connection
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	69f8      	ldr	r0, [r7, #28]
 80006ec:	f014 fa9c 	bl	8014c28 <netconn_accept>
 80006f0:	4603      	mov	r3, r0
 80006f2:	76bb      	strb	r3, [r7, #26]

        if (accept_err == ERR_OK) //accept ok
 80006f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f3      	bne.n	80006e4 <StartEchoTask+0x38>
        {
          while (netconn_recv(newconn, &buf) == ERR_OK) //receive data
 80006fc:	e01f      	b.n	800073e <StartEchoTask+0x92>
          {
            do
            {
              netbuf_data(buf, &data, &len); //receive data pointer & length  buf -> data
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	f107 020a 	add.w	r2, r7, #10
 8000704:	f107 010c 	add.w	r1, r7, #12
 8000708:	4618      	mov	r0, r3
 800070a:	f016 fb7d 	bl	8016e08 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY); //echo back to the client
 800070e:	6978      	ldr	r0, [r7, #20]
 8000710:	68f9      	ldr	r1, [r7, #12]
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	461a      	mov	r2, r3
 8000716:	2300      	movs	r3, #0
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	f014 fd06 	bl	801512c <netconn_write_partly>

              HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin); //toggle data led
 8000720:	2110      	movs	r1, #16
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <StartEchoTask+0xc8>)
 8000724:	f006 ffa8 	bl	8007678 <HAL_GPIO_TogglePin>
            }
            while (netbuf_next(buf) >= 0); //check buffer empty
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	4618      	mov	r0, r3
 800072c:	f016 fbb6 	bl	8016e9c <netbuf_next>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	dae3      	bge.n	80006fe <StartEchoTask+0x52>

            netbuf_delete(buf); //clear buffer
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	4618      	mov	r0, r3
 800073a:	f016 fb45 	bl	8016dc8 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) //receive data
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	f107 0210 	add.w	r2, r7, #16
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f014 fc76 	bl	8015038 <netconn_recv>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0d5      	beq.n	80006fe <StartEchoTask+0x52>
          }

          netconn_close(newconn); //close session
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	4618      	mov	r0, r3
 8000756:	f014 fdeb 	bl	8015330 <netconn_close>
          netconn_delete(newconn); //free memory
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	4618      	mov	r0, r3
 800075e:	f014 f9ab 	bl	8014ab8 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn); //accept new connection
 8000762:	e7bf      	b.n	80006e4 <StartEchoTask+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn); //free memory
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	4618      	mov	r0, r3
 8000768:	f014 f9a6 	bl	8014ab8 <netconn_delete>
    }
  }
}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	42021400 	.word	0x42021400

08000778 <StartTcpClientTask>:

void StartTcpClientTask(void const *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af02      	add	r7, sp, #8
 800077e:	6078      	str	r0, [r7, #4]

  LWIP_UNUSED_ARG(argument);

  while (1)
  {
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000780:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <StartTcpClientTask+0x150>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <StartTcpClientTask+0x20>
 8000788:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <StartTcpClientTask+0x150>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <StartTcpClientTask+0x20>
 8000790:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <StartTcpClientTask+0x150>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <StartTcpClientTask+0x2a>
    {
      osDelay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079c:	f010 fcb2 	bl	8011104 <osDelay>
      continue;
 80007a0:	e090      	b.n	80008c4 <StartTcpClientTask+0x14c>
    }
    else //valid ip address
    {
      osDelay(100); //request interval
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f010 fcae 	bl	8011104 <osDelay>
    }

    nRead = 0; //clear indexes
 80007a8:	2300      	movs	r3, #0
 80007aa:	83fb      	strh	r3, [r7, #30]
    nWritten = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	83bb      	strh	r3, [r7, #28]

    conn = netconn_new(NETCONN_TCP); //new tcp netconn
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2010      	movs	r0, #16
 80007b6:	f014 f8e1 	bl	801497c <netconn_new_with_proto_and_callback>
 80007ba:	61b8      	str	r0, [r7, #24]

    if (conn != NULL)
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0de      	beq.n	8000780 <StartTcpClientTask+0x8>
    {
      IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4); //server ip
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <StartTcpClientTask+0x154>)
 80007c4:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <StartTcpClientTask+0x158>)
 80007c6:	601a      	str	r2, [r3, #0]
      err = netconn_connect(conn, &server_addr, SERVER_PORT); //connect to the server
 80007c8:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80007cc:	493f      	ldr	r1, [pc, #252]	; (80008cc <StartTcpClientTask+0x154>)
 80007ce:	69b8      	ldr	r0, [r7, #24]
 80007d0:	f014 f9c6 	bl	8014b60 <netconn_connect>
 80007d4:	4603      	mov	r3, r0
 80007d6:	75fb      	strb	r3, [r7, #23]

      if (err != ERR_OK)
 80007d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <StartTcpClientTask+0x70>
      {
        netconn_delete(conn); //free memory
 80007e0:	69b8      	ldr	r0, [r7, #24]
 80007e2:	f014 f969 	bl	8014ab8 <netconn_delete>
        continue;
 80007e6:	e06d      	b.n	80008c4 <StartTcpClientTask+0x14c>
      }

      memset(&packet, 0, sizeof(struct time_packet));
 80007e8:	2205      	movs	r2, #5
 80007ea:	2100      	movs	r1, #0
 80007ec:	4839      	ldr	r0, [pc, #228]	; (80008d4 <StartTcpClientTask+0x15c>)
 80007ee:	f022 fbdb 	bl	8022fa8 <memset>
      packet.minute = 30;
      packet.second = 0;
      packet.dummy[0] = 11;
      packet.tail = 0xEA; //tail
      */
      packet.dummy[0] = 'H';
 80007f2:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <StartTcpClientTask+0x15c>)
 80007f4:	2248      	movs	r2, #72	; 0x48
 80007f6:	701a      	strb	r2, [r3, #0]
      packet.dummy[1] = 'E';
 80007f8:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <StartTcpClientTask+0x15c>)
 80007fa:	2245      	movs	r2, #69	; 0x45
 80007fc:	705a      	strb	r2, [r3, #1]
      packet.dummy[2] = 'L';
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <StartTcpClientTask+0x15c>)
 8000800:	224c      	movs	r2, #76	; 0x4c
 8000802:	709a      	strb	r2, [r3, #2]
      packet.dummy[3] = 'L';
 8000804:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <StartTcpClientTask+0x15c>)
 8000806:	224c      	movs	r2, #76	; 0x4c
 8000808:	70da      	strb	r2, [r3, #3]
      packet.dummy[4] = 'O';
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <StartTcpClientTask+0x15c>)
 800080c:	224f      	movs	r2, #79	; 0x4f
 800080e:	711a      	strb	r2, [r3, #4]

      do
      {
        if (netconn_write_partly(
            conn, //connection
            (const void*) (&packet + nWritten), //buffer pointer
 8000810:	8bba      	ldrh	r2, [r7, #28]
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <StartTcpClientTask+0x15c>)
 800081a:	1899      	adds	r1, r3, r2
        if (netconn_write_partly(
 800081c:	8bbb      	ldrh	r3, [r7, #28]
 800081e:	f1c3 0205 	rsb	r2, r3, #5
 8000822:	f107 030a 	add.w	r3, r7, #10
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2300      	movs	r3, #0
 800082a:	69b8      	ldr	r0, [r7, #24]
 800082c:	f014 fc7e 	bl	801512c <netconn_write_partly>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d006      	beq.n	8000844 <StartTcpClientTask+0xcc>
            (sizeof(struct time_packet) - nWritten), //buffer length
            NETCONN_NOFLAG, //no copy
            (size_t*) &len) != ERR_OK) //written len
        {
          netconn_close(conn); //close session
 8000836:	69b8      	ldr	r0, [r7, #24]
 8000838:	f014 fd7a 	bl	8015330 <netconn_close>
          netconn_delete(conn); //free memory
 800083c:	69b8      	ldr	r0, [r7, #24]
 800083e:	f014 f93b 	bl	8014ab8 <netconn_delete>
          continue;
 8000842:	e003      	b.n	800084c <StartTcpClientTask+0xd4>
        }
        else
        {
          nWritten += len;  // write buffer index++
 8000844:	897a      	ldrh	r2, [r7, #10]
 8000846:	8bbb      	ldrh	r3, [r7, #28]
 8000848:	4413      	add	r3, r2
 800084a:	83bb      	strh	r3, [r7, #28]
        }
      }
      while (nWritten < sizeof(struct time_packet)); //send request
 800084c:	8bbb      	ldrh	r3, [r7, #28]
 800084e:	2b04      	cmp	r3, #4
 8000850:	d9de      	bls.n	8000810 <StartTcpClientTask+0x98>

      while (netconn_recv(conn, &buf) == ERR_OK) //receive the response
 8000852:	e021      	b.n	8000898 <StartTcpClientTask+0x120>
      {
        do
        {
          netbuf_data(buf, &data, &len); //receive data pointer & length
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	f107 020a 	add.w	r2, r7, #10
 800085a:	f107 010c 	add.w	r1, r7, #12
 800085e:	4618      	mov	r0, r3
 8000860:	f016 fad2 	bl	8016e08 <netbuf_data>

          memcpy(&packet + nRead, data, len);
 8000864:	8bfa      	ldrh	r2, [r7, #30]
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <StartTcpClientTask+0x15c>)
 800086e:	4413      	add	r3, r2
 8000870:	68f9      	ldr	r1, [r7, #12]
 8000872:	897a      	ldrh	r2, [r7, #10]
 8000874:	4618      	mov	r0, r3
 8000876:	f022 fc30 	bl	80230da <memcpy>
          nRead += len;
 800087a:	897a      	ldrh	r2, [r7, #10]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	4413      	add	r3, r2
 8000880:	83fb      	strh	r3, [r7, #30]
        }
        while (netbuf_next(buf) >= 0); //check buffer empty
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4618      	mov	r0, r3
 8000886:	f016 fb09 	bl	8016e9c <netbuf_next>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	dae1      	bge.n	8000854 <StartTcpClientTask+0xdc>
        netbuf_delete(buf); //clear buffer
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	4618      	mov	r0, r3
 8000894:	f016 fa98 	bl	8016dc8 <netbuf_delete>
      while (netconn_recv(conn, &buf) == ERR_OK) //receive the response
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	69b8      	ldr	r0, [r7, #24]
 80008a0:	f014 fbca 	bl	8015038 <netconn_recv>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0d4      	beq.n	8000854 <StartTcpClientTask+0xdc>
      }

      if (nRead == sizeof(struct time_packet) )//&& packet.type == RESP) //if received length is valid
 80008aa:	8bfb      	ldrh	r3, [r7, #30]
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	d103      	bne.n	80008b8 <StartTcpClientTask+0x140>
      {
        //printf("%04d-%02d-%02d %02d:%02d:%02d\n", packet.year + 2000, packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
        HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin); //toggle data led
 80008b0:	2110      	movs	r1, #16
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <StartTcpClientTask+0x160>)
 80008b4:	f006 fee0 	bl	8007678 <HAL_GPIO_TogglePin>
      }

      netconn_close(conn); //close session
 80008b8:	69b8      	ldr	r0, [r7, #24]
 80008ba:	f014 fd39 	bl	8015330 <netconn_close>
      netconn_delete(conn); //free memory
 80008be:	69b8      	ldr	r0, [r7, #24]
 80008c0:	f014 f8fa 	bl	8014ab8 <netconn_delete>
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 80008c4:	e75c      	b.n	8000780 <StartTcpClientTask+0x8>
 80008c6:	bf00      	nop
 80008c8:	2005029c 	.word	0x2005029c
 80008cc:	20050110 	.word	0x20050110
 80008d0:	2adba8c0 	.word	0x2adba8c0
 80008d4:	20050114 	.word	0x20050114
 80008d8:	42021400 	.word	0x42021400

080008dc <HAL_GPIO_EXTI_Rising_Callback>:
    }
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ec:	d103      	bne.n	80008f6 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 80008f2:	f006 fec1 	bl	8007678 <HAL_GPIO_TogglePin>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	42020400 	.word	0x42020400

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f003 fb56 	bl	8003fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f80e 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f92a 	bl	8000b68 <MX_GPIO_Init>
  MX_FLASH_Init();
 8000914:	f000 f874 	bl	8000a00 <MX_FLASH_Init>
  MX_ICACHE_Init();
 8000918:	f000 f884 	bl	8000a24 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 800091c:	f000 f88e 	bl	8000a3c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000920:	f000 f8d6 	bl	8000ad0 <MX_USART3_UART_Init>
  /* Start scheduler */
  osKernelStart();
#endif

#if 1
  AppMain();
 8000924:	f7ff fe56 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	e7fe      	b.n	8000928 <main+0x24>
	...

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	; 0x70
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2250      	movs	r2, #80	; 0x50
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f022 fb34 	bl	8022fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <SystemClock_Config+0xd0>)
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <SystemClock_Config+0xd0>)
 8000958:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800095c:	6113      	str	r3, [r2, #16]
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <SystemClock_Config+0xd0>)
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096a:	bf00      	nop
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <SystemClock_Config+0xd0>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	2b08      	cmp	r3, #8
 8000976:	d1f9      	bne.n	800096c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000978:	2309      	movs	r3, #9
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 800097c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000982:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800098c:	2303      	movs	r3, #3
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000994:	2314      	movs	r3, #20
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80009a4:	230c      	movs	r3, #12
 80009a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 febb 	bl	8007730 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c0:	f000 f9e6 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	231f      	movs	r3, #31
 80009c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2303      	movs	r3, #3
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	2103      	movs	r1, #3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 fadc 	bl	8007fa0 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ee:	f000 f9cf 	bl	8000d90 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3770      	adds	r7, #112	; 0x70
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	44020800 	.word	0x44020800

08000a00 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000a04:	f006 fa98 	bl	8006f38 <HAL_FLASH_Unlock>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8000a0e:	f000 f9bf 	bl	8000d90 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8000a12:	f006 fab7 	bl	8006f84 <HAL_FLASH_Lock>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000a1c:	f000 f9b8 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a28:	f006 fe72 	bl	8007710 <HAL_ICACHE_Enable>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000a32:	f000 f9ad 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a42:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <MX_LPUART1_UART_Init+0x8c>)
 8000a44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a48:	4a20      	ldr	r2, [pc, #128]	; (8000acc <MX_LPUART1_UART_Init+0x90>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a60:	220c      	movs	r2, #12
 8000a62:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a7e:	f00d fa6f 	bl	800df60 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000a88:	f000 f982 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000a90:	f00f f9a5 	bl	800fdde <HAL_UARTEx_SetTxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000a9a:	f000 f979 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000aa2:	f00f f9da 	bl	800fe5a <HAL_UARTEx_SetRxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000aac:	f000 f970 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_LPUART1_UART_Init+0x88>)
 8000ab2:	f00f f95b 	bl	800fd6c <HAL_UARTEx_DisableFifoMode>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000abc:	f000 f968 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2005011c 	.word	0x2005011c
 8000ac8:	44002400 	.word	0x44002400
 8000acc:	00033324 	.word	0x00033324

08000ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <MX_USART3_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b1a:	f00d fa21 	bl	800df60 <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b24:	f000 f934 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b2c:	f00f f957 	bl	800fdde <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b36:	f000 f92b 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f00f f98c 	bl	800fe5a <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f922 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b4e:	f00f f90d 	bl	800fd6c <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f91a 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200501b0 	.word	0x200501b0
 8000b64:	40004800 	.word	0x40004800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b84:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b8e:	4b67      	ldr	r3, [pc, #412]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	4b63      	ldr	r3, [pc, #396]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ba2:	4a62      	ldr	r2, [pc, #392]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bac:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bc0:	4a5a      	ldr	r2, [pc, #360]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bc2:	f043 0320 	orr.w	r3, r3, #32
 8000bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bca:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd8:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bde:	4a53      	ldr	r2, [pc, #332]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000be8:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bfc:	4a4b      	ldr	r2, [pc, #300]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c1a:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c24:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c38:	4a3c      	ldr	r2, [pc, #240]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c50:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c56:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <MX_GPIO_Init+0x1c4>)
 8000c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2110      	movs	r1, #16
 8000c72:	482f      	ldr	r0, [pc, #188]	; (8000d30 <MX_GPIO_Init+0x1c8>)
 8000c74:	f006 fce8 	bl	8007648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	482d      	ldr	r0, [pc, #180]	; (8000d34 <MX_GPIO_Init+0x1cc>)
 8000c7e:	f006 fce3 	bl	8007648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	482c      	ldr	r0, [pc, #176]	; (8000d38 <MX_GPIO_Init+0x1d0>)
 8000c88:	f006 fcde 	bl	8007648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_GPIO_Init+0x1d4>)
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4827      	ldr	r0, [pc, #156]	; (8000d40 <MX_GPIO_Init+0x1d8>)
 8000ca2:	f006 fb7f 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481c      	ldr	r0, [pc, #112]	; (8000d30 <MX_GPIO_Init+0x1c8>)
 8000cbe:	f006 fb71 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4816      	ldr	r0, [pc, #88]	; (8000d34 <MX_GPIO_Init+0x1cc>)
 8000cda:	f006 fb63 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <MX_GPIO_Init+0x1d0>)
 8000cf6:	f006 fb55 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_GPIO_Init+0x1d4>)
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <MX_GPIO_Init+0x1d0>)
 8000d0e:	f006 fb49 	bl	80073a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2105      	movs	r1, #5
 8000d16:	2018      	movs	r0, #24
 8000d18:	f003 fa86 	bl	8004228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000d1c:	2018      	movs	r0, #24
 8000d1e:	f003 fa9d 	bl	800425c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d22:	bf00      	nop
 8000d24:	3738      	adds	r7, #56	; 0x38
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	44020c00 	.word	0x44020c00
 8000d30:	42021400 	.word	0x42021400
 8000d34:	42020400 	.word	0x42020400
 8000d38:	42021800 	.word	0x42021800
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	42020800 	.word	0x42020800

08000d44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d101      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d56:	f003 f955 	bl	8004004 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  timeCounter++;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d62:	6013      	str	r3, [r2, #0]

  if(timeCounter > 1000)
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d6c:	d905      	bls.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    timeFlag = TRUE;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
    timeCounter = 0;
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000
 8000d88:	20050248 	.word	0x20050248
 8000d8c:	20050244 	.word	0x20050244

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>

08000d9a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	210f      	movs	r1, #15
 8000da2:	f06f 0001 	mvn.w	r0, #1
 8000da6:	f003 fa3f 	bl	8004228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0d0      	sub	sp, #320	; 0x140
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000dbe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000dde:	461a      	mov	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	f022 f8e1 	bl	8022fa8 <memset>
  if(huart->Instance==LPUART1)
 8000de6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a9e      	ldr	r2, [pc, #632]	; (800106c <HAL_UART_MspInit+0x2bc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d15e      	bne.n	8000eb6 <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000df8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dfc:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000e0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f007 fc38 	bl	8008694 <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000e2a:	f7ff ffb1 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e2e:	4b90      	ldr	r3, [pc, #576]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e34:	4a8e      	ldr	r2, [pc, #568]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000e3e:	4b8c      	ldr	r3, [pc, #560]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000e40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e44:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000e48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e56:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e5a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b84      	ldr	r3, [pc, #528]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e62:	4a83      	ldr	r2, [pc, #524]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e72:	f003 0202 	and.w	r2, r3, #2
 8000e76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e88:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4871      	ldr	r0, [pc, #452]	; (8001074 <HAL_UART_MspInit+0x2c4>)
 8000eb0:	f006 fa78 	bl	80073a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb4:	e0d5      	b.n	8001062 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000eb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000eba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a6d      	ldr	r2, [pc, #436]	; (8001078 <HAL_UART_MspInit+0x2c8>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d165      	bne.n	8000f94 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ec8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ecc:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000ed0:	f04f 0202 	mov.w	r2, #2
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000edc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ee0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f007 fbd1 	bl	8008694 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000ef8:	f7ff ff4a 	bl	8000d90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efc:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f02:	4a5b      	ldr	r2, [pc, #364]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f0c:	4b58      	ldr	r3, [pc, #352]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f12:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000f16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f28:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f30:	4a4f      	ldr	r2, [pc, #316]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f3a:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f40:	f003 0208 	and.w	r2, r3, #8
 8000f44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f56:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f70:	2307      	movs	r3, #7
 8000f72:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	483f      	ldr	r0, [pc, #252]	; (800107c <HAL_UART_MspInit+0x2cc>)
 8000f7e:	f006 fa11 	bl	80073a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	203b      	movs	r0, #59	; 0x3b
 8000f88:	f003 f94e 	bl	8004228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f8c:	203b      	movs	r0, #59	; 0x3b
 8000f8e:	f003 f965 	bl	800425c <HAL_NVIC_EnableIRQ>
}
 8000f92:	e066      	b.n	8001062 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000f94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a37      	ldr	r2, [pc, #220]	; (8001080 <HAL_UART_MspInit+0x2d0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d15d      	bne.n	8001062 <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000faa:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000fae:	f04f 0204 	mov.w	r2, #4
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f007 fb62 	bl	8008694 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000fd6:	f7ff fedb 	bl	8000d90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fe0:	4a23      	ldr	r2, [pc, #140]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8000fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ff0:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000ff4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ff8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001002:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001006:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 800100a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_UART_MspInit+0x2c0>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800101e:	f003 0208 	and.w	r2, r3, #8
 8001022:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001026:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001030:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001034:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001050:	2307      	movs	r3, #7
 8001052:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800105a:	4619      	mov	r1, r3
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <HAL_UART_MspInit+0x2cc>)
 800105e:	f006 f9a1 	bl	80073a4 <HAL_GPIO_Init>
}
 8001062:	bf00      	nop
 8001064:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	44002400 	.word	0x44002400
 8001070:	44020c00 	.word	0x44020c00
 8001074:	42020400 	.word	0x42020400
 8001078:	40004400 	.word	0x40004400
 800107c:	42020c00 	.word	0x42020c00
 8001080:	40004800 	.word	0x40004800

08001084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_InitTick+0xd8>)
 800108e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <HAL_InitTick+0xd8>)
 8001094:	f043 0310 	orr.w	r3, r3, #16
 8001098:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_InitTick+0xd8>)
 800109e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010aa:	f107 020c 	add.w	r2, r7, #12
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fab5 	bl	8008624 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010c4:	f007 fa6c 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 80010c8:	6378      	str	r0, [r7, #52]	; 0x34
 80010ca:	e004      	b.n	80010d6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010cc:	f007 fa68 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 80010d0:	4603      	mov	r3, r0
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 80010d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	4a21      	ldr	r2, [pc, #132]	; (8001160 <HAL_InitTick+0xdc>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	09db      	lsrs	r3, r3, #7
 80010e2:	3b01      	subs	r3, #1
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_InitTick+0xe0>)
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_InitTick+0xe4>)
 80010ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_InitTick+0xe0>)
 80010ee:	2263      	movs	r2, #99	; 0x63
 80010f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <HAL_InitTick+0xe0>)
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_InitTick+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_InitTick+0xe0>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001104:	4817      	ldr	r0, [pc, #92]	; (8001164 <HAL_InitTick+0xe0>)
 8001106:	f00c fb45 	bl	800d794 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001110:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001114:	2b00      	cmp	r3, #0
 8001116:	d118      	bne.n	800114a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <HAL_InitTick+0xe0>)
 800111a:	f00c fb9d 	bl	800d858 <HAL_TIM_Base_Start_IT>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10e      	bne.n	800114a <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	d808      	bhi.n	8001144 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001132:	2200      	movs	r2, #0
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	2031      	movs	r0, #49	; 0x31
 8001138:	f003 f876 	bl	8004228 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_InitTick+0xe8>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e002      	b.n	800114a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800114a:	2031      	movs	r0, #49	; 0x31
 800114c:	f003 f886 	bl	800425c <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001150:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001154:	4618      	mov	r0, r3
 8001156:	3738      	adds	r7, #56	; 0x38
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	44020c00 	.word	0x44020c00
 8001160:	0a7c5ac5 	.word	0x0a7c5ac5
 8001164:	2005024c 	.word	0x2005024c
 8001168:	40001000 	.word	0x40001000
 800116c:	20050040 	.word	0x20050040

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80011a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a4:	f006 fa82 	bl	80076ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM6_IRQHandler+0x10>)
 80011b2:	f00c fbff 	bl	800d9b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2005024c 	.word	0x2005024c

080011c0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <ETH_IRQHandler+0x10>)
 80011c6:	f003 fcc3 	bl	8004b50 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20054ca0 	.word	0x20054ca0

080011d4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <ETH_WKUP_IRQHandler+0x10>)
 80011da:	f003 fcb9 	bl	8004b50 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20054ca0 	.word	0x20054ca0

080011e8 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <USART2_IRQHandler+0x10>)
 80011ee:	f00d f807 	bl	800e200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2005535c 	.word	0x2005535c

080011fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_kill>:

int _kill(int pid, int sig)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <_kill+0x20>)
 8001218:	2216      	movs	r2, #22
 800121a:	601a      	str	r2, [r3, #0]
  return -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	20061f38 	.word	0x20061f38

08001230 <_exit>:

void _exit (int status)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe5 	bl	800120c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001242:	e7fe      	b.n	8001242 <_exit+0x12>

08001244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4601      	mov	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
  }

  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e009      	b.n	80012a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	60ba      	str	r2, [r7, #8]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf1      	blt.n	8001290 <_write+0x12>
  }
  return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_close>:

int _close(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012de:	605a      	str	r2, [r3, #4]
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_isatty>:

int _isatty(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d205      	bcs.n	800135c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <_sbrk+0x6c>)
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	200a0000 	.word	0x200a0000
 8001380:	00000800 	.word	0x00000800
 8001384:	20050298 	.word	0x20050298
 8001388:	20061f40 	.word	0x20061f40
 800138c:	20061f38 	.word	0x20061f38

08001390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <SystemInit+0xdc>)
 8001398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139c:	4a33      	ldr	r2, [pc, #204]	; (800146c <SystemInit+0xdc>)
 800139e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <SystemInit+0xe0>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <SystemInit+0xe0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <SystemInit+0xe0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <SystemInit+0xe0>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	492c      	ldr	r1, [pc, #176]	; (8001470 <SystemInit+0xe0>)
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <SystemInit+0xe4>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <SystemInit+0xe0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <SystemInit+0xe0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <SystemInit+0xe0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <SystemInit+0xe0>)
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <SystemInit+0xe8>)
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <SystemInit+0xe0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <SystemInit+0xe0>)
 80013e4:	4a24      	ldr	r2, [pc, #144]	; (8001478 <SystemInit+0xe8>)
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <SystemInit+0xe0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <SystemInit+0xe0>)
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemInit+0xe8>)
 80013f2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <SystemInit+0xe0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <SystemInit+0xe0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <SystemInit+0xe0>)
 8001400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <SystemInit+0xe0>)
 8001408:	2200      	movs	r2, #0
 800140a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <SystemInit+0xdc>)
 800140e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001412:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <SystemInit+0xec>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800141c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001424:	d003      	beq.n	800142e <SystemInit+0x9e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800142c:	d117      	bne.n	800145e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <SystemInit+0xec>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <SystemInit+0xec>)
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <SystemInit+0xf0>)
 800143e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <SystemInit+0xec>)
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <SystemInit+0xf4>)
 8001444:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <SystemInit+0xec>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <SystemInit+0xec>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <SystemInit+0xec>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <SystemInit+0xec>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	61d3      	str	r3, [r2, #28]
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	44020c00 	.word	0x44020c00
 8001474:	eae2eae3 	.word	0xeae2eae3
 8001478:	01010280 	.word	0x01010280
 800147c:	40022000 	.word	0x40022000
 8001480:	08192a3b 	.word	0x08192a3b
 8001484:	4c5d6e7f 	.word	0x4c5d6e7f

08001488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800148a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800148c:	f7ff ff80 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <LoopForever+0xe>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	; (80014d4 <LoopForever+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014b6:	f021 fde9 	bl	802308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ba:	f7ff fa23 	bl	8000904 <main>

080014be <LoopForever>:

LoopForever:
    b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   r0, =_estack
 80014c0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014c4:	20050000 	.word	0x20050000
  ldr r1, =_edata
 80014c8:	200500e8 	.word	0x200500e8
  ldr r2, =_sidata
 80014cc:	08027cb0 	.word	0x08027cb0
  ldr r2, =_sbss
 80014d0:	200500e8 	.word	0x200500e8
  ldr r4, =_ebss
 80014d4:	20061f40 	.word	0x20061f40

080014d8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_IRQHandler>
	...

080014dc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80014e2:	4b98      	ldr	r3, [pc, #608]	; (8001744 <MX_LWIP_Init+0x268>)
 80014e4:	22c0      	movs	r2, #192	; 0xc0
 80014e6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80014e8:	4b96      	ldr	r3, [pc, #600]	; (8001744 <MX_LWIP_Init+0x268>)
 80014ea:	22a8      	movs	r2, #168	; 0xa8
 80014ec:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 219;
 80014ee:	4b95      	ldr	r3, [pc, #596]	; (8001744 <MX_LWIP_Init+0x268>)
 80014f0:	22db      	movs	r2, #219	; 0xdb
 80014f2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 120;
 80014f4:	4b93      	ldr	r3, [pc, #588]	; (8001744 <MX_LWIP_Init+0x268>)
 80014f6:	2278      	movs	r2, #120	; 0x78
 80014f8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80014fa:	4b93      	ldr	r3, [pc, #588]	; (8001748 <MX_LWIP_Init+0x26c>)
 80014fc:	22ff      	movs	r2, #255	; 0xff
 80014fe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8001500:	4b91      	ldr	r3, [pc, #580]	; (8001748 <MX_LWIP_Init+0x26c>)
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8001506:	4b90      	ldr	r3, [pc, #576]	; (8001748 <MX_LWIP_Init+0x26c>)
 8001508:	22ff      	movs	r2, #255	; 0xff
 800150a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800150c:	4b8e      	ldr	r3, [pc, #568]	; (8001748 <MX_LWIP_Init+0x26c>)
 800150e:	2200      	movs	r2, #0
 8001510:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8001512:	4b8e      	ldr	r3, [pc, #568]	; (800174c <MX_LWIP_Init+0x270>)
 8001514:	22c0      	movs	r2, #192	; 0xc0
 8001516:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8001518:	4b8c      	ldr	r3, [pc, #560]	; (800174c <MX_LWIP_Init+0x270>)
 800151a:	22a8      	movs	r2, #168	; 0xa8
 800151c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 219;
 800151e:	4b8b      	ldr	r3, [pc, #556]	; (800174c <MX_LWIP_Init+0x270>)
 8001520:	22db      	movs	r2, #219	; 0xdb
 8001522:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8001524:	4b89      	ldr	r3, [pc, #548]	; (800174c <MX_LWIP_Init+0x270>)
 8001526:	2201      	movs	r2, #1
 8001528:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f015 fe53 	bl	80171d8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8001532:	4b84      	ldr	r3, [pc, #528]	; (8001744 <MX_LWIP_Init+0x268>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	061a      	lsls	r2, r3, #24
 8001538:	4b82      	ldr	r3, [pc, #520]	; (8001744 <MX_LWIP_Init+0x268>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	4b80      	ldr	r3, [pc, #512]	; (8001744 <MX_LWIP_Init+0x268>)
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	4313      	orrs	r3, r2
 8001548:	4a7e      	ldr	r2, [pc, #504]	; (8001744 <MX_LWIP_Init+0x268>)
 800154a:	78d2      	ldrb	r2, [r2, #3]
 800154c:	4313      	orrs	r3, r2
 800154e:	061a      	lsls	r2, r3, #24
 8001550:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <MX_LWIP_Init+0x268>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	0619      	lsls	r1, r3, #24
 8001556:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <MX_LWIP_Init+0x268>)
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	4319      	orrs	r1, r3
 800155e:	4b79      	ldr	r3, [pc, #484]	; (8001744 <MX_LWIP_Init+0x268>)
 8001560:	789b      	ldrb	r3, [r3, #2]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	430b      	orrs	r3, r1
 8001566:	4977      	ldr	r1, [pc, #476]	; (8001744 <MX_LWIP_Init+0x268>)
 8001568:	78c9      	ldrb	r1, [r1, #3]
 800156a:	430b      	orrs	r3, r1
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001572:	431a      	orrs	r2, r3
 8001574:	4b73      	ldr	r3, [pc, #460]	; (8001744 <MX_LWIP_Init+0x268>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	0619      	lsls	r1, r3, #24
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <MX_LWIP_Init+0x268>)
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	4319      	orrs	r1, r3
 8001582:	4b70      	ldr	r3, [pc, #448]	; (8001744 <MX_LWIP_Init+0x268>)
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	430b      	orrs	r3, r1
 800158a:	496e      	ldr	r1, [pc, #440]	; (8001744 <MX_LWIP_Init+0x268>)
 800158c:	78c9      	ldrb	r1, [r1, #3]
 800158e:	430b      	orrs	r3, r1
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001596:	431a      	orrs	r2, r3
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <MX_LWIP_Init+0x268>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	0619      	lsls	r1, r3, #24
 800159e:	4b69      	ldr	r3, [pc, #420]	; (8001744 <MX_LWIP_Init+0x268>)
 80015a0:	785b      	ldrb	r3, [r3, #1]
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	4319      	orrs	r1, r3
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <MX_LWIP_Init+0x268>)
 80015a8:	789b      	ldrb	r3, [r3, #2]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	430b      	orrs	r3, r1
 80015ae:	4965      	ldr	r1, [pc, #404]	; (8001744 <MX_LWIP_Init+0x268>)
 80015b0:	78c9      	ldrb	r1, [r1, #3]
 80015b2:	430b      	orrs	r3, r1
 80015b4:	0e1b      	lsrs	r3, r3, #24
 80015b6:	4313      	orrs	r3, r2
 80015b8:	4a65      	ldr	r2, [pc, #404]	; (8001750 <MX_LWIP_Init+0x274>)
 80015ba:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80015bc:	4b62      	ldr	r3, [pc, #392]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	061a      	lsls	r2, r3, #24
 80015c2:	4b61      	ldr	r3, [pc, #388]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	431a      	orrs	r2, r3
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015cc:	789b      	ldrb	r3, [r3, #2]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	4313      	orrs	r3, r2
 80015d2:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015d4:	78d2      	ldrb	r2, [r2, #3]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	061a      	lsls	r2, r3, #24
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0619      	lsls	r1, r3, #24
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	4319      	orrs	r1, r3
 80015e8:	4b57      	ldr	r3, [pc, #348]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	430b      	orrs	r3, r1
 80015f0:	4955      	ldr	r1, [pc, #340]	; (8001748 <MX_LWIP_Init+0x26c>)
 80015f2:	78c9      	ldrb	r1, [r1, #3]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015fc:	431a      	orrs	r2, r3
 80015fe:	4b52      	ldr	r3, [pc, #328]	; (8001748 <MX_LWIP_Init+0x26c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	0619      	lsls	r1, r3, #24
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <MX_LWIP_Init+0x26c>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	4319      	orrs	r1, r3
 800160c:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <MX_LWIP_Init+0x26c>)
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	430b      	orrs	r3, r1
 8001614:	494c      	ldr	r1, [pc, #304]	; (8001748 <MX_LWIP_Init+0x26c>)
 8001616:	78c9      	ldrb	r1, [r1, #3]
 8001618:	430b      	orrs	r3, r1
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001620:	431a      	orrs	r2, r3
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <MX_LWIP_Init+0x26c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0619      	lsls	r1, r3, #24
 8001628:	4b47      	ldr	r3, [pc, #284]	; (8001748 <MX_LWIP_Init+0x26c>)
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	4319      	orrs	r1, r3
 8001630:	4b45      	ldr	r3, [pc, #276]	; (8001748 <MX_LWIP_Init+0x26c>)
 8001632:	789b      	ldrb	r3, [r3, #2]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	430b      	orrs	r3, r1
 8001638:	4943      	ldr	r1, [pc, #268]	; (8001748 <MX_LWIP_Init+0x26c>)
 800163a:	78c9      	ldrb	r1, [r1, #3]
 800163c:	430b      	orrs	r3, r1
 800163e:	0e1b      	lsrs	r3, r3, #24
 8001640:	4313      	orrs	r3, r2
 8001642:	4a44      	ldr	r2, [pc, #272]	; (8001754 <MX_LWIP_Init+0x278>)
 8001644:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <MX_LWIP_Init+0x270>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	061a      	lsls	r2, r3, #24
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <MX_LWIP_Init+0x270>)
 800164e:	785b      	ldrb	r3, [r3, #1]
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431a      	orrs	r2, r3
 8001654:	4b3d      	ldr	r3, [pc, #244]	; (800174c <MX_LWIP_Init+0x270>)
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	4313      	orrs	r3, r2
 800165c:	4a3b      	ldr	r2, [pc, #236]	; (800174c <MX_LWIP_Init+0x270>)
 800165e:	78d2      	ldrb	r2, [r2, #3]
 8001660:	4313      	orrs	r3, r2
 8001662:	061a      	lsls	r2, r3, #24
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <MX_LWIP_Init+0x270>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	0619      	lsls	r1, r3, #24
 800166a:	4b38      	ldr	r3, [pc, #224]	; (800174c <MX_LWIP_Init+0x270>)
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	4319      	orrs	r1, r3
 8001672:	4b36      	ldr	r3, [pc, #216]	; (800174c <MX_LWIP_Init+0x270>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	430b      	orrs	r3, r1
 800167a:	4934      	ldr	r1, [pc, #208]	; (800174c <MX_LWIP_Init+0x270>)
 800167c:	78c9      	ldrb	r1, [r1, #3]
 800167e:	430b      	orrs	r3, r1
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001686:	431a      	orrs	r2, r3
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <MX_LWIP_Init+0x270>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	0619      	lsls	r1, r3, #24
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <MX_LWIP_Init+0x270>)
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	4319      	orrs	r1, r3
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <MX_LWIP_Init+0x270>)
 8001698:	789b      	ldrb	r3, [r3, #2]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	430b      	orrs	r3, r1
 800169e:	492b      	ldr	r1, [pc, #172]	; (800174c <MX_LWIP_Init+0x270>)
 80016a0:	78c9      	ldrb	r1, [r1, #3]
 80016a2:	430b      	orrs	r3, r1
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80016aa:	431a      	orrs	r2, r3
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <MX_LWIP_Init+0x270>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	0619      	lsls	r1, r3, #24
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <MX_LWIP_Init+0x270>)
 80016b4:	785b      	ldrb	r3, [r3, #1]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	4319      	orrs	r1, r3
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <MX_LWIP_Init+0x270>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	430b      	orrs	r3, r1
 80016c2:	4922      	ldr	r1, [pc, #136]	; (800174c <MX_LWIP_Init+0x270>)
 80016c4:	78c9      	ldrb	r1, [r1, #3]
 80016c6:	430b      	orrs	r3, r1
 80016c8:	0e1b      	lsrs	r3, r3, #24
 80016ca:	4313      	orrs	r3, r2
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <MX_LWIP_Init+0x27c>)
 80016ce:	6013      	str	r3, [r2, #0]

  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_LWIP_Init+0x280>)
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_LWIP_Init+0x284>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_LWIP_Init+0x27c>)
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <MX_LWIP_Init+0x278>)
 80016e0:	491b      	ldr	r1, [pc, #108]	; (8001750 <MX_LWIP_Init+0x274>)
 80016e2:	4820      	ldr	r0, [pc, #128]	; (8001764 <MX_LWIP_Init+0x288>)
 80016e4:	f016 fbfa 	bl	8017edc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80016e8:	481e      	ldr	r0, [pc, #120]	; (8001764 <MX_LWIP_Init+0x288>)
 80016ea:	f016 fda9 	bl	8018240 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_LWIP_Init+0x288>)
 80016f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8001700:	4818      	ldr	r0, [pc, #96]	; (8001764 <MX_LWIP_Init+0x288>)
 8001702:	f016 fdad 	bl	8018260 <netif_set_up>
 8001706:	e002      	b.n	800170e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8001708:	4816      	ldr	r0, [pc, #88]	; (8001764 <MX_LWIP_Init+0x288>)
 800170a:	f016 fe15 	bl	8018338 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800170e:	4916      	ldr	r1, [pc, #88]	; (8001768 <MX_LWIP_Init+0x28c>)
 8001710:	4814      	ldr	r0, [pc, #80]	; (8001764 <MX_LWIP_Init+0x288>)
 8001712:	f016 fea7 	bl	8018464 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  /* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8001716:	2224      	movs	r2, #36	; 0x24
 8001718:	2100      	movs	r1, #0
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <MX_LWIP_Init+0x290>)
 800171c:	f021 fc44 	bl	8022fa8 <memset>
  attributes.name = "EthLink";
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_LWIP_Init+0x290>)
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_LWIP_Init+0x294>)
 8001724:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_LWIP_Init+0x290>)
 8001728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_LWIP_Init+0x290>)
 8001730:	2210      	movs	r2, #16
 8001732:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <MX_LWIP_Init+0x290>)
 8001736:	490b      	ldr	r1, [pc, #44]	; (8001764 <MX_LWIP_Init+0x288>)
 8001738:	480e      	ldr	r0, [pc, #56]	; (8001774 <MX_LWIP_Init+0x298>)
 800173a:	f00f fc51 	bl	8010fe0 <osThreadNew>
  /* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200502dc 	.word	0x200502dc
 8001748:	200502e0 	.word	0x200502e0
 800174c:	200502e4 	.word	0x200502e4
 8001750:	200502d0 	.word	0x200502d0
 8001754:	200502d4 	.word	0x200502d4
 8001758:	200502d8 	.word	0x200502d8
 800175c:	080170e9 	.word	0x080170e9
 8001760:	08001c1d 	.word	0x08001c1d
 8001764:	2005029c 	.word	0x2005029c
 8001768:	08001779 	.word	0x08001779
 800176c:	200502e8 	.word	0x200502e8
 8001770:	08023f7c 	.word	0x08023f7c
 8001774:	08001f21 	.word	0x08001f21

08001778 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_ETH_RxCpltCallback+0x1c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f00f fead 	bl	80114f8 <osSemaphoreRelease>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20054c98 	.word	0x20054c98

080017ac <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_ETH_TxCpltCallback+0x1c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00f fe9d 	bl	80114f8 <osSemaphoreRelease>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20054c9c 	.word	0x20054c9c

080017cc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f003 fde7 	bl	80053a8 <HAL_ETH_GetDMAError>
 80017da:	4603      	mov	r3, r0
 80017dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e0:	2b80      	cmp	r3, #128	; 0x80
 80017e2:	d104      	bne.n	80017ee <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <HAL_ETH_ErrorCallback+0x2c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00f fe85 	bl	80114f8 <osSemaphoreRelease>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20054c98 	.word	0x20054c98

080017fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0aa      	sub	sp, #168	; 0xa8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	2264      	movs	r2, #100	; 0x64
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f021 fbc2 	bl	8022fa8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8001824:	4b85      	ldr	r3, [pc, #532]	; (8001a3c <low_level_init+0x240>)
 8001826:	4a86      	ldr	r2, [pc, #536]	; (8001a40 <low_level_init+0x244>)
 8001828:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8001832:	23e1      	movs	r3, #225	; 0xe1
 8001834:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8001836:	2300      	movs	r3, #0
 8001838:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800183a:	2300      	movs	r3, #0
 800183c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8001842:	4a7e      	ldr	r2, [pc, #504]	; (8001a3c <low_level_init+0x240>)
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800184a:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <low_level_init+0x240>)
 800184c:	2201      	movs	r2, #1
 800184e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001850:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <low_level_init+0x240>)
 8001852:	4a7c      	ldr	r2, [pc, #496]	; (8001a44 <low_level_init+0x248>)
 8001854:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001856:	4b79      	ldr	r3, [pc, #484]	; (8001a3c <low_level_init+0x240>)
 8001858:	4a7b      	ldr	r2, [pc, #492]	; (8001a48 <low_level_init+0x24c>)
 800185a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800185c:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <low_level_init+0x240>)
 800185e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001862:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8001864:	4875      	ldr	r0, [pc, #468]	; (8001a3c <low_level_init+0x240>)
 8001866:	f002 fdad 	bl	80043c4 <HAL_ETH_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001870:	2238      	movs	r2, #56	; 0x38
 8001872:	2100      	movs	r1, #0
 8001874:	4875      	ldr	r0, [pc, #468]	; (8001a4c <low_level_init+0x250>)
 8001876:	f021 fb97 	bl	8022fa8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800187a:	4b74      	ldr	r3, [pc, #464]	; (8001a4c <low_level_init+0x250>)
 800187c:	2221      	movs	r2, #33	; 0x21
 800187e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001880:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <low_level_init+0x250>)
 8001882:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001886:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001888:	4b70      	ldr	r3, [pc, #448]	; (8001a4c <low_level_init+0x250>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800188e:	4870      	ldr	r0, [pc, #448]	; (8001a50 <low_level_init+0x254>)
 8001890:	f016 f9de 	bl	8017c50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2206      	movs	r2, #6
 8001898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <low_level_init+0x240>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80018a8:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <low_level_init+0x240>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	785a      	ldrb	r2, [r3, #1]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80018b4:	4b61      	ldr	r3, [pc, #388]	; (8001a3c <low_level_init+0x240>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	789a      	ldrb	r2, [r3, #2]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80018c0:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <low_level_init+0x240>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	78da      	ldrb	r2, [r3, #3]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80018cc:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <low_level_init+0x240>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	791a      	ldrb	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <low_level_init+0x240>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	795a      	ldrb	r2, [r3, #5]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80018ea:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80018f2:	f043 030a 	orr.w	r3, r3, #10
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80018fe:	2200      	movs	r2, #0
 8001900:	2101      	movs	r1, #1
 8001902:	2001      	movs	r0, #1
 8001904:	f00f fd23 	bl	801134e <osSemaphoreNew>
 8001908:	4603      	mov	r3, r0
 800190a:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <low_level_init+0x258>)
 800190c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800190e:	2200      	movs	r2, #0
 8001910:	2101      	movs	r1, #1
 8001912:	2001      	movs	r0, #1
 8001914:	f00f fd1b 	bl	801134e <osSemaphoreNew>
 8001918:	4603      	mov	r3, r0
 800191a:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <low_level_init+0x25c>)
 800191c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800191e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f021 fb3e 	bl	8022fa8 <memset>
  attributes.name = "EthIf";
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <low_level_init+0x260>)
 800192e:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8001930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8001938:	2330      	movs	r3, #48	; 0x30
 800193a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800193e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001942:	461a      	mov	r2, r3
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4846      	ldr	r0, [pc, #280]	; (8001a60 <low_level_init+0x264>)
 8001948:	f00f fb4a 	bl	8010fe0 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800194c:	4945      	ldr	r1, [pc, #276]	; (8001a64 <low_level_init+0x268>)
 800194e:	4846      	ldr	r0, [pc, #280]	; (8001a68 <low_level_init+0x26c>)
 8001950:	f000 fbef 	bl	8002132 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8001954:	4844      	ldr	r0, [pc, #272]	; (8001a68 <low_level_init+0x26c>)
 8001956:	f000 fc1e 	bl	8002196 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800195a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800195e:	2b00      	cmp	r3, #0
 8001960:	d165      	bne.n	8001a2e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001962:	4841      	ldr	r0, [pc, #260]	; (8001a68 <low_level_init+0x26c>)
 8001964:	f000 fcbf 	bl	80022e6 <LAN8742_GetLinkState>
 8001968:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800196c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001970:	2b01      	cmp	r3, #1
 8001972:	dc06      	bgt.n	8001982 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f016 fd45 	bl	8018404 <netif_set_link_down>
      netif_set_down(netif);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f016 fcdc 	bl	8018338 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8001980:	e057      	b.n	8001a32 <low_level_init+0x236>
      switch (PHYLinkState)
 8001982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001986:	3b02      	subs	r3, #2
 8001988:	2b03      	cmp	r3, #3
 800198a:	d82b      	bhi.n	80019e4 <low_level_init+0x1e8>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <low_level_init+0x198>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019b7 	.word	0x080019b7
 800199c:	080019c7 	.word	0x080019c7
 80019a0:	080019d7 	.word	0x080019d7
        duplex = ETH_FULLDUPLEX_MODE;
 80019a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80019ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80019b4:	e01f      	b.n	80019f6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80019bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80019c4:	e017      	b.n	80019f6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80019c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80019d4:	e00f      	b.n	80019f6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80019e2:	e008      	b.n	80019f6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80019e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80019ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80019f4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	480f      	ldr	r0, [pc, #60]	; (8001a3c <low_level_init+0x240>)
 80019fe:	f003 fa7d 	bl	8004efc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8001a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8001a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <low_level_init+0x240>)
 8001a16:	f003 fc45 	bl	80052a4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <low_level_init+0x240>)
 8001a1c:	f002 fdb8 	bl	8004590 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f016 fc1d 	bl	8018260 <netif_set_up>
    netif_set_link_up(netif);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f016 fcb8 	bl	801839c <netif_set_link_up>
}
 8001a2c:	e001      	b.n	8001a32 <low_level_init+0x236>
    Error_Handler();
 8001a2e:	f7ff f9af 	bl	8000d90 <Error_Handler>
}
 8001a32:	bf00      	nop
 8001a34:	37a8      	adds	r7, #168	; 0xa8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20054ca0 	.word	0x20054ca0
 8001a40:	40028000 	.word	0x40028000
 8001a44:	20040060 	.word	0x20040060
 8001a48:	20040000 	.word	0x20040000
 8001a4c:	20054d50 	.word	0x20054d50
 8001a50:	080278f0 	.word	0x080278f0
 8001a54:	20054c98 	.word	0x20054c98
 8001a58:	20054c9c 	.word	0x20054c9c
 8001a5c:	08023f84 	.word	0x08023f84
 8001a60:	08001bc9 	.word	0x08001bc9
 8001a64:	20050004 	.word	0x20050004
 8001a68:	20054d88 	.word	0x20054d88

08001a6c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b092      	sub	sp, #72	; 0x48
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2230      	movs	r2, #48	; 0x30
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f021 fa8b 	bl	8022fa8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2230      	movs	r2, #48	; 0x30
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f021 fa84 	bl	8022fa8 <memset>

  for(q = p; q != NULL; q = q->next)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8001aa4:	e045      	b.n	8001b32 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8001aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d902      	bls.n	8001ab2 <low_level_output+0x46>
      return ERR_IF;
 8001aac:	f06f 030b 	mvn.w	r3, #11
 8001ab0:	e065      	b.n	8001b7e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8001ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	3348      	adds	r3, #72	; 0x48
 8001ac2:	443b      	add	r3, r7
 8001ac4:	3b3c      	subs	r3, #60	; 0x3c
 8001ac6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8001ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aca:	895b      	ldrh	r3, [r3, #10]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	3348      	adds	r3, #72	; 0x48
 8001ada:	443b      	add	r3, r7
 8001adc:	3b38      	subs	r3, #56	; 0x38
 8001ade:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d011      	beq.n	8001b0a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8001ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	f107 000c 	add.w	r0, r7, #12
 8001aee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001af0:	460b      	mov	r3, r1
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	440b      	add	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	18c1      	adds	r1, r0, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	3348      	adds	r3, #72	; 0x48
 8001b04:	443b      	add	r3, r7
 8001b06:	3b34      	subs	r3, #52	; 0x34
 8001b08:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8001b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8001b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3348      	adds	r3, #72	; 0x48
 8001b1e:	443b      	add	r3, r7
 8001b20:	3b34      	subs	r3, #52	; 0x34
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b28:	3301      	adds	r3, #1
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8001b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	643b      	str	r3, [r7, #64]	; 0x40
 8001b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1b6      	bne.n	8001aa6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	891b      	ldrh	r3, [r3, #8]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <low_level_output+0x11c>)
 8001b40:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <low_level_output+0x11c>)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <low_level_output+0x11c>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8001b50:	6838      	ldr	r0, [r7, #0]
 8001b52:	f017 f8db 	bl	8018d0c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8001b56:	490c      	ldr	r1, [pc, #48]	; (8001b88 <low_level_output+0x11c>)
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <low_level_output+0x120>)
 8001b5a:	f002 fe1f 	bl	800479c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8001b5e:	bf00      	nop
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <low_level_output+0x124>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00f fc79 	bl	8011460 <osSemaphoreAcquire>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f5      	bne.n	8001b60 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <low_level_output+0x120>)
 8001b76:	f002 ff90 	bl	8004a9a <HAL_ETH_ReleaseTxPacket>

  return errval;
 8001b7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3748      	adds	r7, #72	; 0x48
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20054d50 	.word	0x20054d50
 8001b8c:	20054ca0 	.word	0x20054ca0
 8001b90:	20054c9c 	.word	0x20054c9c

08001b94 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <low_level_input+0x2c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d105      	bne.n	8001bb4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <low_level_input+0x30>)
 8001bb0:	f002 fe45 	bl	800483e <HAL_ETH_ReadData>
  }

  return p;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20054c94 	.word	0x20054c94
 8001bc4:	20054ca0 	.word	0x20054ca0

08001bc8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <ethernetif_input+0x50>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00f fc3d 	bl	8011460 <osSemaphoreAcquire>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f5      	bne.n	8001bd8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8001bec:	68b8      	ldr	r0, [r7, #8]
 8001bee:	f7ff ffd1 	bl	8001b94 <low_level_input>
 8001bf2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	4798      	blx	r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f016 ffd8 	bl	8018bc0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ea      	bne.n	8001bec <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8001c16:	e7df      	b.n	8001bd8 <ethernetif_input+0x10>
 8001c18:	20054c98 	.word	0x20054c98

08001c1c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <ethernetif_init+0x1c>
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <ethernetif_init+0x48>)
 8001c2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c30:	490d      	ldr	r1, [pc, #52]	; (8001c68 <ethernetif_init+0x4c>)
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <ethernetif_init+0x50>)
 8001c34:	f021 f8e0 	bl	8022df8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2273      	movs	r2, #115	; 0x73
 8001c3c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2274      	movs	r2, #116	; 0x74
 8001c44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <ethernetif_init+0x54>)
 8001c4c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <ethernetif_init+0x58>)
 8001c52:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fdd1 	bl	80017fc <low_level_init>

  return ERR_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	08023f8c 	.word	0x08023f8c
 8001c68:	08023fb4 	.word	0x08023fb4
 8001c6c:	08023fc4 	.word	0x08023fc4
 8001c70:	08020699 	.word	0x08020699
 8001c74:	08001a6d 	.word	0x08001a6d

08001c78 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <pbuf_free_custom+0x34>)
 8001c88:	f016 f8d2 	bl	8017e30 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <pbuf_free_custom+0x38>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <pbuf_free_custom+0x38>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <pbuf_free_custom+0x3c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00f fc2a 	bl	80114f8 <osSemaphoreRelease>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	080278f0 	.word	0x080278f0
 8001cb0:	20054c94 	.word	0x20054c94
 8001cb4:	20054c98 	.word	0x20054c98

08001cb8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001cbc:	f002 f9b6 	bl	800402c <HAL_GetTick>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a61      	ldr	r2, [pc, #388]	; (8001e6c <HAL_ETH_MspInit+0x1a4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f040 80bb 	bne.w	8001e62 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cec:	4b60      	ldr	r3, [pc, #384]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001cfc:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001d0a:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d10:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d1a:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a50      	ldr	r2, [pc, #320]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d38:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4c:	4a48      	ldr	r2, [pc, #288]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d6a:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d74:	4b3e      	ldr	r3, [pc, #248]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d88:	4a39      	ldr	r2, [pc, #228]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da6:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_ETH_MspInit+0x1a8>)
 8001db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dbe:	2332      	movs	r3, #50	; 0x32
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dce:	230b      	movs	r3, #11
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4826      	ldr	r0, [pc, #152]	; (8001e74 <HAL_ETH_MspInit+0x1ac>)
 8001dda:	f005 fae3 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001dde:	2386      	movs	r3, #134	; 0x86
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dee:	230b      	movs	r3, #11
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	4619      	mov	r1, r3
 8001df8:	481f      	ldr	r0, [pc, #124]	; (8001e78 <HAL_ETH_MspInit+0x1b0>)
 8001dfa:	f005 fad3 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e10:	230b      	movs	r3, #11
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4818      	ldr	r0, [pc, #96]	; (8001e7c <HAL_ETH_MspInit+0x1b4>)
 8001e1c:	f005 fac2 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e32:	230b      	movs	r3, #11
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4810      	ldr	r0, [pc, #64]	; (8001e80 <HAL_ETH_MspInit+0x1b8>)
 8001e3e:	f005 fab1 	bl	80073a4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2105      	movs	r1, #5
 8001e46:	206a      	movs	r0, #106	; 0x6a
 8001e48:	f002 f9ee 	bl	8004228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001e4c:	206a      	movs	r0, #106	; 0x6a
 8001e4e:	f002 fa05 	bl	800425c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2105      	movs	r1, #5
 8001e56:	206b      	movs	r0, #107	; 0x6b
 8001e58:	f002 f9e6 	bl	8004228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001e5c:	206b      	movs	r0, #107	; 0x6b
 8001e5e:	f002 f9fd 	bl	800425c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001e62:	bf00      	nop
 8001e64:	3738      	adds	r7, #56	; 0x38
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40028000 	.word	0x40028000
 8001e70:	44020c00 	.word	0x44020c00
 8001e74:	42020800 	.word	0x42020800
 8001e78:	42020000 	.word	0x42020000
 8001e7c:	42020400 	.word	0x42020400
 8001e80:	42021800 	.word	0x42021800

08001e84 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <ETH_PHY_IO_Init+0x10>)
 8001e8a:	f003 fa25 	bl	80052d8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20054ca0 	.word	0x20054ca0

08001e98 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <ETH_PHY_IO_ReadReg+0x30>)
 8001ebc:	f002 ff76 	bl	8004dac <HAL_ETH_ReadPHYRegister>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e000      	b.n	8001ece <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20054ca0 	.word	0x20054ca0

08001edc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <ETH_PHY_IO_WriteReg+0x30>)
 8001ef0:	f002 ffb0 	bl	8004e54 <HAL_ETH_WritePHYRegister>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e000      	b.n	8001f02 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20054ca0 	.word	0x20054ca0

08001f10 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001f14:	f002 f88a 	bl	800402c <HAL_GetTick>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0a0      	sub	sp, #128	; 0x80
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	2264      	movs	r2, #100	; 0x64
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f021 f839 	bl	8022fa8 <memset>
  int32_t PHYLinkState = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f3e:	2300      	movs	r3, #0
 8001f40:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f42:	2300      	movs	r3, #0
 8001f44:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001f4a:	483a      	ldr	r0, [pc, #232]	; (8002034 <ethernet_link_thread+0x114>)
 8001f4c:	f000 f9cb 	bl	80022e6 <LAN8742_GetLinkState>
 8001f50:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <ethernet_link_thread+0x5e>
 8001f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	dc09      	bgt.n	8001f7e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8001f6a:	4833      	ldr	r0, [pc, #204]	; (8002038 <ethernet_link_thread+0x118>)
 8001f6c:	f002 fb9e 	bl	80046ac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8001f70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f72:	f016 f9e1 	bl	8018338 <netif_set_down>
    netif_set_link_down(netif);
 8001f76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f78:	f016 fa44 	bl	8018404 <netif_set_link_down>
 8001f7c:	e055      	b.n	800202a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d14e      	bne.n	800202a <ethernet_link_thread+0x10a>
 8001f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	dd4b      	ble.n	800202a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8001f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f94:	3b02      	subs	r3, #2
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d82a      	bhi.n	8001ff0 <ethernet_link_thread+0xd0>
 8001f9a:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <ethernet_link_thread+0x80>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fc3 	.word	0x08001fc3
 8001fa8:	08001fd3 	.word	0x08001fd3
 8001fac:	08001fe3 	.word	0x08001fe3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001fb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001fc0:	e017      	b.n	8001ff2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001fd0:	e00f      	b.n	8001ff2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001fe0:	e007      	b.n	8001ff2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001fee:	e000      	b.n	8001ff2 <ethernet_link_thread+0xd2>
    default:
      break;
 8001ff0:	bf00      	nop
    }

    if(linkchanged)
 8001ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	480e      	ldr	r0, [pc, #56]	; (8002038 <ethernet_link_thread+0x118>)
 8002000:	f002 ff7c 	bl	8004efc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8002004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002006:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8002008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800200a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	4619      	mov	r1, r3
 8002012:	4809      	ldr	r0, [pc, #36]	; (8002038 <ethernet_link_thread+0x118>)
 8002014:	f003 f946 	bl	80052a4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <ethernet_link_thread+0x118>)
 800201a:	f002 fab9 	bl	8004590 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800201e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002020:	f016 f91e 	bl	8018260 <netif_set_up>
      netif_set_link_up(netif);
 8002024:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002026:	f016 f9b9 	bl	801839c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800202a:	2064      	movs	r0, #100	; 0x64
 800202c:	f00f f86a 	bl	8011104 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8002030:	e78b      	b.n	8001f4a <ethernet_link_thread+0x2a>
 8002032:	bf00      	nop
 8002034:	20054d88 	.word	0x20054d88
 8002038:	20054ca0 	.word	0x20054ca0

0800203c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af02      	add	r7, sp, #8
 8002042:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8002044:	4812      	ldr	r0, [pc, #72]	; (8002090 <HAL_ETH_RxAllocateCallback+0x54>)
 8002046:	f015 fe7f 	bl	8017d48 <memp_malloc_pool>
 800204a:	60f8      	str	r0, [r7, #12]
  if (p)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d014      	beq.n	800207c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f103 0220 	add.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_ETH_RxAllocateCallback+0x58>)
 8002060:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800206a:	9201      	str	r2, [sp, #4]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2241      	movs	r2, #65	; 0x41
 8002072:	2100      	movs	r1, #0
 8002074:	2000      	movs	r0, #0
 8002076:	f016 fbe9 	bl	801884c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800207a:	e005      	b.n	8002088 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_ETH_RxAllocateCallback+0x5c>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	080278f0 	.word	0x080278f0
 8002094:	08001c79 	.word	0x08001c79
 8002098:	20054c94 	.word	0x20054c94

0800209c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3b20      	subs	r3, #32
 80020ba:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	2200      	movs	r2, #0
 80020c6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e003      	b.n	80020e6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e009      	b.n	8002108 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	891a      	ldrh	r2, [r3, #8]
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	4413      	add	r3, r2
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f2      	bne.n	80020f4 <HAL_ETH_RxLinkCallback+0x58>

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
//  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3724      	adds	r7, #36	; 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f016 fd4b 	bl	8018bc0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <LAN8742_RegisterBusIO+0x28>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <LAN8742_RegisterBusIO+0x28>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <LAN8742_RegisterBusIO+0x28>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e014      	b.n	800218a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d17c      	bne.n	80022b0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e01c      	b.n	800220a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f107 0208 	add.w	r2, r7, #8
 80021d8:	2112      	movs	r1, #18
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	4798      	blx	r3
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da03      	bge.n	80021ec <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80021e4:	f06f 0304 	mvn.w	r3, #4
 80021e8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021ea:	e00b      	b.n	8002204 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d105      	bne.n	8002204 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
         break;
 8002202:	e005      	b.n	8002210 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b1f      	cmp	r3, #31
 800220e:	d9df      	bls.n	80021d0 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b1f      	cmp	r3, #31
 8002216:	d902      	bls.n	800221e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002218:	f06f 0302 	mvn.w	r3, #2
 800221c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d145      	bne.n	80022b0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6810      	ldr	r0, [r2, #0]
 800222c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002230:	2100      	movs	r1, #0
 8002232:	4798      	blx	r3
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	db37      	blt.n	80022aa <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6810      	ldr	r0, [r2, #0]
 8002242:	f107 0208 	add.w	r2, r7, #8
 8002246:	2100      	movs	r1, #0
 8002248:	4798      	blx	r3
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	db28      	blt.n	80022a2 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4798      	blx	r3
 8002256:	4603      	mov	r3, r0
 8002258:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800225a:	e01c      	b.n	8002296 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4798      	blx	r3
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800226e:	d80e      	bhi.n	800228e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6810      	ldr	r0, [r2, #0]
 8002278:	f107 0208 	add.w	r2, r7, #8
 800227c:	2100      	movs	r1, #0
 800227e:	4798      	blx	r3
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	da07      	bge.n	8002296 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8002286:	f06f 0304 	mvn.w	r3, #4
 800228a:	613b      	str	r3, [r7, #16]
                 break;
 800228c:	e010      	b.n	80022b0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800228e:	f06f 0301 	mvn.w	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
               break;
 8002294:	e00c      	b.n	80022b0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1dd      	bne.n	800225c <LAN8742_Init+0xc6>
 80022a0:	e006      	b.n	80022b0 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80022a2:	f06f 0304 	mvn.w	r3, #4
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	e002      	b.n	80022b0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80022aa:	f06f 0303 	mvn.w	r3, #3
 80022ae:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d112      	bne.n	80022dc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	4798      	blx	r3
 80022bc:	4603      	mov	r3, r0
 80022be:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80022c0:	bf00      	nop
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	4798      	blx	r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022d4:	d9f5      	bls.n	80022c2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	605a      	str	r2, [r3, #4]
   }

   return status;
 80022dc:	693b      	ldr	r3, [r7, #16]
 }
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6810      	ldr	r0, [r2, #0]
 80022fa:	f107 020c 	add.w	r2, r7, #12
 80022fe:	2101      	movs	r1, #1
 8002300:	4798      	blx	r3
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	da02      	bge.n	800230e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002308:	f06f 0304 	mvn.w	r3, #4
 800230c:	e06e      	b.n	80023ec <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6810      	ldr	r0, [r2, #0]
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	2101      	movs	r1, #1
 800231c:	4798      	blx	r3
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	da02      	bge.n	800232a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002324:	f06f 0304 	mvn.w	r3, #4
 8002328:	e060      	b.n	80023ec <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002334:	2301      	movs	r3, #1
 8002336:	e059      	b.n	80023ec <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6810      	ldr	r0, [r2, #0]
 8002340:	f107 020c 	add.w	r2, r7, #12
 8002344:	2100      	movs	r1, #0
 8002346:	4798      	blx	r3
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	da02      	bge.n	8002354 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800234e:	f06f 0304 	mvn.w	r3, #4
 8002352:	e04b      	b.n	80023ec <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11b      	bne.n	8002396 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <LAN8742_GetLinkState+0x90>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002372:	2302      	movs	r3, #2
 8002374:	e03a      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002380:	2303      	movs	r3, #3
 8002382:	e033      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800238e:	2304      	movs	r3, #4
 8002390:	e02c      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002392:	2305      	movs	r3, #5
 8002394:	e02a      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6810      	ldr	r0, [r2, #0]
 800239e:	f107 020c 	add.w	r2, r7, #12
 80023a2:	211f      	movs	r1, #31
 80023a4:	4798      	blx	r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da02      	bge.n	80023b2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80023ac:	f06f 0304 	mvn.w	r3, #4
 80023b0:	e01c      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80023bc:	2306      	movs	r3, #6
 80023be:	e015      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 031c 	and.w	r3, r3, #28
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	d101      	bne.n	80023ce <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80023ca:	2302      	movs	r3, #2
 80023cc:	e00e      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 031c 	and.w	r3, r3, #28
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d101      	bne.n	80023dc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80023d8:	2303      	movs	r3, #3
 80023da:	e007      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 031c 	and.w	r3, r3, #28
 80023e2:	2b14      	cmp	r3, #20
 80023e4:	d101      	bne.n	80023ea <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80023e6:	2304      	movs	r3, #4
 80023e8:	e000      	b.n	80023ec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023ea:	2305      	movs	r3, #5
    }
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80023fa:	2301      	movs	r3, #1
 80023fc:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	e070      	b.n	80024e6 <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 8002404:	4a3c      	ldr	r2, [pc, #240]	; (80024f8 <CAN_Init+0x104>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f240 516c 	movw	r1, #1388	; 0x56c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 8002416:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <CAN_Init+0x104>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f240 516c 	movw	r1, #1388	; 0x56c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 800242a:	4a33      	ldr	r2, [pc, #204]	; (80024f8 <CAN_Init+0x104>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3308      	adds	r3, #8
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 800243e:	4a2e      	ldr	r2, [pc, #184]	; (80024f8 <CAN_Init+0x104>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f240 516c 	movw	r1, #1388	; 0x56c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	330c      	adds	r3, #12
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <CAN_Init+0x104>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f240 516c 	movw	r1, #1388	; 0x56c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3310      	adds	r3, #16
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 8002466:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <CAN_Init+0x104>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f240 516c 	movw	r1, #1388	; 0x56c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	3314      	adds	r3, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <CAN_Init+0x104>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3318      	adds	r3, #24
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 800248e:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <CAN_Init+0x104>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f240 516c 	movw	r1, #1388	; 0x56c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	331c      	adds	r3, #28
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <CAN_Init+0x104>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f240 516c 	movw	r1, #1388	; 0x56c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3320      	adds	r3, #32
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f240 526c 	movw	r2, #1388	; 0x56c
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	3398      	adds	r3, #152	; 0x98
 80024c2:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <CAN_Init+0x104>)
 80024c4:	1898      	adds	r0, r3, r2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f240 526c 	movw	r2, #1388	; 0x56c
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	33a8      	adds	r3, #168	; 0xa8
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <CAN_Init+0x104>)
 80024d4:	4413      	add	r3, r2
 80024d6:	1d19      	adds	r1, r3, #4
 80024d8:	2310      	movs	r3, #16
 80024da:	224c      	movs	r2, #76	; 0x4c
 80024dc:	f00d fd4a 	bl	800ff74 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3301      	adds	r3, #1
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	dd8b      	ble.n	8002404 <CAN_Init+0x10>

  }
  return ret;
 80024ec:	683b      	ldr	r3, [r7, #0]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20054da8 	.word	0x20054da8

080024fc <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af02      	add	r7, sp, #8
 8002502:	4604      	mov	r4, r0
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4623      	mov	r3, r4
 800250c:	71fb      	strb	r3, [r7, #7]
 800250e:	4603      	mov	r3, r0
 8002510:	71bb      	strb	r3, [r7, #6]
 8002512:	460b      	mov	r3, r1
 8002514:	717b      	strb	r3, [r7, #5]
 8002516:	4613      	mov	r3, r2
 8002518:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 800251a:	2301      	movs	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f240 526c 	movw	r2, #1388	; 0x56c
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	3330      	adds	r3, #48	; 0x30
 800252a:	4a90      	ldr	r2, [pc, #576]	; (800276c <CAN_Open+0x270>)
 800252c:	4413      	add	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <CAN_Open+0x3e>
 8002536:	2300      	movs	r3, #0
 8002538:	e114      	b.n	8002764 <CAN_Open+0x268>

  switch(ch)
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 80a8 	bne.w	8002692 <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4a8a      	ldr	r2, [pc, #552]	; (8002770 <CAN_Open+0x274>)
 8002546:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 800254e:	797b      	ldrb	r3, [r7, #5]
 8002550:	4a88      	ldr	r2, [pc, #544]	; (8002774 <CAN_Open+0x278>)
 8002552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	4a86      	ldr	r2, [pc, #536]	; (8002778 <CAN_Open+0x27c>)
 800255e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2201      	movs	r2, #1
 800256a:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2201      	movs	r2, #1
 8002570:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2201      	movs	r2, #1
 8002576:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 8002578:	4b80      	ldr	r3, [pc, #512]	; (800277c <CAN_Open+0x280>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	793b      	ldrb	r3, [r7, #4]
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 8002588:	4b7c      	ldr	r3, [pc, #496]	; (800277c <CAN_Open+0x280>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	793b      	ldrb	r3, [r7, #4]
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	4413      	add	r3, r2
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 8002598:	4b78      	ldr	r3, [pc, #480]	; (800277c <CAN_Open+0x280>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	793b      	ldrb	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 80025a8:	4b74      	ldr	r3, [pc, #464]	; (800277c <CAN_Open+0x280>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	793b      	ldrb	r3, [r7, #4]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	4413      	add	r3, r2
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 80025b8:	4b71      	ldr	r3, [pc, #452]	; (8002780 <CAN_Open+0x284>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4413      	add	r3, r2
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <CAN_Open+0x284>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <CAN_Open+0x284>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4413      	add	r3, r2
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 80025ee:	4b64      	ldr	r3, [pc, #400]	; (8002780 <CAN_Open+0x284>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4413      	add	r3, r2
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	221c      	movs	r2, #28
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2208      	movs	r2, #8
 800260a:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2200      	movs	r2, #0
 8002610:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4a55      	ldr	r2, [pc, #340]	; (800276c <CAN_Open+0x270>)
 8002616:	f240 516c 	movw	r1, #1388	; 0x56c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	332c      	adds	r3, #44	; 0x2c
 8002622:	79ba      	ldrb	r2, [r7, #6]
 8002624:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	4a50      	ldr	r2, [pc, #320]	; (800276c <CAN_Open+0x270>)
 800262a:	f240 516c 	movw	r1, #1388	; 0x56c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	332d      	adds	r3, #45	; 0x2d
 8002636:	797a      	ldrb	r2, [r7, #5]
 8002638:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	4a4b      	ldr	r2, [pc, #300]	; (800276c <CAN_Open+0x270>)
 800263e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	332e      	adds	r3, #46	; 0x2e
 800264a:	793a      	ldrb	r2, [r7, #4]
 800264c:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	4a46      	ldr	r2, [pc, #280]	; (800276c <CAN_Open+0x270>)
 8002652:	f240 516c 	movw	r1, #1388	; 0x56c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	332f      	adds	r3, #47	; 0x2f
 800265e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002662:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	4a41      	ldr	r2, [pc, #260]	; (800276c <CAN_Open+0x270>)
 8002668:	f240 516c 	movw	r1, #1388	; 0x56c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4a3c      	ldr	r2, [pc, #240]	; (800276c <CAN_Open+0x270>)
 800267c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3328      	adds	r3, #40	; 0x28
 8002688:	4a3e      	ldr	r2, [pc, #248]	; (8002784 <CAN_Open+0x288>)
 800268a:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 800268c:	2301      	movs	r3, #1
 800268e:	617b      	str	r3, [r7, #20]

      break;
 8002690:	bf00      	nop
  }

  if(ret != TRUE)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <CAN_Open+0x1a0>
  {
    return FALSE;
 8002698:	2300      	movs	r3, #0
 800269a:	e063      	b.n	8002764 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 800269c:	6938      	ldr	r0, [r7, #16]
 800269e:	f003 fc03 	bl	8005ea8 <HAL_FDCAN_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <CAN_Open+0x1b0>
  {
    return FALSE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e05b      	b.n	8002764 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 80026ac:	79f8      	ldrb	r0, [r7, #7]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	f000 f866 	bl	8002788 <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 80026bc:	79f8      	ldrb	r0, [r7, #7]
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	2201      	movs	r2, #1
 80026c6:	2100      	movs	r1, #0
 80026c8:	f000 f85e 	bl	8002788 <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80026cc:	2300      	movs	r3, #0
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	2202      	movs	r2, #2
 80026d4:	2102      	movs	r1, #2
 80026d6:	6938      	ldr	r0, [r7, #16]
 80026d8:	f003 fd9a 	bl	8006210 <HAL_FDCAN_ConfigGlobalFilter>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <CAN_Open+0x1ea>
  {
    return FALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e03e      	b.n	8002764 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4a20      	ldr	r2, [pc, #128]	; (800276c <CAN_Open+0x270>)
 80026ea:	f240 516c 	movw	r1, #1388	; 0x56c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3328      	adds	r3, #40	; 0x28
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	4619      	mov	r1, r3
 80026fc:	6938      	ldr	r0, [r7, #16]
 80026fe:	f004 f866 	bl	80067ce <HAL_FDCAN_ActivateNotification>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <CAN_Open+0x210>
  {
    return FALSE;
 8002708:	2300      	movs	r3, #0
 800270a:	e02b      	b.n	8002764 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 800271a:	2200      	movs	r2, #0
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	6938      	ldr	r0, [r7, #16]
 8002720:	f003 fda7 	bl	8006272 <HAL_FDCAN_ConfigTxDelayCompensation>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <CAN_Open+0x232>
 800272a:	2300      	movs	r3, #0
 800272c:	e01a      	b.n	8002764 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f003 fdc1 	bl	80062b6 <HAL_FDCAN_EnableTxDelayCompensation>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <CAN_Open+0x242>
 800273a:	2300      	movs	r3, #0
 800273c:	e012      	b.n	8002764 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 800273e:	6938      	ldr	r0, [r7, #16]
 8002740:	f003 fdda 	bl	80062f8 <HAL_FDCAN_Start>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <CAN_Open+0x252>
  {
    return FALSE;
 800274a:	2300      	movs	r3, #0
 800274c:	e00a      	b.n	8002764 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <CAN_Open+0x270>)
 8002752:	f240 516c 	movw	r1, #1388	; 0x56c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3304      	adds	r3, #4
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

  return ret;
 8002762:	697b      	ldr	r3, [r7, #20]
}
 8002764:	4618      	mov	r0, r3
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	20054da8 	.word	0x20054da8
 8002770:	4000a400 	.word	0x4000a400
 8002774:	08027a4c 	.word	0x08027a4c
 8002778:	08027a58 	.word	0x08027a58
 800277c:	20050018 	.word	0x20050018
 8002780:	2005001c 	.word	0x2005001c
 8002784:	000e0007 	.word	0x000e0007

08002788 <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
 8002794:	460b      	mov	r3, r1
 8002796:	71bb      	strb	r3, [r7, #6]
 8002798:	4613      	mov	r3, r2
 800279a:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <CAN_ConfigFilter+0x22>
 80027a6:	2300      	movs	r3, #0
 80027a8:	e034      	b.n	8002814 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 80027aa:	797b      	ldrb	r3, [r7, #5]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e002      	b.n	80027bc <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80027b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <CAN_ConfigFilter+0x94>)
 80027c0:	f240 516c 	movw	r1, #1388	; 0x56c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3324      	adds	r3, #36	; 0x24
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d102      	bne.n	80027d8 <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 80027d2:	2301      	movs	r3, #1
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	e001      	b.n	80027dc <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 80027d8:	2302      	movs	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 80027dc:	79bb      	ldrb	r3, [r7, #6]
 80027de:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 80027e0:	2302      	movs	r3, #2
 80027e2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f240 526c 	movw	r2, #1388	; 0x56c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	3330      	adds	r3, #48	; 0x30
 80027f8:	4a08      	ldr	r2, [pc, #32]	; (800281c <CAN_ConfigFilter+0x94>)
 80027fa:	4413      	add	r3, r2
 80027fc:	f107 020c 	add.w	r2, r7, #12
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fcaa 	bl	800615c <HAL_FDCAN_ConfigFilter>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 800280e:	2301      	movs	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002814:	4618      	mov	r0, r3
 8002816:	3728      	adds	r7, #40	; 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20054da8 	.word	0x20054da8

08002820 <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d901      	bls.n	8002834 <CAN_MsgAvailable+0x14>
 8002830:	2300      	movs	r3, #0
 8002832:	e00b      	b.n	800284c <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f240 526c 	movw	r2, #1388	; 0x56c
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	3398      	adds	r3, #152	; 0x98
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <CAN_MsgAvailable+0x34>)
 8002842:	4413      	add	r3, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f00d fc78 	bl	801013a <qbufferAvailable>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20054da8 	.word	0x20054da8

08002858 <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b090      	sub	sp, #64	; 0x40
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 8002866:	2301      	movs	r3, #1
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d901      	bls.n	8002874 <CAN_MsgWrite+0x1c>
 8002870:	2300      	movs	r3, #0
 8002872:	e083      	b.n	800297c <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	4a43      	ldr	r2, [pc, #268]	; (8002984 <CAN_MsgWrite+0x12c>)
 8002878:	f240 516c 	movw	r1, #1388	; 0x56c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3308      	adds	r3, #8
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <CAN_MsgWrite+0x3a>
 800288e:	2300      	movs	r3, #0
 8002890:	e074      	b.n	800297c <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	f240 526c 	movw	r2, #1388	; 0x56c
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	3330      	adds	r3, #48	; 0x30
 800289e:	4a39      	ldr	r2, [pc, #228]	; (8002984 <CAN_MsgWrite+0x12c>)
 80028a0:	4413      	add	r3, r2
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <CAN_MsgWrite+0x5c>
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d003      	beq.n	80028ba <CAN_MsgWrite+0x62>
 80028b2:	e006      	b.n	80028c2 <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
        break;
 80028b8:	e003      	b.n	80028c2 <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 80028ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028be:	617b      	str	r3, [r7, #20]
        break;
 80028c0:	bf00      	nop
    }

    switch(p_msg->frame)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d011      	beq.n	80028f0 <CAN_MsgWrite+0x98>
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	dc16      	bgt.n	80028fe <CAN_MsgWrite+0xa6>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <CAN_MsgWrite+0x82>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d005      	beq.n	80028e4 <CAN_MsgWrite+0x8c>
 80028d8:	e011      	b.n	80028fe <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 80028da:	2300      	movs	r3, #0
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028e2:	e00c      	b.n	80028fe <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80028e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028ee:	e006      	b.n	80028fe <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80028f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80028f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028fc:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 8002908:	2300      	movs	r3, #0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800290c:	2300      	movs	r3, #0
 800290e:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800291a:	461a      	mov	r2, r3
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <CAN_MsgWrite+0x130>)
 800291e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002922:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002926:	f003 ff40 	bl	80067aa <HAL_FDCAN_GetTxFifoFreeLevel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 8002930:	2300      	movs	r3, #0
 8002932:	e023      	b.n	800297c <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 8002934:	f001 fb7a 	bl	800402c <HAL_GetTick>
 8002938:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1d9a      	adds	r2, r3, #6
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4619      	mov	r1, r3
 8002944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002946:	f003 fd6f 	bl	8006428 <HAL_FDCAN_AddMessageToTxFifoQ>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d112      	bne.n	8002976 <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002950:	e00a      	b.n	8002968 <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 8002952:	f001 fb6b 	bl	800402c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	429a      	cmp	r2, r3
 8002960:	d802      	bhi.n	8002968 <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 8002962:	2300      	movs	r3, #0
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002966:	e008      	b.n	800297a <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800296a:	f003 ff1e 	bl	80067aa <HAL_FDCAN_GetTxFifoFreeLevel>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ee      	beq.n	8002952 <CAN_MsgWrite+0xfa>
 8002974:	e001      	b.n	800297a <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 8002976:	2300      	movs	r3, #0
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 800297a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3740      	adds	r7, #64	; 0x40
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20054da8 	.word	0x20054da8
 8002988:	08027a0c 	.word	0x08027a0c

0800298c <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 8002998:	2301      	movs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d901      	bls.n	80029a6 <CAN_MsgRead+0x1a>
 80029a2:	2300      	movs	r3, #0
 80029a4:	e00e      	b.n	80029c4 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f240 526c 	movw	r2, #1388	; 0x56c
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	3398      	adds	r3, #152	; 0x98
 80029b2:	4a06      	ldr	r2, [pc, #24]	; (80029cc <CAN_MsgRead+0x40>)
 80029b4:	4413      	add	r3, r2
 80029b6:	2201      	movs	r2, #1
 80029b8:	6839      	ldr	r1, [r7, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f00d fb52 	bl	8010064 <qbufferRead>
 80029c0:	60f8      	str	r0, [r7, #12]

  return ret;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20054da8 	.word	0x20054da8

080029d0 <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d901      	bls.n	80029e8 <CAN_GetRxErrCount+0x18>
 80029e4:	2300      	movs	r3, #0
 80029e6:	e015      	b.n	8002a14 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f240 526c 	movw	r2, #1388	; 0x56c
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	3330      	adds	r3, #48	; 0x30
 80029f4:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <CAN_GetRxErrCount+0x4c>)
 80029f6:	4413      	add	r3, r2
 80029f8:	f107 020c 	add.w	r2, r7, #12
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 feae 	bl	8006760 <HAL_FDCAN_GetErrorCounters>
 8002a04:	4603      	mov	r3, r0
 8002a06:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 8002a08:	7f7b      	ldrb	r3, [r7, #29]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002a12:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20054da8 	.word	0x20054da8

08002a20 <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d901      	bls.n	8002a38 <CAN_GetTxErrCount+0x18>
 8002a34:	2300      	movs	r3, #0
 8002a36:	e015      	b.n	8002a64 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f240 526c 	movw	r2, #1388	; 0x56c
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	3330      	adds	r3, #48	; 0x30
 8002a44:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <CAN_GetTxErrCount+0x4c>)
 8002a46:	4413      	add	r3, r2
 8002a48:	f107 020c 	add.w	r2, r7, #12
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fe86 	bl	8006760 <HAL_FDCAN_GetErrorCounters>
 8002a54:	4603      	mov	r3, r0
 8002a56:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 8002a58:	7f7b      	ldrb	r3, [r7, #29]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002a62:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20054da8 	.word	0x20054da8

08002a70 <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	3398      	adds	r3, #152	; 0x98
 8002a88:	4a4b      	ldr	r2, [pc, #300]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00d fb41 	bl	8010114 <qbufferPeekWrite>
 8002a92:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	4a48      	ldr	r2, [pc, #288]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002a98:	f240 516c 	movw	r1, #1388	; 0x56c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa8:	3306      	adds	r3, #6
 8002aaa:	f107 020c 	add.w	r2, r7, #12
 8002aae:	6838      	ldr	r0, [r7, #0]
 8002ab0:	f003 fcfe 	bl	80064b0 <HAL_FDCAN_GetRxMessage>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d179      	bne.n	8002bae <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002ace:	e006      	b.n	8002ade <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <CAN_RxFifoCallback+0x14c>)
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af8:	d10d      	bne.n	8002b16 <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b00:	d104      	bne.n	8002b0c <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002b0a:	e008      	b.n	8002b1e <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002b14:	e003      	b.n	8002b1e <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f240 526c 	movw	r2, #1388	; 0x56c
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	3398      	adds	r3, #152	; 0x98
 8002b2a:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00d fa3d 	bl	800ffb2 <qbufferWrite>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d011      	beq.n	8002b62 <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	491d      	ldr	r1, [pc, #116]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002b42:	f240 526c 	movw	r2, #1388	; 0x56c
 8002b46:	fb03 f202 	mul.w	r2, r3, r2
 8002b4a:	440a      	add	r2, r1
 8002b4c:	3214      	adds	r2, #20
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	3201      	adds	r2, #1
 8002b52:	4919      	ldr	r1, [pc, #100]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002b54:	f240 506c 	movw	r0, #1388	; 0x56c
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3314      	adds	r3, #20
 8002b60:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002b66:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3394      	adds	r3, #148	; 0x94
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01a      	beq.n	8002bae <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002b7c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3394      	adds	r3, #148	; 0x94
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b8c:	4798      	blx	r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10c      	bne.n	8002bae <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f240 526c 	movw	r2, #1388	; 0x56c
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	3398      	adds	r3, #152	; 0x98
 8002ba0:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <CAN_RxFifoCallback+0x148>)
 8002ba2:	4413      	add	r3, r2
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f00d fa5b 	bl	8010064 <qbufferRead>
      }
    }
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3738      	adds	r7, #56	; 0x38
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20054da8 	.word	0x20054da8
 8002bbc:	080279cc 	.word	0x080279cc

08002bc0 <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d828      	bhi.n	8002c22 <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f240 526c 	movw	r2, #1388	; 0x56c
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	3330      	adds	r3, #48	; 0x30
 8002bdc:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <CAN_Recovery+0x6c>)
 8002bde:	4413      	add	r3, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fbb1 	bl	8006348 <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	f240 526c 	movw	r2, #1388	; 0x56c
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	3330      	adds	r3, #48	; 0x30
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <CAN_Recovery+0x6c>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fb7e 	bl	80062f8 <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	490b      	ldr	r1, [pc, #44]	; (8002c2c <CAN_Recovery+0x6c>)
 8002c00:	f240 526c 	movw	r2, #1388	; 0x56c
 8002c04:	fb03 f202 	mul.w	r2, r3, r2
 8002c08:	440a      	add	r2, r1
 8002c0a:	3210      	adds	r2, #16
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	3201      	adds	r2, #1
 8002c10:	4906      	ldr	r1, [pc, #24]	; (8002c2c <CAN_Recovery+0x6c>)
 8002c12:	f240 506c 	movw	r0, #1388	; 0x56c
 8002c16:	fb00 f303 	mul.w	r3, r0, r3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e000      	b.n	8002c24 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 8002c22:	bf00      	nop
}
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20054da8 	.word	0x20054da8

08002c30 <CAN_Update>:

BOOL     CAN_Update(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	e02f      	b.n	8002ca0 <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f240 526c 	movw	r2, #1388	; 0x56c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <CAN_Update+0x80>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7b1b      	ldrb	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <CAN_Update+0x2e>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d011      	beq.n	8002c80 <CAN_Update+0x50>
 8002c5c:	e01d      	b.n	8002c9a <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d014      	beq.n	8002c94 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ffa6 	bl	8002bc0 <CAN_Recovery>
          p_can->state = 1;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c7e:	e009      	b.n	8002c94 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <CAN_Update+0x68>
        {
          p_can->state = 0;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	731a      	strb	r2, [r3, #12]
        }
        break;
 8002c92:	e001      	b.n	8002c98 <CAN_Update+0x68>
        break;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <CAN_Update+0x6a>
        break;
 8002c98:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	ddcc      	ble.n	8002c40 <CAN_Update+0x10>
    }
  }

  return ret;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20054da8 	.word	0x20054da8

08002cb4 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d822      	bhi.n	8002d0a <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <CAN_ErrPrint+0x60>)
 8002cc8:	f240 516c 	movw	r1, #1388	; 0x56c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <CAN_ErrPrint+0x34>
 8002ce2:	480d      	ldr	r0, [pc, #52]	; (8002d18 <CAN_ErrPrint+0x64>)
 8002ce4:	f001 f81c 	bl	8003d20 <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <CAN_ErrPrint+0x44>
 8002cf2:	480a      	ldr	r0, [pc, #40]	; (8002d1c <CAN_ErrPrint+0x68>)
 8002cf4:	f001 f814 	bl	8003d20 <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <CAN_ErrPrint+0x58>
 8002d02:	4807      	ldr	r0, [pc, #28]	; (8002d20 <CAN_ErrPrint+0x6c>)
 8002d04:	f001 f80c 	bl	8003d20 <UART_Printf>
 8002d08:	e000      	b.n	8002d0c <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 8002d0a:	bf00      	nop
}
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20054da8 	.word	0x20054da8
 8002d18:	08023fec 	.word	0x08023fec
 8002d1c:	08024008 	.word	0x08024008
 8002d20:	08024024 	.word	0x08024024

08002d24 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08e      	sub	sp, #56	; 0x38
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	f240 526c 	movw	r2, #1388	; 0x56c
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	3330      	adds	r3, #48	; 0x30
 8002d3a:	4a48      	ldr	r2, [pc, #288]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f107 020c 	add.w	r2, r7, #12
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 fcbb 	bl	80066c0 <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d014      	beq.n	8002d7a <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4a42      	ldr	r2, [pc, #264]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002d54:	f240 516c 	movw	r1, #1388	; 0x56c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3308      	adds	r3, #8
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	493c      	ldr	r1, [pc, #240]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002d6a:	f240 506c 	movw	r0, #1388	; 0x56c
 8002d6e:	fb00 f303 	mul.w	r3, r0, r3
 8002d72:	440b      	add	r3, r1
 8002d74:	3308      	adds	r3, #8
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e013      	b.n	8002da2 <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4a37      	ldr	r2, [pc, #220]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002d7e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3308      	adds	r3, #8
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	4932      	ldr	r1, [pc, #200]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002d94:	f240 506c 	movw	r0, #1388	; 0x56c
 8002d98:	fb00 f303 	mul.w	r3, r0, r3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3308      	adds	r3, #8
 8002da0:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d014      	beq.n	8002dd2 <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002dac:	f240 516c 	movw	r1, #1388	; 0x56c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3308      	adds	r3, #8
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f042 0202 	orr.w	r2, r2, #2
 8002dc0:	4926      	ldr	r1, [pc, #152]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002dc2:	f240 506c 	movw	r0, #1388	; 0x56c
 8002dc6:	fb00 f303 	mul.w	r3, r0, r3
 8002dca:	440b      	add	r3, r1
 8002dcc:	3308      	adds	r3, #8
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e013      	b.n	8002dfa <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002dd6:	f240 516c 	movw	r1, #1388	; 0x56c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3308      	adds	r3, #8
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f022 0202 	bic.w	r2, r2, #2
 8002dea:	491c      	ldr	r1, [pc, #112]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002dec:	f240 506c 	movw	r0, #1388	; 0x56c
 8002df0:	fb00 f303 	mul.w	r3, r0, r3
 8002df4:	440b      	add	r3, r1
 8002df6:	3308      	adds	r3, #8
 8002df8:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d014      	beq.n	8002e2a <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002e04:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3308      	adds	r3, #8
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f042 0204 	orr.w	r2, r2, #4
 8002e18:	4910      	ldr	r1, [pc, #64]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002e1a:	f240 506c 	movw	r0, #1388	; 0x56c
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	440b      	add	r3, r1
 8002e24:	3308      	adds	r3, #8
 8002e26:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8002e28:	e013      	b.n	8002e52 <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002e2e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3308      	adds	r3, #8
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	4906      	ldr	r1, [pc, #24]	; (8002e5c <CAN_ErrUpdate+0x138>)
 8002e44:	f240 506c 	movw	r0, #1388	; 0x56c
 8002e48:	fb00 f303 	mul.w	r3, r0, r3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3308      	adds	r3, #8
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	3738      	adds	r7, #56	; 0x38
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20054da8 	.word	0x20054da8

08002e60 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff57 	bl	8002d24 <CAN_ErrUpdate>
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_FDCAN_ErrorCallback+0x54>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <HAL_FDCAN_ErrorCallback+0x54>)
 8002e94:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d013      	beq.n	8002ec6 <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <HAL_FDCAN_ErrorCallback+0x58>)
 8002ea2:	f240 516c 	movw	r1, #1388	; 0x56c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3308      	adds	r3, #8
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	f042 0210 	orr.w	r2, r2, #16
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <HAL_FDCAN_ErrorCallback+0x58>)
 8002eb8:	f240 506c 	movw	r0, #1388	; 0x56c
 8002ebc:	fb00 f303 	mul.w	r3, r0, r3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	601a      	str	r2, [r3, #0]
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20055314 	.word	0x20055314
 8002ed8:	20054da8 	.word	0x20054da8

08002edc <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <FDCAN1_IT0_IRQHandler+0x10>)
 8002ee2:	f003 fd5a 	bl	800699a <HAL_FDCAN_IRQHandler>
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20054dd8 	.word	0x20054dd8

08002ef0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7ff fdb2 	bl	8002a70 <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002f1e:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a02      	ldr	r2, [pc, #8]	; (8002f3c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002f32:	6213      	str	r3, [r2, #32]
  }
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20054da8 	.word	0x20054da8

08002f40 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0cc      	sub	sp, #304	; 0x130
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f4e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2100      	movs	r1, #0
 8002f72:	f020 f819 	bl	8022fa8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a37      	ldr	r2, [pc, #220]	; (8003060 <HAL_FDCAN_MspInit+0x120>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d166      	bne.n	8003056 <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f8c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0304 	mov.w	r3, #4
 8002f98:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fa0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002faa:	f107 0310 	add.w	r3, r7, #16
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f005 fb70 	bl	8008694 <HAL_RCCEx_PeriphCLKConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8002fba:	f7fd fee9 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_FDCAN_MspInit+0x124>)
 8002fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fc4:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_FDCAN_MspInit+0x124>)
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002fce:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_FDCAN_MspInit+0x124>)
 8002fd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fd4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fdc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fe6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002fea:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_FDCAN_MspInit+0x124>)
 8002fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <HAL_FDCAN_MspInit+0x124>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_FDCAN_MspInit+0x124>)
 8002ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003002:	f003 0201 	and.w	r2, r3, #1
 8003006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800300a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003014:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003018:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800301a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800301e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003034:	2309      	movs	r3, #9
 8003036:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800303e:	4619      	mov	r1, r3
 8003040:	4809      	ldr	r0, [pc, #36]	; (8003068 <HAL_FDCAN_MspInit+0x128>)
 8003042:	f004 f9af 	bl	80073a4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2105      	movs	r1, #5
 800304a:	2027      	movs	r0, #39	; 0x27
 800304c:	f001 f8ec 	bl	8004228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003050:	2027      	movs	r0, #39	; 0x27
 8003052:	f001 f903 	bl	800425c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003056:	bf00      	nop
 8003058:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	4000a400 	.word	0x4000a400
 8003064:	44020c00 	.word	0x44020c00
 8003068:	42020000 	.word	0x42020000

0800306c <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b0a1      	sub	sp, #132	; 0x84
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b02      	cmp	r3, #2
 8003082:	f040 822b 	bne.w	80034dc <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b03      	cmp	r3, #3
 800308a:	f000 80d3 	beq.w	8003234 <CLI_FDCANTest+0x1c8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b03      	cmp	r3, #3
 8003092:	f200 8223 	bhi.w	80034dc <CLI_FDCANTest+0x470>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d003      	beq.n	80030a4 <CLI_FDCANTest+0x38>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d062      	beq.n	8003168 <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 80030a2:	e21b      	b.n	80034dc <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030a8:	e057      	b.n	800315a <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 80030aa:	4b94      	ldr	r3, [pc, #592]	; (80032fc <CLI_FDCANTest+0x290>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <CLI_FDCANTest+0x60>
 80030b2:	4a93      	ldr	r2, [pc, #588]	; (8003300 <CLI_FDCANTest+0x294>)
 80030b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030b6:	f240 516c 	movw	r1, #1388	; 0x56c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3304      	adds	r3, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	488f      	ldr	r0, [pc, #572]	; (8003304 <CLI_FDCANTest+0x298>)
 80030c8:	f000 ff40 	bl	8003f4c <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 80030cc:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <CLI_FDCANTest+0x290>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00c      	beq.n	80030ee <CLI_FDCANTest+0x82>
 80030d4:	4a8a      	ldr	r2, [pc, #552]	; (8003300 <CLI_FDCANTest+0x294>)
 80030d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d8:	f240 516c 	movw	r1, #1388	; 0x56c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3314      	adds	r3, #20
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	4887      	ldr	r0, [pc, #540]	; (8003308 <CLI_FDCANTest+0x29c>)
 80030ea:	f000 ff2f 	bl	8003f4c <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 80030ee:	4b83      	ldr	r3, [pc, #524]	; (80032fc <CLI_FDCANTest+0x290>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <CLI_FDCANTest+0xa4>
 80030f6:	4a82      	ldr	r2, [pc, #520]	; (8003300 <CLI_FDCANTest+0x294>)
 80030f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030fa:	f240 516c 	movw	r1, #1388	; 0x56c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3318      	adds	r3, #24
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	4880      	ldr	r0, [pc, #512]	; (800330c <CLI_FDCANTest+0x2a0>)
 800310c:	f000 ff1e 	bl	8003f4c <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8003110:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <CLI_FDCANTest+0x290>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <CLI_FDCANTest+0xc6>
 8003118:	4a79      	ldr	r2, [pc, #484]	; (8003300 <CLI_FDCANTest+0x294>)
 800311a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800311c:	f240 516c 	movw	r1, #1388	; 0x56c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	331c      	adds	r3, #28
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4619      	mov	r1, r3
 800312c:	4878      	ldr	r0, [pc, #480]	; (8003310 <CLI_FDCANTest+0x2a4>)
 800312e:	f000 ff0d 	bl	8003f4c <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8003132:	4b72      	ldr	r3, [pc, #456]	; (80032fc <CLI_FDCANTest+0x290>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <CLI_FDCANTest+0xe8>
 800313a:	4a71      	ldr	r2, [pc, #452]	; (8003300 <CLI_FDCANTest+0x294>)
 800313c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800313e:	f240 516c 	movw	r1, #1388	; 0x56c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3320      	adds	r3, #32
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	4871      	ldr	r0, [pc, #452]	; (8003314 <CLI_FDCANTest+0x2a8>)
 8003150:	f000 fefc 	bl	8003f4c <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8003154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003156:	3301      	adds	r3, #1
 8003158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800315a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800315c:	2b00      	cmp	r3, #0
 800315e:	dda4      	ble.n	80030aa <CLI_FDCANTest+0x3e>
        ret = TRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8003164:	bf00      	nop
}
 8003166:	e1b9      	b.n	80034dc <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 800316c:	e05d      	b.n	800322a <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 800316e:	2000      	movs	r0, #0
 8003170:	f7ff fb56 	bl	8002820 <CAN_MsgAvailable>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d057      	beq.n	800322a <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 800317a:	f107 0310 	add.w	r3, r7, #16
 800317e:	4619      	mov	r1, r3
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff fc03 	bl	800298c <CAN_MsgRead>
            index %= 1000;
 8003186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003188:	4a63      	ldr	r2, [pc, #396]	; (8003318 <CLI_FDCANTest+0x2ac>)
 800318a:	fba2 1203 	umull	r1, r2, r2, r3
 800318e:	0992      	lsrs	r2, r2, #6
 8003190:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003194:	fb01 f202 	mul.w	r2, r1, r2
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <CLI_FDCANTest+0x290>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d006      	beq.n	80031b2 <CLI_FDCANTest+0x146>
 80031a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	67ba      	str	r2, [r7, #120]	; 0x78
 80031aa:	4619      	mov	r1, r3
 80031ac:	485b      	ldr	r0, [pc, #364]	; (800331c <CLI_FDCANTest+0x2b0>)
 80031ae:	f000 fecd 	bl	8003f4c <svDebugMessage>
            if (msg.id_type == CAN_STD)
 80031b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 80031ba:	4b50      	ldr	r3, [pc, #320]	; (80032fc <CLI_FDCANTest+0x290>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <CLI_FDCANTest+0x16c>
 80031c2:	4857      	ldr	r0, [pc, #348]	; (8003320 <CLI_FDCANTest+0x2b4>)
 80031c4:	f000 fec2 	bl	8003f4c <svDebugMessage>
 80031c8:	e006      	b.n	80031d8 <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <CLI_FDCANTest+0x290>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <CLI_FDCANTest+0x16c>
 80031d2:	4854      	ldr	r0, [pc, #336]	; (8003324 <CLI_FDCANTest+0x2b8>)
 80031d4:	f000 feba 	bl	8003f4c <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 80031d8:	4b48      	ldr	r3, [pc, #288]	; (80032fc <CLI_FDCANTest+0x290>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <CLI_FDCANTest+0x180>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	8aba      	ldrh	r2, [r7, #20]
 80031e4:	4619      	mov	r1, r3
 80031e6:	4850      	ldr	r0, [pc, #320]	; (8003328 <CLI_FDCANTest+0x2bc>)
 80031e8:	f000 feb0 	bl	8003f4c <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	677b      	str	r3, [r7, #116]	; 0x74
 80031f0:	e00f      	b.n	8003212 <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 80031f2:	4b42      	ldr	r3, [pc, #264]	; (80032fc <CLI_FDCANTest+0x290>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <CLI_FDCANTest+0x1a0>
 80031fa:	f107 0216 	add.w	r2, r7, #22
 80031fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	4849      	ldr	r0, [pc, #292]	; (800332c <CLI_FDCANTest+0x2c0>)
 8003208:	f000 fea0 	bl	8003f4c <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 800320c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320e:	3301      	adds	r3, #1
 8003210:	677b      	str	r3, [r7, #116]	; 0x74
 8003212:	8abb      	ldrh	r3, [r7, #20]
 8003214:	461a      	mov	r2, r3
 8003216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003218:	4293      	cmp	r3, r2
 800321a:	dbea      	blt.n	80031f2 <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 800321c:	4b37      	ldr	r3, [pc, #220]	; (80032fc <CLI_FDCANTest+0x290>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <CLI_FDCANTest+0x1be>
 8003224:	4842      	ldr	r0, [pc, #264]	; (8003330 <CLI_FDCANTest+0x2c4>)
 8003226:	f000 fe91 	bl	8003f4c <svDebugMessage>
        while(svCLI_KeepLoop())
 800322a:	f00d f88d 	bl	8010348 <svCLI_KeepLoop>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d19c      	bne.n	800316e <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <CLI_FDCANTest+0x294>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 800323e:	e145      	b.n	80034cc <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 8003240:	f000 fef4 	bl	800402c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324e:	f0c0 80be 	bcc.w	80033ce <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 8003252:	f000 feeb 	bl	800402c <HAL_GetTick>
 8003256:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8003264:	2302      	movs	r3, #2
 8003266:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 800326e:	2302      	movs	r3, #2
 8003270:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 8003272:	2301      	movs	r3, #1
 8003274:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 8003276:	2302      	movs	r3, #2
 8003278:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 800327a:	f107 0310 	add.w	r3, r7, #16
 800327e:	220a      	movs	r2, #10
 8003280:	4619      	mov	r1, r3
 8003282:	2000      	movs	r0, #0
 8003284:	f7ff fae8 	bl	8002858 <CAN_MsgWrite>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d070      	beq.n	8003370 <CLI_FDCANTest+0x304>
              index %= 1000;
 800328e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <CLI_FDCANTest+0x2ac>)
 8003292:	fba2 1203 	umull	r1, r2, r2, r3
 8003296:	0992      	lsrs	r2, r2, #6
 8003298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800329c:	fb01 f202 	mul.w	r2, r1, r2
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 80032a4:	4b15      	ldr	r3, [pc, #84]	; (80032fc <CLI_FDCANTest+0x290>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <CLI_FDCANTest+0x24e>
 80032ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b2:	4619      	mov	r1, r3
 80032b4:	481f      	ldr	r0, [pc, #124]	; (8003334 <CLI_FDCANTest+0x2c8>)
 80032b6:	f000 fe49 	bl	8003f4c <svDebugMessage>
              if (msg.id_type == CAN_STD)
 80032ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <CLI_FDCANTest+0x290>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <CLI_FDCANTest+0x274>
 80032ca:	4815      	ldr	r0, [pc, #84]	; (8003320 <CLI_FDCANTest+0x2b4>)
 80032cc:	f000 fe3e 	bl	8003f4c <svDebugMessage>
 80032d0:	e006      	b.n	80032e0 <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <CLI_FDCANTest+0x290>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <CLI_FDCANTest+0x274>
 80032da:	4812      	ldr	r0, [pc, #72]	; (8003324 <CLI_FDCANTest+0x2b8>)
 80032dc:	f000 fe36 	bl	8003f4c <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <CLI_FDCANTest+0x290>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <CLI_FDCANTest+0x288>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	8aba      	ldrh	r2, [r7, #20]
 80032ec:	4619      	mov	r1, r3
 80032ee:	480e      	ldr	r0, [pc, #56]	; (8003328 <CLI_FDCANTest+0x2bc>)
 80032f0:	f000 fe2c 	bl	8003f4c <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	667b      	str	r3, [r7, #100]	; 0x64
 80032f8:	e02e      	b.n	8003358 <CLI_FDCANTest+0x2ec>
 80032fa:	bf00      	nop
 80032fc:	2005003c 	.word	0x2005003c
 8003300:	20054da8 	.word	0x20054da8
 8003304:	0802406c 	.word	0x0802406c
 8003308:	08024080 	.word	0x08024080
 800330c:	08024094 	.word	0x08024094
 8003310:	080240a8 	.word	0x080240a8
 8003314:	080240bc 	.word	0x080240bc
 8003318:	10624dd3 	.word	0x10624dd3
 800331c:	080240d0 	.word	0x080240d0
 8003320:	080240e0 	.word	0x080240e0
 8003324:	080240e8 	.word	0x080240e8
 8003328:	080240f0 	.word	0x080240f0
 800332c:	08024104 	.word	0x08024104
 8003330:	0802410c 	.word	0x0802410c
 8003334:	08024110 	.word	0x08024110
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003338:	4b6a      	ldr	r3, [pc, #424]	; (80034e4 <CLI_FDCANTest+0x478>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <CLI_FDCANTest+0x2e6>
 8003340:	f107 0216 	add.w	r2, r7, #22
 8003344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003346:	4413      	add	r3, r2
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	4866      	ldr	r0, [pc, #408]	; (80034e8 <CLI_FDCANTest+0x47c>)
 800334e:	f000 fdfd 	bl	8003f4c <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8003352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003354:	3301      	adds	r3, #1
 8003356:	667b      	str	r3, [r7, #100]	; 0x64
 8003358:	8abb      	ldrh	r3, [r7, #20]
 800335a:	461a      	mov	r2, r3
 800335c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335e:	4293      	cmp	r3, r2
 8003360:	dbea      	blt.n	8003338 <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 8003362:	4b60      	ldr	r3, [pc, #384]	; (80034e4 <CLI_FDCANTest+0x478>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <CLI_FDCANTest+0x304>
 800336a:	4860      	ldr	r0, [pc, #384]	; (80034ec <CLI_FDCANTest+0x480>)
 800336c:	f000 fdee 	bl	8003f4c <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 8003370:	2000      	movs	r0, #0
 8003372:	f7ff fb2d 	bl	80029d0 <CAN_GetRxErrCount>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d105      	bne.n	8003388 <CLI_FDCANTest+0x31c>
 800337c:	2000      	movs	r0, #0
 800337e:	f7ff fb4f 	bl	8002a20 <CAN_GetTxErrCount>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 8003388:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <CLI_FDCANTest+0x478>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <CLI_FDCANTest+0x340>
 8003390:	2000      	movs	r0, #0
 8003392:	f7ff fb1d 	bl	80029d0 <CAN_GetRxErrCount>
 8003396:	4603      	mov	r3, r0
 8003398:	461c      	mov	r4, r3
 800339a:	2000      	movs	r0, #0
 800339c:	f7ff fb40 	bl	8002a20 <CAN_GetTxErrCount>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4621      	mov	r1, r4
 80033a6:	4852      	ldr	r0, [pc, #328]	; (80034f0 <CLI_FDCANTest+0x484>)
 80033a8:	f000 fdd0 	bl	8003f4c <svDebugMessage>
            if (err_int_cnt > 0)
 80033ac:	4b51      	ldr	r3, [pc, #324]	; (80034f4 <CLI_FDCANTest+0x488>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00c      	beq.n	80033ce <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 80033b4:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <CLI_FDCANTest+0x478>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <CLI_FDCANTest+0x35c>
 80033bc:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <CLI_FDCANTest+0x488>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4619      	mov	r1, r3
 80033c2:	484d      	ldr	r0, [pc, #308]	; (80034f8 <CLI_FDCANTest+0x48c>)
 80033c4:	f000 fdc2 	bl	8003f4c <svDebugMessage>
              err_int_cnt = 0;
 80033c8:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <CLI_FDCANTest+0x488>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 80033ce:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <CLI_FDCANTest+0x490>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d00f      	beq.n	80033f8 <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 80033d8:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <CLI_FDCANTest+0x478>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <CLI_FDCANTest+0x380>
 80033e0:	4b46      	ldr	r3, [pc, #280]	; (80034fc <CLI_FDCANTest+0x490>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4846      	ldr	r0, [pc, #280]	; (8003500 <CLI_FDCANTest+0x494>)
 80033e8:	f000 fdb0 	bl	8003f4c <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7ff fc61 	bl	8002cb4 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 80033f2:	4b42      	ldr	r3, [pc, #264]	; (80034fc <CLI_FDCANTest+0x490>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 80033f8:	f7ff fc1a 	bl	8002c30 <CAN_Update>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 8003402:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <CLI_FDCANTest+0x478>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <CLI_FDCANTest+0x3a4>
 800340a:	483e      	ldr	r0, [pc, #248]	; (8003504 <CLI_FDCANTest+0x498>)
 800340c:	f000 fd9e 	bl	8003f4c <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8003410:	2000      	movs	r0, #0
 8003412:	f7ff fa05 	bl	8002820 <CAN_MsgAvailable>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d057      	beq.n	80034cc <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4619      	mov	r1, r3
 8003422:	2000      	movs	r0, #0
 8003424:	f7ff fab2 	bl	800298c <CAN_MsgRead>
            index %= 1000;
 8003428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800342a:	4a37      	ldr	r2, [pc, #220]	; (8003508 <CLI_FDCANTest+0x49c>)
 800342c:	fba2 1203 	umull	r1, r2, r2, r3
 8003430:	0992      	lsrs	r2, r2, #6
 8003432:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003436:	fb01 f202 	mul.w	r2, r1, r2
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <CLI_FDCANTest+0x478>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <CLI_FDCANTest+0x3e8>
 8003446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800344c:	4619      	mov	r1, r3
 800344e:	482f      	ldr	r0, [pc, #188]	; (800350c <CLI_FDCANTest+0x4a0>)
 8003450:	f000 fd7c 	bl	8003f4c <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8003454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 800345c:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <CLI_FDCANTest+0x478>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <CLI_FDCANTest+0x40e>
 8003464:	482a      	ldr	r0, [pc, #168]	; (8003510 <CLI_FDCANTest+0x4a4>)
 8003466:	f000 fd71 	bl	8003f4c <svDebugMessage>
 800346a:	e006      	b.n	800347a <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <CLI_FDCANTest+0x478>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <CLI_FDCANTest+0x40e>
 8003474:	4827      	ldr	r0, [pc, #156]	; (8003514 <CLI_FDCANTest+0x4a8>)
 8003476:	f000 fd69 	bl	8003f4c <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 800347a:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <CLI_FDCANTest+0x478>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <CLI_FDCANTest+0x422>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	8aba      	ldrh	r2, [r7, #20]
 8003486:	4619      	mov	r1, r3
 8003488:	4823      	ldr	r0, [pc, #140]	; (8003518 <CLI_FDCANTest+0x4ac>)
 800348a:	f000 fd5f 	bl	8003f4c <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	663b      	str	r3, [r7, #96]	; 0x60
 8003492:	e00f      	b.n	80034b4 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <CLI_FDCANTest+0x478>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <CLI_FDCANTest+0x442>
 800349c:	f107 0216 	add.w	r2, r7, #22
 80034a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	480f      	ldr	r0, [pc, #60]	; (80034e8 <CLI_FDCANTest+0x47c>)
 80034aa:	f000 fd4f 	bl	8003f4c <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80034ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b0:	3301      	adds	r3, #1
 80034b2:	663b      	str	r3, [r7, #96]	; 0x60
 80034b4:	8abb      	ldrh	r3, [r7, #20]
 80034b6:	461a      	mov	r2, r3
 80034b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ba:	4293      	cmp	r3, r2
 80034bc:	dbea      	blt.n	8003494 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <CLI_FDCANTest+0x478>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <CLI_FDCANTest+0x460>
 80034c6:	4809      	ldr	r0, [pc, #36]	; (80034ec <CLI_FDCANTest+0x480>)
 80034c8:	f000 fd40 	bl	8003f4c <svDebugMessage>
        while(svCLI_KeepLoop())
 80034cc:	f00c ff3c 	bl	8010348 <svCLI_KeepLoop>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f47f aeb4 	bne.w	8003240 <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 80034dc:	bf00      	nop
 80034de:	3784      	adds	r7, #132	; 0x84
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}
 80034e4:	2005003c 	.word	0x2005003c
 80034e8:	08024104 	.word	0x08024104
 80034ec:	0802410c 	.word	0x0802410c
 80034f0:	08024120 	.word	0x08024120
 80034f4:	20055314 	.word	0x20055314
 80034f8:	08024134 	.word	0x08024134
 80034fc:	20054da8 	.word	0x20054da8
 8003500:	08024140 	.word	0x08024140
 8003504:	08024150 	.word	0x08024150
 8003508:	10624dd3 	.word	0x10624dd3
 800350c:	080240d0 	.word	0x080240d0
 8003510:	080240e0 	.word	0x080240e0
 8003514:	080240e8 	.word	0x080240e8
 8003518:	080240f0 	.word	0x080240f0

0800351c <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 8003536:	f003 fcff 	bl	8006f38 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <Flash_Erase+0xb0>)
 800353c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003540:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	e013      	b.n	800357c <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	b29b      	uxth	r3, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f837 	bl	80035d0 <Flash_InSector>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	2b00      	cmp	r3, #0
 800356c:	da01      	bge.n	8003572 <Flash_Erase+0x56>
      {
        start_sector = i;
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	3301      	adds	r3, #1
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2b7f      	cmp	r3, #127	; 0x7f
 8003580:	dde8      	ble.n	8003554 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	db19      	blt.n	80035bc <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003588:	2304      	movs	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 800358c:	2303      	movs	r3, #3
 800358e:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8003594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	3301      	adds	r3, #1
 800359c:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 800359e:	f107 0208 	add.w	r2, r7, #8
 80035a2:	f107 030c 	add.w	r3, r7, #12
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 fdf7 	bl	800719c <HAL_FLASHEx_Erase>
 80035ae:	4603      	mov	r3, r0
 80035b0:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <Flash_Erase+0xa0>
    {
      ret = TRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 80035bc:	f003 fce2 	bl	8006f84 <HAL_FLASH_Lock>
  return ret;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3730      	adds	r7, #48	; 0x30
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40022000 	.word	0x40022000

080035d0 <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80035e8:	035b      	lsls	r3, r3, #13
 80035ea:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80035f2:	331f      	adds	r3, #31
 80035f4:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	3b01      	subs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d305      	bcc.n	8003618 <Flash_InSector+0x48>
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	429a      	cmp	r2, r3
 8003612:	d801      	bhi.n	8003618 <Flash_InSector+0x48>
  {
    ret = TRUE;
 8003614:	2301      	movs	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d305      	bcc.n	800362c <Flash_InSector+0x5c>
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	429a      	cmp	r2, r3
 8003626:	d801      	bhi.n	800362c <Flash_InSector+0x5c>
  {
    ret = TRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	429a      	cmp	r2, r3
 8003632:	d305      	bcc.n	8003640 <Flash_InSector+0x70>
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	429a      	cmp	r2, r3
 800363a:	d801      	bhi.n	8003640 <Flash_InSector+0x70>
  {
    ret = TRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	429a      	cmp	r2, r3
 8003646:	d305      	bcc.n	8003654 <Flash_InSector+0x84>
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	d801      	bhi.n	8003654 <Flash_InSector+0x84>
  {
    ret = TRUE;
 8003650:	2301      	movs	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003656:	4618      	mov	r0, r3
 8003658:	372c      	adds	r7, #44	; 0x2c
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b092      	sub	sp, #72	; 0x48
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800366e:	2301      	movs	r3, #1
 8003670:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 8003672:	f003 fc61 	bl	8006f38 <HAL_FLASH_Unlock>

  index = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <Flash_Write+0x2e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	f200 808e 	bhi.w	80037ac <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003698:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800369a:	f107 0310 	add.w	r3, r7, #16
 800369e:	2210      	movs	r2, #16
 80036a0:	4618      	mov	r0, r3
 80036a2:	f01f fd1a 	bl	80230da <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 80036a6:	f107 0210 	add.w	r2, r7, #16
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	18d0      	adds	r0, r2, r3
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	f1c3 0210 	rsb	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4293      	cmp	r3, r2
 80036b8:	bf28      	it	cs
 80036ba:	4613      	movcs	r3, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	f01f fd0b 	bl	80230da <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	461a      	mov	r2, r3
 80036ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036cc:	2002      	movs	r0, #2
 80036ce:	f003 fbbb 	bl	8006e48 <HAL_FLASH_Program>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 80036d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <Flash_Write+0x82>
    {
      return FALSE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e06c      	b.n	80037be <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <Flash_Write+0x98>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b0f      	cmp	r3, #15
 80036ee:	d804      	bhi.n	80036fa <Flash_Write+0x98>
    {
      index += length;
 80036f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	643b      	str	r3, [r7, #64]	; 0x40
 80036f8:	e004      	b.n	8003704 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 80036fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	3310      	adds	r3, #16
 8003702:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 8003704:	e052      	b.n	80037ac <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b10      	cmp	r3, #16
 800370e:	bf28      	it	cs
 8003710:	2310      	movcs	r3, #16
 8003712:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	2b10      	cmp	r3, #16
 8003718:	d117      	bne.n	800374a <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371e:	18d1      	adds	r1, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003724:	4413      	add	r3, r2
 8003726:	461a      	mov	r2, r3
 8003728:	2002      	movs	r0, #2
 800372a:	f003 fb8d 	bl	8006e48 <HAL_FLASH_Program>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8003734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <Flash_Write+0xe0>
      {
        ret = FALSE;
 800373c:	2300      	movs	r3, #0
 800373e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003740:	e03a      	b.n	80037b8 <Flash_Write+0x156>
      }
      index += write_length;
 8003742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	4413      	add	r3, r2
 8003748:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374e:	429a      	cmp	r2, r3
 8003750:	d02c      	beq.n	80037ac <Flash_Write+0x14a>
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b0f      	cmp	r3, #15
 800375a:	d827      	bhi.n	80037ac <Flash_Write+0x14a>
    {
      offset = length - index;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003768:	4413      	add	r3, r2
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 800376c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800376e:	f107 0310 	add.w	r3, r7, #16
 8003772:	2210      	movs	r2, #16
 8003774:	4618      	mov	r0, r3
 8003776:	f01f fcb0 	bl	80230da <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	18d1      	adds	r1, r2, r3
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003786:	4618      	mov	r0, r3
 8003788:	f01f fca7 	bl	80230da <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 800378c:	f107 0310 	add.w	r3, r7, #16
 8003790:	461a      	mov	r2, r3
 8003792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003794:	2002      	movs	r0, #2
 8003796:	f003 fb57 	bl	8006e48 <HAL_FLASH_Program>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 80037a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <Flash_Write+0x154>
      {
        return FALSE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e008      	b.n	80037be <Flash_Write+0x15c>
  while(index < length)
 80037ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3a8      	bcc.n	8003706 <Flash_Write+0xa4>
 80037b4:	e000      	b.n	80037b8 <Flash_Write+0x156>
      }
      break;
 80037b6:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 80037b8:	f003 fbe4 	bl	8006f84 <HAL_FLASH_Lock>
  return ret;
 80037bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3748      	adds	r7, #72	; 0x48
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b089      	sub	sp, #36	; 0x24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e00c      	b.n	80037fa <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4413      	add	r3, r2
 80037e6:	7819      	ldrb	r1, [r3, #0]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	4413      	add	r3, r2
 80037f0:	460a      	mov	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d8ee      	bhi.n	80037e0 <Flash_Read+0x1a>
  }



  return ret;
 8003802:	69bb      	ldr	r3, [r7, #24]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3724      	adds	r7, #36	; 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b09a      	sub	sp, #104	; 0x68
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b02      	cmp	r3, #2
 8003822:	f040 8085 	bne.w	8003930 <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d049      	beq.n	80038c0 <CLI_FlashTest+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d871      	bhi.n	8003916 <CLI_FlashTest+0x106>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d003      	beq.n	8003840 <CLI_FlashTest+0x30>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d029      	beq.n	8003892 <CLI_FlashTest+0x82>
 800383e:	e06a      	b.n	8003916 <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 8003840:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <CLI_FlashTest+0x128>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <CLI_FlashTest+0x3e>
 8003848:	483c      	ldr	r0, [pc, #240]	; (800393c <CLI_FlashTest+0x12c>)
 800384a:	f000 fb7f 	bl	8003f4c <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 800384e:	f107 0310 	add.w	r3, r7, #16
 8003852:	2210      	movs	r2, #16
 8003854:	4619      	mov	r1, r3
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f7ff ffb5 	bl	80037c6 <Flash_Read>
        for(int i=0; i<16; i++)
 800385c:	2300      	movs	r3, #0
 800385e:	667b      	str	r3, [r7, #100]	; 0x64
 8003860:	e013      	b.n	800388a <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 8003862:	4b35      	ldr	r3, [pc, #212]	; (8003938 <CLI_FlashTest+0x128>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <CLI_FlashTest+0x74>
 800386a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	18d1      	adds	r1, r2, r3
 8003870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	3368      	adds	r3, #104	; 0x68
 8003876:	443b      	add	r3, r7
 8003878:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800387c:	461a      	mov	r2, r3
 800387e:	4830      	ldr	r0, [pc, #192]	; (8003940 <CLI_FlashTest+0x130>)
 8003880:	f000 fb64 	bl	8003f4c <svDebugMessage>
        for(int i=0; i<16; i++)
 8003884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003886:	3301      	adds	r3, #1
 8003888:	667b      	str	r3, [r7, #100]	; 0x64
 800388a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800388c:	2b0f      	cmp	r3, #15
 800388e:	dde8      	ble.n	8003862 <CLI_FlashTest+0x52>
        }
        break;
 8003890:	e04e      	b.n	8003930 <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 8003892:	2110      	movs	r1, #16
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f7ff fe41 	bl	800351c <Flash_Erase>
 800389a:	4603      	mov	r3, r0
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <CLI_FlashTest+0x128>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03e      	beq.n	8003926 <CLI_FlashTest+0x116>
 80038a8:	4826      	ldr	r0, [pc, #152]	; (8003944 <CLI_FlashTest+0x134>)
 80038aa:	f000 fb4f 	bl	8003f4c <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 80038ae:	e03a      	b.n	8003926 <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <CLI_FlashTest+0x128>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d036      	beq.n	8003926 <CLI_FlashTest+0x116>
 80038b8:	4823      	ldr	r0, [pc, #140]	; (8003948 <CLI_FlashTest+0x138>)
 80038ba:	f000 fb47 	bl	8003f4c <svDebugMessage>
        break;
 80038be:	e032      	b.n	8003926 <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	663b      	str	r3, [r7, #96]	; 0x60
 80038c4:	e00a      	b.n	80038dc <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 80038c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c8:	b2d9      	uxtb	r1, r3
 80038ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d0:	4413      	add	r3, r2
 80038d2:	460a      	mov	r2, r1
 80038d4:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 80038d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d8:	3301      	adds	r3, #1
 80038da:	663b      	str	r3, [r7, #96]	; 0x60
 80038dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038de:	2b0f      	cmp	r3, #15
 80038e0:	ddf1      	ble.n	80038c6 <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 80038e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038e6:	2210      	movs	r2, #16
 80038e8:	4619      	mov	r1, r3
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	f7ff feb9 	bl	8003662 <Flash_Write>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <CLI_FlashTest+0x128>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d015      	beq.n	800392a <CLI_FlashTest+0x11a>
 80038fe:	4813      	ldr	r0, [pc, #76]	; (800394c <CLI_FlashTest+0x13c>)
 8003900:	f000 fb24 	bl	8003f4c <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 8003904:	e011      	b.n	800392a <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <CLI_FlashTest+0x128>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <CLI_FlashTest+0x11a>
 800390e:	4810      	ldr	r0, [pc, #64]	; (8003950 <CLI_FlashTest+0x140>)
 8003910:	f000 fb1c 	bl	8003f4c <svDebugMessage>
        break;
 8003914:	e009      	b.n	800392a <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <CLI_FlashTest+0x128>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <CLI_FlashTest+0x11e>
 800391e:	480d      	ldr	r0, [pc, #52]	; (8003954 <CLI_FlashTest+0x144>)
 8003920:	f000 fb14 	bl	8003f4c <svDebugMessage>
        break;
 8003924:	e003      	b.n	800392e <CLI_FlashTest+0x11e>
        break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <CLI_FlashTest+0x120>
        break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <CLI_FlashTest+0x120>
        break;
 800392e:	bf00      	nop
    }
  }
}
 8003930:	bf00      	nop
 8003932:	3768      	adds	r7, #104	; 0x68
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2005003c 	.word	0x2005003c
 800393c:	080241a8 	.word	0x080241a8
 8003940:	080241d8 	.word	0x080241d8
 8003944:	080241e8 	.word	0x080241e8
 8003948:	080241f4 	.word	0x080241f4
 800394c:	08024200 	.word	0x08024200
 8003950:	0802420c 	.word	0x0802420c
 8003954:	08024218 	.word	0x08024218

08003958 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <LED_Init+0x1c>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <LED_Init+0x20>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20055318 	.word	0x20055318
 8003978:	2005531c 	.word	0x2005531c

0800397c <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <LED_OnOff+0x7c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d02d      	beq.n	80039ec <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <LED_OnOff+0x80>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02c      	beq.n	80039f2 <LED_OnOff+0x76>
  {
    switch(eLED){
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d010      	beq.n	80039c0 <LED_OnOff+0x44>
 800399e:	2b03      	cmp	r3, #3
 80039a0:	dc26      	bgt.n	80039f0 <LED_OnOff+0x74>
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d002      	beq.n	80039ac <LED_OnOff+0x30>
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d005      	beq.n	80039b6 <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 80039aa:	e021      	b.n	80039f0 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <LED_OnOff+0x84>)
 80039ae:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 80039b0:	2301      	movs	r3, #1
 80039b2:	817b      	strh	r3, [r7, #10]
        break;
 80039b4:	e009      	b.n	80039ca <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <LED_OnOff+0x88>)
 80039b8:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 80039ba:	2310      	movs	r3, #16
 80039bc:	817b      	strh	r3, [r7, #10]
        break;
 80039be:	e004      	b.n	80039ca <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <LED_OnOff+0x8c>)
 80039c2:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 80039c4:	2310      	movs	r3, #16
 80039c6:	817b      	strh	r3, [r7, #10]
        break;
 80039c8:	bf00      	nop
        break;
    }
    if(bOn)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	2201      	movs	r2, #1
 80039d4:	4619      	mov	r1, r3
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f003 fe36 	bl	8007648 <HAL_GPIO_WritePin>
 80039dc:	e009      	b.n	80039f2 <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 80039de:	897b      	ldrh	r3, [r7, #10]
 80039e0:	2200      	movs	r2, #0
 80039e2:	4619      	mov	r1, r3
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f003 fe2f 	bl	8007648 <HAL_GPIO_WritePin>
 80039ea:	e002      	b.n	80039f2 <LED_OnOff+0x76>
    return;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <LED_OnOff+0x76>
        return;
 80039f0:	bf00      	nop
    }
  }
}
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2005531c 	.word	0x2005531c
 80039fc:	20055318 	.word	0x20055318
 8003a00:	42020400 	.word	0x42020400
 8003a04:	42021400 	.word	0x42021400
 8003a08:	42021800 	.word	0x42021800

08003a0c <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e02c      	b.n	8003a72 <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 8003a18:	2101      	movs	r1, #1
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f7ff ffae 	bl	800397c <LED_OnOff>
    HAL_Delay(50);
 8003a20:	2032      	movs	r0, #50	; 0x32
 8003a22:	f000 fb0f 	bl	8004044 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 8003a26:	2100      	movs	r1, #0
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7ff ffa7 	bl	800397c <LED_OnOff>
    HAL_Delay(50);
 8003a2e:	2032      	movs	r0, #50	; 0x32
 8003a30:	f000 fb08 	bl	8004044 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8003a34:	2101      	movs	r1, #1
 8003a36:	2002      	movs	r0, #2
 8003a38:	f7ff ffa0 	bl	800397c <LED_OnOff>
    HAL_Delay(50);
 8003a3c:	2032      	movs	r0, #50	; 0x32
 8003a3e:	f000 fb01 	bl	8004044 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 8003a42:	2100      	movs	r1, #0
 8003a44:	2002      	movs	r0, #2
 8003a46:	f7ff ff99 	bl	800397c <LED_OnOff>
    HAL_Delay(50);
 8003a4a:	2032      	movs	r0, #50	; 0x32
 8003a4c:	f000 fafa 	bl	8004044 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 8003a50:	2101      	movs	r1, #1
 8003a52:	2003      	movs	r0, #3
 8003a54:	f7ff ff92 	bl	800397c <LED_OnOff>
    HAL_Delay(50);
 8003a58:	2032      	movs	r0, #50	; 0x32
 8003a5a:	f000 faf3 	bl	8004044 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2003      	movs	r0, #3
 8003a62:	f7ff ff8b 	bl	800397c <LED_OnOff>
    HAL_Delay(50);
 8003a66:	2032      	movs	r0, #50	; 0x32
 8003a68:	f000 faec 	bl	8004044 <HAL_Delay>
  for(int i =0; i<3; i++)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	ddcf      	ble.n	8003a18 <LED_SimpleAnimation+0xc>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d10b      	bne.n	8003aae <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f7ff ff67 	bl	800397c <LED_OnOff>
  }
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <RESET_Init+0x80>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 8003ad6:	4919      	ldr	r1, [pc, #100]	; (8003b3c <RESET_Init+0x84>)
 8003ad8:	2002      	movs	r0, #2
 8003ada:	f000 f845 	bl	8003b68 <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <RESET_Init+0x88>)
 8003ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01c      	beq.n	8003b26 <RESET_Init+0x6e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d019      	beq.n	8003b26 <RESET_Init+0x6e>
 8003af2:	2002      	movs	r0, #2
 8003af4:	f000 f828 	bl	8003b48 <RTC_ReadBackupReg>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <RESET_Init+0x84>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d112      	bne.n	8003b26 <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f000 f821 	bl	8003b48 <RTC_ReadBackupReg>
 8003b06:	4603      	mov	r3, r0
 8003b08:	3301      	adds	r3, #1
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f000 f82b 	bl	8003b68 <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 8003b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b16:	f000 fa95 	bl	8004044 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f000 f814 	bl	8003b48 <RTC_ReadBackupReg>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <RESET_Init+0x8c>)
 8003b24:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 8003b26:	2100      	movs	r1, #0
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f000 f81d 	bl	8003b68 <RTC_WriteBackupReg>

  return ret;
 8003b2e:	683b      	ldr	r3, [r7, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000edf0 	.word	0xe000edf0
 8003b3c:	20240215 	.word	0x20240215
 8003b40:	44020c00 	.word	0x44020c00
 8003b44:	20055320 	.word	0x20055320

08003b48 <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4804      	ldr	r0, [pc, #16]	; (8003b64 <RTC_ReadBackupReg+0x1c>)
 8003b54:	f009 fe08 	bl	800d768 <HAL_RTCEx_BKUPRead>
 8003b58:	4603      	mov	r3, r0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20055324 	.word	0x20055324

08003b68 <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4803      	ldr	r0, [pc, #12]	; (8003b84 <RTC_WriteBackupReg+0x1c>)
 8003b78:	f009 fdde 	bl	800d738 <HAL_RTCEx_BKUPWrite>
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20055324 	.word	0x20055324

08003b88 <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d177      	bne.n	8003c8a <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <UART_Init+0x10c>)
 8003b9c:	4a3e      	ldr	r2, [pc, #248]	; (8003c98 <UART_Init+0x110>)
 8003b9e:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 8003ba0:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <UART_Init+0x10c>)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba6:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <UART_Init+0x10c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8003bac:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <UART_Init+0x10c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <UART_Init+0x10c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8003bb8:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <UART_Init+0x10c>)
 8003bba:	220c      	movs	r2, #12
 8003bbc:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bbe:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <UART_Init+0x10c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc4:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <UART_Init+0x10c>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bca:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <UART_Init+0x10c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bd0:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <UART_Init+0x10c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <UART_Init+0x10c>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bdc:	482d      	ldr	r0, [pc, #180]	; (8003c94 <UART_Init+0x10c>)
 8003bde:	f00a f9bf 	bl	800df60 <HAL_UART_Init>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <UART_Init+0x72>
      {
        Error_Handler();
 8003be8:	f7fd f8d2 	bl	8000d90 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <UART_Init+0x114>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <UART_Init+0x118>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e031      	b.n	8003c5e <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4825      	ldr	r0, [pc, #148]	; (8003c94 <UART_Init+0x10c>)
 8003bfe:	f00c f8ee 	bl	800fdde <HAL_UARTEx_SetTxFifoThreshold>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <UART_Init+0x92>
      {
        Error_Handler();
 8003c08:	f7fd f8c2 	bl	8000d90 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003c0c:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <UART_Init+0x114>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <UART_Init+0x118>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e021      	b.n	8003c5e <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	481d      	ldr	r0, [pc, #116]	; (8003c94 <UART_Init+0x10c>)
 8003c1e:	f00c f91c 	bl	800fe5a <HAL_UARTEx_SetRxFifoThreshold>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <UART_Init+0xb2>
      {
        Error_Handler();
 8003c28:	f7fd f8b2 	bl	8000d90 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <UART_Init+0x114>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <UART_Init+0x118>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e011      	b.n	8003c5e <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003c3a:	4816      	ldr	r0, [pc, #88]	; (8003c94 <UART_Init+0x10c>)
 8003c3c:	f00c f896 	bl	800fd6c <HAL_UARTEx_DisableFifoMode>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <UART_Init+0xd0>
      {
        Error_Handler();
 8003c46:	f7fd f8a3 	bl	8000d90 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <UART_Init+0x114>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <UART_Init+0x118>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e002      	b.n	8003c5e <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 8003c58:	4812      	ldr	r0, [pc, #72]	; (8003ca4 <UART_Init+0x11c>)
 8003c5a:	f00d f888 	bl	8010d6e <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4911      	ldr	r1, [pc, #68]	; (8003ca8 <UART_Init+0x120>)
 8003c62:	480c      	ldr	r0, [pc, #48]	; (8003c94 <UART_Init+0x10c>)
 8003c64:	f00a fa6a 	bl	800e13c <HAL_UART_Receive_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <UART_Init+0x114>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <UART_Init+0x118>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 8003c7a:	e007      	b.n	8003c8c <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <UART_Init+0x114>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <UART_Init+0x118>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
      break;
 8003c88:	e000      	b.n	8003c8c <UART_Init+0x104>
    default:
      break;
 8003c8a:	bf00      	nop
  }
  return;
 8003c8c:	bf00      	nop
}
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	2005535c 	.word	0x2005535c
 8003c98:	40004400 	.word	0x40004400
 8003c9c:	20055358 	.word	0x20055358
 8003ca0:	20055470 	.word	0x20055470
 8003ca4:	20050020 	.word	0x20050020
 8003ca8:	20055354 	.word	0x20055354

08003cac <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <IsUartConnected+0x1c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20055358 	.word	0x20055358

08003ccc <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	71fb      	strb	r3, [r7, #7]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d110      	bne.n	8003d08 <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8003ce6:	88ba      	ldrh	r2, [r7, #4]
 8003ce8:	2364      	movs	r3, #100	; 0x64
 8003cea:	6839      	ldr	r1, [r7, #0]
 8003cec:	480a      	ldr	r0, [pc, #40]	; (8003d18 <UART_Write+0x4c>)
 8003cee:	f00a f987 	bl	800e000 <HAL_UART_Transmit>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <UART_Write+0x40>
      {
        ret = Len;
 8003cfc:	88bb      	ldrh	r3, [r7, #4]
 8003cfe:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <UART_Write+0x50>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
      }
      break;
 8003d06:	e001      	b.n	8003d0c <UART_Write+0x40>
    default:
      break;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <UART_Write+0x42>
      break;
 8003d0c:	bf00      	nop
  }
  return ret;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2005535c 	.word	0x2005535c
 8003d1c:	20055470 	.word	0x20055470

08003d20 <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 8003d20:	b40e      	push	{r1, r2, r3}
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b0c7      	sub	sp, #284	; 0x11c
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d2e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003d32:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003d34:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003d38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d40:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8003d42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d4a:	f107 0010 	add.w	r0, r7, #16
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d58:	f01f f8ce 	bl	8022ef8 <vsniprintf>
 8003d5c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	f107 0110 	add.w	r1, r7, #16
 8003d6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d6e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ffa9 	bl	8003ccc <UART_Write>
 8003d7a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8003d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d8e:	b003      	add	sp, #12
 8003d90:	4770      	bx	lr
	...

08003d94 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8003da8:	4804      	ldr	r0, [pc, #16]	; (8003dbc <Uart_Available+0x28>)
 8003daa:	f00c ffbe 	bl	8010d2a <svRingBuffer_GetCount>
 8003dae:	60f8      	str	r0, [r7, #12]
      break;
 8003db0:	bf00      	nop
  }

  return ret;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20050020 	.word	0x20050020

08003dc0 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <HAL_UART_RxCpltCallback+0x40>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d112      	bne.n	8003df8 <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <HAL_UART_RxCpltCallback+0x44>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	480b      	ldr	r0, [pc, #44]	; (8003e08 <HAL_UART_RxCpltCallback+0x48>)
 8003dda:	f00c ffe0 	bl	8010d9e <svRingBuffer_Push>
 8003dde:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f113 0f02 	cmn.w	r3, #2
 8003de6:	d102      	bne.n	8003dee <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8003de8:	4807      	ldr	r0, [pc, #28]	; (8003e08 <HAL_UART_RxCpltCallback+0x48>)
 8003dea:	f00c ffc0 	bl	8010d6e <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8003dee:	2201      	movs	r2, #1
 8003df0:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_UART_RxCpltCallback+0x44>)
 8003df2:	4806      	ldr	r0, [pc, #24]	; (8003e0c <HAL_UART_RxCpltCallback+0x4c>)
 8003df4:	f00a f9a2 	bl	800e13c <HAL_UART_Receive_IT>
  }
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40004400 	.word	0x40004400
 8003e04:	20055354 	.word	0x20055354
 8003e08:	20050020 	.word	0x20050020
 8003e0c:	2005535c 	.word	0x2005535c

08003e10 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8003e14:	4806      	ldr	r0, [pc, #24]	; (8003e30 <svDebugRxChar+0x20>)
 8003e16:	f00c ff88 	bl	8010d2a <svRingBuffer_GetCount>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8003e20:	4803      	ldr	r0, [pc, #12]	; (8003e30 <svDebugRxChar+0x20>)
 8003e22:	f00c fff0 	bl	8010e06 <svRingBuffer_Pop>
 8003e26:	4603      	mov	r3, r0
 8003e28:	e000      	b.n	8003e2c <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8003e2a:	2300      	movs	r3, #0
	}
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20050020 	.word	0x20050020

08003e34 <svDebugProcess>:

void svDebugProcess(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7ff ff36 	bl	8003cac <IsUartConnected>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01a      	beq.n	8003e7c <svDebugProcess+0x48>
	  svCLI_Handler();
 8003e46:	f00c fe1d 	bl	8010a84 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <svDebugProcess+0x50>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d114      	bne.n	8003e7c <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8003e52:	480d      	ldr	r0, [pc, #52]	; (8003e88 <svDebugProcess+0x54>)
 8003e54:	f01e fdb1 	bl	80229ba <lwrb_get_linear_block_read_length>
 8003e58:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8003e60:	4809      	ldr	r0, [pc, #36]	; (8003e88 <svDebugProcess+0x54>)
 8003e62:	f01e fd8e 	bl	8022982 <lwrb_get_linear_block_read_address>
 8003e66:	4601      	mov	r1, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7ff ff2c 	bl	8003ccc <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4804      	ldr	r0, [pc, #16]	; (8003e88 <svDebugProcess+0x54>)
 8003e78:	f01e fdd2 	bl	8022a20 <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20055470 	.word	0x20055470
 8003e88:	20055474 	.word	0x20055474

08003e8c <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	460b      	mov	r3, r1
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11a      	bne.n	8003ed6 <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f7ff ff03 	bl	8003cac <IsUartConnected>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d014      	beq.n	8003ed6 <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8003eac:	f000 f8be 	bl	800402c <HAL_GetTick>
 8003eb0:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8003eb2:	e003      	b.n	8003ebc <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <svDebugCallback+0x54>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d006      	beq.n	8003eca <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8003ebc:	6978      	ldr	r0, [r7, #20]
 8003ebe:	f000 f863 	bl	8003f88 <GetElapsedTime>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b63      	cmp	r3, #99	; 0x63
 8003ec6:	d9f5      	bls.n	8003eb4 <svDebugCallback+0x28>
 8003ec8:	e000      	b.n	8003ecc <svDebugCallback+0x40>
					break;
 8003eca:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <svDebugCallback+0x54>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8003ed2:	f7ff ffaf 	bl	8003e34 <svDebugProcess>
		}
	}
}
 8003ed6:	bf00      	nop
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20055470 	.word	0x20055470

08003ee4 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8003ee8:	4809      	ldr	r0, [pc, #36]	; (8003f10 <svDebugInit+0x2c>)
 8003eea:	f00c ff40 	bl	8010d6e <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	4908      	ldr	r1, [pc, #32]	; (8003f14 <svDebugInit+0x30>)
 8003ef2:	4809      	ldr	r0, [pc, #36]	; (8003f18 <svDebugInit+0x34>)
 8003ef4:	f00c f93a 	bl	801016c <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8003ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <svDebugInit+0x38>)
 8003efe:	4808      	ldr	r0, [pc, #32]	; (8003f20 <svDebugInit+0x3c>)
 8003f00:	f01e fc20 	bl	8022744 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8003f04:	4907      	ldr	r1, [pc, #28]	; (8003f24 <svDebugInit+0x40>)
 8003f06:	4806      	ldr	r0, [pc, #24]	; (8003f20 <svDebugInit+0x3c>)
 8003f08:	f01e fc3d 	bl	8022786 <lwrb_set_evt_fn>
}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20050020 	.word	0x20050020
 8003f14:	08003f29 	.word	0x08003f29
 8003f18:	08003e11 	.word	0x08003e11
 8003f1c:	20055488 	.word	0x20055488
 8003f20:	20055474 	.word	0x20055474
 8003f24:	08003e8d 	.word	0x08003e8d

08003f28 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8003f32:	1dfb      	adds	r3, r7, #7
 8003f34:	2201      	movs	r2, #1
 8003f36:	4619      	mov	r1, r3
 8003f38:	4803      	ldr	r0, [pc, #12]	; (8003f48 <svDebugPutChar+0x20>)
 8003f3a:	f01e fc3d 	bl	80227b8 <lwrb_write>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20055474 	.word	0x20055474

08003f4c <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8003f4c:	b40f      	push	{r0, r1, r2, r3}
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	6939      	ldr	r1, [r7, #16]
 8003f5e:	4808      	ldr	r0, [pc, #32]	; (8003f80 <svDebugMessage+0x34>)
 8003f60:	f01e ffee 	bl	8022f40 <vsiprintf>
 8003f64:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4905      	ldr	r1, [pc, #20]	; (8003f80 <svDebugMessage+0x34>)
 8003f6c:	4805      	ldr	r0, [pc, #20]	; (8003f84 <svDebugMessage+0x38>)
 8003f6e:	f01e fc23 	bl	80227b8 <lwrb_write>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f7c:	b004      	add	sp, #16
 8003f7e:	4770      	bx	lr
 8003f80:	2005568c 	.word	0x2005568c
 8003f84:	20055474 	.word	0x20055474

08003f88 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8003f90:	f000 f84c 	bl	800402c <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d204      	bcs.n	8003fa8 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	e002      	b.n	8003fae <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	1ad3      	subs	r3, r2, r3
	}
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fbc:	2003      	movs	r0, #3
 8003fbe:	f000 f928 	bl	8004212 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003fc2:	f004 f9a5 	bl	8008310 <HAL_RCC_GetSysClockFreq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_Init+0x40>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	490a      	ldr	r1, [pc, #40]	; (8003ffc <HAL_Init+0x44>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_Init+0x48>)
 8003fda:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fdc:	200f      	movs	r0, #15
 8003fde:	f7fd f851 	bl	8001084 <HAL_InitTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e002      	b.n	8003ff2 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fec:	f7fc fed5 	bl	8000d9a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	44020c00 	.word	0x44020c00
 8003ffc:	080278d8 	.word	0x080278d8
 8004000:	20050000 	.word	0x20050000

08004004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_IncTick+0x20>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x24>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4413      	add	r3, r2
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_IncTick+0x24>)
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20050044 	.word	0x20050044
 8004028:	2005570c 	.word	0x2005570c

0800402c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return uwTick;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_GetTick+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2005570c 	.word	0x2005570c

08004044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7ff ffee 	bl	800402c <HAL_GetTick>
 8004050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d005      	beq.n	800406a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_Delay+0x44>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800406a:	bf00      	nop
 800406c:	f7ff ffde 	bl	800402c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d8f7      	bhi.n	800406c <HAL_Delay+0x28>
  {
  }
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20050044 	.word	0x20050044

0800408c <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8004096:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800409a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800409e:	4905      	ldr	r1, [pc, #20]	; (80040b4 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	44000400 	.word	0x44000400

080040b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d4:	4013      	ands	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	60d3      	str	r3, [r2, #12]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <__NVIC_GetPriorityGrouping+0x18>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	f003 0307 	and.w	r3, r3, #7
}
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	db0b      	blt.n	8004146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	4907      	ldr	r1, [pc, #28]	; (8004154 <__NVIC_EnableIRQ+0x38>)
 8004136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2001      	movs	r0, #1
 800413e:	fa00 f202 	lsl.w	r2, r0, r2
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000e100 	.word	0xe000e100

08004158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db0a      	blt.n	8004182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	490c      	ldr	r1, [pc, #48]	; (80041a4 <__NVIC_SetPriority+0x4c>)
 8004172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	440b      	add	r3, r1
 800417c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004180:	e00a      	b.n	8004198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4908      	ldr	r1, [pc, #32]	; (80041a8 <__NVIC_SetPriority+0x50>)
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	3b04      	subs	r3, #4
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	440b      	add	r3, r1
 8004196:	761a      	strb	r2, [r3, #24]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000e100 	.word	0xe000e100
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f1c3 0307 	rsb	r3, r3, #7
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	bf28      	it	cs
 80041ca:	2304      	movcs	r3, #4
 80041cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d902      	bls.n	80041dc <NVIC_EncodePriority+0x30>
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3b03      	subs	r3, #3
 80041da:	e000      	b.n	80041de <NVIC_EncodePriority+0x32>
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	401a      	ands	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f4:	f04f 31ff 	mov.w	r1, #4294967295
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43d9      	mvns	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	4313      	orrs	r3, r2
         );
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	; 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4c 	bl	80040b8 <__NVIC_SetPriorityGrouping>
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004236:	f7ff ff63 	bl	8004100 <__NVIC_GetPriorityGrouping>
 800423a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	6978      	ldr	r0, [r7, #20]
 8004242:	f7ff ffb3 	bl	80041ac <NVIC_EncodePriority>
 8004246:	4602      	mov	r2, r0
 8004248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff82 	bl	8004158 <__NVIC_SetPriority>
}
 8004254:	bf00      	nop
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff56 	bl	800411c <__NVIC_EnableIRQ>
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004280:	f7ff fed4 	bl	800402c <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e06b      	b.n	8004368 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d008      	beq.n	80042ae <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e05c      	b.n	8004368 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0204 	orr.w	r2, r2, #4
 80042bc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2205      	movs	r2, #5
 80042c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80042c6:	e020      	b.n	800430a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80042c8:	f7ff feb0 	bl	800402c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d919      	bls.n	800430a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	f043 0210 	orr.w	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2203      	movs	r2, #3
 80042e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	2201      	movs	r2, #1
 80042fc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02e      	b.n	8004368 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0d7      	beq.n	80042c8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0202 	orr.w	r2, r2, #2
 8004326:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2204      	movs	r2, #4
 800432c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004338:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004352:	2201      	movs	r2, #1
 8004354:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e019      	b.n	80043b6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d004      	beq.n	8004398 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e00e      	b.n	80043b6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2204      	movs	r2, #4
 800439c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0d2      	b.n	800457c <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2223      	movs	r2, #35	; 0x23
 80043e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fd fc6d 	bl	8001cc8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_ETH_Init+0x1c0>)
 80043f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043f4:	4a63      	ldr	r2, [pc, #396]	; (8004584 <HAL_ETH_Init+0x1c0>)
 80043f6:	f043 0302 	orr.w	r3, r3, #2
 80043fa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_ETH_Init+0x1c0>)
 8004400:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7a1b      	ldrb	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8004414:	2000      	movs	r0, #0
 8004416:	f7ff fe39 	bl	800408c <HAL_SBS_ETHInterfaceSelect>
 800441a:	e003      	b.n	8004424 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 800441c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004420:	f7ff fe34 	bl	800408c <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8004424:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_ETH_Init+0x1c4>)
 8004426:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004440:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004442:	f7ff fdf3 	bl	800402c <HAL_GetTick>
 8004446:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004448:	e011      	b.n	800446e <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800444a:	f7ff fdef 	bl	800402c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004458:	d909      	bls.n	800446e <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2204      	movs	r2, #4
 800445e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	22e0      	movs	r2, #224	; 0xe0
 8004466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e086      	b.n	800457c <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e4      	bne.n	800444a <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 ff29 	bl	80052d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004486:	f004 f86f 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 800448a:	4603      	mov	r3, r0
 800448c:	4a3f      	ldr	r2, [pc, #252]	; (800458c <HAL_ETH_Init+0x1c8>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	0c9a      	lsrs	r2, r3, #18
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3a01      	subs	r2, #1
 800449a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f001 f932 	bl	8005708 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044b0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	22e0      	movs	r2, #224	; 0xe0
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e04b      	b.n	800457c <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044f4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6952      	ldr	r2, [r2, #20]
 80044fc:	0051      	lsls	r1, r2, #1
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	430b      	orrs	r3, r1
 8004504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004508:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 f998 	bl	8005842 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 f9de 	bl	80058d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	3305      	adds	r3, #5
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	021a      	lsls	r2, r3, #8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	4619      	mov	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	3303      	adds	r3, #3
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	061a      	lsls	r2, r3, #24
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	3302      	adds	r3, #2
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	3301      	adds	r3, #1
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004556:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004564:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004566:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2210      	movs	r2, #16
 8004576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	44020c00 	.word	0x44020c00
 8004588:	44000400 	.word	0x44000400
 800458c:	431bde83 	.word	0x431bde83

08004590 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d17c      	bne.n	800469c <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2223      	movs	r2, #35	; 0x23
 80045a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_ETH_Start_IT+0x118>)
 80045be:	430b      	orrs	r3, r1
 80045c0:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 80045d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2204      	movs	r2, #4
 80045e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f9eb 	bl	80049be <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0202 	orr.w	r2, r2, #2
 80045f6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004634:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004640:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004650:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8004668:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800466c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 8004684:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8004688:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800468c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2223      	movs	r2, #35	; 0x23
 8004694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	0c020060 	.word	0x0c020060

080046ac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ba:	2b23      	cmp	r3, #35	; 0x23
 80046bc:	d167      	bne.n	800478e <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2223      	movs	r2, #35	; 0x23
 80046c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80046da:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80046de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046fe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800471a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0202 	bic.w	r2, r2, #2
 8004750:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e00e      	b.n	8004776 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	3212      	adds	r2, #18
 800475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004762:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d9ed      	bls.n	8004758 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2210      	movs	r2, #16
 8004786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f043 0201 	orr.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e03a      	b.n	8004836 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	2b23      	cmp	r3, #35	; 0x23
 80047c8:	d134      	bne.n	8004834 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80047d2:	2201      	movs	r2, #1
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 f8d9 	bl	800598e <ETH_Prepare_Tx_Descriptors>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f043 0202 	orr.w	r2, r3, #2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e01f      	b.n	8004836 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80047f6:	f3bf 8f4f 	dsb	sy
}
 80047fa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	629a      	str	r2, [r3, #40]	; 0x28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	2b03      	cmp	r3, #3
 800480c:	d904      	bls.n	8004818 <HAL_ETH_Transmit_IT+0x7c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	1f1a      	subs	r2, r3, #4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3106      	adds	r1, #6
 8004824:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004828:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800482c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	e000      	b.n	8004836 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0a5      	b.n	80049b6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004870:	2b23      	cmp	r3, #35	; 0x23
 8004872:	d001      	beq.n	8004878 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e09e      	b.n	80049b6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	3212      	adds	r2, #18
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488e:	f1c3 0304 	rsb	r3, r3, #4
 8004892:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004894:	e067      	b.n	8004966 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <HAL_ETH_ReadData+0x88>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d03d      	beq.n	8004942 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800491c:	461a      	mov	r2, r3
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f7fd fbbb 	bl	800209c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3301      	adds	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d902      	bls.n	8004954 <HAL_ETH_ReadData+0x116>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3b04      	subs	r3, #4
 8004952:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	3212      	adds	r2, #18
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3301      	adds	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800496a:	2b00      	cmp	r3, #0
 800496c:	db06      	blt.n	800497c <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	d202      	bcs.n	800497c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d08c      	beq.n	8004896 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	441a      	add	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f814 	bl	80049be <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d108      	bne.n	80049b4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b088      	sub	sp, #32
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80049ca:	2301      	movs	r3, #1
 80049cc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	3212      	adds	r2, #18
 80049da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049de:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80049e6:	e03b      	b.n	8004a60 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d112      	bne.n	8004a16 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fd fb21 	bl	800203c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	74fb      	strb	r3, [r7, #19]
 8004a04:	e007      	b.n	8004a16 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	461a      	mov	r2, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d021      	beq.n	8004a60 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8004a1c:	f3bf 8f5f 	dmb	sy
}
 8004a20:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	e003      	b.n	8004a3c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8004a3a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d902      	bls.n	8004a4e <ETH_UpdateDescriptor+0x90>
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	3212      	adds	r2, #18
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	617b      	str	r3, [r7, #20]
      desccount--;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <ETH_UpdateDescriptor+0xae>
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1bd      	bne.n	80049e8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d00d      	beq.n	8004a92 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004a92:	bf00      	nop
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004ab8:	e03f      	b.n	8004b3a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004ae2:	7bbb      	ldrb	r3, [r7, #14]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d028      	beq.n	8004b3a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68d9      	ldr	r1, [r3, #12]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4613      	mov	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	db1b      	blt.n	8004b36 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	3304      	adds	r3, #4
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fd fb06 	bl	800211c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	3304      	adds	r3, #4
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3301      	adds	r3, #1
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b34:	e001      	b.n	8004b3a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <HAL_ETH_ReleaseTxPacket+0xac>
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1b9      	bne.n	8004aba <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b60:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d115      	bne.n	8004b98 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d10b      	bne.n	8004b98 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f248 0340 	movw	r3, #32832	; 0x8040
 8004b8e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fdfa 	bl	800178c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d115      	bne.n	8004bd8 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10b      	bne.n	8004bd8 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f248 0301 	movw	r3, #32769	; 0x8001
 8004bce:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fdea 	bl	80017ac <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bec:	d153      	bne.n	8004c96 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c02:	d148      	bne.n	8004c96 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c28:	d11e      	bne.n	8004c68 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c32:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8004c36:	f241 1302 	movw	r3, #4354	; 0x1102
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c5a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	22e0      	movs	r2, #224	; 0xe0
 8004c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004c66:	e013      	b.n	8004c90 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c70:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004c74:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c86:	461a      	mov	r2, r3
 8004c88:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8004c8c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc fd9b 	bl	80017cc <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c9e:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d019      	beq.n	8004ce8 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	22e0      	movs	r2, #224	; 0xe0
 8004cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fd76 	bl	80017cc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d10f      	bne.n	8004d18 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d00:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f830 	bl	8004d70 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d10f      	bne.n	8004d48 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f822 	bl	8004d84 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004d48:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <HAL_ETH_IRQHandler+0x21c>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <HAL_ETH_IRQHandler+0x21c>)
 8004d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f81b 	bl	8004d98 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	44022000 	.word	0x44022000

08004d70 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e03e      	b.n	8004e4c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	055b      	lsls	r3, r3, #21
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f043 030c 	orr.w	r3, r3, #12
 8004dfa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004e0e:	f7ff f90d 	bl	800402c <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004e14:	e009      	b.n	8004e2a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004e16:	f7ff f909 	bl	800402c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e24:	d901      	bls.n	8004e2a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e010      	b.n	8004e4c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ed      	bne.n	8004e16 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e03c      	b.n	8004ef0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e7e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	055b      	lsls	r3, r3, #21
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 030c 	bic.w	r3, r3, #12
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004eb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004eba:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004ec2:	f7ff f8b3 	bl	800402c <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ec8:	e009      	b.n	8004ede <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004eca:	f7ff f8af 	bl	800402c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed8:	d901      	bls.n	8004ede <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e008      	b.n	8004ef0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1ed      	bne.n	8004eca <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40028000 	.word	0x40028000

08004efc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e1c3      	b.n	8005298 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 020c 	and.w	r2, r3, #12
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800508a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf14      	ite	ne
 8005092:	2301      	movne	r3, #1
 8005094:	2300      	moveq	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8005120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	0e5b      	lsrs	r3, r3, #25
 800515a:	f003 021f 	and.w	r2, r3, #31
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 020f 	and.w	r2, r3, #15
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	b29a      	uxth	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005224:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005234:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e00b      	b.n	80052d0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d105      	bne.n	80052ce <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f87d 	bl	80053c4 <ETH_SetMACConfig>

    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
  }
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052f2:	f003 f939 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 80052f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a25      	ldr	r2, [pc, #148]	; (8005390 <HAL_ETH_SetMDIOClockRange+0xb8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d908      	bls.n	8005312 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a24      	ldr	r2, [pc, #144]	; (8005394 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d804      	bhi.n	8005312 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e034      	b.n	800537c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d908      	bls.n	800532c <HAL_ETH_SetMDIOClockRange+0x54>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d204      	bcs.n	800532c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e027      	b.n	800537c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d303      	bcc.n	800533c <HAL_ETH_SetMDIOClockRange+0x64>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a19      	ldr	r2, [pc, #100]	; (800539c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d91e      	bls.n	800537a <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d908      	bls.n	8005356 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d804      	bhi.n	8005356 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e012      	b.n	800537c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d908      	bls.n	8005370 <HAL_ETH_SetMDIOClockRange+0x98>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d804      	bhi.n	8005370 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e005      	b.n	800537c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e000      	b.n	800537c <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800537a:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	01312cff 	.word	0x01312cff
 8005394:	02160ebf 	.word	0x02160ebf
 8005398:	03938700 	.word	0x03938700
 800539c:	05f5e0ff 	.word	0x05f5e0ff
 80053a0:	08f0d17f 	.word	0x08f0d17f
 80053a4:	0ee6b280 	.word	0x0ee6b280

080053a8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80053d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	791b      	ldrb	r3, [r3, #4]
 80053dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	7b1b      	ldrb	r3, [r3, #12]
 80053e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7b5b      	ldrb	r3, [r3, #13]
 80053ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	7b9b      	ldrb	r3, [r3, #14]
 80053f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	7bdb      	ldrb	r3, [r3, #15]
 80053fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	7c12      	ldrb	r2, [r2, #16]
 8005404:	2a00      	cmp	r2, #0
 8005406:	d102      	bne.n	800540e <ETH_SetMACConfig+0x4a>
 8005408:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800540c:	e000      	b.n	8005410 <ETH_SetMACConfig+0x4c>
 800540e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005410:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	7c52      	ldrb	r2, [r2, #17]
 8005416:	2a00      	cmp	r2, #0
 8005418:	d102      	bne.n	8005420 <ETH_SetMACConfig+0x5c>
 800541a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800541e:	e000      	b.n	8005422 <ETH_SetMACConfig+0x5e>
 8005420:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	7c9b      	ldrb	r3, [r3, #18]
 8005428:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800542a:	431a      	orrs	r2, r3
               macconf->Speed |
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005430:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	7f1b      	ldrb	r3, [r3, #28]
 800543c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800543e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	7f5b      	ldrb	r3, [r3, #29]
 8005444:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005446:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	7f92      	ldrb	r2, [r2, #30]
 800544c:	2a00      	cmp	r2, #0
 800544e:	d102      	bne.n	8005456 <ETH_SetMACConfig+0x92>
 8005450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005454:	e000      	b.n	8005458 <ETH_SetMACConfig+0x94>
 8005456:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005458:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	7fdb      	ldrb	r3, [r3, #31]
 800545e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005460:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005468:	2a00      	cmp	r2, #0
 800546a:	d102      	bne.n	8005472 <ETH_SetMACConfig+0xae>
 800546c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005470:	e000      	b.n	8005474 <ETH_SetMACConfig+0xb0>
 8005472:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005474:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800547a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005482:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005484:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b57      	ldr	r3, [pc, #348]	; (80055f4 <ETH_SetMACConfig+0x230>)
 8005496:	4013      	ands	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	68f9      	ldr	r1, [r7, #12]
 800549e:	430b      	orrs	r3, r1
 80054a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	d102      	bne.n	80054d6 <ETH_SetMACConfig+0x112>
 80054d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054d4:	e000      	b.n	80054d8 <ETH_SetMACConfig+0x114>
 80054d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4b43      	ldr	r3, [pc, #268]	; (80055f8 <ETH_SetMACConfig+0x234>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	68f9      	ldr	r1, [r7, #12]
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	430b      	orrs	r3, r1
 800551c:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005524:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800552a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005532:	2a00      	cmp	r2, #0
 8005534:	d101      	bne.n	800553a <ETH_SetMACConfig+0x176>
 8005536:	2280      	movs	r2, #128	; 0x80
 8005538:	e000      	b.n	800553c <ETH_SetMACConfig+0x178>
 800553a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800553c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005542:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800554e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	68f9      	ldr	r1, [r7, #12]
 800555a:	430b      	orrs	r3, r1
 800555c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005564:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800556c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f023 0103 	bic.w	r1, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	430a      	orrs	r2, r1
 8005586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005592:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	d101      	bne.n	80055b6 <ETH_SetMACConfig+0x1f2>
 80055b2:	2240      	movs	r2, #64	; 0x40
 80055b4:	e000      	b.n	80055b8 <ETH_SetMACConfig+0x1f4>
 80055b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80055b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80055c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80055d8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	00048083 	.word	0x00048083
 80055f8:	c0f88000 	.word	0xc0f88000

080055fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005614:	f023 0302 	bic.w	r3, r3, #2
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	6811      	ldr	r1, [r2, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	430b      	orrs	r3, r1
 8005622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005626:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	791b      	ldrb	r3, [r3, #4]
 800562c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005632:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	7b1b      	ldrb	r3, [r3, #12]
 8005638:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	430b      	orrs	r3, r1
 8005658:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800565c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	7b5b      	ldrb	r3, [r3, #13]
 8005662:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005678:	4b21      	ldr	r3, [pc, #132]	; (8005700 <ETH_SetDMAConfig+0x104>)
 800567a:	4013      	ands	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	430b      	orrs	r3, r1
 8005684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005688:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7d1b      	ldrb	r3, [r3, #20]
 8005694:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005696:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	7f5b      	ldrb	r3, [r3, #29]
 800569c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80056ae:	4b15      	ldr	r3, [pc, #84]	; (8005704 <ETH_SetDMAConfig+0x108>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056be:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	7f1b      	ldrb	r3, [r3, #28]
 80056c6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80056dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056e0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	68f9      	ldr	r1, [r7, #12]
 80056ea:	430b      	orrs	r3, r1
 80056ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056f0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	fffec000 	.word	0xfffec000
 8005704:	ffc0efef 	.word	0xffc0efef

08005708 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b0a4      	sub	sp, #144	; 0x90
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005710:	2301      	movs	r3, #1
 8005712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005716:	2300      	movs	r3, #0
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005720:	2300      	movs	r3, #0
 8005722:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005748:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005750:	2300      	movs	r3, #0
 8005752:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800575a:	2300      	movs	r3, #0
 800575c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005760:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005764:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800576c:	2300      	movs	r3, #0
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005776:	2300      	movs	r3, #0
 8005778:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005782:	2300      	movs	r3, #0
 8005784:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005786:	2300      	movs	r3, #0
 8005788:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800578a:	2300      	movs	r3, #0
 800578c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80057a0:	2320      	movs	r3, #32
 80057a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80057b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80057b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80057c4:	2302      	movs	r3, #2
 80057c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057e2:	2300      	movs	r3, #0
 80057e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fde6 	bl	80053c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057f8:	2301      	movs	r3, #1
 80057fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057fc:	2301      	movs	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800580a:	2300      	movs	r3, #0
 800580c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800580e:	2300      	movs	r3, #0
 8005810:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005812:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005816:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005818:	2300      	movs	r3, #0
 800581a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800581c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005820:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005828:	f44f 7306 	mov.w	r3, #536	; 0x218
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff fee1 	bl	80055fc <ETH_SetDMAConfig>
}
 800583a:	bf00      	nop
 800583c:	3790      	adds	r7, #144	; 0x90
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e01d      	b.n	800588c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68d9      	ldr	r1, [r3, #12]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	440b      	add	r3, r1
 8005860:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	3206      	adds	r2, #6
 8005882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d9de      	bls.n	8005850 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a0:	461a      	mov	r2, r3
 80058a2:	2303      	movs	r3, #3
 80058a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e023      	b.n	800592a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6919      	ldr	r1, [r3, #16]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4613      	mov	r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4413      	add	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	440b      	add	r3, r1
 80058f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2200      	movs	r2, #0
 8005916:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	3212      	adds	r2, #18
 8005920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d9d8      	bls.n	80058e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005956:	461a      	mov	r2, r3
 8005958:	2303      	movs	r3, #3
 800595a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800598e:	b480      	push	{r7}
 8005990:	b08d      	sub	sp, #52	; 0x34
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3318      	adds	r3, #24
 800599e:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d0:	d007      	beq.n	80059e2 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	3304      	adds	r3, #4
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80059e2:	2302      	movs	r3, #2
 80059e4:	e25a      	b.n	8005e9c <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d044      	beq.n	8005a7c <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059fe:	431a      	orrs	r2, r3
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d027      	beq.n	8005a7c <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	431a      	orrs	r2, r3
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a6a:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005a7a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	6992      	ldr	r2, [r2, #24]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d105      	bne.n	8005ac2 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d036      	beq.n	8005b30 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005ace:	f3bf 8f5f 	dmb	sy
}
 8005ad2:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d902      	bls.n	8005af2 <ETH_Prepare_Tx_Descriptors+0x164>
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	3b04      	subs	r3, #4
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afa:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	3301      	adds	r3, #1
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0e:	d10f      	bne.n	8005b30 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8005b1a:	f3bf 8f5f 	dmb	sy
}
 8005b1e:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e1b5      	b.n	8005e9c <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	3301      	adds	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	6852      	ldr	r2, [r2, #4]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d014      	beq.n	8005b88 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005b76:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	6852      	ldr	r2, [r2, #4]
 8005b7e:	0412      	lsls	r2, r2, #16
 8005b80:	431a      	orrs	r2, r3
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	e00a      	b.n	8005b9e <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005b96:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005b9a:	6a3a      	ldr	r2, [r7, #32]
 8005b9c:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d019      	beq.n	8005bde <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	04db      	lsls	r3, r3, #19
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	0c9b      	lsrs	r3, r3, #18
 8005bc4:	049b      	lsls	r3, r3, #18
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	69d2      	ldr	r2, [r2, #28]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	60da      	str	r2, [r3, #12]
 8005bdc:	e028      	b.n	8005c30 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005be6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	6852      	ldr	r2, [r2, #4]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d008      	beq.n	8005c30 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005c66:	f3bf 8f5f 	dmb	sy
}
 8005c6a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80d9 	beq.w	8005e38 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005c98:	e0ce      	b.n	8005e38 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	3301      	adds	r3, #1
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d902      	bls.n	8005cb8 <ETH_Prepare_Tx_Descriptors+0x32a>
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cda:	d007      	beq.n	8005cec <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d029      	beq.n	8005d40 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfe:	e019      	b.n	8005d34 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8005d00:	f3bf 8f5f 	dmb	sy
}
 8005d04:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	3301      	adds	r3, #1
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d902      	bls.n	8005d24 <ETH_Prepare_Tx_Descriptors+0x396>
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	3b04      	subs	r3, #4
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	3301      	adds	r3, #1
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d3e1      	bcc.n	8005d00 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e0ad      	b.n	8005e9c <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	3301      	adds	r3, #1
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	6852      	ldr	r2, [r2, #4]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d014      	beq.n	8005d9e <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005d8c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	6852      	ldr	r2, [r2, #4]
 8005d94:	0412      	lsls	r2, r2, #16
 8005d96:	431a      	orrs	r2, r3
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	e00a      	b.n	8005db4 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005dac:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005db0:	6a3a      	ldr	r2, [r7, #32]
 8005db2:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	0c9b      	lsrs	r3, r3, #18
 8005dc6:	049b      	lsls	r3, r3, #18
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	69d2      	ldr	r2, [r2, #28]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	e019      	b.n	8005e14 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	6852      	ldr	r2, [r2, #4]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	3301      	adds	r3, #1
 8005e18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005e1a:	f3bf 8f5f 	dmb	sy
}
 8005e1e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f af2c 	bne.w	8005c9a <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d006      	beq.n	8005e56 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	e005      	b.n	8005e62 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e72:	6979      	ldr	r1, [r7, #20]
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	3304      	adds	r3, #4
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e82:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e84:	b672      	cpsid	i
}
 8005e86:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4413      	add	r3, r2
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005e96:	b662      	cpsie	i
}
 8005e98:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3734      	adds	r7, #52	; 0x34
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e147      	b.n	800614a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fd f836 	bl	8002f40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0210 	bic.w	r2, r2, #16
 8005ee2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ee4:	f7fe f8a2 	bl	800402c <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005eea:	e012      	b.n	8005f12 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005eec:	f7fe f89e 	bl	800402c <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b0a      	cmp	r3, #10
 8005ef8:	d90b      	bls.n	8005f12 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e11b      	b.n	800614a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d0e5      	beq.n	8005eec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f30:	f7fe f87c 	bl	800402c <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005f36:	e012      	b.n	8005f5e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005f38:	f7fe f878 	bl	800402c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b0a      	cmp	r3, #10
 8005f44:	d90b      	bls.n	8005f5e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2203      	movs	r2, #3
 8005f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e0f5      	b.n	800614a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0e5      	beq.n	8005f38 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0202 	orr.w	r2, r2, #2
 8005f7a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a74      	ldr	r2, [pc, #464]	; (8006154 <HAL_FDCAN_Init+0x2ac>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d103      	bne.n	8005f8e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005f86:	4a74      	ldr	r2, [pc, #464]	; (8006158 <HAL_FDCAN_Init+0x2b0>)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7c1b      	ldrb	r3, [r3, #16]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d108      	bne.n	8005fa8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa4:	619a      	str	r2, [r3, #24]
 8005fa6:	e007      	b.n	8005fb8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	7c5b      	ldrb	r3, [r3, #17]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d108      	bne.n	8005fd2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fce:	619a      	str	r2, [r3, #24]
 8005fd0:	e007      	b.n	8005fe2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699a      	ldr	r2, [r3, #24]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fe0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	7c9b      	ldrb	r3, [r3, #18]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d108      	bne.n	8005ffc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ff8:	619a      	str	r2, [r3, #24]
 8005ffa:	e007      	b.n	800600c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800600a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006030:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0210 	bic.w	r2, r2, #16
 8006040:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d108      	bne.n	800605c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0204 	orr.w	r2, r2, #4
 8006058:	619a      	str	r2, [r3, #24]
 800605a:	e02c      	b.n	80060b6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d028      	beq.n	80060b6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d01c      	beq.n	80060a6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800607a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0210 	orr.w	r2, r2, #16
 800608a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d110      	bne.n	80060b6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0220 	orr.w	r2, r2, #32
 80060a2:	619a      	str	r2, [r3, #24]
 80060a4:	e007      	b.n	80060b6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0220 	orr.w	r2, r2, #32
 80060b4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060c6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80060ce:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80060de:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060e0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ea:	d115      	bne.n	8006118 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	3b01      	subs	r3, #1
 80060f8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80060fa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	3b01      	subs	r3, #1
 8006102:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006104:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	3b01      	subs	r3, #1
 800610e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006114:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006116:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fdac 	bl	8006c8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	4000a400 	.word	0x4000a400
 8006158:	4000a500 	.word	0x4000a500

0800615c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800616c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d002      	beq.n	800617a <HAL_FDCAN_ConfigFilter+0x1e>
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d13d      	bne.n	80061f6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d119      	bne.n	80061b6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800618e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006196:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e01d      	b.n	80061f2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	075a      	lsls	r2, r3, #29
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	079a      	lsls	r2, r3, #30
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	3304      	adds	r3, #4
 80061ea:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e006      	b.n	8006204 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fa:	f043 0202 	orr.w	r2, r3, #2
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
  }
}
 8006204:	4618      	mov	r0, r3
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	d116      	bne.n	8006258 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006232:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	011a      	lsls	r2, r3, #4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	431a      	orrs	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	431a      	orrs	r2, r3
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e006      	b.n	8006266 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625c:	f043 0204 	orr.w	r2, r3, #4
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
  }
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b01      	cmp	r3, #1
 8006288:	d108      	bne.n	800629c <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	0219      	lsls	r1, r3, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	430a      	orrs	r2, r1
 8006296:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e006      	b.n	80062aa <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a0:	f043 0204 	orr.w	r2, r3, #4
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d109      	bne.n	80062de <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80062d8:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e006      	b.n	80062ec <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e2:	f043 0204 	orr.w	r2, r3, #4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
  }
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d110      	bne.n	800632e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e006      	b.n	800633c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	f043 0204 	orr.w	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
  }
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d156      	bne.n	800640e <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006370:	e011      	b.n	8006396 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b0a      	cmp	r3, #10
 8006376:	d90b      	bls.n	8006390 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637c:	f043 0201 	orr.w	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2203      	movs	r2, #3
 8006388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e045      	b.n	800641c <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0e6      	beq.n	8006372 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0210 	bic.w	r2, r2, #16
 80063b6:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063b8:	e011      	b.n	80063de <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b0a      	cmp	r3, #10
 80063be:	d90b      	bls.n	80063d8 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c4:	f043 0201 	orr.w	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2203      	movs	r2, #3
 80063d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e021      	b.n	800641c <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d0e6      	beq.n	80063ba <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0202 	orr.w	r2, r2, #2
 80063fa:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	e006      	b.n	800641c <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006412:	f043 0208 	orr.w	r2, r3, #8
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d12c      	bne.n	800649a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006454:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e023      	b.n	80064a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fc6a 	bl	8006d50 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2101      	movs	r1, #1
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	fa01 f202 	lsl.w	r2, r1, r2
 8006488:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800648c:	2201      	movs	r2, #1
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	409a      	lsls	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e006      	b.n	80064a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	f043 0208 	orr.w	r2, r3, #8
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b08b      	sub	sp, #44	; 0x2c
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064c8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80064ca:	7efb      	ldrb	r3, [r7, #27]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	f040 80e8 	bne.w	80066a2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d137      	bne.n	8006548 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d107      	bne.n	80064f8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0db      	b.n	80066b0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	0e1b      	lsrs	r3, r3, #24
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b01      	cmp	r3, #1
 8006508:	d10a      	bne.n	8006520 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006512:	0a5b      	lsrs	r3, r3, #9
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800651c:	2301      	movs	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006528:	0a1b      	lsrs	r3, r3, #8
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	4613      	mov	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4413      	add	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	440b      	add	r3, r1
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
 8006546:	e036      	b.n	80065b6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	2b00      	cmp	r3, #0
 8006556:	d107      	bne.n	8006568 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0a3      	b.n	80066b0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006570:	0e1b      	lsrs	r3, r3, #24
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10a      	bne.n	8006590 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800658c:	2301      	movs	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006598:	0a1b      	lsrs	r3, r3, #8
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4413      	add	r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	440b      	add	r3, r1
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	0c9b      	lsrs	r3, r3, #18
 80065d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e005      	b.n	80065e6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	3304      	adds	r3, #4
 8006602:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	0fda      	lsrs	r2, r3, #31
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	3304      	adds	r3, #4
 8006650:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006656:	2300      	movs	r3, #0
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	e00a      	b.n	8006672 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	441a      	add	r2, r3
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	440b      	add	r3, r1
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	3301      	adds	r3, #1
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4a11      	ldr	r2, [pc, #68]	; (80066bc <HAL_FDCAN_GetRxMessage+0x20c>)
 8006678:	5cd3      	ldrb	r3, [r2, r3]
 800667a:	461a      	mov	r2, r3
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	4293      	cmp	r3, r2
 8006680:	d3ec      	bcc.n	800665c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d105      	bne.n	8006694 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006692:	e004      	b.n	800669e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	e006      	b.n	80066b0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a6:	f043 0208 	orr.w	r2, r3, #8
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	372c      	adds	r7, #44	; 0x2c
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	08027a64 	.word	0x08027a64

080066c0 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0207 	and.w	r2, r3, #7
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	f003 0207 	and.w	r2, r3, #7
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 0218 	and.w	r2, r3, #24
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 0201 	and.w	r2, r3, #1
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	099b      	lsrs	r3, r3, #6
 8006702:	f003 0201 	and.w	r2, r3, #1
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	09db      	lsrs	r3, r3, #7
 800670e:	f003 0201 	and.w	r2, r3, #1
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	0adb      	lsrs	r3, r3, #11
 800671a:	f003 0201 	and.w	r2, r3, #1
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	0b1b      	lsrs	r3, r3, #12
 8006726:	f003 0201 	and.w	r2, r3, #1
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	0b5b      	lsrs	r3, r3, #13
 8006732:	f003 0201 	and.w	r2, r3, #1
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	0b9b      	lsrs	r3, r3, #14
 800673e:	f003 0201 	and.w	r2, r3, #1
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	0c1b      	lsrs	r3, r3, #16
 800674a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	0bdb      	lsrs	r3, r3, #15
 800678a:	f003 0201 	and.w	r2, r3, #1
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	b2da      	uxtb	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80067c0:	68fb      	ldr	r3, [r7, #12]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067e0:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d003      	beq.n	80067f0 <HAL_FDCAN_ActivateNotification+0x22>
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	f040 80c8 	bne.w	8006980 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d03b      	beq.n	8006884 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d031      	beq.n	8006884 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d027      	beq.n	8006884 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01d      	beq.n	8006884 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d013      	beq.n	8006884 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00c      	beq.n	8006894 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d107      	bne.n	8006894 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d13b      	bne.n	8006920 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d131      	bne.n	8006920 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d127      	bne.n	8006920 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11d      	bne.n	8006920 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d113      	bne.n	8006920 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d109      	bne.n	8006920 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00c      	beq.n	8006930 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0202 	orr.w	r2, r2, #2
 800692e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	430a      	orrs	r2, r1
 800694a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d009      	beq.n	800696c <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	430a      	orrs	r2, r1
 8006968:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	430a      	orrs	r2, r1
 800697a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	e006      	b.n	800698e <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006984:	f043 0202 	orr.w	r2, r3, #2
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b08c      	sub	sp, #48	; 0x30
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b6:	4013      	ands	r3, r2
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ce:	4013      	ands	r3, r2
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e6:	4013      	ands	r3, r2
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f0:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80069f4:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fc:	6a3a      	ldr	r2, [r7, #32]
 80069fe:	4013      	ands	r3, r2
 8006a00:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a08:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006a0c:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	4013      	ands	r3, r2
 8006a18:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d006      	beq.n	8006a4c <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f916 	bl	8006c78 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d019      	beq.n	8006a8a <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d014      	beq.n	8006a8a <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a68:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4013      	ands	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a80:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006a82:	6939      	ldr	r1, [r7, #16]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f8d8 	bl	8006c3a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a96:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f8a2 	bl	8006be4 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006aae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fc fa1d 	bl	8002ef0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f897 	bl	8006bfa <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f890 	bl	8006c10 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d013      	beq.n	8006b2c <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006b0c:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2280      	movs	r2, #128	; 0x80
 8006b22:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f87c 	bl	8006c24 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00c      	beq.n	8006b50 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b48:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f880 	bl	8006c50 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b6c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f878 	bl	8006c64 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00f      	beq.n	8006b9e <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d007      	beq.n	8006bb4 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006bac:	69f9      	ldr	r1, [r7, #28]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fc f956 	bl	8002e60 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc f952 	bl	8002e80 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006bdc:	bf00      	nop
 8006bde:	3730      	adds	r7, #48	; 0x30
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006c94:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8006c96:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d103      	bne.n	8006caa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ca8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb8:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc0:	041a      	lsls	r2, r3, #16
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cde:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	061a      	lsls	r2, r3, #24
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e005      	b.n	8006d2c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d3f3      	bcc.n	8006d20 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	4000ac00 	.word	0x4000ac00
 8006d4c:	4000a800 	.word	0x4000a800

08006d50 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006d6e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	e00a      	b.n	8006d92 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006d84:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006d8a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d90:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006d9c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006da2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006da8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	440b      	add	r3, r1
 8006dc4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e020      	b.n	8006e26 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3303      	adds	r3, #3
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	4413      	add	r3, r2
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	3302      	adds	r3, #2
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	440b      	add	r3, r1
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006dfc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3301      	adds	r3, #1
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	440b      	add	r3, r1
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006e0a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	440a      	add	r2, r1
 8006e12:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006e14:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	3304      	adds	r3, #4
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <FDCAN_CopyMessageToRAM+0xf4>)
 8006e2c:	5cd3      	ldrb	r3, [r2, r3]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d3d6      	bcc.n	8006de4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	3724      	adds	r7, #36	; 0x24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	08027a64 	.word	0x08027a64

08006e48 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006e54:	4b32      	ldr	r3, [pc, #200]	; (8006f20 <HAL_FLASH_Program+0xd8>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_FLASH_Program+0x18>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e05a      	b.n	8006f16 <HAL_FLASH_Program+0xce>
 8006e60:	4b2f      	ldr	r3, [pc, #188]	; (8006f20 <HAL_FLASH_Program+0xd8>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006e66:	4b2e      	ldr	r3, [pc, #184]	; (8006f20 <HAL_FLASH_Program+0xd8>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e70:	f000 f8a4 	bl	8006fbc <FLASH_WaitForLastOperation>
 8006e74:	4603      	mov	r3, r0
 8006e76:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8006e78:	7ffb      	ldrb	r3, [r7, #31]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d147      	bne.n	8006f0e <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8006e7e:	4a28      	ldr	r2, [pc, #160]	; (8006f20 <HAL_FLASH_Program+0xd8>)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006e84:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <HAL_FLASH_Program+0xdc>)
 8006e86:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d104      	bne.n	8006e9c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	68b8      	ldr	r0, [r7, #8]
 8006e96:	f000 f8df 	bl	8007058 <FLASH_Program_QuadWord>
 8006e9a:	e01b      	b.n	8006ed4 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a22      	ldr	r2, [pc, #136]	; (8006f28 <HAL_FLASH_Program+0xe0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <HAL_FLASH_Program+0x64>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <HAL_FLASH_Program+0xe4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d104      	bne.n	8006eb6 <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	68b8      	ldr	r0, [r7, #8]
 8006eb0:	f000 f90e 	bl	80070d0 <FLASH_Program_QuadWord_OBK>
 8006eb4:	e00e      	b.n	8006ed4 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ebc:	4a1c      	ldr	r2, [pc, #112]	; (8006f30 <HAL_FLASH_Program+0xe8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d104      	bne.n	8006ecc <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	68b8      	ldr	r0, [r7, #8]
 8006ec6:	f000 f94f 	bl	8007168 <FLASH_Program_HalfWord>
 8006eca:	e003      	b.n	8006ed4 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	f000 f94a 	bl	8007168 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ed8:	f000 f870 	bl	8006fbc <FLASH_WaitForLastOperation>
 8006edc:	4603      	mov	r3, r0
 8006ede:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8006eea:	f023 0304 	bic.w	r3, r3, #4
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	401a      	ands	r2, r3
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4a0c      	ldr	r2, [pc, #48]	; (8006f2c <HAL_FLASH_Program+0xe4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d107      	bne.n	8006f0e <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006efe:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <HAL_FLASH_Program+0xec>)
 8006f00:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 0204 	bic.w	r2, r3, #4
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <HAL_FLASH_Program+0xd8>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20050048 	.word	0x20050048
 8006f24:	40022028 	.word	0x40022028
 8006f28:	10000002 	.word	0x10000002
 8006f2c:	10000006 	.word	0x10000006
 8006f30:	40000002 	.word	0x40000002
 8006f34:	40022040 	.word	0x40022040

08006f38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <HAL_FLASH_Unlock+0x40>)
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00d      	beq.n	8006f6a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <HAL_FLASH_Unlock+0x40>)
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_FLASH_Unlock+0x44>)
 8006f52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8006f54:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <HAL_FLASH_Unlock+0x40>)
 8006f56:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <HAL_FLASH_Unlock+0x48>)
 8006f58:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <HAL_FLASH_Unlock+0x40>)
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40022000 	.word	0x40022000
 8006f7c:	45670123 	.word	0x45670123
 8006f80:	cdef89ab 	.word	0xcdef89ab

08006f84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8006f8e:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <HAL_FLASH_Lock+0x34>)
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <HAL_FLASH_Lock+0x34>)
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <HAL_FLASH_Lock+0x34>)
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006faa:	79fb      	ldrb	r3, [r7, #7]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	40022000 	.word	0x40022000

08006fbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8006fc4:	f7fd f832 	bl	800402c <HAL_GetTick>
 8006fc8:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8006fca:	4b20      	ldr	r3, [pc, #128]	; (800704c <FLASH_WaitForLastOperation+0x90>)
 8006fcc:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8006fce:	e010      	b.n	8006ff2 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d00c      	beq.n	8006ff2 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fd8:	f7fd f828 	bl	800402c <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d302      	bcc.n	8006fee <FLASH_WaitForLastOperation+0x32>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e027      	b.n	8007042 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 030b 	and.w	r3, r3, #11
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e8      	bne.n	8006fd0 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8006ffe:	4b14      	ldr	r3, [pc, #80]	; (8007050 <FLASH_WaitForLastOperation+0x94>)
 8007000:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 800700a:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00c      	beq.n	800702c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8007012:	4b10      	ldr	r3, [pc, #64]	; (8007054 <FLASH_WaitForLastOperation+0x98>)
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4313      	orrs	r3, r2
 800701a:	4a0e      	ldr	r2, [pc, #56]	; (8007054 <FLASH_WaitForLastOperation+0x98>)
 800701c:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e00a      	b.n	8007042 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800703e:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40022020 	.word	0x40022020
 8007050:	40022030 	.word	0x40022030
 8007054:	20050048 	.word	0x20050048

08007058 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8007058:	b480      	push	{r7}
 800705a:	b08b      	sub	sp, #44	; 0x2c
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8007062:	2304      	movs	r3, #4
 8007064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8007070:	4b16      	ldr	r3, [pc, #88]	; (80070cc <FLASH_Program_QuadWord+0x74>)
 8007072:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f043 0202 	orr.w	r2, r3, #2
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007080:	f3ef 8310 	mrs	r3, PRIMASK
 8007084:	613b      	str	r3, [r7, #16]
  return(result);
 8007086:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800708a:	b672      	cpsid	i
}
 800708c:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	3304      	adds	r3, #4
 800709a:	623b      	str	r3, [r7, #32]
    src_addr++;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	3304      	adds	r3, #4
 80070a0:	61fb      	str	r3, [r7, #28]
    index--;
 80070a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a6:	3b01      	subs	r3, #1
 80070a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 80070ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1ec      	bne.n	800708e <FLASH_Program_QuadWord+0x36>
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f383 8810 	msr	PRIMASK, r3
}
 80070be:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80070c0:	bf00      	nop
 80070c2:	372c      	adds	r7, #44	; 0x2c
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	40022028 	.word	0x40022028

080070d0 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b08b      	sub	sp, #44	; 0x2c
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80070da:	2304      	movs	r3, #4
 80070dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80070e8:	4b1c      	ldr	r3, [pc, #112]	; (800715c <FLASH_Program_QuadWord_OBK+0x8c>)
 80070ea:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80070ec:	4b1c      	ldr	r3, [pc, #112]	; (8007160 <FLASH_Program_QuadWord_OBK+0x90>)
 80070ee:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f043 0202 	orr.w	r2, r3, #2
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4b18      	ldr	r3, [pc, #96]	; (8007164 <FLASH_Program_QuadWord_OBK+0x94>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	431a      	orrs	r2, r3
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800710e:	f3ef 8310 	mrs	r3, PRIMASK
 8007112:	60fb      	str	r3, [r7, #12]
  return(result);
 8007114:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007118:	b672      	cpsid	i
}
 800711a:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	3304      	adds	r3, #4
 8007128:	623b      	str	r3, [r7, #32]
    src_addr++;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3304      	adds	r3, #4
 800712e:	61fb      	str	r3, [r7, #28]
    index--;
 8007130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007134:	3b01      	subs	r3, #1
 8007136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 800713a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ec      	bne.n	800711c <FLASH_Program_QuadWord_OBK+0x4c>
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f383 8810 	msr	PRIMASK, r3
}
 800714c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800714e:	bf00      	nop
 8007150:	372c      	adds	r7, #44	; 0x2c
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40022028 	.word	0x40022028
 8007160:	40022040 	.word	0x40022040
 8007164:	20050048 	.word	0x20050048

08007168 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8007172:	4b09      	ldr	r3, [pc, #36]	; (8007198 <FLASH_Program_HalfWord+0x30>)
 8007174:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f043 0202 	orr.w	r2, r3, #2
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	8812      	ldrh	r2, [r2, #0]
 8007188:	b292      	uxth	r2, r2
 800718a:	801a      	strh	r2, [r3, #0]
}
 800718c:	bf00      	nop
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	40022028 	.word	0x40022028

0800719c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80071a6:	4b3a      	ldr	r3, [pc, #232]	; (8007290 <HAL_FLASHEx_Erase+0xf4>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_FLASHEx_Erase+0x16>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e06a      	b.n	8007288 <HAL_FLASHEx_Erase+0xec>
 80071b2:	4b37      	ldr	r3, [pc, #220]	; (8007290 <HAL_FLASHEx_Erase+0xf4>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80071b8:	4b35      	ldr	r3, [pc, #212]	; (8007290 <HAL_FLASHEx_Erase+0xf4>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071c2:	f7ff fefb 	bl	8006fbc <FLASH_WaitForLastOperation>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d157      	bne.n	8007280 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2e      	ldr	r2, [pc, #184]	; (8007290 <HAL_FLASHEx_Erase+0xf4>)
 80071d6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80071d8:	4b2e      	ldr	r3, [pc, #184]	; (8007294 <HAL_FLASHEx_Erase+0xf8>)
 80071da:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071e4:	f248 0208 	movw	r2, #32776	; 0x8008
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d10b      	bne.n	8007204 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f853 	bl	800729c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071fa:	f7ff fedf 	bl	8006fbc <FLASH_WaitForLastOperation>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]
 8007202:	e033      	b.n	800726c <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a23      	ldr	r2, [pc, #140]	; (8007298 <HAL_FLASHEx_Erase+0xfc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d108      	bne.n	8007220 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 800720e:	f000 f8b5 	bl	800737c <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007216:	f7ff fed1 	bl	8006fbc <FLASH_WaitForLastOperation>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]
 800721e:	e025      	b.n	800726c <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f04f 32ff 	mov.w	r2, #4294967295
 8007226:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	e015      	b.n	800725c <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4619      	mov	r1, r3
 8007236:	6938      	ldr	r0, [r7, #16]
 8007238:	f000 f868 	bl	800730c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800723c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007240:	f7ff febc 	bl	8006fbc <FLASH_WaitForLastOperation>
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	601a      	str	r2, [r3, #0]
          break;
 8007254:	e00a      	b.n	800726c <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3301      	adds	r3, #1
 800725a:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	4413      	add	r3, r2
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d3e1      	bcc.n	8007230 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007278:	43db      	mvns	r3, r3
 800727a:	401a      	ands	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007280:	4b03      	ldr	r3, [pc, #12]	; (8007290 <HAL_FLASHEx_Erase+0xf4>)
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]

  return status;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20050048 	.word	0x20050048
 8007294:	40022028 	.word	0x40022028
 8007298:	80000008 	.word	0x80000008

0800729c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80072a4:	4b18      	ldr	r3, [pc, #96]	; (8007308 <FLASH_MassErase+0x6c>)
 80072a6:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d108      	bne.n	80072c4 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ba:	f043 0320 	orr.w	r3, r3, #32
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 80072c2:	e01b      	b.n	80072fc <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072d6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80072da:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d007      	beq.n	80072fc <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	6013      	str	r3, [r2, #0]
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40022028 	.word	0x40022028

0800730c <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8007316:	4b18      	ldr	r3, [pc, #96]	; (8007378 <FLASH_Erase_Sector+0x6c>)
 8007318:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d011      	beq.n	8007348 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800732c:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	019b      	lsls	r3, r3, #6
 800733c:	4313      	orrs	r3, r2
 800733e:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8007346:	e010      	b.n	800736a <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	019b      	lsls	r3, r3, #6
 800735c:	4313      	orrs	r3, r2
 800735e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007362:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	6013      	str	r3, [r2, #0]
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40022028 	.word	0x40022028

0800737c <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <FLASH_OBKErase+0x24>)
 8007384:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f043 0208 	orr.w	r2, r3, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40022040 	.word	0x40022040

080073a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80073b2:	e136      	b.n	8007622 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	2101      	movs	r1, #1
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	fa01 f303 	lsl.w	r3, r1, r3
 80073c0:	4013      	ands	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8128 	beq.w	800761c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d003      	beq.n	80073dc <HAL_GPIO_Init+0x38>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b12      	cmp	r3, #18
 80073da:	d125      	bne.n	8007428 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	08da      	lsrs	r2, r3, #3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3208      	adds	r2, #8
 80073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	220f      	movs	r2, #15
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	43db      	mvns	r3, r3
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4013      	ands	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f003 0307 	and.w	r3, r3, #7
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	08da      	lsrs	r2, r3, #3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3208      	adds	r2, #8
 8007422:	6979      	ldr	r1, [r7, #20]
 8007424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	2203      	movs	r2, #3
 8007434:	fa02 f303 	lsl.w	r3, r2, r3
 8007438:	43db      	mvns	r3, r3
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4013      	ands	r3, r2
 800743e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f003 0203 	and.w	r2, r3, #3
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d00b      	beq.n	800747c <HAL_GPIO_Init+0xd8>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d007      	beq.n	800747c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007470:	2b11      	cmp	r3, #17
 8007472:	d003      	beq.n	800747c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b12      	cmp	r3, #18
 800747a:	d130      	bne.n	80074de <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	2203      	movs	r2, #3
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	43db      	mvns	r3, r3
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4013      	ands	r3, r2
 8007492:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074b2:	2201      	movs	r2, #1
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43db      	mvns	r3, r3
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4013      	ands	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	091b      	lsrs	r3, r3, #4
 80074c8:	f003 0201 	and.w	r2, r3, #1
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d017      	beq.n	8007516 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	2203      	movs	r2, #3
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4013      	ands	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d07c      	beq.n	800761c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007522:	4a47      	ldr	r2, [pc, #284]	; (8007640 <HAL_GPIO_Init+0x29c>)
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	089b      	lsrs	r3, r3, #2
 8007528:	3318      	adds	r3, #24
 800752a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	220f      	movs	r2, #15
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43db      	mvns	r3, r3
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4013      	ands	r3, r2
 8007544:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	0a9a      	lsrs	r2, r3, #10
 800754a:	4b3e      	ldr	r3, [pc, #248]	; (8007644 <HAL_GPIO_Init+0x2a0>)
 800754c:	4013      	ands	r3, r2
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	f002 0203 	and.w	r2, r2, #3
 8007554:	00d2      	lsls	r2, r2, #3
 8007556:	4093      	lsls	r3, r2
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800755e:	4938      	ldr	r1, [pc, #224]	; (8007640 <HAL_GPIO_Init+0x29c>)
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	3318      	adds	r3, #24
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800756c:	4b34      	ldr	r3, [pc, #208]	; (8007640 <HAL_GPIO_Init+0x29c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	43db      	mvns	r3, r3
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4013      	ands	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8007590:	4a2b      	ldr	r2, [pc, #172]	; (8007640 <HAL_GPIO_Init+0x29c>)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007596:	4b2a      	ldr	r3, [pc, #168]	; (8007640 <HAL_GPIO_Init+0x29c>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	43db      	mvns	r3, r3
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4013      	ands	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80075ba:	4a21      	ldr	r2, [pc, #132]	; (8007640 <HAL_GPIO_Init+0x29c>)
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80075c0:	4b1f      	ldr	r3, [pc, #124]	; (8007640 <HAL_GPIO_Init+0x29c>)
 80075c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	43db      	mvns	r3, r3
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4013      	ands	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80075e6:	4a16      	ldr	r2, [pc, #88]	; (8007640 <HAL_GPIO_Init+0x29c>)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80075ee:	4b14      	ldr	r3, [pc, #80]	; (8007640 <HAL_GPIO_Init+0x29c>)
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075f4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	43db      	mvns	r3, r3
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4013      	ands	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8007614:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <HAL_GPIO_Init+0x29c>)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3301      	adds	r3, #1
 8007620:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	f47f aec1 	bne.w	80073b4 <HAL_GPIO_Init+0x10>
  }
}
 8007632:	bf00      	nop
 8007634:	bf00      	nop
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	44022000 	.word	0x44022000
 8007644:	002f7f7f 	.word	0x002f7f7f

08007648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	807b      	strh	r3, [r7, #2]
 8007654:	4613      	mov	r3, r2
 8007656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007658:	787b      	ldrb	r3, [r7, #1]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800765e:	887a      	ldrh	r2, [r7, #2]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007664:	e002      	b.n	800766c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007666:	887a      	ldrh	r2, [r7, #2]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800768a:	887a      	ldrh	r2, [r7, #2]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4013      	ands	r3, r2
 8007690:	041a      	lsls	r2, r3, #16
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	43d9      	mvns	r1, r3
 8007696:	887b      	ldrh	r3, [r7, #2]
 8007698:	400b      	ands	r3, r1
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	619a      	str	r2, [r3, #24]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80076c2:	4a0c      	ldr	r2, [pc, #48]	; (80076f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7f9 f906 	bl	80008dc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80076d0:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	4013      	ands	r3, r2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80076dc:	4a05      	ldr	r2, [pc, #20]	; (80076f4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 f807 	bl	80076f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	44022000 	.word	0x44022000

080076f8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
	...

08007710 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_ICACHE_Enable+0x1c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <HAL_ICACHE_Enable+0x1c>)
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	40030400 	.word	0x40030400

08007730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	f000 bc28 	b.w	8007f94 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007744:	4b94      	ldr	r3, [pc, #592]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f003 0318 	and.w	r3, r3, #24
 800774c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800774e:	4b92      	ldr	r3, [pc, #584]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0310 	and.w	r3, r3, #16
 8007760:	2b00      	cmp	r3, #0
 8007762:	d05b      	beq.n	800781c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	2b08      	cmp	r3, #8
 8007768:	d005      	beq.n	8007776 <HAL_RCC_OscConfig+0x46>
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	2b18      	cmp	r3, #24
 800776e:	d114      	bne.n	800779a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d111      	bne.n	800779a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f000 bc08 	b.w	8007f94 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007784:	4b84      	ldr	r3, [pc, #528]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	4981      	ldr	r1, [pc, #516]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007794:	4313      	orrs	r3, r2
 8007796:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007798:	e040      	b.n	800781c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d023      	beq.n	80077ea <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80077a2:	4b7d      	ldr	r3, [pc, #500]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a7c      	ldr	r2, [pc, #496]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80077a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ae:	f7fc fc3d 	bl	800402c <HAL_GetTick>
 80077b2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80077b6:	f7fc fc39 	bl	800402c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e3e5      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80077c8:	4b73      	ldr	r3, [pc, #460]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0f0      	beq.n	80077b6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80077d4:	4b70      	ldr	r3, [pc, #448]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	041b      	lsls	r3, r3, #16
 80077e2:	496d      	ldr	r1, [pc, #436]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	618b      	str	r3, [r1, #24]
 80077e8:	e018      	b.n	800781c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077ea:	4b6b      	ldr	r3, [pc, #428]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a6a      	ldr	r2, [pc, #424]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80077f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f6:	f7fc fc19 	bl	800402c <HAL_GetTick>
 80077fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80077fe:	f7fc fc15 	bl	800402c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e3c1      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007810:	4b61      	ldr	r3, [pc, #388]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f0      	bne.n	80077fe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 80a0 	beq.w	800796a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	2b10      	cmp	r3, #16
 800782e:	d005      	beq.n	800783c <HAL_RCC_OscConfig+0x10c>
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2b18      	cmp	r3, #24
 8007834:	d109      	bne.n	800784a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d106      	bne.n	800784a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f040 8092 	bne.w	800796a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e3a4      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007852:	d106      	bne.n	8007862 <HAL_RCC_OscConfig+0x132>
 8007854:	4b50      	ldr	r3, [pc, #320]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a4f      	ldr	r2, [pc, #316]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 800785a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	e058      	b.n	8007914 <HAL_RCC_OscConfig+0x1e4>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d112      	bne.n	8007890 <HAL_RCC_OscConfig+0x160>
 800786a:	4b4b      	ldr	r3, [pc, #300]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a4a      	ldr	r2, [pc, #296]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	4b48      	ldr	r3, [pc, #288]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a47      	ldr	r2, [pc, #284]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 800787c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	4b45      	ldr	r3, [pc, #276]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a44      	ldr	r2, [pc, #272]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	e041      	b.n	8007914 <HAL_RCC_OscConfig+0x1e4>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007898:	d112      	bne.n	80078c0 <HAL_RCC_OscConfig+0x190>
 800789a:	4b3f      	ldr	r3, [pc, #252]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a3e      	ldr	r2, [pc, #248]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	4b3c      	ldr	r3, [pc, #240]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a3b      	ldr	r2, [pc, #236]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4b39      	ldr	r3, [pc, #228]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a38      	ldr	r2, [pc, #224]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e029      	b.n	8007914 <HAL_RCC_OscConfig+0x1e4>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80078c8:	d112      	bne.n	80078f0 <HAL_RCC_OscConfig+0x1c0>
 80078ca:	4b33      	ldr	r3, [pc, #204]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a32      	ldr	r2, [pc, #200]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4b30      	ldr	r3, [pc, #192]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a2f      	ldr	r2, [pc, #188]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4b2d      	ldr	r3, [pc, #180]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a2c      	ldr	r2, [pc, #176]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e011      	b.n	8007914 <HAL_RCC_OscConfig+0x1e4>
 80078f0:	4b29      	ldr	r3, [pc, #164]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a28      	ldr	r2, [pc, #160]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	4b26      	ldr	r3, [pc, #152]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a25      	ldr	r2, [pc, #148]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	4b23      	ldr	r3, [pc, #140]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a22      	ldr	r2, [pc, #136]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 800790e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d013      	beq.n	8007944 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fc fb86 	bl	800402c <HAL_GetTick>
 8007920:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007924:	f7fc fb82 	bl	800402c <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b64      	cmp	r3, #100	; 0x64
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e32e      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007936:	4b18      	ldr	r3, [pc, #96]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCC_OscConfig+0x1f4>
 8007942:	e012      	b.n	800796a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7fc fb72 	bl	800402c <HAL_GetTick>
 8007948:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800794c:	f7fc fb6e 	bl	800402c <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b64      	cmp	r3, #100	; 0x64
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e31a      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800795e:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <HAL_RCC_OscConfig+0x268>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1f0      	bne.n	800794c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 809a 	beq.w	8007aac <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_RCC_OscConfig+0x25a>
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2b18      	cmp	r3, #24
 8007982:	d149      	bne.n	8007a18 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d146      	bne.n	8007a18 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e2fe      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
 8007996:	bf00      	nop
 8007998:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d11c      	bne.n	80079dc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80079a2:	4b9a      	ldr	r3, [pc, #616]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0218 	and.w	r2, r3, #24
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d014      	beq.n	80079dc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80079b2:	4b96      	ldr	r3, [pc, #600]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 0218 	bic.w	r2, r3, #24
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	4993      	ldr	r1, [pc, #588]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80079c4:	f000 fdd0 	bl	8008568 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80079c8:	4b91      	ldr	r3, [pc, #580]	; (8007c10 <HAL_RCC_OscConfig+0x4e0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7f9 fb59 	bl	8001084 <HAL_InitTick>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e2db      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079dc:	f7fc fb26 	bl	800402c <HAL_GetTick>
 80079e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80079e4:	f7fc fb22 	bl	800402c <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e2ce      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079f6:	4b85      	ldr	r3, [pc, #532]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0f0      	beq.n	80079e4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007a02:	4b82      	ldr	r3, [pc, #520]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	497e      	ldr	r1, [pc, #504]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007a16:	e049      	b.n	8007aac <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d02c      	beq.n	8007a7a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007a20:	4b7a      	ldr	r3, [pc, #488]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f023 0218 	bic.w	r2, r3, #24
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	4977      	ldr	r1, [pc, #476]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8007a32:	4b76      	ldr	r3, [pc, #472]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a75      	ldr	r2, [pc, #468]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3e:	f7fc faf5 	bl	800402c <HAL_GetTick>
 8007a42:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007a46:	f7fc faf1 	bl	800402c <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e29d      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a58:	4b6c      	ldr	r3, [pc, #432]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0f0      	beq.n	8007a46 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007a64:	4b69      	ldr	r3, [pc, #420]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	4966      	ldr	r1, [pc, #408]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	610b      	str	r3, [r1, #16]
 8007a78:	e018      	b.n	8007aac <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a7a:	4b64      	ldr	r3, [pc, #400]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a63      	ldr	r2, [pc, #396]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a86:	f7fc fad1 	bl	800402c <HAL_GetTick>
 8007a8a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007a8e:	f7fc facd 	bl	800402c <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e279      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007aa0:	4b5a      	ldr	r3, [pc, #360]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d03c      	beq.n	8007b32 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01c      	beq.n	8007afa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ac0:	4b52      	ldr	r3, [pc, #328]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ac6:	4a51      	ldr	r2, [pc, #324]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007acc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad0:	f7fc faac 	bl	800402c <HAL_GetTick>
 8007ad4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007ad8:	f7fc faa8 	bl	800402c <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e254      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007aea:	4b48      	ldr	r3, [pc, #288]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0ef      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x3a8>
 8007af8:	e01b      	b.n	8007b32 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007afa:	4b44      	ldr	r3, [pc, #272]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b00:	4a42      	ldr	r2, [pc, #264]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007b02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0a:	f7fc fa8f 	bl	800402c <HAL_GetTick>
 8007b0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007b12:	f7fc fa8b 	bl	800402c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e237      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b24:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1ef      	bne.n	8007b12 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 80d2 	beq.w	8007ce4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007b40:	4b34      	ldr	r3, [pc, #208]	; (8007c14 <HAL_RCC_OscConfig+0x4e4>)
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d118      	bne.n	8007b7e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007b4c:	4b31      	ldr	r3, [pc, #196]	; (8007c14 <HAL_RCC_OscConfig+0x4e4>)
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	4a30      	ldr	r2, [pc, #192]	; (8007c14 <HAL_RCC_OscConfig+0x4e4>)
 8007b52:	f043 0301 	orr.w	r3, r3, #1
 8007b56:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b58:	f7fc fa68 	bl	800402c <HAL_GetTick>
 8007b5c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b60:	f7fc fa64 	bl	800402c <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e210      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007b72:	4b28      	ldr	r3, [pc, #160]	; (8007c14 <HAL_RCC_OscConfig+0x4e4>)
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d108      	bne.n	8007b98 <HAL_RCC_OscConfig+0x468>
 8007b86:	4b21      	ldr	r3, [pc, #132]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007b96:	e074      	b.n	8007c82 <HAL_RCC_OscConfig+0x552>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d118      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x4a2>
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ba6:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007ba8:	f023 0301 	bic.w	r3, r3, #1
 8007bac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007bb0:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bb6:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bc6:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bc8:	f023 0304 	bic.w	r3, r3, #4
 8007bcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007bd0:	e057      	b.n	8007c82 <HAL_RCC_OscConfig+0x552>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b05      	cmp	r3, #5
 8007bd8:	d11e      	bne.n	8007c18 <HAL_RCC_OscConfig+0x4e8>
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007be2:	f043 0304 	orr.w	r3, r3, #4
 8007be6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007bea:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bf0:	4a06      	ldr	r2, [pc, #24]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007bfa:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c00:	4a02      	ldr	r2, [pc, #8]	; (8007c0c <HAL_RCC_OscConfig+0x4dc>)
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c0a:	e03a      	b.n	8007c82 <HAL_RCC_OscConfig+0x552>
 8007c0c:	44020c00 	.word	0x44020c00
 8007c10:	20050040 	.word	0x20050040
 8007c14:	44020800 	.word	0x44020800
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b85      	cmp	r3, #133	; 0x85
 8007c1e:	d118      	bne.n	8007c52 <HAL_RCC_OscConfig+0x522>
 8007c20:	4ba2      	ldr	r3, [pc, #648]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c26:	4aa1      	ldr	r2, [pc, #644]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c28:	f043 0304 	orr.w	r3, r3, #4
 8007c2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c30:	4b9e      	ldr	r3, [pc, #632]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c36:	4a9d      	ldr	r2, [pc, #628]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c40:	4b9a      	ldr	r3, [pc, #616]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c46:	4a99      	ldr	r2, [pc, #612]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c48:	f043 0301 	orr.w	r3, r3, #1
 8007c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c50:	e017      	b.n	8007c82 <HAL_RCC_OscConfig+0x552>
 8007c52:	4b96      	ldr	r3, [pc, #600]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c58:	4a94      	ldr	r2, [pc, #592]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c62:	4b92      	ldr	r3, [pc, #584]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c68:	4a90      	ldr	r2, [pc, #576]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c6a:	f023 0304 	bic.w	r3, r3, #4
 8007c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c72:	4b8e      	ldr	r3, [pc, #568]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c78:	4a8c      	ldr	r2, [pc, #560]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d016      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8a:	f7fc f9cf 	bl	800402c <HAL_GetTick>
 8007c8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c90:	e00a      	b.n	8007ca8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c92:	f7fc f9cb 	bl	800402c <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e175      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ca8:	4b80      	ldr	r3, [pc, #512]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0ed      	beq.n	8007c92 <HAL_RCC_OscConfig+0x562>
 8007cb6:	e015      	b.n	8007ce4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb8:	f7fc f9b8 	bl	800402c <HAL_GetTick>
 8007cbc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cbe:	e00a      	b.n	8007cd6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc0:	f7fc f9b4 	bl	800402c <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e15e      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cd6:	4b75      	ldr	r3, [pc, #468]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1ed      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d036      	beq.n	8007d5e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d019      	beq.n	8007d2c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cf8:	4b6c      	ldr	r3, [pc, #432]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a6b      	ldr	r2, [pc, #428]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d04:	f7fc f992 	bl	800402c <HAL_GetTick>
 8007d08:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007d0a:	e008      	b.n	8007d1e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007d0c:	f7fc f98e 	bl	800402c <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e13a      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007d1e:	4b63      	ldr	r3, [pc, #396]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0f0      	beq.n	8007d0c <HAL_RCC_OscConfig+0x5dc>
 8007d2a:	e018      	b.n	8007d5e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d2c:	4b5f      	ldr	r3, [pc, #380]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a5e      	ldr	r2, [pc, #376]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d38:	f7fc f978 	bl	800402c <HAL_GetTick>
 8007d3c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007d3e:	e008      	b.n	8007d52 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007d40:	f7fc f974 	bl	800402c <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e120      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007d52:	4b56      	ldr	r3, [pc, #344]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1f0      	bne.n	8007d40 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8115 	beq.w	8007f92 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b18      	cmp	r3, #24
 8007d6c:	f000 80af 	beq.w	8007ece <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	f040 8086 	bne.w	8007e86 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007d7a:	4b4c      	ldr	r3, [pc, #304]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a4b      	ldr	r2, [pc, #300]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d86:	f7fc f951 	bl	800402c <HAL_GetTick>
 8007d8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007d8e:	f7fc f94d 	bl	800402c <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e0f9      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007da0:	4b42      	ldr	r3, [pc, #264]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f0      	bne.n	8007d8e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007dac:	4b3f      	ldr	r3, [pc, #252]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007dc0:	0212      	lsls	r2, r2, #8
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	4939      	ldr	r1, [pc, #228]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	628b      	str	r3, [r1, #40]	; 0x28
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	025b      	lsls	r3, r3, #9
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	431a      	orrs	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de4:	3b01      	subs	r3, #1
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	3b01      	subs	r3, #1
 8007df4:	061b      	lsls	r3, r3, #24
 8007df6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dfa:	492c      	ldr	r1, [pc, #176]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007e00:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e04:	4a29      	ldr	r2, [pc, #164]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e06:	f023 0310 	bic.w	r3, r3, #16
 8007e0a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e10:	4a26      	ldr	r2, [pc, #152]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007e16:	4b25      	ldr	r3, [pc, #148]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	4a24      	ldr	r2, [pc, #144]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e1c:	f043 0310 	orr.w	r3, r3, #16
 8007e20:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8007e22:	4b22      	ldr	r3, [pc, #136]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	f023 020c 	bic.w	r2, r3, #12
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	491f      	ldr	r1, [pc, #124]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8007e34:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	f023 0220 	bic.w	r2, r3, #32
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e40:	491a      	ldr	r1, [pc, #104]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e46:	4b19      	ldr	r3, [pc, #100]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	4a18      	ldr	r2, [pc, #96]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e50:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8007e52:	4b16      	ldr	r3, [pc, #88]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a15      	ldr	r2, [pc, #84]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5e:	f7fc f8e5 	bl	800402c <HAL_GetTick>
 8007e62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007e64:	e008      	b.n	8007e78 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007e66:	f7fc f8e1 	bl	800402c <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e08d      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f0      	beq.n	8007e66 <HAL_RCC_OscConfig+0x736>
 8007e84:	e085      	b.n	8007f92 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a08      	ldr	r2, [pc, #32]	; (8007eac <HAL_RCC_OscConfig+0x77c>)
 8007e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e92:	f7fc f8cb 	bl	800402c <HAL_GetTick>
 8007e96:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007e98:	e00a      	b.n	8007eb0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007e9a:	f7fc f8c7 	bl	800402c <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d903      	bls.n	8007eb0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e073      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
 8007eac:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007eb0:	4b3a      	ldr	r3, [pc, #232]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1ee      	bne.n	8007e9a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007ebc:	4b37      	ldr	r3, [pc, #220]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	4a36      	ldr	r2, [pc, #216]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007ec2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	6293      	str	r3, [r2, #40]	; 0x28
 8007ecc:	e061      	b.n	8007f92 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007ece:	4b33      	ldr	r3, [pc, #204]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ed4:	4b31      	ldr	r3, [pc, #196]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d031      	beq.n	8007f46 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f003 0203 	and.w	r2, r3, #3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d12a      	bne.n	8007f46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	0a1b      	lsrs	r3, r3, #8
 8007ef4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d122      	bne.n	8007f46 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d11a      	bne.n	8007f46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	0a5b      	lsrs	r3, r3, #9
 8007f14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d111      	bne.n	8007f46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	0c1b      	lsrs	r3, r3, #16
 8007f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d108      	bne.n	8007f46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	0e1b      	lsrs	r3, r3, #24
 8007f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d001      	beq.n	8007f4a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e024      	b.n	8007f94 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	08db      	lsrs	r3, r3, #3
 8007f50:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d01a      	beq.n	8007f92 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	4a0e      	ldr	r2, [pc, #56]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007f62:	f023 0310 	bic.w	r3, r3, #16
 8007f66:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f68:	f7fc f860 	bl	800402c <HAL_GetTick>
 8007f6c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8007f6e:	bf00      	nop
 8007f70:	f7fc f85c 	bl	800402c <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d0f9      	beq.n	8007f70 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f80:	4a06      	ldr	r2, [pc, #24]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	4a04      	ldr	r2, [pc, #16]	; (8007f9c <HAL_RCC_OscConfig+0x86c>)
 8007f8c:	f043 0310 	orr.w	r3, r3, #16
 8007f90:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	44020c00 	.word	0x44020c00

08007fa0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e19e      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fb4:	4b83      	ldr	r3, [pc, #524]	; (80081c4 <HAL_RCC_ClockConfig+0x224>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 030f 	and.w	r3, r3, #15
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d910      	bls.n	8007fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fc2:	4b80      	ldr	r3, [pc, #512]	; (80081c4 <HAL_RCC_ClockConfig+0x224>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f023 020f 	bic.w	r2, r3, #15
 8007fca:	497e      	ldr	r1, [pc, #504]	; (80081c4 <HAL_RCC_ClockConfig+0x224>)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd2:	4b7c      	ldr	r3, [pc, #496]	; (80081c4 <HAL_RCC_ClockConfig+0x224>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d001      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e186      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d012      	beq.n	8008016 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	4b74      	ldr	r3, [pc, #464]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	0a1b      	lsrs	r3, r3, #8
 8007ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d909      	bls.n	8008016 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8008002:	4b71      	ldr	r3, [pc, #452]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	496d      	ldr	r1, [pc, #436]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008012:	4313      	orrs	r3, r2
 8008014:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d012      	beq.n	8008048 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691a      	ldr	r2, [r3, #16]
 8008026:	4b68      	ldr	r3, [pc, #416]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008030:	429a      	cmp	r2, r3
 8008032:	d909      	bls.n	8008048 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8008034:	4b64      	ldr	r3, [pc, #400]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	4961      	ldr	r1, [pc, #388]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008044:	4313      	orrs	r3, r2
 8008046:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d010      	beq.n	8008076 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	4b5b      	ldr	r3, [pc, #364]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008060:	429a      	cmp	r2, r3
 8008062:	d908      	bls.n	8008076 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8008064:	4b58      	ldr	r3, [pc, #352]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	4955      	ldr	r1, [pc, #340]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008072:	4313      	orrs	r3, r2
 8008074:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d010      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	4b50      	ldr	r3, [pc, #320]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	429a      	cmp	r2, r3
 8008090:	d908      	bls.n	80080a4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8008092:	4b4d      	ldr	r3, [pc, #308]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	f023 020f 	bic.w	r2, r3, #15
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	494a      	ldr	r1, [pc, #296]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 8093 	beq.w	80081d8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d107      	bne.n	80080ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80080ba:	4b43      	ldr	r3, [pc, #268]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d121      	bne.n	800810a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e113      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d107      	bne.n	80080e2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080d2:	4b3d      	ldr	r3, [pc, #244]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d115      	bne.n	800810a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e107      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d107      	bne.n	80080fa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80080ea:	4b37      	ldr	r3, [pc, #220]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d109      	bne.n	800810a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e0fb      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080fa:	4b33      	ldr	r3, [pc, #204]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e0f3      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800810a:	4b2f      	ldr	r3, [pc, #188]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f023 0203 	bic.w	r2, r3, #3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	492c      	ldr	r1, [pc, #176]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008118:	4313      	orrs	r3, r2
 800811a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800811c:	f7fb ff86 	bl	800402c <HAL_GetTick>
 8008120:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2b03      	cmp	r3, #3
 8008128:	d112      	bne.n	8008150 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800812a:	e00a      	b.n	8008142 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800812c:	f7fb ff7e 	bl	800402c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	f241 3288 	movw	r2, #5000	; 0x1388
 800813a:	4293      	cmp	r3, r2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e0d7      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008142:	4b21      	ldr	r3, [pc, #132]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f003 0318 	and.w	r3, r3, #24
 800814a:	2b18      	cmp	r3, #24
 800814c:	d1ee      	bne.n	800812c <HAL_RCC_ClockConfig+0x18c>
 800814e:	e043      	b.n	80081d8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d112      	bne.n	800817e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008158:	e00a      	b.n	8008170 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800815a:	f7fb ff67 	bl	800402c <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	f241 3288 	movw	r2, #5000	; 0x1388
 8008168:	4293      	cmp	r3, r2
 800816a:	d901      	bls.n	8008170 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e0c0      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008170:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	f003 0318 	and.w	r3, r3, #24
 8008178:	2b10      	cmp	r3, #16
 800817a:	d1ee      	bne.n	800815a <HAL_RCC_ClockConfig+0x1ba>
 800817c:	e02c      	b.n	80081d8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d122      	bne.n	80081cc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8008186:	e00a      	b.n	800819e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008188:	f7fb ff50 	bl	800402c <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	f241 3288 	movw	r2, #5000	; 0x1388
 8008196:	4293      	cmp	r3, r2
 8008198:	d901      	bls.n	800819e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e0a9      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800819e:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <HAL_RCC_ClockConfig+0x228>)
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f003 0318 	and.w	r3, r3, #24
 80081a6:	2b08      	cmp	r3, #8
 80081a8:	d1ee      	bne.n	8008188 <HAL_RCC_ClockConfig+0x1e8>
 80081aa:	e015      	b.n	80081d8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80081ac:	f7fb ff3e 	bl	800402c <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d906      	bls.n	80081cc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e097      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
 80081c2:	bf00      	nop
 80081c4:	40022000 	.word	0x40022000
 80081c8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80081cc:	4b4b      	ldr	r3, [pc, #300]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f003 0318 	and.w	r3, r3, #24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e9      	bne.n	80081ac <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d010      	beq.n	8008206 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	4b44      	ldr	r3, [pc, #272]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d208      	bcs.n	8008206 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80081f4:	4b41      	ldr	r3, [pc, #260]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	f023 020f 	bic.w	r2, r3, #15
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	493e      	ldr	r1, [pc, #248]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008206:	4b3e      	ldr	r3, [pc, #248]	; (8008300 <HAL_RCC_ClockConfig+0x360>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d210      	bcs.n	8008236 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008214:	4b3a      	ldr	r3, [pc, #232]	; (8008300 <HAL_RCC_ClockConfig+0x360>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f023 020f 	bic.w	r2, r3, #15
 800821c:	4938      	ldr	r1, [pc, #224]	; (8008300 <HAL_RCC_ClockConfig+0x360>)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	4313      	orrs	r3, r2
 8008222:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008224:	4b36      	ldr	r3, [pc, #216]	; (8008300 <HAL_RCC_ClockConfig+0x360>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 030f 	and.w	r3, r3, #15
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d001      	beq.n	8008236 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e05d      	b.n	80082f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d010      	beq.n	8008264 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	4b2d      	ldr	r3, [pc, #180]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800824e:	429a      	cmp	r2, r3
 8008250:	d208      	bcs.n	8008264 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8008252:	4b2a      	ldr	r3, [pc, #168]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	4927      	ldr	r1, [pc, #156]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 8008260:	4313      	orrs	r3, r2
 8008262:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d012      	beq.n	8008296 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	4b21      	ldr	r3, [pc, #132]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800827e:	429a      	cmp	r2, r3
 8008280:	d209      	bcs.n	8008296 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8008282:	4b1e      	ldr	r3, [pc, #120]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	491a      	ldr	r1, [pc, #104]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 8008292:	4313      	orrs	r3, r2
 8008294:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0310 	and.w	r3, r3, #16
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d012      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	4b15      	ldr	r3, [pc, #84]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	0a1b      	lsrs	r3, r3, #8
 80082ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d209      	bcs.n	80082c8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80082b4:	4b11      	ldr	r3, [pc, #68]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	490e      	ldr	r1, [pc, #56]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80082c8:	f000 f822 	bl	8008310 <HAL_RCC_GetSysClockFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <HAL_RCC_ClockConfig+0x35c>)
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	490b      	ldr	r1, [pc, #44]	; (8008304 <HAL_RCC_ClockConfig+0x364>)
 80082d8:	5ccb      	ldrb	r3, [r1, r3]
 80082da:	fa22 f303 	lsr.w	r3, r2, r3
 80082de:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <HAL_RCC_ClockConfig+0x368>)
 80082e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80082e2:	4b0a      	ldr	r3, [pc, #40]	; (800830c <HAL_RCC_ClockConfig+0x36c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7f8 fecc 	bl	8001084 <HAL_InitTick>
 80082ec:	4603      	mov	r3, r0
 80082ee:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80082f0:	7afb      	ldrb	r3, [r7, #11]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	44020c00 	.word	0x44020c00
 8008300:	40022000 	.word	0x40022000
 8008304:	080278d8 	.word	0x080278d8
 8008308:	20050000 	.word	0x20050000
 800830c:	20050040 	.word	0x20050040

08008310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008310:	b480      	push	{r7}
 8008312:	b089      	sub	sp, #36	; 0x24
 8008314:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8008316:	4b8c      	ldr	r3, [pc, #560]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f003 0318 	and.w	r3, r3, #24
 800831e:	2b08      	cmp	r3, #8
 8008320:	d102      	bne.n	8008328 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008322:	4b8a      	ldr	r3, [pc, #552]	; (800854c <HAL_RCC_GetSysClockFreq+0x23c>)
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e107      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008328:	4b87      	ldr	r3, [pc, #540]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	f003 0318 	and.w	r3, r3, #24
 8008330:	2b00      	cmp	r3, #0
 8008332:	d112      	bne.n	800835a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008334:	4b84      	ldr	r3, [pc, #528]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008340:	4b81      	ldr	r3, [pc, #516]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	08db      	lsrs	r3, r3, #3
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	4a81      	ldr	r2, [pc, #516]	; (8008550 <HAL_RCC_GetSysClockFreq+0x240>)
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e0f1      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8008354:	4b7e      	ldr	r3, [pc, #504]	; (8008550 <HAL_RCC_GetSysClockFreq+0x240>)
 8008356:	61fb      	str	r3, [r7, #28]
 8008358:	e0ee      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800835a:	4b7b      	ldr	r3, [pc, #492]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f003 0318 	and.w	r3, r3, #24
 8008362:	2b10      	cmp	r3, #16
 8008364:	d102      	bne.n	800836c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008366:	4b7b      	ldr	r3, [pc, #492]	; (8008554 <HAL_RCC_GetSysClockFreq+0x244>)
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	e0e5      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800836c:	4b76      	ldr	r3, [pc, #472]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f003 0318 	and.w	r3, r3, #24
 8008374:	2b18      	cmp	r3, #24
 8008376:	f040 80dd 	bne.w	8008534 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800837a:	4b73      	ldr	r3, [pc, #460]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008384:	4b70      	ldr	r3, [pc, #448]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	0a1b      	lsrs	r3, r3, #8
 800838a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800838e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008390:	4b6d      	ldr	r3, [pc, #436]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	091b      	lsrs	r3, r3, #4
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800839c:	4b6a      	ldr	r3, [pc, #424]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80083a0:	08db      	lsrs	r3, r3, #3
 80083a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	fb02 f303 	mul.w	r3, r2, r3
 80083ac:	ee07 3a90 	vmov	s15, r3
 80083b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 80b7 	beq.w	800852e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d003      	beq.n	80083ce <HAL_RCC_GetSysClockFreq+0xbe>
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d056      	beq.n	800847a <HAL_RCC_GetSysClockFreq+0x16a>
 80083cc:	e077      	b.n	80084be <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80083ce:	4b5e      	ldr	r3, [pc, #376]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d02d      	beq.n	8008436 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083da:	4b5b      	ldr	r3, [pc, #364]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	08db      	lsrs	r3, r3, #3
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	4a5a      	ldr	r2, [pc, #360]	; (8008550 <HAL_RCC_GetSysClockFreq+0x240>)
 80083e6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ea:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008404:	4b50      	ldr	r3, [pc, #320]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 8008406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008414:	ed97 6a02 	vldr	s12, [r7, #8]
 8008418:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008558 <HAL_RCC_GetSysClockFreq+0x248>
 800841c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008420:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008428:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800842c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008430:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8008434:	e065      	b.n	8008502 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008440:	eddf 6a46 	vldr	s13, [pc, #280]	; 800855c <HAL_RCC_GetSysClockFreq+0x24c>
 8008444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008448:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 800844a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008458:	ed97 6a02 	vldr	s12, [r7, #8]
 800845c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008558 <HAL_RCC_GetSysClockFreq+0x248>
 8008460:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008464:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008474:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008478:	e043      	b.n	8008502 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008484:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008560 <HAL_RCC_GetSysClockFreq+0x250>
 8008488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848c:	4b2e      	ldr	r3, [pc, #184]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800849c:	ed97 6a02 	vldr	s12, [r7, #8]
 80084a0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008558 <HAL_RCC_GetSysClockFreq+0x248>
 80084a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80084ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80084bc:	e021      	b.n	8008502 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	ee07 3a90 	vmov	s15, r3
 80084c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008564 <HAL_RCC_GetSysClockFreq+0x254>
 80084cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d0:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 80084d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80084e4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008558 <HAL_RCC_GetSysClockFreq+0x248>
 80084e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80084f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008500:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <HAL_RCC_GetSysClockFreq+0x238>)
 8008504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008506:	0a5b      	lsrs	r3, r3, #9
 8008508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850c:	3301      	adds	r3, #1
 800850e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800851a:	edd7 6a06 	vldr	s13, [r7, #24]
 800851e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008526:	ee17 3a90 	vmov	r3, s15
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e004      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	e001      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8008534:	4b06      	ldr	r3, [pc, #24]	; (8008550 <HAL_RCC_GetSysClockFreq+0x240>)
 8008536:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8008538:	69fb      	ldr	r3, [r7, #28]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3724      	adds	r7, #36	; 0x24
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	44020c00 	.word	0x44020c00
 800854c:	003d0900 	.word	0x003d0900
 8008550:	03d09000 	.word	0x03d09000
 8008554:	007a1200 	.word	0x007a1200
 8008558:	46000000 	.word	0x46000000
 800855c:	4c742400 	.word	0x4c742400
 8008560:	4af42400 	.word	0x4af42400
 8008564:	4a742400 	.word	0x4a742400

08008568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800856c:	f7ff fed0 	bl	8008310 <HAL_RCC_GetSysClockFreq>
 8008570:	4602      	mov	r2, r0
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008574:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008576:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800857a:	4907      	ldr	r1, [pc, #28]	; (8008598 <HAL_RCC_GetHCLKFreq+0x30>)
 800857c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800857e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008582:	fa22 f303 	lsr.w	r3, r2, r3
 8008586:	4a05      	ldr	r2, [pc, #20]	; (800859c <HAL_RCC_GetHCLKFreq+0x34>)
 8008588:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800858a:	4b04      	ldr	r3, [pc, #16]	; (800859c <HAL_RCC_GetHCLKFreq+0x34>)
 800858c:	681b      	ldr	r3, [r3, #0]
}
 800858e:	4618      	mov	r0, r3
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	44020c00 	.word	0x44020c00
 8008598:	080278d8 	.word	0x080278d8
 800859c:	20050000 	.word	0x20050000

080085a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80085a4:	f7ff ffe0 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	091b      	lsrs	r3, r3, #4
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	4904      	ldr	r1, [pc, #16]	; (80085c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085b6:	5ccb      	ldrb	r3, [r1, r3]
 80085b8:	f003 031f 	and.w	r3, r3, #31
 80085bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	44020c00 	.word	0x44020c00
 80085c8:	080278e8 	.word	0x080278e8

080085cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80085d0:	f7ff ffca 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 80085d4:	4602      	mov	r2, r0
 80085d6:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	4904      	ldr	r1, [pc, #16]	; (80085f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085e2:	5ccb      	ldrb	r3, [r1, r3]
 80085e4:	f003 031f 	and.w	r3, r3, #31
 80085e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	44020c00 	.word	0x44020c00
 80085f4:	080278e8 	.word	0x080278e8

080085f8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80085fc:	f7ff ffb4 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 8008600:	4602      	mov	r2, r0
 8008602:	4b06      	ldr	r3, [pc, #24]	; (800861c <HAL_RCC_GetPCLK3Freq+0x24>)
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	0b1b      	lsrs	r3, r3, #12
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	4904      	ldr	r1, [pc, #16]	; (8008620 <HAL_RCC_GetPCLK3Freq+0x28>)
 800860e:	5ccb      	ldrb	r3, [r1, r3]
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008618:	4618      	mov	r0, r3
 800861a:	bd80      	pop	{r7, pc}
 800861c:	44020c00 	.word	0x44020c00
 8008620:	080278e8 	.word	0x080278e8

08008624 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	221f      	movs	r2, #31
 8008632:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008634:	4b15      	ldr	r3, [pc, #84]	; (800868c <HAL_RCC_GetClockConfig+0x68>)
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f003 0203 	and.w	r2, r3, #3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8008640:	4b12      	ldr	r3, [pc, #72]	; (800868c <HAL_RCC_GetClockConfig+0x68>)
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 020f 	and.w	r2, r3, #15
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	091b      	lsrs	r3, r3, #4
 800865e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <HAL_RCC_GetClockConfig+0x6c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 020f 	and.w	r2, r3, #15
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	44020c00 	.word	0x44020c00
 8008690:	40022000 	.word	0x40022000

08008694 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008698:	b0d8      	sub	sp, #352	; 0x160
 800869a:	af00      	add	r7, sp, #0
 800869c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086a0:	2300      	movs	r3, #0
 80086a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086a6:	2300      	movs	r3, #0
 80086a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80086b8:	2500      	movs	r5, #0
 80086ba:	ea54 0305 	orrs.w	r3, r4, r5
 80086be:	d00b      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80086c0:	4bcd      	ldr	r3, [pc, #820]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80086c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086c6:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80086ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d0:	4ac9      	ldr	r2, [pc, #804]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80086d2:	430b      	orrs	r3, r1
 80086d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f002 0801 	and.w	r8, r2, #1
 80086e4:	f04f 0900 	mov.w	r9, #0
 80086e8:	ea58 0309 	orrs.w	r3, r8, r9
 80086ec:	d042      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80086ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f4:	2b05      	cmp	r3, #5
 80086f6:	d823      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008749 	.word	0x08008749
 8008704:	08008719 	.word	0x08008719
 8008708:	0800872d 	.word	0x0800872d
 800870c:	08008749 	.word	0x08008749
 8008710:	08008749 	.word	0x08008749
 8008714:	08008749 	.word	0x08008749
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008718:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800871c:	3308      	adds	r3, #8
 800871e:	4618      	mov	r0, r3
 8008720:	f004 feda 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800872a:	e00e      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800872c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008730:	3330      	adds	r3, #48	; 0x30
 8008732:	4618      	mov	r0, r3
 8008734:	f004 ff68 	bl	800d608 <RCCEx_PLL3_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800873e:	e004      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008746:	e000      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8008748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10c      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008752:	4ba9      	ldr	r3, [pc, #676]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008754:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008758:	f023 0107 	bic.w	r1, r3, #7
 800875c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008762:	4aa5      	ldr	r2, [pc, #660]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008764:	430b      	orrs	r3, r1
 8008766:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800876a:	e003      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008770:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008774:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f002 0a02 	and.w	sl, r2, #2
 8008780:	f04f 0b00 	mov.w	fp, #0
 8008784:	ea5a 030b 	orrs.w	r3, sl, fp
 8008788:	f000 8088 	beq.w	800889c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800878c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008792:	2b28      	cmp	r3, #40	; 0x28
 8008794:	d868      	bhi.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	08008871 	.word	0x08008871
 80087a0:	08008869 	.word	0x08008869
 80087a4:	08008869 	.word	0x08008869
 80087a8:	08008869 	.word	0x08008869
 80087ac:	08008869 	.word	0x08008869
 80087b0:	08008869 	.word	0x08008869
 80087b4:	08008869 	.word	0x08008869
 80087b8:	08008869 	.word	0x08008869
 80087bc:	08008841 	.word	0x08008841
 80087c0:	08008869 	.word	0x08008869
 80087c4:	08008869 	.word	0x08008869
 80087c8:	08008869 	.word	0x08008869
 80087cc:	08008869 	.word	0x08008869
 80087d0:	08008869 	.word	0x08008869
 80087d4:	08008869 	.word	0x08008869
 80087d8:	08008869 	.word	0x08008869
 80087dc:	08008855 	.word	0x08008855
 80087e0:	08008869 	.word	0x08008869
 80087e4:	08008869 	.word	0x08008869
 80087e8:	08008869 	.word	0x08008869
 80087ec:	08008869 	.word	0x08008869
 80087f0:	08008869 	.word	0x08008869
 80087f4:	08008869 	.word	0x08008869
 80087f8:	08008869 	.word	0x08008869
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008869 	.word	0x08008869
 8008804:	08008869 	.word	0x08008869
 8008808:	08008869 	.word	0x08008869
 800880c:	08008869 	.word	0x08008869
 8008810:	08008869 	.word	0x08008869
 8008814:	08008869 	.word	0x08008869
 8008818:	08008869 	.word	0x08008869
 800881c:	08008871 	.word	0x08008871
 8008820:	08008869 	.word	0x08008869
 8008824:	08008869 	.word	0x08008869
 8008828:	08008869 	.word	0x08008869
 800882c:	08008869 	.word	0x08008869
 8008830:	08008869 	.word	0x08008869
 8008834:	08008869 	.word	0x08008869
 8008838:	08008869 	.word	0x08008869
 800883c:	08008871 	.word	0x08008871
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008840:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008844:	3308      	adds	r3, #8
 8008846:	4618      	mov	r0, r3
 8008848:	f004 fe46 	bl	800d4d8 <RCCEx_PLL2_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8008852:	e00e      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008854:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008858:	3330      	adds	r3, #48	; 0x30
 800885a:	4618      	mov	r0, r3
 800885c:	f004 fed4 	bl	800d608 <RCCEx_PLL3_Config>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8008866:	e004      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800886e:	e000      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8008870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008872:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10c      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800887a:	4b5f      	ldr	r3, [pc, #380]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800887c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008880:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800888a:	4a5b      	ldr	r2, [pc, #364]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800888c:	430b      	orrs	r3, r1
 800888e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008892:	e003      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008894:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008898:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800889c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f002 0304 	and.w	r3, r2, #4
 80088a8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80088b2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80088b6:	460b      	mov	r3, r1
 80088b8:	4313      	orrs	r3, r2
 80088ba:	d04e      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80088bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80088c6:	d02c      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80088c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80088cc:	d825      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d2:	d028      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80088d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d8:	d81f      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088da:	2bc0      	cmp	r3, #192	; 0xc0
 80088dc:	d025      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80088de:	2bc0      	cmp	r3, #192	; 0xc0
 80088e0:	d81b      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088e2:	2b80      	cmp	r3, #128	; 0x80
 80088e4:	d00f      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80088e6:	2b80      	cmp	r3, #128	; 0x80
 80088e8:	d817      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01f      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80088ee:	2b40      	cmp	r3, #64	; 0x40
 80088f0:	d113      	bne.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088f6:	3308      	adds	r3, #8
 80088f8:	4618      	mov	r0, r3
 80088fa:	f004 fded 	bl	800d4d8 <RCCEx_PLL2_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8008904:	e014      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008906:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800890a:	3330      	adds	r3, #48	; 0x30
 800890c:	4618      	mov	r0, r3
 800890e:	f004 fe7b 	bl	800d608 <RCCEx_PLL3_Config>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8008918:	e00a      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008920:	e006      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008922:	bf00      	nop
 8008924:	e004      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008926:	bf00      	nop
 8008928:	e002      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800892a:	bf00      	nop
 800892c:	e000      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800892e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008930:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10c      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008938:	4b2f      	ldr	r3, [pc, #188]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800893a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800893e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008942:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008948:	4a2b      	ldr	r2, [pc, #172]	; (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800894a:	430b      	orrs	r3, r1
 800894c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008952:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008956:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800895a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f002 0308 	and.w	r3, r2, #8
 8008966:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800896a:	2300      	movs	r3, #0
 800896c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008970:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d056      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800897a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800897e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008980:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008984:	d031      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x356>
 8008986:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800898a:	d82a      	bhi.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800898c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008990:	d02d      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008996:	d824      	bhi.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008998:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800899c:	d029      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800899e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80089a2:	d81e      	bhi.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80089a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a8:	d011      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80089aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ae:	d818      	bhi.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d023      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80089b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b8:	d113      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089be:	3308      	adds	r3, #8
 80089c0:	4618      	mov	r0, r3
 80089c2:	f004 fd89 	bl	800d4d8 <RCCEx_PLL2_Config>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80089cc:	e017      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089d2:	3330      	adds	r3, #48	; 0x30
 80089d4:	4618      	mov	r0, r3
 80089d6:	f004 fe17 	bl	800d608 <RCCEx_PLL3_Config>
 80089da:	4603      	mov	r3, r0
 80089dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80089e0:	e00d      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80089e8:	e009      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80089ea:	bf00      	nop
 80089ec:	e007      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80089ee:	bf00      	nop
 80089f0:	e005      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80089f2:	bf00      	nop
 80089f4:	e003      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80089f6:	bf00      	nop
 80089f8:	44020c00 	.word	0x44020c00
        break;
 80089fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10c      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008a06:	4bbb      	ldr	r3, [pc, #748]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a0c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8008a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a16:	4ab7      	ldr	r2, [pc, #732]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008a1e:	e003      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a24:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f002 0310 	and.w	r3, r2, #16
 8008a34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008a3e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8008a42:	460b      	mov	r3, r1
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d053      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8008a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008a52:	d031      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8008a54:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008a58:	d82a      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a5e:	d02d      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a64:	d824      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a6a:	d029      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8008a6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a70:	d81e      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a76:	d011      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7c:	d818      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d020      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a86:	d113      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f004 fd22 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008a9a:	e014      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008aa0:	3330      	adds	r3, #48	; 0x30
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f004 fdb0 	bl	800d608 <RCCEx_PLL3_Config>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008aae:	e00a      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008ab6:	e006      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008ab8:	bf00      	nop
 8008aba:	e004      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008abc:	bf00      	nop
 8008abe:	e002      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008ac0:	bf00      	nop
 8008ac2:	e000      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10c      	bne.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008ace:	4b89      	ldr	r3, [pc, #548]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008ad4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ade:	4a85      	ldr	r2, [pc, #532]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008ae6:	e003      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008aec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f002 0320 	and.w	r3, r2, #32
 8008afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008b06:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	d053      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8008b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b16:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008b1a:	d031      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8008b1c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008b20:	d82a      	bhi.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b26:	d02d      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b2c:	d824      	bhi.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b2e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008b32:	d029      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8008b34:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008b38:	d81e      	bhi.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3e:	d011      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b44:	d818      	bhi.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d020      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8008b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b4e:	d113      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b54:	3308      	adds	r3, #8
 8008b56:	4618      	mov	r0, r3
 8008b58:	f004 fcbe 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8008b62:	e014      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b68:	3330      	adds	r3, #48	; 0x30
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f004 fd4c 	bl	800d608 <RCCEx_PLL3_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8008b76:	e00a      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008b7e:	e006      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b80:	bf00      	nop
 8008b82:	e004      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b84:	bf00      	nop
 8008b86:	e002      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b88:	bf00      	nop
 8008b8a:	e000      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10c      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008b96:	4b57      	ldr	r3, [pc, #348]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b9c:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8008ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba6:	4a53      	ldr	r2, [pc, #332]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008bae:	e003      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008bb4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008bc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008bce:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	d053      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8008bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bde:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008be2:	d031      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008be4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008be8:	d82a      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bee:	d02d      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8008bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bf4:	d824      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008bf6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008bfa:	d029      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008bfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c00:	d81e      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008c02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c06:	d011      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008c08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c0c:	d818      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c16:	d113      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f004 fc5a 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8008c2a:	e014      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c30:	3330      	adds	r3, #48	; 0x30
 8008c32:	4618      	mov	r0, r3
 8008c34:	f004 fce8 	bl	800d608 <RCCEx_PLL3_Config>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8008c3e:	e00a      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008c46:	e006      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c48:	bf00      	nop
 8008c4a:	e004      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c4c:	bf00      	nop
 8008c4e:	e002      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c50:	bf00      	nop
 8008c52:	e000      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10c      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8008c5e:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008c64:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8008c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c6e:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008c70:	430b      	orrs	r3, r1
 8008c72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008c76:	e003      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c7c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008c8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c96:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	d055      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8008ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ca6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008caa:	d033      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008cac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008cb0:	d82c      	bhi.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cb6:	d02f      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cbc:	d826      	bhi.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008cbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cc2:	d02b      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008cc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cc8:	d820      	bhi.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cce:	d013      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cd4:	d81a      	bhi.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d022      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cde:	d115      	bne.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f004 fbf6 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008cec:	4603      	mov	r3, r0
 8008cee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008cf2:	e016      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008cf4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cfc:	3330      	adds	r3, #48	; 0x30
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f004 fc82 	bl	800d608 <RCCEx_PLL3_Config>
 8008d04:	4603      	mov	r3, r0
 8008d06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008d0a:	e00a      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008d12:	e006      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d14:	bf00      	nop
 8008d16:	e004      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d18:	bf00      	nop
 8008d1a:	e002      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d1c:	bf00      	nop
 8008d1e:	e000      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10c      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8008d2a:	4bbb      	ldr	r3, [pc, #748]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008d30:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d3a:	4ab7      	ldr	r2, [pc, #732]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008d42:	e003      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8008d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008d58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d62:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d053      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8008d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d72:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d76:	d031      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008d78:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d7c:	d82a      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d82:	d02d      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d88:	d824      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008d8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d8e:	d029      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8008d90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d94:	d81e      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d9a:	d011      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008da0:	d818      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d020      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008da6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008daa:	d113      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008db0:	3308      	adds	r3, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f004 fb90 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008dbe:	e014      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dc4:	3330      	adds	r3, #48	; 0x30
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f004 fc1e 	bl	800d608 <RCCEx_PLL3_Config>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008dd2:	e00a      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008dda:	e006      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008ddc:	bf00      	nop
 8008dde:	e004      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008de0:	bf00      	nop
 8008de2:	e002      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008de4:	bf00      	nop
 8008de6:	e000      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10c      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8008df2:	4b89      	ldr	r3, [pc, #548]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008df8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e02:	4a85      	ldr	r2, [pc, #532]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008e04:	430b      	orrs	r3, r1
 8008e06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008e0a:	e003      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008e10:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8008e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008e20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008e24:	2300      	movs	r3, #0
 8008e26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e2a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4313      	orrs	r3, r2
 8008e32:	d055      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8008e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e3c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008e40:	d031      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8008e42:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008e46:	d82a      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e4c:	d02d      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x816>
 8008e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e52:	d824      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e54:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008e58:	d029      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008e5a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008e5e:	d81e      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e64:	d011      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8008e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e6a:	d818      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d020      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e74:	d113      	bne.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f004 fb2b 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008e88:	e014      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e8e:	3330      	adds	r3, #48	; 0x30
 8008e90:	4618      	mov	r0, r3
 8008e92:	f004 fbb9 	bl	800d608 <RCCEx_PLL3_Config>
 8008e96:	4603      	mov	r3, r0
 8008e98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008e9c:	e00a      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008ea4:	e006      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008ea6:	bf00      	nop
 8008ea8:	e004      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008eaa:	bf00      	nop
 8008eac:	e002      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008eae:	bf00      	nop
 8008eb0:	e000      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eb4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10d      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008ebc:	4b56      	ldr	r3, [pc, #344]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008ec2:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8008ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ece:	4a52      	ldr	r2, [pc, #328]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008ed0:	430b      	orrs	r3, r1
 8008ed2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008ed6:	e003      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008edc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ef6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008efa:	460b      	mov	r3, r1
 8008efc:	4313      	orrs	r3, r2
 8008efe:	d044      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8008f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f08:	2b05      	cmp	r3, #5
 8008f0a:	d823      	bhi.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f5d 	.word	0x08008f5d
 8008f18:	08008f2d 	.word	0x08008f2d
 8008f1c:	08008f41 	.word	0x08008f41
 8008f20:	08008f5d 	.word	0x08008f5d
 8008f24:	08008f5d 	.word	0x08008f5d
 8008f28:	08008f5d 	.word	0x08008f5d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f30:	3308      	adds	r3, #8
 8008f32:	4618      	mov	r0, r3
 8008f34:	f004 fad0 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8008f3e:	e00e      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f44:	3330      	adds	r3, #48	; 0x30
 8008f46:	4618      	mov	r0, r3
 8008f48:	f004 fb5e 	bl	800d608 <RCCEx_PLL3_Config>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8008f52:	e004      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008f5a:	e000      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8008f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10d      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8008f66:	4b2c      	ldr	r3, [pc, #176]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008f68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008f6c:	f023 0107 	bic.w	r1, r3, #7
 8008f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f78:	4a27      	ldr	r2, [pc, #156]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008f7a:	430b      	orrs	r3, r1
 8008f7c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008f80:	e003      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f86:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008f96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fa0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	d04f      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8008faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb2:	2b50      	cmp	r3, #80	; 0x50
 8008fb4:	d029      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008fb6:	2b50      	cmp	r3, #80	; 0x50
 8008fb8:	d823      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fba:	2b40      	cmp	r3, #64	; 0x40
 8008fbc:	d027      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008fbe:	2b40      	cmp	r3, #64	; 0x40
 8008fc0:	d81f      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fc2:	2b30      	cmp	r3, #48	; 0x30
 8008fc4:	d025      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008fc6:	2b30      	cmp	r3, #48	; 0x30
 8008fc8:	d81b      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	d00f      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	d817      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d022      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008fd6:	2b10      	cmp	r3, #16
 8008fd8:	d113      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fde:	3308      	adds	r3, #8
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f004 fa79 	bl	800d4d8 <RCCEx_PLL2_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008fec:	e017      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ff2:	3330      	adds	r3, #48	; 0x30
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f004 fb07 	bl	800d608 <RCCEx_PLL3_Config>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8009000:	e00d      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009008:	e009      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800900a:	bf00      	nop
 800900c:	e007      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800900e:	bf00      	nop
 8009010:	e005      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8009012:	bf00      	nop
 8009014:	e003      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8009016:	bf00      	nop
 8009018:	44020c00 	.word	0x44020c00
        break;
 800901c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10d      	bne.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8009026:	4baf      	ldr	r3, [pc, #700]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009028:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800902c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8009030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009038:	4aaa      	ldr	r2, [pc, #680]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800903a:	430b      	orrs	r3, r1
 800903c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009040:	e003      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009042:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009046:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800904a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009056:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800905a:	2300      	movs	r3, #0
 800905c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009060:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009064:	460b      	mov	r3, r1
 8009066:	4313      	orrs	r3, r2
 8009068:	d055      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800906a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800906e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009072:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009076:	d031      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8009078:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800907c:	d82a      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800907e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009082:	d02d      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8009084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009088:	d824      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800908a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800908e:	d029      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8009090:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009094:	d81e      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8009096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800909a:	d011      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800909c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090a0:	d818      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d020      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80090a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090aa:	d113      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090b0:	3308      	adds	r3, #8
 80090b2:	4618      	mov	r0, r3
 80090b4:	f004 fa10 	bl	800d4d8 <RCCEx_PLL2_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80090be:	e014      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090c4:	3330      	adds	r3, #48	; 0x30
 80090c6:	4618      	mov	r0, r3
 80090c8:	f004 fa9e 	bl	800d608 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80090d2:	e00a      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80090da:	e006      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090dc:	bf00      	nop
 80090de:	e004      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090e0:	bf00      	nop
 80090e2:	e002      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090e4:	bf00      	nop
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10d      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80090f2:	4b7c      	ldr	r3, [pc, #496]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80090f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80090fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009104:	4a77      	ldr	r2, [pc, #476]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009106:	430b      	orrs	r3, r1
 8009108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800910c:	e003      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009112:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009116:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009126:	2300      	movs	r3, #0
 8009128:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800912c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009130:	460b      	mov	r3, r1
 8009132:	4313      	orrs	r3, r2
 8009134:	d03d      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8009136:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800913e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009142:	d01b      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8009144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009148:	d814      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800914a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914e:	d017      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8009150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009154:	d80e      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d014      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800915a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915e:	d109      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009160:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009164:	3330      	adds	r3, #48	; 0x30
 8009166:	4618      	mov	r0, r3
 8009168:	f004 fa4e 	bl	800d608 <RCCEx_PLL3_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8009172:	e008      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800917a:	e004      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800917c:	bf00      	nop
 800917e:	e002      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8009180:	bf00      	nop
 8009182:	e000      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8009184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009186:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10d      	bne.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800918e:	4b55      	ldr	r3, [pc, #340]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009190:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009194:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009198:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a0:	4a50      	ldr	r2, [pc, #320]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80091a2:	430b      	orrs	r3, r1
 80091a4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80091a8:	e003      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80091be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091c2:	2300      	movs	r3, #0
 80091c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4313      	orrs	r3, r2
 80091d0:	d03d      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80091d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80091de:	d01b      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80091e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80091e4:	d814      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80091e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091ea:	d017      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80091ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091f0:	d80e      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d014      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80091f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091fa:	d109      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009200:	3330      	adds	r3, #48	; 0x30
 8009202:	4618      	mov	r0, r3
 8009204:	f004 fa00 	bl	800d608 <RCCEx_PLL3_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800920e:	e008      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009216:	e004      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009218:	bf00      	nop
 800921a:	e002      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800921c:	bf00      	nop
 800921e:	e000      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009222:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10d      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800922a:	4b2e      	ldr	r3, [pc, #184]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800922c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009230:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800923c:	4a29      	ldr	r2, [pc, #164]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800923e:	430b      	orrs	r3, r1
 8009240:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009244:	e003      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009246:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800924a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800924e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800925a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800925e:	2300      	movs	r3, #0
 8009260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009264:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009268:	460b      	mov	r3, r1
 800926a:	4313      	orrs	r3, r2
 800926c:	d040      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800926e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009276:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800927a:	d01b      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800927c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009280:	d814      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8009282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009286:	d017      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009288:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800928c:	d80e      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d014      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009296:	d109      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800929c:	3330      	adds	r3, #48	; 0x30
 800929e:	4618      	mov	r0, r3
 80092a0:	f004 f9b2 	bl	800d608 <RCCEx_PLL3_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80092aa:	e008      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80092b2:	e004      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80092b4:	bf00      	nop
 80092b6:	e002      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80092b8:	bf00      	nop
 80092ba:	e000      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80092bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d110      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80092c6:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80092c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092cc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80092d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092d8:	4a02      	ldr	r2, [pc, #8]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80092da:	430b      	orrs	r3, r1
 80092dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80092e0:	e006      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80092e2:	bf00      	nop
 80092e4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	2100      	movs	r1, #0
 80092fa:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80092fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009306:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800930a:	460b      	mov	r3, r1
 800930c:	4313      	orrs	r3, r2
 800930e:	d03d      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8009310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009318:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800931c:	d01b      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800931e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009322:	d814      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009324:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009328:	d017      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800932a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800932e:	d80e      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d014      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8009334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009338:	d109      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800933a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800933e:	3330      	adds	r3, #48	; 0x30
 8009340:	4618      	mov	r0, r3
 8009342:	f004 f961 	bl	800d608 <RCCEx_PLL3_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800934c:	e008      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009354:	e004      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009356:	bf00      	nop
 8009358:	e002      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800935a:	bf00      	nop
 800935c:	e000      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800935e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009360:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009368:	4bbe      	ldr	r3, [pc, #760]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800936a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800936e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009372:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800937a:	4aba      	ldr	r2, [pc, #744]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800937c:	430b      	orrs	r3, r1
 800937e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009382:	e003      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009384:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009388:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800938c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800939c:	2300      	movs	r3, #0
 800939e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80093a6:	460b      	mov	r3, r1
 80093a8:	4313      	orrs	r3, r2
 80093aa:	d035      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80093ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093b8:	d015      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80093ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093be:	d80e      	bhi.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d012      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80093c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093c8:	d109      	bne.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093ce:	3330      	adds	r3, #48	; 0x30
 80093d0:	4618      	mov	r0, r3
 80093d2:	f004 f919 	bl	800d608 <RCCEx_PLL3_Config>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80093dc:	e006      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80093e4:	e002      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80093e6:	bf00      	nop
 80093e8:	e000      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80093ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10d      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80093f4:	4b9b      	ldr	r3, [pc, #620]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80093f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80093fa:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80093fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009402:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009406:	4a97      	ldr	r2, [pc, #604]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009408:	430b      	orrs	r3, r1
 800940a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800940e:	e003      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009410:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009414:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	2100      	movs	r1, #0
 8009422:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800942a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800942e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009432:	460b      	mov	r3, r1
 8009434:	4313      	orrs	r3, r2
 8009436:	d00e      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8009438:	4b8a      	ldr	r3, [pc, #552]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	4a89      	ldr	r2, [pc, #548]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800943e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009442:	61d3      	str	r3, [r2, #28]
 8009444:	4b87      	ldr	r3, [pc, #540]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009446:	69d9      	ldr	r1, [r3, #28]
 8009448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800944c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009450:	4a84      	ldr	r2, [pc, #528]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009452:	430b      	orrs	r3, r1
 8009454:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009462:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009466:	2300      	movs	r3, #0
 8009468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800946c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009470:	460b      	mov	r3, r1
 8009472:	4313      	orrs	r3, r2
 8009474:	d055      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8009476:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800947a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800947e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009482:	d031      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8009484:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009488:	d82a      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800948a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800948e:	d02d      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8009490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009494:	d824      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800949a:	d029      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800949c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a0:	d81e      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80094a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094a6:	d011      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80094a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094ac:	d818      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d020      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80094b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b6:	d113      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80094b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094bc:	3308      	adds	r3, #8
 80094be:	4618      	mov	r0, r3
 80094c0:	f004 f80a 	bl	800d4d8 <RCCEx_PLL2_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80094ca:	e014      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80094cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094d0:	3330      	adds	r3, #48	; 0x30
 80094d2:	4618      	mov	r0, r3
 80094d4:	f004 f898 	bl	800d608 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80094de:	e00a      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80094e6:	e006      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094e8:	bf00      	nop
 80094ea:	e004      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094ec:	bf00      	nop
 80094ee:	e002      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10d      	bne.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80094fe:	4b59      	ldr	r3, [pc, #356]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009500:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009504:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009508:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800950c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009510:	4a54      	ldr	r2, [pc, #336]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009512:	430b      	orrs	r3, r1
 8009514:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009518:	e003      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800951e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009522:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800952e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009532:	2300      	movs	r3, #0
 8009534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009538:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800953c:	460b      	mov	r3, r1
 800953e:	4313      	orrs	r3, r2
 8009540:	d055      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8009542:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800954a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800954e:	d031      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8009550:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009554:	d82a      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800955a:	d02d      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800955c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009560:	d824      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009562:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009566:	d029      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8009568:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800956c:	d81e      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800956e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009572:	d011      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8009574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009578:	d818      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800957a:	2b00      	cmp	r3, #0
 800957c:	d020      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800957e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009582:	d113      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009588:	3308      	adds	r3, #8
 800958a:	4618      	mov	r0, r3
 800958c:	f003 ffa4 	bl	800d4d8 <RCCEx_PLL2_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8009596:	e014      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009598:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800959c:	3330      	adds	r3, #48	; 0x30
 800959e:	4618      	mov	r0, r3
 80095a0:	f004 f832 	bl	800d608 <RCCEx_PLL3_Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80095aa:	e00a      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80095b2:	e006      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095b4:	bf00      	nop
 80095b6:	e004      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095b8:	bf00      	nop
 80095ba:	e002      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095bc:	bf00      	nop
 80095be:	e000      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10d      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80095ca:	4b26      	ldr	r3, [pc, #152]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80095cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80095d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80095d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095dc:	4a21      	ldr	r2, [pc, #132]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80095de:	430b      	orrs	r3, r1
 80095e0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80095e4:	e003      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80095ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80095ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	2100      	movs	r1, #0
 80095f8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009608:	460b      	mov	r3, r1
 800960a:	4313      	orrs	r3, r2
 800960c:	d057      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800960e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009612:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800961a:	d033      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800961c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009620:	d82c      	bhi.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009622:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009626:	d02f      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8009628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800962c:	d826      	bhi.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800962e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009632:	d02b      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8009634:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009638:	d820      	bhi.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800963a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800963e:	d013      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009644:	d81a      	bhi.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d022      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800964a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800964e:	d115      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009650:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009654:	3308      	adds	r3, #8
 8009656:	4618      	mov	r0, r3
 8009658:	f003 ff3e 	bl	800d4d8 <RCCEx_PLL2_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009662:	e016      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8009664:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009668:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800966c:	3330      	adds	r3, #48	; 0x30
 800966e:	4618      	mov	r0, r3
 8009670:	f003 ffca 	bl	800d608 <RCCEx_PLL3_Config>
 8009674:	4603      	mov	r3, r0
 8009676:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800967a:	e00a      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009682:	e006      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009684:	bf00      	nop
 8009686:	e004      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009688:	bf00      	nop
 800968a:	e002      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800968c:	bf00      	nop
 800968e:	e000      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009692:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10d      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800969a:	4bbb      	ldr	r3, [pc, #748]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800969c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80096a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80096a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096ac:	4ab6      	ldr	r2, [pc, #728]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80096ae:	430b      	orrs	r3, r1
 80096b0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80096b4:	e003      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096ba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80096be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	2100      	movs	r1, #0
 80096c8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80096d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80096d8:	460b      	mov	r3, r1
 80096da:	4313      	orrs	r3, r2
 80096dc:	d055      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80096de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096e6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80096ea:	d031      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80096ec:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80096f0:	d82a      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80096f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096f6:	d02d      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80096f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096fc:	d824      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80096fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009702:	d029      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8009704:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009708:	d81e      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800970a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800970e:	d011      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8009710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009714:	d818      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d020      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800971a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800971e:	d113      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009720:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009724:	3308      	adds	r3, #8
 8009726:	4618      	mov	r0, r3
 8009728:	f003 fed6 	bl	800d4d8 <RCCEx_PLL2_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009732:	e014      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009738:	3330      	adds	r3, #48	; 0x30
 800973a:	4618      	mov	r0, r3
 800973c:	f003 ff64 	bl	800d608 <RCCEx_PLL3_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009746:	e00a      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800974e:	e006      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009750:	bf00      	nop
 8009752:	e004      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009754:	bf00      	nop
 8009756:	e002      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009758:	bf00      	nop
 800975a:	e000      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800975c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800975e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10d      	bne.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8009766:	4b88      	ldr	r3, [pc, #544]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009768:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800976c:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8009770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009778:	4a83      	ldr	r2, [pc, #524]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800977a:	430b      	orrs	r3, r1
 800977c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009780:	e003      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009782:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009786:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800978a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	2100      	movs	r1, #0
 8009794:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80097a4:	460b      	mov	r3, r1
 80097a6:	4313      	orrs	r3, r2
 80097a8:	d055      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80097aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097b2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80097b6:	d031      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80097b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80097bc:	d82a      	bhi.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097c2:	d02d      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80097c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097c8:	d824      	bhi.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097ce:	d029      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80097d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097d4:	d81e      	bhi.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097da:	d011      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80097dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097e0:	d818      	bhi.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d020      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80097e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097ea:	d113      	bne.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097f0:	3308      	adds	r3, #8
 80097f2:	4618      	mov	r0, r3
 80097f4:	f003 fe70 	bl	800d4d8 <RCCEx_PLL2_Config>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80097fe:	e014      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009804:	3330      	adds	r3, #48	; 0x30
 8009806:	4618      	mov	r0, r3
 8009808:	f003 fefe 	bl	800d608 <RCCEx_PLL3_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8009812:	e00a      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800981a:	e006      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800981c:	bf00      	nop
 800981e:	e004      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009820:	bf00      	nop
 8009822:	e002      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009824:	bf00      	nop
 8009826:	e000      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10d      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8009832:	4b55      	ldr	r3, [pc, #340]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009834:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009838:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800983c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009840:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009844:	4a50      	ldr	r2, [pc, #320]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009846:	430b      	orrs	r3, r1
 8009848:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800984c:	e003      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009852:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8009856:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	2100      	movs	r1, #0
 8009860:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8009864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800986c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009870:	460b      	mov	r3, r1
 8009872:	4313      	orrs	r3, r2
 8009874:	d055      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8009876:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800987a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800987e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009882:	d031      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8009884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009888:	d82a      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800988a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988e:	d02d      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8009890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009894:	d824      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800989a:	d029      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800989c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098a0:	d81e      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80098a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a6:	d011      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80098a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ac:	d818      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d020      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80098b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b6:	d113      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098bc:	3308      	adds	r3, #8
 80098be:	4618      	mov	r0, r3
 80098c0:	f003 fe0a 	bl	800d4d8 <RCCEx_PLL2_Config>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80098ca:	e014      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80098cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098d0:	3330      	adds	r3, #48	; 0x30
 80098d2:	4618      	mov	r0, r3
 80098d4:	f003 fe98 	bl	800d608 <RCCEx_PLL3_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80098de:	e00a      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80098e6:	e006      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098e8:	bf00      	nop
 80098ea:	e004      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098ec:	bf00      	nop
 80098ee:	e002      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098f0:	bf00      	nop
 80098f2:	e000      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10d      	bne.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80098fe:	4b22      	ldr	r3, [pc, #136]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009900:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009904:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009908:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800990c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009910:	4a1d      	ldr	r2, [pc, #116]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009912:	430b      	orrs	r3, r1
 8009914:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009918:	e003      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800991a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800991e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009922:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800992e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009932:	2300      	movs	r3, #0
 8009934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009938:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800993c:	460b      	mov	r3, r1
 800993e:	4313      	orrs	r3, r2
 8009940:	d055      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009942:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009946:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800994a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800994e:	d035      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8009950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009954:	d82e      	bhi.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009956:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800995a:	d031      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800995c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009960:	d828      	bhi.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009966:	d01b      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8009968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800996c:	d822      	bhi.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8009972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009976:	d009      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8009978:	e01c      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800997a:	4b03      	ldr	r3, [pc, #12]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800997c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997e:	4a02      	ldr	r2, [pc, #8]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009984:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009986:	e01c      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8009988:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800998c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009990:	3308      	adds	r3, #8
 8009992:	4618      	mov	r0, r3
 8009994:	f003 fda0 	bl	800d4d8 <RCCEx_PLL2_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800999e:	e010      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80099a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099a4:	3330      	adds	r3, #48	; 0x30
 80099a6:	4618      	mov	r0, r3
 80099a8:	f003 fe2e 	bl	800d608 <RCCEx_PLL3_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80099b2:	e006      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80099ba:	e002      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80099bc:	bf00      	nop
 80099be:	e000      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80099c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10d      	bne.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80099ca:	4bc3      	ldr	r3, [pc, #780]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80099cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80099d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80099dc:	4abe      	ldr	r2, [pc, #760]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80099e4:	e003      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80099ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80099ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80099fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099fe:	2300      	movs	r3, #0
 8009a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a04:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	d051      	beq.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a1a:	d033      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8009a1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a20:	d82c      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009a22:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009a26:	d02d      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8009a28:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009a2c:	d826      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a32:	d019      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8009a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a38:	d820      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8009a3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a42:	d007      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8009a44:	e01a      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a46:	4ba4      	ldr	r3, [pc, #656]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	4aa3      	ldr	r2, [pc, #652]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a50:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a52:	e018      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a58:	3308      	adds	r3, #8
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f003 fd3c 	bl	800d4d8 <RCCEx_PLL2_Config>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a66:	e00e      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a6c:	3330      	adds	r3, #48	; 0x30
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f003 fdca 	bl	800d608 <RCCEx_PLL3_Config>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a7a:	e004      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009a82:	e000      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8009a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10d      	bne.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009a8e:	4b92      	ldr	r3, [pc, #584]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a94:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8009a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009aa0:	4a8d      	ldr	r2, [pc, #564]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009aa2:	430b      	orrs	r3, r1
 8009aa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009aa8:	e003      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aaa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009aae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009abe:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ac4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4313      	orrs	r3, r2
 8009acc:	d032      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009ace:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ad2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d80f      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d211      	bcs.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d911      	bls.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d109      	bne.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aea:	3308      	adds	r3, #8
 8009aec:	4618      	mov	r0, r3
 8009aee:	f003 fcf3 	bl	800d4d8 <RCCEx_PLL2_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009af8:	e006      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009b00:	e002      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8009b02:	bf00      	nop
 8009b04:	e000      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8009b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b08:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10d      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009b10:	4b71      	ldr	r3, [pc, #452]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b16:	f023 0107 	bic.w	r1, r3, #7
 8009b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009b22:	4a6d      	ldr	r2, [pc, #436]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b24:	430b      	orrs	r3, r1
 8009b26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b2a:	e003      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8009b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6739      	str	r1, [r7, #112]	; 0x70
 8009b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b44:	677b      	str	r3, [r7, #116]	; 0x74
 8009b46:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	d024      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8009b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8009b5c:	2b08      	cmp	r3, #8
 8009b5e:	d005      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009b66:	e002      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8009b68:	bf00      	nop
 8009b6a:	e000      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8009b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10d      	bne.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8009b76:	4b58      	ldr	r3, [pc, #352]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b7c:	f023 0108 	bic.w	r1, r3, #8
 8009b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009b88:	4a53      	ldr	r2, [pc, #332]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b90:	e003      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009ba6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ba8:	2300      	movs	r3, #0
 8009baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	f000 80b9 	beq.w	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009bb8:	4b48      	ldr	r3, [pc, #288]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	4a47      	ldr	r2, [pc, #284]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009bbe:	f043 0301 	orr.w	r3, r3, #1
 8009bc2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bc4:	f7fa fa32 	bl	800402c <HAL_GetTick>
 8009bc8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009bcc:	e00b      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bce:	f7fa fa2d 	bl	800402c <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d903      	bls.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009be4:	e005      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009be6:	4b3d      	ldr	r3, [pc, #244]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0ed      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8009bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f040 8093 	bne.w	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bfc:	4b36      	ldr	r3, [pc, #216]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009c0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d023      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8009c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c16:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8009c1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d01b      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009c22:	4b2d      	ldr	r3, [pc, #180]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c30:	4b29      	ldr	r3, [pc, #164]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c36:	4a28      	ldr	r2, [pc, #160]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c40:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c46:	4a24      	ldr	r2, [pc, #144]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c50:	4a21      	ldr	r2, [pc, #132]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d019      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c66:	f7fa f9e1 	bl	800402c <HAL_GetTick>
 8009c6a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c6e:	e00d      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c70:	f7fa f9dc 	bl	800402c <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c7a:	1ad2      	subs	r2, r2, r3
 8009c7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d903      	bls.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8009c8a:	e006      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c8c:	4b12      	ldr	r3, [pc, #72]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0ea      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8009c9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d13a      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009ca2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ca6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cb2:	d115      	bne.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8009cb4:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cc0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009cc4:	091b      	lsrs	r3, r3, #4
 8009cc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009cca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009cce:	4a02      	ldr	r2, [pc, #8]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	61d3      	str	r3, [r2, #28]
 8009cd4:	e00a      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8009cd6:	bf00      	nop
 8009cd8:	44020c00 	.word	0x44020c00
 8009cdc:	44020800 	.word	0x44020800
 8009ce0:	4b9f      	ldr	r3, [pc, #636]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	4a9e      	ldr	r2, [pc, #632]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ce6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009cea:	61d3      	str	r3, [r2, #28]
 8009cec:	4b9c      	ldr	r3, [pc, #624]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009cf2:	4a9b      	ldr	r2, [pc, #620]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009cfc:	4b98      	ldr	r3, [pc, #608]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009cfe:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8009d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d0e:	4a94      	ldr	r2, [pc, #592]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009d10:	430b      	orrs	r3, r1
 8009d12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009d16:	e008      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d1c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8009d20:	e003      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009d36:	663b      	str	r3, [r7, #96]	; 0x60
 8009d38:	2300      	movs	r3, #0
 8009d3a:	667b      	str	r3, [r7, #100]	; 0x64
 8009d3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009d40:	460b      	mov	r3, r1
 8009d42:	4313      	orrs	r3, r2
 8009d44:	d035      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009d4e:	2b30      	cmp	r3, #48	; 0x30
 8009d50:	d014      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8009d52:	2b30      	cmp	r3, #48	; 0x30
 8009d54:	d80e      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d012      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	d80a      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d010      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8009d62:	2b10      	cmp	r3, #16
 8009d64:	d106      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d66:	4b7e      	ldr	r3, [pc, #504]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6a:	4a7d      	ldr	r2, [pc, #500]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d70:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d72:	e008      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009d7a:	e004      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009d7c:	bf00      	nop
 8009d7e:	e002      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10d      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009d8e:	4b74      	ldr	r3, [pc, #464]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d94:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d9c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009da0:	4a6f      	ldr	r2, [pc, #444]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009da2:	430b      	orrs	r3, r1
 8009da4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009da8:	e003      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009daa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009dae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009dbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dc4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	d033      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8009dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dd2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8009dda:	2b40      	cmp	r3, #64	; 0x40
 8009ddc:	d007      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8009dde:	e010      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009de0:	4b5f      	ldr	r3, [pc, #380]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de4:	4a5e      	ldr	r2, [pc, #376]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dea:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009dec:	e00d      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009df2:	3308      	adds	r3, #8
 8009df4:	4618      	mov	r0, r3
 8009df6:	f003 fb6f 	bl	800d4d8 <RCCEx_PLL2_Config>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009e00:	e003      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10d      	bne.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8009e12:	4b53      	ldr	r3, [pc, #332]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e18:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8009e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e20:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009e24:	4a4e      	ldr	r2, [pc, #312]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e26:	430b      	orrs	r3, r1
 8009e28:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009e2c:	e003      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e32:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009e42:	653b      	str	r3, [r7, #80]	; 0x50
 8009e44:	2300      	movs	r3, #0
 8009e46:	657b      	str	r3, [r7, #84]	; 0x54
 8009e48:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	d033      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8009e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e56:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8009e5e:	2b80      	cmp	r3, #128	; 0x80
 8009e60:	d007      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8009e62:	e010      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e64:	4b3e      	ldr	r3, [pc, #248]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	4a3d      	ldr	r2, [pc, #244]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009e70:	e00d      	b.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e76:	3308      	adds	r3, #8
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f003 fb2d 	bl	800d4d8 <RCCEx_PLL2_Config>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009e84:	e003      	b.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10d      	bne.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8009e96:	4b32      	ldr	r3, [pc, #200]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ea4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009ea8:	4a2d      	ldr	r2, [pc, #180]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009eb0:	e003      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009eb6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ec8:	2300      	movs	r3, #0
 8009eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ecc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	d04a      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8009ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d827      	bhi.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8009ee2:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009efd 	.word	0x08009efd
 8009eec:	08009f0b 	.word	0x08009f0b
 8009ef0:	08009f1f 	.word	0x08009f1f
 8009ef4:	08009f3b 	.word	0x08009f3b
 8009ef8:	08009f3b 	.word	0x08009f3b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009efc:	4b18      	ldr	r3, [pc, #96]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f00:	4a17      	ldr	r2, [pc, #92]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f06:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009f08:	e018      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f0e:	3308      	adds	r3, #8
 8009f10:	4618      	mov	r0, r3
 8009f12:	f003 fae1 	bl	800d4d8 <RCCEx_PLL2_Config>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009f1c:	e00e      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f22:	3330      	adds	r3, #48	; 0x30
 8009f24:	4618      	mov	r0, r3
 8009f26:	f003 fb6f 	bl	800d608 <RCCEx_PLL3_Config>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009f30:	e004      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009f38:	e000      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8009f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10f      	bne.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f4a:	f023 0107 	bic.w	r1, r3, #7
 8009f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f56:	4a02      	ldr	r2, [pc, #8]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f5e:	e005      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8009f60:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009f78:	643b      	str	r3, [r7, #64]	; 0x40
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009f82:	460b      	mov	r3, r1
 8009f84:	4313      	orrs	r3, r2
 8009f86:	f000 8081 	beq.w	800a08c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8009f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d85f      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	0800a021 	.word	0x0800a021
 8009fa0:	0800a057 	.word	0x0800a057
 8009fa4:	0800a057 	.word	0x0800a057
 8009fa8:	0800a057 	.word	0x0800a057
 8009fac:	0800a057 	.word	0x0800a057
 8009fb0:	0800a057 	.word	0x0800a057
 8009fb4:	0800a057 	.word	0x0800a057
 8009fb8:	0800a057 	.word	0x0800a057
 8009fbc:	0800a02f 	.word	0x0800a02f
 8009fc0:	0800a057 	.word	0x0800a057
 8009fc4:	0800a057 	.word	0x0800a057
 8009fc8:	0800a057 	.word	0x0800a057
 8009fcc:	0800a057 	.word	0x0800a057
 8009fd0:	0800a057 	.word	0x0800a057
 8009fd4:	0800a057 	.word	0x0800a057
 8009fd8:	0800a057 	.word	0x0800a057
 8009fdc:	0800a043 	.word	0x0800a043
 8009fe0:	0800a057 	.word	0x0800a057
 8009fe4:	0800a057 	.word	0x0800a057
 8009fe8:	0800a057 	.word	0x0800a057
 8009fec:	0800a057 	.word	0x0800a057
 8009ff0:	0800a057 	.word	0x0800a057
 8009ff4:	0800a057 	.word	0x0800a057
 8009ff8:	0800a057 	.word	0x0800a057
 8009ffc:	0800a05f 	.word	0x0800a05f
 800a000:	0800a057 	.word	0x0800a057
 800a004:	0800a057 	.word	0x0800a057
 800a008:	0800a057 	.word	0x0800a057
 800a00c:	0800a057 	.word	0x0800a057
 800a010:	0800a057 	.word	0x0800a057
 800a014:	0800a057 	.word	0x0800a057
 800a018:	0800a057 	.word	0x0800a057
 800a01c:	0800a05f 	.word	0x0800a05f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a020:	4bab      	ldr	r3, [pc, #684]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a024:	4aaa      	ldr	r2, [pc, #680]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a02a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a02c:	e018      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a02e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a032:	3308      	adds	r3, #8
 800a034:	4618      	mov	r0, r3
 800a036:	f003 fa4f 	bl	800d4d8 <RCCEx_PLL2_Config>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a040:	e00e      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a042:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a046:	3330      	adds	r3, #48	; 0x30
 800a048:	4618      	mov	r0, r3
 800a04a:	f003 fadd 	bl	800d608 <RCCEx_PLL3_Config>
 800a04e:	4603      	mov	r3, r0
 800a050:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a054:	e004      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a05c:	e000      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800a05e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a060:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10d      	bne.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a068:	4b99      	ldr	r3, [pc, #612]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a06a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a06e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a072:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a07a:	4a95      	ldr	r2, [pc, #596]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a07c:	430b      	orrs	r3, r1
 800a07e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a082:	e003      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a084:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a088:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a08c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a098:	63bb      	str	r3, [r7, #56]	; 0x38
 800a09a:	2300      	movs	r3, #0
 800a09c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a09e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	d04e      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800a0a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a0b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b4:	d02e      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800a0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ba:	d827      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a0bc:	2bc0      	cmp	r3, #192	; 0xc0
 800a0be:	d02b      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800a0c0:	2bc0      	cmp	r3, #192	; 0xc0
 800a0c2:	d823      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a0c4:	2b80      	cmp	r3, #128	; 0x80
 800a0c6:	d017      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800a0c8:	2b80      	cmp	r3, #128	; 0x80
 800a0ca:	d81f      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800a0d0:	2b40      	cmp	r3, #64	; 0x40
 800a0d2:	d007      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800a0d4:	e01a      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0d6:	4b7e      	ldr	r3, [pc, #504]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	4a7d      	ldr	r2, [pc, #500]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a0dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0e0:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a0e2:	e01a      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a0e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f003 f9f4 	bl	800d4d8 <RCCEx_PLL2_Config>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a0f6:	e010      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a0f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0fc:	3330      	adds	r3, #48	; 0x30
 800a0fe:	4618      	mov	r0, r3
 800a100:	f003 fa82 	bl	800d608 <RCCEx_PLL3_Config>
 800a104:	4603      	mov	r3, r0
 800a106:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a10a:	e006      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a112:	e002      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800a114:	bf00      	nop
 800a116:	e000      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800a118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a11a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10d      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a122:	4b6b      	ldr	r3, [pc, #428]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a128:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a12c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a134:	4a66      	ldr	r2, [pc, #408]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a136:	430b      	orrs	r3, r1
 800a138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a13c:	e003      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a142:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800a146:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a152:	633b      	str	r3, [r7, #48]	; 0x30
 800a154:	2300      	movs	r3, #0
 800a156:	637b      	str	r3, [r7, #52]	; 0x34
 800a158:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a15c:	460b      	mov	r3, r1
 800a15e:	4313      	orrs	r3, r2
 800a160:	d055      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800a162:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a166:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a16a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a16e:	d031      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800a170:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a174:	d82a      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a17a:	d02d      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800a17c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a180:	d824      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a182:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a186:	d029      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800a188:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a18c:	d81e      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a18e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a192:	d011      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800a194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a198:	d818      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d020      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800a19e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1a2:	d113      	bne.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f003 f994 	bl	800d4d8 <RCCEx_PLL2_Config>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800a1b6:	e014      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a1b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1bc:	3330      	adds	r3, #48	; 0x30
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f003 fa22 	bl	800d608 <RCCEx_PLL3_Config>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800a1ca:	e00a      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a1d2:	e006      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a1d4:	bf00      	nop
 800a1d6:	e004      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a1d8:	bf00      	nop
 800a1da:	e002      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a1dc:	bf00      	nop
 800a1de:	e000      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a1e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10d      	bne.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800a1ea:	4b39      	ldr	r3, [pc, #228]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a1ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1f0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800a1f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a1fc:	4a34      	ldr	r2, [pc, #208]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a1fe:	430b      	orrs	r3, r1
 800a200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a204:	e003      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a206:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a20a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800a20e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a21a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a21c:	2300      	movs	r3, #0
 800a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a220:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a224:	460b      	mov	r3, r1
 800a226:	4313      	orrs	r3, r2
 800a228:	d058      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800a22a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a22e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a232:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a236:	d031      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800a238:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a23c:	d82a      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a23e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a242:	d02d      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800a244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a248:	d824      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a24a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a24e:	d029      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800a250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a254:	d81e      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a25a:	d011      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800a25c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a260:	d818      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d020      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800a266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a26a:	d113      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a26c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a270:	3308      	adds	r3, #8
 800a272:	4618      	mov	r0, r3
 800a274:	f003 f930 	bl	800d4d8 <RCCEx_PLL2_Config>
 800a278:	4603      	mov	r3, r0
 800a27a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a27e:	e014      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a280:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a284:	3330      	adds	r3, #48	; 0x30
 800a286:	4618      	mov	r0, r3
 800a288:	f003 f9be 	bl	800d608 <RCCEx_PLL3_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a292:	e00a      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a29a:	e006      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a29c:	bf00      	nop
 800a29e:	e004      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a2a0:	bf00      	nop
 800a2a2:	e002      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a2a4:	bf00      	nop
 800a2a6:	e000      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d110      	bne.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800a2b2:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a2b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a2bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2c4:	4902      	ldr	r1, [pc, #8]	; (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a2cc:	e006      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800a2ce:	bf00      	nop
 800a2d0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a2d8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	6239      	str	r1, [r7, #32]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	d055      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800a2f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a300:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a304:	d031      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800a306:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a30a:	d82a      	bhi.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a30c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a310:	d02d      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800a312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a316:	d824      	bhi.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a318:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a31c:	d029      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800a31e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a322:	d81e      	bhi.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a328:	d011      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800a32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a32e:	d818      	bhi.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d020      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800a334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a338:	d113      	bne.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a33a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a33e:	3308      	adds	r3, #8
 800a340:	4618      	mov	r0, r3
 800a342:	f003 f8c9 	bl	800d4d8 <RCCEx_PLL2_Config>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a34c:	e014      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a34e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a352:	3330      	adds	r3, #48	; 0x30
 800a354:	4618      	mov	r0, r3
 800a356:	f003 f957 	bl	800d608 <RCCEx_PLL3_Config>
 800a35a:	4603      	mov	r3, r0
 800a35c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a360:	e00a      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a368:	e006      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a36a:	bf00      	nop
 800a36c:	e004      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a36e:	bf00      	nop
 800a370:	e002      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a372:	bf00      	nop
 800a374:	e000      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a376:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a378:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10d      	bne.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800a380:	4b88      	ldr	r3, [pc, #544]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a386:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800a38a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a38e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a392:	4984      	ldr	r1, [pc, #528]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a394:	4313      	orrs	r3, r2
 800a396:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a39a:	e003      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a39c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a3a0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a3a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	61b9      	str	r1, [r7, #24]
 800a3b0:	f003 0302 	and.w	r3, r3, #2
 800a3b4:	61fb      	str	r3, [r7, #28]
 800a3b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	d03d      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800a3c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d81c      	bhi.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a40f 	.word	0x0800a40f
 800a3d8:	0800a3e5 	.word	0x0800a3e5
 800a3dc:	0800a3f3 	.word	0x0800a3f3
 800a3e0:	0800a40f 	.word	0x0800a40f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e4:	4b6f      	ldr	r3, [pc, #444]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	4a6e      	ldr	r2, [pc, #440]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a3ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ee:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a3f0:	e00e      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f003 f86d 	bl	800d4d8 <RCCEx_PLL2_Config>
 800a3fe:	4603      	mov	r3, r0
 800a400:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800a404:	e004      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a40c:	e000      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800a40e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a410:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10d      	bne.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a418:	4b62      	ldr	r3, [pc, #392]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a41a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a41e:	f023 0203 	bic.w	r2, r3, #3
 800a422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a426:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a42a:	495e      	ldr	r1, [pc, #376]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a42c:	4313      	orrs	r3, r2
 800a42e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a434:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a438:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a43c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	2100      	movs	r1, #0
 800a446:	6139      	str	r1, [r7, #16]
 800a448:	f003 0304 	and.w	r3, r3, #4
 800a44c:	617b      	str	r3, [r7, #20]
 800a44e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a452:	460b      	mov	r3, r1
 800a454:	4313      	orrs	r3, r2
 800a456:	d03a      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800a458:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a45c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a464:	d00e      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800a466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a46a:	d815      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d017      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800a470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a474:	d110      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a476:	4b4b      	ldr	r3, [pc, #300]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	4a4a      	ldr	r2, [pc, #296]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a47c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a480:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a482:	e00e      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a484:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a488:	3308      	adds	r3, #8
 800a48a:	4618      	mov	r0, r3
 800a48c:	f003 f824 	bl	800d4d8 <RCCEx_PLL2_Config>
 800a490:	4603      	mov	r3, r0
 800a492:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a496:	e004      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a49e:	e000      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800a4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10d      	bne.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800a4aa:	4b3e      	ldr	r3, [pc, #248]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a4ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a4b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a4bc:	4939      	ldr	r1, [pc, #228]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a4c4:	e003      	b.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a4ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	f003 0310 	and.w	r3, r3, #16
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	d038      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800a4ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a4ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a4f2:	2b30      	cmp	r3, #48	; 0x30
 800a4f4:	d01b      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800a4f6:	2b30      	cmp	r3, #48	; 0x30
 800a4f8:	d815      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800a4fa:	2b10      	cmp	r3, #16
 800a4fc:	d002      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800a4fe:	2b20      	cmp	r3, #32
 800a500:	d007      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800a502:	e010      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a504:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	4a26      	ldr	r2, [pc, #152]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a50a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a50e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800a510:	e00e      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a516:	3330      	adds	r3, #48	; 0x30
 800a518:	4618      	mov	r0, r3
 800a51a:	f003 f875 	bl	800d608 <RCCEx_PLL3_Config>
 800a51e:	4603      	mov	r3, r0
 800a520:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800a524:	e004      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a52c:	e000      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800a52e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a530:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10d      	bne.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800a538:	4b1a      	ldr	r3, [pc, #104]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a53a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a53e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a542:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a546:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a54a:	4916      	ldr	r1, [pc, #88]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a552:	e003      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a554:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a558:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a55c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	2100      	movs	r1, #0
 800a566:	6039      	str	r1, [r7, #0]
 800a568:	f003 0308 	and.w	r3, r3, #8
 800a56c:	607b      	str	r3, [r7, #4]
 800a56e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a572:	460b      	mov	r3, r1
 800a574:	4313      	orrs	r3, r2
 800a576:	d00c      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a57a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a57e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a582:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a586:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a58a:	4906      	ldr	r1, [pc, #24]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800a592:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800a596:	4618      	mov	r0, r3
 800a598:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a59c:	46bd      	mov	sp, r7
 800a59e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5a2:	bf00      	nop
 800a5a4:	44020c00 	.word	0x44020c00

0800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b08b      	sub	sp, #44	; 0x2c
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a5b0:	4bad      	ldr	r3, [pc, #692]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a5ba:	4bab      	ldr	r3, [pc, #684]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800a5c4:	4ba8      	ldr	r3, [pc, #672]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c8:	0a1b      	lsrs	r3, r3, #8
 800a5ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5ce:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800a5d0:	4ba5      	ldr	r3, [pc, #660]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	f003 0310 	and.w	r3, r3, #16
 800a5d8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a5da:	4ba3      	ldr	r3, [pc, #652]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	08db      	lsrs	r3, r3, #3
 800a5e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ea:	ee07 3a90 	vmov	s15, r3
 800a5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 8126 	beq.w	800a84a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	2b03      	cmp	r3, #3
 800a602:	d053      	beq.n	800a6ac <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	2b03      	cmp	r3, #3
 800a608:	d86f      	bhi.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d003      	beq.n	800a618 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d02b      	beq.n	800a66e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800a616:	e068      	b.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a618:	4b93      	ldr	r3, [pc, #588]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	08db      	lsrs	r3, r3, #3
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	4a92      	ldr	r2, [pc, #584]	; (800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a624:	fa22 f303 	lsr.w	r3, r2, r3
 800a628:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	ee07 3a90 	vmov	s15, r3
 800a630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	ee07 3a90 	vmov	s15, r3
 800a648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64c:	ed97 6a04 	vldr	s12, [r7, #16]
 800a650:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a668:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a66c:	e068      	b.n	800a740 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	ee07 3a90 	vmov	s15, r3
 800a674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a678:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a874 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a67c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a68a:	ed97 6a04 	vldr	s12, [r7, #16]
 800a68e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a6aa:	e049      	b.n	800a740 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b6:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a878 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800a6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	ee07 3a90 	vmov	s15, r3
 800a6c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c8:	ed97 6a04 	vldr	s12, [r7, #16]
 800a6cc:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a6d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a6e8:	e02a      	b.n	800a740 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6ea:	4b5f      	ldr	r3, [pc, #380]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	08db      	lsrs	r3, r3, #3
 800a6f0:	f003 0303 	and.w	r3, r3, #3
 800a6f4:	4a5d      	ldr	r2, [pc, #372]	; (800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fa:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	ee07 3a90 	vmov	s15, r3
 800a70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71e:	ed97 6a04 	vldr	s12, [r7, #16]
 800a722:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a73e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a740:	4b49      	ldr	r3, [pc, #292]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a74c:	d121      	bne.n	800a792 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a74e:	4b46      	ldr	r3, [pc, #280]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d017      	beq.n	800a78a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a75a:	4b43      	ldr	r3, [pc, #268]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75e:	0a5b      	lsrs	r3, r3, #9
 800a760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a764:	ee07 3a90 	vmov	s15, r3
 800a768:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800a76c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a770:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a774:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a77c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a780:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	e006      	b.n	800a798 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	e002      	b.n	800a798 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a798:	4b33      	ldr	r3, [pc, #204]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7a4:	d121      	bne.n	800a7ea <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a7a6:	4b30      	ldr	r3, [pc, #192]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a7b2:	4b2d      	ldr	r3, [pc, #180]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b6:	0c1b      	lsrs	r3, r3, #16
 800a7b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7bc:	ee07 3a90 	vmov	s15, r3
 800a7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a7c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a7cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a7d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7d8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	605a      	str	r2, [r3, #4]
 800a7e0:	e006      	b.n	800a7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	605a      	str	r2, [r3, #4]
 800a7e8:	e002      	b.n	800a7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7f0:	4b1d      	ldr	r3, [pc, #116]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7fc:	d121      	bne.n	800a842 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a7fe:	4b1a      	ldr	r3, [pc, #104]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d017      	beq.n	800a83a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a80a:	4b17      	ldr	r3, [pc, #92]	; (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80e:	0e1b      	lsrs	r3, r3, #24
 800a810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800a81c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a820:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a824:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a830:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a838:	e010      	b.n	800a85c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	609a      	str	r2, [r3, #8]
}
 800a840:	e00c      	b.n	800a85c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	609a      	str	r2, [r3, #8]
}
 800a848:	e008      	b.n	800a85c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	609a      	str	r2, [r3, #8]
}
 800a85c:	bf00      	nop
 800a85e:	372c      	adds	r7, #44	; 0x2c
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	44020c00 	.word	0x44020c00
 800a86c:	03d09000 	.word	0x03d09000
 800a870:	46000000 	.word	0x46000000
 800a874:	4a742400 	.word	0x4a742400
 800a878:	4af42400 	.word	0x4af42400

0800a87c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b08b      	sub	sp, #44	; 0x2c
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a884:	4bad      	ldr	r3, [pc, #692]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a88e:	4bab      	ldr	r3, [pc, #684]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800a898:	4ba8      	ldr	r3, [pc, #672]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	0a1b      	lsrs	r3, r3, #8
 800a89e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8a2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800a8a4:	4ba5      	ldr	r3, [pc, #660]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	f003 0310 	and.w	r3, r3, #16
 800a8ac:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a8ae:	4ba3      	ldr	r3, [pc, #652]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	08db      	lsrs	r3, r3, #3
 800a8b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	fb02 f303 	mul.w	r3, r2, r3
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 8126 	beq.w	800ab1e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d053      	beq.n	800a980 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d86f      	bhi.n	800a9be <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d003      	beq.n	800a8ec <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d02b      	beq.n	800a942 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800a8ea:	e068      	b.n	800a9be <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8ec:	4b93      	ldr	r3, [pc, #588]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	08db      	lsrs	r3, r3, #3
 800a8f2:	f003 0303 	and.w	r3, r3, #3
 800a8f6:	4a92      	ldr	r2, [pc, #584]	; (800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	ee07 3a90 	vmov	s15, r3
 800a904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	ee07 3a90 	vmov	s15, r3
 800a91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a920:	ed97 6a04 	vldr	s12, [r7, #16]
 800a924:	eddf 5a87 	vldr	s11, [pc, #540]	; 800ab44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a940:	e068      	b.n	800aa14 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	ee07 3a90 	vmov	s15, r3
 800a948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	ee07 3a90 	vmov	s15, r3
 800a95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a95e:	ed97 6a04 	vldr	s12, [r7, #16]
 800a962:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a97a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a97e:	e049      	b.n	800aa14 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800ab4c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800a98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	ee07 3a90 	vmov	s15, r3
 800a998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99c:	ed97 6a04 	vldr	s12, [r7, #16]
 800a9a0:	eddf 5a68 	vldr	s11, [pc, #416]	; 800ab44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a9a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a9bc:	e02a      	b.n	800aa14 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9be:	4b5f      	ldr	r3, [pc, #380]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	08db      	lsrs	r3, r3, #3
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	4a5d      	ldr	r2, [pc, #372]	; (800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ce:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	ee07 3a90 	vmov	s15, r3
 800a9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f2:	ed97 6a04 	vldr	s12, [r7, #16]
 800a9f6:	eddf 5a53 	vldr	s11, [pc, #332]	; 800ab44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a9fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800aa12:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa14:	4b49      	ldr	r3, [pc, #292]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa20:	d121      	bne.n	800aa66 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800aa22:	4b46      	ldr	r3, [pc, #280]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d017      	beq.n	800aa5e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aa2e:	4b43      	ldr	r3, [pc, #268]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	0a5b      	lsrs	r3, r3, #9
 800aa34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800aa40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa44:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800aa48:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800aa4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa54:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	e006      	b.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e002      	b.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa6c:	4b33      	ldr	r3, [pc, #204]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa78:	d121      	bne.n	800aabe <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800aa7a:	4b30      	ldr	r3, [pc, #192]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d017      	beq.n	800aab6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aa86:	4b2d      	ldr	r3, [pc, #180]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	0c1b      	lsrs	r3, r3, #16
 800aa8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800aa98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa9c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800aaa0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800aaa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaac:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]
 800aab4:	e006      	b.n	800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	605a      	str	r2, [r3, #4]
 800aabc:	e002      	b.n	800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aac4:	4b1d      	ldr	r3, [pc, #116]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aacc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aad0:	d121      	bne.n	800ab16 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800aad2:	4b1a      	ldr	r3, [pc, #104]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d017      	beq.n	800ab0e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aade:	4b17      	ldr	r3, [pc, #92]	; (800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae2:	0e1b      	lsrs	r3, r3, #24
 800aae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae8:	ee07 3a90 	vmov	s15, r3
 800aaec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800aaf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaf4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800aaf8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800aafc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab04:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab0c:	e010      	b.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	609a      	str	r2, [r3, #8]
}
 800ab14:	e00c      	b.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	609a      	str	r2, [r3, #8]
}
 800ab1c:	e008      	b.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
}
 800ab30:	bf00      	nop
 800ab32:	372c      	adds	r7, #44	; 0x2c
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	44020c00 	.word	0x44020c00
 800ab40:	03d09000 	.word	0x03d09000
 800ab44:	46000000 	.word	0x46000000
 800ab48:	4a742400 	.word	0x4a742400
 800ab4c:	4af42400 	.word	0x4af42400

0800ab50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b08b      	sub	sp, #44	; 0x2c
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ab58:	4bad      	ldr	r3, [pc, #692]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab60:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ab62:	4bab      	ldr	r3, [pc, #684]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	f003 0303 	and.w	r3, r3, #3
 800ab6a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800ab6c:	4ba8      	ldr	r3, [pc, #672]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	0a1b      	lsrs	r3, r3, #8
 800ab72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab76:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800ab78:	4ba5      	ldr	r3, [pc, #660]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ab82:	4ba3      	ldr	r3, [pc, #652]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab86:	08db      	lsrs	r3, r3, #3
 800ab88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	fb02 f303 	mul.w	r3, r2, r3
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 8126 	beq.w	800adf2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d053      	beq.n	800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	2b03      	cmp	r3, #3
 800abb0:	d86f      	bhi.n	800ac92 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d003      	beq.n	800abc0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d02b      	beq.n	800ac16 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800abbe:	e068      	b.n	800ac92 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800abc0:	4b93      	ldr	r3, [pc, #588]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a92      	ldr	r2, [pc, #584]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	ee07 3a90 	vmov	s15, r3
 800abd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	ee07 3a90 	vmov	s15, r3
 800abf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf4:	ed97 6a04 	vldr	s12, [r7, #16]
 800abf8:	eddf 5a87 	vldr	s11, [pc, #540]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800abfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800ac14:	e068      	b.n	800ace8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	ee07 3a90 	vmov	s15, r3
 800ac1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac20:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800ac24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac32:	ed97 6a04 	vldr	s12, [r7, #16]
 800ac36:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ac3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800ac52:	e049      	b.n	800ace8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	eddf 6a70 	vldr	s13, [pc, #448]	; 800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800ac62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac70:	ed97 6a04 	vldr	s12, [r7, #16]
 800ac74:	eddf 5a68 	vldr	s11, [pc, #416]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ac78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800ac90:	e02a      	b.n	800ace8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac92:	4b5f      	ldr	r3, [pc, #380]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	4a5d      	ldr	r2, [pc, #372]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	ee07 3a90 	vmov	s15, r3
 800acb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acbc:	6a3b      	ldr	r3, [r7, #32]
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc6:	ed97 6a04 	vldr	s12, [r7, #16]
 800acca:	eddf 5a53 	vldr	s11, [pc, #332]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800acce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800ace6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ace8:	4b49      	ldr	r3, [pc, #292]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf4:	d121      	bne.n	800ad3a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800acf6:	4b46      	ldr	r3, [pc, #280]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800acf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d017      	beq.n	800ad32 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ad02:	4b43      	ldr	r3, [pc, #268]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ad04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad06:	0a5b      	lsrs	r3, r3, #9
 800ad08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0c:	ee07 3a90 	vmov	s15, r3
 800ad10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800ad14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad18:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ad1c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ad20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad28:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	e006      	b.n	800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	e002      	b.n	800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad40:	4b33      	ldr	r3, [pc, #204]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad4c:	d121      	bne.n	800ad92 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ad4e:	4b30      	ldr	r3, [pc, #192]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d017      	beq.n	800ad8a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ad5a:	4b2d      	ldr	r3, [pc, #180]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad64:	ee07 3a90 	vmov	s15, r3
 800ad68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ad6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad70:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ad74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ad78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad80:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	605a      	str	r2, [r3, #4]
 800ad88:	e006      	b.n	800ad98 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	605a      	str	r2, [r3, #4]
 800ad90:	e002      	b.n	800ad98 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad98:	4b1d      	ldr	r3, [pc, #116]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ada0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ada4:	d121      	bne.n	800adea <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ada6:	4b1a      	ldr	r3, [pc, #104]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ada8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d017      	beq.n	800ade2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800adb2:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800adb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb6:	0e1b      	lsrs	r3, r3, #24
 800adb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adbc:	ee07 3a90 	vmov	s15, r3
 800adc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800adc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adc8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800adcc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800add0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800add8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800ade0:	e010      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	609a      	str	r2, [r3, #8]
}
 800ade8:	e00c      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	609a      	str	r2, [r3, #8]
}
 800adf0:	e008      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	609a      	str	r2, [r3, #8]
}
 800ae04:	bf00      	nop
 800ae06:	372c      	adds	r7, #44	; 0x2c
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	44020c00 	.word	0x44020c00
 800ae14:	03d09000 	.word	0x03d09000
 800ae18:	46000000 	.word	0x46000000
 800ae1c:	4a742400 	.word	0x4a742400
 800ae20:	4af42400 	.word	0x4af42400

0800ae24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ae24:	b590      	push	{r4, r7, lr}
 800ae26:	b08f      	sub	sp, #60	; 0x3c
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ae2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae32:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800ae36:	4321      	orrs	r1, r4
 800ae38:	d150      	bne.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ae3a:	4b26      	ldr	r3, [pc, #152]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ae3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ae46:	4b23      	ldr	r3, [pc, #140]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ae48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d108      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae5a:	d104      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ae5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae60:	637b      	str	r3, [r7, #52]	; 0x34
 800ae62:	f002 bb2a 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ae66:	4b1b      	ldr	r3, [pc, #108]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ae68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae74:	d108      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae7c:	d104      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800ae7e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ae82:	637b      	str	r3, [r7, #52]	; 0x34
 800ae84:	f002 bb19 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800ae88:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae94:	d119      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae9c:	d115      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800aea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeaa:	d30a      	bcc.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800aeac:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	0a1b      	lsrs	r3, r3, #8
 800aeb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeb6:	4a08      	ldr	r2, [pc, #32]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800aeb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800aebe:	f002 bafc 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800aec6:	f002 baf8 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800aeca:	2300      	movs	r3, #0
 800aecc:	637b      	str	r3, [r7, #52]	; 0x34
 800aece:	f002 baf4 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aed2:	bf00      	nop
 800aed4:	44020c00 	.word	0x44020c00
 800aed8:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800aedc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aee0:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800aee4:	ea50 0104 	orrs.w	r1, r0, r4
 800aee8:	f001 8275 	beq.w	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800aeec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aef0:	2801      	cmp	r0, #1
 800aef2:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800aef6:	f082 82dd 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aefa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aefe:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800af02:	ea50 0104 	orrs.w	r1, r0, r4
 800af06:	f001 816c 	beq.w	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800af0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af0e:	2801      	cmp	r0, #1
 800af10:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800af14:	f082 82ce 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af1c:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800af20:	ea50 0104 	orrs.w	r1, r0, r4
 800af24:	f001 8602 	beq.w	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800af28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af2c:	2801      	cmp	r0, #1
 800af2e:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800af32:	f082 82bf 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af36:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af3a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800af3e:	ea50 0104 	orrs.w	r1, r0, r4
 800af42:	f001 854c 	beq.w	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800af46:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af4a:	2801      	cmp	r0, #1
 800af4c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800af50:	f082 82b0 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af54:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af58:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800af5c:	ea50 0104 	orrs.w	r1, r0, r4
 800af60:	f001 849e 	beq.w	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800af64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af68:	2801      	cmp	r0, #1
 800af6a:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800af6e:	f082 82a1 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af72:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af76:	f1a1 0420 	sub.w	r4, r1, #32
 800af7a:	ea50 0104 	orrs.w	r1, r0, r4
 800af7e:	f001 83e8 	beq.w	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800af82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af86:	2801      	cmp	r0, #1
 800af88:	f171 0120 	sbcs.w	r1, r1, #32
 800af8c:	f082 8292 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af94:	f1a1 0410 	sub.w	r4, r1, #16
 800af98:	ea50 0104 	orrs.w	r1, r0, r4
 800af9c:	f002 8256 	beq.w	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800afa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afa4:	2801      	cmp	r0, #1
 800afa6:	f171 0110 	sbcs.w	r1, r1, #16
 800afaa:	f082 8283 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afb2:	f1a1 0408 	sub.w	r4, r1, #8
 800afb6:	ea50 0104 	orrs.w	r1, r0, r4
 800afba:	f002 81cc 	beq.w	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800afbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afc2:	2801      	cmp	r0, #1
 800afc4:	f171 0108 	sbcs.w	r1, r1, #8
 800afc8:	f082 8274 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afd0:	1f0c      	subs	r4, r1, #4
 800afd2:	ea50 0104 	orrs.w	r1, r0, r4
 800afd6:	f001 8648 	beq.w	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800afda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afde:	2801      	cmp	r0, #1
 800afe0:	f171 0104 	sbcs.w	r1, r1, #4
 800afe4:	f082 8266 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afec:	1e8c      	subs	r4, r1, #2
 800afee:	ea50 0104 	orrs.w	r1, r0, r4
 800aff2:	f002 8143 	beq.w	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800aff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800affa:	2801      	cmp	r0, #1
 800affc:	f171 0102 	sbcs.w	r1, r1, #2
 800b000:	f082 8258 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b004:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b008:	1e4c      	subs	r4, r1, #1
 800b00a:	ea50 0104 	orrs.w	r1, r0, r4
 800b00e:	f002 80ce 	beq.w	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800b012:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b016:	2801      	cmp	r0, #1
 800b018:	f171 0101 	sbcs.w	r1, r1, #1
 800b01c:	f082 824a 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b020:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b024:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800b028:	4321      	orrs	r1, r4
 800b02a:	f002 8059 	beq.w	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800b02e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b032:	4cd9      	ldr	r4, [pc, #868]	; (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800b034:	42a0      	cmp	r0, r4
 800b036:	f171 0100 	sbcs.w	r1, r1, #0
 800b03a:	f082 823b 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b03e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b042:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800b046:	4321      	orrs	r1, r4
 800b048:	f001 87d9 	beq.w	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800b04c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b050:	4cd2      	ldr	r4, [pc, #840]	; (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800b052:	42a0      	cmp	r0, r4
 800b054:	f171 0100 	sbcs.w	r1, r1, #0
 800b058:	f082 822c 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b05c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b060:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800b064:	4321      	orrs	r1, r4
 800b066:	f001 8751 	beq.w	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800b06a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b06e:	4ccc      	ldr	r4, [pc, #816]	; (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b070:	42a0      	cmp	r0, r4
 800b072:	f171 0100 	sbcs.w	r1, r1, #0
 800b076:	f082 821d 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b07a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b07e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800b082:	4321      	orrs	r1, r4
 800b084:	f001 869a 	beq.w	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800b088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b08c:	4cc5      	ldr	r4, [pc, #788]	; (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800b08e:	42a0      	cmp	r0, r4
 800b090:	f171 0100 	sbcs.w	r1, r1, #0
 800b094:	f082 820e 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b09c:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800b0a0:	4321      	orrs	r1, r4
 800b0a2:	f001 8612 	beq.w	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800b0a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0aa:	4cbf      	ldr	r4, [pc, #764]	; (800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800b0ac:	42a0      	cmp	r0, r4
 800b0ae:	f171 0100 	sbcs.w	r1, r1, #0
 800b0b2:	f082 81ff 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0ba:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800b0be:	4321      	orrs	r1, r4
 800b0c0:	f002 817e 	beq.w	800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800b0c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0c8:	4cb8      	ldr	r4, [pc, #736]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b0ca:	42a0      	cmp	r0, r4
 800b0cc:	f171 0100 	sbcs.w	r1, r1, #0
 800b0d0:	f082 81f0 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0d8:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800b0dc:	4321      	orrs	r1, r4
 800b0de:	f000 829e 	beq.w	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800b0e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0e6:	4cb2      	ldr	r4, [pc, #712]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0e8:	42a0      	cmp	r0, r4
 800b0ea:	f171 0100 	sbcs.w	r1, r1, #0
 800b0ee:	f082 81e1 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0f6:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800b0fa:	4321      	orrs	r1, r4
 800b0fc:	f000 826d 	beq.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800b100:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b104:	4cab      	ldr	r4, [pc, #684]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b106:	42a0      	cmp	r0, r4
 800b108:	f171 0100 	sbcs.w	r1, r1, #0
 800b10c:	f082 81d2 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b110:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b114:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800b118:	4321      	orrs	r1, r4
 800b11a:	f001 800d 	beq.w	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800b11e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b122:	4ca5      	ldr	r4, [pc, #660]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b124:	42a0      	cmp	r0, r4
 800b126:	f171 0100 	sbcs.w	r1, r1, #0
 800b12a:	f082 81c3 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b12e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b132:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800b136:	4321      	orrs	r1, r4
 800b138:	f000 81d0 	beq.w	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800b13c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b140:	4c9e      	ldr	r4, [pc, #632]	; (800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b142:	42a0      	cmp	r0, r4
 800b144:	f171 0100 	sbcs.w	r1, r1, #0
 800b148:	f082 81b4 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b14c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b150:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800b154:	4321      	orrs	r1, r4
 800b156:	f000 8142 	beq.w	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800b15a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b15e:	4c98      	ldr	r4, [pc, #608]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b160:	42a0      	cmp	r0, r4
 800b162:	f171 0100 	sbcs.w	r1, r1, #0
 800b166:	f082 81a5 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b16a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b16e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800b172:	4321      	orrs	r1, r4
 800b174:	f001 824e 	beq.w	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800b178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b17c:	4c91      	ldr	r4, [pc, #580]	; (800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800b17e:	42a0      	cmp	r0, r4
 800b180:	f171 0100 	sbcs.w	r1, r1, #0
 800b184:	f082 8196 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b18c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800b190:	4321      	orrs	r1, r4
 800b192:	f001 8197 	beq.w	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800b196:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b19a:	4c8b      	ldr	r4, [pc, #556]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800b19c:	42a0      	cmp	r0, r4
 800b19e:	f171 0100 	sbcs.w	r1, r1, #0
 800b1a2:	f082 8187 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b1a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1aa:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800b1ae:	4321      	orrs	r1, r4
 800b1b0:	f001 8154 	beq.w	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800b1b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1b8:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800b1bc:	f171 0100 	sbcs.w	r1, r1, #0
 800b1c0:	f082 8178 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b1c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1c8:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800b1cc:	4321      	orrs	r1, r4
 800b1ce:	f001 80b7 	beq.w	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800b1d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1d6:	f248 0401 	movw	r4, #32769	; 0x8001
 800b1da:	42a0      	cmp	r0, r4
 800b1dc:	f171 0100 	sbcs.w	r1, r1, #0
 800b1e0:	f082 8168 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b1e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1e8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800b1ec:	4321      	orrs	r1, r4
 800b1ee:	f001 8064 	beq.w	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800b1f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1f6:	f244 0401 	movw	r4, #16385	; 0x4001
 800b1fa:	42a0      	cmp	r0, r4
 800b1fc:	f171 0100 	sbcs.w	r1, r1, #0
 800b200:	f082 8158 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b204:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b208:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800b20c:	4321      	orrs	r1, r4
 800b20e:	f001 8011 	beq.w	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800b212:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b216:	f242 0401 	movw	r4, #8193	; 0x2001
 800b21a:	42a0      	cmp	r0, r4
 800b21c:	f171 0100 	sbcs.w	r1, r1, #0
 800b220:	f082 8148 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b224:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b228:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800b22c:	4321      	orrs	r1, r4
 800b22e:	f000 871e 	beq.w	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800b232:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b236:	f241 0401 	movw	r4, #4097	; 0x1001
 800b23a:	42a0      	cmp	r0, r4
 800b23c:	f171 0100 	sbcs.w	r1, r1, #0
 800b240:	f082 8138 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b244:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b248:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800b24c:	4321      	orrs	r1, r4
 800b24e:	f000 86a8 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800b252:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b256:	f640 0401 	movw	r4, #2049	; 0x801
 800b25a:	42a0      	cmp	r0, r4
 800b25c:	f171 0100 	sbcs.w	r1, r1, #0
 800b260:	f082 8128 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b264:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b268:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800b26c:	4321      	orrs	r1, r4
 800b26e:	f000 8632 	beq.w	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800b272:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b276:	f240 4401 	movw	r4, #1025	; 0x401
 800b27a:	42a0      	cmp	r0, r4
 800b27c:	f171 0100 	sbcs.w	r1, r1, #0
 800b280:	f082 8118 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b284:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b288:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800b28c:	4321      	orrs	r1, r4
 800b28e:	f000 85b0 	beq.w	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800b292:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b296:	f240 2401 	movw	r4, #513	; 0x201
 800b29a:	42a0      	cmp	r0, r4
 800b29c:	f171 0100 	sbcs.w	r1, r1, #0
 800b2a0:	f082 8108 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b2a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2a8:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800b2ac:	4321      	orrs	r1, r4
 800b2ae:	f000 8535 	beq.w	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800b2b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2b6:	f240 1401 	movw	r4, #257	; 0x101
 800b2ba:	42a0      	cmp	r0, r4
 800b2bc:	f171 0100 	sbcs.w	r1, r1, #0
 800b2c0:	f082 80f8 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b2c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2c8:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800b2cc:	4321      	orrs	r1, r4
 800b2ce:	f000 84ba 	beq.w	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800b2d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2d6:	2881      	cmp	r0, #129	; 0x81
 800b2d8:	f171 0100 	sbcs.w	r1, r1, #0
 800b2dc:	f082 80ea 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b2e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2e4:	2821      	cmp	r0, #33	; 0x21
 800b2e6:	f171 0100 	sbcs.w	r1, r1, #0
 800b2ea:	d26f      	bcs.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b2ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2f0:	4301      	orrs	r1, r0
 800b2f2:	f002 80df 	beq.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b2f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2fa:	1e42      	subs	r2, r0, #1
 800b2fc:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b300:	2a20      	cmp	r2, #32
 800b302:	f173 0100 	sbcs.w	r1, r3, #0
 800b306:	f082 80d5 	bcs.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b30a:	2a1f      	cmp	r2, #31
 800b30c:	f202 80d2 	bhi.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b310:	a101      	add	r1, pc, #4	; (adr r1, 800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800b312:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b316:	bf00      	nop
 800b318:	0800b679 	.word	0x0800b679
 800b31c:	0800b745 	.word	0x0800b745
 800b320:	0800d4b5 	.word	0x0800d4b5
 800b324:	0800b805 	.word	0x0800b805
 800b328:	0800d4b5 	.word	0x0800d4b5
 800b32c:	0800d4b5 	.word	0x0800d4b5
 800b330:	0800d4b5 	.word	0x0800d4b5
 800b334:	0800b8d5 	.word	0x0800b8d5
 800b338:	0800d4b5 	.word	0x0800d4b5
 800b33c:	0800d4b5 	.word	0x0800d4b5
 800b340:	0800d4b5 	.word	0x0800d4b5
 800b344:	0800d4b5 	.word	0x0800d4b5
 800b348:	0800d4b5 	.word	0x0800d4b5
 800b34c:	0800d4b5 	.word	0x0800d4b5
 800b350:	0800d4b5 	.word	0x0800d4b5
 800b354:	0800b9b7 	.word	0x0800b9b7
 800b358:	0800d4b5 	.word	0x0800d4b5
 800b35c:	0800d4b5 	.word	0x0800d4b5
 800b360:	0800d4b5 	.word	0x0800d4b5
 800b364:	0800d4b5 	.word	0x0800d4b5
 800b368:	0800d4b5 	.word	0x0800d4b5
 800b36c:	0800d4b5 	.word	0x0800d4b5
 800b370:	0800d4b5 	.word	0x0800d4b5
 800b374:	0800d4b5 	.word	0x0800d4b5
 800b378:	0800d4b5 	.word	0x0800d4b5
 800b37c:	0800d4b5 	.word	0x0800d4b5
 800b380:	0800d4b5 	.word	0x0800d4b5
 800b384:	0800d4b5 	.word	0x0800d4b5
 800b388:	0800d4b5 	.word	0x0800d4b5
 800b38c:	0800d4b5 	.word	0x0800d4b5
 800b390:	0800d4b5 	.word	0x0800d4b5
 800b394:	0800ba8d 	.word	0x0800ba8d
 800b398:	80000001 	.word	0x80000001
 800b39c:	40000001 	.word	0x40000001
 800b3a0:	20000001 	.word	0x20000001
 800b3a4:	10000001 	.word	0x10000001
 800b3a8:	08000001 	.word	0x08000001
 800b3ac:	04000001 	.word	0x04000001
 800b3b0:	00800001 	.word	0x00800001
 800b3b4:	00400001 	.word	0x00400001
 800b3b8:	00200001 	.word	0x00200001
 800b3bc:	00100001 	.word	0x00100001
 800b3c0:	00080001 	.word	0x00080001
 800b3c4:	00040001 	.word	0x00040001
 800b3c8:	00020001 	.word	0x00020001
 800b3cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3d0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	f000 83c4 	beq.w	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b3da:	f002 b86b 	b.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b3de:	4ba1      	ldr	r3, [pc, #644]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b3e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b3e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b3e8:	633b      	str	r3, [r7, #48]	; 0x30
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b3f0:	d036      	beq.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b3f8:	d86b      	bhi.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b400:	d02b      	beq.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b408:	d863      	bhi.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b410:	d01b      	beq.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b418:	d85b      	bhi.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b426:	d008      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800b428:	e053      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b42a:	f107 0320 	add.w	r3, r7, #32
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff f8ba 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b438:	e04e      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b43a:	f107 0314 	add.w	r3, r7, #20
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff fa1c 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b448:	e046      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b44a:	f107 0308 	add.w	r3, r7, #8
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff fb7e 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b458:	e03e      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b45a:	4b83      	ldr	r3, [pc, #524]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b45c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b45e:	e03b      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b460:	4b80      	ldr	r3, [pc, #512]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b466:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b46c:	4b7d      	ldr	r3, [pc, #500]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0302 	and.w	r3, r3, #2
 800b474:	2b02      	cmp	r3, #2
 800b476:	d10c      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d109      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b47e:	4b79      	ldr	r3, [pc, #484]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	08db      	lsrs	r3, r3, #3
 800b484:	f003 0303 	and.w	r3, r3, #3
 800b488:	4a78      	ldr	r2, [pc, #480]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b48a:	fa22 f303 	lsr.w	r3, r2, r3
 800b48e:	637b      	str	r3, [r7, #52]	; 0x34
 800b490:	e01e      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b492:	4b74      	ldr	r3, [pc, #464]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b49e:	d106      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a6:	d102      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b4a8:	4b71      	ldr	r3, [pc, #452]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ac:	e010      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ae:	4b6d      	ldr	r3, [pc, #436]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ba:	d106      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4c2:	d102      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b4c4:	4b6b      	ldr	r3, [pc, #428]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c8:	e002      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b4ce:	e003      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800b4d0:	e002      	b.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b4d6:	bf00      	nop
          }
        }
        break;
 800b4d8:	f001 bfef 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b4dc:	4b61      	ldr	r3, [pc, #388]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b4e2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800b4e6:	633b      	str	r3, [r7, #48]	; 0x30
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4ee:	d036      	beq.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4f6:	d86b      	bhi.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b4fe:	d02b      	beq.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b506:	d863      	bhi.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b50e:	d01b      	beq.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b516:	d85b      	bhi.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d004      	beq.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b524:	d008      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800b526:	e053      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b528:	f107 0320 	add.w	r3, r7, #32
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff f83b 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b536:	e04e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b538:	f107 0314 	add.w	r3, r7, #20
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff f99d 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b546:	e046      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b548:	f107 0308 	add.w	r3, r7, #8
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7ff faff 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b556:	e03e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b558:	4b43      	ldr	r3, [pc, #268]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b55c:	e03b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b55e:	4b41      	ldr	r3, [pc, #260]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b564:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b568:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b56a:	4b3e      	ldr	r3, [pc, #248]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0302 	and.w	r3, r3, #2
 800b572:	2b02      	cmp	r3, #2
 800b574:	d10c      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d109      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b57c:	4b39      	ldr	r3, [pc, #228]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	08db      	lsrs	r3, r3, #3
 800b582:	f003 0303 	and.w	r3, r3, #3
 800b586:	4a39      	ldr	r2, [pc, #228]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b588:	fa22 f303 	lsr.w	r3, r2, r3
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
 800b58e:	e01e      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b590:	4b34      	ldr	r3, [pc, #208]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b59c:	d106      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a4:	d102      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b5a6:	4b32      	ldr	r3, [pc, #200]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5aa:	e010      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5ac:	4b2d      	ldr	r3, [pc, #180]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5b8:	d106      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5c0:	d102      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b5c2:	4b2c      	ldr	r3, [pc, #176]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b5c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c6:	e002      	b.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b5cc:	e003      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800b5ce:	e002      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b5d4:	bf00      	nop
          }
        }
        break;
 800b5d6:	f001 bf70 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b5da:	4b22      	ldr	r3, [pc, #136]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d108      	bne.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5ec:	f107 0320 	add.w	r3, r7, #32
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe ffd9 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5fa:	f001 bf5e 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b600:	2b40      	cmp	r3, #64	; 0x40
 800b602:	d108      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b604:	f107 0314 	add.w	r3, r7, #20
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff f937 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b612:	f001 bf52 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b61a:	f001 bf4e 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800b61e:	4b11      	ldr	r3, [pc, #68]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b628:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d108      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b630:	f107 0320 	add.w	r3, r7, #32
 800b634:	4618      	mov	r0, r3
 800b636:	f7fe ffb7 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b63e:	f001 bf3c 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	2b80      	cmp	r3, #128	; 0x80
 800b646:	d108      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b648:	f107 0314 	add.w	r3, r7, #20
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff f915 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b656:	f001 bf30 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b65a:	2300      	movs	r3, #0
 800b65c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b65e:	f001 bf2c 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b662:	bf00      	nop
 800b664:	44020c00 	.word	0x44020c00
 800b668:	00bb8000 	.word	0x00bb8000
 800b66c:	03d09000 	.word	0x03d09000
 800b670:	003d0900 	.word	0x003d0900
 800b674:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b678:	4b9d      	ldr	r3, [pc, #628]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b67a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b67e:	f003 0307 	and.w	r3, r3, #7
 800b682:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	2b00      	cmp	r3, #0
 800b688:	d104      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b68a:	f7fc ff9f 	bl	80085cc <HAL_RCC_GetPCLK2Freq>
 800b68e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b690:	f001 bf13 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800b694:	4b96      	ldr	r3, [pc, #600]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b69c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6a0:	d10a      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d107      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a8:	f107 0314 	add.w	r3, r7, #20
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff f8e5 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b6:	e043      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800b6b8:	4b8d      	ldr	r3, [pc, #564]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c4:	d10a      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d107      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6cc:	f107 0308 	add.w	r3, r7, #8
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff fa3d 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6da:	e031      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b6dc:	4b84      	ldr	r3, [pc, #528]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0302 	and.w	r3, r3, #2
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d10c      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d109      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b6ee:	4b80      	ldr	r3, [pc, #512]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	08db      	lsrs	r3, r3, #3
 800b6f4:	f003 0303 	and.w	r3, r3, #3
 800b6f8:	4a7e      	ldr	r2, [pc, #504]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b700:	e01e      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800b702:	4b7b      	ldr	r3, [pc, #492]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b70a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b70e:	d105      	bne.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	2b04      	cmp	r3, #4
 800b714:	d102      	bne.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800b716:	4b78      	ldr	r3, [pc, #480]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b718:	637b      	str	r3, [r7, #52]	; 0x34
 800b71a:	e011      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b71c:	4b74      	ldr	r3, [pc, #464]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b71e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b02      	cmp	r3, #2
 800b728:	d106      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	2b05      	cmp	r3, #5
 800b72e:	d103      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800b730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
 800b736:	e003      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b73c:	f001 bebd 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b740:	f001 bebb 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b744:	4b6a      	ldr	r3, [pc, #424]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b746:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b74a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b74e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	2b00      	cmp	r3, #0
 800b754:	d104      	bne.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b756:	f7fc ff23 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800b75a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b75c:	f001 bead 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800b760:	4b63      	ldr	r3, [pc, #396]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b76c:	d10a      	bne.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	2b08      	cmp	r3, #8
 800b772:	d107      	bne.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b774:	f107 0314 	add.w	r3, r7, #20
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff f87f 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	637b      	str	r3, [r7, #52]	; 0x34
 800b782:	e03d      	b.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	2b10      	cmp	r3, #16
 800b788:	d108      	bne.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b78a:	f107 0308 	add.w	r3, r7, #8
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff f9de 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b798:	f001 be8f 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b79c:	4b54      	ldr	r3, [pc, #336]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d10c      	bne.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	2b18      	cmp	r3, #24
 800b7ac:	d109      	bne.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b7ae:	4b50      	ldr	r3, [pc, #320]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	08db      	lsrs	r3, r3, #3
 800b7b4:	f003 0303 	and.w	r3, r3, #3
 800b7b8:	4a4e      	ldr	r2, [pc, #312]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b7be:	637b      	str	r3, [r7, #52]	; 0x34
 800b7c0:	e01e      	b.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800b7c2:	4b4b      	ldr	r3, [pc, #300]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ce:	d105      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	d102      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800b7d6:	4b48      	ldr	r3, [pc, #288]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7da:	e011      	b.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b7dc:	4b44      	ldr	r3, [pc, #272]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b7de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7e2:	f003 0302 	and.w	r3, r3, #2
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d106      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	2b28      	cmp	r3, #40	; 0x28
 800b7ee:	d103      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800b7f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f6:	e003      	b.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7fc:	f001 be5d 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b800:	f001 be5b 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b804:	4b3a      	ldr	r3, [pc, #232]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b80a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b80e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	2b00      	cmp	r3, #0
 800b814:	d104      	bne.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b816:	f7fc fec3 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800b81a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b81c:	f001 be4d 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800b820:	4b33      	ldr	r3, [pc, #204]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b82c:	d10a      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b830:	2b40      	cmp	r3, #64	; 0x40
 800b832:	d107      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b834:	f107 0314 	add.w	r3, r7, #20
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff f81f 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	637b      	str	r3, [r7, #52]	; 0x34
 800b842:	e045      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800b844:	4b2a      	ldr	r3, [pc, #168]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b850:	d10a      	bne.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	2b80      	cmp	r3, #128	; 0x80
 800b856:	d107      	bne.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b858:	f107 0308 	add.w	r3, r7, #8
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7ff f977 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	637b      	str	r3, [r7, #52]	; 0x34
 800b866:	e033      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b868:	4b21      	ldr	r3, [pc, #132]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0302 	and.w	r3, r3, #2
 800b870:	2b02      	cmp	r3, #2
 800b872:	d10c      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b876:	2bc0      	cmp	r3, #192	; 0xc0
 800b878:	d109      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b87a:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	08db      	lsrs	r3, r3, #3
 800b880:	f003 0303 	and.w	r3, r3, #3
 800b884:	4a1b      	ldr	r2, [pc, #108]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b886:	fa22 f303 	lsr.w	r3, r2, r3
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
 800b88c:	e020      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800b88e:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b89a:	d106      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d102      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800b8a4:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a8:	e012      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b8aa:	4b11      	ldr	r3, [pc, #68]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b8ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8b0:	f003 0302 	and.w	r3, r3, #2
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d107      	bne.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b8be:	d103      	bne.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800b8c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c6:	e003      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8cc:	f001 bdf5 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8d0:	f001 bdf3 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b8d4:	4b06      	ldr	r3, [pc, #24]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b8d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b8da:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800b8de:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10a      	bne.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b8e6:	f7fc fe5b 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800b8ea:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b8ec:	f001 bde5 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8f0:	44020c00 	.word	0x44020c00
 800b8f4:	03d09000 	.word	0x03d09000
 800b8f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800b8fc:	4ba0      	ldr	r3, [pc, #640]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b908:	d10b      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b910:	d107      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b912:	f107 0314 	add.w	r3, r7, #20
 800b916:	4618      	mov	r0, r3
 800b918:	f7fe ffb0 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	637b      	str	r3, [r7, #52]	; 0x34
 800b920:	e047      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800b922:	4b97      	ldr	r3, [pc, #604]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b92a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b92e:	d10b      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b936:	d107      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b938:	f107 0308 	add.w	r3, r7, #8
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff f907 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
 800b946:	e034      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b948:	4b8d      	ldr	r3, [pc, #564]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	2b02      	cmp	r3, #2
 800b952:	d10d      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800b954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b956:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b95a:	d109      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b95c:	4b88      	ldr	r3, [pc, #544]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	08db      	lsrs	r3, r3, #3
 800b962:	f003 0303 	and.w	r3, r3, #3
 800b966:	4a87      	ldr	r2, [pc, #540]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b968:	fa22 f303 	lsr.w	r3, r2, r3
 800b96c:	637b      	str	r3, [r7, #52]	; 0x34
 800b96e:	e020      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800b970:	4b83      	ldr	r3, [pc, #524]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b97c:	d106      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b984:	d102      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800b986:	4b80      	ldr	r3, [pc, #512]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b988:	637b      	str	r3, [r7, #52]	; 0x34
 800b98a:	e012      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b98c:	4b7c      	ldr	r3, [pc, #496]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b98e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b992:	f003 0302 	and.w	r3, r3, #2
 800b996:	2b02      	cmp	r3, #2
 800b998:	d107      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b9a0:	d103      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800b9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9a8:	e003      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9ae:	f001 bd84 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b9b2:	f001 bd82 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b9b6:	4b72      	ldr	r3, [pc, #456]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b9b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b9bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b9c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d104      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b9c8:	f7fc fdea 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800b9cc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800b9ce:	f001 bd74 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800b9d2:	4b6b      	ldr	r3, [pc, #428]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9de:	d10b      	bne.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9e6:	d107      	bne.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9e8:	f107 0314 	add.w	r3, r7, #20
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe ff45 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f6:	e047      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800b9f8:	4b61      	ldr	r3, [pc, #388]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba04:	d10b      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba0c:	d107      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff f89c 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba1c:	e034      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ba1e:	4b58      	ldr	r3, [pc, #352]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d10d      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba30:	d109      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba32:	4b53      	ldr	r3, [pc, #332]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	08db      	lsrs	r3, r3, #3
 800ba38:	f003 0303 	and.w	r3, r3, #3
 800ba3c:	4a51      	ldr	r2, [pc, #324]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800ba3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba42:	637b      	str	r3, [r7, #52]	; 0x34
 800ba44:	e020      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800ba46:	4b4e      	ldr	r3, [pc, #312]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba52:	d106      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba5a:	d102      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800ba5c:	4b4a      	ldr	r3, [pc, #296]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800ba5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba60:	e012      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ba62:	4b47      	ldr	r3, [pc, #284]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba68:	f003 0302 	and.w	r3, r3, #2
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d107      	bne.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ba76:	d103      	bne.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800ba78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba7e:	e003      	b.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba84:	f001 bd19 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba88:	f001 bd17 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ba8c:	4b3c      	ldr	r3, [pc, #240]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ba92:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800ba96:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d104      	bne.n	800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba9e:	f7fc fd7f 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800baa2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800baa4:	f001 bd09 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800baa8:	4b35      	ldr	r3, [pc, #212]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bab4:	d10b      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800babc:	d107      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800babe:	f107 0314 	add.w	r3, r7, #20
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe feda 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	637b      	str	r3, [r7, #52]	; 0x34
 800bacc:	e047      	b.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800bace:	4b2c      	ldr	r3, [pc, #176]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bada:	d10b      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae2:	d107      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bae4:	f107 0308 	add.w	r3, r7, #8
 800bae8:	4618      	mov	r0, r3
 800baea:	f7ff f831 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	637b      	str	r3, [r7, #52]	; 0x34
 800baf2:	e034      	b.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800baf4:	4b22      	ldr	r3, [pc, #136]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0302 	and.w	r3, r3, #2
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d10d      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800bb06:	d109      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb08:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	08db      	lsrs	r3, r3, #3
 800bb0e:	f003 0303 	and.w	r3, r3, #3
 800bb12:	4a1c      	ldr	r2, [pc, #112]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800bb14:	fa22 f303 	lsr.w	r3, r2, r3
 800bb18:	637b      	str	r3, [r7, #52]	; 0x34
 800bb1a:	e020      	b.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800bb1c:	4b18      	ldr	r3, [pc, #96]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb28:	d106      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb30:	d102      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800bb32:	4b15      	ldr	r3, [pc, #84]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800bb34:	637b      	str	r3, [r7, #52]	; 0x34
 800bb36:	e012      	b.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800bb38:	4b11      	ldr	r3, [pc, #68]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb3e:	f003 0302 	and.w	r3, r3, #2
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d107      	bne.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800bb4c:	d103      	bne.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800bb4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb52:	637b      	str	r3, [r7, #52]	; 0x34
 800bb54:	e003      	b.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800bb56:	2300      	movs	r3, #0
 800bb58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb5a:	f001 bcae 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb5e:	f001 bcac 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb68:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800bb6c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10b      	bne.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb74:	f7fc fd14 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800bb78:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800bb7a:	f001 bc9e 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb7e:	bf00      	nop
 800bb80:	44020c00 	.word	0x44020c00
 800bb84:	03d09000 	.word	0x03d09000
 800bb88:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800bb8c:	4ba0      	ldr	r3, [pc, #640]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb98:	d10b      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bba0:	d107      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bba2:	f107 0314 	add.w	r3, r7, #20
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fe68 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	637b      	str	r3, [r7, #52]	; 0x34
 800bbb0:	e047      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800bbb2:	4b97      	ldr	r3, [pc, #604]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbbe:	d10b      	bne.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bbc6:	d107      	bne.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbc8:	f107 0308 	add.w	r3, r7, #8
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe ffbf 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd6:	e034      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800bbd8:	4b8d      	ldr	r3, [pc, #564]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 0302 	and.w	r3, r3, #2
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d10d      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bbea:	d109      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bbec:	4b88      	ldr	r3, [pc, #544]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	08db      	lsrs	r3, r3, #3
 800bbf2:	f003 0303 	and.w	r3, r3, #3
 800bbf6:	4a87      	ldr	r2, [pc, #540]	; (800be14 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bbf8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfe:	e020      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800bc00:	4b83      	ldr	r3, [pc, #524]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc0c:	d106      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc14:	d102      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800bc16:	4b80      	ldr	r3, [pc, #512]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bc18:	637b      	str	r3, [r7, #52]	; 0x34
 800bc1a:	e012      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800bc1c:	4b7c      	ldr	r3, [pc, #496]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d107      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800bc30:	d103      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800bc32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc36:	637b      	str	r3, [r7, #52]	; 0x34
 800bc38:	e003      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc3e:	f001 bc3c 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc42:	f001 bc3a 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800bc46:	4b72      	ldr	r3, [pc, #456]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bc4c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d104      	bne.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc58:	f7fc fca2 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800bc5c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc5e:	f001 bc2c 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800bc62:	4b6b      	ldr	r3, [pc, #428]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc6e:	d10b      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc76:	d107      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc78:	f107 0314 	add.w	r3, r7, #20
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fe fdfd 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
 800bc86:	e047      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800bc88:	4b61      	ldr	r3, [pc, #388]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc94:	d10b      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc9c:	d107      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc9e:	f107 0308 	add.w	r3, r7, #8
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe ff54 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	637b      	str	r3, [r7, #52]	; 0x34
 800bcac:	e034      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800bcae:	4b58      	ldr	r3, [pc, #352]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0302 	and.w	r3, r3, #2
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d10d      	bne.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bcc0:	d109      	bne.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bcc2:	4b53      	ldr	r3, [pc, #332]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	08db      	lsrs	r3, r3, #3
 800bcc8:	f003 0303 	and.w	r3, r3, #3
 800bccc:	4a51      	ldr	r2, [pc, #324]	; (800be14 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bcce:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcd4:	e020      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800bcd6:	4b4e      	ldr	r3, [pc, #312]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bce2:	d106      	bne.n	800bcf2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcea:	d102      	bne.n	800bcf2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800bcec:	4b4a      	ldr	r3, [pc, #296]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bcee:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf0:	e012      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800bcf2:	4b47      	ldr	r3, [pc, #284]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bcf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bcf8:	f003 0302 	and.w	r3, r3, #2
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d107      	bne.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd02:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bd06:	d103      	bne.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800bd08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd0e:	e003      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800bd10:	2300      	movs	r3, #0
 800bd12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd14:	f001 bbd1 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd18:	f001 bbcf 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800bd1c:	4b3c      	ldr	r3, [pc, #240]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bd26:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d104      	bne.n	800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bd2e:	f7fc fc37 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800bd32:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd34:	f001 bbc1 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800bd38:	4b35      	ldr	r3, [pc, #212]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd44:	d10b      	bne.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd4c:	d107      	bne.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd4e:	f107 0314 	add.w	r3, r7, #20
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fe fd92 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd5c:	e047      	b.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800bd5e:	4b2c      	ldr	r3, [pc, #176]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd6a:	d10b      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd72:	d107      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd74:	f107 0308 	add.w	r3, r7, #8
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fe fee9 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	637b      	str	r3, [r7, #52]	; 0x34
 800bd82:	e034      	b.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800bd84:	4b22      	ldr	r3, [pc, #136]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 0302 	and.w	r3, r3, #2
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d10d      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd96:	d109      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd98:	4b1d      	ldr	r3, [pc, #116]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	08db      	lsrs	r3, r3, #3
 800bd9e:	f003 0303 	and.w	r3, r3, #3
 800bda2:	4a1c      	ldr	r2, [pc, #112]	; (800be14 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bda4:	fa22 f303 	lsr.w	r3, r2, r3
 800bda8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdaa:	e020      	b.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800bdac:	4b18      	ldr	r3, [pc, #96]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb8:	d106      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bdc0:	d102      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800bdc2:	4b15      	ldr	r3, [pc, #84]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc6:	e012      	b.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800bdc8:	4b11      	ldr	r3, [pc, #68]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bdca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdce:	f003 0302 	and.w	r3, r3, #2
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d107      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bddc:	d103      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800bdde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bde2:	637b      	str	r3, [r7, #52]	; 0x34
 800bde4:	e003      	b.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800bde6:	2300      	movs	r3, #0
 800bde8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdea:	f001 bb66 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bdee:	f001 bb64 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800bdf2:	4b07      	ldr	r3, [pc, #28]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bdf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bdf8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800bdfc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10b      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800be04:	f7fc fbcc 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800be08:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800be0a:	f001 bb56 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be0e:	bf00      	nop
 800be10:	44020c00 	.word	0x44020c00
 800be14:	03d09000 	.word	0x03d09000
 800be18:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800be1c:	4ba1      	ldr	r3, [pc, #644]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be28:	d10b      	bne.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be30:	d107      	bne.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be32:	f107 0314 	add.w	r3, r7, #20
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fd20 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	637b      	str	r3, [r7, #52]	; 0x34
 800be40:	e047      	b.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800be42:	4b98      	ldr	r3, [pc, #608]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be4e:	d10b      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be56:	d107      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be58:	f107 0308 	add.w	r3, r7, #8
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fe fe77 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
 800be66:	e034      	b.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800be68:	4b8e      	ldr	r3, [pc, #568]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0302 	and.w	r3, r3, #2
 800be70:	2b02      	cmp	r3, #2
 800be72:	d10d      	bne.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800be7a:	d109      	bne.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be7c:	4b89      	ldr	r3, [pc, #548]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	08db      	lsrs	r3, r3, #3
 800be82:	f003 0303 	and.w	r3, r3, #3
 800be86:	4a88      	ldr	r2, [pc, #544]	; (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800be88:	fa22 f303 	lsr.w	r3, r2, r3
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
 800be8e:	e020      	b.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800be90:	4b84      	ldr	r3, [pc, #528]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be9c:	d106      	bne.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800be9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bea4:	d102      	bne.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800bea6:	4b81      	ldr	r3, [pc, #516]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800bea8:	637b      	str	r3, [r7, #52]	; 0x34
 800beaa:	e012      	b.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800beac:	4b7d      	ldr	r3, [pc, #500]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800beae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d107      	bne.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800bec0:	d103      	bne.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800bec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bec6:	637b      	str	r3, [r7, #52]	; 0x34
 800bec8:	e003      	b.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800beca:	2300      	movs	r3, #0
 800becc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bece:	f001 baf4 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bed2:	f001 baf2 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800bed6:	4b73      	ldr	r3, [pc, #460]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bed8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bedc:	f003 0307 	and.w	r3, r3, #7
 800bee0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d104      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bee8:	f7fc fb5a 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800beec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800beee:	f001 bae4 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800bef2:	4b6c      	ldr	r3, [pc, #432]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800befa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800befe:	d10a      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d107      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf06:	f107 0314 	add.w	r3, r7, #20
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fcb6 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	637b      	str	r3, [r7, #52]	; 0x34
 800bf14:	e043      	b.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800bf16:	4b63      	ldr	r3, [pc, #396]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf22:	d10a      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d107      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf2a:	f107 0308 	add.w	r3, r7, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe fe0e 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	637b      	str	r3, [r7, #52]	; 0x34
 800bf38:	e031      	b.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800bf3a:	4b5a      	ldr	r3, [pc, #360]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0302 	and.w	r3, r3, #2
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d10c      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d109      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf4c:	4b55      	ldr	r3, [pc, #340]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	08db      	lsrs	r3, r3, #3
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	4a54      	ldr	r2, [pc, #336]	; (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800bf58:	fa22 f303 	lsr.w	r3, r2, r3
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf5e:	e01e      	b.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800bf60:	4b50      	ldr	r3, [pc, #320]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6c:	d105      	bne.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	2b04      	cmp	r3, #4
 800bf72:	d102      	bne.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800bf74:	4b4d      	ldr	r3, [pc, #308]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
 800bf78:	e011      	b.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800bf7a:	4b4a      	ldr	r3, [pc, #296]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d106      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	2b05      	cmp	r3, #5
 800bf8c:	d103      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800bf8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf92:	637b      	str	r3, [r7, #52]	; 0x34
 800bf94:	e003      	b.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800bf96:	2300      	movs	r3, #0
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf9a:	f001 ba8e 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf9e:	f001 ba8c 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800bfa2:	4b40      	ldr	r3, [pc, #256]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bfa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bfa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d104      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bfb4:	f7fc faf4 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800bfb8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800bfba:	f001 ba7e 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800bfbe:	4b39      	ldr	r3, [pc, #228]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfca:	d10a      	bne.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	2b10      	cmp	r3, #16
 800bfd0:	d107      	bne.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfd2:	f107 0314 	add.w	r3, r7, #20
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe fc50 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe0:	e043      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800bfe2:	4b30      	ldr	r3, [pc, #192]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfee:	d10a      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	2b20      	cmp	r3, #32
 800bff4:	d107      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bff6:	f107 0308 	add.w	r3, r7, #8
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe fda8 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	637b      	str	r3, [r7, #52]	; 0x34
 800c004:	e031      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800c006:	4b27      	ldr	r3, [pc, #156]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d10c      	bne.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	2b30      	cmp	r3, #48	; 0x30
 800c016:	d109      	bne.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c018:	4b22      	ldr	r3, [pc, #136]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	08db      	lsrs	r3, r3, #3
 800c01e:	f003 0303 	and.w	r3, r3, #3
 800c022:	4a21      	ldr	r2, [pc, #132]	; (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800c024:	fa22 f303 	lsr.w	r3, r2, r3
 800c028:	637b      	str	r3, [r7, #52]	; 0x34
 800c02a:	e01e      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800c02c:	4b1d      	ldr	r3, [pc, #116]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c038:	d105      	bne.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	2b40      	cmp	r3, #64	; 0x40
 800c03e:	d102      	bne.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800c040:	4b1a      	ldr	r3, [pc, #104]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800c042:	637b      	str	r3, [r7, #52]	; 0x34
 800c044:	e011      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800c046:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c04c:	f003 0302 	and.w	r3, r3, #2
 800c050:	2b02      	cmp	r3, #2
 800c052:	d106      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	2b50      	cmp	r3, #80	; 0x50
 800c058:	d103      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800c05a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c05e:	637b      	str	r3, [r7, #52]	; 0x34
 800c060:	e003      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800c062:	2300      	movs	r3, #0
 800c064:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c066:	f001 ba28 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c06a:	f001 ba26 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c06e:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c074:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c078:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c080:	f7fc faba 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800c084:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c086:	f001 ba18 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c090:	d10e      	bne.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c092:	f107 0314 	add.w	r3, r7, #20
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fbf0 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0a0:	f001 ba0b 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c0a4:	44020c00 	.word	0x44020c00
 800c0a8:	03d09000 	.word	0x03d09000
 800c0ac:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0b6:	d108      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0b8:	f107 0308 	add.w	r3, r7, #8
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fd47 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0c6:	f001 b9f8 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c0ca:	4ba4      	ldr	r3, [pc, #656]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f003 0302 	and.w	r3, r3, #2
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d10d      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0dc:	d109      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0de:	4b9f      	ldr	r3, [pc, #636]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	08db      	lsrs	r3, r3, #3
 800c0e4:	f003 0303 	and.w	r3, r3, #3
 800c0e8:	4a9d      	ldr	r2, [pc, #628]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c0f0:	e020      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800c0f2:	4b9a      	ldr	r3, [pc, #616]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0fe:	d106      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c106:	d102      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800c108:	4b96      	ldr	r3, [pc, #600]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c10a:	637b      	str	r3, [r7, #52]	; 0x34
 800c10c:	e012      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c10e:	4b93      	ldr	r3, [pc, #588]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c114:	f003 0302 	and.w	r3, r3, #2
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d107      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c122:	d103      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800c124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c128:	637b      	str	r3, [r7, #52]	; 0x34
 800c12a:	e003      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800c12c:	2300      	movs	r3, #0
 800c12e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c130:	f001 b9c3 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c134:	f001 b9c1 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c138:	4b88      	ldr	r3, [pc, #544]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c13a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c13e:	f003 0307 	and.w	r3, r3, #7
 800c142:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	2b00      	cmp	r3, #0
 800c148:	d104      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800c14a:	f7fc fa0d 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 800c14e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800c150:	f001 b9b3 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	2b01      	cmp	r3, #1
 800c158:	d104      	bne.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800c15a:	f7fc f8d9 	bl	8008310 <HAL_RCC_GetSysClockFreq>
 800c15e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c160:	f001 b9ab 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	2b02      	cmp	r3, #2
 800c168:	d108      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c16a:	f107 0314 	add.w	r3, r7, #20
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fb84 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c178:	f001 b99f 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c17c:	4b77      	ldr	r3, [pc, #476]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c188:	d105      	bne.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	d102      	bne.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800c190:	4b75      	ldr	r3, [pc, #468]	; (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800c192:	637b      	str	r3, [r7, #52]	; 0x34
 800c194:	e023      	b.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c196:	4b71      	ldr	r3, [pc, #452]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d10c      	bne.n	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d109      	bne.n	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c1a8:	4b6c      	ldr	r3, [pc, #432]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	08db      	lsrs	r3, r3, #3
 800c1ae:	f003 0303 	and.w	r3, r3, #3
 800c1b2:	4a6b      	ldr	r2, [pc, #428]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ba:	e010      	b.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800c1bc:	4b67      	ldr	r3, [pc, #412]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1c8:	d105      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	2b05      	cmp	r3, #5
 800c1ce:	d102      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800c1d0:	4b64      	ldr	r3, [pc, #400]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d4:	e003      	b.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1da:	f001 b96e 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c1de:	f001 b96c 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800c1e2:	4b5e      	ldr	r3, [pc, #376]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c1e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1e8:	f003 0308 	and.w	r3, r3, #8
 800c1ec:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800c1ee:	4b5b      	ldr	r3, [pc, #364]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c1f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d106      	bne.n	800c20a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d103      	bne.n	800c20a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800c202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c206:	637b      	str	r3, [r7, #52]	; 0x34
 800c208:	e012      	b.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800c20a:	4b54      	ldr	r3, [pc, #336]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c20c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c218:	d106      	bne.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	2b08      	cmp	r3, #8
 800c21e:	d103      	bne.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800c220:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c224:	637b      	str	r3, [r7, #52]	; 0x34
 800c226:	e003      	b.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800c228:	2300      	movs	r3, #0
 800c22a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800c22c:	f001 b945 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c230:	f001 b943 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c234:	4b49      	ldr	r3, [pc, #292]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c23a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c23e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	2b00      	cmp	r3, #0
 800c244:	d104      	bne.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c246:	f7fc f9ab 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800c24a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c24c:	f001 b935 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c256:	d108      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c258:	f107 0308 	add.w	r3, r7, #8
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fe fc77 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c266:	f001 b928 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c26a:	4b3c      	ldr	r3, [pc, #240]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 0302 	and.w	r3, r3, #2
 800c272:	2b02      	cmp	r3, #2
 800c274:	d10d      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c27c:	d109      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c27e:	4b37      	ldr	r3, [pc, #220]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	08db      	lsrs	r3, r3, #3
 800c284:	f003 0303 	and.w	r3, r3, #3
 800c288:	4a35      	ldr	r2, [pc, #212]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c28a:	fa22 f303 	lsr.w	r3, r2, r3
 800c28e:	637b      	str	r3, [r7, #52]	; 0x34
 800c290:	e011      	b.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800c292:	4b32      	ldr	r3, [pc, #200]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c29a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c29e:	d106      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c2a6:	d102      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800c2a8:	4b2e      	ldr	r3, [pc, #184]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c2aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c2ac:	e003      	b.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2b2:	f001 b902 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c2b6:	f001 b900 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c2ba:	4b28      	ldr	r3, [pc, #160]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c2bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c2c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d104      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c2cc:	f7fc f968 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800c2d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800c2d2:	f001 b8f2 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c2dc:	d108      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2de:	f107 0308 	add.w	r3, r7, #8
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fc34 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2ec:	f001 b8e5 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c2f0:	4b1a      	ldr	r3, [pc, #104]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0302 	and.w	r3, r3, #2
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d10d      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c302:	d109      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c304:	4b15      	ldr	r3, [pc, #84]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	08db      	lsrs	r3, r3, #3
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	4a14      	ldr	r2, [pc, #80]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c310:	fa22 f303 	lsr.w	r3, r2, r3
 800c314:	637b      	str	r3, [r7, #52]	; 0x34
 800c316:	e011      	b.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800c318:	4b10      	ldr	r3, [pc, #64]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c324:	d106      	bne.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c32c:	d102      	bne.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800c32e:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c330:	637b      	str	r3, [r7, #52]	; 0x34
 800c332:	e003      	b.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800c334:	2300      	movs	r3, #0
 800c336:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c338:	f001 b8bf 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c33c:	f001 b8bd 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c342:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c346:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c34a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10c      	bne.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c352:	f7fc f951 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800c356:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800c358:	f001 b8af 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c35c:	44020c00 	.word	0x44020c00
 800c360:	03d09000 	.word	0x03d09000
 800c364:	003d0900 	.word	0x003d0900
 800c368:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c372:	d108      	bne.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c374:	f107 0308 	add.w	r3, r7, #8
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fe fbe9 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c382:	f001 b89a 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800c386:	4b9f      	ldr	r3, [pc, #636]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 0302 	and.w	r3, r3, #2
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d10d      	bne.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c398:	d109      	bne.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c39a:	4b9a      	ldr	r3, [pc, #616]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	08db      	lsrs	r3, r3, #3
 800c3a0:	f003 0303 	and.w	r3, r3, #3
 800c3a4:	4a98      	ldr	r2, [pc, #608]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ac:	e011      	b.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800c3ae:	4b95      	ldr	r3, [pc, #596]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3ba:	d106      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3c2:	d102      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800c3c4:	4b91      	ldr	r3, [pc, #580]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c8:	e003      	b.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3ce:	f001 b874 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c3d2:	f001 b872 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c3d6:	4b8b      	ldr	r3, [pc, #556]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c3d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c3dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c3e0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d104      	bne.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c3e8:	f7fc f906 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800c3ec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800c3ee:	f001 b864 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3f8:	d108      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3fa:	f107 0308 	add.w	r3, r7, #8
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fe fba6 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c408:	f001 b857 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c40c:	4b7d      	ldr	r3, [pc, #500]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	2b02      	cmp	r3, #2
 800c416:	d10d      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c41e:	d109      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c420:	4b78      	ldr	r3, [pc, #480]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	08db      	lsrs	r3, r3, #3
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	4a77      	ldr	r2, [pc, #476]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c42c:	fa22 f303 	lsr.w	r3, r2, r3
 800c430:	637b      	str	r3, [r7, #52]	; 0x34
 800c432:	e011      	b.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800c434:	4b73      	ldr	r3, [pc, #460]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c440:	d106      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c448:	d102      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800c44a:	4b70      	ldr	r3, [pc, #448]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c44c:	637b      	str	r3, [r7, #52]	; 0x34
 800c44e:	e003      	b.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800c450:	2300      	movs	r3, #0
 800c452:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c454:	f001 b831 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c458:	f001 b82f 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800c45c:	4b69      	ldr	r3, [pc, #420]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c45e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c462:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800c466:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d104      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c46e:	f7fc f897 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800c472:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c474:	f001 b821 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c47e:	d108      	bne.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c480:	f107 0308 	add.w	r3, r7, #8
 800c484:	4618      	mov	r0, r3
 800c486:	f7fe fb63 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c48e:	f001 b814 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800c492:	4b5c      	ldr	r3, [pc, #368]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 0302 	and.w	r3, r3, #2
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d10e      	bne.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4a4:	d10a      	bne.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c4a6:	4b57      	ldr	r3, [pc, #348]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	08db      	lsrs	r3, r3, #3
 800c4ac:	f003 0303 	and.w	r3, r3, #3
 800c4b0:	4a55      	ldr	r2, [pc, #340]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4b8:	f000 bfff 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4c0:	f000 bffb 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c4c4:	4b4f      	ldr	r3, [pc, #316]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c4c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c4ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4ce:	633b      	str	r3, [r7, #48]	; 0x30
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c4d6:	d056      	beq.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c4de:	f200 808b 	bhi.w	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4e8:	d03e      	beq.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4f0:	f200 8082 	bhi.w	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4fa:	d027      	beq.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c502:	d879      	bhi.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c50a:	d017      	beq.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c512:	d871      	bhi.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	2b00      	cmp	r3, #0
 800c518:	d004      	beq.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c520:	d004      	beq.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800c522:	e069      	b.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c524:	f7fc f868 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800c528:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c52a:	e068      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c52c:	f107 0314 	add.w	r3, r7, #20
 800c530:	4618      	mov	r0, r3
 800c532:	f7fe f9a3 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c53a:	e060      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c53c:	f107 0308 	add.w	r3, r7, #8
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fb05 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c54a:	e058      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c54c:	4b2d      	ldr	r3, [pc, #180]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c54e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b02      	cmp	r3, #2
 800c558:	d103      	bne.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800c55a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c55e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c560:	e04d      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c566:	e04a      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c568:	4b26      	ldr	r3, [pc, #152]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c56a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c56e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c576:	d103      	bne.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800c578:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c57e:	e03e      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c584:	e03b      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c586:	4b1f      	ldr	r3, [pc, #124]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c58c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c590:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0302 	and.w	r3, r3, #2
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d10c      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c5a4:	4b17      	ldr	r3, [pc, #92]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	08db      	lsrs	r3, r3, #3
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	4a16      	ldr	r2, [pc, #88]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b6:	e01e      	b.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5b8:	4b12      	ldr	r3, [pc, #72]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5c4:	d106      	bne.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5cc:	d102      	bne.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c5ce:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c5d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5d2:	e010      	b.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5d4:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e0:	d106      	bne.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5e8:	d102      	bne.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c5ea:	4b09      	ldr	r3, [pc, #36]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800c5ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ee:	e002      	b.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c5f4:	e003      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800c5f6:	e002      	b.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5fc:	bf00      	nop
          }
        }
        break;
 800c5fe:	f000 bf5c 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c602:	bf00      	nop
 800c604:	44020c00 	.word	0x44020c00
 800c608:	03d09000 	.word	0x03d09000
 800c60c:	003d0900 	.word	0x003d0900
 800c610:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c614:	4b9e      	ldr	r3, [pc, #632]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c616:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c61a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c61e:	633b      	str	r3, [r7, #48]	; 0x30
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c626:	d056      	beq.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c62e:	f200 808b 	bhi.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c638:	d03e      	beq.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c640:	f200 8082 	bhi.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c64a:	d027      	beq.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c652:	d879      	bhi.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c65a:	d017      	beq.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c662:	d871      	bhi.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800c66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c670:	d004      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800c672:	e069      	b.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800c674:	f7fb ff94 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800c678:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c67a:	e068      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c67c:	f107 0314 	add.w	r3, r7, #20
 800c680:	4618      	mov	r0, r3
 800c682:	f7fe f8fb 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c68a:	e060      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c68c:	f107 0308 	add.w	r3, r7, #8
 800c690:	4618      	mov	r0, r3
 800c692:	f7fe fa5d 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c69a:	e058      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c69c:	4b7c      	ldr	r3, [pc, #496]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c69e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6a2:	f003 0302 	and.w	r3, r3, #2
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d103      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800c6aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6ae:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c6b0:	e04d      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6b6:	e04a      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c6b8:	4b75      	ldr	r3, [pc, #468]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c6ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6c6:	d103      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800c6c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c6cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c6ce:	e03e      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6d4:	e03b      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6d6:	4b6e      	ldr	r3, [pc, #440]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c6d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c6dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c6e0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6e2:	4b6b      	ldr	r3, [pc, #428]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0302 	and.w	r3, r3, #2
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d10c      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800c6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d109      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c6f4:	4b66      	ldr	r3, [pc, #408]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	08db      	lsrs	r3, r3, #3
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	4a65      	ldr	r2, [pc, #404]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c700:	fa22 f303 	lsr.w	r3, r2, r3
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
 800c706:	e01e      	b.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c708:	4b61      	ldr	r3, [pc, #388]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c714:	d106      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c71c:	d102      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c71e:	4b5e      	ldr	r3, [pc, #376]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c720:	637b      	str	r3, [r7, #52]	; 0x34
 800c722:	e010      	b.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c724:	4b5a      	ldr	r3, [pc, #360]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c72c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c730:	d106      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c738:	d102      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c73a:	4b58      	ldr	r3, [pc, #352]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c73c:	637b      	str	r3, [r7, #52]	; 0x34
 800c73e:	e002      	b.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c744:	e003      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800c746:	e002      	b.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800c748:	2300      	movs	r3, #0
 800c74a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c74c:	bf00      	nop
          }
        }
        break;
 800c74e:	f000 beb4 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c752:	4b4f      	ldr	r3, [pc, #316]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c754:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c758:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c75c:	633b      	str	r3, [r7, #48]	; 0x30
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c764:	d056      	beq.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c76c:	f200 808b 	bhi.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c776:	d03e      	beq.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c77e:	f200 8082 	bhi.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c788:	d027      	beq.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c790:	d879      	bhi.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c798:	d017      	beq.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7a0:	d871      	bhi.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d004      	beq.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7ae:	d004      	beq.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800c7b0:	e069      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c7b2:	f7fb ff21 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800c7b6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c7b8:	e068      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fe f85c 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7c8:	e060      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7ca:	f107 0308 	add.w	r3, r7, #8
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fe f9be 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7d8:	e058      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c7da:	4b2d      	ldr	r3, [pc, #180]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c7dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7e0:	f003 0302 	and.w	r3, r3, #2
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	d103      	bne.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800c7e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7ec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c7ee:	e04d      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7f4:	e04a      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c7f6:	4b26      	ldr	r3, [pc, #152]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c7f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c804:	d103      	bne.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800c806:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c80a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c80c:	e03e      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c812:	e03b      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c814:	4b1e      	ldr	r3, [pc, #120]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c81a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c81e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c820:	4b1b      	ldr	r3, [pc, #108]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 0302 	and.w	r3, r3, #2
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d10c      	bne.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d109      	bne.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c832:	4b17      	ldr	r3, [pc, #92]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	08db      	lsrs	r3, r3, #3
 800c838:	f003 0303 	and.w	r3, r3, #3
 800c83c:	4a15      	ldr	r2, [pc, #84]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c83e:	fa22 f303 	lsr.w	r3, r2, r3
 800c842:	637b      	str	r3, [r7, #52]	; 0x34
 800c844:	e01e      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c846:	4b12      	ldr	r3, [pc, #72]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c84e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c852:	d106      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c85a:	d102      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c85c:	4b0e      	ldr	r3, [pc, #56]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c85e:	637b      	str	r3, [r7, #52]	; 0x34
 800c860:	e010      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c862:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c86a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c86e:	d106      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c876:	d102      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c878:	4b08      	ldr	r3, [pc, #32]	; (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c87a:	637b      	str	r3, [r7, #52]	; 0x34
 800c87c:	e002      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c882:	e003      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800c884:	e002      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800c886:	2300      	movs	r3, #0
 800c888:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c88a:	bf00      	nop
          }
        }
        break;
 800c88c:	f000 be15 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c890:	44020c00 	.word	0x44020c00
 800c894:	03d09000 	.word	0x03d09000
 800c898:	003d0900 	.word	0x003d0900
 800c89c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800c8a0:	4b9e      	ldr	r3, [pc, #632]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c8a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c8a6:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800c8aa:	633b      	str	r3, [r7, #48]	; 0x30
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c8b2:	d056      	beq.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c8ba:	f200 808b 	bhi.w	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8c4:	d03e      	beq.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8cc:	f200 8082 	bhi.w	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8d6:	d027      	beq.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8de:	d879      	bhi.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8e6:	d017      	beq.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8ee:	d871      	bhi.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8fc:	d004      	beq.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800c8fe:	e069      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c900:	f7fb fe7a 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800c904:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c906:	e068      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c908:	f107 0314 	add.w	r3, r7, #20
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fd ffb5 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c916:	e060      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c918:	f107 0308 	add.w	r3, r7, #8
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe f917 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c926:	e058      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c928:	4b7c      	ldr	r3, [pc, #496]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c92a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c92e:	f003 0302 	and.w	r3, r3, #2
 800c932:	2b02      	cmp	r3, #2
 800c934:	d103      	bne.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800c936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c93a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c93c:	e04d      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c942:	e04a      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c944:	4b75      	ldr	r3, [pc, #468]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c94a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c94e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c952:	d103      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800c954:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c958:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c95a:	e03e      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c960:	e03b      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c962:	4b6e      	ldr	r3, [pc, #440]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c968:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c96c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c96e:	4b6b      	ldr	r3, [pc, #428]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b02      	cmp	r3, #2
 800c978:	d10c      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d109      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c980:	4b66      	ldr	r3, [pc, #408]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	08db      	lsrs	r3, r3, #3
 800c986:	f003 0303 	and.w	r3, r3, #3
 800c98a:	4a65      	ldr	r2, [pc, #404]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c98c:	fa22 f303 	lsr.w	r3, r2, r3
 800c990:	637b      	str	r3, [r7, #52]	; 0x34
 800c992:	e01e      	b.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c994:	4b61      	ldr	r3, [pc, #388]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c99c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9a0:	d106      	bne.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800c9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9a8:	d102      	bne.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c9aa:	4b5e      	ldr	r3, [pc, #376]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ae:	e010      	b.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9b0:	4b5a      	ldr	r3, [pc, #360]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9bc:	d106      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9c4:	d102      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c9c6:	4b58      	ldr	r3, [pc, #352]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ca:	e002      	b.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c9d0:	e003      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800c9d2:	e002      	b.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9d8:	bf00      	nop
          }
        }
        break;
 800c9da:	f000 bd6e 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800c9de:	4b4f      	ldr	r3, [pc, #316]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c9e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c9e4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c9e8:	633b      	str	r3, [r7, #48]	; 0x30
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c9f0:	d056      	beq.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c9f8:	f200 808b 	bhi.w	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca02:	d03e      	beq.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca0a:	f200 8082 	bhi.w	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca14:	d027      	beq.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca1c:	d879      	bhi.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca24:	d017      	beq.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca2c:	d871      	bhi.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca3a:	d004      	beq.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800ca3c:	e069      	b.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ca3e:	f7fb fddb 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800ca42:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800ca44:	e068      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca46:	f107 0314 	add.w	r3, r7, #20
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fd ff16 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca54:	e060      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca56:	f107 0308 	add.w	r3, r7, #8
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe f878 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca64:	e058      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ca66:	4b2d      	ldr	r3, [pc, #180]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d103      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800ca74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca78:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ca7a:	e04d      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca80:	e04a      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ca82:	4b26      	ldr	r3, [pc, #152]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca90:	d103      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800ca92:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ca96:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ca98:	e03e      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca9e:	e03b      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800caa0:	4b1e      	ldr	r3, [pc, #120]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800caa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800caa6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800caaa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caac:	4b1b      	ldr	r3, [pc, #108]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0302 	and.w	r3, r3, #2
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d10c      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d109      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cabe:	4b17      	ldr	r3, [pc, #92]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	08db      	lsrs	r3, r3, #3
 800cac4:	f003 0303 	and.w	r3, r3, #3
 800cac8:	4a15      	ldr	r2, [pc, #84]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800caca:	fa22 f303 	lsr.w	r3, r2, r3
 800cace:	637b      	str	r3, [r7, #52]	; 0x34
 800cad0:	e01e      	b.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cad2:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cade:	d106      	bne.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cae6:	d102      	bne.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cae8:	4b0e      	ldr	r3, [pc, #56]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800caea:	637b      	str	r3, [r7, #52]	; 0x34
 800caec:	e010      	b.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800caee:	4b0b      	ldr	r3, [pc, #44]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cafa:	d106      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb02:	d102      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cb04:	4b08      	ldr	r3, [pc, #32]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800cb06:	637b      	str	r3, [r7, #52]	; 0x34
 800cb08:	e002      	b.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cb0e:	e003      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800cb10:	e002      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb16:	bf00      	nop
          }
        }
        break;
 800cb18:	f000 bccf 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cb1c:	44020c00 	.word	0x44020c00
 800cb20:	03d09000 	.word	0x03d09000
 800cb24:	003d0900 	.word	0x003d0900
 800cb28:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800cb2c:	4b9e      	ldr	r3, [pc, #632]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cb2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cb32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cb36:	633b      	str	r3, [r7, #48]	; 0x30
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb3e:	d056      	beq.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb46:	f200 808b 	bhi.w	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb50:	d03e      	beq.n	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb58:	f200 8082 	bhi.w	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb62:	d027      	beq.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800cb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb6a:	d879      	bhi.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb72:	d017      	beq.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb7a:	d871      	bhi.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d004      	beq.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb88:	d004      	beq.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800cb8a:	e069      	b.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800cb8c:	f7fb fd34 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800cb90:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800cb92:	e068      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb94:	f107 0314 	add.w	r3, r7, #20
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fd fe6f 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cba2:	e060      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cba4:	f107 0308 	add.w	r3, r7, #8
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fd ffd1 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cbb2:	e058      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cbb4:	4b7c      	ldr	r3, [pc, #496]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cbb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbba:	f003 0302 	and.w	r3, r3, #2
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d103      	bne.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800cbc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbc6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cbc8:	e04d      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cbce:	e04a      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800cbd0:	4b75      	ldr	r3, [pc, #468]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cbd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbde:	d103      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800cbe0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cbe4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cbe6:	e03e      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cbec:	e03b      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbee:	4b6e      	ldr	r3, [pc, #440]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cbf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cbf4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbfa:	4b6b      	ldr	r3, [pc, #428]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d10c      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d109      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cc0c:	4b66      	ldr	r3, [pc, #408]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	08db      	lsrs	r3, r3, #3
 800cc12:	f003 0303 	and.w	r3, r3, #3
 800cc16:	4a65      	ldr	r2, [pc, #404]	; (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800cc18:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc1e:	e01e      	b.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc20:	4b61      	ldr	r3, [pc, #388]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc2c:	d106      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800cc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc34:	d102      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cc36:	4b5e      	ldr	r3, [pc, #376]	; (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800cc38:	637b      	str	r3, [r7, #52]	; 0x34
 800cc3a:	e010      	b.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc3c:	4b5a      	ldr	r3, [pc, #360]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc48:	d106      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc50:	d102      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cc52:	4b58      	ldr	r3, [pc, #352]	; (800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800cc54:	637b      	str	r3, [r7, #52]	; 0x34
 800cc56:	e002      	b.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cc5c:	e003      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800cc5e:	e002      	b.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc64:	bf00      	nop
          }
        }
        break;
 800cc66:	f000 bc28 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cc6a:	4b4f      	ldr	r3, [pc, #316]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cc6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cc70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc74:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800cc76:	4b4c      	ldr	r3, [pc, #304]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc82:	d106      	bne.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d103      	bne.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800cc8a:	4b4a      	ldr	r3, [pc, #296]	; (800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800cc8c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800cc8e:	f000 bc14 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc98:	d108      	bne.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc9a:	f107 0320 	add.w	r3, r7, #32
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fd fc82 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cca8:	f000 bc07 	b.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccb2:	d107      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccb4:	f107 0314 	add.w	r3, r7, #20
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fd fddf 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ccc2:	e3fa      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ccc8:	e3f7      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ccca:	4b37      	ldr	r3, [pc, #220]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccd0:	f003 0307 	and.w	r3, r3, #7
 800ccd4:	633b      	str	r3, [r7, #48]	; 0x30
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	d861      	bhi.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800ccdc:	a201      	add	r2, pc, #4	; (adr r2, 800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800ccde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce2:	bf00      	nop
 800cce4:	0800ccf9 	.word	0x0800ccf9
 800cce8:	0800cd09 	.word	0x0800cd09
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	0800cd29 	.word	0x0800cd29
 800ccf4:	0800cd2f 	.word	0x0800cd2f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccf8:	f107 0320 	add.w	r3, r7, #32
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fd fc53 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd06:	e04e      	b.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fd fdb5 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd16:	e046      	b.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd18:	f107 0308 	add.w	r3, r7, #8
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fd ff17 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd26:	e03e      	b.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cd28:	4b23      	ldr	r3, [pc, #140]	; (800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800cd2a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd2c:	e03b      	b.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd2e:	4b1e      	ldr	r3, [pc, #120]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd34:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cd38:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd3a:	4b1b      	ldr	r3, [pc, #108]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 0302 	and.w	r3, r3, #2
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d10c      	bne.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d109      	bne.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cd4c:	4b16      	ldr	r3, [pc, #88]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	08db      	lsrs	r3, r3, #3
 800cd52:	f003 0303 	and.w	r3, r3, #3
 800cd56:	4a15      	ldr	r2, [pc, #84]	; (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800cd58:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd5e:	e01e      	b.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd60:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd6c:	d106      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd74:	d102      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cd76:	4b0e      	ldr	r3, [pc, #56]	; (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800cd78:	637b      	str	r3, [r7, #52]	; 0x34
 800cd7a:	e010      	b.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd88:	d106      	bne.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd90:	d102      	bne.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cd92:	4b08      	ldr	r3, [pc, #32]	; (800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800cd94:	637b      	str	r3, [r7, #52]	; 0x34
 800cd96:	e002      	b.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cd9c:	e003      	b.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800cd9e:	e002      	b.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cda4:	bf00      	nop
          }
        }
        break;
 800cda6:	e388      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cda8:	44020c00 	.word	0x44020c00
 800cdac:	03d09000 	.word	0x03d09000
 800cdb0:	003d0900 	.word	0x003d0900
 800cdb4:	007a1200 	.word	0x007a1200
 800cdb8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800cdbc:	4ba9      	ldr	r3, [pc, #676]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cdbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cdc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdc6:	633b      	str	r3, [r7, #48]	; 0x30
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	2b20      	cmp	r3, #32
 800cdcc:	f200 809a 	bhi.w	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800cdd0:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800cdd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd6:	bf00      	nop
 800cdd8:	0800ce5d 	.word	0x0800ce5d
 800cddc:	0800cf05 	.word	0x0800cf05
 800cde0:	0800cf05 	.word	0x0800cf05
 800cde4:	0800cf05 	.word	0x0800cf05
 800cde8:	0800cf05 	.word	0x0800cf05
 800cdec:	0800cf05 	.word	0x0800cf05
 800cdf0:	0800cf05 	.word	0x0800cf05
 800cdf4:	0800cf05 	.word	0x0800cf05
 800cdf8:	0800ce6d 	.word	0x0800ce6d
 800cdfc:	0800cf05 	.word	0x0800cf05
 800ce00:	0800cf05 	.word	0x0800cf05
 800ce04:	0800cf05 	.word	0x0800cf05
 800ce08:	0800cf05 	.word	0x0800cf05
 800ce0c:	0800cf05 	.word	0x0800cf05
 800ce10:	0800cf05 	.word	0x0800cf05
 800ce14:	0800cf05 	.word	0x0800cf05
 800ce18:	0800ce7d 	.word	0x0800ce7d
 800ce1c:	0800cf05 	.word	0x0800cf05
 800ce20:	0800cf05 	.word	0x0800cf05
 800ce24:	0800cf05 	.word	0x0800cf05
 800ce28:	0800cf05 	.word	0x0800cf05
 800ce2c:	0800cf05 	.word	0x0800cf05
 800ce30:	0800cf05 	.word	0x0800cf05
 800ce34:	0800cf05 	.word	0x0800cf05
 800ce38:	0800ce8d 	.word	0x0800ce8d
 800ce3c:	0800cf05 	.word	0x0800cf05
 800ce40:	0800cf05 	.word	0x0800cf05
 800ce44:	0800cf05 	.word	0x0800cf05
 800ce48:	0800cf05 	.word	0x0800cf05
 800ce4c:	0800cf05 	.word	0x0800cf05
 800ce50:	0800cf05 	.word	0x0800cf05
 800ce54:	0800cf05 	.word	0x0800cf05
 800ce58:	0800ce93 	.word	0x0800ce93
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce5c:	f107 0320 	add.w	r3, r7, #32
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fd fba1 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce6a:	e04e      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce6c:	f107 0314 	add.w	r3, r7, #20
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fd fd03 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce7a:	e046      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce7c:	f107 0308 	add.w	r3, r7, #8
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fd fe65 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce8a:	e03e      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ce8c:	4b76      	ldr	r3, [pc, #472]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800ce8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce90:	e03b      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce92:	4b74      	ldr	r3, [pc, #464]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ce94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce98:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ce9c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce9e:	4b71      	ldr	r3, [pc, #452]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 0302 	and.w	r3, r3, #2
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d10c      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d109      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ceb0:	4b6c      	ldr	r3, [pc, #432]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	08db      	lsrs	r3, r3, #3
 800ceb6:	f003 0303 	and.w	r3, r3, #3
 800ceba:	4a6c      	ldr	r2, [pc, #432]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800cebc:	fa22 f303 	lsr.w	r3, r2, r3
 800cec0:	637b      	str	r3, [r7, #52]	; 0x34
 800cec2:	e01e      	b.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cec4:	4b67      	ldr	r3, [pc, #412]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced0:	d106      	bne.n	800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800ced2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ced8:	d102      	bne.n	800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ceda:	4b65      	ldr	r3, [pc, #404]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800cedc:	637b      	str	r3, [r7, #52]	; 0x34
 800cede:	e010      	b.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cee0:	4b60      	ldr	r3, [pc, #384]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceec:	d106      	bne.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cef4:	d102      	bne.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cef6:	4b5f      	ldr	r3, [pc, #380]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800cef8:	637b      	str	r3, [r7, #52]	; 0x34
 800cefa:	e002      	b.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cf00:	e003      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800cf02:	e002      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf08:	bf00      	nop
          }
        }
        break;
 800cf0a:	e2d6      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800cf0c:	4b55      	ldr	r3, [pc, #340]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800cf16:	633b      	str	r3, [r7, #48]	; 0x30
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf1e:	d031      	beq.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800cf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf26:	d866      	bhi.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2a:	2bc0      	cmp	r3, #192	; 0xc0
 800cf2c:	d027      	beq.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	2bc0      	cmp	r3, #192	; 0xc0
 800cf32:	d860      	bhi.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	2b80      	cmp	r3, #128	; 0x80
 800cf38:	d019      	beq.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	2b80      	cmp	r3, #128	; 0x80
 800cf3e:	d85a      	bhi.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d003      	beq.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	2b40      	cmp	r3, #64	; 0x40
 800cf4a:	d008      	beq.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800cf4c:	e053      	b.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf4e:	f107 0320 	add.w	r3, r7, #32
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fd fb28 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf5c:	e04e      	b.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf5e:	f107 0314 	add.w	r3, r7, #20
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fd fc8a 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf6c:	e046      	b.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf6e:	f107 0308 	add.w	r3, r7, #8
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fd fdec 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf7c:	e03e      	b.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cf7e:	4b3a      	ldr	r3, [pc, #232]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800cf80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf82:	e03b      	b.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf84:	4b37      	ldr	r3, [pc, #220]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf8a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf90:	4b34      	ldr	r3, [pc, #208]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 0302 	and.w	r3, r3, #2
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d10c      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d109      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cfa2:	4b30      	ldr	r3, [pc, #192]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	08db      	lsrs	r3, r3, #3
 800cfa8:	f003 0303 	and.w	r3, r3, #3
 800cfac:	4a2f      	ldr	r2, [pc, #188]	; (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800cfae:	fa22 f303 	lsr.w	r3, r2, r3
 800cfb2:	637b      	str	r3, [r7, #52]	; 0x34
 800cfb4:	e01e      	b.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cfb6:	4b2b      	ldr	r3, [pc, #172]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfc2:	d106      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfca:	d102      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cfcc:	4b28      	ldr	r3, [pc, #160]	; (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800cfce:	637b      	str	r3, [r7, #52]	; 0x34
 800cfd0:	e010      	b.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cfd2:	4b24      	ldr	r3, [pc, #144]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfde:	d106      	bne.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfe6:	d102      	bne.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cfe8:	4b22      	ldr	r3, [pc, #136]	; (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800cfea:	637b      	str	r3, [r7, #52]	; 0x34
 800cfec:	e002      	b.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cff2:	e003      	b.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800cff4:	e002      	b.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cffa:	bf00      	nop
          }
        }
        break;
 800cffc:	e25d      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800cffe:	4b19      	ldr	r3, [pc, #100]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d004:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800d008:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d103      	bne.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d010:	f7fb fadc 	bl	80085cc <HAL_RCC_GetPCLK2Freq>
 800d014:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d016:	e250      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800d018:	4b12      	ldr	r3, [pc, #72]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d024:	d10b      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d02c:	d107      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d02e:	f107 0314 	add.w	r3, r7, #20
 800d032:	4618      	mov	r0, r3
 800d034:	f7fd fc22 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	637b      	str	r3, [r7, #52]	; 0x34
 800d03c:	e04f      	b.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800d03e:	4b09      	ldr	r3, [pc, #36]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d04a:	d115      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d052:	d111      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d054:	f107 0308 	add.w	r3, r7, #8
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fd fd79 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	637b      	str	r3, [r7, #52]	; 0x34
 800d062:	e03c      	b.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800d064:	44020c00 	.word	0x44020c00
 800d068:	00bb8000 	.word	0x00bb8000
 800d06c:	03d09000 	.word	0x03d09000
 800d070:	003d0900 	.word	0x003d0900
 800d074:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800d078:	4b94      	ldr	r3, [pc, #592]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0302 	and.w	r3, r3, #2
 800d080:	2b02      	cmp	r3, #2
 800d082:	d10d      	bne.n	800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d08a:	d109      	bne.n	800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d08c:	4b8f      	ldr	r3, [pc, #572]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	08db      	lsrs	r3, r3, #3
 800d092:	f003 0303 	and.w	r3, r3, #3
 800d096:	4a8e      	ldr	r2, [pc, #568]	; (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d098:	fa22 f303 	lsr.w	r3, r2, r3
 800d09c:	637b      	str	r3, [r7, #52]	; 0x34
 800d09e:	e01e      	b.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800d0a0:	4b8a      	ldr	r3, [pc, #552]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0ac:	d106      	bne.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0b4:	d102      	bne.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800d0b6:	4b87      	ldr	r3, [pc, #540]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ba:	e010      	b.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800d0bc:	4b83      	ldr	r3, [pc, #524]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0c8:	d106      	bne.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d0d0:	d102      	bne.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800d0d2:	4b81      	ldr	r3, [pc, #516]	; (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d0d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0d6:	e002      	b.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d0dc:	e1ed      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d0de:	e1ec      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800d0e0:	4b7a      	ldr	r3, [pc, #488]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d0e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d0ea:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d103      	bne.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800d0f2:	f7fb fa81 	bl	80085f8 <HAL_RCC_GetPCLK3Freq>
 800d0f6:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d0f8:	e1df      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800d0fa:	4b74      	ldr	r3, [pc, #464]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d106:	d10b      	bne.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d10e:	d107      	bne.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d110:	f107 0314 	add.w	r3, r7, #20
 800d114:	4618      	mov	r0, r3
 800d116:	f7fd fbb1 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
 800d11e:	e045      	b.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800d120:	4b6a      	ldr	r3, [pc, #424]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d12c:	d10b      	bne.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d134:	d107      	bne.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d136:	f107 0308 	add.w	r3, r7, #8
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fd fd08 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	637b      	str	r3, [r7, #52]	; 0x34
 800d144:	e032      	b.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800d146:	4b61      	ldr	r3, [pc, #388]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 0302 	and.w	r3, r3, #2
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d10d      	bne.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d158:	d109      	bne.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d15a:	4b5c      	ldr	r3, [pc, #368]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	08db      	lsrs	r3, r3, #3
 800d160:	f003 0303 	and.w	r3, r3, #3
 800d164:	4a5a      	ldr	r2, [pc, #360]	; (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d166:	fa22 f303 	lsr.w	r3, r2, r3
 800d16a:	637b      	str	r3, [r7, #52]	; 0x34
 800d16c:	e01e      	b.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800d16e:	4b57      	ldr	r3, [pc, #348]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d17a:	d106      	bne.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d182:	d102      	bne.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800d184:	4b53      	ldr	r3, [pc, #332]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d186:	637b      	str	r3, [r7, #52]	; 0x34
 800d188:	e010      	b.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800d18a:	4b50      	ldr	r3, [pc, #320]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d196:	d106      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800d198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d19e:	d102      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800d1a0:	4b4d      	ldr	r3, [pc, #308]	; (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d1a2:	637b      	str	r3, [r7, #52]	; 0x34
 800d1a4:	e002      	b.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d1aa:	e186      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d1ac:	e185      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d1ae:	4b47      	ldr	r3, [pc, #284]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d1b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1b4:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800d1b8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d103      	bne.n	800d1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d1c0:	f7fb fa04 	bl	80085cc <HAL_RCC_GetPCLK2Freq>
 800d1c4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d1c6:	e178      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800d1c8:	4b40      	ldr	r3, [pc, #256]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1d4:	d10b      	bne.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1dc:	d107      	bne.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1de:	f107 0314 	add.w	r3, r7, #20
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fd fb4a 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ec:	e045      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800d1ee:	4b37      	ldr	r3, [pc, #220]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1fa:	d10b      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d202:	d107      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d204:	f107 0308 	add.w	r3, r7, #8
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fd fca1 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	637b      	str	r3, [r7, #52]	; 0x34
 800d212:	e032      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800d214:	4b2d      	ldr	r3, [pc, #180]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0302 	and.w	r3, r3, #2
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d10d      	bne.n	800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800d220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d222:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800d226:	d109      	bne.n	800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d228:	4b28      	ldr	r3, [pc, #160]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	08db      	lsrs	r3, r3, #3
 800d22e:	f003 0303 	and.w	r3, r3, #3
 800d232:	4a27      	ldr	r2, [pc, #156]	; (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d234:	fa22 f303 	lsr.w	r3, r2, r3
 800d238:	637b      	str	r3, [r7, #52]	; 0x34
 800d23a:	e01e      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800d23c:	4b23      	ldr	r3, [pc, #140]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d248:	d106      	bne.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d250:	d102      	bne.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800d252:	4b20      	ldr	r3, [pc, #128]	; (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d254:	637b      	str	r3, [r7, #52]	; 0x34
 800d256:	e010      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800d258:	4b1c      	ldr	r3, [pc, #112]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d264:	d106      	bne.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800d266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d268:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800d26c:	d102      	bne.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800d26e:	4b1a      	ldr	r3, [pc, #104]	; (800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d270:	637b      	str	r3, [r7, #52]	; 0x34
 800d272:	e002      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800d274:	2300      	movs	r3, #0
 800d276:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d278:	e11f      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d27a:	e11e      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d27c:	4b13      	ldr	r3, [pc, #76]	; (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d27e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d282:	f003 0303 	and.w	r3, r3, #3
 800d286:	633b      	str	r3, [r7, #48]	; 0x30
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	d85f      	bhi.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800d28e:	a201      	add	r2, pc, #4	; (adr r2, 800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800d290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d294:	0800d2a5 	.word	0x0800d2a5
 800d298:	0800d2ad 	.word	0x0800d2ad
 800d29c:	0800d2bd 	.word	0x0800d2bd
 800d2a0:	0800d2dd 	.word	0x0800d2dd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800d2a4:	f7fb f960 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 800d2a8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800d2aa:	e053      	b.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2ac:	f107 0320 	add.w	r3, r7, #32
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7fd f979 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d2ba:	e04b      	b.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2bc:	f107 0314 	add.w	r3, r7, #20
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fd fadb 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d2ca:	e043      	b.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800d2cc:	44020c00 	.word	0x44020c00
 800d2d0:	03d09000 	.word	0x03d09000
 800d2d4:	003d0900 	.word	0x003d0900
 800d2d8:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d2dc:	4b79      	ldr	r3, [pc, #484]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d2de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d2e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2e8:	4b76      	ldr	r3, [pc, #472]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d10c      	bne.n	800d30e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d109      	bne.n	800d30e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d2fa:	4b72      	ldr	r3, [pc, #456]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	08db      	lsrs	r3, r3, #3
 800d300:	f003 0303 	and.w	r3, r3, #3
 800d304:	4a70      	ldr	r2, [pc, #448]	; (800d4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800d306:	fa22 f303 	lsr.w	r3, r2, r3
 800d30a:	637b      	str	r3, [r7, #52]	; 0x34
 800d30c:	e01e      	b.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d30e:	4b6d      	ldr	r3, [pc, #436]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d31a:	d106      	bne.n	800d32a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d322:	d102      	bne.n	800d32a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d324:	4b69      	ldr	r3, [pc, #420]	; (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800d326:	637b      	str	r3, [r7, #52]	; 0x34
 800d328:	e010      	b.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d32a:	4b66      	ldr	r3, [pc, #408]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d336:	d106      	bne.n	800d346 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d33e:	d102      	bne.n	800d346 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d340:	4b63      	ldr	r3, [pc, #396]	; (800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800d342:	637b      	str	r3, [r7, #52]	; 0x34
 800d344:	e002      	b.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800d346:	2300      	movs	r3, #0
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d34a:	e003      	b.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800d34c:	e002      	b.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800d34e:	2300      	movs	r3, #0
 800d350:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d352:	bf00      	nop
          }
        }
        break;
 800d354:	e0b1      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800d356:	4b5b      	ldr	r3, [pc, #364]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d35c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d360:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800d362:	4b58      	ldr	r3, [pc, #352]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d368:	f003 0302 	and.w	r3, r3, #2
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d106      	bne.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	2b00      	cmp	r3, #0
 800d374:	d103      	bne.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800d376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d37a:	637b      	str	r3, [r7, #52]	; 0x34
 800d37c:	e01f      	b.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800d37e:	4b51      	ldr	r3, [pc, #324]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d38c:	d106      	bne.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	2b40      	cmp	r3, #64	; 0x40
 800d392:	d103      	bne.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800d394:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d398:	637b      	str	r3, [r7, #52]	; 0x34
 800d39a:	e010      	b.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800d39c:	4b49      	ldr	r3, [pc, #292]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3a8:	d106      	bne.n	800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	2b80      	cmp	r3, #128	; 0x80
 800d3ae:	d103      	bne.n	800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800d3b0:	f248 0312 	movw	r3, #32786	; 0x8012
 800d3b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d3b6:	e002      	b.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800d3bc:	e07d      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d3be:	e07c      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d3c0:	4b40      	ldr	r3, [pc, #256]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d3c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d3c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d3ca:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d3cc:	4b3d      	ldr	r3, [pc, #244]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3d8:	d105      	bne.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d102      	bne.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800d3e0:	4b3c      	ldr	r3, [pc, #240]	; (800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800d3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d3e4:	e031      	b.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800d3e6:	4b37      	ldr	r3, [pc, #220]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3f2:	d10a      	bne.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	2b10      	cmp	r3, #16
 800d3f8:	d107      	bne.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3fa:	f107 0320 	add.w	r3, r7, #32
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fd f8d2 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	637b      	str	r3, [r7, #52]	; 0x34
 800d408:	e01f      	b.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800d40a:	4b2e      	ldr	r3, [pc, #184]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d40c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	2b02      	cmp	r3, #2
 800d416:	d106      	bne.n	800d426 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800d418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41a:	2b20      	cmp	r3, #32
 800d41c:	d103      	bne.n	800d426 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800d41e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d422:	637b      	str	r3, [r7, #52]	; 0x34
 800d424:	e011      	b.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800d426:	4b27      	ldr	r3, [pc, #156]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d42c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d434:	d106      	bne.n	800d444 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	2b30      	cmp	r3, #48	; 0x30
 800d43a:	d103      	bne.n	800d444 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800d43c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d440:	637b      	str	r3, [r7, #52]	; 0x34
 800d442:	e002      	b.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800d444:	2300      	movs	r3, #0
 800d446:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800d448:	e037      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d44a:	e036      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800d44c:	4b1d      	ldr	r3, [pc, #116]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d44e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d456:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	2b10      	cmp	r3, #16
 800d45c:	d107      	bne.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d45e:	f107 0320 	add.w	r3, r7, #32
 800d462:	4618      	mov	r0, r3
 800d464:	f7fd f8a0 	bl	800a5a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800d46c:	e025      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800d46e:	4b15      	ldr	r3, [pc, #84]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d47a:	d10a      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	2b20      	cmp	r3, #32
 800d480:	d107      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d482:	f107 0308 	add.w	r3, r7, #8
 800d486:	4618      	mov	r0, r3
 800d488:	f7fd fb62 	bl	800ab50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	637b      	str	r3, [r7, #52]	; 0x34
 800d490:	e00f      	b.n	800d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800d492:	4b0c      	ldr	r3, [pc, #48]	; (800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d49a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d49e:	d105      	bne.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	2b30      	cmp	r3, #48	; 0x30
 800d4a4:	d102      	bne.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800d4a6:	4b0b      	ldr	r3, [pc, #44]	; (800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800d4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4aa:	e002      	b.n	800d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800d4b0:	e003      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d4b2:	e002      	b.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d4b8:	bf00      	nop
    }
  }

  return (frequency);
 800d4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	373c      	adds	r7, #60	; 0x3c
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd90      	pop	{r4, r7, pc}
 800d4c4:	44020c00 	.word	0x44020c00
 800d4c8:	03d09000 	.word	0x03d09000
 800d4cc:	003d0900 	.word	0x003d0900
 800d4d0:	007a1200 	.word	0x007a1200
 800d4d4:	02dc6c00 	.word	0x02dc6c00

0800d4d8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800d4e0:	4b48      	ldr	r3, [pc, #288]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a47      	ldr	r2, [pc, #284]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d4e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d4ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d4ec:	f7f6 fd9e 	bl	800402c <HAL_GetTick>
 800d4f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d4f2:	e008      	b.n	800d506 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d4f4:	f7f6 fd9a 	bl	800402c <HAL_GetTick>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d901      	bls.n	800d506 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d502:	2303      	movs	r3, #3
 800d504:	e07a      	b.n	800d5fc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d506:	4b3f      	ldr	r3, [pc, #252]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1f0      	bne.n	800d4f4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d512:	4b3c      	ldr	r3, [pc, #240]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d516:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d51a:	f023 0303 	bic.w	r3, r3, #3
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	6811      	ldr	r1, [r2, #0]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	6852      	ldr	r2, [r2, #4]
 800d526:	0212      	lsls	r2, r2, #8
 800d528:	430a      	orrs	r2, r1
 800d52a:	4936      	ldr	r1, [pc, #216]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d52c:	4313      	orrs	r3, r2
 800d52e:	62cb      	str	r3, [r1, #44]	; 0x2c
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	3b01      	subs	r3, #1
 800d536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	3b01      	subs	r3, #1
 800d540:	025b      	lsls	r3, r3, #9
 800d542:	b29b      	uxth	r3, r3
 800d544:	431a      	orrs	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	3b01      	subs	r3, #1
 800d54c:	041b      	lsls	r3, r3, #16
 800d54e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d552:	431a      	orrs	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	695b      	ldr	r3, [r3, #20]
 800d558:	3b01      	subs	r3, #1
 800d55a:	061b      	lsls	r3, r3, #24
 800d55c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d560:	4928      	ldr	r1, [pc, #160]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d562:	4313      	orrs	r3, r2
 800d564:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d566:	4b27      	ldr	r3, [pc, #156]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	f023 020c 	bic.w	r2, r3, #12
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	4924      	ldr	r1, [pc, #144]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d574:	4313      	orrs	r3, r2
 800d576:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800d578:	4b22      	ldr	r3, [pc, #136]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57c:	f023 0220 	bic.w	r2, r3, #32
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	69db      	ldr	r3, [r3, #28]
 800d584:	491f      	ldr	r1, [pc, #124]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d586:	4313      	orrs	r3, r2
 800d588:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d58a:	4b1e      	ldr	r3, [pc, #120]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d592:	491c      	ldr	r1, [pc, #112]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d594:	4313      	orrs	r3, r2
 800d596:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800d598:	4b1a      	ldr	r3, [pc, #104]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59c:	4a19      	ldr	r2, [pc, #100]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d59e:	f023 0310 	bic.w	r3, r3, #16
 800d5a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800d5a4:	4b17      	ldr	r3, [pc, #92]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	6a12      	ldr	r2, [r2, #32]
 800d5b4:	00d2      	lsls	r2, r2, #3
 800d5b6:	4913      	ldr	r1, [pc, #76]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800d5bc:	4b11      	ldr	r3, [pc, #68]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	4a10      	ldr	r2, [pc, #64]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d5c2:	f043 0310 	orr.w	r3, r3, #16
 800d5c6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800d5c8:	4b0e      	ldr	r3, [pc, #56]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a0d      	ldr	r2, [pc, #52]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d5ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d5d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5d4:	f7f6 fd2a 	bl	800402c <HAL_GetTick>
 800d5d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5da:	e008      	b.n	800d5ee <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d5dc:	f7f6 fd26 	bl	800402c <HAL_GetTick>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d901      	bls.n	800d5ee <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	e006      	b.n	800d5fc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5ee:	4b05      	ldr	r3, [pc, #20]	; (800d604 <RCCEx_PLL2_Config+0x12c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0f0      	beq.n	800d5dc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800d5fa:	2300      	movs	r3, #0

}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	44020c00 	.word	0x44020c00

0800d608 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800d610:	4b48      	ldr	r3, [pc, #288]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a47      	ldr	r2, [pc, #284]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d61a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d61c:	f7f6 fd06 	bl	800402c <HAL_GetTick>
 800d620:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d622:	e008      	b.n	800d636 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d624:	f7f6 fd02 	bl	800402c <HAL_GetTick>
 800d628:	4602      	mov	r2, r0
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d901      	bls.n	800d636 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d632:	2303      	movs	r3, #3
 800d634:	e07a      	b.n	800d72c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d636:	4b3f      	ldr	r3, [pc, #252]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1f0      	bne.n	800d624 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d642:	4b3c      	ldr	r3, [pc, #240]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d646:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d64a:	f023 0303 	bic.w	r3, r3, #3
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	6811      	ldr	r1, [r2, #0]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	6852      	ldr	r2, [r2, #4]
 800d656:	0212      	lsls	r2, r2, #8
 800d658:	430a      	orrs	r2, r1
 800d65a:	4936      	ldr	r1, [pc, #216]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d65c:	4313      	orrs	r3, r2
 800d65e:	630b      	str	r3, [r1, #48]	; 0x30
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	3b01      	subs	r3, #1
 800d666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	3b01      	subs	r3, #1
 800d670:	025b      	lsls	r3, r3, #9
 800d672:	b29b      	uxth	r3, r3
 800d674:	431a      	orrs	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	041b      	lsls	r3, r3, #16
 800d67e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d682:	431a      	orrs	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	3b01      	subs	r3, #1
 800d68a:	061b      	lsls	r3, r3, #24
 800d68c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d690:	4928      	ldr	r1, [pc, #160]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d692:	4313      	orrs	r3, r2
 800d694:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d696:	4b27      	ldr	r3, [pc, #156]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69a:	f023 020c 	bic.w	r2, r3, #12
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	4924      	ldr	r1, [pc, #144]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800d6a8:	4b22      	ldr	r3, [pc, #136]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ac:	f023 0220 	bic.w	r2, r3, #32
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	491f      	ldr	r1, [pc, #124]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d6ba:	4b1e      	ldr	r3, [pc, #120]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c2:	491c      	ldr	r1, [pc, #112]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800d6c8:	4b1a      	ldr	r3, [pc, #104]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6cc:	4a19      	ldr	r2, [pc, #100]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6ce:	f023 0310 	bic.w	r3, r3, #16
 800d6d2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800d6d4:	4b17      	ldr	r3, [pc, #92]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d6dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	6a12      	ldr	r2, [r2, #32]
 800d6e4:	00d2      	lsls	r2, r2, #3
 800d6e6:	4913      	ldr	r1, [pc, #76]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800d6ec:	4b11      	ldr	r3, [pc, #68]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f0:	4a10      	ldr	r2, [pc, #64]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6f2:	f043 0310 	orr.w	r3, r3, #16
 800d6f6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800d6f8:	4b0e      	ldr	r3, [pc, #56]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a0d      	ldr	r2, [pc, #52]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d6fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d702:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d704:	f7f6 fc92 	bl	800402c <HAL_GetTick>
 800d708:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d70a:	e008      	b.n	800d71e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d70c:	f7f6 fc8e 	bl	800402c <HAL_GetTick>
 800d710:	4602      	mov	r2, r0
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	2b02      	cmp	r3, #2
 800d718:	d901      	bls.n	800d71e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d71a:	2303      	movs	r3, #3
 800d71c:	e006      	b.n	800d72c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d71e:	4b05      	ldr	r3, [pc, #20]	; (800d734 <RCCEx_PLL3_Config+0x12c>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d726:	2b00      	cmp	r3, #0
 800d728:	d0f0      	beq.n	800d70c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	44020c00 	.word	0x44020c00

0800d738 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d738:	b480      	push	{r7}
 800d73a:	b087      	sub	sp, #28
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d744:	4b07      	ldr	r3, [pc, #28]	; (800d764 <HAL_RTCEx_BKUPWrite+0x2c>)
 800d746:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	4413      	add	r3, r2
 800d750:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	601a      	str	r2, [r3, #0]
}
 800d758:	bf00      	nop
 800d75a:	371c      	adds	r7, #28
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	44007d00 	.word	0x44007d00

0800d768 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d772:	4b07      	ldr	r3, [pc, #28]	; (800d790 <HAL_RTCEx_BKUPRead+0x28>)
 800d774:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
}
 800d784:	4618      	mov	r0, r3
 800d786:	3714      	adds	r7, #20
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	44007d00 	.word	0x44007d00

0800d794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d101      	bne.n	800d7a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e049      	b.n	800d83a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d106      	bne.n	800d7c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f841 	bl	800d842 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2202      	movs	r2, #2
 800d7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	f000 fa60 	bl	800dc98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2201      	movs	r2, #1
 800d814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2201      	movs	r2, #1
 800d824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2201      	movs	r2, #1
 800d834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d842:	b480      	push	{r7}
 800d844:	b083      	sub	sp, #12
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d84a:	bf00      	nop
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
	...

0800d858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d001      	beq.n	800d870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	e07c      	b.n	800d96a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2202      	movs	r2, #2
 800d874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f042 0201 	orr.w	r2, r2, #1
 800d886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a3a      	ldr	r2, [pc, #232]	; (800d978 <HAL_TIM_Base_Start_IT+0x120>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d04a      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a39      	ldr	r2, [pc, #228]	; (800d97c <HAL_TIM_Base_Start_IT+0x124>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d045      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8a4:	d040      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d8ae:	d03b      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a32      	ldr	r2, [pc, #200]	; (800d980 <HAL_TIM_Base_Start_IT+0x128>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d036      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a31      	ldr	r2, [pc, #196]	; (800d984 <HAL_TIM_Base_Start_IT+0x12c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d031      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a2f      	ldr	r2, [pc, #188]	; (800d988 <HAL_TIM_Base_Start_IT+0x130>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d02c      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a2e      	ldr	r2, [pc, #184]	; (800d98c <HAL_TIM_Base_Start_IT+0x134>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d027      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a2c      	ldr	r2, [pc, #176]	; (800d990 <HAL_TIM_Base_Start_IT+0x138>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d022      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a2b      	ldr	r2, [pc, #172]	; (800d994 <HAL_TIM_Base_Start_IT+0x13c>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d01d      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a29      	ldr	r2, [pc, #164]	; (800d998 <HAL_TIM_Base_Start_IT+0x140>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d018      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a28      	ldr	r2, [pc, #160]	; (800d99c <HAL_TIM_Base_Start_IT+0x144>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d013      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a26      	ldr	r2, [pc, #152]	; (800d9a0 <HAL_TIM_Base_Start_IT+0x148>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d00e      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a25      	ldr	r2, [pc, #148]	; (800d9a4 <HAL_TIM_Base_Start_IT+0x14c>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d009      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a23      	ldr	r2, [pc, #140]	; (800d9a8 <HAL_TIM_Base_Start_IT+0x150>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d004      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xd0>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a22      	ldr	r2, [pc, #136]	; (800d9ac <HAL_TIM_Base_Start_IT+0x154>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d115      	bne.n	800d954 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	689a      	ldr	r2, [r3, #8]
 800d92e:	4b20      	ldr	r3, [pc, #128]	; (800d9b0 <HAL_TIM_Base_Start_IT+0x158>)
 800d930:	4013      	ands	r3, r2
 800d932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b06      	cmp	r3, #6
 800d938:	d015      	beq.n	800d966 <HAL_TIM_Base_Start_IT+0x10e>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d940:	d011      	beq.n	800d966 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f042 0201 	orr.w	r2, r2, #1
 800d950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d952:	e008      	b.n	800d966 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f042 0201 	orr.w	r2, r2, #1
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	e000      	b.n	800d968 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	40012c00 	.word	0x40012c00
 800d97c:	50012c00 	.word	0x50012c00
 800d980:	40000400 	.word	0x40000400
 800d984:	50000400 	.word	0x50000400
 800d988:	40000800 	.word	0x40000800
 800d98c:	50000800 	.word	0x50000800
 800d990:	40000c00 	.word	0x40000c00
 800d994:	50000c00 	.word	0x50000c00
 800d998:	40013400 	.word	0x40013400
 800d99c:	50013400 	.word	0x50013400
 800d9a0:	40001800 	.word	0x40001800
 800d9a4:	50001800 	.word	0x50001800
 800d9a8:	40014000 	.word	0x40014000
 800d9ac:	50014000 	.word	0x50014000
 800d9b0:	00010007 	.word	0x00010007

0800d9b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d020      	beq.n	800da18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d01b      	beq.n	800da18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f06f 0202 	mvn.w	r2, #2
 800d9e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	f003 0303 	and.w	r3, r3, #3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 f92c 	bl	800dc5c <HAL_TIM_IC_CaptureCallback>
 800da04:	e005      	b.n	800da12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f91e 	bl	800dc48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f92f 	bl	800dc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	f003 0304 	and.w	r3, r3, #4
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d020      	beq.n	800da64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f003 0304 	and.w	r3, r3, #4
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d01b      	beq.n	800da64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f06f 0204 	mvn.w	r2, #4
 800da34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2202      	movs	r2, #2
 800da3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	699b      	ldr	r3, [r3, #24]
 800da42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da46:	2b00      	cmp	r3, #0
 800da48:	d003      	beq.n	800da52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f906 	bl	800dc5c <HAL_TIM_IC_CaptureCallback>
 800da50:	e005      	b.n	800da5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f8f8 	bl	800dc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 f909 	bl	800dc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	f003 0308 	and.w	r3, r3, #8
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d020      	beq.n	800dab0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f003 0308 	and.w	r3, r3, #8
 800da74:	2b00      	cmp	r3, #0
 800da76:	d01b      	beq.n	800dab0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f06f 0208 	mvn.w	r2, #8
 800da80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2204      	movs	r2, #4
 800da86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	f003 0303 	and.w	r3, r3, #3
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 f8e0 	bl	800dc5c <HAL_TIM_IC_CaptureCallback>
 800da9c:	e005      	b.n	800daaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f8d2 	bl	800dc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 f8e3 	bl	800dc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	f003 0310 	and.w	r3, r3, #16
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d020      	beq.n	800dafc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f003 0310 	and.w	r3, r3, #16
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d01b      	beq.n	800dafc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f06f 0210 	mvn.w	r2, #16
 800dacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2208      	movs	r2, #8
 800dad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	69db      	ldr	r3, [r3, #28]
 800dada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d003      	beq.n	800daea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f8ba 	bl	800dc5c <HAL_TIM_IC_CaptureCallback>
 800dae8:	e005      	b.n	800daf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f8ac 	bl	800dc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f8bd 	bl	800dc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f003 0301 	and.w	r3, r3, #1
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00c      	beq.n	800db20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f003 0301 	and.w	r3, r3, #1
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f06f 0201 	mvn.w	r2, #1
 800db18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7f3 f912 	bl	8000d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00c      	beq.n	800db44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db30:	2b00      	cmp	r3, #0
 800db32:	d007      	beq.n	800db44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f9d2 	bl	800dee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00c      	beq.n	800db68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db54:	2b00      	cmp	r3, #0
 800db56:	d007      	beq.n	800db68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800db60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f9ca 	bl	800defc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00c      	beq.n	800db8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d007      	beq.n	800db8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 f87c 	bl	800dc84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00c      	beq.n	800dbb0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f003 0320 	and.w	r3, r3, #32
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d007      	beq.n	800dbb0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f06f 0220 	mvn.w	r2, #32
 800dba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 f992 	bl	800ded4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00c      	beq.n	800dbd4 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d007      	beq.n	800dbd4 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dbcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f99e 	bl	800df10 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00c      	beq.n	800dbf8 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d007      	beq.n	800dbf8 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dbf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f996 	bl	800df24 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00c      	beq.n	800dc1c <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d007      	beq.n	800dc1c <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dc14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f98e 	bl	800df38 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00c      	beq.n	800dc40 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d007      	beq.n	800dc40 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dc38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f986 	bl	800df4c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc40:	bf00      	nop
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc8c:	bf00      	nop
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a74      	ldr	r2, [pc, #464]	; (800de7c <TIM_Base_SetConfig+0x1e4>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d02b      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a73      	ldr	r2, [pc, #460]	; (800de80 <TIM_Base_SetConfig+0x1e8>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d027      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcbe:	d023      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcc6:	d01f      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a6e      	ldr	r2, [pc, #440]	; (800de84 <TIM_Base_SetConfig+0x1ec>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d01b      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a6d      	ldr	r2, [pc, #436]	; (800de88 <TIM_Base_SetConfig+0x1f0>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d017      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a6c      	ldr	r2, [pc, #432]	; (800de8c <TIM_Base_SetConfig+0x1f4>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d013      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a6b      	ldr	r2, [pc, #428]	; (800de90 <TIM_Base_SetConfig+0x1f8>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d00f      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a6a      	ldr	r2, [pc, #424]	; (800de94 <TIM_Base_SetConfig+0x1fc>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d00b      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a69      	ldr	r2, [pc, #420]	; (800de98 <TIM_Base_SetConfig+0x200>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d007      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a68      	ldr	r2, [pc, #416]	; (800de9c <TIM_Base_SetConfig+0x204>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d003      	beq.n	800dd08 <TIM_Base_SetConfig+0x70>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4a67      	ldr	r2, [pc, #412]	; (800dea0 <TIM_Base_SetConfig+0x208>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d108      	bne.n	800dd1a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a57      	ldr	r2, [pc, #348]	; (800de7c <TIM_Base_SetConfig+0x1e4>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d05b      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a56      	ldr	r2, [pc, #344]	; (800de80 <TIM_Base_SetConfig+0x1e8>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d057      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd30:	d053      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd38:	d04f      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a51      	ldr	r2, [pc, #324]	; (800de84 <TIM_Base_SetConfig+0x1ec>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d04b      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a50      	ldr	r2, [pc, #320]	; (800de88 <TIM_Base_SetConfig+0x1f0>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d047      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a4f      	ldr	r2, [pc, #316]	; (800de8c <TIM_Base_SetConfig+0x1f4>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d043      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a4e      	ldr	r2, [pc, #312]	; (800de90 <TIM_Base_SetConfig+0x1f8>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d03f      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a4d      	ldr	r2, [pc, #308]	; (800de94 <TIM_Base_SetConfig+0x1fc>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d03b      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4a4c      	ldr	r2, [pc, #304]	; (800de98 <TIM_Base_SetConfig+0x200>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d037      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a4b      	ldr	r2, [pc, #300]	; (800de9c <TIM_Base_SetConfig+0x204>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d033      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4a4a      	ldr	r2, [pc, #296]	; (800dea0 <TIM_Base_SetConfig+0x208>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d02f      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4a49      	ldr	r2, [pc, #292]	; (800dea4 <TIM_Base_SetConfig+0x20c>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d02b      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a48      	ldr	r2, [pc, #288]	; (800dea8 <TIM_Base_SetConfig+0x210>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d027      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4a47      	ldr	r2, [pc, #284]	; (800deac <TIM_Base_SetConfig+0x214>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d023      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4a46      	ldr	r2, [pc, #280]	; (800deb0 <TIM_Base_SetConfig+0x218>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d01f      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4a45      	ldr	r2, [pc, #276]	; (800deb4 <TIM_Base_SetConfig+0x21c>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d01b      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4a44      	ldr	r2, [pc, #272]	; (800deb8 <TIM_Base_SetConfig+0x220>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d017      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4a43      	ldr	r2, [pc, #268]	; (800debc <TIM_Base_SetConfig+0x224>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d013      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a42      	ldr	r2, [pc, #264]	; (800dec0 <TIM_Base_SetConfig+0x228>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d00f      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a41      	ldr	r2, [pc, #260]	; (800dec4 <TIM_Base_SetConfig+0x22c>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d00b      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a40      	ldr	r2, [pc, #256]	; (800dec8 <TIM_Base_SetConfig+0x230>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d007      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a3f      	ldr	r2, [pc, #252]	; (800decc <TIM_Base_SetConfig+0x234>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d003      	beq.n	800ddda <TIM_Base_SetConfig+0x142>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a3e      	ldr	r2, [pc, #248]	; (800ded0 <TIM_Base_SetConfig+0x238>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d108      	bne.n	800ddec <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dde0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a1a      	ldr	r2, [pc, #104]	; (800de7c <TIM_Base_SetConfig+0x1e4>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d023      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a19      	ldr	r2, [pc, #100]	; (800de80 <TIM_Base_SetConfig+0x1e8>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d01f      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4a1e      	ldr	r2, [pc, #120]	; (800de9c <TIM_Base_SetConfig+0x204>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d01b      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a1d      	ldr	r2, [pc, #116]	; (800dea0 <TIM_Base_SetConfig+0x208>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d017      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a22      	ldr	r2, [pc, #136]	; (800debc <TIM_Base_SetConfig+0x224>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d013      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a21      	ldr	r2, [pc, #132]	; (800dec0 <TIM_Base_SetConfig+0x228>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d00f      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a20      	ldr	r2, [pc, #128]	; (800dec4 <TIM_Base_SetConfig+0x22c>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d00b      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a1f      	ldr	r2, [pc, #124]	; (800dec8 <TIM_Base_SetConfig+0x230>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d007      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4a1e      	ldr	r2, [pc, #120]	; (800decc <TIM_Base_SetConfig+0x234>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d003      	beq.n	800de60 <TIM_Base_SetConfig+0x1c8>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a1d      	ldr	r2, [pc, #116]	; (800ded0 <TIM_Base_SetConfig+0x238>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d103      	bne.n	800de68 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	691a      	ldr	r2, [r3, #16]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	615a      	str	r2, [r3, #20]
}
 800de6e:	bf00      	nop
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	40012c00 	.word	0x40012c00
 800de80:	50012c00 	.word	0x50012c00
 800de84:	40000400 	.word	0x40000400
 800de88:	50000400 	.word	0x50000400
 800de8c:	40000800 	.word	0x40000800
 800de90:	50000800 	.word	0x50000800
 800de94:	40000c00 	.word	0x40000c00
 800de98:	50000c00 	.word	0x50000c00
 800de9c:	40013400 	.word	0x40013400
 800dea0:	50013400 	.word	0x50013400
 800dea4:	40001800 	.word	0x40001800
 800dea8:	50001800 	.word	0x50001800
 800deac:	40001c00 	.word	0x40001c00
 800deb0:	50001c00 	.word	0x50001c00
 800deb4:	40002000 	.word	0x40002000
 800deb8:	50002000 	.word	0x50002000
 800debc:	40014000 	.word	0x40014000
 800dec0:	50014000 	.word	0x50014000
 800dec4:	40014400 	.word	0x40014400
 800dec8:	50014400 	.word	0x50014400
 800decc:	40014800 	.word	0x40014800
 800ded0:	50014800 	.word	0x50014800

0800ded4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df04:	bf00      	nop
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800df18:	bf00      	nop
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d101      	bne.n	800df72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	e042      	b.n	800dff8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d106      	bne.n	800df8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7f2 ff13 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2224      	movs	r2, #36	; 0x24
 800df8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f022 0201 	bic.w	r2, r2, #1
 800dfa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 fe0a 	bl	800ebc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fc19 	bl	800e7e8 <UART_SetConfig>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d101      	bne.n	800dfc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e01b      	b.n	800dff8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	685a      	ldr	r2, [r3, #4]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dfce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	689a      	ldr	r2, [r3, #8]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dfde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f042 0201 	orr.w	r2, r2, #1
 800dfee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fe89 	bl	800ed08 <UART_CheckIdleState>
 800dff6:	4603      	mov	r3, r0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b08a      	sub	sp, #40	; 0x28
 800e004:	af02      	add	r7, sp, #8
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	4613      	mov	r3, r2
 800e00e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e016:	2b20      	cmp	r3, #32
 800e018:	f040 808b 	bne.w	800e132 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d002      	beq.n	800e028 <HAL_UART_Transmit+0x28>
 800e022:	88fb      	ldrh	r3, [r7, #6]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	e083      	b.n	800e134 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e036:	2b80      	cmp	r3, #128	; 0x80
 800e038:	d107      	bne.n	800e04a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	689a      	ldr	r2, [r3, #8]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e048:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2221      	movs	r2, #33	; 0x21
 800e056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e05a:	f7f5 ffe7 	bl	800402c <HAL_GetTick>
 800e05e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	88fa      	ldrh	r2, [r7, #6]
 800e064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	88fa      	ldrh	r2, [r7, #6]
 800e06c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e078:	d108      	bne.n	800e08c <HAL_UART_Transmit+0x8c>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d104      	bne.n	800e08c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800e082:	2300      	movs	r3, #0
 800e084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	61bb      	str	r3, [r7, #24]
 800e08a:	e003      	b.n	800e094 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e090:	2300      	movs	r3, #0
 800e092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e094:	e030      	b.n	800e0f8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	2200      	movs	r2, #0
 800e09e:	2180      	movs	r1, #128	; 0x80
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f000 fedb 	bl	800ee5c <UART_WaitOnFlagUntilTimeout>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d005      	beq.n	800e0b8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	e03d      	b.n	800e134 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10b      	bne.n	800e0d6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	3302      	adds	r3, #2
 800e0d2:	61bb      	str	r3, [r7, #24]
 800e0d4:	e007      	b.n	800e0e6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	781a      	ldrb	r2, [r3, #0]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1c8      	bne.n	800e096 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2200      	movs	r2, #0
 800e10c:	2140      	movs	r1, #64	; 0x40
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f000 fea4 	bl	800ee5c <UART_WaitOnFlagUntilTimeout>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d005      	beq.n	800e126 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2220      	movs	r2, #32
 800e11e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e122:	2303      	movs	r3, #3
 800e124:	e006      	b.n	800e134 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2220      	movs	r2, #32
 800e12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	e000      	b.n	800e134 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800e132:	2302      	movs	r3, #2
  }
}
 800e134:	4618      	mov	r0, r3
 800e136:	3720      	adds	r7, #32
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08a      	sub	sp, #40	; 0x28
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	4613      	mov	r3, r2
 800e148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e150:	2b20      	cmp	r3, #32
 800e152:	d14b      	bne.n	800e1ec <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d002      	beq.n	800e160 <HAL_UART_Receive_IT+0x24>
 800e15a:	88fb      	ldrh	r3, [r7, #6]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d101      	bne.n	800e164 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e160:	2301      	movs	r3, #1
 800e162:	e044      	b.n	800e1ee <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e174:	2b40      	cmp	r3, #64	; 0x40
 800e176:	d107      	bne.n	800e188 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	689a      	ldr	r2, [r3, #8]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e186:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4a1a      	ldr	r2, [pc, #104]	; (800e1f8 <HAL_UART_Receive_IT+0xbc>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d024      	beq.n	800e1dc <HAL_UART_Receive_IT+0xa0>
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a19      	ldr	r2, [pc, #100]	; (800e1fc <HAL_UART_Receive_IT+0xc0>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d01f      	beq.n	800e1dc <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d018      	beq.n	800e1dc <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	e853 3f00 	ldrex	r3, [r3]
 800e1b6:	613b      	str	r3, [r7, #16]
   return(result);
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e1be:	627b      	str	r3, [r7, #36]	; 0x24
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	623b      	str	r3, [r7, #32]
 800e1ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1cc:	69f9      	ldr	r1, [r7, #28]
 800e1ce:	6a3a      	ldr	r2, [r7, #32]
 800e1d0:	e841 2300 	strex	r3, r2, [r1]
 800e1d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1e6      	bne.n	800e1aa <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e1dc:	88fb      	ldrh	r3, [r7, #6]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	68b9      	ldr	r1, [r7, #8]
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f000 fea2 	bl	800ef2c <UART_Start_Receive_IT>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	e000      	b.n	800e1ee <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800e1ec:	2302      	movs	r3, #2
  }
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3728      	adds	r7, #40	; 0x28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	44002400 	.word	0x44002400
 800e1fc:	54002400 	.word	0x54002400

0800e200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b0ae      	sub	sp, #184	; 0xb8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	69db      	ldr	r3, [r3, #28]
 800e20e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e22a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e22e:	4013      	ands	r3, r2
 800e230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800e234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d11b      	bne.n	800e274 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e23c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e240:	f003 0320 	and.w	r3, r3, #32
 800e244:	2b00      	cmp	r3, #0
 800e246:	d015      	beq.n	800e274 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e24c:	f003 0320 	and.w	r3, r3, #32
 800e250:	2b00      	cmp	r3, #0
 800e252:	d105      	bne.n	800e260 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d009      	beq.n	800e274 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e264:	2b00      	cmp	r3, #0
 800e266:	f000 8293 	beq.w	800e790 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	4798      	blx	r3
      }
      return;
 800e272:	e28d      	b.n	800e790 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 80fd 	beq.w	800e478 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e27e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e282:	4b7a      	ldr	r3, [pc, #488]	; (800e46c <HAL_UART_IRQHandler+0x26c>)
 800e284:	4013      	ands	r3, r2
 800e286:	2b00      	cmp	r3, #0
 800e288:	d106      	bne.n	800e298 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e28a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e28e:	4b78      	ldr	r3, [pc, #480]	; (800e470 <HAL_UART_IRQHandler+0x270>)
 800e290:	4013      	ands	r3, r2
 800e292:	2b00      	cmp	r3, #0
 800e294:	f000 80f0 	beq.w	800e478 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e29c:	f003 0301 	and.w	r3, r3, #1
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d011      	beq.n	800e2c8 <HAL_UART_IRQHandler+0xc8>
 800e2a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e2a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00b      	beq.n	800e2c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2be:	f043 0201 	orr.w	r2, r3, #1
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2cc:	f003 0302 	and.w	r3, r3, #2
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d011      	beq.n	800e2f8 <HAL_UART_IRQHandler+0xf8>
 800e2d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e2d8:	f003 0301 	and.w	r3, r3, #1
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00b      	beq.n	800e2f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2ee:	f043 0204 	orr.w	r2, r3, #4
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2fc:	f003 0304 	and.w	r3, r3, #4
 800e300:	2b00      	cmp	r3, #0
 800e302:	d011      	beq.n	800e328 <HAL_UART_IRQHandler+0x128>
 800e304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e308:	f003 0301 	and.w	r3, r3, #1
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00b      	beq.n	800e328 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2204      	movs	r2, #4
 800e316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e31e:	f043 0202 	orr.w	r2, r3, #2
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e328:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e32c:	f003 0308 	and.w	r3, r3, #8
 800e330:	2b00      	cmp	r3, #0
 800e332:	d017      	beq.n	800e364 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e338:	f003 0320 	and.w	r3, r3, #32
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d105      	bne.n	800e34c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e340:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e344:	4b49      	ldr	r3, [pc, #292]	; (800e46c <HAL_UART_IRQHandler+0x26c>)
 800e346:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00b      	beq.n	800e364 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2208      	movs	r2, #8
 800e352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e35a:	f043 0208 	orr.w	r2, r3, #8
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e364:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d012      	beq.n	800e396 <HAL_UART_IRQHandler+0x196>
 800e370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00c      	beq.n	800e396 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e38c:	f043 0220 	orr.w	r2, r3, #32
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f000 81f9 	beq.w	800e794 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e3a6:	f003 0320 	and.w	r3, r3, #32
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d013      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e3b2:	f003 0320 	and.w	r3, r3, #32
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d105      	bne.n	800e3c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d007      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d003      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ea:	2b40      	cmp	r3, #64	; 0x40
 800e3ec:	d005      	beq.n	800e3fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e3ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e3f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d02e      	beq.n	800e458 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 feb8 	bl	800f170 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e40a:	2b40      	cmp	r3, #64	; 0x40
 800e40c:	d120      	bne.n	800e450 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e414:	2b00      	cmp	r3, #0
 800e416:	d017      	beq.n	800e448 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e41e:	4a15      	ldr	r2, [pc, #84]	; (800e474 <HAL_UART_IRQHandler+0x274>)
 800e420:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e428:	4618      	mov	r0, r3
 800e42a:	f7f5 ffa1 	bl	8004370 <HAL_DMA_Abort_IT>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d019      	beq.n	800e468 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e442:	4610      	mov	r0, r2
 800e444:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e446:	e00f      	b.n	800e468 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f9b7 	bl	800e7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e44e:	e00b      	b.n	800e468 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f9b3 	bl	800e7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e456:	e007      	b.n	800e468 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f9af 	bl	800e7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e466:	e195      	b.n	800e794 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e468:	bf00      	nop
    return;
 800e46a:	e193      	b.n	800e794 <HAL_UART_IRQHandler+0x594>
 800e46c:	10000001 	.word	0x10000001
 800e470:	04000120 	.word	0x04000120
 800e474:	0800f23d 	.word	0x0800f23d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	f040 8129 	bne.w	800e6d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e486:	f003 0310 	and.w	r3, r3, #16
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 8122 	beq.w	800e6d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e494:	f003 0310 	and.w	r3, r3, #16
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 811b 	beq.w	800e6d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2210      	movs	r2, #16
 800e4a4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4b0:	2b40      	cmp	r3, #64	; 0x40
 800e4b2:	f040 8091 	bne.w	800e5d8 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4c0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800e4c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 8165 	beq.w	800e798 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4d4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	f080 815d 	bcs.w	800e798 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e4e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4f0:	2b81      	cmp	r3, #129	; 0x81
 800e4f2:	d060      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4fc:	e853 3f00 	ldrex	r3, [r3]
 800e500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	461a      	mov	r2, r3
 800e512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e51a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e51e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e522:	e841 2300 	strex	r3, r2, [r1]
 800e526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d1e2      	bne.n	800e4f4 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	3308      	adds	r3, #8
 800e534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e538:	e853 3f00 	ldrex	r3, [r3]
 800e53c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e540:	f023 0301 	bic.w	r3, r3, #1
 800e544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	3308      	adds	r3, #8
 800e54e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e552:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e55a:	e841 2300 	strex	r3, r2, [r1]
 800e55e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1e3      	bne.n	800e52e <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2220      	movs	r2, #32
 800e56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e57c:	e853 3f00 	ldrex	r3, [r3]
 800e580:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e584:	f023 0310 	bic.w	r3, r3, #16
 800e588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	461a      	mov	r2, r3
 800e592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e596:	65bb      	str	r3, [r7, #88]	; 0x58
 800e598:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e59c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e4      	bne.n	800e574 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7f5 fe61 	bl	8004278 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 f8fd 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5d6:	e0df      	b.n	800e798 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	1ad3      	subs	r3, r2, r3
 800e5e8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 80d1 	beq.w	800e79c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800e5fa:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f000 80cc 	beq.w	800e79c <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60c:	e853 3f00 	ldrex	r3, [r3]
 800e610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	461a      	mov	r2, r3
 800e622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e626:	647b      	str	r3, [r7, #68]	; 0x44
 800e628:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e62c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e62e:	e841 2300 	strex	r3, r2, [r1]
 800e632:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1e4      	bne.n	800e604 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3308      	adds	r3, #8
 800e640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	e853 3f00 	ldrex	r3, [r3]
 800e648:	623b      	str	r3, [r7, #32]
   return(result);
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e650:	f023 0301 	bic.w	r3, r3, #1
 800e654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3308      	adds	r3, #8
 800e65e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e662:	633a      	str	r2, [r7, #48]	; 0x30
 800e664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e66a:	e841 2300 	strex	r3, r2, [r1]
 800e66e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e1      	bne.n	800e63a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2220      	movs	r2, #32
 800e67a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	e853 3f00 	ldrex	r3, [r3]
 800e696:	60fb      	str	r3, [r7, #12]
   return(result);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f023 0310 	bic.w	r3, r3, #16
 800e69e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6ac:	61fb      	str	r3, [r7, #28]
 800e6ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b0:	69b9      	ldr	r1, [r7, #24]
 800e6b2:	69fa      	ldr	r2, [r7, #28]
 800e6b4:	e841 2300 	strex	r3, r2, [r1]
 800e6b8:	617b      	str	r3, [r7, #20]
   return(result);
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e4      	bne.n	800e68a <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6c6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f87f 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6d2:	e063      	b.n	800e79c <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00e      	beq.n	800e6fe <HAL_UART_IRQHandler+0x4fe>
 800e6e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e6e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d008      	beq.n	800e6fe <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f001 fb1a 	bl	800fd30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6fc:	e051      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e6fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e706:	2b00      	cmp	r3, #0
 800e708:	d014      	beq.n	800e734 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e70a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e712:	2b00      	cmp	r3, #0
 800e714:	d105      	bne.n	800e722 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e71a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d008      	beq.n	800e734 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e726:	2b00      	cmp	r3, #0
 800e728:	d03a      	beq.n	800e7a0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	4798      	blx	r3
    }
    return;
 800e732:	e035      	b.n	800e7a0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d009      	beq.n	800e754 <HAL_UART_IRQHandler+0x554>
 800e740:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d003      	beq.n	800e754 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 fd8b 	bl	800f268 <UART_EndTransmit_IT>
    return;
 800e752:	e026      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d009      	beq.n	800e774 <HAL_UART_IRQHandler+0x574>
 800e760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f001 faf3 	bl	800fd58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e772:	e016      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e774:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d010      	beq.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
 800e780:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e784:	2b00      	cmp	r3, #0
 800e786:	da0c      	bge.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f001 fadb 	bl	800fd44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e78e:	e008      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e790:	bf00      	nop
 800e792:	e006      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
    return;
 800e794:	bf00      	nop
 800e796:	e004      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e798:	bf00      	nop
 800e79a:	e002      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e79c:	bf00      	nop
 800e79e:	e000      	b.n	800e7a2 <HAL_UART_IRQHandler+0x5a2>
    return;
 800e7a0:	bf00      	nop
  }
}
 800e7a2:	37b8      	adds	r7, #184	; 0xb8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7ec:	b094      	sub	sp, #80	; 0x50
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	4b78      	ldr	r3, [pc, #480]	; (800e9e0 <UART_SetConfig+0x1f8>)
 800e7fe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	689a      	ldr	r2, [r3, #8]
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	431a      	orrs	r2, r3
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	695b      	ldr	r3, [r3, #20]
 800e80e:	431a      	orrs	r2, r3
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	69db      	ldr	r3, [r3, #28]
 800e814:	4313      	orrs	r3, r2
 800e816:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4971      	ldr	r1, [pc, #452]	; (800e9e4 <UART_SetConfig+0x1fc>)
 800e820:	4019      	ands	r1, r3
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e828:	430b      	orrs	r3, r1
 800e82a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e838:	68d9      	ldr	r1, [r3, #12]
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	ea40 0301 	orr.w	r3, r0, r1
 800e842:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	4b64      	ldr	r3, [pc, #400]	; (800e9e0 <UART_SetConfig+0x1f8>)
 800e850:	429a      	cmp	r2, r3
 800e852:	d009      	beq.n	800e868 <UART_SetConfig+0x80>
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	4b63      	ldr	r3, [pc, #396]	; (800e9e8 <UART_SetConfig+0x200>)
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d004      	beq.n	800e868 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	6a1a      	ldr	r2, [r3, #32]
 800e862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e864:	4313      	orrs	r3, r2
 800e866:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800e872:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e87c:	430b      	orrs	r3, r1
 800e87e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e886:	f023 000f 	bic.w	r0, r3, #15
 800e88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	ea40 0301 	orr.w	r3, r0, r1
 800e896:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	4b53      	ldr	r3, [pc, #332]	; (800e9ec <UART_SetConfig+0x204>)
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d102      	bne.n	800e8a8 <UART_SetConfig+0xc0>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8a6:	e066      	b.n	800e976 <UART_SetConfig+0x18e>
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	4b50      	ldr	r3, [pc, #320]	; (800e9f0 <UART_SetConfig+0x208>)
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d102      	bne.n	800e8b8 <UART_SetConfig+0xd0>
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8b6:	e05e      	b.n	800e976 <UART_SetConfig+0x18e>
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	4b4d      	ldr	r3, [pc, #308]	; (800e9f4 <UART_SetConfig+0x20c>)
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d102      	bne.n	800e8c8 <UART_SetConfig+0xe0>
 800e8c2:	2304      	movs	r3, #4
 800e8c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8c6:	e056      	b.n	800e976 <UART_SetConfig+0x18e>
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	4b4a      	ldr	r3, [pc, #296]	; (800e9f8 <UART_SetConfig+0x210>)
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d102      	bne.n	800e8d8 <UART_SetConfig+0xf0>
 800e8d2:	2308      	movs	r3, #8
 800e8d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8d6:	e04e      	b.n	800e976 <UART_SetConfig+0x18e>
 800e8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	4b47      	ldr	r3, [pc, #284]	; (800e9fc <UART_SetConfig+0x214>)
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d102      	bne.n	800e8e8 <UART_SetConfig+0x100>
 800e8e2:	2310      	movs	r3, #16
 800e8e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8e6:	e046      	b.n	800e976 <UART_SetConfig+0x18e>
 800e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	4b44      	ldr	r3, [pc, #272]	; (800ea00 <UART_SetConfig+0x218>)
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d102      	bne.n	800e8f8 <UART_SetConfig+0x110>
 800e8f2:	2320      	movs	r3, #32
 800e8f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8f6:	e03e      	b.n	800e976 <UART_SetConfig+0x18e>
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	4b41      	ldr	r3, [pc, #260]	; (800ea04 <UART_SetConfig+0x21c>)
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d102      	bne.n	800e908 <UART_SetConfig+0x120>
 800e902:	2340      	movs	r3, #64	; 0x40
 800e904:	64bb      	str	r3, [r7, #72]	; 0x48
 800e906:	e036      	b.n	800e976 <UART_SetConfig+0x18e>
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	4b3e      	ldr	r3, [pc, #248]	; (800ea08 <UART_SetConfig+0x220>)
 800e90e:	429a      	cmp	r2, r3
 800e910:	d102      	bne.n	800e918 <UART_SetConfig+0x130>
 800e912:	2380      	movs	r3, #128	; 0x80
 800e914:	64bb      	str	r3, [r7, #72]	; 0x48
 800e916:	e02e      	b.n	800e976 <UART_SetConfig+0x18e>
 800e918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	4b3b      	ldr	r3, [pc, #236]	; (800ea0c <UART_SetConfig+0x224>)
 800e91e:	429a      	cmp	r2, r3
 800e920:	d103      	bne.n	800e92a <UART_SetConfig+0x142>
 800e922:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e926:	64bb      	str	r3, [r7, #72]	; 0x48
 800e928:	e025      	b.n	800e976 <UART_SetConfig+0x18e>
 800e92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	4b38      	ldr	r3, [pc, #224]	; (800ea10 <UART_SetConfig+0x228>)
 800e930:	429a      	cmp	r2, r3
 800e932:	d103      	bne.n	800e93c <UART_SetConfig+0x154>
 800e934:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e938:	64bb      	str	r3, [r7, #72]	; 0x48
 800e93a:	e01c      	b.n	800e976 <UART_SetConfig+0x18e>
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	4b34      	ldr	r3, [pc, #208]	; (800ea14 <UART_SetConfig+0x22c>)
 800e942:	429a      	cmp	r2, r3
 800e944:	d103      	bne.n	800e94e <UART_SetConfig+0x166>
 800e946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e94a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e94c:	e013      	b.n	800e976 <UART_SetConfig+0x18e>
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	4b31      	ldr	r3, [pc, #196]	; (800ea18 <UART_SetConfig+0x230>)
 800e954:	429a      	cmp	r2, r3
 800e956:	d103      	bne.n	800e960 <UART_SetConfig+0x178>
 800e958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e95c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e95e:	e00a      	b.n	800e976 <UART_SetConfig+0x18e>
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	4b1e      	ldr	r3, [pc, #120]	; (800e9e0 <UART_SetConfig+0x1f8>)
 800e966:	429a      	cmp	r2, r3
 800e968:	d103      	bne.n	800e972 <UART_SetConfig+0x18a>
 800e96a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e96e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e970:	e001      	b.n	800e976 <UART_SetConfig+0x18e>
 800e972:	2300      	movs	r3, #0
 800e974:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	4b19      	ldr	r3, [pc, #100]	; (800e9e0 <UART_SetConfig+0x1f8>)
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d005      	beq.n	800e98c <UART_SetConfig+0x1a4>
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	4b18      	ldr	r3, [pc, #96]	; (800e9e8 <UART_SetConfig+0x200>)
 800e986:	429a      	cmp	r2, r3
 800e988:	f040 8094 	bne.w	800eab4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e98e:	2200      	movs	r2, #0
 800e990:	623b      	str	r3, [r7, #32]
 800e992:	627a      	str	r2, [r7, #36]	; 0x24
 800e994:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e998:	f7fc fa44 	bl	800ae24 <HAL_RCCEx_GetPeriphCLKFreq>
 800e99c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 80f7 	beq.w	800eb94 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9aa:	4a1c      	ldr	r2, [pc, #112]	; (800ea1c <UART_SetConfig+0x234>)
 800e9ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9b8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	4413      	add	r3, r2
 800e9c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d305      	bcc.n	800e9d6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e9d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d924      	bls.n	800ea20 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e9dc:	e069      	b.n	800eab2 <UART_SetConfig+0x2ca>
 800e9de:	bf00      	nop
 800e9e0:	44002400 	.word	0x44002400
 800e9e4:	cfff69f3 	.word	0xcfff69f3
 800e9e8:	54002400 	.word	0x54002400
 800e9ec:	40013800 	.word	0x40013800
 800e9f0:	40004400 	.word	0x40004400
 800e9f4:	40004800 	.word	0x40004800
 800e9f8:	40004c00 	.word	0x40004c00
 800e9fc:	40005000 	.word	0x40005000
 800ea00:	40006400 	.word	0x40006400
 800ea04:	40007800 	.word	0x40007800
 800ea08:	40007c00 	.word	0x40007c00
 800ea0c:	40008000 	.word	0x40008000
 800ea10:	40006800 	.word	0x40006800
 800ea14:	40006c00 	.word	0x40006c00
 800ea18:	40008400 	.word	0x40008400
 800ea1c:	08027a74 	.word	0x08027a74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea22:	2200      	movs	r2, #0
 800ea24:	61bb      	str	r3, [r7, #24]
 800ea26:	61fa      	str	r2, [r7, #28]
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2c:	4a64      	ldr	r2, [pc, #400]	; (800ebc0 <UART_SetConfig+0x3d8>)
 800ea2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	2200      	movs	r2, #0
 800ea36:	613b      	str	r3, [r7, #16]
 800ea38:	617a      	str	r2, [r7, #20]
 800ea3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ea42:	f7f1 fc37 	bl	80002b4 <__aeabi_uldivmod>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f04f 0200 	mov.w	r2, #0
 800ea52:	f04f 0300 	mov.w	r3, #0
 800ea56:	020b      	lsls	r3, r1, #8
 800ea58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea5c:	0202      	lsls	r2, r0, #8
 800ea5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea60:	6849      	ldr	r1, [r1, #4]
 800ea62:	0849      	lsrs	r1, r1, #1
 800ea64:	2000      	movs	r0, #0
 800ea66:	460c      	mov	r4, r1
 800ea68:	4605      	mov	r5, r0
 800ea6a:	eb12 0804 	adds.w	r8, r2, r4
 800ea6e:	eb43 0905 	adc.w	r9, r3, r5
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	60bb      	str	r3, [r7, #8]
 800ea7a:	60fa      	str	r2, [r7, #12]
 800ea7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea80:	4640      	mov	r0, r8
 800ea82:	4649      	mov	r1, r9
 800ea84:	f7f1 fc16 	bl	80002b4 <__aeabi_uldivmod>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ea90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea96:	d308      	bcc.n	800eaaa <UART_SetConfig+0x2c2>
 800ea98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea9e:	d204      	bcs.n	800eaaa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800eaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaa6:	60da      	str	r2, [r3, #12]
 800eaa8:	e003      	b.n	800eab2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800eab0:	e070      	b.n	800eb94 <UART_SetConfig+0x3ac>
 800eab2:	e06f      	b.n	800eb94 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab6:	69db      	ldr	r3, [r3, #28]
 800eab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eabc:	d13c      	bne.n	800eb38 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800eabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eac0:	2200      	movs	r2, #0
 800eac2:	603b      	str	r3, [r7, #0]
 800eac4:	607a      	str	r2, [r7, #4]
 800eac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eaca:	f7fc f9ab 	bl	800ae24 <HAL_RCCEx_GetPeriphCLKFreq>
 800eace:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ead0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d05e      	beq.n	800eb94 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eada:	4a39      	ldr	r2, [pc, #228]	; (800ebc0 <UART_SetConfig+0x3d8>)
 800eadc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eae0:	461a      	mov	r2, r3
 800eae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eae4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eae8:	005a      	lsls	r2, r3, #1
 800eaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	085b      	lsrs	r3, r3, #1
 800eaf0:	441a      	add	r2, r3
 800eaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eafa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafe:	2b0f      	cmp	r3, #15
 800eb00:	d916      	bls.n	800eb30 <UART_SetConfig+0x348>
 800eb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb08:	d212      	bcs.n	800eb30 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	f023 030f 	bic.w	r3, r3, #15
 800eb12:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb16:	085b      	lsrs	r3, r3, #1
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	f003 0307 	and.w	r3, r3, #7
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eb22:	4313      	orrs	r3, r2
 800eb24:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800eb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eb2c:	60da      	str	r2, [r3, #12]
 800eb2e:	e031      	b.n	800eb94 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800eb30:	2301      	movs	r3, #1
 800eb32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800eb36:	e02d      	b.n	800eb94 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800eb38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	469a      	mov	sl, r3
 800eb3e:	4693      	mov	fp, r2
 800eb40:	4650      	mov	r0, sl
 800eb42:	4659      	mov	r1, fp
 800eb44:	f7fc f96e 	bl	800ae24 <HAL_RCCEx_GetPeriphCLKFreq>
 800eb48:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800eb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d021      	beq.n	800eb94 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb54:	4a1a      	ldr	r2, [pc, #104]	; (800ebc0 <UART_SetConfig+0x3d8>)
 800eb56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	085b      	lsrs	r3, r3, #1
 800eb68:	441a      	add	r2, r3
 800eb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb72:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb76:	2b0f      	cmp	r3, #15
 800eb78:	d909      	bls.n	800eb8e <UART_SetConfig+0x3a6>
 800eb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb80:	d205      	bcs.n	800eb8e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	60da      	str	r2, [r3, #12]
 800eb8c:	e002      	b.n	800eb94 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	2201      	movs	r2, #1
 800eb98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba6:	2200      	movs	r2, #0
 800eba8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ebaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebac:	2200      	movs	r2, #0
 800ebae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ebb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3750      	adds	r7, #80	; 0x50
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ebbe:	bf00      	nop
 800ebc0:	08027a74 	.word	0x08027a74

0800ebc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd0:	f003 0308 	and.w	r3, r3, #8
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00a      	beq.n	800ebee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	430a      	orrs	r2, r1
 800ebec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf2:	f003 0301 	and.w	r3, r3, #1
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00a      	beq.n	800ec10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	430a      	orrs	r2, r1
 800ec0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec14:	f003 0302 	and.w	r3, r3, #2
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00a      	beq.n	800ec32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec36:	f003 0304 	and.w	r3, r3, #4
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00a      	beq.n	800ec54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	430a      	orrs	r2, r1
 800ec52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec58:	f003 0310 	and.w	r3, r3, #16
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00a      	beq.n	800ec76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	430a      	orrs	r2, r1
 800ec74:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7a:	f003 0320 	and.w	r3, r3, #32
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00a      	beq.n	800ec98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	430a      	orrs	r2, r1
 800ec96:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d01a      	beq.n	800ecda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	430a      	orrs	r2, r1
 800ecb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecc2:	d10a      	bne.n	800ecda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	430a      	orrs	r2, r1
 800ecd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	430a      	orrs	r2, r1
 800ecfa:	605a      	str	r2, [r3, #4]
  }
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b098      	sub	sp, #96	; 0x60
 800ed0c:	af02      	add	r7, sp, #8
 800ed0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed18:	f7f5 f988 	bl	800402c <HAL_GetTick>
 800ed1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f003 0308 	and.w	r3, r3, #8
 800ed28:	2b08      	cmp	r3, #8
 800ed2a:	d12f      	bne.n	800ed8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed34:	2200      	movs	r2, #0
 800ed36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f88e 	bl	800ee5c <UART_WaitOnFlagUntilTimeout>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d022      	beq.n	800ed8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4e:	e853 3f00 	ldrex	r3, [r3]
 800ed52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed5a:	653b      	str	r3, [r7, #80]	; 0x50
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	461a      	mov	r2, r3
 800ed62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed64:	647b      	str	r3, [r7, #68]	; 0x44
 800ed66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed6c:	e841 2300 	strex	r3, r2, [r1]
 800ed70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1e6      	bne.n	800ed46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2220      	movs	r2, #32
 800ed7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed88:	2303      	movs	r3, #3
 800ed8a:	e063      	b.n	800ee54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f003 0304 	and.w	r3, r3, #4
 800ed96:	2b04      	cmp	r3, #4
 800ed98:	d149      	bne.n	800ee2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eda2:	2200      	movs	r2, #0
 800eda4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 f857 	bl	800ee5c <UART_WaitOnFlagUntilTimeout>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d03c      	beq.n	800ee2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbc:	e853 3f00 	ldrex	r3, [r3]
 800edc0:	623b      	str	r3, [r7, #32]
   return(result);
 800edc2:	6a3b      	ldr	r3, [r7, #32]
 800edc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edd2:	633b      	str	r3, [r7, #48]	; 0x30
 800edd4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edda:	e841 2300 	strex	r3, r2, [r1]
 800edde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ede0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1e6      	bne.n	800edb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	3308      	adds	r3, #8
 800edec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	e853 3f00 	ldrex	r3, [r3]
 800edf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f023 0301 	bic.w	r3, r3, #1
 800edfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	3308      	adds	r3, #8
 800ee04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee06:	61fa      	str	r2, [r7, #28]
 800ee08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0a:	69b9      	ldr	r1, [r7, #24]
 800ee0c:	69fa      	ldr	r2, [r7, #28]
 800ee0e:	e841 2300 	strex	r3, r2, [r1]
 800ee12:	617b      	str	r3, [r7, #20]
   return(result);
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1e5      	bne.n	800ede6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2220      	movs	r2, #32
 800ee1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee2a:	2303      	movs	r3, #3
 800ee2c:	e012      	b.n	800ee54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2220      	movs	r2, #32
 800ee32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2220      	movs	r2, #32
 800ee3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3758      	adds	r7, #88	; 0x58
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	603b      	str	r3, [r7, #0]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee6c:	e049      	b.n	800ef02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee74:	d045      	beq.n	800ef02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee76:	f7f5 f8d9 	bl	800402c <HAL_GetTick>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	1ad3      	subs	r3, r2, r3
 800ee80:	69ba      	ldr	r2, [r7, #24]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d302      	bcc.n	800ee8c <UART_WaitOnFlagUntilTimeout+0x30>
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d101      	bne.n	800ee90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee8c:	2303      	movs	r3, #3
 800ee8e:	e048      	b.n	800ef22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f003 0304 	and.w	r3, r3, #4
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d031      	beq.n	800ef02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	69db      	ldr	r3, [r3, #28]
 800eea4:	f003 0308 	and.w	r3, r3, #8
 800eea8:	2b08      	cmp	r3, #8
 800eeaa:	d110      	bne.n	800eece <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2208      	movs	r2, #8
 800eeb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eeb4:	68f8      	ldr	r0, [r7, #12]
 800eeb6:	f000 f95b 	bl	800f170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2208      	movs	r2, #8
 800eebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e029      	b.n	800ef22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eedc:	d111      	bne.n	800ef02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f000 f941 	bl	800f170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2220      	movs	r2, #32
 800eef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eefe:	2303      	movs	r3, #3
 800ef00:	e00f      	b.n	800ef22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	69da      	ldr	r2, [r3, #28]
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	68ba      	ldr	r2, [r7, #8]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	bf0c      	ite	eq
 800ef12:	2301      	moveq	r3, #1
 800ef14:	2300      	movne	r3, #0
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	461a      	mov	r2, r3
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d0a6      	beq.n	800ee6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b0a3      	sub	sp, #140	; 0x8c
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	4613      	mov	r3, r2
 800ef38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	88fa      	ldrh	r2, [r7, #6]
 800ef44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	88fa      	ldrh	r2, [r7, #6]
 800ef4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2200      	movs	r2, #0
 800ef54:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef5e:	d10e      	bne.n	800ef7e <UART_Start_Receive_IT+0x52>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d105      	bne.n	800ef74 <UART_Start_Receive_IT+0x48>
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef72:	e02d      	b.n	800efd0 <UART_Start_Receive_IT+0xa4>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	22ff      	movs	r2, #255	; 0xff
 800ef78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef7c:	e028      	b.n	800efd0 <UART_Start_Receive_IT+0xa4>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10d      	bne.n	800efa2 <UART_Start_Receive_IT+0x76>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	691b      	ldr	r3, [r3, #16]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d104      	bne.n	800ef98 <UART_Start_Receive_IT+0x6c>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	22ff      	movs	r2, #255	; 0xff
 800ef92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef96:	e01b      	b.n	800efd0 <UART_Start_Receive_IT+0xa4>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	227f      	movs	r2, #127	; 0x7f
 800ef9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efa0:	e016      	b.n	800efd0 <UART_Start_Receive_IT+0xa4>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800efaa:	d10d      	bne.n	800efc8 <UART_Start_Receive_IT+0x9c>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d104      	bne.n	800efbe <UART_Start_Receive_IT+0x92>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	227f      	movs	r2, #127	; 0x7f
 800efb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efbc:	e008      	b.n	800efd0 <UART_Start_Receive_IT+0xa4>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	223f      	movs	r2, #63	; 0x3f
 800efc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efc6:	e003      	b.n	800efd0 <UART_Start_Receive_IT+0xa4>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2222      	movs	r2, #34	; 0x22
 800efdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	3308      	adds	r3, #8
 800efe6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efea:	e853 3f00 	ldrex	r3, [r3]
 800efee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800eff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eff2:	f043 0301 	orr.w	r3, r3, #1
 800eff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	3308      	adds	r3, #8
 800f000:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f004:	673a      	str	r2, [r7, #112]	; 0x70
 800f006:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f008:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f00a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f00c:	e841 2300 	strex	r3, r2, [r1]
 800f010:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f014:	2b00      	cmp	r3, #0
 800f016:	d1e3      	bne.n	800efe0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f01c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f020:	d14f      	bne.n	800f0c2 <UART_Start_Receive_IT+0x196>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f028:	88fa      	ldrh	r2, [r7, #6]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d349      	bcc.n	800f0c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f036:	d107      	bne.n	800f048 <UART_Start_Receive_IT+0x11c>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d103      	bne.n	800f048 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	4a47      	ldr	r2, [pc, #284]	; (800f160 <UART_Start_Receive_IT+0x234>)
 800f044:	675a      	str	r2, [r3, #116]	; 0x74
 800f046:	e002      	b.n	800f04e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	4a46      	ldr	r2, [pc, #280]	; (800f164 <UART_Start_Receive_IT+0x238>)
 800f04c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d01a      	beq.n	800f08c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f05e:	e853 3f00 	ldrex	r3, [r3]
 800f062:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f06a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	461a      	mov	r2, r3
 800f074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f07a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f07e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f080:	e841 2300 	strex	r3, r2, [r1]
 800f084:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1e4      	bne.n	800f056 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	3308      	adds	r3, #8
 800f092:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f096:	e853 3f00 	ldrex	r3, [r3]
 800f09a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3308      	adds	r3, #8
 800f0aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0ac:	64ba      	str	r2, [r7, #72]	; 0x48
 800f0ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0b4:	e841 2300 	strex	r3, r2, [r1]
 800f0b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e5      	bne.n	800f08c <UART_Start_Receive_IT+0x160>
 800f0c0:	e046      	b.n	800f150 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0ca:	d107      	bne.n	800f0dc <UART_Start_Receive_IT+0x1b0>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	691b      	ldr	r3, [r3, #16]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d103      	bne.n	800f0dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	4a24      	ldr	r2, [pc, #144]	; (800f168 <UART_Start_Receive_IT+0x23c>)
 800f0d8:	675a      	str	r2, [r3, #116]	; 0x74
 800f0da:	e002      	b.n	800f0e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	4a23      	ldr	r2, [pc, #140]	; (800f16c <UART_Start_Receive_IT+0x240>)
 800f0e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d019      	beq.n	800f11e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	e853 3f00 	ldrex	r3, [r3]
 800f0f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f0fe:	677b      	str	r3, [r7, #116]	; 0x74
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	461a      	mov	r2, r3
 800f106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f108:	637b      	str	r3, [r7, #52]	; 0x34
 800f10a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f110:	e841 2300 	strex	r3, r2, [r1]
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1e6      	bne.n	800f0ea <UART_Start_Receive_IT+0x1be>
 800f11c:	e018      	b.n	800f150 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	e853 3f00 	ldrex	r3, [r3]
 800f12a:	613b      	str	r3, [r7, #16]
   return(result);
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	f043 0320 	orr.w	r3, r3, #32
 800f132:	67bb      	str	r3, [r7, #120]	; 0x78
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	461a      	mov	r2, r3
 800f13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f13c:	623b      	str	r3, [r7, #32]
 800f13e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f140:	69f9      	ldr	r1, [r7, #28]
 800f142:	6a3a      	ldr	r2, [r7, #32]
 800f144:	e841 2300 	strex	r3, r2, [r1]
 800f148:	61bb      	str	r3, [r7, #24]
   return(result);
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1e6      	bne.n	800f11e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f150:	2300      	movs	r3, #0
}
 800f152:	4618      	mov	r0, r3
 800f154:	378c      	adds	r7, #140	; 0x8c
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	0800f9b9 	.word	0x0800f9b9
 800f164:	0800f649 	.word	0x0800f649
 800f168:	0800f485 	.word	0x0800f485
 800f16c:	0800f2c1 	.word	0x0800f2c1

0800f170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f170:	b480      	push	{r7}
 800f172:	b095      	sub	sp, #84	; 0x54
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f180:	e853 3f00 	ldrex	r3, [r3]
 800f184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f18c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	461a      	mov	r2, r3
 800f194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f196:	643b      	str	r3, [r7, #64]	; 0x40
 800f198:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f19a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f19c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f19e:	e841 2300 	strex	r3, r2, [r1]
 800f1a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1e6      	bne.n	800f178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	3308      	adds	r3, #8
 800f1b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b2:	6a3b      	ldr	r3, [r7, #32]
 800f1b4:	e853 3f00 	ldrex	r3, [r3]
 800f1b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1c0:	f023 0301 	bic.w	r3, r3, #1
 800f1c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	3308      	adds	r3, #8
 800f1cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1d6:	e841 2300 	strex	r3, r2, [r1]
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1e3      	bne.n	800f1aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d118      	bne.n	800f21c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	e853 3f00 	ldrex	r3, [r3]
 800f1f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	f023 0310 	bic.w	r3, r3, #16
 800f1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	461a      	mov	r2, r3
 800f206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f208:	61bb      	str	r3, [r7, #24]
 800f20a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f20c:	6979      	ldr	r1, [r7, #20]
 800f20e:	69ba      	ldr	r2, [r7, #24]
 800f210:	e841 2300 	strex	r3, r2, [r1]
 800f214:	613b      	str	r3, [r7, #16]
   return(result);
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d1e6      	bne.n	800f1ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2220      	movs	r2, #32
 800f220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f230:	bf00      	nop
 800f232:	3754      	adds	r7, #84	; 0x54
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f248:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2200      	movs	r2, #0
 800f256:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f7ff faae 	bl	800e7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f260:	bf00      	nop
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b088      	sub	sp, #32
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	e853 3f00 	ldrex	r3, [r3]
 800f27c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f284:	61fb      	str	r3, [r7, #28]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	461a      	mov	r2, r3
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	61bb      	str	r3, [r7, #24]
 800f290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f292:	6979      	ldr	r1, [r7, #20]
 800f294:	69ba      	ldr	r2, [r7, #24]
 800f296:	e841 2300 	strex	r3, r2, [r1]
 800f29a:	613b      	str	r3, [r7, #16]
   return(result);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1e6      	bne.n	800f270 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2220      	movs	r2, #32
 800f2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7ff fa79 	bl	800e7a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2b6:	bf00      	nop
 800f2b8:	3720      	adds	r7, #32
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b09c      	sub	sp, #112	; 0x70
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2d8:	2b22      	cmp	r3, #34	; 0x22
 800f2da:	f040 80c3 	bne.w	800f464 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f2e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f2ec:	b2d9      	uxtb	r1, r3
 800f2ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f2f2:	b2da      	uxtb	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2f8:	400a      	ands	r2, r1
 800f2fa:	b2d2      	uxtb	r2, r2
 800f2fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f30e:	b29b      	uxth	r3, r3
 800f310:	3b01      	subs	r3, #1
 800f312:	b29a      	uxth	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f320:	b29b      	uxth	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	f040 80a6 	bne.w	800f474 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f330:	e853 3f00 	ldrex	r3, [r3]
 800f334:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f33c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f346:	65bb      	str	r3, [r7, #88]	; 0x58
 800f348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f34c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f34e:	e841 2300 	strex	r3, r2, [r1]
 800f352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1e6      	bne.n	800f328 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3308      	adds	r3, #8
 800f360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f364:	e853 3f00 	ldrex	r3, [r3]
 800f368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36c:	f023 0301 	bic.w	r3, r3, #1
 800f370:	667b      	str	r3, [r7, #100]	; 0x64
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3308      	adds	r3, #8
 800f378:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f37a:	647a      	str	r2, [r7, #68]	; 0x44
 800f37c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f382:	e841 2300 	strex	r3, r2, [r1]
 800f386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d1e5      	bne.n	800f35a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2220      	movs	r2, #32
 800f392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a35      	ldr	r2, [pc, #212]	; (800f47c <UART_RxISR_8BIT+0x1bc>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d024      	beq.n	800f3f6 <UART_RxISR_8BIT+0x136>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a33      	ldr	r2, [pc, #204]	; (800f480 <UART_RxISR_8BIT+0x1c0>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d01f      	beq.n	800f3f6 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d018      	beq.n	800f3f6 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	e853 3f00 	ldrex	r3, [r3]
 800f3d0:	623b      	str	r3, [r7, #32]
   return(result);
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f3d8:	663b      	str	r3, [r7, #96]	; 0x60
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3e2:	633b      	str	r3, [r7, #48]	; 0x30
 800f3e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ea:	e841 2300 	strex	r3, r2, [r1]
 800f3ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1e6      	bne.n	800f3c4 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d12e      	bne.n	800f45c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	e853 3f00 	ldrex	r3, [r3]
 800f410:	60fb      	str	r3, [r7, #12]
   return(result);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f023 0310 	bic.w	r3, r3, #16
 800f418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	461a      	mov	r2, r3
 800f420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f422:	61fb      	str	r3, [r7, #28]
 800f424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f426:	69b9      	ldr	r1, [r7, #24]
 800f428:	69fa      	ldr	r2, [r7, #28]
 800f42a:	e841 2300 	strex	r3, r2, [r1]
 800f42e:	617b      	str	r3, [r7, #20]
   return(result);
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1e6      	bne.n	800f404 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	69db      	ldr	r3, [r3, #28]
 800f43c:	f003 0310 	and.w	r3, r3, #16
 800f440:	2b10      	cmp	r3, #16
 800f442:	d103      	bne.n	800f44c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2210      	movs	r2, #16
 800f44a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f452:	4619      	mov	r1, r3
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7ff f9bb 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f45a:	e00b      	b.n	800f474 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7f4 fcaf 	bl	8003dc0 <HAL_UART_RxCpltCallback>
}
 800f462:	e007      	b.n	800f474 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	699a      	ldr	r2, [r3, #24]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f042 0208 	orr.w	r2, r2, #8
 800f472:	619a      	str	r2, [r3, #24]
}
 800f474:	bf00      	nop
 800f476:	3770      	adds	r7, #112	; 0x70
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	44002400 	.word	0x44002400
 800f480:	54002400 	.word	0x54002400

0800f484 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b09c      	sub	sp, #112	; 0x70
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f492:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f49c:	2b22      	cmp	r3, #34	; 0x22
 800f49e:	f040 80c3 	bne.w	800f628 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4b0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f4b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f4b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	b29a      	uxth	r2, r3
 800f4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4c6:	1c9a      	adds	r2, r3, #2
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f040 80a6 	bne.w	800f638 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4f4:	e853 3f00 	ldrex	r3, [r3]
 800f4f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f500:	667b      	str	r3, [r7, #100]	; 0x64
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	461a      	mov	r2, r3
 800f508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f50a:	657b      	str	r3, [r7, #84]	; 0x54
 800f50c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f512:	e841 2300 	strex	r3, r2, [r1]
 800f516:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1e6      	bne.n	800f4ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3308      	adds	r3, #8
 800f524:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f528:	e853 3f00 	ldrex	r3, [r3]
 800f52c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f530:	f023 0301 	bic.w	r3, r3, #1
 800f534:	663b      	str	r3, [r7, #96]	; 0x60
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	3308      	adds	r3, #8
 800f53c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f53e:	643a      	str	r2, [r7, #64]	; 0x40
 800f540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f546:	e841 2300 	strex	r3, r2, [r1]
 800f54a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1e5      	bne.n	800f51e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2220      	movs	r2, #32
 800f556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a35      	ldr	r2, [pc, #212]	; (800f640 <UART_RxISR_16BIT+0x1bc>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d024      	beq.n	800f5ba <UART_RxISR_16BIT+0x136>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a33      	ldr	r2, [pc, #204]	; (800f644 <UART_RxISR_16BIT+0x1c0>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d01f      	beq.n	800f5ba <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f584:	2b00      	cmp	r3, #0
 800f586:	d018      	beq.n	800f5ba <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f58e:	6a3b      	ldr	r3, [r7, #32]
 800f590:	e853 3f00 	ldrex	r3, [r3]
 800f594:	61fb      	str	r3, [r7, #28]
   return(result);
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f59c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ae:	e841 2300 	strex	r3, r2, [r1]
 800f5b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1e6      	bne.n	800f588 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d12e      	bne.n	800f620 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	e853 3f00 	ldrex	r3, [r3]
 800f5d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	f023 0310 	bic.w	r3, r3, #16
 800f5dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5e6:	61bb      	str	r3, [r7, #24]
 800f5e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ea:	6979      	ldr	r1, [r7, #20]
 800f5ec:	69ba      	ldr	r2, [r7, #24]
 800f5ee:	e841 2300 	strex	r3, r2, [r1]
 800f5f2:	613b      	str	r3, [r7, #16]
   return(result);
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1e6      	bne.n	800f5c8 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	69db      	ldr	r3, [r3, #28]
 800f600:	f003 0310 	and.w	r3, r3, #16
 800f604:	2b10      	cmp	r3, #16
 800f606:	d103      	bne.n	800f610 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2210      	movs	r2, #16
 800f60e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff f8d9 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f61e:	e00b      	b.n	800f638 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7f4 fbcd 	bl	8003dc0 <HAL_UART_RxCpltCallback>
}
 800f626:	e007      	b.n	800f638 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	699a      	ldr	r2, [r3, #24]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f042 0208 	orr.w	r2, r2, #8
 800f636:	619a      	str	r2, [r3, #24]
}
 800f638:	bf00      	nop
 800f63a:	3770      	adds	r7, #112	; 0x70
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	44002400 	.word	0x44002400
 800f644:	54002400 	.word	0x54002400

0800f648 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b0ac      	sub	sp, #176	; 0xb0
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f656:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	69db      	ldr	r3, [r3, #28]
 800f660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f67e:	2b22      	cmp	r3, #34	; 0x22
 800f680:	f040 8187 	bne.w	800f992 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f68a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f68e:	e12a      	b.n	800f8e6 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f69a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f69e:	b2d9      	uxtb	r1, r3
 800f6a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6aa:	400a      	ands	r2, r1
 800f6ac:	b2d2      	uxtb	r2, r2
 800f6ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6b4:	1c5a      	adds	r2, r3, #1
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	3b01      	subs	r3, #1
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	69db      	ldr	r3, [r3, #28]
 800f6d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f6d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f6da:	f003 0307 	and.w	r3, r3, #7
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d053      	beq.n	800f78a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d011      	beq.n	800f712 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f6f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00b      	beq.n	800f712 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2201      	movs	r2, #1
 800f700:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f708:	f043 0201 	orr.w	r2, r3, #1
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f716:	f003 0302 	and.w	r3, r3, #2
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d011      	beq.n	800f742 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f71e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00b      	beq.n	800f742 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	2202      	movs	r2, #2
 800f730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f738:	f043 0204 	orr.w	r2, r3, #4
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f746:	f003 0304 	and.w	r3, r3, #4
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d011      	beq.n	800f772 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f74e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f752:	f003 0301 	and.w	r3, r3, #1
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00b      	beq.n	800f772 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2204      	movs	r2, #4
 800f760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f768:	f043 0202 	orr.w	r2, r3, #2
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d006      	beq.n	800f78a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f7ff f81d 	bl	800e7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f790:	b29b      	uxth	r3, r3
 800f792:	2b00      	cmp	r3, #0
 800f794:	f040 80a7 	bne.w	800f8e6 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7a0:	e853 3f00 	ldrex	r3, [r3]
 800f7a4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f7ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f7bc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f7c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f7c2:	e841 2300 	strex	r3, r2, [r1]
 800f7c6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f7c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1e4      	bne.n	800f798 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3308      	adds	r3, #8
 800f7d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7d8:	e853 3f00 	ldrex	r3, [r3]
 800f7dc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f7de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7e4:	f023 0301 	bic.w	r3, r3, #1
 800f7e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	3308      	adds	r3, #8
 800f7f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f7f6:	66ba      	str	r2, [r7, #104]	; 0x68
 800f7f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f7fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7fe:	e841 2300 	strex	r3, r2, [r1]
 800f802:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1e1      	bne.n	800f7ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2220      	movs	r2, #32
 800f80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2200      	movs	r2, #0
 800f816:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a62      	ldr	r2, [pc, #392]	; (800f9ac <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d026      	beq.n	800f876 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4a60      	ldr	r2, [pc, #384]	; (800f9b0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d021      	beq.n	800f876 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d01a      	beq.n	800f876 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f848:	e853 3f00 	ldrex	r3, [r3]
 800f84c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f850:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	461a      	mov	r2, r3
 800f85e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f862:	657b      	str	r3, [r7, #84]	; 0x54
 800f864:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f866:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f86a:	e841 2300 	strex	r3, r2, [r1]
 800f86e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1e4      	bne.n	800f840 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d130      	bne.n	800f8e0 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88c:	e853 3f00 	ldrex	r3, [r3]
 800f890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f894:	f023 0310 	bic.w	r3, r3, #16
 800f898:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f8a6:	643b      	str	r3, [r7, #64]	; 0x40
 800f8a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8ae:	e841 2300 	strex	r3, r2, [r1]
 800f8b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1e4      	bne.n	800f884 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	69db      	ldr	r3, [r3, #28]
 800f8c0:	f003 0310 	and.w	r3, r3, #16
 800f8c4:	2b10      	cmp	r3, #16
 800f8c6:	d103      	bne.n	800f8d0 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2210      	movs	r2, #16
 800f8ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7fe ff79 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
 800f8de:	e002      	b.n	800f8e6 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7f4 fa6d 	bl	8003dc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8e6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d006      	beq.n	800f8fc <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800f8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f8f2:	f003 0320 	and.w	r3, r3, #32
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f47f aeca 	bne.w	800f690 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f902:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f906:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d049      	beq.n	800f9a2 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f914:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f918:	429a      	cmp	r2, r3
 800f91a:	d242      	bcs.n	800f9a2 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	3308      	adds	r3, #8
 800f922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f924:	6a3b      	ldr	r3, [r7, #32]
 800f926:	e853 3f00 	ldrex	r3, [r3]
 800f92a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	3308      	adds	r3, #8
 800f93c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f940:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f948:	e841 2300 	strex	r3, r2, [r1]
 800f94c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1e3      	bne.n	800f91c <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a17      	ldr	r2, [pc, #92]	; (800f9b4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800f958:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	e853 3f00 	ldrex	r3, [r3]
 800f966:	60bb      	str	r3, [r7, #8]
   return(result);
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	f043 0320 	orr.w	r3, r3, #32
 800f96e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f97c:	61bb      	str	r3, [r7, #24]
 800f97e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f980:	6979      	ldr	r1, [r7, #20]
 800f982:	69ba      	ldr	r2, [r7, #24]
 800f984:	e841 2300 	strex	r3, r2, [r1]
 800f988:	613b      	str	r3, [r7, #16]
   return(result);
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1e4      	bne.n	800f95a <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f990:	e007      	b.n	800f9a2 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	699a      	ldr	r2, [r3, #24]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f042 0208 	orr.w	r2, r2, #8
 800f9a0:	619a      	str	r2, [r3, #24]
}
 800f9a2:	bf00      	nop
 800f9a4:	37b0      	adds	r7, #176	; 0xb0
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	44002400 	.word	0x44002400
 800f9b0:	54002400 	.word	0x54002400
 800f9b4:	0800f2c1 	.word	0x0800f2c1

0800f9b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b0ae      	sub	sp, #184	; 0xb8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	69db      	ldr	r3, [r3, #28]
 800f9d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9ee:	2b22      	cmp	r3, #34	; 0x22
 800f9f0:	f040 818b 	bne.w	800fd0a <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9fe:	e12e      	b.n	800fc5e <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa06:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fa12:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fa16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800fa1a:	4013      	ands	r3, r2
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa28:	1c9a      	adds	r2, r3, #2
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	3b01      	subs	r3, #1
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fa4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa4e:	f003 0307 	and.w	r3, r3, #7
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d053      	beq.n	800fafe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d011      	beq.n	800fa86 <UART_RxISR_16BIT_FIFOEN+0xce>
 800fa62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00b      	beq.n	800fa86 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2201      	movs	r2, #1
 800fa74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa7c:	f043 0201 	orr.w	r2, r3, #1
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa8a:	f003 0302 	and.w	r3, r3, #2
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d011      	beq.n	800fab6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fa92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa96:	f003 0301 	and.w	r3, r3, #1
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00b      	beq.n	800fab6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2202      	movs	r2, #2
 800faa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faac:	f043 0204 	orr.w	r2, r3, #4
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800faba:	f003 0304 	and.w	r3, r3, #4
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d011      	beq.n	800fae6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fac6:	f003 0301 	and.w	r3, r3, #1
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00b      	beq.n	800fae6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2204      	movs	r2, #4
 800fad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fadc:	f043 0202 	orr.w	r2, r3, #2
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faec:	2b00      	cmp	r3, #0
 800faee:	d006      	beq.n	800fafe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7fe fe63 	bl	800e7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f040 80a9 	bne.w	800fc5e <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb14:	e853 3f00 	ldrex	r3, [r3]
 800fb18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fb1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb32:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fb36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb3a:	e841 2300 	strex	r3, r2, [r1]
 800fb3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fb40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1e2      	bne.n	800fb0c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb50:	e853 3f00 	ldrex	r3, [r3]
 800fb54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fb56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb5c:	f023 0301 	bic.w	r3, r3, #1
 800fb60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3308      	adds	r3, #8
 800fb6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fb6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fb70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fb74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fb7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e1      	bne.n	800fb46 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2220      	movs	r2, #32
 800fb86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4a62      	ldr	r2, [pc, #392]	; (800fd24 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d026      	beq.n	800fbee <UART_RxISR_16BIT_FIFOEN+0x236>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a60      	ldr	r2, [pc, #384]	; (800fd28 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d021      	beq.n	800fbee <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d01a      	beq.n	800fbee <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbc0:	e853 3f00 	ldrex	r3, [r3]
 800fbc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fbc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fbcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbda:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbdc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbe2:	e841 2300 	strex	r3, r2, [r1]
 800fbe6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d1e4      	bne.n	800fbb8 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d130      	bne.n	800fc58 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc04:	e853 3f00 	ldrex	r3, [r3]
 800fc08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0c:	f023 0310 	bic.w	r3, r3, #16
 800fc10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc1e:	647b      	str	r3, [r7, #68]	; 0x44
 800fc20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc26:	e841 2300 	strex	r3, r2, [r1]
 800fc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1e4      	bne.n	800fbfc <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	69db      	ldr	r3, [r3, #28]
 800fc38:	f003 0310 	and.w	r3, r3, #16
 800fc3c:	2b10      	cmp	r3, #16
 800fc3e:	d103      	bne.n	800fc48 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2210      	movs	r2, #16
 800fc46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7fe fdbd 	bl	800e7d0 <HAL_UARTEx_RxEventCallback>
 800fc56:	e002      	b.n	800fc5e <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7f4 f8b1 	bl	8003dc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc5e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d006      	beq.n	800fc74 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800fc66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc6a:	f003 0320 	and.w	r3, r3, #32
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f47f aec6 	bne.w	800fa00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc7a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fc7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d049      	beq.n	800fd1a <UART_RxISR_16BIT_FIFOEN+0x362>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc8c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d242      	bcs.n	800fd1a <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	3308      	adds	r3, #8
 800fc9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9e:	e853 3f00 	ldrex	r3, [r3]
 800fca2:	623b      	str	r3, [r7, #32]
   return(result);
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fcaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	3308      	adds	r3, #8
 800fcb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fcb8:	633a      	str	r2, [r7, #48]	; 0x30
 800fcba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcc0:	e841 2300 	strex	r3, r2, [r1]
 800fcc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1e3      	bne.n	800fc94 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	4a17      	ldr	r2, [pc, #92]	; (800fd2c <UART_RxISR_16BIT_FIFOEN+0x374>)
 800fcd0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	e853 3f00 	ldrex	r3, [r3]
 800fcde:	60fb      	str	r3, [r7, #12]
   return(result);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f043 0320 	orr.w	r3, r3, #32
 800fce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fcf4:	61fb      	str	r3, [r7, #28]
 800fcf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf8:	69b9      	ldr	r1, [r7, #24]
 800fcfa:	69fa      	ldr	r2, [r7, #28]
 800fcfc:	e841 2300 	strex	r3, r2, [r1]
 800fd00:	617b      	str	r3, [r7, #20]
   return(result);
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1e4      	bne.n	800fcd2 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fd08:	e007      	b.n	800fd1a <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	699a      	ldr	r2, [r3, #24]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f042 0208 	orr.w	r2, r2, #8
 800fd18:	619a      	str	r2, [r3, #24]
}
 800fd1a:	bf00      	nop
 800fd1c:	37b8      	adds	r7, #184	; 0xb8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	44002400 	.word	0x44002400
 800fd28:	54002400 	.word	0x54002400
 800fd2c:	0800f485 	.word	0x0800f485

0800fd30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b085      	sub	sp, #20
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d101      	bne.n	800fd82 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd7e:	2302      	movs	r3, #2
 800fd80:	e027      	b.n	800fdd2 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2201      	movs	r2, #1
 800fd86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2224      	movs	r2, #36	; 0x24
 800fd8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f022 0201 	bic.w	r2, r2, #1
 800fda8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fdb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2220      	movs	r2, #32
 800fdc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3714      	adds	r7, #20
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr

0800fdde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b084      	sub	sp, #16
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
 800fde6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d101      	bne.n	800fdf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	e02d      	b.n	800fe52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2224      	movs	r2, #36	; 0x24
 800fe02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f022 0201 	bic.w	r2, r2, #1
 800fe1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	683a      	ldr	r2, [r7, #0]
 800fe2e:	430a      	orrs	r2, r1
 800fe30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 f850 	bl	800fed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2220      	movs	r2, #32
 800fe44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fe50:	2300      	movs	r3, #0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b084      	sub	sp, #16
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
 800fe62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d101      	bne.n	800fe72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe6e:	2302      	movs	r3, #2
 800fe70:	e02d      	b.n	800fece <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2201      	movs	r2, #1
 800fe76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2224      	movs	r2, #36	; 0x24
 800fe7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f022 0201 	bic.w	r2, r2, #1
 800fe98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	683a      	ldr	r2, [r7, #0]
 800feaa:	430a      	orrs	r2, r1
 800feac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f812 	bl	800fed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2220      	movs	r2, #32
 800fec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fecc:	2300      	movs	r3, #0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d108      	bne.n	800fefa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fef8:	e031      	b.n	800ff5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fefa:	2308      	movs	r3, #8
 800fefc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fefe:	2308      	movs	r3, #8
 800ff00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	0e5b      	lsrs	r3, r3, #25
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	f003 0307 	and.w	r3, r3, #7
 800ff10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	0f5b      	lsrs	r3, r3, #29
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	f003 0307 	and.w	r3, r3, #7
 800ff20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff22:	7bbb      	ldrb	r3, [r7, #14]
 800ff24:	7b3a      	ldrb	r2, [r7, #12]
 800ff26:	4911      	ldr	r1, [pc, #68]	; (800ff6c <UARTEx_SetNbDataToProcess+0x94>)
 800ff28:	5c8a      	ldrb	r2, [r1, r2]
 800ff2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff2e:	7b3a      	ldrb	r2, [r7, #12]
 800ff30:	490f      	ldr	r1, [pc, #60]	; (800ff70 <UARTEx_SetNbDataToProcess+0x98>)
 800ff32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff34:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff38:	b29a      	uxth	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff40:	7bfb      	ldrb	r3, [r7, #15]
 800ff42:	7b7a      	ldrb	r2, [r7, #13]
 800ff44:	4909      	ldr	r1, [pc, #36]	; (800ff6c <UARTEx_SetNbDataToProcess+0x94>)
 800ff46:	5c8a      	ldrb	r2, [r1, r2]
 800ff48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff4c:	7b7a      	ldrb	r2, [r7, #13]
 800ff4e:	4908      	ldr	r1, [pc, #32]	; (800ff70 <UARTEx_SetNbDataToProcess+0x98>)
 800ff50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff52:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff5e:	bf00      	nop
 800ff60:	3714      	adds	r7, #20
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop
 800ff6c:	08027a8c 	.word	0x08027a8c
 800ff70:	08027a94 	.word	0x08027a94

0800ff74 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b087      	sub	sp, #28
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
 800ff80:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800ff82:	2301      	movs	r3, #1
 800ff84:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	68ba      	ldr	r2, [r7, #8]
 800ffa2:	611a      	str	r2, [r3, #16]

  return ret;
 800ffa4:	697b      	ldr	r3, [r7, #20]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	371c      	adds	r7, #28
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800ffb2:	b480      	push	{r7}
 800ffb4:	b08b      	sub	sp, #44	; 0x2c
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	60f8      	str	r0, [r7, #12]
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	623b      	str	r3, [r7, #32]
 800ffc6:	e042      	b.n	801004e <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	68fa      	ldr	r2, [r7, #12]
 800ffd0:	6892      	ldr	r2, [r2, #8]
 800ffd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffd6:	fb01 f202 	mul.w	r2, r1, r2
 800ffda:	1a9b      	subs	r3, r3, r2
 800ffdc:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	69ba      	ldr	r2, [r7, #24]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d02c      	beq.n	8010042 <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	691b      	ldr	r3, [r3, #16]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d024      	beq.n	801003a <qbufferWrite+0x88>
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d021      	beq.n	801003a <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	691a      	ldr	r2, [r3, #16]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	68f9      	ldr	r1, [r7, #12]
 8010000:	68c9      	ldr	r1, [r1, #12]
 8010002:	fb01 f303 	mul.w	r3, r1, r3
 8010006:	4413      	add	r3, r2
 8010008:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 801000a:	2300      	movs	r3, #0
 801000c:	61fb      	str	r3, [r7, #28]
 801000e:	e00a      	b.n	8010026 <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	68ba      	ldr	r2, [r7, #8]
 8010014:	441a      	add	r2, r3
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	6979      	ldr	r1, [r7, #20]
 801001a:	440b      	add	r3, r1
 801001c:	7812      	ldrb	r2, [r2, #0]
 801001e:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	3301      	adds	r3, #1
 8010024:	61fb      	str	r3, [r7, #28]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	68da      	ldr	r2, [r3, #12]
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	429a      	cmp	r2, r3
 801002e:	d8ef      	bhi.n	8010010 <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	4413      	add	r3, r2
 8010038:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	601a      	str	r2, [r3, #0]
 8010040:	e002      	b.n	8010048 <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 8010042:	2300      	movs	r3, #0
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010046:	e006      	b.n	8010056 <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 8010048:	6a3b      	ldr	r3, [r7, #32]
 801004a:	3301      	adds	r3, #1
 801004c:	623b      	str	r3, [r7, #32]
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	429a      	cmp	r2, r3
 8010054:	d8b8      	bhi.n	800ffc8 <qbufferWrite+0x16>
    }
  }

  return ret;
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010058:	4618      	mov	r0, r3
 801005a:	372c      	adds	r7, #44	; 0x2c
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8010064:	b480      	push	{r7}
 8010066:	b089      	sub	sp, #36	; 0x24
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8010070:	2301      	movs	r3, #1
 8010072:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 8010074:	2300      	movs	r3, #0
 8010076:	61bb      	str	r3, [r7, #24]
 8010078:	e041      	b.n	80100fe <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d024      	beq.n	80100cc <qbufferRead+0x68>
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d021      	beq.n	80100cc <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	691a      	ldr	r2, [r3, #16]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	68f9      	ldr	r1, [r7, #12]
 8010092:	68c9      	ldr	r1, [r1, #12]
 8010094:	fb01 f303 	mul.w	r3, r1, r3
 8010098:	4413      	add	r3, r2
 801009a:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 801009c:	2300      	movs	r3, #0
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	e00a      	b.n	80100b8 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	693a      	ldr	r2, [r7, #16]
 80100a6:	441a      	add	r2, r3
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	68b9      	ldr	r1, [r7, #8]
 80100ac:	440b      	add	r3, r1
 80100ae:	7812      	ldrb	r2, [r2, #0]
 80100b0:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	3301      	adds	r3, #1
 80100b6:	617b      	str	r3, [r7, #20]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	68da      	ldr	r2, [r3, #12]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d8ef      	bhi.n	80100a2 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	4413      	add	r3, r2
 80100ca:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	685a      	ldr	r2, [r3, #4]
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d00c      	beq.n	80100f2 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	3301      	adds	r3, #1
 80100de:	68fa      	ldr	r2, [r7, #12]
 80100e0:	6892      	ldr	r2, [r2, #8]
 80100e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80100e6:	fb01 f202 	mul.w	r2, r1, r2
 80100ea:	1a9a      	subs	r2, r3, r2
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	605a      	str	r2, [r3, #4]
 80100f0:	e002      	b.n	80100f8 <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 80100f2:	2300      	movs	r3, #0
 80100f4:	61fb      	str	r3, [r7, #28]
      break;
 80100f6:	e006      	b.n	8010106 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	3301      	adds	r3, #1
 80100fc:	61bb      	str	r3, [r7, #24]
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	429a      	cmp	r2, r3
 8010104:	d8b9      	bhi.n	801007a <qbufferRead+0x16>
    }
  }

  return ret;
 8010106:	69fb      	ldr	r3, [r7, #28]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3724      	adds	r7, #36	; 0x24
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	691a      	ldr	r2, [r3, #16]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	6879      	ldr	r1, [r7, #4]
 8010126:	68c9      	ldr	r1, [r1, #12]
 8010128:	fb01 f303 	mul.w	r3, r1, r3
 801012c:	4413      	add	r3, r2
}
 801012e:	4618      	mov	r0, r3
 8010130:	370c      	adds	r7, #12
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr

0801013a <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 801013a:	b480      	push	{r7}
 801013c:	b085      	sub	sp, #20
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	6892      	ldr	r2, [r2, #8]
 8010150:	fbb3 f1f2 	udiv	r1, r3, r2
 8010154:	fb01 f202 	mul.w	r2, r1, r2
 8010158:	1a9b      	subs	r3, r3, r2
 801015a:	60fb      	str	r3, [r7, #12]

  return ret;
 801015c:	68fb      	ldr	r3, [r7, #12]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3714      	adds	r7, #20
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr
	...

0801016c <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
  svGetChar = funcGetChar;
 8010178:	4a18      	ldr	r2, [pc, #96]	; (80101dc <svCLI_Init+0x70>)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6013      	str	r3, [r2, #0]
  svPutChar = funcPutChar;
 801017e:	4a18      	ldr	r2, [pc, #96]	; (80101e0 <svCLI_Init+0x74>)
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	6013      	str	r3, [r2, #0]
  svCommit = funcCommit;
 8010184:	4a17      	ldr	r2, [pc, #92]	; (80101e4 <svCLI_Init+0x78>)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6013      	str	r3, [r2, #0]
  szCLIString[0] = 0;
 801018a:	4b17      	ldr	r3, [pc, #92]	; (80101e8 <svCLI_Init+0x7c>)
 801018c:	2200      	movs	r2, #0
 801018e:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 8010190:	4b16      	ldr	r3, [pc, #88]	; (80101ec <svCLI_Init+0x80>)
 8010192:	4a17      	ldr	r2, [pc, #92]	; (80101f0 <svCLI_Init+0x84>)
 8010194:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 8010196:	4b17      	ldr	r3, [pc, #92]	; (80101f4 <svCLI_Init+0x88>)
 8010198:	4a17      	ldr	r2, [pc, #92]	; (80101f8 <svCLI_Init+0x8c>)
 801019a:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 801019c:	4b17      	ldr	r3, [pc, #92]	; (80101fc <svCLI_Init+0x90>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00d      	beq.n	80101c0 <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 80101a4:	4b16      	ldr	r3, [pc, #88]	; (8010200 <svCLI_Init+0x94>)
 80101a6:	4a17      	ldr	r2, [pc, #92]	; (8010204 <svCLI_Init+0x98>)
 80101a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101ac:	6018      	str	r0, [r3, #0]
 80101ae:	3304      	adds	r3, #4
 80101b0:	8019      	strh	r1, [r3, #0]
 80101b2:	3302      	adds	r3, #2
 80101b4:	0c0a      	lsrs	r2, r1, #16
 80101b6:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 80101b8:	4b13      	ldr	r3, [pc, #76]	; (8010208 <svCLI_Init+0x9c>)
 80101ba:	2206      	movs	r2, #6
 80101bc:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 80101be:	e007      	b.n	80101d0 <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 80101c0:	4b0f      	ldr	r3, [pc, #60]	; (8010200 <svCLI_Init+0x94>)
 80101c2:	4a12      	ldr	r2, [pc, #72]	; (801020c <svCLI_Init+0xa0>)
 80101c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80101c6:	c303      	stmia	r3!, {r0, r1}
 80101c8:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 80101ca:	4b0f      	ldr	r3, [pc, #60]	; (8010208 <svCLI_Init+0x9c>)
 80101cc:	2209      	movs	r2, #9
 80101ce:	601a      	str	r2, [r3, #0]
}
 80101d0:	bf00      	nop
 80101d2:	3714      	adds	r7, #20
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	4770      	bx	lr
 80101dc:	20055924 	.word	0x20055924
 80101e0:	20055928 	.word	0x20055928
 80101e4:	2005592c 	.word	0x2005592c
 80101e8:	20055710 	.word	0x20055710
 80101ec:	2005591c 	.word	0x2005591c
 80101f0:	08023f0c 	.word	0x08023f0c
 80101f4:	20055920 	.word	0x20055920
 80101f8:	08023f3c 	.word	0x08023f3c
 80101fc:	20050064 	.word	0x20050064
 8010200:	20050068 	.word	0x20050068
 8010204:	08024270 	.word	0x08024270
 8010208:	20050074 	.word	0x20050074
 801020c:	08024278 	.word	0x08024278

08010210 <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 8010210:	b40f      	push	{r0, r1, r2, r3}
 8010212:	b580      	push	{r7, lr}
 8010214:	b084      	sub	sp, #16
 8010216:	af00      	add	r7, sp, #0
static char msg[256];
  va_list ap;
  int len;

  va_start(ap, fmt);
 8010218:	f107 031c 	add.w	r3, r7, #28
 801021c:	607b      	str	r3, [r7, #4]
  len = vsprintf(msg, fmt, ap);
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	69b9      	ldr	r1, [r7, #24]
 8010222:	480f      	ldr	r0, [pc, #60]	; (8010260 <svCLI_Printf+0x50>)
 8010224:	f012 fe8c 	bl	8022f40 <vsiprintf>
 8010228:	60b8      	str	r0, [r7, #8]
  va_end(ap);
  for (int i=0;i<len;i++) {
 801022a:	2300      	movs	r3, #0
 801022c:	60fb      	str	r3, [r7, #12]
 801022e:	e00a      	b.n	8010246 <svCLI_Printf+0x36>
    svPutChar(msg[i]);
 8010230:	4b0c      	ldr	r3, [pc, #48]	; (8010264 <svCLI_Printf+0x54>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	490a      	ldr	r1, [pc, #40]	; (8010260 <svCLI_Printf+0x50>)
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	440a      	add	r2, r1
 801023a:	7812      	ldrb	r2, [r2, #0]
 801023c:	4610      	mov	r0, r2
 801023e:	4798      	blx	r3
  for (int i=0;i<len;i++) {
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	3301      	adds	r3, #1
 8010244:	60fb      	str	r3, [r7, #12]
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	429a      	cmp	r2, r3
 801024c:	dbf0      	blt.n	8010230 <svCLI_Printf+0x20>
  }
  return len;
 801024e:	68bb      	ldr	r3, [r7, #8]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801025a:	b004      	add	sp, #16
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	2005593c 	.word	0x2005593c
 8010264:	20055928 	.word	0x20055928

08010268 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
  if (svPutChar) {
 801026e:	4b2d      	ldr	r3, [pc, #180]	; (8010324 <svCLI_ShowHelp+0xbc>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d04a      	beq.n	801030c <svCLI_ShowHelp+0xa4>
    if (sCLITableBegin != sCLITablEnd) {
 8010276:	4b2c      	ldr	r3, [pc, #176]	; (8010328 <svCLI_ShowHelp+0xc0>)
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	4b2c      	ldr	r3, [pc, #176]	; (801032c <svCLI_ShowHelp+0xc4>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	429a      	cmp	r2, r3
 8010280:	d03e      	beq.n	8010300 <svCLI_ShowHelp+0x98>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 8010282:	2300      	movs	r3, #0
 8010284:	60fb      	str	r3, [r7, #12]
 8010286:	e006      	b.n	8010296 <svCLI_ShowHelp+0x2e>
 8010288:	4b26      	ldr	r3, [pc, #152]	; (8010324 <svCLI_ShowHelp+0xbc>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	203d      	movs	r0, #61	; 0x3d
 801028e:	4798      	blx	r3
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	3301      	adds	r3, #1
 8010294:	60fb      	str	r3, [r7, #12]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2b4f      	cmp	r3, #79	; 0x4f
 801029a:	d9f5      	bls.n	8010288 <svCLI_ShowHelp+0x20>
      svCLI_Printf("\r\n");
 801029c:	4824      	ldr	r0, [pc, #144]	; (8010330 <svCLI_ShowHelp+0xc8>)
 801029e:	f7ff ffb7 	bl	8010210 <svCLI_Printf>
      SVCLI_t* pCLIEntry;
      int nCount = 1;
 80102a2:	2301      	movs	r3, #1
 80102a4:	607b      	str	r3, [r7, #4]
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80102a6:	4b20      	ldr	r3, [pc, #128]	; (8010328 <svCLI_ShowHelp+0xc0>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	60bb      	str	r3, [r7, #8]
 80102ac:	e012      	b.n	80102d4 <svCLI_ShowHelp+0x6c>
        svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 80102ae:	6879      	ldr	r1, [r7, #4]
 80102b0:	1c4b      	adds	r3, r1, #1
 80102b2:	607b      	str	r3, [r7, #4]
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <svCLI_ShowHelp+0x5e>
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	e000      	b.n	80102c8 <svCLI_ShowHelp+0x60>
 80102c6:	4b1b      	ldr	r3, [pc, #108]	; (8010334 <svCLI_ShowHelp+0xcc>)
 80102c8:	481b      	ldr	r0, [pc, #108]	; (8010338 <svCLI_ShowHelp+0xd0>)
 80102ca:	f7ff ffa1 	bl	8010210 <svCLI_Printf>
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	330c      	adds	r3, #12
 80102d2:	60bb      	str	r3, [r7, #8]
 80102d4:	4b15      	ldr	r3, [pc, #84]	; (801032c <svCLI_ShowHelp+0xc4>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d3e7      	bcc.n	80102ae <svCLI_ShowHelp+0x46>
      }
      svCLI_Printf(AES_RESET);
 80102de:	4817      	ldr	r0, [pc, #92]	; (801033c <svCLI_ShowHelp+0xd4>)
 80102e0:	f7ff ff96 	bl	8010210 <svCLI_Printf>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 80102e4:	2300      	movs	r3, #0
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	e006      	b.n	80102f8 <svCLI_ShowHelp+0x90>
 80102ea:	4b0e      	ldr	r3, [pc, #56]	; (8010324 <svCLI_ShowHelp+0xbc>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	203d      	movs	r0, #61	; 0x3d
 80102f0:	4798      	blx	r3
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	3301      	adds	r3, #1
 80102f6:	603b      	str	r3, [r7, #0]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	2b4f      	cmp	r3, #79	; 0x4f
 80102fc:	d9f5      	bls.n	80102ea <svCLI_ShowHelp+0x82>
 80102fe:	e002      	b.n	8010306 <svCLI_ShowHelp+0x9e>
    }
    else {  // No CLI Entry
      svCLI_Printf("No CLI Entries !!!");
 8010300:	480f      	ldr	r0, [pc, #60]	; (8010340 <svCLI_ShowHelp+0xd8>)
 8010302:	f7ff ff85 	bl	8010210 <svCLI_Printf>
    }
    svCLI_Printf("\r\n");
 8010306:	480a      	ldr	r0, [pc, #40]	; (8010330 <svCLI_ShowHelp+0xc8>)
 8010308:	f7ff ff82 	bl	8010210 <svCLI_Printf>
  }
  if (svCommit) {
 801030c:	4b0d      	ldr	r3, [pc, #52]	; (8010344 <svCLI_ShowHelp+0xdc>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d002      	beq.n	801031a <svCLI_ShowHelp+0xb2>
    svCommit();
 8010314:	4b0b      	ldr	r3, [pc, #44]	; (8010344 <svCLI_ShowHelp+0xdc>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4798      	blx	r3
  }
}
 801031a:	bf00      	nop
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	20055928 	.word	0x20055928
 8010328:	2005591c 	.word	0x2005591c
 801032c:	20055920 	.word	0x20055920
 8010330:	08024284 	.word	0x08024284
 8010334:	08024288 	.word	0x08024288
 8010338:	0802428c 	.word	0x0802428c
 801033c:	080242ac 	.word	0x080242ac
 8010340:	080242b4 	.word	0x080242b4
 8010344:	2005592c 	.word	0x2005592c

08010348 <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 801034c:	2000      	movs	r0, #0
 801034e:	f7f3 fd21 	bl	8003d94 <Uart_Available>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d101      	bne.n	801035c <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 8010358:	2301      	movs	r3, #1
 801035a:	e000      	b.n	801035e <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 801035c:	2300      	movs	r3, #0
  }
}
 801035e:	4618      	mov	r0, r3
 8010360:	bd80      	pop	{r7, pc}

08010362 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 8010362:	b480      	push	{r7}
 8010364:	b085      	sub	sp, #20
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
  int nCount = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	60fb      	str	r3, [r7, #12]
  if ((szString == NULL) || (*szString == 0))
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d003      	beq.n	801037c <_strlenOffspace+0x1a>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d104      	bne.n	8010386 <_strlenOffspace+0x24>
    return 0;
 801037c:	2300      	movs	r3, #0
 801037e:	e017      	b.n	80103b0 <_strlenOffspace+0x4e>
  // Strip off first spaces
  while (*szString == ' ') szString++;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	3301      	adds	r3, #1
 8010384:	607b      	str	r3, [r7, #4]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	2b20      	cmp	r3, #32
 801038c:	d0f8      	beq.n	8010380 <_strlenOffspace+0x1e>
  // Count
  while (*szString) {
 801038e:	e008      	b.n	80103a2 <_strlenOffspace+0x40>
    if (*szString++ != ' ') {
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	1c5a      	adds	r2, r3, #1
 8010394:	607a      	str	r2, [r7, #4]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	2b20      	cmp	r3, #32
 801039a:	d007      	beq.n	80103ac <_strlenOffspace+0x4a>
      nCount++;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	3301      	adds	r3, #1
 80103a0:	60fb      	str	r3, [r7, #12]
  while (*szString) {
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1f2      	bne.n	8010390 <_strlenOffspace+0x2e>
 80103aa:	e000      	b.n	80103ae <_strlenOffspace+0x4c>
    }
    else
      break;
 80103ac:	bf00      	nop
  }
  return nCount;
 80103ae:	68fb      	ldr	r3, [r7, #12]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3714      	adds	r7, #20
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr

080103bc <_toLower>:

static char _toLower(char c)
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	4603      	mov	r3, r0
 80103c4:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 80103c6:	79fb      	ldrb	r3, [r7, #7]
 80103c8:	2b40      	cmp	r3, #64	; 0x40
 80103ca:	d905      	bls.n	80103d8 <_toLower+0x1c>
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	2b5a      	cmp	r3, #90	; 0x5a
 80103d0:	d802      	bhi.n	80103d8 <_toLower+0x1c>
    c = (c - 'A') + 'a';
 80103d2:	79fb      	ldrb	r3, [r7, #7]
 80103d4:	3320      	adds	r3, #32
 80103d6:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 80103d8:	79fb      	ldrb	r3, [r7, #7]
}
 80103da:	4618      	mov	r0, r3
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr

080103e6 <_isPrintable>:

static int _isPrintable(char c)
{
 80103e6:	b480      	push	{r7}
 80103e8:	b083      	sub	sp, #12
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	4603      	mov	r3, r0
 80103ee:	71fb      	strb	r3, [r7, #7]
  if ((' ' <= c) && (c <= '~'))
 80103f0:	79fb      	ldrb	r3, [r7, #7]
 80103f2:	2b1f      	cmp	r3, #31
 80103f4:	d904      	bls.n	8010400 <_isPrintable+0x1a>
 80103f6:	79fb      	ldrb	r3, [r7, #7]
 80103f8:	2b7e      	cmp	r3, #126	; 0x7e
 80103fa:	d801      	bhi.n	8010400 <_isPrintable+0x1a>
    return 1;
 80103fc:	2301      	movs	r3, #1
 80103fe:	e000      	b.n	8010402 <_isPrintable+0x1c>
  return 0;
 8010400:	2300      	movs	r3, #0
}
 8010402:	4618      	mov	r0, r3
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr

0801040e <_isHex>:

static int _isHex(char c)
{
 801040e:	b480      	push	{r7}
 8010410:	b083      	sub	sp, #12
 8010412:	af00      	add	r7, sp, #0
 8010414:	4603      	mov	r3, r0
 8010416:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||       \
 8010418:	79fb      	ldrb	r3, [r7, #7]
 801041a:	2b2f      	cmp	r3, #47	; 0x2f
 801041c:	d902      	bls.n	8010424 <_isHex+0x16>
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	2b39      	cmp	r3, #57	; 0x39
 8010422:	d90b      	bls.n	801043c <_isHex+0x2e>
 8010424:	79fb      	ldrb	r3, [r7, #7]
 8010426:	2b40      	cmp	r3, #64	; 0x40
 8010428:	d902      	bls.n	8010430 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||   \
 801042a:	79fb      	ldrb	r3, [r7, #7]
 801042c:	2b46      	cmp	r3, #70	; 0x46
 801042e:	d905      	bls.n	801043c <_isHex+0x2e>
 8010430:	79fb      	ldrb	r3, [r7, #7]
 8010432:	2b60      	cmp	r3, #96	; 0x60
 8010434:	d904      	bls.n	8010440 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 8010436:	79fb      	ldrb	r3, [r7, #7]
 8010438:	2b66      	cmp	r3, #102	; 0x66
 801043a:	d801      	bhi.n	8010440 <_isHex+0x32>
    return 1;
 801043c:	2301      	movs	r3, #1
 801043e:	e000      	b.n	8010442 <_isHex+0x34>
  return 0;
 8010440:	2300      	movs	r3, #0
}
 8010442:	4618      	mov	r0, r3
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <_fromHex>:

static int _fromHex(char c) 
{
 801044e:	b480      	push	{r7}
 8010450:	b085      	sub	sp, #20
 8010452:	af00      	add	r7, sp, #0
 8010454:	4603      	mov	r3, r0
 8010456:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 8010458:	2300      	movs	r3, #0
 801045a:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 801045c:	79fb      	ldrb	r3, [r7, #7]
 801045e:	2b2f      	cmp	r3, #47	; 0x2f
 8010460:	d906      	bls.n	8010470 <_fromHex+0x22>
 8010462:	79fb      	ldrb	r3, [r7, #7]
 8010464:	2b39      	cmp	r3, #57	; 0x39
 8010466:	d803      	bhi.n	8010470 <_fromHex+0x22>
    ret = (c - '0');
 8010468:	79fb      	ldrb	r3, [r7, #7]
 801046a:	3b30      	subs	r3, #48	; 0x30
 801046c:	60fb      	str	r3, [r7, #12]
 801046e:	e012      	b.n	8010496 <_fromHex+0x48>
  } 
  else if ((c >= 'a') && (c <= 'f')) {
 8010470:	79fb      	ldrb	r3, [r7, #7]
 8010472:	2b60      	cmp	r3, #96	; 0x60
 8010474:	d906      	bls.n	8010484 <_fromHex+0x36>
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	2b66      	cmp	r3, #102	; 0x66
 801047a:	d803      	bhi.n	8010484 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	3b57      	subs	r3, #87	; 0x57
 8010480:	60fb      	str	r3, [r7, #12]
 8010482:	e008      	b.n	8010496 <_fromHex+0x48>
  } 
  else if ((c >= 'A') && (c <= 'F')) {
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	2b40      	cmp	r3, #64	; 0x40
 8010488:	d905      	bls.n	8010496 <_fromHex+0x48>
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	2b46      	cmp	r3, #70	; 0x46
 801048e:	d802      	bhi.n	8010496 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 8010490:	79fb      	ldrb	r3, [r7, #7]
 8010492:	3b37      	subs	r3, #55	; 0x37
 8010494:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8010496:	68fb      	ldr	r3, [r7, #12]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <_strNoCaseCmp+0x16>
    return 0;
 80104b6:	2300      	movs	r3, #0
 80104b8:	e026      	b.n	8010508 <_strNoCaseCmp+0x64>
  do {
    if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	1c5a      	adds	r2, r3, #1
 80104be:	60fa      	str	r2, [r7, #12]
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7ff ff7a 	bl	80103bc <_toLower>
 80104c8:	4603      	mov	r3, r0
 80104ca:	75fb      	strb	r3, [r7, #23]
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	1c5a      	adds	r2, r3, #1
 80104d0:	60ba      	str	r2, [r7, #8]
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7ff ff71 	bl	80103bc <_toLower>
 80104da:	4603      	mov	r3, r0
 80104dc:	75bb      	strb	r3, [r7, #22]
 80104de:	7dfa      	ldrb	r2, [r7, #23]
 80104e0:	7dbb      	ldrb	r3, [r7, #22]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d009      	beq.n	80104fa <_strNoCaseCmp+0x56>
      if ((c1 == 0) || (c2 == 0))
 80104e6:	7dfb      	ldrb	r3, [r7, #23]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00c      	beq.n	8010506 <_strNoCaseCmp+0x62>
 80104ec:	7dbb      	ldrb	r3, [r7, #22]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d009      	beq.n	8010506 <_strNoCaseCmp+0x62>
          break;
      return ((unsigned char)c1 - (unsigned char)c2);
 80104f2:	7dfa      	ldrb	r2, [r7, #23]
 80104f4:	7dbb      	ldrb	r3, [r7, #22]
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	e006      	b.n	8010508 <_strNoCaseCmp+0x64>
    }
  } while (--nLenghth != 0);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	607b      	str	r3, [r7, #4]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1d9      	bne.n	80104ba <_strNoCaseCmp+0x16>
  return 0;
 8010506:	2300      	movs	r3, #0
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 8010510:	b480      	push	{r7}
 8010512:	b085      	sub	sp, #20
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
  while (nLength--) {
 801051c:	e007      	b.n	801052e <_svMemCpy+0x1e>
    *dst++=*src++;
 801051e:	68ba      	ldr	r2, [r7, #8]
 8010520:	1c53      	adds	r3, r2, #1
 8010522:	60bb      	str	r3, [r7, #8]
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	1c59      	adds	r1, r3, #1
 8010528:	60f9      	str	r1, [r7, #12]
 801052a:	7812      	ldrb	r2, [r2, #0]
 801052c:	701a      	strb	r2, [r3, #0]
  while (nLength--) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	1e5a      	subs	r2, r3, #1
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1f2      	bne.n	801051e <_svMemCpy+0xe>
  }
}
 8010538:	bf00      	nop
 801053a:	bf00      	nop
 801053c:	3714      	adds	r7, #20
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
	...

08010548 <_svClearLine>:

static void _svClearLine(void)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
  svPutChar('\r');
 801054e:	4b16      	ldr	r3, [pc, #88]	; (80105a8 <_svClearLine+0x60>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	200d      	movs	r0, #13
 8010554:	4798      	blx	r3
  // Remove Strings
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010556:	2300      	movs	r3, #0
 8010558:	607b      	str	r3, [r7, #4]
 801055a:	e006      	b.n	801056a <_svClearLine+0x22>
    svPutChar(' ');
 801055c:	4b12      	ldr	r3, [pc, #72]	; (80105a8 <_svClearLine+0x60>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2020      	movs	r0, #32
 8010562:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3301      	adds	r3, #1
 8010568:	607b      	str	r3, [r7, #4]
 801056a:	4b10      	ldr	r3, [pc, #64]	; (80105ac <_svClearLine+0x64>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4a10      	ldr	r2, [pc, #64]	; (80105b0 <_svClearLine+0x68>)
 8010570:	6812      	ldr	r2, [r2, #0]
 8010572:	441a      	add	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	429a      	cmp	r2, r3
 8010578:	d8f0      	bhi.n	801055c <_svClearLine+0x14>
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 801057a:	2300      	movs	r3, #0
 801057c:	603b      	str	r3, [r7, #0]
 801057e:	e006      	b.n	801058e <_svClearLine+0x46>
    svPutChar('\b');
 8010580:	4b09      	ldr	r3, [pc, #36]	; (80105a8 <_svClearLine+0x60>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2008      	movs	r0, #8
 8010586:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	3301      	adds	r3, #1
 801058c:	603b      	str	r3, [r7, #0]
 801058e:	4b07      	ldr	r3, [pc, #28]	; (80105ac <_svClearLine+0x64>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4a07      	ldr	r2, [pc, #28]	; (80105b0 <_svClearLine+0x68>)
 8010594:	6812      	ldr	r2, [r2, #0]
 8010596:	441a      	add	r2, r3
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	429a      	cmp	r2, r3
 801059c:	d8f0      	bhi.n	8010580 <_svClearLine+0x38>
}
 801059e:	bf00      	nop
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	20055928 	.word	0x20055928
 80105ac:	20055918 	.word	0x20055918
 80105b0:	20050074 	.word	0x20050074

080105b4 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	4603      	mov	r3, r0
 80105bc:	71fb      	strb	r3, [r7, #7]
  switch (eHistoryCmd) {
 80105be:	79fb      	ldrb	r3, [r7, #7]
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	d03f      	beq.n	8010644 <svCLIHandleHistory+0x90>
 80105c4:	2b02      	cmp	r3, #2
 80105c6:	dc6f      	bgt.n	80106a8 <svCLIHandleHistory+0xf4>
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d002      	beq.n	80105d2 <svCLIHandleHistory+0x1e>
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d052      	beq.n	8010676 <svCLIHandleHistory+0xc2>
      if (snCLIHistoryPos >= snCLIHistoryCount)
        snCLIHistoryPos = 0;
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
      break;
    default:
      break;
 80105d0:	e06a      	b.n	80106a8 <svCLIHandleHistory+0xf4>
      if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {  // Full
 80105d2:	4b38      	ldr	r3, [pc, #224]	; (80106b4 <svCLIHandleHistory+0x100>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b03      	cmp	r3, #3
 80105d8:	d11c      	bne.n	8010614 <svCLIHandleHistory+0x60>
        for (int i=1;i<snCLIHistoryCount;i++) {
 80105da:	2301      	movs	r3, #1
 80105dc:	60fb      	str	r3, [r7, #12]
 80105de:	e00f      	b.n	8010600 <svCLIHandleHistory+0x4c>
          _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	3b01      	subs	r3, #1
 80105e4:	01db      	lsls	r3, r3, #7
 80105e6:	4a34      	ldr	r2, [pc, #208]	; (80106b8 <svCLIHandleHistory+0x104>)
 80105e8:	1898      	adds	r0, r3, r2
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	01db      	lsls	r3, r3, #7
 80105ee:	4a32      	ldr	r2, [pc, #200]	; (80106b8 <svCLIHandleHistory+0x104>)
 80105f0:	4413      	add	r3, r2
 80105f2:	2280      	movs	r2, #128	; 0x80
 80105f4:	4619      	mov	r1, r3
 80105f6:	f7ff ff8b 	bl	8010510 <_svMemCpy>
        for (int i=1;i<snCLIHistoryCount;i++) {
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	3301      	adds	r3, #1
 80105fe:	60fb      	str	r3, [r7, #12]
 8010600:	4b2c      	ldr	r3, [pc, #176]	; (80106b4 <svCLIHandleHistory+0x100>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	429a      	cmp	r2, r3
 8010608:	dbea      	blt.n	80105e0 <svCLIHandleHistory+0x2c>
        snCLIHistoryCount--;
 801060a:	4b2a      	ldr	r3, [pc, #168]	; (80106b4 <svCLIHandleHistory+0x100>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3b01      	subs	r3, #1
 8010610:	4a28      	ldr	r2, [pc, #160]	; (80106b4 <svCLIHandleHistory+0x100>)
 8010612:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 8010614:	4b27      	ldr	r3, [pc, #156]	; (80106b4 <svCLIHandleHistory+0x100>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	01db      	lsls	r3, r3, #7
 801061a:	4a27      	ldr	r2, [pc, #156]	; (80106b8 <svCLIHandleHistory+0x104>)
 801061c:	4413      	add	r3, r2
 801061e:	2280      	movs	r2, #128	; 0x80
 8010620:	4926      	ldr	r1, [pc, #152]	; (80106bc <svCLIHandleHistory+0x108>)
 8010622:	4618      	mov	r0, r3
 8010624:	f7ff ff74 	bl	8010510 <_svMemCpy>
      if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 8010628:	4b22      	ldr	r3, [pc, #136]	; (80106b4 <svCLIHandleHistory+0x100>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b02      	cmp	r3, #2
 801062e:	dc04      	bgt.n	801063a <svCLIHandleHistory+0x86>
        snCLIHistoryCount++;
 8010630:	4b20      	ldr	r3, [pc, #128]	; (80106b4 <svCLIHandleHistory+0x100>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3301      	adds	r3, #1
 8010636:	4a1f      	ldr	r2, [pc, #124]	; (80106b4 <svCLIHandleHistory+0x100>)
 8010638:	6013      	str	r3, [r2, #0]
      snCLIHistoryPos = snCLIHistoryCount;
 801063a:	4b1e      	ldr	r3, [pc, #120]	; (80106b4 <svCLIHandleHistory+0x100>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4a20      	ldr	r2, [pc, #128]	; (80106c0 <svCLIHandleHistory+0x10c>)
 8010640:	6013      	str	r3, [r2, #0]
      break;
 8010642:	e032      	b.n	80106aa <svCLIHandleHistory+0xf6>
      snCLIHistoryPos--;
 8010644:	4b1e      	ldr	r3, [pc, #120]	; (80106c0 <svCLIHandleHistory+0x10c>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3b01      	subs	r3, #1
 801064a:	4a1d      	ldr	r2, [pc, #116]	; (80106c0 <svCLIHandleHistory+0x10c>)
 801064c:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos < 0)
 801064e:	4b1c      	ldr	r3, [pc, #112]	; (80106c0 <svCLIHandleHistory+0x10c>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	da04      	bge.n	8010660 <svCLIHandleHistory+0xac>
        snCLIHistoryPos = snCLIHistoryCount - 1;
 8010656:	4b17      	ldr	r3, [pc, #92]	; (80106b4 <svCLIHandleHistory+0x100>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3b01      	subs	r3, #1
 801065c:	4a18      	ldr	r2, [pc, #96]	; (80106c0 <svCLIHandleHistory+0x10c>)
 801065e:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 8010660:	4b17      	ldr	r3, [pc, #92]	; (80106c0 <svCLIHandleHistory+0x10c>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	01db      	lsls	r3, r3, #7
 8010666:	4a14      	ldr	r2, [pc, #80]	; (80106b8 <svCLIHandleHistory+0x104>)
 8010668:	4413      	add	r3, r2
 801066a:	2280      	movs	r2, #128	; 0x80
 801066c:	4619      	mov	r1, r3
 801066e:	4813      	ldr	r0, [pc, #76]	; (80106bc <svCLIHandleHistory+0x108>)
 8010670:	f7ff ff4e 	bl	8010510 <_svMemCpy>
      break;
 8010674:	e019      	b.n	80106aa <svCLIHandleHistory+0xf6>
      snCLIHistoryPos++;
 8010676:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <svCLIHandleHistory+0x10c>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	3301      	adds	r3, #1
 801067c:	4a10      	ldr	r2, [pc, #64]	; (80106c0 <svCLIHandleHistory+0x10c>)
 801067e:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos >= snCLIHistoryCount)
 8010680:	4b0f      	ldr	r3, [pc, #60]	; (80106c0 <svCLIHandleHistory+0x10c>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	4b0b      	ldr	r3, [pc, #44]	; (80106b4 <svCLIHandleHistory+0x100>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	429a      	cmp	r2, r3
 801068a:	db02      	blt.n	8010692 <svCLIHandleHistory+0xde>
        snCLIHistoryPos = 0;
 801068c:	4b0c      	ldr	r3, [pc, #48]	; (80106c0 <svCLIHandleHistory+0x10c>)
 801068e:	2200      	movs	r2, #0
 8010690:	601a      	str	r2, [r3, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 8010692:	4b0b      	ldr	r3, [pc, #44]	; (80106c0 <svCLIHandleHistory+0x10c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	01db      	lsls	r3, r3, #7
 8010698:	4a07      	ldr	r2, [pc, #28]	; (80106b8 <svCLIHandleHistory+0x104>)
 801069a:	4413      	add	r3, r2
 801069c:	2280      	movs	r2, #128	; 0x80
 801069e:	4619      	mov	r1, r3
 80106a0:	4806      	ldr	r0, [pc, #24]	; (80106bc <svCLIHandleHistory+0x108>)
 80106a2:	f7ff ff35 	bl	8010510 <_svMemCpy>
      break;
 80106a6:	e000      	b.n	80106aa <svCLIHandleHistory+0xf6>
      break;
 80106a8:	bf00      	nop
  }
}
 80106aa:	bf00      	nop
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	20055910 	.word	0x20055910
 80106b8:	20055790 	.word	0x20055790
 80106bc:	20055710 	.word	0x20055710
 80106c0:	20055914 	.word	0x20055914

080106c4 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  SVCLI_t* pCLIEntry;
  char* pCurrent = *line;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 80106d2:	e002      	b.n	80106da <svCLI_Search+0x16>
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	3301      	adds	r3, #1
 80106d8:	613b      	str	r3, [r7, #16]
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d003      	beq.n	80106ea <svCLI_Search+0x26>
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	2b20      	cmp	r3, #32
 80106e8:	d0f4      	beq.n	80106d4 <svCLI_Search+0x10>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80106ea:	4b22      	ldr	r3, [pc, #136]	; (8010774 <svCLI_Search+0xb0>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	617b      	str	r3, [r7, #20]
 80106f0:	e035      	b.n	801075e <svCLI_Search+0x9a>
    int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fe33 	bl	8010362 <_strlenOffspace>
 80106fc:	60f8      	str	r0, [r7, #12]
    int nArgLength = _strlenOffspace(pCurrent);
 80106fe:	6938      	ldr	r0, [r7, #16]
 8010700:	f7ff fe2f 	bl	8010362 <_strlenOffspace>
 8010704:	60b8      	str	r0, [r7, #8]
    pCurrent[nArgLength] = 0; // NULL termination just after command for comparing
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	4413      	add	r3, r2
 801070c:	2200      	movs	r2, #0
 801070e:	701a      	strb	r2, [r3, #0]
    if (nCmdLength >= nArgLength) {
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	429a      	cmp	r2, r3
 8010716:	db1f      	blt.n	8010758 <svCLI_Search+0x94>
      if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) { // Partial Command OK !!
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	68fa      	ldr	r2, [r7, #12]
 801071e:	4619      	mov	r1, r3
 8010720:	6938      	ldr	r0, [r7, #16]
 8010722:	f7ff febf 	bl	80104a4 <_strNoCaseCmp>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d115      	bne.n	8010758 <svCLI_Search+0x94>
        pCurrent += (nArgLength + 1);
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	3301      	adds	r3, #1
 8010730:	693a      	ldr	r2, [r7, #16]
 8010732:	4413      	add	r3, r2
 8010734:	613b      	str	r3, [r7, #16]
        // strip off trailing spaces
        while (*pCurrent && *pCurrent == ' ') pCurrent++;
 8010736:	e002      	b.n	801073e <svCLI_Search+0x7a>
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	3301      	adds	r3, #1
 801073c:	613b      	str	r3, [r7, #16]
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d003      	beq.n	801074e <svCLI_Search+0x8a>
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	2b20      	cmp	r3, #32
 801074c:	d0f4      	beq.n	8010738 <svCLI_Search+0x74>
        *line = pCurrent;   // remove command & return
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	693a      	ldr	r2, [r7, #16]
 8010752:	601a      	str	r2, [r3, #0]

        return pCLIEntry;
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	e008      	b.n	801076a <svCLI_Search+0xa6>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	330c      	adds	r3, #12
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	4b06      	ldr	r3, [pc, #24]	; (8010778 <svCLI_Search+0xb4>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	697a      	ldr	r2, [r7, #20]
 8010764:	429a      	cmp	r2, r3
 8010766:	d3c4      	bcc.n	80106f2 <svCLI_Search+0x2e>
      }
    }
  }
  return NULL;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	3718      	adds	r7, #24
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	2005591c 	.word	0x2005591c
 8010778:	20055920 	.word	0x20055920

0801077c <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b08a      	sub	sp, #40	; 0x28
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
 8010788:	603b      	str	r3, [r7, #0]
  int first = 1;
 801078a:	2301      	movs	r3, #1
 801078c:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 801078e:	230a      	movs	r3, #10
 8010790:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	61fb      	str	r3, [r7, #28]
  int digit;
    // strip off leading spaces
    while (*s == ' ') s++;
 8010796:	e002      	b.n	801079e <svCLI_ParseNumber+0x22>
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	3301      	adds	r3, #1
 801079c:	60fb      	str	r3, [r7, #12]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	2b20      	cmp	r3, #32
 80107a4:	d0f8      	beq.n	8010798 <svCLI_ParseNumber+0x1c>
    if (*s == 0)
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d14d      	bne.n	801084a <svCLI_ParseNumber+0xce>
      return 0;
 80107ae:	2300      	movs	r3, #0
 80107b0:	e05b      	b.n	801086a <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 80107b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d011      	beq.n	80107dc <svCLI_ParseNumber+0x60>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	2b30      	cmp	r3, #48	; 0x30
 80107be:	d10d      	bne.n	80107dc <svCLI_ParseNumber+0x60>
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	3301      	adds	r3, #1
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7ff fdf8 	bl	80103bc <_toLower>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b78      	cmp	r3, #120	; 0x78
 80107d0:	d104      	bne.n	80107dc <svCLI_ParseNumber+0x60>
        radix = 16;
 80107d2:	2310      	movs	r3, #16
 80107d4:	623b      	str	r3, [r7, #32]
        s += 2;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	3302      	adds	r3, #2
 80107da:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	60fa      	str	r2, [r7, #12]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 80107ea:	7dfb      	ldrb	r3, [r7, #23]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ff fe0e 	bl	801040e <_isHex>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d010      	beq.n	801081a <svCLI_ParseNumber+0x9e>
 80107f8:	7dfb      	ldrb	r3, [r7, #23]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7ff fe27 	bl	801044e <_fromHex>
 8010800:	6138      	str	r0, [r7, #16]
 8010802:	693a      	ldr	r2, [r7, #16]
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	429a      	cmp	r2, r3
 8010808:	da07      	bge.n	801081a <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 801080a:	6a3b      	ldr	r3, [r7, #32]
 801080c:	69fa      	ldr	r2, [r7, #28]
 801080e:	fb03 f202 	mul.w	r2, r3, r2
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	4413      	add	r3, r2
 8010816:	61fb      	str	r3, [r7, #28]
 8010818:	e017      	b.n	801084a <svCLI_ParseNumber+0xce>
      } 
      else {
        if (delimiter != (char *)0) {
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d012      	beq.n	8010846 <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 8010824:	e002      	b.n	801082c <svCLI_ParseNumber+0xb0>
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	3301      	adds	r3, #1
 801082a:	61bb      	str	r3, [r7, #24]
 801082c:	69bb      	ldr	r3, [r7, #24]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d004      	beq.n	801083e <svCLI_ParseNumber+0xc2>
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	7dfa      	ldrb	r2, [r7, #23]
 801083a:	429a      	cmp	r2, r3
 801083c:	d1f3      	bne.n	8010826 <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d106      	bne.n	8010854 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 8010846:	2300      	movs	r3, #0
 8010848:	e00f      	b.n	801086a <svCLI_ParseNumber+0xee>
    while (*s) {
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1af      	bne.n	80107b2 <svCLI_ParseNumber+0x36>
 8010852:	e000      	b.n	8010856 <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 8010854:	bf00      	nop
      }
    }
    *val = result;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	69fa      	ldr	r2, [r7, #28]
 801085a:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d002      	beq.n	8010868 <svCLI_ParseNumber+0xec>
      *res = s;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8010868:	2301      	movs	r3, #1
}
 801086a:	4618      	mov	r0, r3
 801086c:	3728      	adds	r7, #40	; 0x28
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
	...

08010874 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 8010874:	b590      	push	{r4, r7, lr}
 8010876:	b089      	sub	sp, #36	; 0x24
 8010878:	af00      	add	r7, sp, #0
  if (s_bPwdOK == FALSE) {  // Input Password
 801087a:	4b3a      	ldr	r3, [pc, #232]	; (8010964 <svCLI_ParsenExecute+0xf0>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d120      	bne.n	80108c4 <svCLI_ParsenExecute+0x50>
    if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 8010882:	4939      	ldr	r1, [pc, #228]	; (8010968 <svCLI_ParsenExecute+0xf4>)
 8010884:	4839      	ldr	r0, [pc, #228]	; (801096c <svCLI_ParsenExecute+0xf8>)
 8010886:	f7ef fd03 	bl	8000290 <strcmp>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d115      	bne.n	80108bc <svCLI_ParsenExecute+0x48>
      s_bPwdOK = TRUE;
 8010890:	4b34      	ldr	r3, [pc, #208]	; (8010964 <svCLI_ParsenExecute+0xf0>)
 8010892:	2201      	movs	r2, #1
 8010894:	601a      	str	r2, [r3, #0]
      svCLI_Printf("Welcome !!\r\n");
 8010896:	4836      	ldr	r0, [pc, #216]	; (8010970 <svCLI_ParsenExecute+0xfc>)
 8010898:	f7ff fcba 	bl	8010210 <svCLI_Printf>
      strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 801089c:	4b35      	ldr	r3, [pc, #212]	; (8010974 <svCLI_ParsenExecute+0x100>)
 801089e:	4a36      	ldr	r2, [pc, #216]	; (8010978 <svCLI_ParsenExecute+0x104>)
 80108a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108a4:	6018      	str	r0, [r3, #0]
 80108a6:	3304      	adds	r3, #4
 80108a8:	8019      	strh	r1, [r3, #0]
 80108aa:	3302      	adds	r3, #2
 80108ac:	0c0a      	lsrs	r2, r1, #16
 80108ae:	701a      	strb	r2, [r3, #0]
      snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 80108b0:	4b32      	ldr	r3, [pc, #200]	; (801097c <svCLI_ParsenExecute+0x108>)
 80108b2:	2206      	movs	r2, #6
 80108b4:	601a      	str	r2, [r3, #0]
      svCLI_ShowHelp();
 80108b6:	f7ff fcd7 	bl	8010268 <svCLI_ShowHelp>
    }
    else {
      svCLI_Printf("Invalid Password !!\r\n");
    }
    return;
 80108ba:	e04f      	b.n	801095c <svCLI_ParsenExecute+0xe8>
      svCLI_Printf("Invalid Password !!\r\n");
 80108bc:	4830      	ldr	r0, [pc, #192]	; (8010980 <svCLI_ParsenExecute+0x10c>)
 80108be:	f7ff fca7 	bl	8010210 <svCLI_Printf>
    return;
 80108c2:	e04b      	b.n	801095c <svCLI_ParsenExecute+0xe8>
  }
  SVCLI_t* pCLIEntry;
  if (sCLITableBegin == sCLITablEnd) {
 80108c4:	4b2f      	ldr	r3, [pc, #188]	; (8010984 <svCLI_ParsenExecute+0x110>)
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	4b2f      	ldr	r3, [pc, #188]	; (8010988 <svCLI_ParsenExecute+0x114>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d103      	bne.n	80108d8 <svCLI_ParsenExecute+0x64>
    svCLI_Printf("No CLI Entries !!!\r\n");
 80108d0:	482e      	ldr	r0, [pc, #184]	; (801098c <svCLI_ParsenExecute+0x118>)
 80108d2:	f7ff fc9d 	bl	8010210 <svCLI_Printf>
    return;
 80108d6:	e041      	b.n	801095c <svCLI_ParsenExecute+0xe8>
  }
  char* pLine = szCLIString;
 80108d8:	4b24      	ldr	r3, [pc, #144]	; (801096c <svCLI_ParsenExecute+0xf8>)
 80108da:	613b      	str	r3, [r7, #16]
  pCLIEntry = svCLI_Search(&pLine);
 80108dc:	f107 0310 	add.w	r3, r7, #16
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff feef 	bl	80106c4 <svCLI_Search>
 80108e6:	61b8      	str	r0, [r7, #24]
  if (pCLIEntry) {
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d033      	beq.n	8010956 <svCLI_ParsenExecute+0xe2>
    // Parse more for CLI function
    unsigned int nFirst, nSecond, nCount;
    nCount = 0;
 80108ee:	2300      	movs	r3, #0
 80108f0:	61fb      	str	r3, [r7, #28]
    nFirst = 0;
 80108f2:	2300      	movs	r3, #0
 80108f4:	60fb      	str	r3, [r7, #12]
    nSecond = 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	60bb      	str	r3, [r7, #8]
    char* pParseLine = pLine;
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	617b      	str	r3, [r7, #20]
    char delim[3] = ", ";
 80108fe:	4a24      	ldr	r2, [pc, #144]	; (8010990 <svCLI_ParsenExecute+0x11c>)
 8010900:	1d3b      	adds	r3, r7, #4
 8010902:	6812      	ldr	r2, [r2, #0]
 8010904:	4611      	mov	r1, r2
 8010906:	8019      	strh	r1, [r3, #0]
 8010908:	3302      	adds	r3, #2
 801090a:	0c12      	lsrs	r2, r2, #16
 801090c:	701a      	strb	r2, [r3, #0]
    if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 801090e:	6938      	ldr	r0, [r7, #16]
 8010910:	1d3b      	adds	r3, r7, #4
 8010912:	f107 0210 	add.w	r2, r7, #16
 8010916:	f107 010c 	add.w	r1, r7, #12
 801091a:	f7ff ff2f 	bl	801077c <svCLI_ParseNumber>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d010      	beq.n	8010946 <svCLI_ParsenExecute+0xd2>
      nCount++;
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	3301      	adds	r3, #1
 8010928:	61fb      	str	r3, [r7, #28]
      if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 801092a:	6938      	ldr	r0, [r7, #16]
 801092c:	1d3b      	adds	r3, r7, #4
 801092e:	f107 0210 	add.w	r2, r7, #16
 8010932:	f107 0108 	add.w	r1, r7, #8
 8010936:	f7ff ff21 	bl	801077c <svCLI_ParseNumber>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <svCLI_ParsenExecute+0xd2>
        nCount++;
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	3301      	adds	r3, #1
 8010944:	61fb      	str	r3, [r7, #28]
      }
    }
    pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	689c      	ldr	r4, [r3, #8]
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	69f9      	ldr	r1, [r7, #28]
 8010950:	6978      	ldr	r0, [r7, #20]
 8010952:	47a0      	blx	r4
 8010954:	e002      	b.n	801095c <svCLI_ParsenExecute+0xe8>
  }
  else {
    svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 8010956:	480f      	ldr	r0, [pc, #60]	; (8010994 <svCLI_ParsenExecute+0x120>)
 8010958:	f7ff fc5a 	bl	8010210 <svCLI_Printf>
  }
}
 801095c:	3724      	adds	r7, #36	; 0x24
 801095e:	46bd      	mov	sp, r7
 8010960:	bd90      	pop	{r4, r7, pc}
 8010962:	bf00      	nop
 8010964:	20050064 	.word	0x20050064
 8010968:	080242c8 	.word	0x080242c8
 801096c:	20055710 	.word	0x20055710
 8010970:	080242d4 	.word	0x080242d4
 8010974:	20050068 	.word	0x20050068
 8010978:	08024270 	.word	0x08024270
 801097c:	20050074 	.word	0x20050074
 8010980:	080242e4 	.word	0x080242e4
 8010984:	2005591c 	.word	0x2005591c
 8010988:	20055920 	.word	0x20055920
 801098c:	080242fc 	.word	0x080242fc
 8010990:	0802433c 	.word	0x0802433c
 8010994:	08024314 	.word	0x08024314

08010998 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	603b      	str	r3, [r7, #0]
 80109a4:	4613      	mov	r3, r2
 80109a6:	71fb      	strb	r3, [r7, #7]
  if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d005      	beq.n	80109ba <svCLI_SetBypassFtn+0x22>
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d002      	beq.n	80109ba <svCLI_SetBypassFtn+0x22>
 80109b4:	79fb      	ldrb	r3, [r7, #7]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d136      	bne.n	8010a28 <svCLI_SetBypassFtn+0x90>
    if (svBypass == NULL) {
 80109ba:	4b28      	ldr	r3, [pc, #160]	; (8010a5c <svCLI_SetBypassFtn+0xc4>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d048      	beq.n	8010a54 <svCLI_SetBypassFtn+0xbc>
      // Nothing to do..
      return;
    }
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 80109c2:	4b27      	ldr	r3, [pc, #156]	; (8010a60 <svCLI_SetBypassFtn+0xc8>)
 80109c4:	4a27      	ldr	r2, [pc, #156]	; (8010a64 <svCLI_SetBypassFtn+0xcc>)
 80109c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109ca:	6018      	str	r0, [r3, #0]
 80109cc:	3304      	adds	r3, #4
 80109ce:	8019      	strh	r1, [r3, #0]
 80109d0:	3302      	adds	r3, #2
 80109d2:	0c0a      	lsrs	r2, r1, #16
 80109d4:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 80109d6:	4b24      	ldr	r3, [pc, #144]	; (8010a68 <svCLI_SetBypassFtn+0xd0>)
 80109d8:	2206      	movs	r2, #6
 80109da:	601a      	str	r2, [r3, #0]
    svBypass = NULL;
 80109dc:	4b1f      	ldr	r3, [pc, #124]	; (8010a5c <svCLI_SetBypassFtn+0xc4>)
 80109de:	2200      	movs	r2, #0
 80109e0:	601a      	str	r2, [r3, #0]

    svExit = NULL;
 80109e2:	4b22      	ldr	r3, [pc, #136]	; (8010a6c <svCLI_SetBypassFtn+0xd4>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	701a      	strb	r2, [r3, #0]
    sbEnter = FALSE;
 80109e8:	4b21      	ldr	r3, [pc, #132]	; (8010a70 <svCLI_SetBypassFtn+0xd8>)
 80109ea:	2200      	movs	r2, #0
 80109ec:	601a      	str	r2, [r3, #0]

    scntCLIString = 0;  // Clean Up Char
 80109ee:	4b21      	ldr	r3, [pc, #132]	; (8010a74 <svCLI_SetBypassFtn+0xdc>)
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]
    // clean up line string
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 80109f4:	2300      	movs	r3, #0
 80109f6:	617b      	str	r3, [r7, #20]
 80109f8:	e007      	b.n	8010a0a <svCLI_SetBypassFtn+0x72>
      szCLIString[i] = '\0';
 80109fa:	4a1f      	ldr	r2, [pc, #124]	; (8010a78 <svCLI_SetBypassFtn+0xe0>)
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	4413      	add	r3, r2
 8010a00:	2200      	movs	r2, #0
 8010a02:	701a      	strb	r2, [r3, #0]
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	3301      	adds	r3, #1
 8010a08:	617b      	str	r3, [r7, #20]
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8010a0e:	ddf4      	ble.n	80109fa <svCLI_SetBypassFtn+0x62>
    }
    svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 8010a10:	4913      	ldr	r1, [pc, #76]	; (8010a60 <svCLI_SetBypassFtn+0xc8>)
 8010a12:	481a      	ldr	r0, [pc, #104]	; (8010a7c <svCLI_SetBypassFtn+0xe4>)
 8010a14:	f7ff fbfc 	bl	8010210 <svCLI_Printf>

    if (svCommit) {
 8010a18:	4b19      	ldr	r3, [pc, #100]	; (8010a80 <svCLI_SetBypassFtn+0xe8>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d01a      	beq.n	8010a56 <svCLI_SetBypassFtn+0xbe>
      svCommit();
 8010a20:	4b17      	ldr	r3, [pc, #92]	; (8010a80 <svCLI_SetBypassFtn+0xe8>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4798      	blx	r3
    if (svCommit) {
 8010a26:	e016      	b.n	8010a56 <svCLI_SetBypassFtn+0xbe>
    }
  }
  else {
    strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 8010a28:	2209      	movs	r2, #9
 8010a2a:	68b9      	ldr	r1, [r7, #8]
 8010a2c:	480c      	ldr	r0, [pc, #48]	; (8010a60 <svCLI_SetBypassFtn+0xc8>)
 8010a2e:	f012 fac3 	bl	8022fb8 <strncpy>
    snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 8010a32:	480b      	ldr	r0, [pc, #44]	; (8010a60 <svCLI_SetBypassFtn+0xc8>)
 8010a34:	f7ef fc36 	bl	80002a4 <strlen>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	4b0a      	ldr	r3, [pc, #40]	; (8010a68 <svCLI_SetBypassFtn+0xd0>)
 8010a3e:	601a      	str	r2, [r3, #0]
    svBypass = pfnBypass;
 8010a40:	4a06      	ldr	r2, [pc, #24]	; (8010a5c <svCLI_SetBypassFtn+0xc4>)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6013      	str	r3, [r2, #0]
    svExit = szExit;
 8010a46:	4a09      	ldr	r2, [pc, #36]	; (8010a6c <svCLI_SetBypassFtn+0xd4>)
 8010a48:	79fb      	ldrb	r3, [r7, #7]
 8010a4a:	7013      	strb	r3, [r2, #0]
    sbEnter = bEnter;
 8010a4c:	4a08      	ldr	r2, [pc, #32]	; (8010a70 <svCLI_SetBypassFtn+0xd8>)
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	6013      	str	r3, [r2, #0]
 8010a52:	e000      	b.n	8010a56 <svCLI_SetBypassFtn+0xbe>
      return;
 8010a54:	bf00      	nop
  }
}
 8010a56:	3718      	adds	r7, #24
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	20055930 	.word	0x20055930
 8010a60:	20050068 	.word	0x20050068
 8010a64:	08024270 	.word	0x08024270
 8010a68:	20050074 	.word	0x20050074
 8010a6c:	20055934 	.word	0x20055934
 8010a70:	20055938 	.word	0x20055938
 8010a74:	20055918 	.word	0x20055918
 8010a78:	20055710 	.word	0x20055710
 8010a7c:	08024340 	.word	0x08024340
 8010a80:	2005592c 	.word	0x2005592c

08010a84 <svCLI_Handler>:

void svCLI_Handler(void)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
  if (sbFirst) {
    svCLI_Printf("\r\n%s", szCLI_PROMPT);
    sbFirst = 0;
  }
#endif
  if (svGetChar) {
 8010a8a:	4b92      	ldr	r3, [pc, #584]	; (8010cd4 <svCLI_Handler+0x250>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f000 8114 	beq.w	8010cbc <svCLI_Handler+0x238>
    char bSkipPrompt = 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	73fb      	strb	r3, [r7, #15]
    char szChar = svGetChar();
 8010a98:	4b8e      	ldr	r3, [pc, #568]	; (8010cd4 <svCLI_Handler+0x250>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4798      	blx	r3
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	71fb      	strb	r3, [r7, #7]
    if ((szChar != 0) && (szChar != '\n')) {
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f000 8109 	beq.w	8010cbc <svCLI_Handler+0x238>
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	2b0a      	cmp	r3, #10
 8010aae:	f000 8105 	beq.w	8010cbc <svCLI_Handler+0x238>
      if (szChar == '\r') {
 8010ab2:	79fb      	ldrb	r3, [r7, #7]
 8010ab4:	2b0d      	cmp	r3, #13
 8010ab6:	d154      	bne.n	8010b62 <svCLI_Handler+0xde>
        sbInEsc = 0;
 8010ab8:	4b87      	ldr	r3, [pc, #540]	; (8010cd8 <svCLI_Handler+0x254>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	701a      	strb	r2, [r3, #0]
        svCLI_Printf("\r\n");
 8010abe:	4887      	ldr	r0, [pc, #540]	; (8010cdc <svCLI_Handler+0x258>)
 8010ac0:	f7ff fba6 	bl	8010210 <svCLI_Printf>
        if (scntCLIString > 0) {
 8010ac4:	4b86      	ldr	r3, [pc, #536]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d031      	beq.n	8010b30 <svCLI_Handler+0xac>
          // Parse and Execute
          szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010acc:	4b84      	ldr	r3, [pc, #528]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a84      	ldr	r2, [pc, #528]	; (8010ce4 <svCLI_Handler+0x260>)
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	54d1      	strb	r1, [r2, r3]
          // Save to history Buffer
          svCLIHandleHistory(CLI_HISTORY_ADD);
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	f7ff fd6c 	bl	80105b4 <svCLIHandleHistory>
          // Call Parser
          if (svBypass) { // hellosmk 210225 added
 8010adc:	4b82      	ldr	r3, [pc, #520]	; (8010ce8 <svCLI_Handler+0x264>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d011      	beq.n	8010b08 <svCLI_Handler+0x84>
            bSkipPrompt = 1;
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	73fb      	strb	r3, [r7, #15]
            szCLIString[scntCLIString] = '\r';
 8010ae8:	4b7d      	ldr	r3, [pc, #500]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a7d      	ldr	r2, [pc, #500]	; (8010ce4 <svCLI_Handler+0x260>)
 8010aee:	210d      	movs	r1, #13
 8010af0:	54d1      	strb	r1, [r2, r3]
            szCLIString[scntCLIString+1] = '\0';
 8010af2:	4b7b      	ldr	r3, [pc, #492]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	3301      	adds	r3, #1
 8010af8:	4a7a      	ldr	r2, [pc, #488]	; (8010ce4 <svCLI_Handler+0x260>)
 8010afa:	2100      	movs	r1, #0
 8010afc:	54d1      	strb	r1, [r2, r3]
            svBypass(szCLIString);
 8010afe:	4b7a      	ldr	r3, [pc, #488]	; (8010ce8 <svCLI_Handler+0x264>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4878      	ldr	r0, [pc, #480]	; (8010ce4 <svCLI_Handler+0x260>)
 8010b04:	4798      	blx	r3
 8010b06:	e001      	b.n	8010b0c <svCLI_Handler+0x88>
          }
          else {
            svCLI_ParsenExecute();
 8010b08:	f7ff feb4 	bl	8010874 <svCLI_ParsenExecute>
          }
          scntCLIString = 0;  // Clean Up Char
 8010b0c:	4b74      	ldr	r3, [pc, #464]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010b0e:	2200      	movs	r2, #0
 8010b10:	601a      	str	r2, [r3, #0]
          // clean up line string
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010b12:	2300      	movs	r3, #0
 8010b14:	60bb      	str	r3, [r7, #8]
 8010b16:	e007      	b.n	8010b28 <svCLI_Handler+0xa4>
            szCLIString[i] = '\0';
 8010b18:	4a72      	ldr	r2, [pc, #456]	; (8010ce4 <svCLI_Handler+0x260>)
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	2200      	movs	r2, #0
 8010b20:	701a      	strb	r2, [r3, #0]
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	3301      	adds	r3, #1
 8010b26:	60bb      	str	r3, [r7, #8]
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8010b2c:	ddf4      	ble.n	8010b18 <svCLI_Handler+0x94>
 8010b2e:	e010      	b.n	8010b52 <svCLI_Handler+0xce>
          }
        }
        else if (sbEnter && svBypass) {
 8010b30:	4b6e      	ldr	r3, [pc, #440]	; (8010cec <svCLI_Handler+0x268>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00c      	beq.n	8010b52 <svCLI_Handler+0xce>
 8010b38:	4b6b      	ldr	r3, [pc, #428]	; (8010ce8 <svCLI_Handler+0x264>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d008      	beq.n	8010b52 <svCLI_Handler+0xce>
          const char cszRet[2] = {'\n',0};
 8010b40:	230a      	movs	r3, #10
 8010b42:	80bb      	strh	r3, [r7, #4]
          svBypass((char*)cszRet);
 8010b44:	4b68      	ldr	r3, [pc, #416]	; (8010ce8 <svCLI_Handler+0x264>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	1d3a      	adds	r2, r7, #4
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	4798      	blx	r3
          bSkipPrompt = 1;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	73fb      	strb	r3, [r7, #15]
        }

        if (bSkipPrompt == 0) {
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f040 80b1 	bne.w	8010cbc <svCLI_Handler+0x238>
          svCLI_Printf(szCLI_PROMPT);
 8010b5a:	4865      	ldr	r0, [pc, #404]	; (8010cf0 <svCLI_Handler+0x26c>)
 8010b5c:	f7ff fb58 	bl	8010210 <svCLI_Printf>
 8010b60:	e0ac      	b.n	8010cbc <svCLI_Handler+0x238>
        }
      }
      else if (svBypass && (szChar == svExit)) {
 8010b62:	4b61      	ldr	r3, [pc, #388]	; (8010ce8 <svCLI_Handler+0x264>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d019      	beq.n	8010b9e <svCLI_Handler+0x11a>
 8010b6a:	4b62      	ldr	r3, [pc, #392]	; (8010cf4 <svCLI_Handler+0x270>)
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	79fa      	ldrb	r2, [r7, #7]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d114      	bne.n	8010b9e <svCLI_Handler+0x11a>
        // Exit Bypass mode
        if (0x11 == svExit) {
 8010b74:	4b5f      	ldr	r3, [pc, #380]	; (8010cf4 <svCLI_Handler+0x270>)
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	2b11      	cmp	r3, #17
 8010b7a:	d102      	bne.n	8010b82 <svCLI_Handler+0xfe>
          svCLI_Printf("^Q");
 8010b7c:	485e      	ldr	r0, [pc, #376]	; (8010cf8 <svCLI_Handler+0x274>)
 8010b7e:	f7ff fb47 	bl	8010210 <svCLI_Printf>
        }
        svBypass(NULL); // Notify Exit !!
 8010b82:	4b59      	ldr	r3, [pc, #356]	; (8010ce8 <svCLI_Handler+0x264>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2000      	movs	r0, #0
 8010b88:	4798      	blx	r3
        svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	2100      	movs	r1, #0
 8010b90:	2000      	movs	r0, #0
 8010b92:	f7ff ff01 	bl	8010998 <svCLI_SetBypassFtn>
        sbInEsc = 0;
 8010b96:	4b50      	ldr	r3, [pc, #320]	; (8010cd8 <svCLI_Handler+0x254>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	701a      	strb	r2, [r3, #0]
 8010b9c:	e08e      	b.n	8010cbc <svCLI_Handler+0x238>
      }
      else if (svBypass && (szChar == 0X1A)) {    // Ctrl+Z
 8010b9e:	4b52      	ldr	r3, [pc, #328]	; (8010ce8 <svCLI_Handler+0x264>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d014      	beq.n	8010bd0 <svCLI_Handler+0x14c>
 8010ba6:	79fb      	ldrb	r3, [r7, #7]
 8010ba8:	2b1a      	cmp	r3, #26
 8010baa:	d111      	bne.n	8010bd0 <svCLI_Handler+0x14c>
        bSkipPrompt = 1;
 8010bac:	2301      	movs	r3, #1
 8010bae:	73fb      	strb	r3, [r7, #15]
        szCLIString[scntCLIString] = 0X1A;  //Ctrl+z
 8010bb0:	4b4b      	ldr	r3, [pc, #300]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a4b      	ldr	r2, [pc, #300]	; (8010ce4 <svCLI_Handler+0x260>)
 8010bb6:	211a      	movs	r1, #26
 8010bb8:	54d1      	strb	r1, [r2, r3]
        szCLIString[scntCLIString+1] = '\0';  // NULL Termination
 8010bba:	4b49      	ldr	r3, [pc, #292]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	4a48      	ldr	r2, [pc, #288]	; (8010ce4 <svCLI_Handler+0x260>)
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	54d1      	strb	r1, [r2, r3]
        svBypass(szCLIString);
 8010bc6:	4b48      	ldr	r3, [pc, #288]	; (8010ce8 <svCLI_Handler+0x264>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4846      	ldr	r0, [pc, #280]	; (8010ce4 <svCLI_Handler+0x260>)
 8010bcc:	4798      	blx	r3
 8010bce:	e075      	b.n	8010cbc <svCLI_Handler+0x238>
      }
      else {
        if (szChar == '\b') { // Back space
 8010bd0:	79fb      	ldrb	r3, [r7, #7]
 8010bd2:	2b08      	cmp	r3, #8
 8010bd4:	d118      	bne.n	8010c08 <svCLI_Handler+0x184>
          sbInEsc = 0;
 8010bd6:	4b40      	ldr	r3, [pc, #256]	; (8010cd8 <svCLI_Handler+0x254>)
 8010bd8:	2200      	movs	r2, #0
 8010bda:	701a      	strb	r2, [r3, #0]
          if (scntCLIString > 0) {
 8010bdc:	4b40      	ldr	r3, [pc, #256]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d06b      	beq.n	8010cbc <svCLI_Handler+0x238>
            _svClearLine();
 8010be4:	f7ff fcb0 	bl	8010548 <_svClearLine>
            scntCLIString--;
 8010be8:	4b3d      	ldr	r3, [pc, #244]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	4a3c      	ldr	r2, [pc, #240]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010bf0:	6013      	str	r3, [r2, #0]
            szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010bf2:	4b3b      	ldr	r3, [pc, #236]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4a3b      	ldr	r2, [pc, #236]	; (8010ce4 <svCLI_Handler+0x260>)
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	54d1      	strb	r1, [r2, r3]
            svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 8010bfc:	4a39      	ldr	r2, [pc, #228]	; (8010ce4 <svCLI_Handler+0x260>)
 8010bfe:	493c      	ldr	r1, [pc, #240]	; (8010cf0 <svCLI_Handler+0x26c>)
 8010c00:	483e      	ldr	r0, [pc, #248]	; (8010cfc <svCLI_Handler+0x278>)
 8010c02:	f7ff fb05 	bl	8010210 <svCLI_Printf>
 8010c06:	e059      	b.n	8010cbc <svCLI_Handler+0x238>
          }
        }
        else if (szChar == '[') { // ESC sequence started
 8010c08:	79fb      	ldrb	r3, [r7, #7]
 8010c0a:	2b5b      	cmp	r3, #91	; 0x5b
 8010c0c:	d103      	bne.n	8010c16 <svCLI_Handler+0x192>
          sbInEsc = 1;
 8010c0e:	4b32      	ldr	r3, [pc, #200]	; (8010cd8 <svCLI_Handler+0x254>)
 8010c10:	2201      	movs	r2, #1
 8010c12:	701a      	strb	r2, [r3, #0]
 8010c14:	e052      	b.n	8010cbc <svCLI_Handler+0x238>
        }
        else if (_isPrintable(szChar)) {
 8010c16:	79fb      	ldrb	r3, [r7, #7]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff fbe4 	bl	80103e6 <_isPrintable>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d04b      	beq.n	8010cbc <svCLI_Handler+0x238>
          if (sbInEsc) {
 8010c24:	4b2c      	ldr	r3, [pc, #176]	; (8010cd8 <svCLI_Handler+0x254>)
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d036      	beq.n	8010c9a <svCLI_Handler+0x216>
            sbInEsc = 0;
 8010c2c:	4b2a      	ldr	r3, [pc, #168]	; (8010cd8 <svCLI_Handler+0x254>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	701a      	strb	r2, [r3, #0]
            if (snCLIHistoryCount > 0) {
 8010c32:	4b33      	ldr	r3, [pc, #204]	; (8010d00 <svCLI_Handler+0x27c>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	dd27      	ble.n	8010c8a <svCLI_Handler+0x206>
              switch (szChar) {
 8010c3a:	79fb      	ldrb	r3, [r7, #7]
 8010c3c:	2b41      	cmp	r3, #65	; 0x41
 8010c3e:	d002      	beq.n	8010c46 <svCLI_Handler+0x1c2>
 8010c40:	2b42      	cmp	r3, #66	; 0x42
 8010c42:	d011      	beq.n	8010c68 <svCLI_Handler+0x1e4>
                  // echo back
                  scntCLIString = svCLI_Printf("%s", szCLIString);
                  // echo back
                  break;
                default:  // Do Nothing
                  break;
 8010c44:	e021      	b.n	8010c8a <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_PREV);
 8010c46:	2002      	movs	r0, #2
 8010c48:	f7ff fcb4 	bl	80105b4 <svCLIHandleHistory>
                  _svClearLine();
 8010c4c:	f7ff fc7c 	bl	8010548 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 8010c50:	4827      	ldr	r0, [pc, #156]	; (8010cf0 <svCLI_Handler+0x26c>)
 8010c52:	f7ff fadd 	bl	8010210 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010c56:	4923      	ldr	r1, [pc, #140]	; (8010ce4 <svCLI_Handler+0x260>)
 8010c58:	482a      	ldr	r0, [pc, #168]	; (8010d04 <svCLI_Handler+0x280>)
 8010c5a:	f7ff fad9 	bl	8010210 <svCLI_Printf>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	461a      	mov	r2, r3
 8010c62:	4b1f      	ldr	r3, [pc, #124]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010c64:	601a      	str	r2, [r3, #0]
                  break;
 8010c66:	e010      	b.n	8010c8a <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_NEXT);
 8010c68:	2001      	movs	r0, #1
 8010c6a:	f7ff fca3 	bl	80105b4 <svCLIHandleHistory>
                  _svClearLine();
 8010c6e:	f7ff fc6b 	bl	8010548 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 8010c72:	481f      	ldr	r0, [pc, #124]	; (8010cf0 <svCLI_Handler+0x26c>)
 8010c74:	f7ff facc 	bl	8010210 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010c78:	491a      	ldr	r1, [pc, #104]	; (8010ce4 <svCLI_Handler+0x260>)
 8010c7a:	4822      	ldr	r0, [pc, #136]	; (8010d04 <svCLI_Handler+0x280>)
 8010c7c:	f7ff fac8 	bl	8010210 <svCLI_Printf>
 8010c80:	4603      	mov	r3, r0
 8010c82:	461a      	mov	r2, r3
 8010c84:	4b16      	ldr	r3, [pc, #88]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010c86:	601a      	str	r2, [r3, #0]
                  break;
 8010c88:	bf00      	nop
              }
            }
            if (svCommit) {
 8010c8a:	4b1f      	ldr	r3, [pc, #124]	; (8010d08 <svCLI_Handler+0x284>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d01c      	beq.n	8010ccc <svCLI_Handler+0x248>
              svCommit();
 8010c92:	4b1d      	ldr	r3, [pc, #116]	; (8010d08 <svCLI_Handler+0x284>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4798      	blx	r3
            }
            return;
 8010c98:	e018      	b.n	8010ccc <svCLI_Handler+0x248>
          }
          if (scntCLIString < (MAX_CLI_CHARS-1)) {
 8010c9a:	4b11      	ldr	r3, [pc, #68]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b7e      	cmp	r3, #126	; 0x7e
 8010ca0:	d80c      	bhi.n	8010cbc <svCLI_Handler+0x238>
            // echo back
            svPutChar(szChar);
 8010ca2:	4b1a      	ldr	r3, [pc, #104]	; (8010d0c <svCLI_Handler+0x288>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	79fa      	ldrb	r2, [r7, #7]
 8010ca8:	4610      	mov	r0, r2
 8010caa:	4798      	blx	r3
            szCLIString[scntCLIString++] = szChar;
 8010cac:	4b0c      	ldr	r3, [pc, #48]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	490b      	ldr	r1, [pc, #44]	; (8010ce0 <svCLI_Handler+0x25c>)
 8010cb4:	600a      	str	r2, [r1, #0]
 8010cb6:	490b      	ldr	r1, [pc, #44]	; (8010ce4 <svCLI_Handler+0x260>)
 8010cb8:	79fa      	ldrb	r2, [r7, #7]
 8010cba:	54ca      	strb	r2, [r1, r3]
          }
        }
      }
    }
  }
  if (svCommit) {
 8010cbc:	4b12      	ldr	r3, [pc, #72]	; (8010d08 <svCLI_Handler+0x284>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d004      	beq.n	8010cce <svCLI_Handler+0x24a>
    svCommit();
 8010cc4:	4b10      	ldr	r3, [pc, #64]	; (8010d08 <svCLI_Handler+0x284>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4798      	blx	r3
 8010cca:	e000      	b.n	8010cce <svCLI_Handler+0x24a>
            return;
 8010ccc:	bf00      	nop
  }
}
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	20055924 	.word	0x20055924
 8010cd8:	20055a3c 	.word	0x20055a3c
 8010cdc:	08024284 	.word	0x08024284
 8010ce0:	20055918 	.word	0x20055918
 8010ce4:	20055710 	.word	0x20055710
 8010ce8:	20055930 	.word	0x20055930
 8010cec:	20055938 	.word	0x20055938
 8010cf0:	20050068 	.word	0x20050068
 8010cf4:	20055934 	.word	0x20055934
 8010cf8:	08024358 	.word	0x08024358
 8010cfc:	0802435c 	.word	0x0802435c
 8010d00:	20055910 	.word	0x20055910
 8010d04:	08024364 	.word	0x08024364
 8010d08:	2005592c 	.word	0x2005592c
 8010d0c:	20055928 	.word	0x20055928

08010d10 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	60b9      	str	r1, [r7, #8]
 8010d1a:	607a      	str	r2, [r7, #4]
 8010d1c:	603b      	str	r3, [r7, #0]
  svCLI_ShowHelp();
 8010d1e:	f7ff faa3 	bl	8010268 <svCLI_ShowHelp>
}
 8010d22:	bf00      	nop
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 8010d2a:	b480      	push	{r7}
 8010d2c:	b085      	sub	sp, #20
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	689b      	ldr	r3, [r3, #8]
 8010d3c:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 8010d3e:	68fa      	ldr	r2, [r7, #12]
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d303      	bcc.n	8010d4e <svRingBuffer_GetCount+0x24>
	  return (h - t);
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	1ad3      	subs	r3, r2, r3
 8010d4c:	e009      	b.n	8010d62 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	68da      	ldr	r2, [r3, #12]
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	461a      	mov	r2, r3
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	441a      	add	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	1ad3      	subs	r3, r2, r3
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3714      	adds	r7, #20
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr

08010d6e <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 8010d6e:	b480      	push	{r7}
 8010d70:	b083      	sub	sp, #12
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681a      	ldr	r2, [r3, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	609a      	str	r2, [r3, #8]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	689a      	ldr	r2, [r3, #8]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	619a      	str	r2, [r3, #24]
}
 8010d92:	bf00      	nop
 8010d94:	370c      	adds	r7, #12
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr

08010d9e <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 8010d9e:	b480      	push	{r7}
 8010da0:	b085      	sub	sp, #20
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
 8010da6:	460b      	mov	r3, r1
 8010da8:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 8010daa:	2300      	movs	r3, #0
 8010dac:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	78fa      	ldrb	r2, [r7, #3]
 8010db4:	701a      	strb	r2, [r3, #0]
	rb->head++;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	1c5a      	adds	r2, r3, #1
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d109      	bne.n	8010de0 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	619a      	str	r2, [r3, #24]
		nRet = -1;
 8010dda:	f04f 33ff 	mov.w	r3, #4294967295
 8010dde:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685a      	ldr	r2, [r3, #4]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d105      	bne.n	8010df8 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2201      	movs	r2, #1
 8010df0:	615a      	str	r2, [r3, #20]
		nRet = -2;
 8010df2:	f06f 0301 	mvn.w	r3, #1
 8010df6:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 8010df8:	68fb      	ldr	r3, [r7, #12]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3714      	adds	r7, #20
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr

08010e06 <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 8010e06:	b480      	push	{r7}
 8010e08:	b085      	sub	sp, #20
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	1c5a      	adds	r2, r3, #1
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	689a      	ldr	r2, [r3, #8]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d103      	bne.n	8010e34 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	609a      	str	r2, [r3, #8]
	return byData;
 8010e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
	...

08010e44 <__NVIC_SetPriority>:
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	6039      	str	r1, [r7, #0]
 8010e4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	db0a      	blt.n	8010e6e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	b2da      	uxtb	r2, r3
 8010e5c:	490c      	ldr	r1, [pc, #48]	; (8010e90 <__NVIC_SetPriority+0x4c>)
 8010e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e62:	0112      	lsls	r2, r2, #4
 8010e64:	b2d2      	uxtb	r2, r2
 8010e66:	440b      	add	r3, r1
 8010e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010e6c:	e00a      	b.n	8010e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4908      	ldr	r1, [pc, #32]	; (8010e94 <__NVIC_SetPriority+0x50>)
 8010e74:	88fb      	ldrh	r3, [r7, #6]
 8010e76:	f003 030f 	and.w	r3, r3, #15
 8010e7a:	3b04      	subs	r3, #4
 8010e7c:	0112      	lsls	r2, r2, #4
 8010e7e:	b2d2      	uxtb	r2, r2
 8010e80:	440b      	add	r3, r1
 8010e82:	761a      	strb	r2, [r3, #24]
}
 8010e84:	bf00      	nop
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr
 8010e90:	e000e100 	.word	0xe000e100
 8010e94:	e000ed00 	.word	0xe000ed00

08010e98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8010e9c:	4b05      	ldr	r3, [pc, #20]	; (8010eb4 <SysTick_Handler+0x1c>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010ea0:	f002 fcc2 	bl	8013828 <xTaskGetSchedulerState>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d001      	beq.n	8010eae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010eaa:	f003 fa29 	bl	8014300 <xPortSysTickHandler>
  }
}
 8010eae:	bf00      	nop
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	e000e010 	.word	0xe000e010

08010eb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	f06f 0004 	mvn.w	r0, #4
 8010ec2:	f7ff ffbf 	bl	8010e44 <__NVIC_SetPriority>
#endif
}
 8010ec6:	bf00      	nop
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b086      	sub	sp, #24
 8010ece:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ed4:	f3ef 8305 	mrs	r3, IPSR
 8010ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010eda:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	617b      	str	r3, [r7, #20]
 8010ee4:	e013      	b.n	8010f0e <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8010ee6:	f002 fc9f 	bl	8013828 <xTaskGetSchedulerState>
 8010eea:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d00d      	beq.n	8010f0e <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ef6:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ef8:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d105      	bne.n	8010f0a <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010efe:	f3ef 8311 	mrs	r3, BASEPRI
 8010f02:	607b      	str	r3, [r7, #4]
  return(result);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d001      	beq.n	8010f0e <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8010f0e:	697b      	ldr	r3, [r7, #20]
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3718      	adds	r7, #24
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8010f1e:	f7ff ffd4 	bl	8010eca <IRQ_Context>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d003      	beq.n	8010f30 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8010f28:	f06f 0305 	mvn.w	r3, #5
 8010f2c:	607b      	str	r3, [r7, #4]
 8010f2e:	e012      	b.n	8010f56 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8010f30:	f002 fc7a 	bl	8013828 <xTaskGetSchedulerState>
 8010f34:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d109      	bne.n	8010f50 <osKernelInitialize+0x38>
 8010f3c:	4b08      	ldr	r3, [pc, #32]	; (8010f60 <osKernelInitialize+0x48>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d105      	bne.n	8010f50 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010f44:	4b06      	ldr	r3, [pc, #24]	; (8010f60 <osKernelInitialize+0x48>)
 8010f46:	2201      	movs	r2, #1
 8010f48:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	607b      	str	r3, [r7, #4]
 8010f4e:	e002      	b.n	8010f56 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8010f50:	f04f 33ff 	mov.w	r3, #4294967295
 8010f54:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8010f56:	687b      	ldr	r3, [r7, #4]
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	20055a40 	.word	0x20055a40

08010f64 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8010f6a:	f7ff ffae 	bl	8010eca <IRQ_Context>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d003      	beq.n	8010f7c <osKernelStart+0x18>
    stat = osErrorISR;
 8010f74:	f06f 0305 	mvn.w	r3, #5
 8010f78:	607b      	str	r3, [r7, #4]
 8010f7a:	e016      	b.n	8010faa <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8010f7c:	f002 fc54 	bl	8013828 <xTaskGetSchedulerState>
 8010f80:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d10d      	bne.n	8010fa4 <osKernelStart+0x40>
 8010f88:	4b0a      	ldr	r3, [pc, #40]	; (8010fb4 <osKernelStart+0x50>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d109      	bne.n	8010fa4 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010f90:	f7ff ff92 	bl	8010eb8 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8010f94:	4b07      	ldr	r3, [pc, #28]	; (8010fb4 <osKernelStart+0x50>)
 8010f96:	2202      	movs	r2, #2
 8010f98:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010f9a:	f001 feed 	bl	8012d78 <vTaskStartScheduler>
      stat = osOK;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	607b      	str	r3, [r7, #4]
 8010fa2:	e002      	b.n	8010faa <osKernelStart+0x46>
    } else {
      stat = osError;
 8010fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8010faa:	687b      	ldr	r3, [r7, #4]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3708      	adds	r7, #8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	20055a40 	.word	0x20055a40

08010fb8 <osKernelGetTickCount>:
}

/*
  Get the RTOS kernel tick count.
*/
uint32_t osKernelGetTickCount (void) {
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
  TickType_t ticks;

  if (IRQ_Context() != 0U) {
 8010fbe:	f7ff ff84 	bl	8010eca <IRQ_Context>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d003      	beq.n	8010fd0 <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
 8010fc8:	f002 f83a 	bl	8013040 <xTaskGetTickCountFromISR>
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	e002      	b.n	8010fd6 <osKernelGetTickCount+0x1e>
  } else {
    ticks = xTaskGetTickCount();
 8010fd0:	f002 f826 	bl	8013020 <xTaskGetTickCount>
 8010fd4:	6078      	str	r0, [r7, #4]
  }

  /* Return kernel tick count */
  return (ticks);
 8010fd6:	687b      	ldr	r3, [r7, #4]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3708      	adds	r7, #8
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b08e      	sub	sp, #56	; 0x38
 8010fe4:	af04      	add	r7, sp, #16
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010fec:	2300      	movs	r3, #0
 8010fee:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8010ff0:	f7ff ff6b 	bl	8010eca <IRQ_Context>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d17f      	bne.n	80110fa <osThreadNew+0x11a>
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d07c      	beq.n	80110fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011004:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011006:	2318      	movs	r3, #24
 8011008:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801100a:	2300      	movs	r3, #0
 801100c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801100e:	f04f 33ff 	mov.w	r3, #4294967295
 8011012:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d045      	beq.n	80110a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d002      	beq.n	8011028 <osThreadNew+0x48>
        name = attr->name;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	699b      	ldr	r3, [r3, #24]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d002      	beq.n	8011036 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	699b      	ldr	r3, [r3, #24]
 8011034:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d008      	beq.n	801104e <osThreadNew+0x6e>
 801103c:	69fb      	ldr	r3, [r7, #28]
 801103e:	2b38      	cmp	r3, #56	; 0x38
 8011040:	d805      	bhi.n	801104e <osThreadNew+0x6e>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	f003 0301 	and.w	r3, r3, #1
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 801104e:	2300      	movs	r3, #0
 8011050:	e054      	b.n	80110fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	695b      	ldr	r3, [r3, #20]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d003      	beq.n	8011062 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	695b      	ldr	r3, [r3, #20]
 801105e:	089b      	lsrs	r3, r3, #2
 8011060:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	689b      	ldr	r3, [r3, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d00e      	beq.n	8011088 <osThreadNew+0xa8>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	2b5b      	cmp	r3, #91	; 0x5b
 8011070:	d90a      	bls.n	8011088 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011076:	2b00      	cmp	r3, #0
 8011078:	d006      	beq.n	8011088 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	695b      	ldr	r3, [r3, #20]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d002      	beq.n	8011088 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8011082:	2301      	movs	r3, #1
 8011084:	61bb      	str	r3, [r7, #24]
 8011086:	e010      	b.n	80110aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	689b      	ldr	r3, [r3, #8]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d10c      	bne.n	80110aa <osThreadNew+0xca>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d108      	bne.n	80110aa <osThreadNew+0xca>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	691b      	ldr	r3, [r3, #16]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d104      	bne.n	80110aa <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 80110a0:	2300      	movs	r3, #0
 80110a2:	61bb      	str	r3, [r7, #24]
 80110a4:	e001      	b.n	80110aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d110      	bne.n	80110d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80110b8:	9202      	str	r2, [sp, #8]
 80110ba:	9301      	str	r3, [sp, #4]
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	6a3a      	ldr	r2, [r7, #32]
 80110c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f001 fc8e 	bl	80129e8 <xTaskCreateStatic>
 80110cc:	4603      	mov	r3, r0
 80110ce:	617b      	str	r3, [r7, #20]
 80110d0:	e013      	b.n	80110fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d110      	bne.n	80110fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 80110d8:	6a3b      	ldr	r3, [r7, #32]
 80110da:	b29a      	uxth	r2, r3
 80110dc:	f107 0314 	add.w	r3, r7, #20
 80110e0:	9301      	str	r3, [sp, #4]
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110ea:	68f8      	ldr	r0, [r7, #12]
 80110ec:	f001 fcc6 	bl	8012a7c <xTaskCreate>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d001      	beq.n	80110fa <osThreadNew+0x11a>
            hTask = NULL;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 80110fa:	697b      	ldr	r3, [r7, #20]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3728      	adds	r7, #40	; 0x28
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 801110c:	f7ff fedd 	bl	8010eca <IRQ_Context>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d003      	beq.n	801111e <osDelay+0x1a>
    stat = osErrorISR;
 8011116:	f06f 0305 	mvn.w	r3, #5
 801111a:	60fb      	str	r3, [r7, #12]
 801111c:	e007      	b.n	801112e <osDelay+0x2a>
  }
  else {
    stat = osOK;
 801111e:	2300      	movs	r3, #0
 8011120:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d002      	beq.n	801112e <osDelay+0x2a>
      vTaskDelay(ticks);
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f001 fe01 	bl	8012d30 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 801112e:	68fb      	ldr	r3, [r7, #12]
}
 8011130:	4618      	mov	r0, r3
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 8011140:	2300      	movs	r3, #0
 8011142:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 8011144:	f7ff fec1 	bl	8010eca <IRQ_Context>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d174      	bne.n	8011238 <osMutexNew+0x100>
    if (attr != NULL) {
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d003      	beq.n	801115c <osMutexNew+0x24>
      type = attr->attr_bits;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	613b      	str	r3, [r7, #16]
 801115a:	e001      	b.n	8011160 <osMutexNew+0x28>
    } else {
      type = 0U;
 801115c:	2300      	movs	r3, #0
 801115e:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	f003 0301 	and.w	r3, r3, #1
 8011166:	2b00      	cmp	r3, #0
 8011168:	d002      	beq.n	8011170 <osMutexNew+0x38>
      rmtx = 1U;
 801116a:	2301      	movs	r3, #1
 801116c:	60fb      	str	r3, [r7, #12]
 801116e:	e001      	b.n	8011174 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 8011170:	2300      	movs	r3, #0
 8011172:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	f003 0308 	and.w	r3, r3, #8
 801117a:	2b00      	cmp	r3, #0
 801117c:	d15c      	bne.n	8011238 <osMutexNew+0x100>
      mem = -1;
 801117e:	f04f 33ff 	mov.w	r3, #4294967295
 8011182:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d015      	beq.n	80111b6 <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	689b      	ldr	r3, [r3, #8]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d006      	beq.n	80111a0 <osMutexNew+0x68>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	2b4f      	cmp	r3, #79	; 0x4f
 8011198:	d902      	bls.n	80111a0 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 801119a:	2301      	movs	r3, #1
 801119c:	60bb      	str	r3, [r7, #8]
 801119e:	e00c      	b.n	80111ba <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d108      	bne.n	80111ba <osMutexNew+0x82>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d104      	bne.n	80111ba <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 80111b0:	2300      	movs	r3, #0
 80111b2:	60bb      	str	r3, [r7, #8]
 80111b4:	e001      	b.n	80111ba <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d112      	bne.n	80111e6 <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d007      	beq.n	80111d6 <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	689b      	ldr	r3, [r3, #8]
 80111ca:	4619      	mov	r1, r3
 80111cc:	2004      	movs	r0, #4
 80111ce:	f000 fd7b 	bl	8011cc8 <xQueueCreateMutexStatic>
 80111d2:	6178      	str	r0, [r7, #20]
 80111d4:	e016      	b.n	8011204 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	4619      	mov	r1, r3
 80111dc:	2001      	movs	r0, #1
 80111de:	f000 fd73 	bl	8011cc8 <xQueueCreateMutexStatic>
 80111e2:	6178      	str	r0, [r7, #20]
 80111e4:	e00e      	b.n	8011204 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10b      	bne.n	8011204 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d004      	beq.n	80111fc <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80111f2:	2004      	movs	r0, #4
 80111f4:	f000 fd50 	bl	8011c98 <xQueueCreateMutex>
 80111f8:	6178      	str	r0, [r7, #20]
 80111fa:	e003      	b.n	8011204 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80111fc:	2001      	movs	r0, #1
 80111fe:	f000 fd4b 	bl	8011c98 <xQueueCreateMutex>
 8011202:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00c      	beq.n	8011224 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d009      	beq.n	8011224 <osMutexNew+0xec>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d005      	beq.n	8011224 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4619      	mov	r1, r3
 801121e:	6978      	ldr	r0, [r7, #20]
 8011220:	f001 fb3c 	bl	801289c <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d006      	beq.n	8011238 <osMutexNew+0x100>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d003      	beq.n	8011238 <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	f043 0301 	orr.w	r3, r3, #1
 8011236:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 8011238:	697b      	ldr	r3, [r7, #20]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011242:	b580      	push	{r7, lr}
 8011244:	b086      	sub	sp, #24
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
 801124a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f023 0301 	bic.w	r3, r3, #1
 8011252:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f003 0301 	and.w	r3, r3, #1
 801125a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801125c:	2300      	movs	r3, #0
 801125e:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 8011260:	f7ff fe33 	bl	8010eca <IRQ_Context>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d003      	beq.n	8011272 <osMutexAcquire+0x30>
    stat = osErrorISR;
 801126a:	f06f 0305 	mvn.w	r3, #5
 801126e:	617b      	str	r3, [r7, #20]
 8011270:	e02c      	b.n	80112cc <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d103      	bne.n	8011280 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
 8011278:	f06f 0303 	mvn.w	r3, #3
 801127c:	617b      	str	r3, [r7, #20]
 801127e:	e025      	b.n	80112cc <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d011      	beq.n	80112aa <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	6938      	ldr	r0, [r7, #16]
 801128a:	f000 fd64 	bl	8011d56 <xQueueTakeMutexRecursive>
 801128e:	4603      	mov	r3, r0
 8011290:	2b01      	cmp	r3, #1
 8011292:	d01b      	beq.n	80112cc <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d003      	beq.n	80112a2 <osMutexAcquire+0x60>
          stat = osErrorTimeout;
 801129a:	f06f 0301 	mvn.w	r3, #1
 801129e:	617b      	str	r3, [r7, #20]
 80112a0:	e014      	b.n	80112cc <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 80112a2:	f06f 0302 	mvn.w	r3, #2
 80112a6:	617b      	str	r3, [r7, #20]
 80112a8:	e010      	b.n	80112cc <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80112aa:	6839      	ldr	r1, [r7, #0]
 80112ac:	6938      	ldr	r0, [r7, #16]
 80112ae:	f001 f844 	bl	801233a <xQueueSemaphoreTake>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d009      	beq.n	80112cc <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d003      	beq.n	80112c6 <osMutexAcquire+0x84>
          stat = osErrorTimeout;
 80112be:	f06f 0301 	mvn.w	r3, #1
 80112c2:	617b      	str	r3, [r7, #20]
 80112c4:	e002      	b.n	80112cc <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 80112c6:	f06f 0302 	mvn.w	r3, #2
 80112ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 80112cc:	697b      	ldr	r3, [r7, #20]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3718      	adds	r7, #24
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b086      	sub	sp, #24
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f023 0301 	bic.w	r3, r3, #1
 80112e4:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f003 0301 	and.w	r3, r3, #1
 80112ec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80112ee:	2300      	movs	r3, #0
 80112f0:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 80112f2:	f7ff fdea 	bl	8010eca <IRQ_Context>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d003      	beq.n	8011304 <osMutexRelease+0x2e>
    stat = osErrorISR;
 80112fc:	f06f 0305 	mvn.w	r3, #5
 8011300:	617b      	str	r3, [r7, #20]
 8011302:	e01f      	b.n	8011344 <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d103      	bne.n	8011312 <osMutexRelease+0x3c>
    stat = osErrorParameter;
 801130a:	f06f 0303 	mvn.w	r3, #3
 801130e:	617b      	str	r3, [r7, #20]
 8011310:	e018      	b.n	8011344 <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d009      	beq.n	801132c <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011318:	6938      	ldr	r0, [r7, #16]
 801131a:	f000 fcf0 	bl	8011cfe <xQueueGiveMutexRecursive>
 801131e:	4603      	mov	r3, r0
 8011320:	2b01      	cmp	r3, #1
 8011322:	d00f      	beq.n	8011344 <osMutexRelease+0x6e>
        stat = osErrorResource;
 8011324:	f06f 0302 	mvn.w	r3, #2
 8011328:	617b      	str	r3, [r7, #20]
 801132a:	e00b      	b.n	8011344 <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801132c:	2300      	movs	r3, #0
 801132e:	2200      	movs	r2, #0
 8011330:	2100      	movs	r1, #0
 8011332:	6938      	ldr	r0, [r7, #16]
 8011334:	f000 fd8d 	bl	8011e52 <xQueueGenericSend>
 8011338:	4603      	mov	r3, r0
 801133a:	2b01      	cmp	r3, #1
 801133c:	d002      	beq.n	8011344 <osMutexRelease+0x6e>
        stat = osErrorResource;
 801133e:	f06f 0302 	mvn.w	r3, #2
 8011342:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8011344:	697b      	ldr	r3, [r7, #20]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3718      	adds	r7, #24
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}

0801134e <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801134e:	b580      	push	{r7, lr}
 8011350:	b088      	sub	sp, #32
 8011352:	af02      	add	r7, sp, #8
 8011354:	60f8      	str	r0, [r7, #12]
 8011356:	60b9      	str	r1, [r7, #8]
 8011358:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 801135a:	2300      	movs	r3, #0
 801135c:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 801135e:	f7ff fdb4 	bl	8010eca <IRQ_Context>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d175      	bne.n	8011454 <osSemaphoreNew+0x106>
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d072      	beq.n	8011454 <osSemaphoreNew+0x106>
 801136e:	68ba      	ldr	r2, [r7, #8]
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	429a      	cmp	r2, r3
 8011374:	d86e      	bhi.n	8011454 <osSemaphoreNew+0x106>
    mem = -1;
 8011376:	f04f 33ff 	mov.w	r3, #4294967295
 801137a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d015      	beq.n	80113ae <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d006      	beq.n	8011398 <osSemaphoreNew+0x4a>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	2b4f      	cmp	r3, #79	; 0x4f
 8011390:	d902      	bls.n	8011398 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 8011392:	2301      	movs	r3, #1
 8011394:	613b      	str	r3, [r7, #16]
 8011396:	e00c      	b.n	80113b2 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d108      	bne.n	80113b2 <osSemaphoreNew+0x64>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d104      	bne.n	80113b2 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 80113a8:	2300      	movs	r3, #0
 80113aa:	613b      	str	r3, [r7, #16]
 80113ac:	e001      	b.n	80113b2 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 80113ae:	2300      	movs	r3, #0
 80113b0:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113b8:	d04c      	beq.n	8011454 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d128      	bne.n	8011412 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d10a      	bne.n	80113dc <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	689b      	ldr	r3, [r3, #8]
 80113ca:	2203      	movs	r2, #3
 80113cc:	9200      	str	r2, [sp, #0]
 80113ce:	2200      	movs	r2, #0
 80113d0:	2100      	movs	r1, #0
 80113d2:	2001      	movs	r0, #1
 80113d4:	f000 fb93 	bl	8011afe <xQueueGenericCreateStatic>
 80113d8:	6178      	str	r0, [r7, #20]
 80113da:	e005      	b.n	80113e8 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80113dc:	2203      	movs	r2, #3
 80113de:	2100      	movs	r1, #0
 80113e0:	2001      	movs	r0, #1
 80113e2:	f000 fbd2 	bl	8011b8a <xQueueGenericCreate>
 80113e6:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d022      	beq.n	8011434 <osSemaphoreNew+0xe6>
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d01f      	beq.n	8011434 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80113f4:	2300      	movs	r3, #0
 80113f6:	2200      	movs	r2, #0
 80113f8:	2100      	movs	r1, #0
 80113fa:	6978      	ldr	r0, [r7, #20]
 80113fc:	f000 fd29 	bl	8011e52 <xQueueGenericSend>
 8011400:	4603      	mov	r3, r0
 8011402:	2b01      	cmp	r3, #1
 8011404:	d016      	beq.n	8011434 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 8011406:	6978      	ldr	r0, [r7, #20]
 8011408:	f001 f905 	bl	8012616 <vQueueDelete>
            hSemaphore = NULL;
 801140c:	2300      	movs	r3, #0
 801140e:	617b      	str	r3, [r7, #20]
 8011410:	e010      	b.n	8011434 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	2b01      	cmp	r3, #1
 8011416:	d108      	bne.n	801142a <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	461a      	mov	r2, r3
 801141e:	68b9      	ldr	r1, [r7, #8]
 8011420:	68f8      	ldr	r0, [r7, #12]
 8011422:	f000 fcc6 	bl	8011db2 <xQueueCreateCountingSemaphoreStatic>
 8011426:	6178      	str	r0, [r7, #20]
 8011428:	e004      	b.n	8011434 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801142a:	68b9      	ldr	r1, [r7, #8]
 801142c:	68f8      	ldr	r0, [r7, #12]
 801142e:	f000 fcea 	bl	8011e06 <xQueueCreateCountingSemaphore>
 8011432:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00c      	beq.n	8011454 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d009      	beq.n	8011454 <osSemaphoreNew+0x106>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d005      	beq.n	8011454 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4619      	mov	r1, r3
 801144e:	6978      	ldr	r0, [r7, #20]
 8011450:	f001 fa24 	bl	801289c <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 8011454:	697b      	ldr	r3, [r7, #20]
}
 8011456:	4618      	mov	r0, r3
 8011458:	3718      	adds	r7, #24
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
	...

08011460 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011460:	b580      	push	{r7, lr}
 8011462:	b086      	sub	sp, #24
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801146e:	2300      	movs	r3, #0
 8011470:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d103      	bne.n	8011480 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011478:	f06f 0303 	mvn.w	r3, #3
 801147c:	617b      	str	r3, [r7, #20]
 801147e:	e034      	b.n	80114ea <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 8011480:	f7ff fd23 	bl	8010eca <IRQ_Context>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d01e      	beq.n	80114c8 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d003      	beq.n	8011498 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 8011490:	f06f 0303 	mvn.w	r3, #3
 8011494:	617b      	str	r3, [r7, #20]
 8011496:	e028      	b.n	80114ea <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 8011498:	2300      	movs	r3, #0
 801149a:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801149c:	f107 030c 	add.w	r3, r7, #12
 80114a0:	461a      	mov	r2, r3
 80114a2:	2100      	movs	r1, #0
 80114a4:	6938      	ldr	r0, [r7, #16]
 80114a6:	f001 f81f 	bl	80124e8 <xQueueReceiveFromISR>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d003      	beq.n	80114b8 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 80114b0:	f06f 0302 	mvn.w	r3, #2
 80114b4:	617b      	str	r3, [r7, #20]
 80114b6:	e018      	b.n	80114ea <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d015      	beq.n	80114ea <osSemaphoreAcquire+0x8a>
 80114be:	4b0d      	ldr	r3, [pc, #52]	; (80114f4 <osSemaphoreAcquire+0x94>)
 80114c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114c4:	601a      	str	r2, [r3, #0]
 80114c6:	e010      	b.n	80114ea <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80114c8:	6839      	ldr	r1, [r7, #0]
 80114ca:	6938      	ldr	r0, [r7, #16]
 80114cc:	f000 ff35 	bl	801233a <xQueueSemaphoreTake>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d009      	beq.n	80114ea <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d003      	beq.n	80114e4 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 80114dc:	f06f 0301 	mvn.w	r3, #1
 80114e0:	617b      	str	r3, [r7, #20]
 80114e2:	e002      	b.n	80114ea <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 80114e4:	f06f 0302 	mvn.w	r3, #2
 80114e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 80114ea:	697b      	ldr	r3, [r7, #20]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3718      	adds	r7, #24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	e000ed04 	.word	0xe000ed04

080114f8 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011504:	2300      	movs	r3, #0
 8011506:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d103      	bne.n	8011516 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801150e:	f06f 0303 	mvn.w	r3, #3
 8011512:	617b      	str	r3, [r7, #20]
 8011514:	e027      	b.n	8011566 <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 8011516:	f7ff fcd8 	bl	8010eca <IRQ_Context>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d016      	beq.n	801154e <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 8011520:	2300      	movs	r3, #0
 8011522:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011524:	f107 030c 	add.w	r3, r7, #12
 8011528:	4619      	mov	r1, r3
 801152a:	6938      	ldr	r0, [r7, #16]
 801152c:	f000 fdda 	bl	80120e4 <xQueueGiveFromISR>
 8011530:	4603      	mov	r3, r0
 8011532:	2b01      	cmp	r3, #1
 8011534:	d003      	beq.n	801153e <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8011536:	f06f 0302 	mvn.w	r3, #2
 801153a:	617b      	str	r3, [r7, #20]
 801153c:	e013      	b.n	8011566 <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d010      	beq.n	8011566 <osSemaphoreRelease+0x6e>
 8011544:	4b0a      	ldr	r3, [pc, #40]	; (8011570 <osSemaphoreRelease+0x78>)
 8011546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801154a:	601a      	str	r2, [r3, #0]
 801154c:	e00b      	b.n	8011566 <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801154e:	2300      	movs	r3, #0
 8011550:	2200      	movs	r2, #0
 8011552:	2100      	movs	r1, #0
 8011554:	6938      	ldr	r0, [r7, #16]
 8011556:	f000 fc7c 	bl	8011e52 <xQueueGenericSend>
 801155a:	4603      	mov	r3, r0
 801155c:	2b01      	cmp	r3, #1
 801155e:	d002      	beq.n	8011566 <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 8011560:	f06f 0302 	mvn.w	r3, #2
 8011564:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 8011566:	697b      	ldr	r3, [r7, #20]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3718      	adds	r7, #24
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	e000ed04 	.word	0xe000ed04

08011574 <osSemaphoreDelete>:
}

/*
  Delete a Semaphore object.
*/
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 8011580:	f7ff fca3 	bl	8010eca <IRQ_Context>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d003      	beq.n	8011592 <osSemaphoreDelete+0x1e>
    stat = osErrorISR;
 801158a:	f06f 0305 	mvn.w	r3, #5
 801158e:	60fb      	str	r3, [r7, #12]
 8011590:	e00e      	b.n	80115b0 <osSemaphoreDelete+0x3c>
  }
  else if (hSemaphore == NULL) {
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d103      	bne.n	80115a0 <osSemaphoreDelete+0x2c>
    stat = osErrorParameter;
 8011598:	f06f 0303 	mvn.w	r3, #3
 801159c:	60fb      	str	r3, [r7, #12]
 801159e:	e007      	b.n	80115b0 <osSemaphoreDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80115a0:	68b8      	ldr	r0, [r7, #8]
 80115a2:	f001 f9bf 	bl	8012924 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	60fb      	str	r3, [r7, #12]
    vSemaphoreDelete (hSemaphore);
 80115aa:	68b8      	ldr	r0, [r7, #8]
 80115ac:	f001 f833 	bl	8012616 <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 80115b0:	68fb      	ldr	r3, [r7, #12]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b088      	sub	sp, #32
 80115be:	af02      	add	r7, sp, #8
 80115c0:	60f8      	str	r0, [r7, #12]
 80115c2:	60b9      	str	r1, [r7, #8]
 80115c4:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 80115c6:	2300      	movs	r3, #0
 80115c8:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 80115ca:	f7ff fc7e 	bl	8010eca <IRQ_Context>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d15f      	bne.n	8011694 <osMessageQueueNew+0xda>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d05c      	beq.n	8011694 <osMessageQueueNew+0xda>
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d059      	beq.n	8011694 <osMessageQueueNew+0xda>
    mem = -1;
 80115e0:	f04f 33ff 	mov.w	r3, #4294967295
 80115e4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d029      	beq.n	8011640 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d012      	beq.n	801161a <osMessageQueueNew+0x60>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	2b4f      	cmp	r3, #79	; 0x4f
 80115fa:	d90e      	bls.n	801161a <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011600:	2b00      	cmp	r3, #0
 8011602:	d00a      	beq.n	801161a <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	695a      	ldr	r2, [r3, #20]
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	68b9      	ldr	r1, [r7, #8]
 801160c:	fb01 f303 	mul.w	r3, r1, r3
 8011610:	429a      	cmp	r2, r3
 8011612:	d302      	bcc.n	801161a <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8011614:	2301      	movs	r3, #1
 8011616:	613b      	str	r3, [r7, #16]
 8011618:	e014      	b.n	8011644 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d110      	bne.n	8011644 <osMessageQueueNew+0x8a>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	68db      	ldr	r3, [r3, #12]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d10c      	bne.n	8011644 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801162e:	2b00      	cmp	r3, #0
 8011630:	d108      	bne.n	8011644 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	695b      	ldr	r3, [r3, #20]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d104      	bne.n	8011644 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	613b      	str	r3, [r7, #16]
 801163e:	e001      	b.n	8011644 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	2b01      	cmp	r3, #1
 8011648:	d10b      	bne.n	8011662 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	691a      	ldr	r2, [r3, #16]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	2100      	movs	r1, #0
 8011654:	9100      	str	r1, [sp, #0]
 8011656:	68b9      	ldr	r1, [r7, #8]
 8011658:	68f8      	ldr	r0, [r7, #12]
 801165a:	f000 fa50 	bl	8011afe <xQueueGenericCreateStatic>
 801165e:	6178      	str	r0, [r7, #20]
 8011660:	e008      	b.n	8011674 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d105      	bne.n	8011674 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011668:	2200      	movs	r2, #0
 801166a:	68b9      	ldr	r1, [r7, #8]
 801166c:	68f8      	ldr	r0, [r7, #12]
 801166e:	f000 fa8c 	bl	8011b8a <xQueueGenericCreate>
 8011672:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00c      	beq.n	8011694 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d009      	beq.n	8011694 <osMessageQueueNew+0xda>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d005      	beq.n	8011694 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	4619      	mov	r1, r3
 801168e:	6978      	ldr	r0, [r7, #20]
 8011690:	f001 f904 	bl	801289c <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 8011694:	697b      	ldr	r3, [r7, #20]
}
 8011696:	4618      	mov	r0, r3
 8011698:	3718      	adds	r7, #24
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
	...

080116a0 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b088      	sub	sp, #32
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	60f8      	str	r0, [r7, #12]
 80116a8:	60b9      	str	r1, [r7, #8]
 80116aa:	603b      	str	r3, [r7, #0]
 80116ac:	4613      	mov	r3, r2
 80116ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80116b4:	2300      	movs	r3, #0
 80116b6:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 80116b8:	f7ff fc07 	bl	8010eca <IRQ_Context>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d024      	beq.n	801170c <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d005      	beq.n	80116d4 <osMessageQueuePut+0x34>
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d002      	beq.n	80116d4 <osMessageQueuePut+0x34>
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d003      	beq.n	80116dc <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 80116d4:	f06f 0303 	mvn.w	r3, #3
 80116d8:	61fb      	str	r3, [r7, #28]
 80116da:	e034      	b.n	8011746 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 80116dc:	2300      	movs	r3, #0
 80116de:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80116e0:	f107 0214 	add.w	r2, r7, #20
 80116e4:	2300      	movs	r3, #0
 80116e6:	68b9      	ldr	r1, [r7, #8]
 80116e8:	69b8      	ldr	r0, [r7, #24]
 80116ea:	f000 fc7b 	bl	8011fe4 <xQueueGenericSendFromISR>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d003      	beq.n	80116fc <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 80116f4:	f06f 0302 	mvn.w	r3, #2
 80116f8:	61fb      	str	r3, [r7, #28]
 80116fa:	e024      	b.n	8011746 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d021      	beq.n	8011746 <osMessageQueuePut+0xa6>
 8011702:	4b13      	ldr	r3, [pc, #76]	; (8011750 <osMessageQueuePut+0xb0>)
 8011704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011708:	601a      	str	r2, [r3, #0]
 801170a:	e01c      	b.n	8011746 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801170c:	69bb      	ldr	r3, [r7, #24]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <osMessageQueuePut+0x78>
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d103      	bne.n	8011720 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 8011718:	f06f 0303 	mvn.w	r3, #3
 801171c:	61fb      	str	r3, [r7, #28]
 801171e:	e012      	b.n	8011746 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011720:	2300      	movs	r3, #0
 8011722:	683a      	ldr	r2, [r7, #0]
 8011724:	68b9      	ldr	r1, [r7, #8]
 8011726:	69b8      	ldr	r0, [r7, #24]
 8011728:	f000 fb93 	bl	8011e52 <xQueueGenericSend>
 801172c:	4603      	mov	r3, r0
 801172e:	2b01      	cmp	r3, #1
 8011730:	d009      	beq.n	8011746 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d003      	beq.n	8011740 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 8011738:	f06f 0301 	mvn.w	r3, #1
 801173c:	61fb      	str	r3, [r7, #28]
 801173e:	e002      	b.n	8011746 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 8011740:	f06f 0302 	mvn.w	r3, #2
 8011744:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8011746:	69fb      	ldr	r3, [r7, #28]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3720      	adds	r7, #32
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	e000ed04 	.word	0xe000ed04

08011754 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011754:	b580      	push	{r7, lr}
 8011756:	b088      	sub	sp, #32
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	607a      	str	r2, [r7, #4]
 8011760:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011766:	2300      	movs	r3, #0
 8011768:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 801176a:	f7ff fbae 	bl	8010eca <IRQ_Context>
 801176e:	4603      	mov	r3, r0
 8011770:	2b00      	cmp	r3, #0
 8011772:	d024      	beq.n	80117be <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d005      	beq.n	8011786 <osMessageQueueGet+0x32>
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d002      	beq.n	8011786 <osMessageQueueGet+0x32>
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d003      	beq.n	801178e <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8011786:	f06f 0303 	mvn.w	r3, #3
 801178a:	61fb      	str	r3, [r7, #28]
 801178c:	e033      	b.n	80117f6 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 801178e:	2300      	movs	r3, #0
 8011790:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011792:	f107 0314 	add.w	r3, r7, #20
 8011796:	461a      	mov	r2, r3
 8011798:	68b9      	ldr	r1, [r7, #8]
 801179a:	69b8      	ldr	r0, [r7, #24]
 801179c:	f000 fea4 	bl	80124e8 <xQueueReceiveFromISR>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d003      	beq.n	80117ae <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 80117a6:	f06f 0302 	mvn.w	r3, #2
 80117aa:	61fb      	str	r3, [r7, #28]
 80117ac:	e023      	b.n	80117f6 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d020      	beq.n	80117f6 <osMessageQueueGet+0xa2>
 80117b4:	4b12      	ldr	r3, [pc, #72]	; (8011800 <osMessageQueueGet+0xac>)
 80117b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ba:	601a      	str	r2, [r3, #0]
 80117bc:	e01b      	b.n	80117f6 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <osMessageQueueGet+0x76>
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d103      	bne.n	80117d2 <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 80117ca:	f06f 0303 	mvn.w	r3, #3
 80117ce:	61fb      	str	r3, [r7, #28]
 80117d0:	e011      	b.n	80117f6 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80117d2:	683a      	ldr	r2, [r7, #0]
 80117d4:	68b9      	ldr	r1, [r7, #8]
 80117d6:	69b8      	ldr	r0, [r7, #24]
 80117d8:	f000 fcf6 	bl	80121c8 <xQueueReceive>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d009      	beq.n	80117f6 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d003      	beq.n	80117f0 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 80117e8:	f06f 0301 	mvn.w	r3, #1
 80117ec:	61fb      	str	r3, [r7, #28]
 80117ee:	e002      	b.n	80117f6 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 80117f0:	f06f 0302 	mvn.w	r3, #2
 80117f4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 80117f6:	69fb      	ldr	r3, [r7, #28]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3720      	adds	r7, #32
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	e000ed04 	.word	0xe000ed04

08011804 <osMessageQueueGetCount>:
}

/*
  Get number of queued messages in a Message Queue.
*/
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	60bb      	str	r3, [r7, #8]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d102      	bne.n	801181c <osMessageQueueGetCount+0x18>
    count = 0U;
 8011816:	2300      	movs	r3, #0
 8011818:	60fb      	str	r3, [r7, #12]
 801181a:	e00d      	b.n	8011838 <osMessageQueueGetCount+0x34>
  }
  else if (IRQ_Context() != 0U) {
 801181c:	f7ff fb55 	bl	8010eca <IRQ_Context>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d004      	beq.n	8011830 <osMessageQueueGetCount+0x2c>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8011826:	68b8      	ldr	r0, [r7, #8]
 8011828:	f000 fee1 	bl	80125ee <uxQueueMessagesWaitingFromISR>
 801182c:	60f8      	str	r0, [r7, #12]
 801182e:	e003      	b.n	8011838 <osMessageQueueGetCount+0x34>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8011830:	68b8      	ldr	r0, [r7, #8]
 8011832:	f000 fec6 	bl	80125c2 <uxQueueMessagesWaiting>
 8011836:	60f8      	str	r0, [r7, #12]
  }

  /* Return number of queued messages */
  return ((uint32_t)count);
 8011838:	68fb      	ldr	r3, [r7, #12]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <osMessageQueueDelete>:
}

/*
  Delete a Message Queue object.
*/
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8011842:	b580      	push	{r7, lr}
 8011844:	b084      	sub	sp, #16
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 801184e:	f7ff fb3c 	bl	8010eca <IRQ_Context>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	d003      	beq.n	8011860 <osMessageQueueDelete+0x1e>
    stat = osErrorISR;
 8011858:	f06f 0305 	mvn.w	r3, #5
 801185c:	60fb      	str	r3, [r7, #12]
 801185e:	e00e      	b.n	801187e <osMessageQueueDelete+0x3c>
  }
  else if (hQueue == NULL) {
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d103      	bne.n	801186e <osMessageQueueDelete+0x2c>
    stat = osErrorParameter;
 8011866:	f06f 0303 	mvn.w	r3, #3
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	e007      	b.n	801187e <osMessageQueueDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 801186e:	68b8      	ldr	r0, [r7, #8]
 8011870:	f001 f858 	bl	8012924 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011874:	2300      	movs	r3, #0
 8011876:	60fb      	str	r3, [r7, #12]
    vQueueDelete (hQueue);
 8011878:	68b8      	ldr	r0, [r7, #8]
 801187a:	f000 fecc 	bl	8012616 <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 801187e:	68fb      	ldr	r3, [r7, #12]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3710      	adds	r7, #16
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011888:	b480      	push	{r7}
 801188a:	b085      	sub	sp, #20
 801188c:	af00      	add	r7, sp, #0
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	4a07      	ldr	r2, [pc, #28]	; (80118b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8011898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	4a06      	ldr	r2, [pc, #24]	; (80118b8 <vApplicationGetIdleTaskMemory+0x30>)
 801189e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118a6:	601a      	str	r2, [r3, #0]
}
 80118a8:	bf00      	nop
 80118aa:	3714      	adds	r7, #20
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	20055a44 	.word	0x20055a44
 80118b8:	20055aa0 	.word	0x20055aa0

080118bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	4a07      	ldr	r2, [pc, #28]	; (80118e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80118cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	4a06      	ldr	r2, [pc, #24]	; (80118ec <vApplicationGetTimerTaskMemory+0x30>)
 80118d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2280      	movs	r2, #128	; 0x80
 80118d8:	601a      	str	r2, [r3, #0]
}
 80118da:	bf00      	nop
 80118dc:	3714      	adds	r7, #20
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	200562a0 	.word	0x200562a0
 80118ec:	200562fc 	.word	0x200562fc

080118f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f103 0208 	add.w	r2, r3, #8
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f04f 32ff 	mov.w	r2, #4294967295
 8011908:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f103 0208 	add.w	r2, r3, #8
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f103 0208 	add.w	r2, r3, #8
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011924:	bf00      	nop
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801193e:	bf00      	nop
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr

0801194a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 801194a:	b480      	push	{r7}
 801194c:	b085      	sub	sp, #20
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011960:	d103      	bne.n	801196a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	60fb      	str	r3, [r7, #12]
 8011968:	e00c      	b.n	8011984 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	3308      	adds	r3, #8
 801196e:	60fb      	str	r3, [r7, #12]
 8011970:	e002      	b.n	8011978 <vListInsert+0x2e>
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	60fb      	str	r3, [r7, #12]
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	429a      	cmp	r2, r3
 8011982:	d2f6      	bcs.n	8011972 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	685a      	ldr	r2, [r3, #4]
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	683a      	ldr	r2, [r7, #0]
 8011992:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	683a      	ldr	r2, [r7, #0]
 801199e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	1c5a      	adds	r2, r3, #1
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	601a      	str	r2, [r3, #0]
}
 80119b0:	bf00      	nop
 80119b2:	3714      	adds	r7, #20
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80119bc:	b480      	push	{r7}
 80119be:	b085      	sub	sp, #20
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	691b      	ldr	r3, [r3, #16]
 80119c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	687a      	ldr	r2, [r7, #4]
 80119d0:	6892      	ldr	r2, [r2, #8]
 80119d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	6852      	ldr	r2, [r2, #4]
 80119dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d103      	bne.n	80119f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	689a      	ldr	r2, [r3, #8]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	1e5a      	subs	r2, r3, #1
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3714      	adds	r7, #20
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr

08011a10 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d102      	bne.n	8011a2e <xQueueGenericReset+0x1e>
 8011a28:	f002 fd7e 	bl	8014528 <ulSetInterruptMask>
 8011a2c:	e7fe      	b.n	8011a2c <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d057      	beq.n	8011ae4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d053      	beq.n	8011ae4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a44:	2100      	movs	r1, #0
 8011a46:	fba3 2302 	umull	r2, r3, r3, r2
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d000      	beq.n	8011a50 <xQueueGenericReset+0x40>
 8011a4e:	2101      	movs	r1, #1
 8011a50:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d146      	bne.n	8011ae4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8011a56:	f002 fc27 	bl	80142a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a62:	68b9      	ldr	r1, [r7, #8]
 8011a64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a66:	fb01 f303 	mul.w	r3, r1, r3
 8011a6a:	441a      	add	r2, r3
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	2200      	movs	r2, #0
 8011a74:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a86:	3b01      	subs	r3, #1
 8011a88:	68b9      	ldr	r1, [r7, #8]
 8011a8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a8c:	fb01 f303 	mul.w	r3, r1, r3
 8011a90:	441a      	add	r2, r3
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	22ff      	movs	r2, #255	; 0xff
 8011a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	22ff      	movs	r2, #255	; 0xff
 8011aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10e      	bne.n	8011aca <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d014      	beq.n	8011ade <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	3310      	adds	r3, #16
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f001 fc9d 	bl	80133f8 <xTaskRemoveFromEventList>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d00c      	beq.n	8011ade <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8011ac4:	f002 fbde 	bl	8014284 <vPortYield>
 8011ac8:	e009      	b.n	8011ade <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	3310      	adds	r3, #16
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7ff ff0e 	bl	80118f0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	3324      	adds	r3, #36	; 0x24
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7ff ff09 	bl	80118f0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8011ade:	f002 fbf5 	bl	80142cc <vPortExitCritical>
 8011ae2:	e001      	b.n	8011ae8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d102      	bne.n	8011af4 <xQueueGenericReset+0xe4>
 8011aee:	f002 fd1b 	bl	8014528 <ulSetInterruptMask>
 8011af2:	e7fe      	b.n	8011af2 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8011af4:	68fb      	ldr	r3, [r7, #12]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3710      	adds	r7, #16
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b088      	sub	sp, #32
 8011b02:	af02      	add	r7, sp, #8
 8011b04:	60f8      	str	r0, [r7, #12]
 8011b06:	60b9      	str	r1, [r7, #8]
 8011b08:	607a      	str	r2, [r7, #4]
 8011b0a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <xQueueGenericCreateStatic+0x1e>
 8011b16:	f002 fd07 	bl	8014528 <ulSetInterruptMask>
 8011b1a:	e7fe      	b.n	8011b1a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d028      	beq.n	8011b74 <xQueueGenericCreateStatic+0x76>
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d025      	beq.n	8011b74 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d002      	beq.n	8011b34 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d01f      	beq.n	8011b74 <xQueueGenericCreateStatic+0x76>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d102      	bne.n	8011b40 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d119      	bne.n	8011b74 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8011b40:	2350      	movs	r3, #80	; 0x50
 8011b42:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	2b50      	cmp	r3, #80	; 0x50
 8011b48:	d002      	beq.n	8011b50 <xQueueGenericCreateStatic+0x52>
 8011b4a:	f002 fced 	bl	8014528 <ulSetInterruptMask>
 8011b4e:	e7fe      	b.n	8011b4e <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8011b50:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	2201      	movs	r2, #1
 8011b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	4613      	mov	r3, r2
 8011b68:	687a      	ldr	r2, [r7, #4]
 8011b6a:	68b9      	ldr	r1, [r7, #8]
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f000 f856 	bl	8011c1e <prvInitialiseNewQueue>
 8011b72:	e005      	b.n	8011b80 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d102      	bne.n	8011b80 <xQueueGenericCreateStatic+0x82>
 8011b7a:	f002 fcd5 	bl	8014528 <ulSetInterruptMask>
 8011b7e:	e7fe      	b.n	8011b7e <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8011b80:	697b      	ldr	r3, [r7, #20]
    }
 8011b82:	4618      	mov	r0, r3
 8011b84:	3718      	adds	r7, #24
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b08a      	sub	sp, #40	; 0x28
 8011b8e:	af02      	add	r7, sp, #8
 8011b90:	60f8      	str	r0, [r7, #12]
 8011b92:	60b9      	str	r1, [r7, #8]
 8011b94:	4613      	mov	r3, r2
 8011b96:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d032      	beq.n	8011c08 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d000      	beq.n	8011bb2 <xQueueGenericCreate+0x28>
 8011bb0:	2101      	movs	r1, #1
 8011bb2:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d127      	bne.n	8011c08 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011bc0:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8011bc4:	d820      	bhi.n	8011c08 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	fb02 f303 	mul.w	r3, r2, r3
 8011bce:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011bd0:	69bb      	ldr	r3, [r7, #24]
 8011bd2:	3350      	adds	r3, #80	; 0x50
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f002 fd07 	bl	80145e8 <pvPortMalloc>
 8011bda:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d018      	beq.n	8011c14 <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	3350      	adds	r3, #80	; 0x50
 8011bea:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011bf4:	79fa      	ldrb	r2, [r7, #7]
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	697a      	ldr	r2, [r7, #20]
 8011bfe:	68b9      	ldr	r1, [r7, #8]
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f000 f80c 	bl	8011c1e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8011c06:	e005      	b.n	8011c14 <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d102      	bne.n	8011c14 <xQueueGenericCreate+0x8a>
 8011c0e:	f002 fc8b 	bl	8014528 <ulSetInterruptMask>
 8011c12:	e7fe      	b.n	8011c12 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8011c14:	69fb      	ldr	r3, [r7, #28]
    }
 8011c16:	4618      	mov	r0, r3
 8011c18:	3720      	adds	r7, #32
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b084      	sub	sp, #16
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	60f8      	str	r0, [r7, #12]
 8011c26:	60b9      	str	r1, [r7, #8]
 8011c28:	607a      	str	r2, [r7, #4]
 8011c2a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d103      	bne.n	8011c3a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	69ba      	ldr	r2, [r7, #24]
 8011c36:	601a      	str	r2, [r3, #0]
 8011c38:	e002      	b.n	8011c40 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011c3a:	69bb      	ldr	r3, [r7, #24]
 8011c3c:	687a      	ldr	r2, [r7, #4]
 8011c3e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8011c40:	69bb      	ldr	r3, [r7, #24]
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8011c46:	69bb      	ldr	r3, [r7, #24]
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011c4c:	2101      	movs	r1, #1
 8011c4e:	69b8      	ldr	r0, [r7, #24]
 8011c50:	f7ff fede 	bl	8011a10 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	78fa      	ldrb	r2, [r7, #3]
 8011c58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8011c5c:	bf00      	nop
 8011c5e:	3710      	adds	r7, #16
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b082      	sub	sp, #8
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00e      	beq.n	8011c90 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2200      	movs	r2, #0
 8011c76:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2200      	movs	r2, #0
 8011c82:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011c84:	2300      	movs	r3, #0
 8011c86:	2200      	movs	r2, #0
 8011c88:	2100      	movs	r1, #0
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 f8e1 	bl	8011e52 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8011c90:	bf00      	nop
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	617b      	str	r3, [r7, #20]
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011caa:	79fb      	ldrb	r3, [r7, #7]
 8011cac:	461a      	mov	r2, r3
 8011cae:	6939      	ldr	r1, [r7, #16]
 8011cb0:	6978      	ldr	r0, [r7, #20]
 8011cb2:	f7ff ff6a 	bl	8011b8a <xQueueGenericCreate>
 8011cb6:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f7ff ffd3 	bl	8011c64 <prvInitialiseMutex>

        return xNewQueue;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
    }
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3718      	adds	r7, #24
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b088      	sub	sp, #32
 8011ccc:	af02      	add	r7, sp, #8
 8011cce:	4603      	mov	r3, r0
 8011cd0:	6039      	str	r1, [r7, #0]
 8011cd2:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	617b      	str	r3, [r7, #20]
 8011cd8:	2300      	movs	r3, #0
 8011cda:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011cdc:	79fb      	ldrb	r3, [r7, #7]
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	6939      	ldr	r1, [r7, #16]
 8011ce6:	6978      	ldr	r0, [r7, #20]
 8011ce8:	f7ff ff09 	bl	8011afe <xQueueGenericCreateStatic>
 8011cec:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011cee:	68f8      	ldr	r0, [r7, #12]
 8011cf0:	f7ff ffb8 	bl	8011c64 <prvInitialiseMutex>

        return xNewQueue;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
    }
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3718      	adds	r7, #24
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}

08011cfe <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8011cfe:	b590      	push	{r4, r7, lr}
 8011d00:	b085      	sub	sp, #20
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d102      	bne.n	8011d16 <xQueueGiveMutexRecursive+0x18>
 8011d10:	f002 fc0a 	bl	8014528 <ulSetInterruptMask>
 8011d14:	e7fe      	b.n	8011d14 <xQueueGiveMutexRecursive+0x16>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	689c      	ldr	r4, [r3, #8]
 8011d1a:	f001 fd75 	bl	8013808 <xTaskGetCurrentTaskHandle>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	429c      	cmp	r4, r3
 8011d22:	d111      	bne.n	8011d48 <xQueueGiveMutexRecursive+0x4a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	1e5a      	subs	r2, r3, #1
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d105      	bne.n	8011d42 <xQueueGiveMutexRecursive+0x44>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011d36:	2300      	movs	r3, #0
 8011d38:	2200      	movs	r2, #0
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	68b8      	ldr	r0, [r7, #8]
 8011d3e:	f000 f888 	bl	8011e52 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 8011d42:	2301      	movs	r3, #1
 8011d44:	60fb      	str	r3, [r7, #12]
 8011d46:	e001      	b.n	8011d4c <xQueueGiveMutexRecursive+0x4e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	60fb      	str	r3, [r7, #12]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
    }
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3714      	adds	r7, #20
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd90      	pop	{r4, r7, pc}

08011d56 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 8011d56:	b590      	push	{r4, r7, lr}
 8011d58:	b085      	sub	sp, #20
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
 8011d5e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d102      	bne.n	8011d70 <xQueueTakeMutexRecursive+0x1a>
 8011d6a:	f002 fbdd 	bl	8014528 <ulSetInterruptMask>
 8011d6e:	e7fe      	b.n	8011d6e <xQueueTakeMutexRecursive+0x18>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	689c      	ldr	r4, [r3, #8]
 8011d74:	f001 fd48 	bl	8013808 <xTaskGetCurrentTaskHandle>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	429c      	cmp	r4, r3
 8011d7c:	d107      	bne.n	8011d8e <xQueueTakeMutexRecursive+0x38>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	1c5a      	adds	r2, r3, #1
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	e00c      	b.n	8011da8 <xQueueTakeMutexRecursive+0x52>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011d8e:	6839      	ldr	r1, [r7, #0]
 8011d90:	68b8      	ldr	r0, [r7, #8]
 8011d92:	f000 fad2 	bl	801233a <xQueueSemaphoreTake>
 8011d96:	60f8      	str	r0, [r7, #12]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d004      	beq.n	8011da8 <xQueueTakeMutexRecursive+0x52>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	1c5a      	adds	r2, r3, #1
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 8011da8:	68fb      	ldr	r3, [r7, #12]
    }
 8011daa:	4618      	mov	r0, r3
 8011dac:	3714      	adds	r7, #20
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd90      	pop	{r4, r7, pc}

08011db2 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b088      	sub	sp, #32
 8011db6:	af02      	add	r7, sp, #8
 8011db8:	60f8      	str	r0, [r7, #12]
 8011dba:	60b9      	str	r1, [r7, #8]
 8011dbc:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d013      	beq.n	8011df0 <xQueueCreateCountingSemaphoreStatic+0x3e>
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d80f      	bhi.n	8011df0 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011dd0:	2302      	movs	r3, #2
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	2100      	movs	r1, #0
 8011dda:	68f8      	ldr	r0, [r7, #12]
 8011ddc:	f7ff fe8f 	bl	8011afe <xQueueGenericCreateStatic>
 8011de0:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d009      	beq.n	8011dfc <xQueueCreateCountingSemaphoreStatic+0x4a>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	68ba      	ldr	r2, [r7, #8]
 8011dec:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8011dee:	e005      	b.n	8011dfc <xQueueCreateCountingSemaphoreStatic+0x4a>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d102      	bne.n	8011dfc <xQueueCreateCountingSemaphoreStatic+0x4a>
 8011df6:	f002 fb97 	bl	8014528 <ulSetInterruptMask>
 8011dfa:	e7fe      	b.n	8011dfa <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8011dfc:	697b      	ldr	r3, [r7, #20]
    }
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3718      	adds	r7, #24
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b084      	sub	sp, #16
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8011e10:	2300      	movs	r3, #0
 8011e12:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d010      	beq.n	8011e3c <xQueueCreateCountingSemaphore+0x36>
 8011e1a:	683a      	ldr	r2, [r7, #0]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d80c      	bhi.n	8011e3c <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011e22:	2202      	movs	r2, #2
 8011e24:	2100      	movs	r1, #0
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7ff feaf 	bl	8011b8a <xQueueGenericCreate>
 8011e2c:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d009      	beq.n	8011e48 <xQueueCreateCountingSemaphore+0x42>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	683a      	ldr	r2, [r7, #0]
 8011e38:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8011e3a:	e005      	b.n	8011e48 <xQueueCreateCountingSemaphore+0x42>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d102      	bne.n	8011e48 <xQueueCreateCountingSemaphore+0x42>
 8011e42:	f002 fb71 	bl	8014528 <ulSetInterruptMask>
 8011e46:	e7fe      	b.n	8011e46 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8011e48:	68fb      	ldr	r3, [r7, #12]
    }
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}

08011e52 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8011e52:	b580      	push	{r7, lr}
 8011e54:	b08a      	sub	sp, #40	; 0x28
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	60f8      	str	r0, [r7, #12]
 8011e5a:	60b9      	str	r1, [r7, #8]
 8011e5c:	607a      	str	r2, [r7, #4]
 8011e5e:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e60:	2300      	movs	r3, #0
 8011e62:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8011e68:	6a3b      	ldr	r3, [r7, #32]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <xQueueGenericSend+0x22>
 8011e6e:	f002 fb5b 	bl	8014528 <ulSetInterruptMask>
 8011e72:	e7fe      	b.n	8011e72 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d103      	bne.n	8011e82 <xQueueGenericSend+0x30>
 8011e7a:	6a3b      	ldr	r3, [r7, #32]
 8011e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d101      	bne.n	8011e86 <xQueueGenericSend+0x34>
 8011e82:	2301      	movs	r3, #1
 8011e84:	e000      	b.n	8011e88 <xQueueGenericSend+0x36>
 8011e86:	2300      	movs	r3, #0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d102      	bne.n	8011e92 <xQueueGenericSend+0x40>
 8011e8c:	f002 fb4c 	bl	8014528 <ulSetInterruptMask>
 8011e90:	e7fe      	b.n	8011e90 <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	d103      	bne.n	8011ea0 <xQueueGenericSend+0x4e>
 8011e98:	6a3b      	ldr	r3, [r7, #32]
 8011e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d101      	bne.n	8011ea4 <xQueueGenericSend+0x52>
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e000      	b.n	8011ea6 <xQueueGenericSend+0x54>
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d102      	bne.n	8011eb0 <xQueueGenericSend+0x5e>
 8011eaa:	f002 fb3d 	bl	8014528 <ulSetInterruptMask>
 8011eae:	e7fe      	b.n	8011eae <xQueueGenericSend+0x5c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011eb0:	f001 fcba 	bl	8013828 <xTaskGetSchedulerState>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <xQueueGenericSend+0x6e>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <xQueueGenericSend+0x72>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e000      	b.n	8011ec6 <xQueueGenericSend+0x74>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d102      	bne.n	8011ed0 <xQueueGenericSend+0x7e>
 8011eca:	f002 fb2d 	bl	8014528 <ulSetInterruptMask>
 8011ece:	e7fe      	b.n	8011ece <xQueueGenericSend+0x7c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011ed0:	f002 f9ea 	bl	80142a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011ed4:	6a3b      	ldr	r3, [r7, #32]
 8011ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ed8:	6a3b      	ldr	r3, [r7, #32]
 8011eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d302      	bcc.n	8011ee6 <xQueueGenericSend+0x94>
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	2b02      	cmp	r3, #2
 8011ee4:	d11d      	bne.n	8011f22 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ee6:	683a      	ldr	r2, [r7, #0]
 8011ee8:	68b9      	ldr	r1, [r7, #8]
 8011eea:	6a38      	ldr	r0, [r7, #32]
 8011eec:	f000 fbc6 	bl	801267c <prvCopyDataToQueue>
 8011ef0:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d00a      	beq.n	8011f10 <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011efa:	6a3b      	ldr	r3, [r7, #32]
 8011efc:	3324      	adds	r3, #36	; 0x24
 8011efe:	4618      	mov	r0, r3
 8011f00:	f001 fa7a 	bl	80133f8 <xTaskRemoveFromEventList>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d007      	beq.n	8011f1a <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8011f0a:	f002 f9bb 	bl	8014284 <vPortYield>
 8011f0e:	e004      	b.n	8011f1a <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8011f16:	f002 f9b5 	bl	8014284 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8011f1a:	f002 f9d7 	bl	80142cc <vPortExitCritical>
                return pdPASS;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e05c      	b.n	8011fdc <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d103      	bne.n	8011f30 <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8011f28:	f002 f9d0 	bl	80142cc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	e055      	b.n	8011fdc <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8011f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d106      	bne.n	8011f44 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8011f36:	f107 0314 	add.w	r3, r7, #20
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f001 fb2a 	bl	8013594 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011f40:	2301      	movs	r3, #1
 8011f42:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8011f44:	f002 f9c2 	bl	80142cc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8011f48:	f000 ff70 	bl	8012e2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8011f4c:	f002 f9ac 	bl	80142a8 <vPortEnterCritical>
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f56:	b25b      	sxtb	r3, r3
 8011f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f5c:	d103      	bne.n	8011f66 <xQueueGenericSend+0x114>
 8011f5e:	6a3b      	ldr	r3, [r7, #32]
 8011f60:	2200      	movs	r2, #0
 8011f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f66:	6a3b      	ldr	r3, [r7, #32]
 8011f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f6c:	b25b      	sxtb	r3, r3
 8011f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f72:	d103      	bne.n	8011f7c <xQueueGenericSend+0x12a>
 8011f74:	6a3b      	ldr	r3, [r7, #32]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f7c:	f002 f9a6 	bl	80142cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f80:	1d3a      	adds	r2, r7, #4
 8011f82:	f107 0314 	add.w	r3, r7, #20
 8011f86:	4611      	mov	r1, r2
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f001 fb19 	bl	80135c0 <xTaskCheckForTimeOut>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d11d      	bne.n	8011fd0 <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011f94:	6a38      	ldr	r0, [r7, #32]
 8011f96:	f000 fc69 	bl	801286c <prvIsQueueFull>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d011      	beq.n	8011fc4 <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011fa0:	6a3b      	ldr	r3, [r7, #32]
 8011fa2:	3310      	adds	r3, #16
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f001 f9cb 	bl	8013344 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8011fae:	6a38      	ldr	r0, [r7, #32]
 8011fb0:	f000 fbf4 	bl	801279c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8011fb4:	f000 ff48 	bl	8012e48 <xTaskResumeAll>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d188      	bne.n	8011ed0 <xQueueGenericSend+0x7e>
                {
                    portYIELD_WITHIN_API();
 8011fbe:	f002 f961 	bl	8014284 <vPortYield>
 8011fc2:	e785      	b.n	8011ed0 <xQueueGenericSend+0x7e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8011fc4:	6a38      	ldr	r0, [r7, #32]
 8011fc6:	f000 fbe9 	bl	801279c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011fca:	f000 ff3d 	bl	8012e48 <xTaskResumeAll>
 8011fce:	e77f      	b.n	8011ed0 <xQueueGenericSend+0x7e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8011fd0:	6a38      	ldr	r0, [r7, #32]
 8011fd2:	f000 fbe3 	bl	801279c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8011fd6:	f000 ff37 	bl	8012e48 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8011fda:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3728      	adds	r7, #40	; 0x28
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b08a      	sub	sp, #40	; 0x28
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
 8011ff0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8011ff6:	6a3b      	ldr	r3, [r7, #32]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d102      	bne.n	8012002 <xQueueGenericSendFromISR+0x1e>
 8011ffc:	f002 fa94 	bl	8014528 <ulSetInterruptMask>
 8012000:	e7fe      	b.n	8012000 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d103      	bne.n	8012010 <xQueueGenericSendFromISR+0x2c>
 8012008:	6a3b      	ldr	r3, [r7, #32]
 801200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801200c:	2b00      	cmp	r3, #0
 801200e:	d101      	bne.n	8012014 <xQueueGenericSendFromISR+0x30>
 8012010:	2301      	movs	r3, #1
 8012012:	e000      	b.n	8012016 <xQueueGenericSendFromISR+0x32>
 8012014:	2300      	movs	r3, #0
 8012016:	2b00      	cmp	r3, #0
 8012018:	d102      	bne.n	8012020 <xQueueGenericSendFromISR+0x3c>
 801201a:	f002 fa85 	bl	8014528 <ulSetInterruptMask>
 801201e:	e7fe      	b.n	801201e <xQueueGenericSendFromISR+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	2b02      	cmp	r3, #2
 8012024:	d103      	bne.n	801202e <xQueueGenericSendFromISR+0x4a>
 8012026:	6a3b      	ldr	r3, [r7, #32]
 8012028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801202a:	2b01      	cmp	r3, #1
 801202c:	d101      	bne.n	8012032 <xQueueGenericSendFromISR+0x4e>
 801202e:	2301      	movs	r3, #1
 8012030:	e000      	b.n	8012034 <xQueueGenericSendFromISR+0x50>
 8012032:	2300      	movs	r3, #0
 8012034:	2b00      	cmp	r3, #0
 8012036:	d102      	bne.n	801203e <xQueueGenericSendFromISR+0x5a>
 8012038:	f002 fa76 	bl	8014528 <ulSetInterruptMask>
 801203c:	e7fe      	b.n	801203c <xQueueGenericSendFromISR+0x58>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801203e:	f002 fa73 	bl	8014528 <ulSetInterruptMask>
 8012042:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012048:	6a3b      	ldr	r3, [r7, #32]
 801204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801204c:	429a      	cmp	r2, r3
 801204e:	d302      	bcc.n	8012056 <xQueueGenericSendFromISR+0x72>
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	2b02      	cmp	r3, #2
 8012054:	d13c      	bne.n	80120d0 <xQueueGenericSendFromISR+0xec>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8012056:	6a3b      	ldr	r3, [r7, #32]
 8012058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801205c:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801205e:	6a3b      	ldr	r3, [r7, #32]
 8012060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012062:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012064:	683a      	ldr	r2, [r7, #0]
 8012066:	68b9      	ldr	r1, [r7, #8]
 8012068:	6a38      	ldr	r0, [r7, #32]
 801206a:	f000 fb07 	bl	801267c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 801206e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012076:	d112      	bne.n	801209e <xQueueGenericSendFromISR+0xba>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012078:	6a3b      	ldr	r3, [r7, #32]
 801207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801207c:	2b00      	cmp	r3, #0
 801207e:	d024      	beq.n	80120ca <xQueueGenericSendFromISR+0xe6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012080:	6a3b      	ldr	r3, [r7, #32]
 8012082:	3324      	adds	r3, #36	; 0x24
 8012084:	4618      	mov	r0, r3
 8012086:	f001 f9b7 	bl	80133f8 <xTaskRemoveFromEventList>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d01c      	beq.n	80120ca <xQueueGenericSendFromISR+0xe6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d019      	beq.n	80120ca <xQueueGenericSendFromISR+0xe6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2201      	movs	r2, #1
 801209a:	601a      	str	r2, [r3, #0]
 801209c:	e015      	b.n	80120ca <xQueueGenericSendFromISR+0xe6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 801209e:	f000 ffe1 	bl	8013064 <uxTaskGetNumberOfTasks>
 80120a2:	6138      	str	r0, [r7, #16]
 80120a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80120a8:	693a      	ldr	r2, [r7, #16]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d90d      	bls.n	80120ca <xQueueGenericSendFromISR+0xe6>
 80120ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80120b2:	2b7f      	cmp	r3, #127	; 0x7f
 80120b4:	d102      	bne.n	80120bc <xQueueGenericSendFromISR+0xd8>
 80120b6:	f002 fa37 	bl	8014528 <ulSetInterruptMask>
 80120ba:	e7fe      	b.n	80120ba <xQueueGenericSendFromISR+0xd6>
 80120bc:	7efb      	ldrb	r3, [r7, #27]
 80120be:	3301      	adds	r3, #1
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	b25a      	sxtb	r2, r3
 80120c4:	6a3b      	ldr	r3, [r7, #32]
 80120c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80120ca:	2301      	movs	r3, #1
 80120cc:	627b      	str	r3, [r7, #36]	; 0x24
        {
 80120ce:	e001      	b.n	80120d4 <xQueueGenericSendFromISR+0xf0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80120d0:	2300      	movs	r3, #0
 80120d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80120d4:	69f8      	ldr	r0, [r7, #28]
 80120d6:	f002 fa34 	bl	8014542 <vClearInterruptMask>

    return xReturn;
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3728      	adds	r7, #40	; 0x28
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b088      	sub	sp, #32
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d102      	bne.n	80120fe <xQueueGiveFromISR+0x1a>
 80120f8:	f002 fa16 	bl	8014528 <ulSetInterruptMask>
 80120fc:	e7fe      	b.n	80120fc <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012102:	2b00      	cmp	r3, #0
 8012104:	d002      	beq.n	801210c <xQueueGiveFromISR+0x28>
 8012106:	f002 fa0f 	bl	8014528 <ulSetInterruptMask>
 801210a:	e7fe      	b.n	801210a <xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d103      	bne.n	801211c <xQueueGiveFromISR+0x38>
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d101      	bne.n	8012120 <xQueueGiveFromISR+0x3c>
 801211c:	2301      	movs	r3, #1
 801211e:	e000      	b.n	8012122 <xQueueGiveFromISR+0x3e>
 8012120:	2300      	movs	r3, #0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d102      	bne.n	801212c <xQueueGiveFromISR+0x48>
 8012126:	f002 f9ff 	bl	8014528 <ulSetInterruptMask>
 801212a:	e7fe      	b.n	801212a <xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801212c:	f002 f9fc 	bl	8014528 <ulSetInterruptMask>
 8012130:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012136:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801213c:	693a      	ldr	r2, [r7, #16]
 801213e:	429a      	cmp	r2, r3
 8012140:	d238      	bcs.n	80121b4 <xQueueGiveFromISR+0xd0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012148:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	1c5a      	adds	r2, r3, #1
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8012152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801215a:	d112      	bne.n	8012182 <xQueueGiveFromISR+0x9e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801215c:	69bb      	ldr	r3, [r7, #24]
 801215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012160:	2b00      	cmp	r3, #0
 8012162:	d024      	beq.n	80121ae <xQueueGiveFromISR+0xca>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	3324      	adds	r3, #36	; 0x24
 8012168:	4618      	mov	r0, r3
 801216a:	f001 f945 	bl	80133f8 <xTaskRemoveFromEventList>
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d01c      	beq.n	80121ae <xQueueGiveFromISR+0xca>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d019      	beq.n	80121ae <xQueueGiveFromISR+0xca>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	2201      	movs	r2, #1
 801217e:	601a      	str	r2, [r3, #0]
 8012180:	e015      	b.n	80121ae <xQueueGiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8012182:	f000 ff6f 	bl	8013064 <uxTaskGetNumberOfTasks>
 8012186:	60b8      	str	r0, [r7, #8]
 8012188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801218c:	68ba      	ldr	r2, [r7, #8]
 801218e:	429a      	cmp	r2, r3
 8012190:	d90d      	bls.n	80121ae <xQueueGiveFromISR+0xca>
 8012192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012196:	2b7f      	cmp	r3, #127	; 0x7f
 8012198:	d102      	bne.n	80121a0 <xQueueGiveFromISR+0xbc>
 801219a:	f002 f9c5 	bl	8014528 <ulSetInterruptMask>
 801219e:	e7fe      	b.n	801219e <xQueueGiveFromISR+0xba>
 80121a0:	7bfb      	ldrb	r3, [r7, #15]
 80121a2:	3301      	adds	r3, #1
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	b25a      	sxtb	r2, r3
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80121ae:	2301      	movs	r3, #1
 80121b0:	61fb      	str	r3, [r7, #28]
 80121b2:	e001      	b.n	80121b8 <xQueueGiveFromISR+0xd4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80121b4:	2300      	movs	r3, #0
 80121b6:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80121b8:	6978      	ldr	r0, [r7, #20]
 80121ba:	f002 f9c2 	bl	8014542 <vClearInterruptMask>

    return xReturn;
 80121be:	69fb      	ldr	r3, [r7, #28]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3720      	adds	r7, #32
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b08a      	sub	sp, #40	; 0x28
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80121d4:	2300      	movs	r3, #0
 80121d6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80121dc:	6a3b      	ldr	r3, [r7, #32]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d102      	bne.n	80121e8 <xQueueReceive+0x20>
 80121e2:	f002 f9a1 	bl	8014528 <ulSetInterruptMask>
 80121e6:	e7fe      	b.n	80121e6 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d103      	bne.n	80121f6 <xQueueReceive+0x2e>
 80121ee:	6a3b      	ldr	r3, [r7, #32]
 80121f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d101      	bne.n	80121fa <xQueueReceive+0x32>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e000      	b.n	80121fc <xQueueReceive+0x34>
 80121fa:	2300      	movs	r3, #0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d102      	bne.n	8012206 <xQueueReceive+0x3e>
 8012200:	f002 f992 	bl	8014528 <ulSetInterruptMask>
 8012204:	e7fe      	b.n	8012204 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012206:	f001 fb0f 	bl	8013828 <xTaskGetSchedulerState>
 801220a:	4603      	mov	r3, r0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d102      	bne.n	8012216 <xQueueReceive+0x4e>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d101      	bne.n	801221a <xQueueReceive+0x52>
 8012216:	2301      	movs	r3, #1
 8012218:	e000      	b.n	801221c <xQueueReceive+0x54>
 801221a:	2300      	movs	r3, #0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d102      	bne.n	8012226 <xQueueReceive+0x5e>
 8012220:	f002 f982 	bl	8014528 <ulSetInterruptMask>
 8012224:	e7fe      	b.n	8012224 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8012226:	f002 f83f 	bl	80142a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801222a:	6a3b      	ldr	r3, [r7, #32]
 801222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801222e:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d019      	beq.n	801226a <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012236:	68b9      	ldr	r1, [r7, #8]
 8012238:	6a38      	ldr	r0, [r7, #32]
 801223a:	f000 fa89 	bl	8012750 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	1e5a      	subs	r2, r3, #1
 8012242:	6a3b      	ldr	r3, [r7, #32]
 8012244:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012246:	6a3b      	ldr	r3, [r7, #32]
 8012248:	691b      	ldr	r3, [r3, #16]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d009      	beq.n	8012262 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801224e:	6a3b      	ldr	r3, [r7, #32]
 8012250:	3310      	adds	r3, #16
 8012252:	4618      	mov	r0, r3
 8012254:	f001 f8d0 	bl	80133f8 <xTaskRemoveFromEventList>
 8012258:	4603      	mov	r3, r0
 801225a:	2b00      	cmp	r3, #0
 801225c:	d001      	beq.n	8012262 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 801225e:	f002 f811 	bl	8014284 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8012262:	f002 f833 	bl	80142cc <vPortExitCritical>
                return pdPASS;
 8012266:	2301      	movs	r3, #1
 8012268:	e063      	b.n	8012332 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d103      	bne.n	8012278 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8012270:	f002 f82c 	bl	80142cc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8012274:	2300      	movs	r3, #0
 8012276:	e05c      	b.n	8012332 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227a:	2b00      	cmp	r3, #0
 801227c:	d106      	bne.n	801228c <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801227e:	f107 0314 	add.w	r3, r7, #20
 8012282:	4618      	mov	r0, r3
 8012284:	f001 f986 	bl	8013594 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8012288:	2301      	movs	r3, #1
 801228a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 801228c:	f002 f81e 	bl	80142cc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8012290:	f000 fdcc 	bl	8012e2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012294:	f002 f808 	bl	80142a8 <vPortEnterCritical>
 8012298:	6a3b      	ldr	r3, [r7, #32]
 801229a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801229e:	b25b      	sxtb	r3, r3
 80122a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a4:	d103      	bne.n	80122ae <xQueueReceive+0xe6>
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	2200      	movs	r2, #0
 80122aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122ae:	6a3b      	ldr	r3, [r7, #32]
 80122b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122b4:	b25b      	sxtb	r3, r3
 80122b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ba:	d103      	bne.n	80122c4 <xQueueReceive+0xfc>
 80122bc:	6a3b      	ldr	r3, [r7, #32]
 80122be:	2200      	movs	r2, #0
 80122c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122c4:	f002 f802 	bl	80142cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80122c8:	1d3a      	adds	r2, r7, #4
 80122ca:	f107 0314 	add.w	r3, r7, #20
 80122ce:	4611      	mov	r1, r2
 80122d0:	4618      	mov	r0, r3
 80122d2:	f001 f975 	bl	80135c0 <xTaskCheckForTimeOut>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d11d      	bne.n	8012318 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122dc:	6a38      	ldr	r0, [r7, #32]
 80122de:	f000 faaf 	bl	8012840 <prvIsQueueEmpty>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d011      	beq.n	801230c <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80122e8:	6a3b      	ldr	r3, [r7, #32]
 80122ea:	3324      	adds	r3, #36	; 0x24
 80122ec:	687a      	ldr	r2, [r7, #4]
 80122ee:	4611      	mov	r1, r2
 80122f0:	4618      	mov	r0, r3
 80122f2:	f001 f827 	bl	8013344 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80122f6:	6a38      	ldr	r0, [r7, #32]
 80122f8:	f000 fa50 	bl	801279c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80122fc:	f000 fda4 	bl	8012e48 <xTaskResumeAll>
 8012300:	4603      	mov	r3, r0
 8012302:	2b00      	cmp	r3, #0
 8012304:	d18f      	bne.n	8012226 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8012306:	f001 ffbd 	bl	8014284 <vPortYield>
 801230a:	e78c      	b.n	8012226 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 801230c:	6a38      	ldr	r0, [r7, #32]
 801230e:	f000 fa45 	bl	801279c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012312:	f000 fd99 	bl	8012e48 <xTaskResumeAll>
 8012316:	e786      	b.n	8012226 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8012318:	6a38      	ldr	r0, [r7, #32]
 801231a:	f000 fa3f 	bl	801279c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 801231e:	f000 fd93 	bl	8012e48 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012322:	6a38      	ldr	r0, [r7, #32]
 8012324:	f000 fa8c 	bl	8012840 <prvIsQueueEmpty>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	f43f af7b 	beq.w	8012226 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8012330:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8012332:	4618      	mov	r0, r3
 8012334:	3728      	adds	r7, #40	; 0x28
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b08a      	sub	sp, #40	; 0x28
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
 8012342:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8012344:	2300      	movs	r3, #0
 8012346:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 801234c:	2300      	movs	r3, #0
 801234e:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d102      	bne.n	801235c <xQueueSemaphoreTake+0x22>
 8012356:	f002 f8e7 	bl	8014528 <ulSetInterruptMask>
 801235a:	e7fe      	b.n	801235a <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012360:	2b00      	cmp	r3, #0
 8012362:	d002      	beq.n	801236a <xQueueSemaphoreTake+0x30>
 8012364:	f002 f8e0 	bl	8014528 <ulSetInterruptMask>
 8012368:	e7fe      	b.n	8012368 <xQueueSemaphoreTake+0x2e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801236a:	f001 fa5d 	bl	8013828 <xTaskGetSchedulerState>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d102      	bne.n	801237a <xQueueSemaphoreTake+0x40>
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d101      	bne.n	801237e <xQueueSemaphoreTake+0x44>
 801237a:	2301      	movs	r3, #1
 801237c:	e000      	b.n	8012380 <xQueueSemaphoreTake+0x46>
 801237e:	2300      	movs	r3, #0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d102      	bne.n	801238a <xQueueSemaphoreTake+0x50>
 8012384:	f002 f8d0 	bl	8014528 <ulSetInterruptMask>
 8012388:	e7fe      	b.n	8012388 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801238a:	f001 ff8d 	bl	80142a8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012392:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012394:	69bb      	ldr	r3, [r7, #24]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d01e      	beq.n	80123d8 <xQueueSemaphoreTake+0x9e>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	1e5a      	subs	r2, r3, #1
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d104      	bne.n	80123b4 <xQueueSemaphoreTake+0x7a>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80123aa:	f001 fc0b 	bl	8013bc4 <pvTaskIncrementMutexHeldCount>
 80123ae:	4602      	mov	r2, r0
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123b4:	69fb      	ldr	r3, [r7, #28]
 80123b6:	691b      	ldr	r3, [r3, #16]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d009      	beq.n	80123d0 <xQueueSemaphoreTake+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	3310      	adds	r3, #16
 80123c0:	4618      	mov	r0, r3
 80123c2:	f001 f819 	bl	80133f8 <xTaskRemoveFromEventList>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <xQueueSemaphoreTake+0x96>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80123cc:	f001 ff5a 	bl	8014284 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80123d0:	f001 ff7c 	bl	80142cc <vPortExitCritical>
                return pdPASS;
 80123d4:	2301      	movs	r3, #1
 80123d6:	e083      	b.n	80124e0 <xQueueSemaphoreTake+0x1a6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d103      	bne.n	80123e6 <xQueueSemaphoreTake+0xac>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80123de:	f001 ff75 	bl	80142cc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80123e2:	2300      	movs	r3, #0
 80123e4:	e07c      	b.n	80124e0 <xQueueSemaphoreTake+0x1a6>
                }
                else if( xEntryTimeSet == pdFALSE )
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d106      	bne.n	80123fa <xQueueSemaphoreTake+0xc0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80123ec:	f107 030c 	add.w	r3, r7, #12
 80123f0:	4618      	mov	r0, r3
 80123f2:	f001 f8cf 	bl	8013594 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80123f6:	2301      	movs	r3, #1
 80123f8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80123fa:	f001 ff67 	bl	80142cc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80123fe:	f000 fd15 	bl	8012e2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012402:	f001 ff51 	bl	80142a8 <vPortEnterCritical>
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801240c:	b25b      	sxtb	r3, r3
 801240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012412:	d103      	bne.n	801241c <xQueueSemaphoreTake+0xe2>
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	2200      	movs	r2, #0
 8012418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012422:	b25b      	sxtb	r3, r3
 8012424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012428:	d103      	bne.n	8012432 <xQueueSemaphoreTake+0xf8>
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	2200      	movs	r2, #0
 801242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012432:	f001 ff4b 	bl	80142cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012436:	463a      	mov	r2, r7
 8012438:	f107 030c 	add.w	r3, r7, #12
 801243c:	4611      	mov	r1, r2
 801243e:	4618      	mov	r0, r3
 8012440:	f001 f8be 	bl	80135c0 <xTaskCheckForTimeOut>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d12c      	bne.n	80124a4 <xQueueSemaphoreTake+0x16a>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801244a:	69f8      	ldr	r0, [r7, #28]
 801244c:	f000 f9f8 	bl	8012840 <prvIsQueueEmpty>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d020      	beq.n	8012498 <xQueueSemaphoreTake+0x15e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d109      	bne.n	8012472 <xQueueSemaphoreTake+0x138>
                    {
                        taskENTER_CRITICAL();
 801245e:	f001 ff23 	bl	80142a8 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	689b      	ldr	r3, [r3, #8]
 8012466:	4618      	mov	r0, r3
 8012468:	f001 f9fc 	bl	8013864 <xTaskPriorityInherit>
 801246c:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 801246e:	f001 ff2d 	bl	80142cc <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012472:	69fb      	ldr	r3, [r7, #28]
 8012474:	3324      	adds	r3, #36	; 0x24
 8012476:	683a      	ldr	r2, [r7, #0]
 8012478:	4611      	mov	r1, r2
 801247a:	4618      	mov	r0, r3
 801247c:	f000 ff62 	bl	8013344 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8012480:	69f8      	ldr	r0, [r7, #28]
 8012482:	f000 f98b 	bl	801279c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8012486:	f000 fcdf 	bl	8012e48 <xTaskResumeAll>
 801248a:	4603      	mov	r3, r0
 801248c:	2b00      	cmp	r3, #0
 801248e:	f47f af7c 	bne.w	801238a <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8012492:	f001 fef7 	bl	8014284 <vPortYield>
 8012496:	e778      	b.n	801238a <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8012498:	69f8      	ldr	r0, [r7, #28]
 801249a:	f000 f97f 	bl	801279c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801249e:	f000 fcd3 	bl	8012e48 <xTaskResumeAll>
 80124a2:	e772      	b.n	801238a <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80124a4:	69f8      	ldr	r0, [r7, #28]
 80124a6:	f000 f979 	bl	801279c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80124aa:	f000 fccd 	bl	8012e48 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80124ae:	69f8      	ldr	r0, [r7, #28]
 80124b0:	f000 f9c6 	bl	8012840 <prvIsQueueEmpty>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f43f af67 	beq.w	801238a <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80124bc:	6a3b      	ldr	r3, [r7, #32]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d00d      	beq.n	80124de <xQueueSemaphoreTake+0x1a4>
                    {
                        taskENTER_CRITICAL();
 80124c2:	f001 fef1 	bl	80142a8 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80124c6:	69f8      	ldr	r0, [r7, #28]
 80124c8:	f000 f8c0 	bl	801264c <prvGetDisinheritPriorityAfterTimeout>
 80124cc:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	689b      	ldr	r3, [r3, #8]
 80124d2:	6979      	ldr	r1, [r7, #20]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f001 fadb 	bl	8013a90 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80124da:	f001 fef7 	bl	80142cc <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80124de:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3728      	adds	r7, #40	; 0x28
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b08a      	sub	sp, #40	; 0x28
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80124f8:	6a3b      	ldr	r3, [r7, #32]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d102      	bne.n	8012504 <xQueueReceiveFromISR+0x1c>
 80124fe:	f002 f813 	bl	8014528 <ulSetInterruptMask>
 8012502:	e7fe      	b.n	8012502 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d103      	bne.n	8012512 <xQueueReceiveFromISR+0x2a>
 801250a:	6a3b      	ldr	r3, [r7, #32]
 801250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801250e:	2b00      	cmp	r3, #0
 8012510:	d101      	bne.n	8012516 <xQueueReceiveFromISR+0x2e>
 8012512:	2301      	movs	r3, #1
 8012514:	e000      	b.n	8012518 <xQueueReceiveFromISR+0x30>
 8012516:	2300      	movs	r3, #0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d102      	bne.n	8012522 <xQueueReceiveFromISR+0x3a>
 801251c:	f002 f804 	bl	8014528 <ulSetInterruptMask>
 8012520:	e7fe      	b.n	8012520 <xQueueReceiveFromISR+0x38>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012522:	f002 f801 	bl	8014528 <ulSetInterruptMask>
 8012526:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012528:	6a3b      	ldr	r3, [r7, #32]
 801252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252c:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d03c      	beq.n	80125ae <xQueueReceiveFromISR+0xc6>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8012534:	6a3b      	ldr	r3, [r7, #32]
 8012536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801253a:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 801253c:	68b9      	ldr	r1, [r7, #8]
 801253e:	6a38      	ldr	r0, [r7, #32]
 8012540:	f000 f906 	bl	8012750 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	1e5a      	subs	r2, r3, #1
 8012548:	6a3b      	ldr	r3, [r7, #32]
 801254a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 801254c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012554:	d112      	bne.n	801257c <xQueueReceiveFromISR+0x94>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012556:	6a3b      	ldr	r3, [r7, #32]
 8012558:	691b      	ldr	r3, [r3, #16]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d024      	beq.n	80125a8 <xQueueReceiveFromISR+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801255e:	6a3b      	ldr	r3, [r7, #32]
 8012560:	3310      	adds	r3, #16
 8012562:	4618      	mov	r0, r3
 8012564:	f000 ff48 	bl	80133f8 <xTaskRemoveFromEventList>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d01c      	beq.n	80125a8 <xQueueReceiveFromISR+0xc0>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d019      	beq.n	80125a8 <xQueueReceiveFromISR+0xc0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2201      	movs	r2, #1
 8012578:	601a      	str	r2, [r3, #0]
 801257a:	e015      	b.n	80125a8 <xQueueReceiveFromISR+0xc0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 801257c:	f000 fd72 	bl	8013064 <uxTaskGetNumberOfTasks>
 8012580:	6138      	str	r0, [r7, #16]
 8012582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012586:	693a      	ldr	r2, [r7, #16]
 8012588:	429a      	cmp	r2, r3
 801258a:	d90d      	bls.n	80125a8 <xQueueReceiveFromISR+0xc0>
 801258c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012590:	2b7f      	cmp	r3, #127	; 0x7f
 8012592:	d102      	bne.n	801259a <xQueueReceiveFromISR+0xb2>
 8012594:	f001 ffc8 	bl	8014528 <ulSetInterruptMask>
 8012598:	e7fe      	b.n	8012598 <xQueueReceiveFromISR+0xb0>
 801259a:	7dfb      	ldrb	r3, [r7, #23]
 801259c:	3301      	adds	r3, #1
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	b25a      	sxtb	r2, r3
 80125a2:	6a3b      	ldr	r3, [r7, #32]
 80125a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80125a8:	2301      	movs	r3, #1
 80125aa:	627b      	str	r3, [r7, #36]	; 0x24
 80125ac:	e001      	b.n	80125b2 <xQueueReceiveFromISR+0xca>
        }
        else
        {
            xReturn = pdFAIL;
 80125ae:	2300      	movs	r3, #0
 80125b0:	627b      	str	r3, [r7, #36]	; 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80125b2:	69f8      	ldr	r0, [r7, #28]
 80125b4:	f001 ffc5 	bl	8014542 <vClearInterruptMask>

    return xReturn;
 80125b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3728      	adds	r7, #40	; 0x28
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}

080125c2 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b084      	sub	sp, #16
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d102      	bne.n	80125d6 <uxQueueMessagesWaiting+0x14>
 80125d0:	f001 ffaa 	bl	8014528 <ulSetInterruptMask>
 80125d4:	e7fe      	b.n	80125d4 <uxQueueMessagesWaiting+0x12>

    taskENTER_CRITICAL();
 80125d6:	f001 fe67 	bl	80142a8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125de:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80125e0:	f001 fe74 	bl	80142cc <vPortExitCritical>

    return uxReturn;
 80125e4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80125e6:	4618      	mov	r0, r3
 80125e8:	3710      	adds	r7, #16
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}

080125ee <uxQueueMessagesWaitingFromISR>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80125ee:	b580      	push	{r7, lr}
 80125f0:	b084      	sub	sp, #16
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d102      	bne.n	8012606 <uxQueueMessagesWaitingFromISR+0x18>
 8012600:	f001 ff92 	bl	8014528 <ulSetInterruptMask>
 8012604:	e7fe      	b.n	8012604 <uxQueueMessagesWaitingFromISR+0x16>
    uxReturn = pxQueue->uxMessagesWaiting;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801260a:	60bb      	str	r3, [r7, #8]

    return uxReturn;
 801260c:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801260e:	4618      	mov	r0, r3
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b084      	sub	sp, #16
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <vQueueDelete+0x18>
 8012628:	f001 ff7e 	bl	8014528 <ulSetInterruptMask>
 801262c:	e7fe      	b.n	801262c <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 801262e:	68f8      	ldr	r0, [r7, #12]
 8012630:	f000 f978 	bl	8012924 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801263a:	2b00      	cmp	r3, #0
 801263c:	d102      	bne.n	8012644 <vQueueDelete+0x2e>
        {
            vPortFree( pxQueue );
 801263e:	68f8      	ldr	r0, [r7, #12]
 8012640:	f002 f87c 	bl	801473c <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012644:	bf00      	nop
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 801264c:	b480      	push	{r7}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012658:	2b00      	cmp	r3, #0
 801265a:	d006      	beq.n	801266a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012666:	60fb      	str	r3, [r7, #12]
 8012668:	e001      	b.n	801266e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801266a:	2300      	movs	r3, #0
 801266c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 801266e:	68fb      	ldr	r3, [r7, #12]
    }
 8012670:	4618      	mov	r0, r3
 8012672:	3714      	adds	r7, #20
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr

0801267c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b086      	sub	sp, #24
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8012688:	2300      	movs	r3, #0
 801268a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012690:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10d      	bne.n	80126b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d14d      	bne.n	801273e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	689b      	ldr	r3, [r3, #8]
 80126a6:	4618      	mov	r0, r3
 80126a8:	f001 f96c 	bl	8013984 <xTaskPriorityDisinherit>
 80126ac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2200      	movs	r2, #0
 80126b2:	609a      	str	r2, [r3, #8]
 80126b4:	e043      	b.n	801273e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d119      	bne.n	80126f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	6858      	ldr	r0, [r3, #4]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126c4:	461a      	mov	r2, r3
 80126c6:	68b9      	ldr	r1, [r7, #8]
 80126c8:	f010 fd07 	bl	80230da <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	685a      	ldr	r2, [r3, #4]
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d4:	441a      	add	r2, r3
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	685a      	ldr	r2, [r3, #4]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	689b      	ldr	r3, [r3, #8]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d32b      	bcc.n	801273e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	605a      	str	r2, [r3, #4]
 80126ee:	e026      	b.n	801273e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	68d8      	ldr	r0, [r3, #12]
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126f8:	461a      	mov	r2, r3
 80126fa:	68b9      	ldr	r1, [r7, #8]
 80126fc:	f010 fced 	bl	80230da <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	68da      	ldr	r2, [r3, #12]
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012708:	425b      	negs	r3, r3
 801270a:	441a      	add	r2, r3
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	68da      	ldr	r2, [r3, #12]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	429a      	cmp	r2, r3
 801271a:	d207      	bcs.n	801272c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	689a      	ldr	r2, [r3, #8]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012724:	425b      	negs	r3, r3
 8012726:	441a      	add	r2, r3
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b02      	cmp	r3, #2
 8012730:	d105      	bne.n	801273e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	3b01      	subs	r3, #1
 801273c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	1c5a      	adds	r2, r3, #1
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8012746:	697b      	ldr	r3, [r7, #20]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3718      	adds	r7, #24
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801275e:	2b00      	cmp	r3, #0
 8012760:	d018      	beq.n	8012794 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	68da      	ldr	r2, [r3, #12]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801276a:	441a      	add	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	68da      	ldr	r2, [r3, #12]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	429a      	cmp	r2, r3
 801277a:	d303      	bcc.n	8012784 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	68d9      	ldr	r1, [r3, #12]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801278c:	461a      	mov	r2, r3
 801278e:	6838      	ldr	r0, [r7, #0]
 8012790:	f010 fca3 	bl	80230da <memcpy>
    }
}
 8012794:	bf00      	nop
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80127a4:	f001 fd80 	bl	80142a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80127b0:	e011      	b.n	80127d6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d012      	beq.n	80127e0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3324      	adds	r3, #36	; 0x24
 80127be:	4618      	mov	r0, r3
 80127c0:	f000 fe1a 	bl	80133f8 <xTaskRemoveFromEventList>
 80127c4:	4603      	mov	r3, r0
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d001      	beq.n	80127ce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80127ca:	f000 ff4f 	bl	801366c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80127ce:	7bfb      	ldrb	r3, [r7, #15]
 80127d0:	3b01      	subs	r3, #1
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80127d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	dce9      	bgt.n	80127b2 <prvUnlockQueue+0x16>
 80127de:	e000      	b.n	80127e2 <prvUnlockQueue+0x46>
                    break;
 80127e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	22ff      	movs	r2, #255	; 0xff
 80127e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80127ea:	f001 fd6f 	bl	80142cc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80127ee:	f001 fd5b 	bl	80142a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80127fa:	e011      	b.n	8012820 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	691b      	ldr	r3, [r3, #16]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d012      	beq.n	801282a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	3310      	adds	r3, #16
 8012808:	4618      	mov	r0, r3
 801280a:	f000 fdf5 	bl	80133f8 <xTaskRemoveFromEventList>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d001      	beq.n	8012818 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8012814:	f000 ff2a 	bl	801366c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8012818:	7bbb      	ldrb	r3, [r7, #14]
 801281a:	3b01      	subs	r3, #1
 801281c:	b2db      	uxtb	r3, r3
 801281e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8012820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012824:	2b00      	cmp	r3, #0
 8012826:	dce9      	bgt.n	80127fc <prvUnlockQueue+0x60>
 8012828:	e000      	b.n	801282c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 801282a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	22ff      	movs	r2, #255	; 0xff
 8012830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8012834:	f001 fd4a 	bl	80142cc <vPortExitCritical>
}
 8012838:	bf00      	nop
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012848:	f001 fd2e 	bl	80142a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012850:	2b00      	cmp	r3, #0
 8012852:	d102      	bne.n	801285a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8012854:	2301      	movs	r3, #1
 8012856:	60fb      	str	r3, [r7, #12]
 8012858:	e001      	b.n	801285e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 801285a:	2300      	movs	r3, #0
 801285c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 801285e:	f001 fd35 	bl	80142cc <vPortExitCritical>

    return xReturn;
 8012862:	68fb      	ldr	r3, [r7, #12]
}
 8012864:	4618      	mov	r0, r3
 8012866:	3710      	adds	r7, #16
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012874:	f001 fd18 	bl	80142a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012880:	429a      	cmp	r2, r3
 8012882:	d102      	bne.n	801288a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8012884:	2301      	movs	r3, #1
 8012886:	60fb      	str	r3, [r7, #12]
 8012888:	e001      	b.n	801288e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 801288a:	2300      	movs	r3, #0
 801288c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 801288e:	f001 fd1d 	bl	80142cc <vPortExitCritical>

    return xReturn;
 8012892:	68fb      	ldr	r3, [r7, #12]
}
 8012894:	4618      	mov	r0, r3
 8012896:	3710      	adds	r7, #16
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80128a6:	2300      	movs	r3, #0
 80128a8:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d102      	bne.n	80128b6 <vQueueAddToRegistry+0x1a>
 80128b0:	f001 fe3a 	bl	8014528 <ulSetInterruptMask>
 80128b4:	e7fe      	b.n	80128b4 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d024      	beq.n	8012906 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128bc:	2300      	movs	r3, #0
 80128be:	60fb      	str	r3, [r7, #12]
 80128c0:	e01e      	b.n	8012900 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80128c2:	4a17      	ldr	r2, [pc, #92]	; (8012920 <vQueueAddToRegistry+0x84>)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	00db      	lsls	r3, r3, #3
 80128c8:	4413      	add	r3, r2
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d105      	bne.n	80128de <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	00db      	lsls	r3, r3, #3
 80128d6:	4a12      	ldr	r2, [pc, #72]	; (8012920 <vQueueAddToRegistry+0x84>)
 80128d8:	4413      	add	r3, r2
 80128da:	60bb      	str	r3, [r7, #8]
                    break;
 80128dc:	e013      	b.n	8012906 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d10a      	bne.n	80128fa <vQueueAddToRegistry+0x5e>
 80128e4:	4a0e      	ldr	r2, [pc, #56]	; (8012920 <vQueueAddToRegistry+0x84>)
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d104      	bne.n	80128fa <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	4a0a      	ldr	r2, [pc, #40]	; (8012920 <vQueueAddToRegistry+0x84>)
 80128f6:	4413      	add	r3, r2
 80128f8:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	3301      	adds	r3, #1
 80128fe:	60fb      	str	r3, [r7, #12]
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2b07      	cmp	r3, #7
 8012904:	d9dd      	bls.n	80128c2 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d005      	beq.n	8012918 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	683a      	ldr	r2, [r7, #0]
 8012910:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8012918:	bf00      	nop
 801291a:	3710      	adds	r7, #16
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	200564fc 	.word	0x200564fc

08012924 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d102      	bne.n	8012938 <vQueueUnregisterQueue+0x14>
 8012932:	f001 fdf9 	bl	8014528 <ulSetInterruptMask>
 8012936:	e7fe      	b.n	8012936 <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012938:	2300      	movs	r3, #0
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	e016      	b.n	801296c <vQueueUnregisterQueue+0x48>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 801293e:	4a0f      	ldr	r2, [pc, #60]	; (801297c <vQueueUnregisterQueue+0x58>)
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	00db      	lsls	r3, r3, #3
 8012944:	4413      	add	r3, r2
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	429a      	cmp	r2, r3
 801294c:	d10b      	bne.n	8012966 <vQueueUnregisterQueue+0x42>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 801294e:	4a0b      	ldr	r2, [pc, #44]	; (801297c <vQueueUnregisterQueue+0x58>)
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2100      	movs	r1, #0
 8012954:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012958:	4a08      	ldr	r2, [pc, #32]	; (801297c <vQueueUnregisterQueue+0x58>)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	00db      	lsls	r3, r3, #3
 801295e:	4413      	add	r3, r2
 8012960:	2200      	movs	r2, #0
 8012962:	605a      	str	r2, [r3, #4]
                break;
 8012964:	e006      	b.n	8012974 <vQueueUnregisterQueue+0x50>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	3301      	adds	r3, #1
 801296a:	60fb      	str	r3, [r7, #12]
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2b07      	cmp	r3, #7
 8012970:	d9e5      	bls.n	801293e <vQueueUnregisterQueue+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012972:	bf00      	nop
 8012974:	bf00      	nop
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	200564fc 	.word	0x200564fc

08012980 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8012980:	b580      	push	{r7, lr}
 8012982:	b086      	sub	sp, #24
 8012984:	af00      	add	r7, sp, #0
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8012990:	f001 fc8a 	bl	80142a8 <vPortEnterCritical>
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801299a:	b25b      	sxtb	r3, r3
 801299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129a0:	d103      	bne.n	80129aa <vQueueWaitForMessageRestricted+0x2a>
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	2200      	movs	r2, #0
 80129a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129b0:	b25b      	sxtb	r3, r3
 80129b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129b6:	d103      	bne.n	80129c0 <vQueueWaitForMessageRestricted+0x40>
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	2200      	movs	r2, #0
 80129bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129c0:	f001 fc84 	bl	80142cc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d106      	bne.n	80129da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	3324      	adds	r3, #36	; 0x24
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	68b9      	ldr	r1, [r7, #8]
 80129d4:	4618      	mov	r0, r3
 80129d6:	f000 fcd1 	bl	801337c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80129da:	6978      	ldr	r0, [r7, #20]
 80129dc:	f7ff fede 	bl	801279c <prvUnlockQueue>
    }
 80129e0:	bf00      	nop
 80129e2:	3718      	adds	r7, #24
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b08c      	sub	sp, #48	; 0x30
 80129ec:	af04      	add	r7, sp, #16
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	607a      	str	r2, [r7, #4]
 80129f4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80129f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d102      	bne.n	8012a02 <xTaskCreateStatic+0x1a>
 80129fc:	f001 fd94 	bl	8014528 <ulSetInterruptMask>
 8012a00:	e7fe      	b.n	8012a00 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d102      	bne.n	8012a0e <xTaskCreateStatic+0x26>
 8012a08:	f001 fd8e 	bl	8014528 <ulSetInterruptMask>
 8012a0c:	e7fe      	b.n	8012a0c <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8012a0e:	235c      	movs	r3, #92	; 0x5c
 8012a10:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	2b5c      	cmp	r3, #92	; 0x5c
 8012a16:	d002      	beq.n	8012a1e <xTaskCreateStatic+0x36>
 8012a18:	f001 fd86 	bl	8014528 <ulSetInterruptMask>
 8012a1c:	e7fe      	b.n	8012a1c <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012a1e:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d023      	beq.n	8012a6e <xTaskCreateStatic+0x86>
 8012a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d020      	beq.n	8012a6e <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2e:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8012a30:	225c      	movs	r2, #92	; 0x5c
 8012a32:	2100      	movs	r1, #0
 8012a34:	69f8      	ldr	r0, [r7, #28]
 8012a36:	f010 fab7 	bl	8022fa8 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a3e:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	2202      	movs	r2, #2
 8012a44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012a48:	2300      	movs	r3, #0
 8012a4a:	9303      	str	r3, [sp, #12]
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	9302      	str	r3, [sp, #8]
 8012a50:	f107 0318 	add.w	r3, r7, #24
 8012a54:	9301      	str	r3, [sp, #4]
 8012a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	68b9      	ldr	r1, [r7, #8]
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	f000 f855 	bl	8012b10 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8012a66:	69f8      	ldr	r0, [r7, #28]
 8012a68:	f000 f8d2 	bl	8012c10 <prvAddNewTaskToReadyList>
 8012a6c:	e001      	b.n	8012a72 <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8012a72:	69bb      	ldr	r3, [r7, #24]
    }
 8012a74:	4618      	mov	r0, r3
 8012a76:	3720      	adds	r7, #32
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}

08012a7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b08c      	sub	sp, #48	; 0x30
 8012a80:	af04      	add	r7, sp, #16
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	603b      	str	r3, [r7, #0]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012a8c:	88fb      	ldrh	r3, [r7, #6]
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4618      	mov	r0, r3
 8012a92:	f001 fda9 	bl	80145e8 <pvPortMalloc>
 8012a96:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d013      	beq.n	8012ac6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012a9e:	205c      	movs	r0, #92	; 0x5c
 8012aa0:	f001 fda2 	bl	80145e8 <pvPortMalloc>
 8012aa4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d008      	beq.n	8012abe <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8012aac:	225c      	movs	r2, #92	; 0x5c
 8012aae:	2100      	movs	r1, #0
 8012ab0:	69f8      	ldr	r0, [r7, #28]
 8012ab2:	f010 fa79 	bl	8022fa8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	631a      	str	r2, [r3, #48]	; 0x30
 8012abc:	e005      	b.n	8012aca <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8012abe:	6978      	ldr	r0, [r7, #20]
 8012ac0:	f001 fe3c 	bl	801473c <vPortFree>
 8012ac4:	e001      	b.n	8012aca <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d017      	beq.n	8012b00 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012ad8:	88fa      	ldrh	r2, [r7, #6]
 8012ada:	2300      	movs	r3, #0
 8012adc:	9303      	str	r3, [sp, #12]
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	9302      	str	r3, [sp, #8]
 8012ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	68b9      	ldr	r1, [r7, #8]
 8012aee:	68f8      	ldr	r0, [r7, #12]
 8012af0:	f000 f80e 	bl	8012b10 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8012af4:	69f8      	ldr	r0, [r7, #28]
 8012af6:	f000 f88b 	bl	8012c10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8012afa:	2301      	movs	r3, #1
 8012afc:	61bb      	str	r3, [r7, #24]
 8012afe:	e002      	b.n	8012b06 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012b00:	f04f 33ff 	mov.w	r3, #4294967295
 8012b04:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8012b06:	69bb      	ldr	r3, [r7, #24]
    }
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3720      	adds	r7, #32
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b086      	sub	sp, #24
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
 8012b1c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	461a      	mov	r2, r3
 8012b28:	21a5      	movs	r1, #165	; 0xa5
 8012b2a:	f010 fa3d 	bl	8022fa8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012b38:	3b01      	subs	r3, #1
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	4413      	add	r3, r2
 8012b3e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	f023 0307 	bic.w	r3, r3, #7
 8012b46:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	f003 0307 	and.w	r3, r3, #7
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d002      	beq.n	8012b58 <prvInitialiseNewTask+0x48>
 8012b52:	f001 fce9 	bl	8014528 <ulSetInterruptMask>
 8012b56:	e7fe      	b.n	8012b56 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d01e      	beq.n	8012b9c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b5e:	2300      	movs	r3, #0
 8012b60:	617b      	str	r3, [r7, #20]
 8012b62:	e012      	b.n	8012b8a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012b64:	68ba      	ldr	r2, [r7, #8]
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	4413      	add	r3, r2
 8012b6a:	7819      	ldrb	r1, [r3, #0]
 8012b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	4413      	add	r3, r2
 8012b72:	3334      	adds	r3, #52	; 0x34
 8012b74:	460a      	mov	r2, r1
 8012b76:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d006      	beq.n	8012b92 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	3301      	adds	r3, #1
 8012b88:	617b      	str	r3, [r7, #20]
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	2b0f      	cmp	r3, #15
 8012b8e:	d9e9      	bls.n	8012b64 <prvInitialiseNewTask+0x54>
 8012b90:	e000      	b.n	8012b94 <prvInitialiseNewTask+0x84>
            {
                break;
 8012b92:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	2200      	movs	r2, #0
 8012b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8012b9c:	6a3b      	ldr	r3, [r7, #32]
 8012b9e:	2b37      	cmp	r3, #55	; 0x37
 8012ba0:	d902      	bls.n	8012ba8 <prvInitialiseNewTask+0x98>
 8012ba2:	f001 fcc1 	bl	8014528 <ulSetInterruptMask>
 8012ba6:	e7fe      	b.n	8012ba6 <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012ba8:	6a3b      	ldr	r3, [r7, #32]
 8012baa:	2b37      	cmp	r3, #55	; 0x37
 8012bac:	d901      	bls.n	8012bb2 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012bae:	2337      	movs	r3, #55	; 0x37
 8012bb0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8012bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb4:	6a3a      	ldr	r2, [r7, #32]
 8012bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8012bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bba:	6a3a      	ldr	r2, [r7, #32]
 8012bbc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fe feb4 	bl	8011930 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bca:	3318      	adds	r3, #24
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7fe feaf 	bl	8011930 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bd6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bd8:	6a3b      	ldr	r3, [r7, #32]
 8012bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012be6:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8012be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	68fa      	ldr	r2, [r7, #12]
 8012bf0:	6938      	ldr	r0, [r7, #16]
 8012bf2:	f001 fbb5 	bl	8014360 <pxPortInitialiseStack>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d002      	beq.n	8012c08 <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c06:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012c08:	bf00      	nop
 8012c0a:	3718      	adds	r7, #24
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8012c18:	f001 fb46 	bl	80142a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8012c1c:	4b3e      	ldr	r3, [pc, #248]	; (8012d18 <prvAddNewTaskToReadyList+0x108>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	3301      	adds	r3, #1
 8012c22:	4a3d      	ldr	r2, [pc, #244]	; (8012d18 <prvAddNewTaskToReadyList+0x108>)
 8012c24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8012c26:	4b3d      	ldr	r3, [pc, #244]	; (8012d1c <prvAddNewTaskToReadyList+0x10c>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d109      	bne.n	8012c42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8012c2e:	4a3b      	ldr	r2, [pc, #236]	; (8012d1c <prvAddNewTaskToReadyList+0x10c>)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012c34:	4b38      	ldr	r3, [pc, #224]	; (8012d18 <prvAddNewTaskToReadyList+0x108>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d110      	bne.n	8012c5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8012c3c:	f000 fd32 	bl	80136a4 <prvInitialiseTaskLists>
 8012c40:	e00d      	b.n	8012c5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8012c42:	4b37      	ldr	r3, [pc, #220]	; (8012d20 <prvAddNewTaskToReadyList+0x110>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d109      	bne.n	8012c5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012c4a:	4b34      	ldr	r3, [pc, #208]	; (8012d1c <prvAddNewTaskToReadyList+0x10c>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d802      	bhi.n	8012c5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8012c58:	4a30      	ldr	r2, [pc, #192]	; (8012d1c <prvAddNewTaskToReadyList+0x10c>)
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8012c5e:	4b31      	ldr	r3, [pc, #196]	; (8012d24 <prvAddNewTaskToReadyList+0x114>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	3301      	adds	r3, #1
 8012c64:	4a2f      	ldr	r2, [pc, #188]	; (8012d24 <prvAddNewTaskToReadyList+0x114>)
 8012c66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012c68:	4b2e      	ldr	r3, [pc, #184]	; (8012d24 <prvAddNewTaskToReadyList+0x114>)
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c74:	4b2c      	ldr	r3, [pc, #176]	; (8012d28 <prvAddNewTaskToReadyList+0x118>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d903      	bls.n	8012c84 <prvAddNewTaskToReadyList+0x74>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c80:	4a29      	ldr	r2, [pc, #164]	; (8012d28 <prvAddNewTaskToReadyList+0x118>)
 8012c82:	6013      	str	r3, [r2, #0]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c88:	4928      	ldr	r1, [pc, #160]	; (8012d2c <prvAddNewTaskToReadyList+0x11c>)
 8012c8a:	4613      	mov	r3, r2
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	4413      	add	r3, r2
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	440b      	add	r3, r1
 8012c94:	3304      	adds	r3, #4
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	60fb      	str	r3, [r7, #12]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	609a      	str	r2, [r3, #8]
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	689a      	ldr	r2, [r3, #8]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	60da      	str	r2, [r3, #12]
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	689b      	ldr	r3, [r3, #8]
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	3204      	adds	r2, #4
 8012cb0:	605a      	str	r2, [r3, #4]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	1d1a      	adds	r2, r3, #4
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	609a      	str	r2, [r3, #8]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	4a19      	ldr	r2, [pc, #100]	; (8012d2c <prvAddNewTaskToReadyList+0x11c>)
 8012cc8:	441a      	add	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	615a      	str	r2, [r3, #20]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cd2:	4916      	ldr	r1, [pc, #88]	; (8012d2c <prvAddNewTaskToReadyList+0x11c>)
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4413      	add	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	440b      	add	r3, r1
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	1c59      	adds	r1, r3, #1
 8012ce2:	4812      	ldr	r0, [pc, #72]	; (8012d2c <prvAddNewTaskToReadyList+0x11c>)
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	009b      	lsls	r3, r3, #2
 8012ce8:	4413      	add	r3, r2
 8012cea:	009b      	lsls	r3, r3, #2
 8012cec:	4403      	add	r3, r0
 8012cee:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8012cf0:	f001 faec 	bl	80142cc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8012cf4:	4b0a      	ldr	r3, [pc, #40]	; (8012d20 <prvAddNewTaskToReadyList+0x110>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d008      	beq.n	8012d0e <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012cfc:	4b07      	ldr	r3, [pc, #28]	; (8012d1c <prvAddNewTaskToReadyList+0x10c>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d201      	bcs.n	8012d0e <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8012d0a:	f001 fabb 	bl	8014284 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012d0e:	bf00      	nop
 8012d10:	3710      	adds	r7, #16
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	20056a10 	.word	0x20056a10
 8012d1c:	2005653c 	.word	0x2005653c
 8012d20:	20056a1c 	.word	0x20056a1c
 8012d24:	20056a2c 	.word	0x20056a2c
 8012d28:	20056a18 	.word	0x20056a18
 8012d2c:	20056540 	.word	0x20056540

08012d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b084      	sub	sp, #16
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d00f      	beq.n	8012d62 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8012d42:	4b0c      	ldr	r3, [pc, #48]	; (8012d74 <vTaskDelay+0x44>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d002      	beq.n	8012d50 <vTaskDelay+0x20>
 8012d4a:	f001 fbed 	bl	8014528 <ulSetInterruptMask>
 8012d4e:	e7fe      	b.n	8012d4e <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8012d50:	f000 f86c 	bl	8012e2c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012d54:	2100      	movs	r1, #0
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f000 ff48 	bl	8013bec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8012d5c:	f000 f874 	bl	8012e48 <xTaskResumeAll>
 8012d60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d101      	bne.n	8012d6c <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 8012d68:	f001 fa8c 	bl	8014284 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8012d6c:	bf00      	nop
 8012d6e:	3710      	adds	r7, #16
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	20056a38 	.word	0x20056a38

08012d78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b088      	sub	sp, #32
 8012d7c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8012d82:	2300      	movs	r3, #0
 8012d84:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012d86:	463a      	mov	r2, r7
 8012d88:	1d39      	adds	r1, r7, #4
 8012d8a:	f107 0308 	add.w	r3, r7, #8
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fe fd7a 	bl	8011888 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8012d94:	6839      	ldr	r1, [r7, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	68ba      	ldr	r2, [r7, #8]
 8012d9a:	9202      	str	r2, [sp, #8]
 8012d9c:	9301      	str	r3, [sp, #4]
 8012d9e:	2300      	movs	r3, #0
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	2300      	movs	r3, #0
 8012da4:	460a      	mov	r2, r1
 8012da6:	491a      	ldr	r1, [pc, #104]	; (8012e10 <vTaskStartScheduler+0x98>)
 8012da8:	481a      	ldr	r0, [pc, #104]	; (8012e14 <vTaskStartScheduler+0x9c>)
 8012daa:	f7ff fe1d 	bl	80129e8 <xTaskCreateStatic>
 8012dae:	4603      	mov	r3, r0
 8012db0:	4a19      	ldr	r2, [pc, #100]	; (8012e18 <vTaskStartScheduler+0xa0>)
 8012db2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8012db4:	4b18      	ldr	r3, [pc, #96]	; (8012e18 <vTaskStartScheduler+0xa0>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d002      	beq.n	8012dc2 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	60fb      	str	r3, [r7, #12]
 8012dc0:	e001      	b.n	8012dc6 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d102      	bne.n	8012dd2 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8012dcc:	f000 ff7c 	bl	8013cc8 <xTimerCreateTimerTask>
 8012dd0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2b01      	cmp	r3, #1
 8012dd6:	d10e      	bne.n	8012df6 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8012dd8:	f001 fba6 	bl	8014528 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8012ddc:	4b0f      	ldr	r3, [pc, #60]	; (8012e1c <vTaskStartScheduler+0xa4>)
 8012dde:	f04f 32ff 	mov.w	r2, #4294967295
 8012de2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8012de4:	4b0e      	ldr	r3, [pc, #56]	; (8012e20 <vTaskStartScheduler+0xa8>)
 8012de6:	2201      	movs	r2, #1
 8012de8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012dea:	4b0e      	ldr	r3, [pc, #56]	; (8012e24 <vTaskStartScheduler+0xac>)
 8012dec:	2200      	movs	r2, #0
 8012dee:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8012df0:	f001 fb40 	bl	8014474 <xPortStartScheduler>
 8012df4:	e006      	b.n	8012e04 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dfc:	d102      	bne.n	8012e04 <vTaskStartScheduler+0x8c>
 8012dfe:	f001 fb93 	bl	8014528 <ulSetInterruptMask>
 8012e02:	e7fe      	b.n	8012e02 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8012e04:	4b08      	ldr	r3, [pc, #32]	; (8012e28 <vTaskStartScheduler+0xb0>)
 8012e06:	681b      	ldr	r3, [r3, #0]
}
 8012e08:	bf00      	nop
 8012e0a:	3710      	adds	r7, #16
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	08024384 	.word	0x08024384
 8012e14:	08013685 	.word	0x08013685
 8012e18:	20056a34 	.word	0x20056a34
 8012e1c:	20056a30 	.word	0x20056a30
 8012e20:	20056a1c 	.word	0x20056a1c
 8012e24:	20056a14 	.word	0x20056a14
 8012e28:	20050078 	.word	0x20050078

08012e2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8012e30:	4b04      	ldr	r3, [pc, #16]	; (8012e44 <vTaskSuspendAll+0x18>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	3301      	adds	r3, #1
 8012e36:	4a03      	ldr	r2, [pc, #12]	; (8012e44 <vTaskSuspendAll+0x18>)
 8012e38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8012e3a:	bf00      	nop
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr
 8012e44:	20056a38 	.word	0x20056a38

08012e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b086      	sub	sp, #24
 8012e4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8012e52:	2300      	movs	r3, #0
 8012e54:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8012e56:	4b6a      	ldr	r3, [pc, #424]	; (8013000 <xTaskResumeAll+0x1b8>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d102      	bne.n	8012e64 <xTaskResumeAll+0x1c>
 8012e5e:	f001 fb63 	bl	8014528 <ulSetInterruptMask>
 8012e62:	e7fe      	b.n	8012e62 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8012e64:	f001 fa20 	bl	80142a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8012e68:	4b65      	ldr	r3, [pc, #404]	; (8013000 <xTaskResumeAll+0x1b8>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	4a64      	ldr	r2, [pc, #400]	; (8013000 <xTaskResumeAll+0x1b8>)
 8012e70:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e72:	4b63      	ldr	r3, [pc, #396]	; (8013000 <xTaskResumeAll+0x1b8>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f040 80bb 	bne.w	8012ff2 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012e7c:	4b61      	ldr	r3, [pc, #388]	; (8013004 <xTaskResumeAll+0x1bc>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f000 80b6 	beq.w	8012ff2 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012e86:	e08b      	b.n	8012fa0 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e88:	4b5f      	ldr	r3, [pc, #380]	; (8013008 <xTaskResumeAll+0x1c0>)
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e94:	60bb      	str	r3, [r7, #8]
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	69db      	ldr	r3, [r3, #28]
 8012e9a:	697a      	ldr	r2, [r7, #20]
 8012e9c:	6a12      	ldr	r2, [r2, #32]
 8012e9e:	609a      	str	r2, [r3, #8]
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	6a1b      	ldr	r3, [r3, #32]
 8012ea4:	697a      	ldr	r2, [r7, #20]
 8012ea6:	69d2      	ldr	r2, [r2, #28]
 8012ea8:	605a      	str	r2, [r3, #4]
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	685a      	ldr	r2, [r3, #4]
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	3318      	adds	r3, #24
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d103      	bne.n	8012ebe <xTaskResumeAll+0x76>
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	6a1a      	ldr	r2, [r3, #32]
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	605a      	str	r2, [r3, #4]
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	1e5a      	subs	r2, r3, #1
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	695b      	ldr	r3, [r3, #20]
 8012ed2:	607b      	str	r3, [r7, #4]
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	689b      	ldr	r3, [r3, #8]
 8012ed8:	697a      	ldr	r2, [r7, #20]
 8012eda:	68d2      	ldr	r2, [r2, #12]
 8012edc:	609a      	str	r2, [r3, #8]
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	68db      	ldr	r3, [r3, #12]
 8012ee2:	697a      	ldr	r2, [r7, #20]
 8012ee4:	6892      	ldr	r2, [r2, #8]
 8012ee6:	605a      	str	r2, [r3, #4]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	685a      	ldr	r2, [r3, #4]
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	3304      	adds	r3, #4
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d103      	bne.n	8012efc <xTaskResumeAll+0xb4>
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	68da      	ldr	r2, [r3, #12]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	605a      	str	r2, [r3, #4]
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	2200      	movs	r2, #0
 8012f00:	615a      	str	r2, [r3, #20]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	1e5a      	subs	r2, r3, #1
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f10:	4b3e      	ldr	r3, [pc, #248]	; (801300c <xTaskResumeAll+0x1c4>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d903      	bls.n	8012f20 <xTaskResumeAll+0xd8>
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f1c:	4a3b      	ldr	r2, [pc, #236]	; (801300c <xTaskResumeAll+0x1c4>)
 8012f1e:	6013      	str	r3, [r2, #0]
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f24:	493a      	ldr	r1, [pc, #232]	; (8013010 <xTaskResumeAll+0x1c8>)
 8012f26:	4613      	mov	r3, r2
 8012f28:	009b      	lsls	r3, r3, #2
 8012f2a:	4413      	add	r3, r2
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	440b      	add	r3, r1
 8012f30:	3304      	adds	r3, #4
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	603b      	str	r3, [r7, #0]
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	683a      	ldr	r2, [r7, #0]
 8012f3a:	609a      	str	r2, [r3, #8]
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	689a      	ldr	r2, [r3, #8]
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	60da      	str	r2, [r3, #12]
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	697a      	ldr	r2, [r7, #20]
 8012f4a:	3204      	adds	r2, #4
 8012f4c:	605a      	str	r2, [r3, #4]
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	1d1a      	adds	r2, r3, #4
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	609a      	str	r2, [r3, #8]
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f5a:	4613      	mov	r3, r2
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	4413      	add	r3, r2
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	4a2b      	ldr	r2, [pc, #172]	; (8013010 <xTaskResumeAll+0x1c8>)
 8012f64:	441a      	add	r2, r3
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	615a      	str	r2, [r3, #20]
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f6e:	4928      	ldr	r1, [pc, #160]	; (8013010 <xTaskResumeAll+0x1c8>)
 8012f70:	4613      	mov	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4413      	add	r3, r2
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	440b      	add	r3, r1
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	1c59      	adds	r1, r3, #1
 8012f7e:	4824      	ldr	r0, [pc, #144]	; (8013010 <xTaskResumeAll+0x1c8>)
 8012f80:	4613      	mov	r3, r2
 8012f82:	009b      	lsls	r3, r3, #2
 8012f84:	4413      	add	r3, r2
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	4403      	add	r3, r0
 8012f8a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f90:	4b20      	ldr	r3, [pc, #128]	; (8013014 <xTaskResumeAll+0x1cc>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d302      	bcc.n	8012fa0 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 8012f9a:	4b1f      	ldr	r3, [pc, #124]	; (8013018 <xTaskResumeAll+0x1d0>)
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012fa0:	4b19      	ldr	r3, [pc, #100]	; (8013008 <xTaskResumeAll+0x1c0>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f47f af6f 	bne.w	8012e88 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d001      	beq.n	8012fb4 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8012fb0:	f000 fc0e 	bl	80137d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012fb4:	4b19      	ldr	r3, [pc, #100]	; (801301c <xTaskResumeAll+0x1d4>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d010      	beq.n	8012fe2 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8012fc0:	f000 f85c 	bl	801307c <xTaskIncrementTick>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d002      	beq.n	8012fd0 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 8012fca:	4b13      	ldr	r3, [pc, #76]	; (8013018 <xTaskResumeAll+0x1d0>)
 8012fcc:	2201      	movs	r2, #1
 8012fce:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	3b01      	subs	r3, #1
 8012fd4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d1f1      	bne.n	8012fc0 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 8012fdc:	4b0f      	ldr	r3, [pc, #60]	; (801301c <xTaskResumeAll+0x1d4>)
 8012fde:	2200      	movs	r2, #0
 8012fe0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8012fe2:	4b0d      	ldr	r3, [pc, #52]	; (8013018 <xTaskResumeAll+0x1d0>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d003      	beq.n	8012ff2 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8012fea:	2301      	movs	r3, #1
 8012fec:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8012fee:	f001 f949 	bl	8014284 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8012ff2:	f001 f96b 	bl	80142cc <vPortExitCritical>

    return xAlreadyYielded;
 8012ff6:	693b      	ldr	r3, [r7, #16]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3718      	adds	r7, #24
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	20056a38 	.word	0x20056a38
 8013004:	20056a10 	.word	0x20056a10
 8013008:	200569d0 	.word	0x200569d0
 801300c:	20056a18 	.word	0x20056a18
 8013010:	20056540 	.word	0x20056540
 8013014:	2005653c 	.word	0x2005653c
 8013018:	20056a24 	.word	0x20056a24
 801301c:	20056a20 	.word	0x20056a20

08013020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013020:	b480      	push	{r7}
 8013022:	b083      	sub	sp, #12
 8013024:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8013026:	4b05      	ldr	r3, [pc, #20]	; (801303c <xTaskGetTickCount+0x1c>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 801302c:	687b      	ldr	r3, [r7, #4]
}
 801302e:	4618      	mov	r0, r3
 8013030:	370c      	adds	r7, #12
 8013032:	46bd      	mov	sp, r7
 8013034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013038:	4770      	bx	lr
 801303a:	bf00      	nop
 801303c:	20056a14 	.word	0x20056a14

08013040 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013046:	2300      	movs	r3, #0
 8013048:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 801304a:	4b05      	ldr	r3, [pc, #20]	; (8013060 <xTaskGetTickCountFromISR+0x20>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8013050:	683b      	ldr	r3, [r7, #0]
}
 8013052:	4618      	mov	r0, r3
 8013054:	370c      	adds	r7, #12
 8013056:	46bd      	mov	sp, r7
 8013058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305c:	4770      	bx	lr
 801305e:	bf00      	nop
 8013060:	20056a14 	.word	0x20056a14

08013064 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8013064:	b480      	push	{r7}
 8013066:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8013068:	4b03      	ldr	r3, [pc, #12]	; (8013078 <uxTaskGetNumberOfTasks+0x14>)
 801306a:	681b      	ldr	r3, [r3, #0]
}
 801306c:	4618      	mov	r0, r3
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr
 8013076:	bf00      	nop
 8013078:	20056a10 	.word	0x20056a10

0801307c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b088      	sub	sp, #32
 8013080:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8013082:	2300      	movs	r3, #0
 8013084:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013086:	4b7a      	ldr	r3, [pc, #488]	; (8013270 <xTaskIncrementTick+0x1f4>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	f040 80e5 	bne.w	801325a <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013090:	4b78      	ldr	r3, [pc, #480]	; (8013274 <xTaskIncrementTick+0x1f8>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	3301      	adds	r3, #1
 8013096:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8013098:	4a76      	ldr	r2, [pc, #472]	; (8013274 <xTaskIncrementTick+0x1f8>)
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801309e:	69bb      	ldr	r3, [r7, #24]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d118      	bne.n	80130d6 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 80130a4:	4b74      	ldr	r3, [pc, #464]	; (8013278 <xTaskIncrementTick+0x1fc>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d002      	beq.n	80130b4 <xTaskIncrementTick+0x38>
 80130ae:	f001 fa3b 	bl	8014528 <ulSetInterruptMask>
 80130b2:	e7fe      	b.n	80130b2 <xTaskIncrementTick+0x36>
 80130b4:	4b70      	ldr	r3, [pc, #448]	; (8013278 <xTaskIncrementTick+0x1fc>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	617b      	str	r3, [r7, #20]
 80130ba:	4b70      	ldr	r3, [pc, #448]	; (801327c <xTaskIncrementTick+0x200>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	4a6e      	ldr	r2, [pc, #440]	; (8013278 <xTaskIncrementTick+0x1fc>)
 80130c0:	6013      	str	r3, [r2, #0]
 80130c2:	4a6e      	ldr	r2, [pc, #440]	; (801327c <xTaskIncrementTick+0x200>)
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	6013      	str	r3, [r2, #0]
 80130c8:	4b6d      	ldr	r3, [pc, #436]	; (8013280 <xTaskIncrementTick+0x204>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	3301      	adds	r3, #1
 80130ce:	4a6c      	ldr	r2, [pc, #432]	; (8013280 <xTaskIncrementTick+0x204>)
 80130d0:	6013      	str	r3, [r2, #0]
 80130d2:	f000 fb7d 	bl	80137d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80130d6:	4b6b      	ldr	r3, [pc, #428]	; (8013284 <xTaskIncrementTick+0x208>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	69ba      	ldr	r2, [r7, #24]
 80130dc:	429a      	cmp	r2, r3
 80130de:	f0c0 80a7 	bcc.w	8013230 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130e2:	4b65      	ldr	r3, [pc, #404]	; (8013278 <xTaskIncrementTick+0x1fc>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d104      	bne.n	80130f6 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130ec:	4b65      	ldr	r3, [pc, #404]	; (8013284 <xTaskIncrementTick+0x208>)
 80130ee:	f04f 32ff 	mov.w	r2, #4294967295
 80130f2:	601a      	str	r2, [r3, #0]
                    break;
 80130f4:	e09c      	b.n	8013230 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130f6:	4b60      	ldr	r3, [pc, #384]	; (8013278 <xTaskIncrementTick+0x1fc>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013100:	693b      	ldr	r3, [r7, #16]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8013106:	69ba      	ldr	r2, [r7, #24]
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	429a      	cmp	r2, r3
 801310c:	d203      	bcs.n	8013116 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 801310e:	4a5d      	ldr	r2, [pc, #372]	; (8013284 <xTaskIncrementTick+0x208>)
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8013114:	e08c      	b.n	8013230 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	695b      	ldr	r3, [r3, #20]
 801311a:	60bb      	str	r3, [r7, #8]
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	689b      	ldr	r3, [r3, #8]
 8013120:	693a      	ldr	r2, [r7, #16]
 8013122:	68d2      	ldr	r2, [r2, #12]
 8013124:	609a      	str	r2, [r3, #8]
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	693a      	ldr	r2, [r7, #16]
 801312c:	6892      	ldr	r2, [r2, #8]
 801312e:	605a      	str	r2, [r3, #4]
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	685a      	ldr	r2, [r3, #4]
 8013134:	693b      	ldr	r3, [r7, #16]
 8013136:	3304      	adds	r3, #4
 8013138:	429a      	cmp	r2, r3
 801313a:	d103      	bne.n	8013144 <xTaskIncrementTick+0xc8>
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	68da      	ldr	r2, [r3, #12]
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	605a      	str	r2, [r3, #4]
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	2200      	movs	r2, #0
 8013148:	615a      	str	r2, [r3, #20]
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	1e5a      	subs	r2, r3, #1
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013158:	2b00      	cmp	r3, #0
 801315a:	d01e      	beq.n	801319a <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013160:	607b      	str	r3, [r7, #4]
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	69db      	ldr	r3, [r3, #28]
 8013166:	693a      	ldr	r2, [r7, #16]
 8013168:	6a12      	ldr	r2, [r2, #32]
 801316a:	609a      	str	r2, [r3, #8]
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	6a1b      	ldr	r3, [r3, #32]
 8013170:	693a      	ldr	r2, [r7, #16]
 8013172:	69d2      	ldr	r2, [r2, #28]
 8013174:	605a      	str	r2, [r3, #4]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	685a      	ldr	r2, [r3, #4]
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	3318      	adds	r3, #24
 801317e:	429a      	cmp	r2, r3
 8013180:	d103      	bne.n	801318a <xTaskIncrementTick+0x10e>
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	6a1a      	ldr	r2, [r3, #32]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	605a      	str	r2, [r3, #4]
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	2200      	movs	r2, #0
 801318e:	629a      	str	r2, [r3, #40]	; 0x28
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	1e5a      	subs	r2, r3, #1
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801319e:	4b3a      	ldr	r3, [pc, #232]	; (8013288 <xTaskIncrementTick+0x20c>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d903      	bls.n	80131ae <xTaskIncrementTick+0x132>
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131aa:	4a37      	ldr	r2, [pc, #220]	; (8013288 <xTaskIncrementTick+0x20c>)
 80131ac:	6013      	str	r3, [r2, #0]
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131b2:	4936      	ldr	r1, [pc, #216]	; (801328c <xTaskIncrementTick+0x210>)
 80131b4:	4613      	mov	r3, r2
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	4413      	add	r3, r2
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	440b      	add	r3, r1
 80131be:	3304      	adds	r3, #4
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	603b      	str	r3, [r7, #0]
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	683a      	ldr	r2, [r7, #0]
 80131c8:	609a      	str	r2, [r3, #8]
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	689a      	ldr	r2, [r3, #8]
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	60da      	str	r2, [r3, #12]
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	689b      	ldr	r3, [r3, #8]
 80131d6:	693a      	ldr	r2, [r7, #16]
 80131d8:	3204      	adds	r2, #4
 80131da:	605a      	str	r2, [r3, #4]
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	1d1a      	adds	r2, r3, #4
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	609a      	str	r2, [r3, #8]
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131e8:	4613      	mov	r3, r2
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	4413      	add	r3, r2
 80131ee:	009b      	lsls	r3, r3, #2
 80131f0:	4a26      	ldr	r2, [pc, #152]	; (801328c <xTaskIncrementTick+0x210>)
 80131f2:	441a      	add	r2, r3
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	615a      	str	r2, [r3, #20]
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131fc:	4923      	ldr	r1, [pc, #140]	; (801328c <xTaskIncrementTick+0x210>)
 80131fe:	4613      	mov	r3, r2
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	4413      	add	r3, r2
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	440b      	add	r3, r1
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	1c59      	adds	r1, r3, #1
 801320c:	481f      	ldr	r0, [pc, #124]	; (801328c <xTaskIncrementTick+0x210>)
 801320e:	4613      	mov	r3, r2
 8013210:	009b      	lsls	r3, r3, #2
 8013212:	4413      	add	r3, r2
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	4403      	add	r3, r0
 8013218:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801321e:	4b1c      	ldr	r3, [pc, #112]	; (8013290 <xTaskIncrementTick+0x214>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013224:	429a      	cmp	r2, r3
 8013226:	f67f af5c 	bls.w	80130e2 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 801322a:	2301      	movs	r3, #1
 801322c:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801322e:	e758      	b.n	80130e2 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013230:	4b17      	ldr	r3, [pc, #92]	; (8013290 <xTaskIncrementTick+0x214>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013236:	4915      	ldr	r1, [pc, #84]	; (801328c <xTaskIncrementTick+0x210>)
 8013238:	4613      	mov	r3, r2
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	4413      	add	r3, r2
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	440b      	add	r3, r1
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d901      	bls.n	801324c <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 8013248:	2301      	movs	r3, #1
 801324a:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 801324c:	4b11      	ldr	r3, [pc, #68]	; (8013294 <xTaskIncrementTick+0x218>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d007      	beq.n	8013264 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8013254:	2301      	movs	r3, #1
 8013256:	61fb      	str	r3, [r7, #28]
 8013258:	e004      	b.n	8013264 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 801325a:	4b0f      	ldr	r3, [pc, #60]	; (8013298 <xTaskIncrementTick+0x21c>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	3301      	adds	r3, #1
 8013260:	4a0d      	ldr	r2, [pc, #52]	; (8013298 <xTaskIncrementTick+0x21c>)
 8013262:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8013264:	69fb      	ldr	r3, [r7, #28]
}
 8013266:	4618      	mov	r0, r3
 8013268:	3720      	adds	r7, #32
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
 801326e:	bf00      	nop
 8013270:	20056a38 	.word	0x20056a38
 8013274:	20056a14 	.word	0x20056a14
 8013278:	200569c8 	.word	0x200569c8
 801327c:	200569cc 	.word	0x200569cc
 8013280:	20056a28 	.word	0x20056a28
 8013284:	20056a30 	.word	0x20056a30
 8013288:	20056a18 	.word	0x20056a18
 801328c:	20056540 	.word	0x20056540
 8013290:	2005653c 	.word	0x2005653c
 8013294:	20056a24 	.word	0x20056a24
 8013298:	20056a20 	.word	0x20056a20

0801329c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132a2:	4b23      	ldr	r3, [pc, #140]	; (8013330 <vTaskSwitchContext+0x94>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d003      	beq.n	80132b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80132aa:	4b22      	ldr	r3, [pc, #136]	; (8013334 <vTaskSwitchContext+0x98>)
 80132ac:	2201      	movs	r2, #1
 80132ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80132b0:	e039      	b.n	8013326 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 80132b2:	4b20      	ldr	r3, [pc, #128]	; (8013334 <vTaskSwitchContext+0x98>)
 80132b4:	2200      	movs	r2, #0
 80132b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132b8:	4b1f      	ldr	r3, [pc, #124]	; (8013338 <vTaskSwitchContext+0x9c>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	607b      	str	r3, [r7, #4]
 80132be:	e008      	b.n	80132d2 <vTaskSwitchContext+0x36>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d102      	bne.n	80132cc <vTaskSwitchContext+0x30>
 80132c6:	f001 f92f 	bl	8014528 <ulSetInterruptMask>
 80132ca:	e7fe      	b.n	80132ca <vTaskSwitchContext+0x2e>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	3b01      	subs	r3, #1
 80132d0:	607b      	str	r3, [r7, #4]
 80132d2:	491a      	ldr	r1, [pc, #104]	; (801333c <vTaskSwitchContext+0xa0>)
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	4613      	mov	r3, r2
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	4413      	add	r3, r2
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	440b      	add	r3, r1
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d0ec      	beq.n	80132c0 <vTaskSwitchContext+0x24>
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	4613      	mov	r3, r2
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	4413      	add	r3, r2
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	4a12      	ldr	r2, [pc, #72]	; (801333c <vTaskSwitchContext+0xa0>)
 80132f2:	4413      	add	r3, r2
 80132f4:	603b      	str	r3, [r7, #0]
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	685a      	ldr	r2, [r3, #4]
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	605a      	str	r2, [r3, #4]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	685a      	ldr	r2, [r3, #4]
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	3308      	adds	r3, #8
 8013308:	429a      	cmp	r2, r3
 801330a:	d104      	bne.n	8013316 <vTaskSwitchContext+0x7a>
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	685a      	ldr	r2, [r3, #4]
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	605a      	str	r2, [r3, #4]
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	4a08      	ldr	r2, [pc, #32]	; (8013340 <vTaskSwitchContext+0xa4>)
 801331e:	6013      	str	r3, [r2, #0]
 8013320:	4a05      	ldr	r2, [pc, #20]	; (8013338 <vTaskSwitchContext+0x9c>)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6013      	str	r3, [r2, #0]
}
 8013326:	bf00      	nop
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
 801332e:	bf00      	nop
 8013330:	20056a38 	.word	0x20056a38
 8013334:	20056a24 	.word	0x20056a24
 8013338:	20056a18 	.word	0x20056a18
 801333c:	20056540 	.word	0x20056540
 8013340:	2005653c 	.word	0x2005653c

08013344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d102      	bne.n	801335a <vTaskPlaceOnEventList+0x16>
 8013354:	f001 f8e8 	bl	8014528 <ulSetInterruptMask>
 8013358:	e7fe      	b.n	8013358 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801335a:	4b07      	ldr	r3, [pc, #28]	; (8013378 <vTaskPlaceOnEventList+0x34>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	3318      	adds	r3, #24
 8013360:	4619      	mov	r1, r3
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7fe faf1 	bl	801194a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013368:	2101      	movs	r1, #1
 801336a:	6838      	ldr	r0, [r7, #0]
 801336c:	f000 fc3e 	bl	8013bec <prvAddCurrentTaskToDelayedList>
}
 8013370:	bf00      	nop
 8013372:	3708      	adds	r7, #8
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}
 8013378:	2005653c 	.word	0x2005653c

0801337c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 801337c:	b580      	push	{r7, lr}
 801337e:	b086      	sub	sp, #24
 8013380:	af00      	add	r7, sp, #0
 8013382:	60f8      	str	r0, [r7, #12]
 8013384:	60b9      	str	r1, [r7, #8]
 8013386:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d102      	bne.n	8013394 <vTaskPlaceOnEventListRestricted+0x18>
 801338e:	f001 f8cb 	bl	8014528 <ulSetInterruptMask>
 8013392:	e7fe      	b.n	8013392 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	617b      	str	r3, [r7, #20]
 801339a:	4b16      	ldr	r3, [pc, #88]	; (80133f4 <vTaskPlaceOnEventListRestricted+0x78>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	697a      	ldr	r2, [r7, #20]
 80133a0:	61da      	str	r2, [r3, #28]
 80133a2:	4b14      	ldr	r3, [pc, #80]	; (80133f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	697a      	ldr	r2, [r7, #20]
 80133a8:	6892      	ldr	r2, [r2, #8]
 80133aa:	621a      	str	r2, [r3, #32]
 80133ac:	4b11      	ldr	r3, [pc, #68]	; (80133f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80133ae:	681a      	ldr	r2, [r3, #0]
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	689b      	ldr	r3, [r3, #8]
 80133b4:	3218      	adds	r2, #24
 80133b6:	605a      	str	r2, [r3, #4]
 80133b8:	4b0e      	ldr	r3, [pc, #56]	; (80133f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	f103 0218 	add.w	r2, r3, #24
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	609a      	str	r2, [r3, #8]
 80133c4:	4b0b      	ldr	r3, [pc, #44]	; (80133f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	68fa      	ldr	r2, [r7, #12]
 80133ca:	629a      	str	r2, [r3, #40]	; 0x28
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	1c5a      	adds	r2, r3, #1
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d002      	beq.n	80133e2 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 80133dc:	f04f 33ff 	mov.w	r3, #4294967295
 80133e0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80133e2:	6879      	ldr	r1, [r7, #4]
 80133e4:	68b8      	ldr	r0, [r7, #8]
 80133e6:	f000 fc01 	bl	8013bec <prvAddCurrentTaskToDelayedList>
    }
 80133ea:	bf00      	nop
 80133ec:	3718      	adds	r7, #24
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	2005653c 	.word	0x2005653c

080133f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b088      	sub	sp, #32
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8013408:	69bb      	ldr	r3, [r7, #24]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d102      	bne.n	8013414 <xTaskRemoveFromEventList+0x1c>
 801340e:	f001 f88b 	bl	8014528 <ulSetInterruptMask>
 8013412:	e7fe      	b.n	8013412 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013418:	617b      	str	r3, [r7, #20]
 801341a:	69bb      	ldr	r3, [r7, #24]
 801341c:	69db      	ldr	r3, [r3, #28]
 801341e:	69ba      	ldr	r2, [r7, #24]
 8013420:	6a12      	ldr	r2, [r2, #32]
 8013422:	609a      	str	r2, [r3, #8]
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	6a1b      	ldr	r3, [r3, #32]
 8013428:	69ba      	ldr	r2, [r7, #24]
 801342a:	69d2      	ldr	r2, [r2, #28]
 801342c:	605a      	str	r2, [r3, #4]
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	685a      	ldr	r2, [r3, #4]
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	3318      	adds	r3, #24
 8013436:	429a      	cmp	r2, r3
 8013438:	d103      	bne.n	8013442 <xTaskRemoveFromEventList+0x4a>
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	6a1a      	ldr	r2, [r3, #32]
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	605a      	str	r2, [r3, #4]
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	2200      	movs	r2, #0
 8013446:	629a      	str	r2, [r3, #40]	; 0x28
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	1e5a      	subs	r2, r3, #1
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013452:	4b4a      	ldr	r3, [pc, #296]	; (801357c <xTaskRemoveFromEventList+0x184>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d15f      	bne.n	801351a <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	695b      	ldr	r3, [r3, #20]
 801345e:	60fb      	str	r3, [r7, #12]
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	689b      	ldr	r3, [r3, #8]
 8013464:	69ba      	ldr	r2, [r7, #24]
 8013466:	68d2      	ldr	r2, [r2, #12]
 8013468:	609a      	str	r2, [r3, #8]
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	69ba      	ldr	r2, [r7, #24]
 8013470:	6892      	ldr	r2, [r2, #8]
 8013472:	605a      	str	r2, [r3, #4]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	685a      	ldr	r2, [r3, #4]
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	3304      	adds	r3, #4
 801347c:	429a      	cmp	r2, r3
 801347e:	d103      	bne.n	8013488 <xTaskRemoveFromEventList+0x90>
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	68da      	ldr	r2, [r3, #12]
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	605a      	str	r2, [r3, #4]
 8013488:	69bb      	ldr	r3, [r7, #24]
 801348a:	2200      	movs	r2, #0
 801348c:	615a      	str	r2, [r3, #20]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	1e5a      	subs	r2, r3, #1
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801349c:	4b38      	ldr	r3, [pc, #224]	; (8013580 <xTaskRemoveFromEventList+0x188>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d903      	bls.n	80134ac <xTaskRemoveFromEventList+0xb4>
 80134a4:	69bb      	ldr	r3, [r7, #24]
 80134a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a8:	4a35      	ldr	r2, [pc, #212]	; (8013580 <xTaskRemoveFromEventList+0x188>)
 80134aa:	6013      	str	r3, [r2, #0]
 80134ac:	69bb      	ldr	r3, [r7, #24]
 80134ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b0:	4934      	ldr	r1, [pc, #208]	; (8013584 <xTaskRemoveFromEventList+0x18c>)
 80134b2:	4613      	mov	r3, r2
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	4413      	add	r3, r2
 80134b8:	009b      	lsls	r3, r3, #2
 80134ba:	440b      	add	r3, r1
 80134bc:	3304      	adds	r3, #4
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	60bb      	str	r3, [r7, #8]
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	609a      	str	r2, [r3, #8]
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	689a      	ldr	r2, [r3, #8]
 80134cc:	69bb      	ldr	r3, [r7, #24]
 80134ce:	60da      	str	r2, [r3, #12]
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	689b      	ldr	r3, [r3, #8]
 80134d4:	69ba      	ldr	r2, [r7, #24]
 80134d6:	3204      	adds	r2, #4
 80134d8:	605a      	str	r2, [r3, #4]
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	1d1a      	adds	r2, r3, #4
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	609a      	str	r2, [r3, #8]
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e6:	4613      	mov	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	4413      	add	r3, r2
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	4a25      	ldr	r2, [pc, #148]	; (8013584 <xTaskRemoveFromEventList+0x18c>)
 80134f0:	441a      	add	r2, r3
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	615a      	str	r2, [r3, #20]
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134fa:	4922      	ldr	r1, [pc, #136]	; (8013584 <xTaskRemoveFromEventList+0x18c>)
 80134fc:	4613      	mov	r3, r2
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	4413      	add	r3, r2
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	440b      	add	r3, r1
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	1c59      	adds	r1, r3, #1
 801350a:	481e      	ldr	r0, [pc, #120]	; (8013584 <xTaskRemoveFromEventList+0x18c>)
 801350c:	4613      	mov	r3, r2
 801350e:	009b      	lsls	r3, r3, #2
 8013510:	4413      	add	r3, r2
 8013512:	009b      	lsls	r3, r3, #2
 8013514:	4403      	add	r3, r0
 8013516:	6019      	str	r1, [r3, #0]
 8013518:	e01b      	b.n	8013552 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801351a:	4b1b      	ldr	r3, [pc, #108]	; (8013588 <xTaskRemoveFromEventList+0x190>)
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	613b      	str	r3, [r7, #16]
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	693a      	ldr	r2, [r7, #16]
 8013524:	61da      	str	r2, [r3, #28]
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	689a      	ldr	r2, [r3, #8]
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	621a      	str	r2, [r3, #32]
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	689b      	ldr	r3, [r3, #8]
 8013532:	69ba      	ldr	r2, [r7, #24]
 8013534:	3218      	adds	r2, #24
 8013536:	605a      	str	r2, [r3, #4]
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	f103 0218 	add.w	r2, r3, #24
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	609a      	str	r2, [r3, #8]
 8013542:	69bb      	ldr	r3, [r7, #24]
 8013544:	4a10      	ldr	r2, [pc, #64]	; (8013588 <xTaskRemoveFromEventList+0x190>)
 8013546:	629a      	str	r2, [r3, #40]	; 0x28
 8013548:	4b0f      	ldr	r3, [pc, #60]	; (8013588 <xTaskRemoveFromEventList+0x190>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	3301      	adds	r3, #1
 801354e:	4a0e      	ldr	r2, [pc, #56]	; (8013588 <xTaskRemoveFromEventList+0x190>)
 8013550:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013556:	4b0d      	ldr	r3, [pc, #52]	; (801358c <xTaskRemoveFromEventList+0x194>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801355c:	429a      	cmp	r2, r3
 801355e:	d905      	bls.n	801356c <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8013560:	2301      	movs	r3, #1
 8013562:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8013564:	4b0a      	ldr	r3, [pc, #40]	; (8013590 <xTaskRemoveFromEventList+0x198>)
 8013566:	2201      	movs	r2, #1
 8013568:	601a      	str	r2, [r3, #0]
 801356a:	e001      	b.n	8013570 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 801356c:	2300      	movs	r3, #0
 801356e:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8013570:	69fb      	ldr	r3, [r7, #28]
}
 8013572:	4618      	mov	r0, r3
 8013574:	3720      	adds	r7, #32
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	20056a38 	.word	0x20056a38
 8013580:	20056a18 	.word	0x20056a18
 8013584:	20056540 	.word	0x20056540
 8013588:	200569d0 	.word	0x200569d0
 801358c:	2005653c 	.word	0x2005653c
 8013590:	20056a24 	.word	0x20056a24

08013594 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 801359c:	4b06      	ldr	r3, [pc, #24]	; (80135b8 <vTaskInternalSetTimeOutState+0x24>)
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80135a4:	4b05      	ldr	r3, [pc, #20]	; (80135bc <vTaskInternalSetTimeOutState+0x28>)
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	605a      	str	r2, [r3, #4]
}
 80135ac:	bf00      	nop
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr
 80135b8:	20056a28 	.word	0x20056a28
 80135bc:	20056a14 	.word	0x20056a14

080135c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b086      	sub	sp, #24
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d102      	bne.n	80135d6 <xTaskCheckForTimeOut+0x16>
 80135d0:	f000 ffaa 	bl	8014528 <ulSetInterruptMask>
 80135d4:	e7fe      	b.n	80135d4 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d102      	bne.n	80135e2 <xTaskCheckForTimeOut+0x22>
 80135dc:	f000 ffa4 	bl	8014528 <ulSetInterruptMask>
 80135e0:	e7fe      	b.n	80135e0 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 80135e2:	f000 fe61 	bl	80142a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80135e6:	4b1f      	ldr	r3, [pc, #124]	; (8013664 <xTaskCheckForTimeOut+0xa4>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	685b      	ldr	r3, [r3, #4]
 80135f0:	693a      	ldr	r2, [r7, #16]
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135fe:	d102      	bne.n	8013606 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8013600:	2300      	movs	r3, #0
 8013602:	617b      	str	r3, [r7, #20]
 8013604:	e026      	b.n	8013654 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	4b17      	ldr	r3, [pc, #92]	; (8013668 <xTaskCheckForTimeOut+0xa8>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	429a      	cmp	r2, r3
 8013610:	d00a      	beq.n	8013628 <xTaskCheckForTimeOut+0x68>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	693a      	ldr	r2, [r7, #16]
 8013618:	429a      	cmp	r2, r3
 801361a:	d305      	bcc.n	8013628 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 801361c:	2301      	movs	r3, #1
 801361e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	2200      	movs	r2, #0
 8013624:	601a      	str	r2, [r3, #0]
 8013626:	e015      	b.n	8013654 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	429a      	cmp	r2, r3
 8013630:	d20b      	bcs.n	801364a <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	1ad2      	subs	r2, r2, r3
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f7ff ffa8 	bl	8013594 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8013644:	2300      	movs	r3, #0
 8013646:	617b      	str	r3, [r7, #20]
 8013648:	e004      	b.n	8013654 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	2200      	movs	r2, #0
 801364e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8013650:	2301      	movs	r3, #1
 8013652:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8013654:	f000 fe3a 	bl	80142cc <vPortExitCritical>

    return xReturn;
 8013658:	697b      	ldr	r3, [r7, #20]
}
 801365a:	4618      	mov	r0, r3
 801365c:	3718      	adds	r7, #24
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	20056a14 	.word	0x20056a14
 8013668:	20056a28 	.word	0x20056a28

0801366c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801366c:	b480      	push	{r7}
 801366e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8013670:	4b03      	ldr	r3, [pc, #12]	; (8013680 <vTaskMissedYield+0x14>)
 8013672:	2201      	movs	r2, #1
 8013674:	601a      	str	r2, [r3, #0]
}
 8013676:	bf00      	nop
 8013678:	46bd      	mov	sp, r7
 801367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367e:	4770      	bx	lr
 8013680:	20056a24 	.word	0x20056a24

08013684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 801368c:	f000 f84a 	bl	8013724 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013690:	4b03      	ldr	r3, [pc, #12]	; (80136a0 <prvIdleTask+0x1c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b01      	cmp	r3, #1
 8013696:	d9f9      	bls.n	801368c <prvIdleTask+0x8>
            {
                taskYIELD();
 8013698:	f000 fdf4 	bl	8014284 <vPortYield>
        prvCheckTasksWaitingTermination();
 801369c:	e7f6      	b.n	801368c <prvIdleTask+0x8>
 801369e:	bf00      	nop
 80136a0:	20056540 	.word	0x20056540

080136a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b082      	sub	sp, #8
 80136a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80136aa:	2300      	movs	r3, #0
 80136ac:	607b      	str	r3, [r7, #4]
 80136ae:	e00c      	b.n	80136ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	4613      	mov	r3, r2
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	4413      	add	r3, r2
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	4a12      	ldr	r2, [pc, #72]	; (8013704 <prvInitialiseTaskLists+0x60>)
 80136bc:	4413      	add	r3, r2
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fe f916 	bl	80118f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	3301      	adds	r3, #1
 80136c8:	607b      	str	r3, [r7, #4]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2b37      	cmp	r3, #55	; 0x37
 80136ce:	d9ef      	bls.n	80136b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80136d0:	480d      	ldr	r0, [pc, #52]	; (8013708 <prvInitialiseTaskLists+0x64>)
 80136d2:	f7fe f90d 	bl	80118f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80136d6:	480d      	ldr	r0, [pc, #52]	; (801370c <prvInitialiseTaskLists+0x68>)
 80136d8:	f7fe f90a 	bl	80118f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80136dc:	480c      	ldr	r0, [pc, #48]	; (8013710 <prvInitialiseTaskLists+0x6c>)
 80136de:	f7fe f907 	bl	80118f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80136e2:	480c      	ldr	r0, [pc, #48]	; (8013714 <prvInitialiseTaskLists+0x70>)
 80136e4:	f7fe f904 	bl	80118f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80136e8:	480b      	ldr	r0, [pc, #44]	; (8013718 <prvInitialiseTaskLists+0x74>)
 80136ea:	f7fe f901 	bl	80118f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80136ee:	4b0b      	ldr	r3, [pc, #44]	; (801371c <prvInitialiseTaskLists+0x78>)
 80136f0:	4a05      	ldr	r2, [pc, #20]	; (8013708 <prvInitialiseTaskLists+0x64>)
 80136f2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80136f4:	4b0a      	ldr	r3, [pc, #40]	; (8013720 <prvInitialiseTaskLists+0x7c>)
 80136f6:	4a05      	ldr	r2, [pc, #20]	; (801370c <prvInitialiseTaskLists+0x68>)
 80136f8:	601a      	str	r2, [r3, #0]
}
 80136fa:	bf00      	nop
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	20056540 	.word	0x20056540
 8013708:	200569a0 	.word	0x200569a0
 801370c:	200569b4 	.word	0x200569b4
 8013710:	200569d0 	.word	0x200569d0
 8013714:	200569e4 	.word	0x200569e4
 8013718:	200569fc 	.word	0x200569fc
 801371c:	200569c8 	.word	0x200569c8
 8013720:	200569cc 	.word	0x200569cc

08013724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801372a:	e019      	b.n	8013760 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 801372c:	f000 fdbc 	bl	80142a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013730:	4b10      	ldr	r3, [pc, #64]	; (8013774 <prvCheckTasksWaitingTermination+0x50>)
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	3304      	adds	r3, #4
 801373c:	4618      	mov	r0, r3
 801373e:	f7fe f93d 	bl	80119bc <uxListRemove>
                --uxCurrentNumberOfTasks;
 8013742:	4b0d      	ldr	r3, [pc, #52]	; (8013778 <prvCheckTasksWaitingTermination+0x54>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	3b01      	subs	r3, #1
 8013748:	4a0b      	ldr	r2, [pc, #44]	; (8013778 <prvCheckTasksWaitingTermination+0x54>)
 801374a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 801374c:	4b0b      	ldr	r3, [pc, #44]	; (801377c <prvCheckTasksWaitingTermination+0x58>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	3b01      	subs	r3, #1
 8013752:	4a0a      	ldr	r2, [pc, #40]	; (801377c <prvCheckTasksWaitingTermination+0x58>)
 8013754:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8013756:	f000 fdb9 	bl	80142cc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f000 f810 	bl	8013780 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013760:	4b06      	ldr	r3, [pc, #24]	; (801377c <prvCheckTasksWaitingTermination+0x58>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d1e1      	bne.n	801372c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8013768:	bf00      	nop
 801376a:	bf00      	nop
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	200569e4 	.word	0x200569e4
 8013778:	20056a10 	.word	0x20056a10
 801377c:	200569f8 	.word	0x200569f8

08013780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801378e:	2b00      	cmp	r3, #0
 8013790:	d108      	bne.n	80137a4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013796:	4618      	mov	r0, r3
 8013798:	f000 ffd0 	bl	801473c <vPortFree>
                vPortFree( pxTCB );
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f000 ffcd 	bl	801473c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80137a2:	e010      	b.n	80137c6 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d103      	bne.n	80137b6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f000 ffc4 	bl	801473c <vPortFree>
    }
 80137b4:	e007      	b.n	80137c6 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80137bc:	2b02      	cmp	r3, #2
 80137be:	d002      	beq.n	80137c6 <prvDeleteTCB+0x46>
 80137c0:	f000 feb2 	bl	8014528 <ulSetInterruptMask>
 80137c4:	e7fe      	b.n	80137c4 <prvDeleteTCB+0x44>
    }
 80137c6:	bf00      	nop
 80137c8:	3708      	adds	r7, #8
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
	...

080137d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80137d0:	b480      	push	{r7}
 80137d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80137d4:	4b0a      	ldr	r3, [pc, #40]	; (8013800 <prvResetNextTaskUnblockTime+0x30>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d104      	bne.n	80137e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80137de:	4b09      	ldr	r3, [pc, #36]	; (8013804 <prvResetNextTaskUnblockTime+0x34>)
 80137e0:	f04f 32ff 	mov.w	r2, #4294967295
 80137e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80137e6:	e005      	b.n	80137f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80137e8:	4b05      	ldr	r3, [pc, #20]	; (8013800 <prvResetNextTaskUnblockTime+0x30>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4a04      	ldr	r2, [pc, #16]	; (8013804 <prvResetNextTaskUnblockTime+0x34>)
 80137f2:	6013      	str	r3, [r2, #0]
}
 80137f4:	bf00      	nop
 80137f6:	46bd      	mov	sp, r7
 80137f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop
 8013800:	200569c8 	.word	0x200569c8
 8013804:	20056a30 	.word	0x20056a30

08013808 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 801380e:	4b05      	ldr	r3, [pc, #20]	; (8013824 <xTaskGetCurrentTaskHandle+0x1c>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	607b      	str	r3, [r7, #4]

        return xReturn;
 8013814:	687b      	ldr	r3, [r7, #4]
    }
 8013816:	4618      	mov	r0, r3
 8013818:	370c      	adds	r7, #12
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr
 8013822:	bf00      	nop
 8013824:	2005653c 	.word	0x2005653c

08013828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8013828:	b480      	push	{r7}
 801382a:	b083      	sub	sp, #12
 801382c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 801382e:	4b0b      	ldr	r3, [pc, #44]	; (801385c <xTaskGetSchedulerState+0x34>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d102      	bne.n	801383c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8013836:	2301      	movs	r3, #1
 8013838:	607b      	str	r3, [r7, #4]
 801383a:	e008      	b.n	801384e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801383c:	4b08      	ldr	r3, [pc, #32]	; (8013860 <xTaskGetSchedulerState+0x38>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d102      	bne.n	801384a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8013844:	2302      	movs	r3, #2
 8013846:	607b      	str	r3, [r7, #4]
 8013848:	e001      	b.n	801384e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 801384a:	2300      	movs	r3, #0
 801384c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 801384e:	687b      	ldr	r3, [r7, #4]
    }
 8013850:	4618      	mov	r0, r3
 8013852:	370c      	adds	r7, #12
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr
 801385c:	20056a1c 	.word	0x20056a1c
 8013860:	20056a38 	.word	0x20056a38

08013864 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8013864:	b580      	push	{r7, lr}
 8013866:	b086      	sub	sp, #24
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8013870:	2300      	movs	r3, #0
 8013872:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d079      	beq.n	801396e <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801387e:	4b3e      	ldr	r3, [pc, #248]	; (8013978 <xTaskPriorityInherit+0x114>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013884:	429a      	cmp	r2, r3
 8013886:	d269      	bcs.n	801395c <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	699b      	ldr	r3, [r3, #24]
 801388c:	2b00      	cmp	r3, #0
 801388e:	db06      	blt.n	801389e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013890:	4b39      	ldr	r3, [pc, #228]	; (8013978 <xTaskPriorityInherit+0x114>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013896:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	6959      	ldr	r1, [r3, #20]
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a6:	4613      	mov	r3, r2
 80138a8:	009b      	lsls	r3, r3, #2
 80138aa:	4413      	add	r3, r2
 80138ac:	009b      	lsls	r3, r3, #2
 80138ae:	4a33      	ldr	r2, [pc, #204]	; (801397c <xTaskPriorityInherit+0x118>)
 80138b0:	4413      	add	r3, r2
 80138b2:	4299      	cmp	r1, r3
 80138b4:	d14a      	bne.n	801394c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	3304      	adds	r3, #4
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fe f87e 	bl	80119bc <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80138c0:	4b2d      	ldr	r3, [pc, #180]	; (8013978 <xTaskPriorityInherit+0x114>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ce:	4b2c      	ldr	r3, [pc, #176]	; (8013980 <xTaskPriorityInherit+0x11c>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d903      	bls.n	80138de <xTaskPriorityInherit+0x7a>
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138da:	4a29      	ldr	r2, [pc, #164]	; (8013980 <xTaskPriorityInherit+0x11c>)
 80138dc:	6013      	str	r3, [r2, #0]
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138e2:	4926      	ldr	r1, [pc, #152]	; (801397c <xTaskPriorityInherit+0x118>)
 80138e4:	4613      	mov	r3, r2
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	4413      	add	r3, r2
 80138ea:	009b      	lsls	r3, r3, #2
 80138ec:	440b      	add	r3, r1
 80138ee:	3304      	adds	r3, #4
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	60fb      	str	r3, [r7, #12]
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	68fa      	ldr	r2, [r7, #12]
 80138f8:	609a      	str	r2, [r3, #8]
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	689a      	ldr	r2, [r3, #8]
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	60da      	str	r2, [r3, #12]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	689b      	ldr	r3, [r3, #8]
 8013906:	693a      	ldr	r2, [r7, #16]
 8013908:	3204      	adds	r2, #4
 801390a:	605a      	str	r2, [r3, #4]
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	1d1a      	adds	r2, r3, #4
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	609a      	str	r2, [r3, #8]
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013918:	4613      	mov	r3, r2
 801391a:	009b      	lsls	r3, r3, #2
 801391c:	4413      	add	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4a16      	ldr	r2, [pc, #88]	; (801397c <xTaskPriorityInherit+0x118>)
 8013922:	441a      	add	r2, r3
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	615a      	str	r2, [r3, #20]
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801392c:	4913      	ldr	r1, [pc, #76]	; (801397c <xTaskPriorityInherit+0x118>)
 801392e:	4613      	mov	r3, r2
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	4413      	add	r3, r2
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	440b      	add	r3, r1
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	1c59      	adds	r1, r3, #1
 801393c:	480f      	ldr	r0, [pc, #60]	; (801397c <xTaskPriorityInherit+0x118>)
 801393e:	4613      	mov	r3, r2
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	4413      	add	r3, r2
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	4403      	add	r3, r0
 8013948:	6019      	str	r1, [r3, #0]
 801394a:	e004      	b.n	8013956 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801394c:	4b0a      	ldr	r3, [pc, #40]	; (8013978 <xTaskPriorityInherit+0x114>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8013956:	2301      	movs	r3, #1
 8013958:	617b      	str	r3, [r7, #20]
 801395a:	e008      	b.n	801396e <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013960:	4b05      	ldr	r3, [pc, #20]	; (8013978 <xTaskPriorityInherit+0x114>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013966:	429a      	cmp	r2, r3
 8013968:	d201      	bcs.n	801396e <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 801396a:	2301      	movs	r3, #1
 801396c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 801396e:	697b      	ldr	r3, [r7, #20]
    }
 8013970:	4618      	mov	r0, r3
 8013972:	3718      	adds	r7, #24
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	2005653c 	.word	0x2005653c
 801397c:	20056540 	.word	0x20056540
 8013980:	20056a18 	.word	0x20056a18

08013984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8013990:	2300      	movs	r3, #0
 8013992:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d06e      	beq.n	8013a78 <xTaskPriorityDisinherit+0xf4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 801399a:	4b3a      	ldr	r3, [pc, #232]	; (8013a84 <xTaskPriorityDisinherit+0x100>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	693a      	ldr	r2, [r7, #16]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d002      	beq.n	80139aa <xTaskPriorityDisinherit+0x26>
 80139a4:	f000 fdc0 	bl	8014528 <ulSetInterruptMask>
 80139a8:	e7fe      	b.n	80139a8 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d102      	bne.n	80139b8 <xTaskPriorityDisinherit+0x34>
 80139b2:	f000 fdb9 	bl	8014528 <ulSetInterruptMask>
 80139b6:	e7fe      	b.n	80139b6 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139bc:	1e5a      	subs	r2, r3, #1
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d054      	beq.n	8013a78 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d150      	bne.n	8013a78 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	3304      	adds	r3, #4
 80139da:	4618      	mov	r0, r3
 80139dc:	f7fd ffee 	bl	80119bc <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139f8:	4b23      	ldr	r3, [pc, #140]	; (8013a88 <xTaskPriorityDisinherit+0x104>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d903      	bls.n	8013a08 <xTaskPriorityDisinherit+0x84>
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a04:	4a20      	ldr	r2, [pc, #128]	; (8013a88 <xTaskPriorityDisinherit+0x104>)
 8013a06:	6013      	str	r3, [r2, #0]
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a0c:	491f      	ldr	r1, [pc, #124]	; (8013a8c <xTaskPriorityDisinherit+0x108>)
 8013a0e:	4613      	mov	r3, r2
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	4413      	add	r3, r2
 8013a14:	009b      	lsls	r3, r3, #2
 8013a16:	440b      	add	r3, r1
 8013a18:	3304      	adds	r3, #4
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	60fb      	str	r3, [r7, #12]
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	609a      	str	r2, [r3, #8]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	689a      	ldr	r2, [r3, #8]
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	60da      	str	r2, [r3, #12]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	693a      	ldr	r2, [r7, #16]
 8013a32:	3204      	adds	r2, #4
 8013a34:	605a      	str	r2, [r3, #4]
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	1d1a      	adds	r2, r3, #4
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	609a      	str	r2, [r3, #8]
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a42:	4613      	mov	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	4413      	add	r3, r2
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	4a10      	ldr	r2, [pc, #64]	; (8013a8c <xTaskPriorityDisinherit+0x108>)
 8013a4c:	441a      	add	r2, r3
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	615a      	str	r2, [r3, #20]
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a56:	490d      	ldr	r1, [pc, #52]	; (8013a8c <xTaskPriorityDisinherit+0x108>)
 8013a58:	4613      	mov	r3, r2
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	4413      	add	r3, r2
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	440b      	add	r3, r1
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	1c59      	adds	r1, r3, #1
 8013a66:	4809      	ldr	r0, [pc, #36]	; (8013a8c <xTaskPriorityDisinherit+0x108>)
 8013a68:	4613      	mov	r3, r2
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	4413      	add	r3, r2
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	4403      	add	r3, r0
 8013a72:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8013a74:	2301      	movs	r3, #1
 8013a76:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8013a78:	697b      	ldr	r3, [r7, #20]
    }
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3718      	adds	r7, #24
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	2005653c 	.word	0x2005653c
 8013a88:	20056a18 	.word	0x20056a18
 8013a8c:	20056540 	.word	0x20056540

08013a90 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b088      	sub	sp, #32
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f000 8083 	beq.w	8013bb0 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8013aaa:	69bb      	ldr	r3, [r7, #24]
 8013aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d102      	bne.n	8013ab8 <vTaskPriorityDisinheritAfterTimeout+0x28>
 8013ab2:	f000 fd39 	bl	8014528 <ulSetInterruptMask>
 8013ab6:	e7fe      	b.n	8013ab6 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013abc:	683a      	ldr	r2, [r7, #0]
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d902      	bls.n	8013ac8 <vTaskPriorityDisinheritAfterTimeout+0x38>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	61fb      	str	r3, [r7, #28]
 8013ac6:	e002      	b.n	8013ace <vTaskPriorityDisinheritAfterTimeout+0x3e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013acc:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad2:	69fa      	ldr	r2, [r7, #28]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d06b      	beq.n	8013bb0 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013adc:	697a      	ldr	r2, [r7, #20]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d166      	bne.n	8013bb0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8013ae2:	4b35      	ldr	r3, [pc, #212]	; (8013bb8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	69ba      	ldr	r2, [r7, #24]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d102      	bne.n	8013af2 <vTaskPriorityDisinheritAfterTimeout+0x62>
 8013aec:	f000 fd1c 	bl	8014528 <ulSetInterruptMask>
 8013af0:	e7fe      	b.n	8013af0 <vTaskPriorityDisinheritAfterTimeout+0x60>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013af6:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8013af8:	69bb      	ldr	r3, [r7, #24]
 8013afa:	69fa      	ldr	r2, [r7, #28]
 8013afc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013afe:	69bb      	ldr	r3, [r7, #24]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	db04      	blt.n	8013b10 <vTaskPriorityDisinheritAfterTimeout+0x80>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013b0c:	69bb      	ldr	r3, [r7, #24]
 8013b0e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	6959      	ldr	r1, [r3, #20]
 8013b14:	693a      	ldr	r2, [r7, #16]
 8013b16:	4613      	mov	r3, r2
 8013b18:	009b      	lsls	r3, r3, #2
 8013b1a:	4413      	add	r3, r2
 8013b1c:	009b      	lsls	r3, r3, #2
 8013b1e:	4a27      	ldr	r2, [pc, #156]	; (8013bbc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013b20:	4413      	add	r3, r2
 8013b22:	4299      	cmp	r1, r3
 8013b24:	d144      	bne.n	8013bb0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	3304      	adds	r3, #4
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fd ff46 	bl	80119bc <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8013b30:	69bb      	ldr	r3, [r7, #24]
 8013b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b34:	4b22      	ldr	r3, [pc, #136]	; (8013bc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d903      	bls.n	8013b44 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8013b3c:	69bb      	ldr	r3, [r7, #24]
 8013b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b40:	4a1f      	ldr	r2, [pc, #124]	; (8013bc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013b42:	6013      	str	r3, [r2, #0]
 8013b44:	69bb      	ldr	r3, [r7, #24]
 8013b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b48:	491c      	ldr	r1, [pc, #112]	; (8013bbc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	4413      	add	r3, r2
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	440b      	add	r3, r1
 8013b54:	3304      	adds	r3, #4
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	60fb      	str	r3, [r7, #12]
 8013b5a:	69bb      	ldr	r3, [r7, #24]
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	609a      	str	r2, [r3, #8]
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	689a      	ldr	r2, [r3, #8]
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	60da      	str	r2, [r3, #12]
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	689b      	ldr	r3, [r3, #8]
 8013b6c:	69ba      	ldr	r2, [r7, #24]
 8013b6e:	3204      	adds	r2, #4
 8013b70:	605a      	str	r2, [r3, #4]
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	1d1a      	adds	r2, r3, #4
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	609a      	str	r2, [r3, #8]
 8013b7a:	69bb      	ldr	r3, [r7, #24]
 8013b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b7e:	4613      	mov	r3, r2
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	4413      	add	r3, r2
 8013b84:	009b      	lsls	r3, r3, #2
 8013b86:	4a0d      	ldr	r2, [pc, #52]	; (8013bbc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013b88:	441a      	add	r2, r3
 8013b8a:	69bb      	ldr	r3, [r7, #24]
 8013b8c:	615a      	str	r2, [r3, #20]
 8013b8e:	69bb      	ldr	r3, [r7, #24]
 8013b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b92:	490a      	ldr	r1, [pc, #40]	; (8013bbc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013b94:	4613      	mov	r3, r2
 8013b96:	009b      	lsls	r3, r3, #2
 8013b98:	4413      	add	r3, r2
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	440b      	add	r3, r1
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	1c59      	adds	r1, r3, #1
 8013ba2:	4806      	ldr	r0, [pc, #24]	; (8013bbc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013ba4:	4613      	mov	r3, r2
 8013ba6:	009b      	lsls	r3, r3, #2
 8013ba8:	4413      	add	r3, r2
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	4403      	add	r3, r0
 8013bae:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8013bb0:	bf00      	nop
 8013bb2:	3720      	adds	r7, #32
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	2005653c 	.word	0x2005653c
 8013bbc:	20056540 	.word	0x20056540
 8013bc0:	20056a18 	.word	0x20056a18

08013bc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8013bc4:	b480      	push	{r7}
 8013bc6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8013bc8:	4b07      	ldr	r3, [pc, #28]	; (8013be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d004      	beq.n	8013bda <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8013bd0:	4b05      	ldr	r3, [pc, #20]	; (8013be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bd6:	3201      	adds	r2, #1
 8013bd8:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8013bda:	4b03      	ldr	r3, [pc, #12]	; (8013be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
    }
 8013bde:	4618      	mov	r0, r3
 8013be0:	46bd      	mov	sp, r7
 8013be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be6:	4770      	bx	lr
 8013be8:	2005653c 	.word	0x2005653c

08013bec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b086      	sub	sp, #24
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8013bf6:	4b2e      	ldr	r3, [pc, #184]	; (8013cb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013bfc:	4b2d      	ldr	r3, [pc, #180]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3304      	adds	r3, #4
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fd feda 	bl	80119bc <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c0e:	d124      	bne.n	8013c5a <prvAddCurrentTaskToDelayedList+0x6e>
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d021      	beq.n	8013c5a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c16:	4b28      	ldr	r3, [pc, #160]	; (8013cb8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	613b      	str	r3, [r7, #16]
 8013c1c:	4b25      	ldr	r3, [pc, #148]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	693a      	ldr	r2, [r7, #16]
 8013c22:	609a      	str	r2, [r3, #8]
 8013c24:	4b23      	ldr	r3, [pc, #140]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	693a      	ldr	r2, [r7, #16]
 8013c2a:	6892      	ldr	r2, [r2, #8]
 8013c2c:	60da      	str	r2, [r3, #12]
 8013c2e:	4b21      	ldr	r3, [pc, #132]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	689b      	ldr	r3, [r3, #8]
 8013c36:	3204      	adds	r2, #4
 8013c38:	605a      	str	r2, [r3, #4]
 8013c3a:	4b1e      	ldr	r3, [pc, #120]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	1d1a      	adds	r2, r3, #4
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	609a      	str	r2, [r3, #8]
 8013c44:	4b1b      	ldr	r3, [pc, #108]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	4a1b      	ldr	r2, [pc, #108]	; (8013cb8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013c4a:	615a      	str	r2, [r3, #20]
 8013c4c:	4b1a      	ldr	r3, [pc, #104]	; (8013cb8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3301      	adds	r3, #1
 8013c52:	4a19      	ldr	r2, [pc, #100]	; (8013cb8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013c54:	6013      	str	r3, [r2, #0]
 8013c56:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8013c58:	e026      	b.n	8013ca8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8013c5a:	697a      	ldr	r2, [r7, #20]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	4413      	add	r3, r2
 8013c60:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013c62:	4b14      	ldr	r3, [pc, #80]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	68fa      	ldr	r2, [r7, #12]
 8013c68:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d209      	bcs.n	8013c86 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c72:	4b12      	ldr	r3, [pc, #72]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xd0>)
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	4b0f      	ldr	r3, [pc, #60]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	3304      	adds	r3, #4
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	4610      	mov	r0, r2
 8013c80:	f7fd fe63 	bl	801194a <vListInsert>
}
 8013c84:	e010      	b.n	8013ca8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c86:	4b0e      	ldr	r3, [pc, #56]	; (8013cc0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8013c88:	681a      	ldr	r2, [r3, #0]
 8013c8a:	4b0a      	ldr	r3, [pc, #40]	; (8013cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	3304      	adds	r3, #4
 8013c90:	4619      	mov	r1, r3
 8013c92:	4610      	mov	r0, r2
 8013c94:	f7fd fe59 	bl	801194a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8013c98:	4b0a      	ldr	r3, [pc, #40]	; (8013cc4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	68fa      	ldr	r2, [r7, #12]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d202      	bcs.n	8013ca8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8013ca2:	4a08      	ldr	r2, [pc, #32]	; (8013cc4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	6013      	str	r3, [r2, #0]
}
 8013ca8:	bf00      	nop
 8013caa:	3718      	adds	r7, #24
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	20056a14 	.word	0x20056a14
 8013cb4:	2005653c 	.word	0x2005653c
 8013cb8:	200569fc 	.word	0x200569fc
 8013cbc:	200569cc 	.word	0x200569cc
 8013cc0:	200569c8 	.word	0x200569c8
 8013cc4:	20056a30 	.word	0x20056a30

08013cc8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b088      	sub	sp, #32
 8013ccc:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8013cd2:	f000 fa59 	bl	8014188 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8013cd6:	4b18      	ldr	r3, [pc, #96]	; (8013d38 <xTimerCreateTimerTask+0x70>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d020      	beq.n	8013d20 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013ce6:	463a      	mov	r2, r7
 8013ce8:	1d39      	adds	r1, r7, #4
 8013cea:	f107 0308 	add.w	r3, r7, #8
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fd fde4 	bl	80118bc <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8013cf4:	6839      	ldr	r1, [r7, #0]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	68ba      	ldr	r2, [r7, #8]
 8013cfa:	9202      	str	r2, [sp, #8]
 8013cfc:	9301      	str	r3, [sp, #4]
 8013cfe:	2302      	movs	r3, #2
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	2300      	movs	r3, #0
 8013d04:	460a      	mov	r2, r1
 8013d06:	490d      	ldr	r1, [pc, #52]	; (8013d3c <xTimerCreateTimerTask+0x74>)
 8013d08:	480d      	ldr	r0, [pc, #52]	; (8013d40 <xTimerCreateTimerTask+0x78>)
 8013d0a:	f7fe fe6d 	bl	80129e8 <xTaskCreateStatic>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	4a0c      	ldr	r2, [pc, #48]	; (8013d44 <xTimerCreateTimerTask+0x7c>)
 8013d12:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8013d14:	4b0b      	ldr	r3, [pc, #44]	; (8013d44 <xTimerCreateTimerTask+0x7c>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d001      	beq.n	8013d20 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d102      	bne.n	8013d2c <xTimerCreateTimerTask+0x64>
 8013d26:	f000 fbff 	bl	8014528 <ulSetInterruptMask>
 8013d2a:	e7fe      	b.n	8013d2a <xTimerCreateTimerTask+0x62>
        return xReturn;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
    }
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3710      	adds	r7, #16
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	20056a6c 	.word	0x20056a6c
 8013d3c:	0802438c 	.word	0x0802438c
 8013d40:	08013ded 	.word	0x08013ded
 8013d44:	20056a70 	.word	0x20056a70

08013d48 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b084      	sub	sp, #16
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8013d54:	e008      	b.n	8013d68 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	699b      	ldr	r3, [r3, #24]
 8013d5a:	68ba      	ldr	r2, [r7, #8]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	6a1b      	ldr	r3, [r3, #32]
 8013d64:	68f8      	ldr	r0, [r7, #12]
 8013d66:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	699a      	ldr	r2, [r3, #24]
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	18d1      	adds	r1, r2, r3
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f000 f8d5 	bl	8013f24 <prvInsertTimerInActiveList>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d1ea      	bne.n	8013d56 <prvReloadTimer+0xe>
        }
    }
 8013d80:	bf00      	nop
 8013d82:	bf00      	nop
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
	...

08013d8c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b084      	sub	sp, #16
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d96:	4b14      	ldr	r3, [pc, #80]	; (8013de8 <prvProcessExpiredTimer+0x5c>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	3304      	adds	r3, #4
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7fd fe09 	bl	80119bc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013db0:	f003 0304 	and.w	r3, r3, #4
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d005      	beq.n	8013dc4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8013db8:	683a      	ldr	r2, [r7, #0]
 8013dba:	6879      	ldr	r1, [r7, #4]
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f7ff ffc3 	bl	8013d48 <prvReloadTimer>
 8013dc2:	e008      	b.n	8013dd6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dca:	f023 0301 	bic.w	r3, r3, #1
 8013dce:	b2da      	uxtb	r2, r3
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	6a1b      	ldr	r3, [r3, #32]
 8013dda:	68f8      	ldr	r0, [r7, #12]
 8013ddc:	4798      	blx	r3
    }
 8013dde:	bf00      	nop
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	20056a64 	.word	0x20056a64

08013dec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013df4:	f107 0308 	add.w	r3, r7, #8
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f000 f84f 	bl	8013e9c <prvGetNextExpireTime>
 8013dfe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	4619      	mov	r1, r3
 8013e04:	68f8      	ldr	r0, [r7, #12]
 8013e06:	f000 f803 	bl	8013e10 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8013e0a:	f000 f8cd 	bl	8013fa8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013e0e:	e7f1      	b.n	8013df4 <prvTimerTask+0x8>

08013e10 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8013e1a:	f7ff f807 	bl	8012e2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013e1e:	f107 0308 	add.w	r3, r7, #8
 8013e22:	4618      	mov	r0, r3
 8013e24:	f000 f85e 	bl	8013ee4 <prvSampleTimeNow>
 8013e28:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d12a      	bne.n	8013e86 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d10a      	bne.n	8013e4c <prvProcessTimerOrBlockTask+0x3c>
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d806      	bhi.n	8013e4c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8013e3e:	f7ff f803 	bl	8012e48 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013e42:	68f9      	ldr	r1, [r7, #12]
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f7ff ffa1 	bl	8013d8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8013e4a:	e01e      	b.n	8013e8a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d008      	beq.n	8013e64 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013e52:	4b10      	ldr	r3, [pc, #64]	; (8013e94 <prvProcessTimerOrBlockTask+0x84>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d101      	bne.n	8013e60 <prvProcessTimerOrBlockTask+0x50>
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	e000      	b.n	8013e62 <prvProcessTimerOrBlockTask+0x52>
 8013e60:	2300      	movs	r3, #0
 8013e62:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013e64:	4b0c      	ldr	r3, [pc, #48]	; (8013e98 <prvProcessTimerOrBlockTask+0x88>)
 8013e66:	6818      	ldr	r0, [r3, #0]
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	1ad3      	subs	r3, r2, r3
 8013e6e:	683a      	ldr	r2, [r7, #0]
 8013e70:	4619      	mov	r1, r3
 8013e72:	f7fe fd85 	bl	8012980 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8013e76:	f7fe ffe7 	bl	8012e48 <xTaskResumeAll>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d104      	bne.n	8013e8a <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8013e80:	f000 fa00 	bl	8014284 <vPortYield>
    }
 8013e84:	e001      	b.n	8013e8a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8013e86:	f7fe ffdf 	bl	8012e48 <xTaskResumeAll>
    }
 8013e8a:	bf00      	nop
 8013e8c:	3710      	adds	r7, #16
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}
 8013e92:	bf00      	nop
 8013e94:	20056a68 	.word	0x20056a68
 8013e98:	20056a6c 	.word	0x20056a6c

08013e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8013e9c:	b480      	push	{r7}
 8013e9e:	b085      	sub	sp, #20
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013ea4:	4b0e      	ldr	r3, [pc, #56]	; (8013ee0 <prvGetNextExpireTime+0x44>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d101      	bne.n	8013eb2 <prvGetNextExpireTime+0x16>
 8013eae:	2201      	movs	r2, #1
 8013eb0:	e000      	b.n	8013eb4 <prvGetNextExpireTime+0x18>
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d105      	bne.n	8013ecc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ec0:	4b07      	ldr	r3, [pc, #28]	; (8013ee0 <prvGetNextExpireTime+0x44>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	68db      	ldr	r3, [r3, #12]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	60fb      	str	r3, [r7, #12]
 8013eca:	e001      	b.n	8013ed0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
    }
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3714      	adds	r7, #20
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop
 8013ee0:	20056a64 	.word	0x20056a64

08013ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8013eec:	f7ff f898 	bl	8013020 <xTaskGetTickCount>
 8013ef0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8013ef2:	4b0b      	ldr	r3, [pc, #44]	; (8013f20 <prvSampleTimeNow+0x3c>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	68fa      	ldr	r2, [r7, #12]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d205      	bcs.n	8013f08 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8013efc:	f000 f91e 	bl	801413c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2201      	movs	r2, #1
 8013f04:	601a      	str	r2, [r3, #0]
 8013f06:	e002      	b.n	8013f0e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8013f0e:	4a04      	ldr	r2, [pc, #16]	; (8013f20 <prvSampleTimeNow+0x3c>)
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8013f14:	68fb      	ldr	r3, [r7, #12]
    }
 8013f16:	4618      	mov	r0, r3
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	20056a74 	.word	0x20056a74

08013f24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b086      	sub	sp, #24
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	607a      	str	r2, [r7, #4]
 8013f30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8013f32:	2300      	movs	r3, #0
 8013f34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	68ba      	ldr	r2, [r7, #8]
 8013f3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	68fa      	ldr	r2, [r7, #12]
 8013f40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8013f42:	68ba      	ldr	r2, [r7, #8]
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d812      	bhi.n	8013f70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	1ad2      	subs	r2, r2, r3
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	699b      	ldr	r3, [r3, #24]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d302      	bcc.n	8013f5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	617b      	str	r3, [r7, #20]
 8013f5c:	e01b      	b.n	8013f96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013f5e:	4b10      	ldr	r3, [pc, #64]	; (8013fa0 <prvInsertTimerInActiveList+0x7c>)
 8013f60:	681a      	ldr	r2, [r3, #0]
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	3304      	adds	r3, #4
 8013f66:	4619      	mov	r1, r3
 8013f68:	4610      	mov	r0, r2
 8013f6a:	f7fd fcee 	bl	801194a <vListInsert>
 8013f6e:	e012      	b.n	8013f96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d206      	bcs.n	8013f86 <prvInsertTimerInActiveList+0x62>
 8013f78:	68ba      	ldr	r2, [r7, #8]
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d302      	bcc.n	8013f86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8013f80:	2301      	movs	r3, #1
 8013f82:	617b      	str	r3, [r7, #20]
 8013f84:	e007      	b.n	8013f96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013f86:	4b07      	ldr	r3, [pc, #28]	; (8013fa4 <prvInsertTimerInActiveList+0x80>)
 8013f88:	681a      	ldr	r2, [r3, #0]
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	3304      	adds	r3, #4
 8013f8e:	4619      	mov	r1, r3
 8013f90:	4610      	mov	r0, r2
 8013f92:	f7fd fcda 	bl	801194a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8013f96:	697b      	ldr	r3, [r7, #20]
    }
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3718      	adds	r7, #24
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	20056a68 	.word	0x20056a68
 8013fa4:	20056a64 	.word	0x20056a64

08013fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b088      	sub	sp, #32
 8013fac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013fae:	e0b2      	b.n	8014116 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	da10      	bge.n	8013fd8 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013fb6:	1d3b      	adds	r3, r7, #4
 8013fb8:	3304      	adds	r3, #4
 8013fba:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d102      	bne.n	8013fc8 <prvProcessReceivedCommands+0x20>
 8013fc2:	f000 fab1 	bl	8014528 <ulSetInterruptMask>
 8013fc6:	e7fe      	b.n	8013fc6 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	69fa      	ldr	r2, [r7, #28]
 8013fce:	6850      	ldr	r0, [r2, #4]
 8013fd0:	69fa      	ldr	r2, [r7, #28]
 8013fd2:	6892      	ldr	r2, [r2, #8]
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	f2c0 809b 	blt.w	8014116 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013fe4:	69bb      	ldr	r3, [r7, #24]
 8013fe6:	695b      	ldr	r3, [r3, #20]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d004      	beq.n	8013ff6 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013fec:	69bb      	ldr	r3, [r7, #24]
 8013fee:	3304      	adds	r3, #4
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7fd fce3 	bl	80119bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013ff6:	463b      	mov	r3, r7
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7ff ff73 	bl	8013ee4 <prvSampleTimeNow>
 8013ffe:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	3b01      	subs	r3, #1
 8014004:	2b08      	cmp	r3, #8
 8014006:	f200 8085 	bhi.w	8014114 <prvProcessReceivedCommands+0x16c>
 801400a:	a201      	add	r2, pc, #4	; (adr r2, 8014010 <prvProcessReceivedCommands+0x68>)
 801400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014010:	08014035 	.word	0x08014035
 8014014:	08014035 	.word	0x08014035
 8014018:	0801409d 	.word	0x0801409d
 801401c:	080140b1 	.word	0x080140b1
 8014020:	080140eb 	.word	0x080140eb
 8014024:	08014035 	.word	0x08014035
 8014028:	08014035 	.word	0x08014035
 801402c:	0801409d 	.word	0x0801409d
 8014030:	080140b1 	.word	0x080140b1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801403a:	f043 0301 	orr.w	r3, r3, #1
 801403e:	b2da      	uxtb	r2, r3
 8014040:	69bb      	ldr	r3, [r7, #24]
 8014042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014046:	68ba      	ldr	r2, [r7, #8]
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	699b      	ldr	r3, [r3, #24]
 801404c:	18d1      	adds	r1, r2, r3
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	697a      	ldr	r2, [r7, #20]
 8014052:	69b8      	ldr	r0, [r7, #24]
 8014054:	f7ff ff66 	bl	8013f24 <prvInsertTimerInActiveList>
 8014058:	4603      	mov	r3, r0
 801405a:	2b00      	cmp	r3, #0
 801405c:	d05b      	beq.n	8014116 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014064:	f003 0304 	and.w	r3, r3, #4
 8014068:	2b00      	cmp	r3, #0
 801406a:	d009      	beq.n	8014080 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 801406c:	68ba      	ldr	r2, [r7, #8]
 801406e:	69bb      	ldr	r3, [r7, #24]
 8014070:	699b      	ldr	r3, [r3, #24]
 8014072:	4413      	add	r3, r2
 8014074:	697a      	ldr	r2, [r7, #20]
 8014076:	4619      	mov	r1, r3
 8014078:	69b8      	ldr	r0, [r7, #24]
 801407a:	f7ff fe65 	bl	8013d48 <prvReloadTimer>
 801407e:	e008      	b.n	8014092 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014086:	f023 0301 	bic.w	r3, r3, #1
 801408a:	b2da      	uxtb	r2, r3
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	6a1b      	ldr	r3, [r3, #32]
 8014096:	69b8      	ldr	r0, [r7, #24]
 8014098:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 801409a:	e03c      	b.n	8014116 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140a2:	f023 0301 	bic.w	r3, r3, #1
 80140a6:	b2da      	uxtb	r2, r3
 80140a8:	69bb      	ldr	r3, [r7, #24]
 80140aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80140ae:	e032      	b.n	8014116 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80140b0:	69bb      	ldr	r3, [r7, #24]
 80140b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140b6:	f043 0301 	orr.w	r3, r3, #1
 80140ba:	b2da      	uxtb	r2, r3
 80140bc:	69bb      	ldr	r3, [r7, #24]
 80140be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80140c2:	68ba      	ldr	r2, [r7, #8]
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80140c8:	69bb      	ldr	r3, [r7, #24]
 80140ca:	699b      	ldr	r3, [r3, #24]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d102      	bne.n	80140d6 <prvProcessReceivedCommands+0x12e>
 80140d0:	f000 fa2a 	bl	8014528 <ulSetInterruptMask>
 80140d4:	e7fe      	b.n	80140d4 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	699a      	ldr	r2, [r3, #24]
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	18d1      	adds	r1, r2, r3
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	697a      	ldr	r2, [r7, #20]
 80140e2:	69b8      	ldr	r0, [r7, #24]
 80140e4:	f7ff ff1e 	bl	8013f24 <prvInsertTimerInActiveList>
                        break;
 80140e8:	e015      	b.n	8014116 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140f0:	f003 0302 	and.w	r3, r3, #2
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d103      	bne.n	8014100 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 80140f8:	69b8      	ldr	r0, [r7, #24]
 80140fa:	f000 fb1f 	bl	801473c <vPortFree>
 80140fe:	e00a      	b.n	8014116 <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014106:	f023 0301 	bic.w	r3, r3, #1
 801410a:	b2da      	uxtb	r2, r3
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8014112:	e000      	b.n	8014116 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8014114:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014116:	4b08      	ldr	r3, [pc, #32]	; (8014138 <prvProcessReceivedCommands+0x190>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	1d39      	adds	r1, r7, #4
 801411c:	2200      	movs	r2, #0
 801411e:	4618      	mov	r0, r3
 8014120:	f7fe f852 	bl	80121c8 <xQueueReceive>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	f47f af42 	bne.w	8013fb0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 801412c:	bf00      	nop
 801412e:	bf00      	nop
 8014130:	3720      	adds	r7, #32
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	20056a6c 	.word	0x20056a6c

0801413c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014142:	e009      	b.n	8014158 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014144:	4b0e      	ldr	r3, [pc, #56]	; (8014180 <prvSwitchTimerLists+0x44>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	68db      	ldr	r3, [r3, #12]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 801414e:	f04f 31ff 	mov.w	r1, #4294967295
 8014152:	6838      	ldr	r0, [r7, #0]
 8014154:	f7ff fe1a 	bl	8013d8c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014158:	4b09      	ldr	r3, [pc, #36]	; (8014180 <prvSwitchTimerLists+0x44>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d1f0      	bne.n	8014144 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8014162:	4b07      	ldr	r3, [pc, #28]	; (8014180 <prvSwitchTimerLists+0x44>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8014168:	4b06      	ldr	r3, [pc, #24]	; (8014184 <prvSwitchTimerLists+0x48>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	4a04      	ldr	r2, [pc, #16]	; (8014180 <prvSwitchTimerLists+0x44>)
 801416e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8014170:	4a04      	ldr	r2, [pc, #16]	; (8014184 <prvSwitchTimerLists+0x48>)
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6013      	str	r3, [r2, #0]
    }
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	20056a64 	.word	0x20056a64
 8014184:	20056a68 	.word	0x20056a68

08014188 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 801418e:	f000 f88b 	bl	80142a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8014192:	4b15      	ldr	r3, [pc, #84]	; (80141e8 <prvCheckForValidListAndQueue+0x60>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d120      	bne.n	80141dc <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 801419a:	4814      	ldr	r0, [pc, #80]	; (80141ec <prvCheckForValidListAndQueue+0x64>)
 801419c:	f7fd fba8 	bl	80118f0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80141a0:	4813      	ldr	r0, [pc, #76]	; (80141f0 <prvCheckForValidListAndQueue+0x68>)
 80141a2:	f7fd fba5 	bl	80118f0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80141a6:	4b13      	ldr	r3, [pc, #76]	; (80141f4 <prvCheckForValidListAndQueue+0x6c>)
 80141a8:	4a10      	ldr	r2, [pc, #64]	; (80141ec <prvCheckForValidListAndQueue+0x64>)
 80141aa:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80141ac:	4b12      	ldr	r3, [pc, #72]	; (80141f8 <prvCheckForValidListAndQueue+0x70>)
 80141ae:	4a10      	ldr	r2, [pc, #64]	; (80141f0 <prvCheckForValidListAndQueue+0x68>)
 80141b0:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80141b2:	2300      	movs	r3, #0
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	4b11      	ldr	r3, [pc, #68]	; (80141fc <prvCheckForValidListAndQueue+0x74>)
 80141b8:	4a11      	ldr	r2, [pc, #68]	; (8014200 <prvCheckForValidListAndQueue+0x78>)
 80141ba:	2110      	movs	r1, #16
 80141bc:	200a      	movs	r0, #10
 80141be:	f7fd fc9e 	bl	8011afe <xQueueGenericCreateStatic>
 80141c2:	4603      	mov	r3, r0
 80141c4:	4a08      	ldr	r2, [pc, #32]	; (80141e8 <prvCheckForValidListAndQueue+0x60>)
 80141c6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80141c8:	4b07      	ldr	r3, [pc, #28]	; (80141e8 <prvCheckForValidListAndQueue+0x60>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d005      	beq.n	80141dc <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80141d0:	4b05      	ldr	r3, [pc, #20]	; (80141e8 <prvCheckForValidListAndQueue+0x60>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	490b      	ldr	r1, [pc, #44]	; (8014204 <prvCheckForValidListAndQueue+0x7c>)
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fe fb60 	bl	801289c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80141dc:	f000 f876 	bl	80142cc <vPortExitCritical>
    }
 80141e0:	bf00      	nop
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
 80141e6:	bf00      	nop
 80141e8:	20056a6c 	.word	0x20056a6c
 80141ec:	20056a3c 	.word	0x20056a3c
 80141f0:	20056a50 	.word	0x20056a50
 80141f4:	20056a64 	.word	0x20056a64
 80141f8:	20056a68 	.word	0x20056a68
 80141fc:	20056b18 	.word	0x20056b18
 8014200:	20056a78 	.word	0x20056a78
 8014204:	08024394 	.word	0x08024394

08014208 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8014208:	b480      	push	{r7}
 801420a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 801420c:	4b0b      	ldr	r3, [pc, #44]	; (801423c <vPortSetupTimerInterrupt+0x34>)
 801420e:	2200      	movs	r2, #0
 8014210:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014212:	4b0b      	ldr	r3, [pc, #44]	; (8014240 <vPortSetupTimerInterrupt+0x38>)
 8014214:	2200      	movs	r2, #0
 8014216:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014218:	4b0a      	ldr	r3, [pc, #40]	; (8014244 <vPortSetupTimerInterrupt+0x3c>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	4a0a      	ldr	r2, [pc, #40]	; (8014248 <vPortSetupTimerInterrupt+0x40>)
 801421e:	fba2 2303 	umull	r2, r3, r2, r3
 8014222:	099b      	lsrs	r3, r3, #6
 8014224:	4a09      	ldr	r2, [pc, #36]	; (801424c <vPortSetupTimerInterrupt+0x44>)
 8014226:	3b01      	subs	r3, #1
 8014228:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801422a:	4b04      	ldr	r3, [pc, #16]	; (801423c <vPortSetupTimerInterrupt+0x34>)
 801422c:	2207      	movs	r2, #7
 801422e:	601a      	str	r2, [r3, #0]
}
 8014230:	bf00      	nop
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	e000e010 	.word	0xe000e010
 8014240:	e000e018 	.word	0xe000e018
 8014244:	20050000 	.word	0x20050000
 8014248:	10624dd3 	.word	0x10624dd3
 801424c:	e000e014 	.word	0xe000e014

08014250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8014256:	2300      	movs	r3, #0
 8014258:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 801425a:	4b09      	ldr	r3, [pc, #36]	; (8014280 <prvTaskExitError+0x30>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014262:	d002      	beq.n	801426a <prvTaskExitError+0x1a>
 8014264:	f000 f960 	bl	8014528 <ulSetInterruptMask>
 8014268:	e7fe      	b.n	8014268 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 801426a:	f000 f95d 	bl	8014528 <ulSetInterruptMask>

    while( ulDummy == 0 )
 801426e:	bf00      	nop
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d0fc      	beq.n	8014270 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8014276:	bf00      	nop
 8014278:	bf00      	nop
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}
 8014280:	2005007c 	.word	0x2005007c

08014284 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8014284:	b480      	push	{r7}
 8014286:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014288:	4b06      	ldr	r3, [pc, #24]	; (80142a4 <vPortYield+0x20>)
 801428a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801428e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8014290:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8014294:	f3bf 8f6f 	isb	sy
}
 8014298:	bf00      	nop
 801429a:	46bd      	mov	sp, r7
 801429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop
 80142a4:	e000ed04 	.word	0xe000ed04

080142a8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80142ac:	f000 f93c 	bl	8014528 <ulSetInterruptMask>
    ulCriticalNesting++;
 80142b0:	4b05      	ldr	r3, [pc, #20]	; (80142c8 <vPortEnterCritical+0x20>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	3301      	adds	r3, #1
 80142b6:	4a04      	ldr	r2, [pc, #16]	; (80142c8 <vPortEnterCritical+0x20>)
 80142b8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80142ba:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80142be:	f3bf 8f6f 	isb	sy
}
 80142c2:	bf00      	nop
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	2005007c 	.word	0x2005007c

080142cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 80142d0:	4b0a      	ldr	r3, [pc, #40]	; (80142fc <vPortExitCritical+0x30>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d102      	bne.n	80142de <vPortExitCritical+0x12>
 80142d8:	f000 f926 	bl	8014528 <ulSetInterruptMask>
 80142dc:	e7fe      	b.n	80142dc <vPortExitCritical+0x10>
    ulCriticalNesting--;
 80142de:	4b07      	ldr	r3, [pc, #28]	; (80142fc <vPortExitCritical+0x30>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	3b01      	subs	r3, #1
 80142e4:	4a05      	ldr	r2, [pc, #20]	; (80142fc <vPortExitCritical+0x30>)
 80142e6:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 80142e8:	4b04      	ldr	r3, [pc, #16]	; (80142fc <vPortExitCritical+0x30>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d102      	bne.n	80142f6 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 80142f0:	2000      	movs	r0, #0
 80142f2:	f000 f926 	bl	8014542 <vClearInterruptMask>
    }
}
 80142f6:	bf00      	nop
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	2005007c 	.word	0x2005007c

08014300 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8014306:	f000 f90f 	bl	8014528 <ulSetInterruptMask>
 801430a:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 801430c:	f7fe feb6 	bl	801307c <xTaskIncrementTick>
 8014310:	4603      	mov	r3, r0
 8014312:	2b00      	cmp	r3, #0
 8014314:	d003      	beq.n	801431e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014316:	4b05      	ldr	r3, [pc, #20]	; (801432c <xPortSysTickHandler+0x2c>)
 8014318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801431c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f000 f90f 	bl	8014542 <vClearInterruptMask>
}
 8014324:	bf00      	nop
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}
 801432c:	e000ed04 	.word	0xe000ed04

08014330 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b084      	sub	sp, #16
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	699b      	ldr	r3, [r3, #24]
 801433c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	3b02      	subs	r3, #2
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8014346:	7afb      	ldrb	r3, [r7, #11]
 8014348:	2b02      	cmp	r3, #2
 801434a:	d102      	bne.n	8014352 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 801434c:	f000 f8b8 	bl	80144c0 <vRestoreContextOfFirstTask>
            break;
 8014350:	e002      	b.n	8014358 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8014352:	f000 f8e9 	bl	8014528 <ulSetInterruptMask>
 8014356:	e7fe      	b.n	8014356 <vPortSVCHandler_C+0x26>
    }
}
 8014358:	bf00      	nop
 801435a:	3710      	adds	r7, #16
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 8014360:	b480      	push	{r7}
 8014362:	b085      	sub	sp, #20
 8014364:	af00      	add	r7, sp, #0
 8014366:	60f8      	str	r0, [r7, #12]
 8014368:	60b9      	str	r1, [r7, #8]
 801436a:	607a      	str	r2, [r7, #4]
 801436c:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	3b04      	subs	r3, #4
 8014372:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801437a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	3b04      	subs	r3, #4
 8014380:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	3b04      	subs	r3, #4
 801438c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 801438e:	4a38      	ldr	r2, [pc, #224]	; (8014470 <pxPortInitialiseStack+0x110>)
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	3b04      	subs	r3, #4
 8014398:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80143a0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	3b04      	subs	r3, #4
 80143a6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80143ae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	3b04      	subs	r3, #4
 80143b4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80143bc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	3b04      	subs	r3, #4
 80143c2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80143ca:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	3b04      	subs	r3, #4
 80143d0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80143d2:	683a      	ldr	r2, [r7, #0]
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	3b04      	subs	r3, #4
 80143dc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80143e4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	3b04      	subs	r3, #4
 80143ea:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80143f2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	3b04      	subs	r3, #4
 80143f8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8014400:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	3b04      	subs	r3, #4
 8014406:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 801440e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	3b04      	subs	r3, #4
 8014414:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 801441c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	3b04      	subs	r3, #4
 8014422:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801442a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	3b04      	subs	r3, #4
 8014430:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8014438:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	3b04      	subs	r3, #4
 801443e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8014446:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	3b04      	subs	r3, #4
 801444c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8014454:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	3b04      	subs	r3, #4
 801445a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 801445c:	68ba      	ldr	r2, [r7, #8]
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8014462:	68fb      	ldr	r3, [r7, #12]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	08014251 	.word	0x08014251

08014474 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8014474:	b580      	push	{r7, lr}
 8014476:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8014478:	4b0c      	ldr	r3, [pc, #48]	; (80144ac <xPortStartScheduler+0x38>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4a0b      	ldr	r2, [pc, #44]	; (80144ac <xPortStartScheduler+0x38>)
 801447e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014482:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8014484:	4b09      	ldr	r3, [pc, #36]	; (80144ac <xPortStartScheduler+0x38>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4a08      	ldr	r2, [pc, #32]	; (80144ac <xPortStartScheduler+0x38>)
 801448a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801448e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8014490:	f7ff feba 	bl	8014208 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8014494:	4b06      	ldr	r3, [pc, #24]	; (80144b0 <xPortStartScheduler+0x3c>)
 8014496:	2200      	movs	r2, #0
 8014498:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 801449a:	f000 f831 	bl	8014500 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 801449e:	f7fe fefd 	bl	801329c <vTaskSwitchContext>
    prvTaskExitError();
 80144a2:	f7ff fed5 	bl	8014250 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 80144a6:	2300      	movs	r3, #0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	bd80      	pop	{r7, pc}
 80144ac:	e000ed20 	.word	0xe000ed20
 80144b0:	2005007c 	.word	0x2005007c
	...

080144c0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80144c0:	4a0b      	ldr	r2, [pc, #44]	; (80144f0 <pxCurrentTCBConst2>)
 80144c2:	6811      	ldr	r1, [r2, #0]
 80144c4:	6808      	ldr	r0, [r1, #0]
 80144c6:	c806      	ldmia	r0!, {r1, r2}
 80144c8:	f381 880b 	msr	PSPLIM, r1
 80144cc:	2102      	movs	r1, #2
 80144ce:	f381 8814 	msr	CONTROL, r1
 80144d2:	3020      	adds	r0, #32
 80144d4:	f380 8809 	msr	PSP, r0
 80144d8:	f3bf 8f6f 	isb	sy
 80144dc:	f04f 0000 	mov.w	r0, #0
 80144e0:	f380 8811 	msr	BASEPRI, r0
 80144e4:	4710      	bx	r2
 80144e6:	bf00      	nop
 80144e8:	f3af 8000 	nop.w
 80144ec:	f3af 8000 	nop.w

080144f0 <pxCurrentTCBConst2>:
 80144f0:	2005653c 	.word	0x2005653c
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 80144f4:	bf00      	nop
 80144f6:	bf00      	nop
	...

08014500 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014500:	4807      	ldr	r0, [pc, #28]	; (8014520 <xVTORConst>)
 8014502:	6800      	ldr	r0, [r0, #0]
 8014504:	6800      	ldr	r0, [r0, #0]
 8014506:	f380 8808 	msr	MSP, r0
 801450a:	b662      	cpsie	i
 801450c:	b661      	cpsie	f
 801450e:	f3bf 8f4f 	dsb	sy
 8014512:	f3bf 8f6f 	isb	sy
 8014516:	df02      	svc	2
 8014518:	bf00      	nop
 801451a:	bf00      	nop
 801451c:	f3af 8000 	nop.w

08014520 <xVTORConst>:
 8014520:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8014524:	bf00      	nop
 8014526:	bf00      	nop

08014528 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014528:	f3ef 8011 	mrs	r0, BASEPRI
 801452c:	f04f 0150 	mov.w	r1, #80	; 0x50
 8014530:	f381 8811 	msr	BASEPRI, r1
 8014534:	f3bf 8f4f 	dsb	sy
 8014538:	f3bf 8f6f 	isb	sy
 801453c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 801453e:	bf00      	nop
 8014540:	4618      	mov	r0, r3

08014542 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014542:	f380 8811 	msr	BASEPRI, r0
 8014546:	f3bf 8f4f 	dsb	sy
 801454a:	f3bf 8f6f 	isb	sy
 801454e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8014550:	bf00      	nop
	...

08014560 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014560:	f3ef 8009 	mrs	r0, PSP
 8014564:	f3ef 820b 	mrs	r2, PSPLIM
 8014568:	4673      	mov	r3, lr
 801456a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801456e:	4a10      	ldr	r2, [pc, #64]	; (80145b0 <pxCurrentTCBConst>)
 8014570:	6811      	ldr	r1, [r2, #0]
 8014572:	6008      	str	r0, [r1, #0]
 8014574:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014578:	f380 8811 	msr	BASEPRI, r0
 801457c:	f3bf 8f4f 	dsb	sy
 8014580:	f3bf 8f6f 	isb	sy
 8014584:	f7fe fe8a 	bl	801329c <vTaskSwitchContext>
 8014588:	f04f 0000 	mov.w	r0, #0
 801458c:	f380 8811 	msr	BASEPRI, r0
 8014590:	4a07      	ldr	r2, [pc, #28]	; (80145b0 <pxCurrentTCBConst>)
 8014592:	6811      	ldr	r1, [r2, #0]
 8014594:	6808      	ldr	r0, [r1, #0]
 8014596:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801459a:	f382 880b 	msr	PSPLIM, r2
 801459e:	f380 8809 	msr	PSP, r0
 80145a2:	4718      	bx	r3
 80145a4:	f3af 8000 	nop.w
 80145a8:	f3af 8000 	nop.w
 80145ac:	f3af 8000 	nop.w

080145b0 <pxCurrentTCBConst>:
 80145b0:	2005653c 	.word	0x2005653c
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80145b4:	bf00      	nop
 80145b6:	bf00      	nop
	...

080145c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80145c0:	f01e 0f04 	tst.w	lr, #4
 80145c4:	bf0c      	ite	eq
 80145c6:	f3ef 8008 	mrseq	r0, MSP
 80145ca:	f3ef 8009 	mrsne	r0, PSP
 80145ce:	4904      	ldr	r1, [pc, #16]	; (80145e0 <svchandler_address_const>)
 80145d0:	4708      	bx	r1
 80145d2:	bf00      	nop
 80145d4:	f3af 8000 	nop.w
 80145d8:	f3af 8000 	nop.w
 80145dc:	f3af 8000 	nop.w

080145e0 <svchandler_address_const>:
 80145e0:	08014331 	.word	0x08014331
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 80145e4:	bf00      	nop
 80145e6:	bf00      	nop

080145e8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b088      	sub	sp, #32
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80145f0:	2300      	movs	r3, #0
 80145f2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80145f4:	f7fe fc1a 	bl	8012e2c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80145f8:	4b4b      	ldr	r3, [pc, #300]	; (8014728 <pvPortMalloc+0x140>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d101      	bne.n	8014604 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8014600:	f000 f8e8 	bl	80147d4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d012      	beq.n	8014630 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 801460a:	2208      	movs	r2, #8
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f003 0307 	and.w	r3, r3, #7
 8014612:	1ad3      	subs	r3, r2, r3
 8014614:	3308      	adds	r3, #8
 8014616:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	43db      	mvns	r3, r3
 801461c:	687a      	ldr	r2, [r7, #4]
 801461e:	429a      	cmp	r2, r3
 8014620:	d804      	bhi.n	801462c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8014622:	687a      	ldr	r2, [r7, #4]
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	4413      	add	r3, r2
 8014628:	607b      	str	r3, [r7, #4]
 801462a:	e001      	b.n	8014630 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 801462c:	2300      	movs	r3, #0
 801462e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	db68      	blt.n	8014708 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d065      	beq.n	8014708 <pvPortMalloc+0x120>
 801463c:	4b3b      	ldr	r3, [pc, #236]	; (801472c <pvPortMalloc+0x144>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	429a      	cmp	r2, r3
 8014644:	d860      	bhi.n	8014708 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8014646:	4b3a      	ldr	r3, [pc, #232]	; (8014730 <pvPortMalloc+0x148>)
 8014648:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 801464a:	4b39      	ldr	r3, [pc, #228]	; (8014730 <pvPortMalloc+0x148>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014650:	e004      	b.n	801465c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8014652:	69fb      	ldr	r3, [r7, #28]
 8014654:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	685b      	ldr	r3, [r3, #4]
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	429a      	cmp	r2, r3
 8014664:	d903      	bls.n	801466e <pvPortMalloc+0x86>
 8014666:	69fb      	ldr	r3, [r7, #28]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d1f1      	bne.n	8014652 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801466e:	4b2e      	ldr	r3, [pc, #184]	; (8014728 <pvPortMalloc+0x140>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	69fa      	ldr	r2, [r7, #28]
 8014674:	429a      	cmp	r2, r3
 8014676:	d047      	beq.n	8014708 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	2208      	movs	r2, #8
 801467e:	4413      	add	r3, r2
 8014680:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	681a      	ldr	r2, [r3, #0]
 8014686:	69bb      	ldr	r3, [r7, #24]
 8014688:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	685a      	ldr	r2, [r3, #4]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	1ad2      	subs	r2, r2, r3
 8014692:	2308      	movs	r3, #8
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	429a      	cmp	r2, r3
 8014698:	d917      	bls.n	80146ca <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801469a:	69fa      	ldr	r2, [r7, #28]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	4413      	add	r3, r2
 80146a0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	f003 0307 	and.w	r3, r3, #7
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d002      	beq.n	80146b2 <pvPortMalloc+0xca>
 80146ac:	f7ff ff3c 	bl	8014528 <ulSetInterruptMask>
 80146b0:	e7fe      	b.n	80146b0 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80146b2:	69fb      	ldr	r3, [r7, #28]
 80146b4:	685a      	ldr	r2, [r3, #4]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	1ad2      	subs	r2, r2, r3
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	687a      	ldr	r2, [r7, #4]
 80146c2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80146c4:	68f8      	ldr	r0, [r7, #12]
 80146c6:	f000 f8e1 	bl	801488c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80146ca:	4b18      	ldr	r3, [pc, #96]	; (801472c <pvPortMalloc+0x144>)
 80146cc:	681a      	ldr	r2, [r3, #0]
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	4a15      	ldr	r2, [pc, #84]	; (801472c <pvPortMalloc+0x144>)
 80146d6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80146d8:	4b14      	ldr	r3, [pc, #80]	; (801472c <pvPortMalloc+0x144>)
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	4b15      	ldr	r3, [pc, #84]	; (8014734 <pvPortMalloc+0x14c>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d203      	bcs.n	80146ec <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80146e4:	4b11      	ldr	r3, [pc, #68]	; (801472c <pvPortMalloc+0x144>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	4a12      	ldr	r2, [pc, #72]	; (8014734 <pvPortMalloc+0x14c>)
 80146ea:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80146f4:	69fb      	ldr	r3, [r7, #28]
 80146f6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	2200      	movs	r2, #0
 80146fc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80146fe:	4b0e      	ldr	r3, [pc, #56]	; (8014738 <pvPortMalloc+0x150>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	3301      	adds	r3, #1
 8014704:	4a0c      	ldr	r2, [pc, #48]	; (8014738 <pvPortMalloc+0x150>)
 8014706:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8014708:	f7fe fb9e 	bl	8012e48 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	f003 0307 	and.w	r3, r3, #7
 8014712:	2b00      	cmp	r3, #0
 8014714:	d002      	beq.n	801471c <pvPortMalloc+0x134>
 8014716:	f7ff ff07 	bl	8014528 <ulSetInterruptMask>
 801471a:	e7fe      	b.n	801471a <pvPortMalloc+0x132>
    return pvReturn;
 801471c:	697b      	ldr	r3, [r7, #20]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3720      	adds	r7, #32
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	2005eb70 	.word	0x2005eb70
 801472c:	2005eb74 	.word	0x2005eb74
 8014730:	2005eb68 	.word	0x2005eb68
 8014734:	2005eb78 	.word	0x2005eb78
 8014738:	2005eb7c 	.word	0x2005eb7c

0801473c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d039      	beq.n	80147c2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 801474e:	2308      	movs	r3, #8
 8014750:	425b      	negs	r3, r3
 8014752:	68fa      	ldr	r2, [r7, #12]
 8014754:	4413      	add	r3, r2
 8014756:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	2b00      	cmp	r3, #0
 8014762:	db02      	blt.n	801476a <vPortFree+0x2e>
 8014764:	f7ff fee0 	bl	8014528 <ulSetInterruptMask>
 8014768:	e7fe      	b.n	8014768 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d002      	beq.n	8014778 <vPortFree+0x3c>
 8014772:	f7ff fed9 	bl	8014528 <ulSetInterruptMask>
 8014776:	e7fe      	b.n	8014776 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	685b      	ldr	r3, [r3, #4]
 801477c:	0fdb      	lsrs	r3, r3, #31
 801477e:	f003 0301 	and.w	r3, r3, #1
 8014782:	b2db      	uxtb	r3, r3
 8014784:	2b00      	cmp	r3, #0
 8014786:	d01c      	beq.n	80147c2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d118      	bne.n	80147c2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 801479c:	f7fe fb46 	bl	8012e2c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	685a      	ldr	r2, [r3, #4]
 80147a4:	4b09      	ldr	r3, [pc, #36]	; (80147cc <vPortFree+0x90>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	4413      	add	r3, r2
 80147aa:	4a08      	ldr	r2, [pc, #32]	; (80147cc <vPortFree+0x90>)
 80147ac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80147ae:	68b8      	ldr	r0, [r7, #8]
 80147b0:	f000 f86c 	bl	801488c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80147b4:	4b06      	ldr	r3, [pc, #24]	; (80147d0 <vPortFree+0x94>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	3301      	adds	r3, #1
 80147ba:	4a05      	ldr	r2, [pc, #20]	; (80147d0 <vPortFree+0x94>)
 80147bc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80147be:	f7fe fb43 	bl	8012e48 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80147c2:	bf00      	nop
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	2005eb74 	.word	0x2005eb74
 80147d0:	2005eb80 	.word	0x2005eb80

080147d4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80147d4:	b480      	push	{r7}
 80147d6:	b085      	sub	sp, #20
 80147d8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80147da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80147de:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80147e0:	4b25      	ldr	r3, [pc, #148]	; (8014878 <prvHeapInit+0xa4>)
 80147e2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f003 0307 	and.w	r3, r3, #7
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00c      	beq.n	8014808 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	3307      	adds	r3, #7
 80147f2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f023 0307 	bic.w	r3, r3, #7
 80147fa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80147fc:	68ba      	ldr	r2, [r7, #8]
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	1ad3      	subs	r3, r2, r3
 8014802:	4a1d      	ldr	r2, [pc, #116]	; (8014878 <prvHeapInit+0xa4>)
 8014804:	4413      	add	r3, r2
 8014806:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801480c:	4a1b      	ldr	r2, [pc, #108]	; (801487c <prvHeapInit+0xa8>)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8014812:	4b1a      	ldr	r3, [pc, #104]	; (801487c <prvHeapInit+0xa8>)
 8014814:	2200      	movs	r2, #0
 8014816:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	68ba      	ldr	r2, [r7, #8]
 801481c:	4413      	add	r3, r2
 801481e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8014820:	2208      	movs	r2, #8
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	1a9b      	subs	r3, r3, r2
 8014826:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f023 0307 	bic.w	r3, r3, #7
 801482e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	4a13      	ldr	r2, [pc, #76]	; (8014880 <prvHeapInit+0xac>)
 8014834:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8014836:	4b12      	ldr	r3, [pc, #72]	; (8014880 <prvHeapInit+0xac>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	2200      	movs	r2, #0
 801483c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 801483e:	4b10      	ldr	r3, [pc, #64]	; (8014880 <prvHeapInit+0xac>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	2200      	movs	r2, #0
 8014844:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	1ad2      	subs	r2, r2, r3
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014854:	4b0a      	ldr	r3, [pc, #40]	; (8014880 <prvHeapInit+0xac>)
 8014856:	681a      	ldr	r2, [r3, #0]
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	4a08      	ldr	r2, [pc, #32]	; (8014884 <prvHeapInit+0xb0>)
 8014862:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	685b      	ldr	r3, [r3, #4]
 8014868:	4a07      	ldr	r2, [pc, #28]	; (8014888 <prvHeapInit+0xb4>)
 801486a:	6013      	str	r3, [r2, #0]
}
 801486c:	bf00      	nop
 801486e:	3714      	adds	r7, #20
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr
 8014878:	20056b68 	.word	0x20056b68
 801487c:	2005eb68 	.word	0x2005eb68
 8014880:	2005eb70 	.word	0x2005eb70
 8014884:	2005eb78 	.word	0x2005eb78
 8014888:	2005eb74 	.word	0x2005eb74

0801488c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 801488c:	b480      	push	{r7}
 801488e:	b085      	sub	sp, #20
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014894:	4b28      	ldr	r3, [pc, #160]	; (8014938 <prvInsertBlockIntoFreeList+0xac>)
 8014896:	60fb      	str	r3, [r7, #12]
 8014898:	e002      	b.n	80148a0 <prvInsertBlockIntoFreeList+0x14>
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	60fb      	str	r3, [r7, #12]
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d8f7      	bhi.n	801489a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	68ba      	ldr	r2, [r7, #8]
 80148b4:	4413      	add	r3, r2
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d108      	bne.n	80148ce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	685a      	ldr	r2, [r3, #4]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	441a      	add	r2, r3
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	68ba      	ldr	r2, [r7, #8]
 80148d8:	441a      	add	r2, r3
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	429a      	cmp	r2, r3
 80148e0:	d118      	bne.n	8014914 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	4b15      	ldr	r3, [pc, #84]	; (801493c <prvInsertBlockIntoFreeList+0xb0>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d00d      	beq.n	801490a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	685a      	ldr	r2, [r3, #4]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	441a      	add	r2, r3
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	601a      	str	r2, [r3, #0]
 8014908:	e008      	b.n	801491c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801490a:	4b0c      	ldr	r3, [pc, #48]	; (801493c <prvInsertBlockIntoFreeList+0xb0>)
 801490c:	681a      	ldr	r2, [r3, #0]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	601a      	str	r2, [r3, #0]
 8014912:	e003      	b.n	801491c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681a      	ldr	r2, [r3, #0]
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 801491c:	68fa      	ldr	r2, [r7, #12]
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	429a      	cmp	r2, r3
 8014922:	d002      	beq.n	801492a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	687a      	ldr	r2, [r7, #4]
 8014928:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 801492a:	bf00      	nop
 801492c:	3714      	adds	r7, #20
 801492e:	46bd      	mov	sp, r7
 8014930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014934:	4770      	bx	lr
 8014936:	bf00      	nop
 8014938:	2005eb68 	.word	0x2005eb68
 801493c:	2005eb70 	.word	0x2005eb70

08014940 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	330c      	adds	r3, #12
 8014950:	461a      	mov	r2, r3
 8014952:	6839      	ldr	r1, [r7, #0]
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f002 fc29 	bl	80171ac <tcpip_send_msg_wait_sem>
 801495a:	4603      	mov	r3, r0
 801495c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801495e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d103      	bne.n	801496e <netconn_apimsg+0x2e>
    return apimsg->err;
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801496c:	e001      	b.n	8014972 <netconn_apimsg+0x32>
  }
  return err;
 801496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014972:	4618      	mov	r0, r3
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
	...

0801497c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b08c      	sub	sp, #48	; 0x30
 8014980:	af00      	add	r7, sp, #0
 8014982:	4603      	mov	r3, r0
 8014984:	603a      	str	r2, [r7, #0]
 8014986:	71fb      	strb	r3, [r7, #7]
 8014988:	460b      	mov	r3, r1
 801498a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 801498c:	79fb      	ldrb	r3, [r7, #7]
 801498e:	6839      	ldr	r1, [r7, #0]
 8014990:	4618      	mov	r0, r3
 8014992:	f001 f95b 	bl	8015c4c <netconn_alloc>
 8014996:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8014998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801499a:	2b00      	cmp	r3, #0
 801499c:	d054      	beq.n	8014a48 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 801499e:	79bb      	ldrb	r3, [r7, #6]
 80149a0:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80149a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a4:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80149a6:	f107 0308 	add.w	r3, r7, #8
 80149aa:	4619      	mov	r1, r3
 80149ac:	4829      	ldr	r0, [pc, #164]	; (8014a54 <netconn_new_with_proto_and_callback+0xd8>)
 80149ae:	f7ff ffc7 	bl	8014940 <netconn_apimsg>
 80149b2:	4603      	mov	r3, r0
 80149b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80149b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d043      	beq.n	8014a48 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80149c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d005      	beq.n	80149d4 <netconn_new_with_proto_and_callback+0x58>
 80149c8:	4b23      	ldr	r3, [pc, #140]	; (8014a58 <netconn_new_with_proto_and_callback+0xdc>)
 80149ca:	22a3      	movs	r2, #163	; 0xa3
 80149cc:	4923      	ldr	r1, [pc, #140]	; (8014a5c <netconn_new_with_proto_and_callback+0xe0>)
 80149ce:	4824      	ldr	r0, [pc, #144]	; (8014a60 <netconn_new_with_proto_and_callback+0xe4>)
 80149d0:	f00e fa12 	bl	8022df8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80149d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d6:	3310      	adds	r3, #16
 80149d8:	4618      	mov	r0, r3
 80149da:	f00d fd8b 	bl	80224f4 <sys_mbox_valid>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d105      	bne.n	80149f0 <netconn_new_with_proto_and_callback+0x74>
 80149e4:	4b1c      	ldr	r3, [pc, #112]	; (8014a58 <netconn_new_with_proto_and_callback+0xdc>)
 80149e6:	22a4      	movs	r2, #164	; 0xa4
 80149e8:	491e      	ldr	r1, [pc, #120]	; (8014a64 <netconn_new_with_proto_and_callback+0xe8>)
 80149ea:	481d      	ldr	r0, [pc, #116]	; (8014a60 <netconn_new_with_proto_and_callback+0xe4>)
 80149ec:	f00e fa04 	bl	8022df8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80149f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f2:	3314      	adds	r3, #20
 80149f4:	4618      	mov	r0, r3
 80149f6:	f00d fd7d 	bl	80224f4 <sys_mbox_valid>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d005      	beq.n	8014a0c <netconn_new_with_proto_and_callback+0x90>
 8014a00:	4b15      	ldr	r3, [pc, #84]	; (8014a58 <netconn_new_with_proto_and_callback+0xdc>)
 8014a02:	22a6      	movs	r2, #166	; 0xa6
 8014a04:	4918      	ldr	r1, [pc, #96]	; (8014a68 <netconn_new_with_proto_and_callback+0xec>)
 8014a06:	4816      	ldr	r0, [pc, #88]	; (8014a60 <netconn_new_with_proto_and_callback+0xe4>)
 8014a08:	f00e f9f6 	bl	8022df8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0e:	330c      	adds	r3, #12
 8014a10:	4618      	mov	r0, r3
 8014a12:	f00d fdfd 	bl	8022610 <sys_sem_valid>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d105      	bne.n	8014a28 <netconn_new_with_proto_and_callback+0xac>
 8014a1c:	4b0e      	ldr	r3, [pc, #56]	; (8014a58 <netconn_new_with_proto_and_callback+0xdc>)
 8014a1e:	22a9      	movs	r2, #169	; 0xa9
 8014a20:	4912      	ldr	r1, [pc, #72]	; (8014a6c <netconn_new_with_proto_and_callback+0xf0>)
 8014a22:	480f      	ldr	r0, [pc, #60]	; (8014a60 <netconn_new_with_proto_and_callback+0xe4>)
 8014a24:	f00e f9e8 	bl	8022df8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8014a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2a:	330c      	adds	r3, #12
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f00d fde2 	bl	80225f6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8014a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a34:	3310      	adds	r3, #16
 8014a36:	4618      	mov	r0, r3
 8014a38:	f00d fce8 	bl	802240c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a3e:	2007      	movs	r0, #7
 8014a40:	f003 fa1a 	bl	8017e78 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8014a44:	2300      	movs	r3, #0
 8014a46:	e000      	b.n	8014a4a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8014a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3730      	adds	r7, #48	; 0x30
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}
 8014a52:	bf00      	nop
 8014a54:	08015c21 	.word	0x08015c21
 8014a58:	0802439c 	.word	0x0802439c
 8014a5c:	080243d0 	.word	0x080243d0
 8014a60:	080243f4 	.word	0x080243f4
 8014a64:	0802441c 	.word	0x0802441c
 8014a68:	08024434 	.word	0x08024434
 8014a6c:	08024458 	.word	0x08024458

08014a70 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b08c      	sub	sp, #48	; 0x30
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d101      	bne.n	8014a82 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	e014      	b.n	8014aac <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014a86:	2329      	movs	r3, #41	; 0x29
 8014a88:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014a8a:	f107 030c 	add.w	r3, r7, #12
 8014a8e:	4619      	mov	r1, r3
 8014a90:	4808      	ldr	r0, [pc, #32]	; (8014ab4 <netconn_prepare_delete+0x44>)
 8014a92:	f7ff ff55 	bl	8014940 <netconn_apimsg>
 8014a96:	4603      	mov	r3, r0
 8014a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8014a9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <netconn_prepare_delete+0x3a>
    return err;
 8014aa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014aa8:	e000      	b.n	8014aac <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8014aaa:	2300      	movs	r3, #0
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3730      	adds	r7, #48	; 0x30
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	0801618d 	.word	0x0801618d

08014ab8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d101      	bne.n	8014aca <netconn_delete+0x12>
    return ERR_OK;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	e00d      	b.n	8014ae6 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f7ff ffd0 	bl	8014a70 <netconn_prepare_delete>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8014ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d102      	bne.n	8014ae2 <netconn_delete+0x2a>
    netconn_free(conn);
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f001 f923 	bl	8015d28 <netconn_free>
  }
  return err;
 8014ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3710      	adds	r7, #16
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
	...

08014af0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b08e      	sub	sp, #56	; 0x38
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	4613      	mov	r3, r2
 8014afc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d109      	bne.n	8014b18 <netconn_bind+0x28>
 8014b04:	4b11      	ldr	r3, [pc, #68]	; (8014b4c <netconn_bind+0x5c>)
 8014b06:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014b0a:	4911      	ldr	r1, [pc, #68]	; (8014b50 <netconn_bind+0x60>)
 8014b0c:	4811      	ldr	r0, [pc, #68]	; (8014b54 <netconn_bind+0x64>)
 8014b0e:	f00e f973 	bl	8022df8 <iprintf>
 8014b12:	f06f 030f 	mvn.w	r3, #15
 8014b16:	e015      	b.n	8014b44 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d101      	bne.n	8014b22 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8014b1e:	4b0e      	ldr	r3, [pc, #56]	; (8014b58 <netconn_bind+0x68>)
 8014b20:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014b2a:	88fb      	ldrh	r3, [r7, #6]
 8014b2c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014b2e:	f107 0314 	add.w	r3, r7, #20
 8014b32:	4619      	mov	r1, r3
 8014b34:	4809      	ldr	r0, [pc, #36]	; (8014b5c <netconn_bind+0x6c>)
 8014b36:	f7ff ff03 	bl	8014940 <netconn_apimsg>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014b40:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3738      	adds	r7, #56	; 0x38
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}
 8014b4c:	0802439c 	.word	0x0802439c
 8014b50:	080244d4 	.word	0x080244d4
 8014b54:	080243f4 	.word	0x080243f4
 8014b58:	08027bb0 	.word	0x08027bb0
 8014b5c:	08016355 	.word	0x08016355

08014b60 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b08e      	sub	sp, #56	; 0x38
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	60f8      	str	r0, [r7, #12]
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	4613      	mov	r3, r2
 8014b6c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d109      	bne.n	8014b88 <netconn_connect+0x28>
 8014b74:	4b11      	ldr	r3, [pc, #68]	; (8014bbc <netconn_connect+0x5c>)
 8014b76:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8014b7a:	4911      	ldr	r1, [pc, #68]	; (8014bc0 <netconn_connect+0x60>)
 8014b7c:	4811      	ldr	r0, [pc, #68]	; (8014bc4 <netconn_connect+0x64>)
 8014b7e:	f00e f93b 	bl	8022df8 <iprintf>
 8014b82:	f06f 030f 	mvn.w	r3, #15
 8014b86:	e015      	b.n	8014bb4 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d101      	bne.n	8014b92 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8014b8e:	4b0e      	ldr	r3, [pc, #56]	; (8014bc8 <netconn_connect+0x68>)
 8014b90:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014b9a:	88fb      	ldrh	r3, [r7, #6]
 8014b9c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8014b9e:	f107 0314 	add.w	r3, r7, #20
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	4809      	ldr	r0, [pc, #36]	; (8014bcc <netconn_connect+0x6c>)
 8014ba6:	f7ff fecb 	bl	8014940 <netconn_apimsg>
 8014baa:	4603      	mov	r3, r0
 8014bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014bb0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3738      	adds	r7, #56	; 0x38
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	0802439c 	.word	0x0802439c
 8014bc0:	08024510 	.word	0x08024510
 8014bc4:	080243f4 	.word	0x080243f4
 8014bc8:	08027bb0 	.word	0x08027bb0
 8014bcc:	080164e9 	.word	0x080164e9

08014bd0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b08c      	sub	sp, #48	; 0x30
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	460b      	mov	r3, r1
 8014bda:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d109      	bne.n	8014bf6 <netconn_listen_with_backlog+0x26>
 8014be2:	4b0d      	ldr	r3, [pc, #52]	; (8014c18 <netconn_listen_with_backlog+0x48>)
 8014be4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8014be8:	490c      	ldr	r1, [pc, #48]	; (8014c1c <netconn_listen_with_backlog+0x4c>)
 8014bea:	480d      	ldr	r0, [pc, #52]	; (8014c20 <netconn_listen_with_backlog+0x50>)
 8014bec:	f00e f904 	bl	8022df8 <iprintf>
 8014bf0:	f06f 030f 	mvn.w	r3, #15
 8014bf4:	e00c      	b.n	8014c10 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014bfa:	f107 030c 	add.w	r3, r7, #12
 8014bfe:	4619      	mov	r1, r3
 8014c00:	4808      	ldr	r0, [pc, #32]	; (8014c24 <netconn_listen_with_backlog+0x54>)
 8014c02:	f7ff fe9d 	bl	8014940 <netconn_apimsg>
 8014c06:	4603      	mov	r3, r0
 8014c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014c0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3730      	adds	r7, #48	; 0x30
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	0802439c 	.word	0x0802439c
 8014c1c:	08024554 	.word	0x08024554
 8014c20:	080243f4 	.word	0x080243f4
 8014c24:	08016665 	.word	0x08016665

08014c28 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d109      	bne.n	8014c4c <netconn_accept+0x24>
 8014c38:	4b3d      	ldr	r3, [pc, #244]	; (8014d30 <netconn_accept+0x108>)
 8014c3a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014c3e:	493d      	ldr	r1, [pc, #244]	; (8014d34 <netconn_accept+0x10c>)
 8014c40:	483d      	ldr	r0, [pc, #244]	; (8014d38 <netconn_accept+0x110>)
 8014c42:	f00e f8d9 	bl	8022df8 <iprintf>
 8014c46:	f06f 030f 	mvn.w	r3, #15
 8014c4a:	e06c      	b.n	8014d26 <netconn_accept+0xfe>
  *new_conn = NULL;
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d109      	bne.n	8014c6c <netconn_accept+0x44>
 8014c58:	4b35      	ldr	r3, [pc, #212]	; (8014d30 <netconn_accept+0x108>)
 8014c5a:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014c5e:	4937      	ldr	r1, [pc, #220]	; (8014d3c <netconn_accept+0x114>)
 8014c60:	4835      	ldr	r0, [pc, #212]	; (8014d38 <netconn_accept+0x110>)
 8014c62:	f00e f8c9 	bl	8022df8 <iprintf>
 8014c66:	f06f 030f 	mvn.w	r3, #15
 8014c6a:	e05c      	b.n	8014d26 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f000 fb6c 	bl	801534a <netconn_err>
 8014c72:	4603      	mov	r3, r0
 8014c74:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8014c76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d002      	beq.n	8014c84 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8014c7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c82:	e050      	b.n	8014d26 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	3314      	adds	r3, #20
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f00d fc33 	bl	80224f4 <sys_mbox_valid>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d005      	beq.n	8014ca0 <netconn_accept+0x78>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	7f1b      	ldrb	r3, [r3, #28]
 8014c98:	f003 0301 	and.w	r3, r3, #1
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d002      	beq.n	8014ca6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8014ca0:	f06f 030e 	mvn.w	r3, #14
 8014ca4:	e03f      	b.n	8014d26 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	7f1b      	ldrb	r3, [r3, #28]
 8014caa:	f003 0302 	and.w	r3, r3, #2
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d00e      	beq.n	8014cd0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	3314      	adds	r3, #20
 8014cb6:	f107 020c 	add.w	r2, r7, #12
 8014cba:	4611      	mov	r1, r2
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f00d fc02 	bl	80224c6 <sys_arch_mbox_tryfetch>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cc8:	d10a      	bne.n	8014ce0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8014cca:	f06f 0306 	mvn.w	r3, #6
 8014cce:	e02a      	b.n	8014d26 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	3314      	adds	r3, #20
 8014cd4:	f107 010c 	add.w	r1, r7, #12
 8014cd8:	2200      	movs	r2, #0
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f00d fbc2 	bl	8022464 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d005      	beq.n	8014cf4 <netconn_accept+0xcc>
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cec:	2200      	movs	r2, #0
 8014cee:	2101      	movs	r1, #1
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f107 0213 	add.w	r2, r7, #19
 8014cfa:	4611      	mov	r1, r2
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f000 fb75 	bl	80153ec <lwip_netconn_is_err_msg>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d002      	beq.n	8014d0e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8014d08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d0c:	e00b      	b.n	8014d26 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d102      	bne.n	8014d1a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8014d14:	f06f 030e 	mvn.w	r3, #14
 8014d18:	e005      	b.n	8014d26 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	697a      	ldr	r2, [r7, #20]
 8014d22:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014d24:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	3718      	adds	r7, #24
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	0802439c 	.word	0x0802439c
 8014d34:	08024574 	.word	0x08024574
 8014d38:	080243f4 	.word	0x080243f4
 8014d3c:	08024594 	.word	0x08024594

08014d40 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b088      	sub	sp, #32
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	4613      	mov	r3, r2
 8014d4c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d109      	bne.n	8014d6c <netconn_recv_data+0x2c>
 8014d58:	4b58      	ldr	r3, [pc, #352]	; (8014ebc <netconn_recv_data+0x17c>)
 8014d5a:	f44f 7212 	mov.w	r2, #584	; 0x248
 8014d5e:	4958      	ldr	r1, [pc, #352]	; (8014ec0 <netconn_recv_data+0x180>)
 8014d60:	4858      	ldr	r0, [pc, #352]	; (8014ec4 <netconn_recv_data+0x184>)
 8014d62:	f00e f849 	bl	8022df8 <iprintf>
 8014d66:	f06f 030f 	mvn.w	r3, #15
 8014d6a:	e0a2      	b.n	8014eb2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d109      	bne.n	8014d8c <netconn_recv_data+0x4c>
 8014d78:	4b50      	ldr	r3, [pc, #320]	; (8014ebc <netconn_recv_data+0x17c>)
 8014d7a:	f240 224a 	movw	r2, #586	; 0x24a
 8014d7e:	4952      	ldr	r1, [pc, #328]	; (8014ec8 <netconn_recv_data+0x188>)
 8014d80:	4850      	ldr	r0, [pc, #320]	; (8014ec4 <netconn_recv_data+0x184>)
 8014d82:	f00e f839 	bl	8022df8 <iprintf>
 8014d86:	f06f 030f 	mvn.w	r3, #15
 8014d8a:	e092      	b.n	8014eb2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	3310      	adds	r3, #16
 8014d90:	4618      	mov	r0, r3
 8014d92:	f00d fbaf 	bl	80224f4 <sys_mbox_valid>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d10e      	bne.n	8014dba <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8014d9c:	68f8      	ldr	r0, [r7, #12]
 8014d9e:	f000 fad4 	bl	801534a <netconn_err>
 8014da2:	4603      	mov	r3, r0
 8014da4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8014da6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d002      	beq.n	8014db4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8014dae:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014db2:	e07e      	b.n	8014eb2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8014db4:	f06f 030a 	mvn.w	r3, #10
 8014db8:	e07b      	b.n	8014eb2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	7f1b      	ldrb	r3, [r3, #28]
 8014dbe:	f003 0302 	and.w	r3, r3, #2
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d10f      	bne.n	8014de6 <netconn_recv_data+0xa6>
 8014dc6:	79fb      	ldrb	r3, [r7, #7]
 8014dc8:	f003 0304 	and.w	r3, r3, #4
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d10a      	bne.n	8014de6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	7f1b      	ldrb	r3, [r3, #28]
 8014dd4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d104      	bne.n	8014de6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d023      	beq.n	8014e2e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	3310      	adds	r3, #16
 8014dea:	f107 0218 	add.w	r2, r7, #24
 8014dee:	4611      	mov	r1, r2
 8014df0:	4618      	mov	r0, r3
 8014df2:	f00d fb68 	bl	80224c6 <sys_arch_mbox_tryfetch>
 8014df6:	4603      	mov	r3, r0
 8014df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dfc:	d11f      	bne.n	8014e3e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8014dfe:	68f8      	ldr	r0, [r7, #12]
 8014e00:	f000 faa3 	bl	801534a <netconn_err>
 8014e04:	4603      	mov	r3, r0
 8014e06:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8014e08:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d002      	beq.n	8014e16 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8014e10:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014e14:	e04d      	b.n	8014eb2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	7f1b      	ldrb	r3, [r3, #28]
 8014e1a:	f003 0301 	and.w	r3, r3, #1
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d002      	beq.n	8014e28 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8014e22:	f06f 030a 	mvn.w	r3, #10
 8014e26:	e044      	b.n	8014eb2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8014e28:	f06f 0306 	mvn.w	r3, #6
 8014e2c:	e041      	b.n	8014eb2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	3310      	adds	r3, #16
 8014e32:	f107 0118 	add.w	r1, r7, #24
 8014e36:	2200      	movs	r2, #0
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f00d fb13 	bl	8022464 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e46:	2b10      	cmp	r3, #16
 8014e48:	d117      	bne.n	8014e7a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	f107 0217 	add.w	r2, r7, #23
 8014e50:	4611      	mov	r1, r2
 8014e52:	4618      	mov	r0, r3
 8014e54:	f000 faca 	bl	80153ec <lwip_netconn_is_err_msg>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d009      	beq.n	8014e72 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8014e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014e62:	f113 0f0f 	cmn.w	r3, #15
 8014e66:	d101      	bne.n	8014e6c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e022      	b.n	8014eb2 <netconn_recv_data+0x172>
      }
      return err;
 8014e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014e70:	e01f      	b.n	8014eb2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8014e72:	69bb      	ldr	r3, [r7, #24]
 8014e74:	891b      	ldrh	r3, [r3, #8]
 8014e76:	83fb      	strh	r3, [r7, #30]
 8014e78:	e00d      	b.n	8014e96 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8014e7a:	69bb      	ldr	r3, [r7, #24]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d106      	bne.n	8014e8e <netconn_recv_data+0x14e>
 8014e80:	4b0e      	ldr	r3, [pc, #56]	; (8014ebc <netconn_recv_data+0x17c>)
 8014e82:	f240 2291 	movw	r2, #657	; 0x291
 8014e86:	4911      	ldr	r1, [pc, #68]	; (8014ecc <netconn_recv_data+0x18c>)
 8014e88:	480e      	ldr	r0, [pc, #56]	; (8014ec4 <netconn_recv_data+0x184>)
 8014e8a:	f00d ffb5 	bl	8022df8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8014e8e:	69bb      	ldr	r3, [r7, #24]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	891b      	ldrh	r3, [r3, #8]
 8014e94:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d005      	beq.n	8014eaa <netconn_recv_data+0x16a>
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ea2:	8bfa      	ldrh	r2, [r7, #30]
 8014ea4:	2101      	movs	r1, #1
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8014eaa:	69ba      	ldr	r2, [r7, #24]
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014eb0:	2300      	movs	r3, #0
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3720      	adds	r7, #32
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	0802439c 	.word	0x0802439c
 8014ec0:	080245b4 	.word	0x080245b4
 8014ec4:	080243f4 	.word	0x080243f4
 8014ec8:	080245d4 	.word	0x080245d4
 8014ecc:	080245f0 	.word	0x080245f0

08014ed0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	60f8      	str	r0, [r7, #12]
 8014ed8:	60b9      	str	r1, [r7, #8]
 8014eda:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d005      	beq.n	8014eee <netconn_tcp_recvd_msg+0x1e>
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014eea:	2b10      	cmp	r3, #16
 8014eec:	d009      	beq.n	8014f02 <netconn_tcp_recvd_msg+0x32>
 8014eee:	4b0c      	ldr	r3, [pc, #48]	; (8014f20 <netconn_tcp_recvd_msg+0x50>)
 8014ef0:	f240 22a7 	movw	r2, #679	; 0x2a7
 8014ef4:	490b      	ldr	r1, [pc, #44]	; (8014f24 <netconn_tcp_recvd_msg+0x54>)
 8014ef6:	480c      	ldr	r0, [pc, #48]	; (8014f28 <netconn_tcp_recvd_msg+0x58>)
 8014ef8:	f00d ff7e 	bl	8022df8 <iprintf>
 8014efc:	f06f 030f 	mvn.w	r3, #15
 8014f00:	e00a      	b.n	8014f18 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	68fa      	ldr	r2, [r7, #12]
 8014f06:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	68ba      	ldr	r2, [r7, #8]
 8014f0c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8014f0e:	6879      	ldr	r1, [r7, #4]
 8014f10:	4806      	ldr	r0, [pc, #24]	; (8014f2c <netconn_tcp_recvd_msg+0x5c>)
 8014f12:	f7ff fd15 	bl	8014940 <netconn_apimsg>
 8014f16:	4603      	mov	r3, r0
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3710      	adds	r7, #16
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	0802439c 	.word	0x0802439c
 8014f24:	080245fc 	.word	0x080245fc
 8014f28:	080243f4 	.word	0x080243f4
 8014f2c:	08016795 	.word	0x08016795

08014f30 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b090      	sub	sp, #64	; 0x40
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	60f8      	str	r0, [r7, #12]
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	4613      	mov	r3, r2
 8014f3c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	3310      	adds	r3, #16
 8014f42:	4618      	mov	r0, r3
 8014f44:	f00d fad6 	bl	80224f4 <sys_mbox_valid>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d102      	bne.n	8014f54 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8014f4e:	f06f 030a 	mvn.w	r3, #10
 8014f52:	e06d      	b.n	8015030 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	7f1b      	ldrb	r3, [r3, #28]
 8014f58:	b25b      	sxtb	r3, r3
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	da07      	bge.n	8014f6e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	7f1b      	ldrb	r3, [r3, #28]
 8014f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f66:	b2da      	uxtb	r2, r3
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8014f6c:	e039      	b.n	8014fe2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8014f6e:	79fb      	ldrb	r3, [r7, #7]
 8014f70:	461a      	mov	r2, r3
 8014f72:	68b9      	ldr	r1, [r7, #8]
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f7ff fee3 	bl	8014d40 <netconn_recv_data>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8014f80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d002      	beq.n	8014f8e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8014f88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014f8c:	e050      	b.n	8015030 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8014f94:	79fb      	ldrb	r3, [r7, #7]
 8014f96:	f003 0308 	and.w	r3, r3, #8
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d10e      	bne.n	8014fbc <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8014f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d002      	beq.n	8014faa <netconn_recv_data_tcp+0x7a>
 8014fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa6:	891b      	ldrh	r3, [r3, #8]
 8014fa8:	e000      	b.n	8014fac <netconn_recv_data_tcp+0x7c>
 8014faa:	2301      	movs	r3, #1
 8014fac:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8014fae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014fb0:	f107 0214 	add.w	r2, r7, #20
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	68f8      	ldr	r0, [r7, #12]
 8014fb8:	f7ff ff8a 	bl	8014ed0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8014fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d134      	bne.n	801502c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8014fc2:	79fb      	ldrb	r3, [r7, #7]
 8014fc4:	f003 0310 	and.w	r3, r3, #16
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d009      	beq.n	8014fe0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	7f1b      	ldrb	r3, [r3, #28]
 8014fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fd4:	b2da      	uxtb	r2, r3
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8014fda:	f06f 0306 	mvn.w	r3, #6
 8014fde:	e027      	b.n	8015030 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8014fe0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d005      	beq.n	8014ff6 <netconn_recv_data_tcp+0xc6>
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fee:	2200      	movs	r2, #0
 8014ff0:	2101      	movs	r1, #1
 8014ff2:	68f8      	ldr	r0, [r7, #12]
 8014ff4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d10f      	bne.n	801501e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8014ffe:	68f8      	ldr	r0, [r7, #12]
 8015000:	f000 f9a3 	bl	801534a <netconn_err>
 8015004:	4603      	mov	r3, r0
 8015006:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 801500a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801500e:	2b00      	cmp	r3, #0
 8015010:	d002      	beq.n	8015018 <netconn_recv_data_tcp+0xe8>
          return err;
 8015012:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015016:	e00b      	b.n	8015030 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8015018:	f06f 030d 	mvn.w	r3, #13
 801501c:	e008      	b.n	8015030 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801501e:	2101      	movs	r1, #1
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	f000 f955 	bl	80152d0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8015026:	f06f 030e 	mvn.w	r3, #14
 801502a:	e001      	b.n	8015030 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 801502c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8015030:	4618      	mov	r0, r3
 8015032:	3740      	adds	r7, #64	; 0x40
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}

08015038 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b086      	sub	sp, #24
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8015042:	2300      	movs	r3, #0
 8015044:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d109      	bne.n	8015060 <netconn_recv+0x28>
 801504c:	4b32      	ldr	r3, [pc, #200]	; (8015118 <netconn_recv+0xe0>)
 801504e:	f240 3263 	movw	r2, #867	; 0x363
 8015052:	4932      	ldr	r1, [pc, #200]	; (801511c <netconn_recv+0xe4>)
 8015054:	4832      	ldr	r0, [pc, #200]	; (8015120 <netconn_recv+0xe8>)
 8015056:	f00d fecf 	bl	8022df8 <iprintf>
 801505a:	f06f 030f 	mvn.w	r3, #15
 801505e:	e056      	b.n	801510e <netconn_recv+0xd6>
  *new_buf = NULL;
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	2200      	movs	r2, #0
 8015064:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d109      	bne.n	8015080 <netconn_recv+0x48>
 801506c:	4b2a      	ldr	r3, [pc, #168]	; (8015118 <netconn_recv+0xe0>)
 801506e:	f240 3265 	movw	r2, #869	; 0x365
 8015072:	492c      	ldr	r1, [pc, #176]	; (8015124 <netconn_recv+0xec>)
 8015074:	482a      	ldr	r0, [pc, #168]	; (8015120 <netconn_recv+0xe8>)
 8015076:	f00d febf 	bl	8022df8 <iprintf>
 801507a:	f06f 030f 	mvn.w	r3, #15
 801507e:	e046      	b.n	801510e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015088:	2b10      	cmp	r3, #16
 801508a:	d13a      	bne.n	8015102 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 801508c:	2300      	movs	r3, #0
 801508e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8015090:	2006      	movs	r0, #6
 8015092:	f002 fe7b 	bl	8017d8c <memp_malloc>
 8015096:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d102      	bne.n	80150a4 <netconn_recv+0x6c>
      return ERR_MEM;
 801509e:	f04f 33ff 	mov.w	r3, #4294967295
 80150a2:	e034      	b.n	801510e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80150a4:	f107 030c 	add.w	r3, r7, #12
 80150a8:	2200      	movs	r2, #0
 80150aa:	4619      	mov	r1, r3
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f7ff ff3f 	bl	8014f30 <netconn_recv_data_tcp>
 80150b2:	4603      	mov	r3, r0
 80150b4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80150b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d006      	beq.n	80150cc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80150be:	6979      	ldr	r1, [r7, #20]
 80150c0:	2006      	movs	r0, #6
 80150c2:	f002 fed9 	bl	8017e78 <memp_free>
      return err;
 80150c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80150ca:	e020      	b.n	801510e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d106      	bne.n	80150e0 <netconn_recv+0xa8>
 80150d2:	4b11      	ldr	r3, [pc, #68]	; (8015118 <netconn_recv+0xe0>)
 80150d4:	f240 3279 	movw	r2, #889	; 0x379
 80150d8:	4913      	ldr	r1, [pc, #76]	; (8015128 <netconn_recv+0xf0>)
 80150da:	4811      	ldr	r0, [pc, #68]	; (8015120 <netconn_recv+0xe8>)
 80150dc:	f00d fe8c 	bl	8022df8 <iprintf>

    buf->p = p;
 80150e0:	68fa      	ldr	r2, [r7, #12]
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80150e6:	68fa      	ldr	r2, [r7, #12]
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	2200      	movs	r2, #0
 80150f0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	2200      	movs	r2, #0
 80150f6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	697a      	ldr	r2, [r7, #20]
 80150fc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80150fe:	2300      	movs	r3, #0
 8015100:	e005      	b.n	801510e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8015102:	2200      	movs	r2, #0
 8015104:	6839      	ldr	r1, [r7, #0]
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f7ff fe1a 	bl	8014d40 <netconn_recv_data>
 801510c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801510e:	4618      	mov	r0, r3
 8015110:	3718      	adds	r7, #24
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	0802439c 	.word	0x0802439c
 801511c:	080245b4 	.word	0x080245b4
 8015120:	080243f4 	.word	0x080243f4
 8015124:	080245d4 	.word	0x080245d4
 8015128:	0802464c 	.word	0x0802464c

0801512c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b088      	sub	sp, #32
 8015130:	af02      	add	r7, sp, #8
 8015132:	60f8      	str	r0, [r7, #12]
 8015134:	60b9      	str	r1, [r7, #8]
 8015136:	607a      	str	r2, [r7, #4]
 8015138:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8015142:	78fa      	ldrb	r2, [r7, #3]
 8015144:	f107 0110 	add.w	r1, r7, #16
 8015148:	6a3b      	ldr	r3, [r7, #32]
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	4613      	mov	r3, r2
 801514e:	2201      	movs	r2, #1
 8015150:	68f8      	ldr	r0, [r7, #12]
 8015152:	f000 f805 	bl	8015160 <netconn_write_vectors_partly>
 8015156:	4603      	mov	r3, r0
}
 8015158:	4618      	mov	r0, r3
 801515a:	3718      	adds	r7, #24
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b092      	sub	sp, #72	; 0x48
 8015164:	af00      	add	r7, sp, #0
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	4611      	mov	r1, r2
 801516c:	461a      	mov	r2, r3
 801516e:	460b      	mov	r3, r1
 8015170:	80fb      	strh	r3, [r7, #6]
 8015172:	4613      	mov	r3, r2
 8015174:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d109      	bne.n	8015190 <netconn_write_vectors_partly+0x30>
 801517c:	4b4e      	ldr	r3, [pc, #312]	; (80152b8 <netconn_write_vectors_partly+0x158>)
 801517e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8015182:	494e      	ldr	r1, [pc, #312]	; (80152bc <netconn_write_vectors_partly+0x15c>)
 8015184:	484e      	ldr	r0, [pc, #312]	; (80152c0 <netconn_write_vectors_partly+0x160>)
 8015186:	f00d fe37 	bl	8022df8 <iprintf>
 801518a:	f06f 030f 	mvn.w	r3, #15
 801518e:	e08e      	b.n	80152ae <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015198:	2b10      	cmp	r3, #16
 801519a:	d009      	beq.n	80151b0 <netconn_write_vectors_partly+0x50>
 801519c:	4b46      	ldr	r3, [pc, #280]	; (80152b8 <netconn_write_vectors_partly+0x158>)
 801519e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80151a2:	4948      	ldr	r1, [pc, #288]	; (80152c4 <netconn_write_vectors_partly+0x164>)
 80151a4:	4846      	ldr	r0, [pc, #280]	; (80152c0 <netconn_write_vectors_partly+0x160>)
 80151a6:	f00d fe27 	bl	8022df8 <iprintf>
 80151aa:	f06f 0305 	mvn.w	r3, #5
 80151ae:	e07e      	b.n	80152ae <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	7f1b      	ldrb	r3, [r3, #28]
 80151b4:	f003 0302 	and.w	r3, r3, #2
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d104      	bne.n	80151c6 <netconn_write_vectors_partly+0x66>
 80151bc:	797b      	ldrb	r3, [r7, #5]
 80151be:	f003 0304 	and.w	r3, r3, #4
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d001      	beq.n	80151ca <netconn_write_vectors_partly+0x6a>
 80151c6:	2301      	movs	r3, #1
 80151c8:	e000      	b.n	80151cc <netconn_write_vectors_partly+0x6c>
 80151ca:	2300      	movs	r3, #0
 80151cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80151d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d005      	beq.n	80151e4 <netconn_write_vectors_partly+0x84>
 80151d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d102      	bne.n	80151e4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80151de:	f06f 0305 	mvn.w	r3, #5
 80151e2:	e064      	b.n	80152ae <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80151e4:	2300      	movs	r3, #0
 80151e6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80151e8:	2300      	movs	r3, #0
 80151ea:	643b      	str	r3, [r7, #64]	; 0x40
 80151ec:	e015      	b.n	801521a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80151ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151f0:	00db      	lsls	r3, r3, #3
 80151f2:	68ba      	ldr	r2, [r7, #8]
 80151f4:	4413      	add	r3, r2
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80151fa:	4413      	add	r3, r2
 80151fc:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80151fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015200:	00db      	lsls	r3, r3, #3
 8015202:	68ba      	ldr	r2, [r7, #8]
 8015204:	4413      	add	r3, r2
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801520a:	429a      	cmp	r2, r3
 801520c:	d202      	bcs.n	8015214 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801520e:	f06f 0305 	mvn.w	r3, #5
 8015212:	e04c      	b.n	80152ae <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8015214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015216:	3301      	adds	r3, #1
 8015218:	643b      	str	r3, [r7, #64]	; 0x40
 801521a:	88fb      	ldrh	r3, [r7, #6]
 801521c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801521e:	429a      	cmp	r2, r3
 8015220:	dbe5      	blt.n	80151ee <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8015222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015224:	2b00      	cmp	r3, #0
 8015226:	d101      	bne.n	801522c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8015228:	2300      	movs	r3, #0
 801522a:	e040      	b.n	80152ae <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 801522c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801522e:	2b00      	cmp	r3, #0
 8015230:	da0a      	bge.n	8015248 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8015232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015234:	2b00      	cmp	r3, #0
 8015236:	d102      	bne.n	801523e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8015238:	f06f 0305 	mvn.w	r3, #5
 801523c:	e037      	b.n	80152ae <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801523e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015242:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8015244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015246:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8015250:	88fb      	ldrh	r3, [r7, #6]
 8015252:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8015254:	2300      	movs	r3, #0
 8015256:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8015258:	797b      	ldrb	r3, [r7, #5]
 801525a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015260:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8015262:	2300      	movs	r3, #0
 8015264:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8015266:	f107 0314 	add.w	r3, r7, #20
 801526a:	4619      	mov	r1, r3
 801526c:	4816      	ldr	r0, [pc, #88]	; (80152c8 <netconn_write_vectors_partly+0x168>)
 801526e:	f7ff fb67 	bl	8014940 <netconn_apimsg>
 8015272:	4603      	mov	r3, r0
 8015274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8015278:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801527c:	2b00      	cmp	r3, #0
 801527e:	d114      	bne.n	80152aa <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8015280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015282:	2b00      	cmp	r3, #0
 8015284:	d002      	beq.n	801528c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8015286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801528a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801528c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015290:	2b00      	cmp	r3, #0
 8015292:	d10a      	bne.n	80152aa <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8015294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015298:	429a      	cmp	r2, r3
 801529a:	d006      	beq.n	80152aa <netconn_write_vectors_partly+0x14a>
 801529c:	4b06      	ldr	r3, [pc, #24]	; (80152b8 <netconn_write_vectors_partly+0x158>)
 801529e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80152a2:	490a      	ldr	r1, [pc, #40]	; (80152cc <netconn_write_vectors_partly+0x16c>)
 80152a4:	4806      	ldr	r0, [pc, #24]	; (80152c0 <netconn_write_vectors_partly+0x160>)
 80152a6:	f00d fda7 	bl	8022df8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80152aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3748      	adds	r7, #72	; 0x48
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	0802439c 	.word	0x0802439c
 80152bc:	08024674 	.word	0x08024674
 80152c0:	080243f4 	.word	0x080243f4
 80152c4:	08024690 	.word	0x08024690
 80152c8:	08016b99 	.word	0x08016b99
 80152cc:	080246b4 	.word	0x080246b4

080152d0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b08c      	sub	sp, #48	; 0x30
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	460b      	mov	r3, r1
 80152da:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d109      	bne.n	80152f6 <netconn_close_shutdown+0x26>
 80152e2:	4b0f      	ldr	r3, [pc, #60]	; (8015320 <netconn_close_shutdown+0x50>)
 80152e4:	f240 4247 	movw	r2, #1095	; 0x447
 80152e8:	490e      	ldr	r1, [pc, #56]	; (8015324 <netconn_close_shutdown+0x54>)
 80152ea:	480f      	ldr	r0, [pc, #60]	; (8015328 <netconn_close_shutdown+0x58>)
 80152ec:	f00d fd84 	bl	8022df8 <iprintf>
 80152f0:	f06f 030f 	mvn.w	r3, #15
 80152f4:	e010      	b.n	8015318 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80152fa:	78fb      	ldrb	r3, [r7, #3]
 80152fc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80152fe:	2329      	movs	r3, #41	; 0x29
 8015300:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8015302:	f107 030c 	add.w	r3, r7, #12
 8015306:	4619      	mov	r1, r3
 8015308:	4808      	ldr	r0, [pc, #32]	; (801532c <netconn_close_shutdown+0x5c>)
 801530a:	f7ff fb19 	bl	8014940 <netconn_apimsg>
 801530e:	4603      	mov	r3, r0
 8015310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015314:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8015318:	4618      	mov	r0, r3
 801531a:	3730      	adds	r7, #48	; 0x30
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	0802439c 	.word	0x0802439c
 8015324:	080246d8 	.word	0x080246d8
 8015328:	080243f4 	.word	0x080243f4
 801532c:	08016cb1 	.word	0x08016cb1

08015330 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8015338:	2103      	movs	r1, #3
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f7ff ffc8 	bl	80152d0 <netconn_close_shutdown>
 8015340:	4603      	mov	r3, r0
}
 8015342:	4618      	mov	r0, r3
 8015344:	3708      	adds	r7, #8
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}

0801534a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b084      	sub	sp, #16
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d101      	bne.n	801535c <netconn_err+0x12>
    return ERR_OK;
 8015358:	2300      	movs	r3, #0
 801535a:	e00d      	b.n	8015378 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801535c:	f00d f9d4 	bl	8022708 <sys_arch_protect>
 8015360:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	7a1b      	ldrb	r3, [r3, #8]
 8015366:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2200      	movs	r2, #0
 801536c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801536e:	68f8      	ldr	r0, [r7, #12]
 8015370:	f00d f9d8 	bl	8022724 <sys_arch_unprotect>
  return err;
 8015374:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015378:	4618      	mov	r0, r3
 801537a:	3710      	adds	r7, #16
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	4603      	mov	r3, r0
 8015388:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801538e:	f113 0f0d 	cmn.w	r3, #13
 8015392:	d009      	beq.n	80153a8 <lwip_netconn_err_to_msg+0x28>
 8015394:	f113 0f0d 	cmn.w	r3, #13
 8015398:	dc0c      	bgt.n	80153b4 <lwip_netconn_err_to_msg+0x34>
 801539a:	f113 0f0f 	cmn.w	r3, #15
 801539e:	d007      	beq.n	80153b0 <lwip_netconn_err_to_msg+0x30>
 80153a0:	f113 0f0e 	cmn.w	r3, #14
 80153a4:	d002      	beq.n	80153ac <lwip_netconn_err_to_msg+0x2c>
 80153a6:	e005      	b.n	80153b4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80153a8:	4b0a      	ldr	r3, [pc, #40]	; (80153d4 <lwip_netconn_err_to_msg+0x54>)
 80153aa:	e00e      	b.n	80153ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80153ac:	4b0a      	ldr	r3, [pc, #40]	; (80153d8 <lwip_netconn_err_to_msg+0x58>)
 80153ae:	e00c      	b.n	80153ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80153b0:	4b0a      	ldr	r3, [pc, #40]	; (80153dc <lwip_netconn_err_to_msg+0x5c>)
 80153b2:	e00a      	b.n	80153ca <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80153b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d005      	beq.n	80153c8 <lwip_netconn_err_to_msg+0x48>
 80153bc:	4b08      	ldr	r3, [pc, #32]	; (80153e0 <lwip_netconn_err_to_msg+0x60>)
 80153be:	227d      	movs	r2, #125	; 0x7d
 80153c0:	4908      	ldr	r1, [pc, #32]	; (80153e4 <lwip_netconn_err_to_msg+0x64>)
 80153c2:	4809      	ldr	r0, [pc, #36]	; (80153e8 <lwip_netconn_err_to_msg+0x68>)
 80153c4:	f00d fd18 	bl	8022df8 <iprintf>
      return NULL;
 80153c8:	2300      	movs	r3, #0
  }
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}
 80153d2:	bf00      	nop
 80153d4:	08027a9c 	.word	0x08027a9c
 80153d8:	08027a9d 	.word	0x08027a9d
 80153dc:	08027a9e 	.word	0x08027a9e
 80153e0:	080246f4 	.word	0x080246f4
 80153e4:	08024728 	.word	0x08024728
 80153e8:	08024738 	.word	0x08024738

080153ec <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d105      	bne.n	8015408 <lwip_netconn_is_err_msg+0x1c>
 80153fc:	4b12      	ldr	r3, [pc, #72]	; (8015448 <lwip_netconn_is_err_msg+0x5c>)
 80153fe:	2285      	movs	r2, #133	; 0x85
 8015400:	4912      	ldr	r1, [pc, #72]	; (801544c <lwip_netconn_is_err_msg+0x60>)
 8015402:	4813      	ldr	r0, [pc, #76]	; (8015450 <lwip_netconn_is_err_msg+0x64>)
 8015404:	f00d fcf8 	bl	8022df8 <iprintf>

  if (msg == &netconn_aborted) {
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	4a12      	ldr	r2, [pc, #72]	; (8015454 <lwip_netconn_is_err_msg+0x68>)
 801540c:	4293      	cmp	r3, r2
 801540e:	d104      	bne.n	801541a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	22f3      	movs	r2, #243	; 0xf3
 8015414:	701a      	strb	r2, [r3, #0]
    return 1;
 8015416:	2301      	movs	r3, #1
 8015418:	e012      	b.n	8015440 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	4a0e      	ldr	r2, [pc, #56]	; (8015458 <lwip_netconn_is_err_msg+0x6c>)
 801541e:	4293      	cmp	r3, r2
 8015420:	d104      	bne.n	801542c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	22f2      	movs	r2, #242	; 0xf2
 8015426:	701a      	strb	r2, [r3, #0]
    return 1;
 8015428:	2301      	movs	r3, #1
 801542a:	e009      	b.n	8015440 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	4a0b      	ldr	r2, [pc, #44]	; (801545c <lwip_netconn_is_err_msg+0x70>)
 8015430:	4293      	cmp	r3, r2
 8015432:	d104      	bne.n	801543e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	22f1      	movs	r2, #241	; 0xf1
 8015438:	701a      	strb	r2, [r3, #0]
    return 1;
 801543a:	2301      	movs	r3, #1
 801543c:	e000      	b.n	8015440 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801543e:	2300      	movs	r3, #0
}
 8015440:	4618      	mov	r0, r3
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}
 8015448:	080246f4 	.word	0x080246f4
 801544c:	08024760 	.word	0x08024760
 8015450:	08024738 	.word	0x08024738
 8015454:	08027a9c 	.word	0x08027a9c
 8015458:	08027a9d 	.word	0x08027a9d
 801545c:	08027a9e 	.word	0x08027a9e

08015460 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b088      	sub	sp, #32
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
 801546c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d105      	bne.n	8015480 <recv_udp+0x20>
 8015474:	4b34      	ldr	r3, [pc, #208]	; (8015548 <recv_udp+0xe8>)
 8015476:	22e5      	movs	r2, #229	; 0xe5
 8015478:	4934      	ldr	r1, [pc, #208]	; (801554c <recv_udp+0xec>)
 801547a:	4835      	ldr	r0, [pc, #212]	; (8015550 <recv_udp+0xf0>)
 801547c:	f00d fcbc 	bl	8022df8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d105      	bne.n	8015492 <recv_udp+0x32>
 8015486:	4b30      	ldr	r3, [pc, #192]	; (8015548 <recv_udp+0xe8>)
 8015488:	22e6      	movs	r2, #230	; 0xe6
 801548a:	4932      	ldr	r1, [pc, #200]	; (8015554 <recv_udp+0xf4>)
 801548c:	4830      	ldr	r0, [pc, #192]	; (8015550 <recv_udp+0xf0>)
 801548e:	f00d fcb3 	bl	8022df8 <iprintf>
  conn = (struct netconn *)arg;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d103      	bne.n	80154a4 <recv_udp+0x44>
    pbuf_free(p);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f003 fb8f 	bl	8018bc0 <pbuf_free>
    return;
 80154a2:	e04d      	b.n	8015540 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	68ba      	ldr	r2, [r7, #8]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d005      	beq.n	80154ba <recv_udp+0x5a>
 80154ae:	4b26      	ldr	r3, [pc, #152]	; (8015548 <recv_udp+0xe8>)
 80154b0:	22ee      	movs	r2, #238	; 0xee
 80154b2:	4929      	ldr	r1, [pc, #164]	; (8015558 <recv_udp+0xf8>)
 80154b4:	4826      	ldr	r0, [pc, #152]	; (8015550 <recv_udp+0xf0>)
 80154b6:	f00d fc9f 	bl	8022df8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	3310      	adds	r3, #16
 80154be:	4618      	mov	r0, r3
 80154c0:	f00d f818 	bl	80224f4 <sys_mbox_valid>
 80154c4:	4603      	mov	r3, r0
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d103      	bne.n	80154d2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f003 fb78 	bl	8018bc0 <pbuf_free>
    return;
 80154d0:	e036      	b.n	8015540 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80154d2:	2006      	movs	r0, #6
 80154d4:	f002 fc5a 	bl	8017d8c <memp_malloc>
 80154d8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d103      	bne.n	80154e8 <recv_udp+0x88>
    pbuf_free(p);
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f003 fb6d 	bl	8018bc0 <pbuf_free>
    return;
 80154e6:	e02b      	b.n	8015540 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	687a      	ldr	r2, [r7, #4]
 80154f2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d002      	beq.n	8015500 <recv_udp+0xa0>
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	e000      	b.n	8015502 <recv_udp+0xa2>
 8015500:	2300      	movs	r3, #0
 8015502:	69ba      	ldr	r2, [r7, #24]
 8015504:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801550a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	891b      	ldrh	r3, [r3, #8]
 8015510:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	3310      	adds	r3, #16
 8015516:	69b9      	ldr	r1, [r7, #24]
 8015518:	4618      	mov	r0, r3
 801551a:	f00c ff89 	bl	8022430 <sys_mbox_trypost>
 801551e:	4603      	mov	r3, r0
 8015520:	2b00      	cmp	r3, #0
 8015522:	d003      	beq.n	801552c <recv_udp+0xcc>
    netbuf_delete(buf);
 8015524:	69b8      	ldr	r0, [r7, #24]
 8015526:	f001 fc4f 	bl	8016dc8 <netbuf_delete>
    return;
 801552a:	e009      	b.n	8015540 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015530:	2b00      	cmp	r3, #0
 8015532:	d005      	beq.n	8015540 <recv_udp+0xe0>
 8015534:	69fb      	ldr	r3, [r7, #28]
 8015536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015538:	8afa      	ldrh	r2, [r7, #22]
 801553a:	2100      	movs	r1, #0
 801553c:	69f8      	ldr	r0, [r7, #28]
 801553e:	4798      	blx	r3
  }
}
 8015540:	3720      	adds	r7, #32
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	080246f4 	.word	0x080246f4
 801554c:	0802476c 	.word	0x0802476c
 8015550:	08024738 	.word	0x08024738
 8015554:	08024790 	.word	0x08024790
 8015558:	080247b0 	.word	0x080247b0

0801555c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b088      	sub	sp, #32
 8015560:	af00      	add	r7, sp, #0
 8015562:	60f8      	str	r0, [r7, #12]
 8015564:	60b9      	str	r1, [r7, #8]
 8015566:	607a      	str	r2, [r7, #4]
 8015568:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d106      	bne.n	801557e <recv_tcp+0x22>
 8015570:	4b36      	ldr	r3, [pc, #216]	; (801564c <recv_tcp+0xf0>)
 8015572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015576:	4936      	ldr	r1, [pc, #216]	; (8015650 <recv_tcp+0xf4>)
 8015578:	4836      	ldr	r0, [pc, #216]	; (8015654 <recv_tcp+0xf8>)
 801557a:	f00d fc3d 	bl	8022df8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d106      	bne.n	8015592 <recv_tcp+0x36>
 8015584:	4b31      	ldr	r3, [pc, #196]	; (801564c <recv_tcp+0xf0>)
 8015586:	f240 122d 	movw	r2, #301	; 0x12d
 801558a:	4933      	ldr	r1, [pc, #204]	; (8015658 <recv_tcp+0xfc>)
 801558c:	4831      	ldr	r0, [pc, #196]	; (8015654 <recv_tcp+0xf8>)
 801558e:	f00d fc33 	bl	8022df8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8015592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d006      	beq.n	80155a8 <recv_tcp+0x4c>
 801559a:	4b2c      	ldr	r3, [pc, #176]	; (801564c <recv_tcp+0xf0>)
 801559c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80155a0:	492e      	ldr	r1, [pc, #184]	; (801565c <recv_tcp+0x100>)
 80155a2:	482c      	ldr	r0, [pc, #176]	; (8015654 <recv_tcp+0xf8>)
 80155a4:	f00d fc28 	bl	8022df8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d102      	bne.n	80155b8 <recv_tcp+0x5c>
    return ERR_VAL;
 80155b2:	f06f 0305 	mvn.w	r3, #5
 80155b6:	e045      	b.n	8015644 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	685b      	ldr	r3, [r3, #4]
 80155bc:	68ba      	ldr	r2, [r7, #8]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d006      	beq.n	80155d0 <recv_tcp+0x74>
 80155c2:	4b22      	ldr	r3, [pc, #136]	; (801564c <recv_tcp+0xf0>)
 80155c4:	f240 1235 	movw	r2, #309	; 0x135
 80155c8:	4925      	ldr	r1, [pc, #148]	; (8015660 <recv_tcp+0x104>)
 80155ca:	4822      	ldr	r0, [pc, #136]	; (8015654 <recv_tcp+0xf8>)
 80155cc:	f00d fc14 	bl	8022df8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	3310      	adds	r3, #16
 80155d4:	4618      	mov	r0, r3
 80155d6:	f00c ff8d 	bl	80224f4 <sys_mbox_valid>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d10d      	bne.n	80155fc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d008      	beq.n	80155f8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	891b      	ldrh	r3, [r3, #8]
 80155ea:	4619      	mov	r1, r3
 80155ec:	68b8      	ldr	r0, [r7, #8]
 80155ee:	f004 fa9f 	bl	8019b30 <tcp_recved>
      pbuf_free(p);
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f003 fae4 	bl	8018bc0 <pbuf_free>
    }
    return ERR_OK;
 80155f8:	2300      	movs	r3, #0
 80155fa:	e023      	b.n	8015644 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d005      	beq.n	801560e <recv_tcp+0xb2>
    msg = p;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	891b      	ldrh	r3, [r3, #8]
 801560a:	83fb      	strh	r3, [r7, #30]
 801560c:	e003      	b.n	8015616 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801560e:	4b15      	ldr	r3, [pc, #84]	; (8015664 <recv_tcp+0x108>)
 8015610:	61bb      	str	r3, [r7, #24]
    len = 0;
 8015612:	2300      	movs	r3, #0
 8015614:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	3310      	adds	r3, #16
 801561a:	69b9      	ldr	r1, [r7, #24]
 801561c:	4618      	mov	r0, r3
 801561e:	f00c ff07 	bl	8022430 <sys_mbox_trypost>
 8015622:	4603      	mov	r3, r0
 8015624:	2b00      	cmp	r3, #0
 8015626:	d002      	beq.n	801562e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8015628:	f04f 33ff 	mov.w	r3, #4294967295
 801562c:	e00a      	b.n	8015644 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015632:	2b00      	cmp	r3, #0
 8015634:	d005      	beq.n	8015642 <recv_tcp+0xe6>
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801563a:	8bfa      	ldrh	r2, [r7, #30]
 801563c:	2100      	movs	r1, #0
 801563e:	6978      	ldr	r0, [r7, #20]
 8015640:	4798      	blx	r3
  }

  return ERR_OK;
 8015642:	2300      	movs	r3, #0
}
 8015644:	4618      	mov	r0, r3
 8015646:	3720      	adds	r7, #32
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	080246f4 	.word	0x080246f4
 8015650:	080247d0 	.word	0x080247d0
 8015654:	08024738 	.word	0x08024738
 8015658:	080247f4 	.word	0x080247f4
 801565c:	08024814 	.word	0x08024814
 8015660:	0802482c 	.word	0x0802482c
 8015664:	08027a9e 	.word	0x08027a9e

08015668 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b084      	sub	sp, #16
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d106      	bne.n	801568a <poll_tcp+0x22>
 801567c:	4b29      	ldr	r3, [pc, #164]	; (8015724 <poll_tcp+0xbc>)
 801567e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015682:	4929      	ldr	r1, [pc, #164]	; (8015728 <poll_tcp+0xc0>)
 8015684:	4829      	ldr	r0, [pc, #164]	; (801572c <poll_tcp+0xc4>)
 8015686:	f00d fbb7 	bl	8022df8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	785b      	ldrb	r3, [r3, #1]
 801568e:	2b01      	cmp	r3, #1
 8015690:	d104      	bne.n	801569c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015692:	2101      	movs	r1, #1
 8015694:	68f8      	ldr	r0, [r7, #12]
 8015696:	f001 f8b3 	bl	8016800 <lwip_netconn_do_writemore>
 801569a:	e016      	b.n	80156ca <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	785b      	ldrb	r3, [r3, #1]
 80156a0:	2b04      	cmp	r3, #4
 80156a2:	d112      	bne.n	80156ca <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	6a1b      	ldr	r3, [r3, #32]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d00a      	beq.n	80156c2 <poll_tcp+0x5a>
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	6a1b      	ldr	r3, [r3, #32]
 80156b0:	7a5b      	ldrb	r3, [r3, #9]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d005      	beq.n	80156c2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	6a1b      	ldr	r3, [r3, #32]
 80156ba:	7a5a      	ldrb	r2, [r3, #9]
 80156bc:	3a01      	subs	r2, #1
 80156be:	b2d2      	uxtb	r2, r2
 80156c0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80156c2:	2101      	movs	r1, #1
 80156c4:	68f8      	ldr	r0, [r7, #12]
 80156c6:	f000 fbf7 	bl	8015eb8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	7f1b      	ldrb	r3, [r3, #28]
 80156ce:	f003 0310 	and.w	r3, r3, #16
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d021      	beq.n	801571a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d01d      	beq.n	801571a <poll_tcp+0xb2>
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80156e6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80156ea:	d316      	bcc.n	801571a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80156f4:	2b04      	cmp	r3, #4
 80156f6:	d810      	bhi.n	801571a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	7f1b      	ldrb	r3, [r3, #28]
 80156fc:	f023 0310 	bic.w	r3, r3, #16
 8015700:	b2da      	uxtb	r2, r3
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801570a:	2b00      	cmp	r3, #0
 801570c:	d005      	beq.n	801571a <poll_tcp+0xb2>
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015712:	2200      	movs	r2, #0
 8015714:	2102      	movs	r1, #2
 8015716:	68f8      	ldr	r0, [r7, #12]
 8015718:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801571a:	2300      	movs	r3, #0
}
 801571c:	4618      	mov	r0, r3
 801571e:	3710      	adds	r7, #16
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	080246f4 	.word	0x080246f4
 8015728:	0802484c 	.word	0x0802484c
 801572c:	08024738 	.word	0x08024738

08015730 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b086      	sub	sp, #24
 8015734:	af00      	add	r7, sp, #0
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	4613      	mov	r3, r2
 801573c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d106      	bne.n	8015756 <sent_tcp+0x26>
 8015748:	4b20      	ldr	r3, [pc, #128]	; (80157cc <sent_tcp+0x9c>)
 801574a:	f240 1293 	movw	r2, #403	; 0x193
 801574e:	4920      	ldr	r1, [pc, #128]	; (80157d0 <sent_tcp+0xa0>)
 8015750:	4820      	ldr	r0, [pc, #128]	; (80157d4 <sent_tcp+0xa4>)
 8015752:	f00d fb51 	bl	8022df8 <iprintf>

  if (conn) {
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d032      	beq.n	80157c2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	785b      	ldrb	r3, [r3, #1]
 8015760:	2b01      	cmp	r3, #1
 8015762:	d104      	bne.n	801576e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015764:	2101      	movs	r1, #1
 8015766:	6978      	ldr	r0, [r7, #20]
 8015768:	f001 f84a 	bl	8016800 <lwip_netconn_do_writemore>
 801576c:	e007      	b.n	801577e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	785b      	ldrb	r3, [r3, #1]
 8015772:	2b04      	cmp	r3, #4
 8015774:	d103      	bne.n	801577e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8015776:	2101      	movs	r1, #1
 8015778:	6978      	ldr	r0, [r7, #20]
 801577a:	f000 fb9d 	bl	8015eb8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d01d      	beq.n	80157c2 <sent_tcp+0x92>
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801578e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8015792:	d316      	bcc.n	80157c2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801579c:	2b04      	cmp	r3, #4
 801579e:	d810      	bhi.n	80157c2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	7f1b      	ldrb	r3, [r3, #28]
 80157a4:	f023 0310 	bic.w	r3, r3, #16
 80157a8:	b2da      	uxtb	r2, r3
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d005      	beq.n	80157c2 <sent_tcp+0x92>
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157ba:	88fa      	ldrh	r2, [r7, #6]
 80157bc:	2102      	movs	r1, #2
 80157be:	6978      	ldr	r0, [r7, #20]
 80157c0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3718      	adds	r7, #24
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	080246f4 	.word	0x080246f4
 80157d0:	0802484c 	.word	0x0802484c
 80157d4:	08024738 	.word	0x08024738

080157d8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b088      	sub	sp, #32
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
 80157e0:	460b      	mov	r3, r1
 80157e2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80157e8:	69fb      	ldr	r3, [r7, #28]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d106      	bne.n	80157fc <err_tcp+0x24>
 80157ee:	4b5f      	ldr	r3, [pc, #380]	; (801596c <err_tcp+0x194>)
 80157f0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80157f4:	495e      	ldr	r1, [pc, #376]	; (8015970 <err_tcp+0x198>)
 80157f6:	485f      	ldr	r0, [pc, #380]	; (8015974 <err_tcp+0x19c>)
 80157f8:	f00d fafe 	bl	8022df8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80157fc:	f00c ff84 	bl	8022708 <sys_arch_protect>
 8015800:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	2200      	movs	r2, #0
 8015806:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8015808:	69fb      	ldr	r3, [r7, #28]
 801580a:	78fa      	ldrb	r2, [r7, #3]
 801580c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801580e:	69fb      	ldr	r3, [r7, #28]
 8015810:	7f1b      	ldrb	r3, [r3, #28]
 8015812:	f043 0301 	orr.w	r3, r3, #1
 8015816:	b2da      	uxtb	r2, r3
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	785b      	ldrb	r3, [r3, #1]
 8015820:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	2200      	movs	r2, #0
 8015826:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8015828:	69b8      	ldr	r0, [r7, #24]
 801582a:	f00c ff7b 	bl	8022724 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015832:	2b00      	cmp	r3, #0
 8015834:	d005      	beq.n	8015842 <err_tcp+0x6a>
 8015836:	69fb      	ldr	r3, [r7, #28]
 8015838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801583a:	2200      	movs	r2, #0
 801583c:	2104      	movs	r1, #4
 801583e:	69f8      	ldr	r0, [r7, #28]
 8015840:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015846:	2b00      	cmp	r3, #0
 8015848:	d005      	beq.n	8015856 <err_tcp+0x7e>
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801584e:	2200      	movs	r2, #0
 8015850:	2100      	movs	r1, #0
 8015852:	69f8      	ldr	r0, [r7, #28]
 8015854:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015856:	69fb      	ldr	r3, [r7, #28]
 8015858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801585a:	2b00      	cmp	r3, #0
 801585c:	d005      	beq.n	801586a <err_tcp+0x92>
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015862:	2200      	movs	r2, #0
 8015864:	2102      	movs	r1, #2
 8015866:	69f8      	ldr	r0, [r7, #28]
 8015868:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801586a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801586e:	4618      	mov	r0, r3
 8015870:	f7ff fd86 	bl	8015380 <lwip_netconn_err_to_msg>
 8015874:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8015876:	69fb      	ldr	r3, [r7, #28]
 8015878:	3310      	adds	r3, #16
 801587a:	4618      	mov	r0, r3
 801587c:	f00c fe3a 	bl	80224f4 <sys_mbox_valid>
 8015880:	4603      	mov	r3, r0
 8015882:	2b00      	cmp	r3, #0
 8015884:	d005      	beq.n	8015892 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	3310      	adds	r3, #16
 801588a:	6939      	ldr	r1, [r7, #16]
 801588c:	4618      	mov	r0, r3
 801588e:	f00c fdcf 	bl	8022430 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	3314      	adds	r3, #20
 8015896:	4618      	mov	r0, r3
 8015898:	f00c fe2c 	bl	80224f4 <sys_mbox_valid>
 801589c:	4603      	mov	r3, r0
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d005      	beq.n	80158ae <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	3314      	adds	r3, #20
 80158a6:	6939      	ldr	r1, [r7, #16]
 80158a8:	4618      	mov	r0, r3
 80158aa:	f00c fdc1 	bl	8022430 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80158ae:	7dfb      	ldrb	r3, [r7, #23]
 80158b0:	2b01      	cmp	r3, #1
 80158b2:	d005      	beq.n	80158c0 <err_tcp+0xe8>
 80158b4:	7dfb      	ldrb	r3, [r7, #23]
 80158b6:	2b04      	cmp	r3, #4
 80158b8:	d002      	beq.n	80158c0 <err_tcp+0xe8>
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
 80158bc:	2b03      	cmp	r3, #3
 80158be:	d143      	bne.n	8015948 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	7f1b      	ldrb	r3, [r3, #28]
 80158c4:	f003 0304 	and.w	r3, r3, #4
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	bf14      	ite	ne
 80158cc:	2301      	movne	r3, #1
 80158ce:	2300      	moveq	r3, #0
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	7f1b      	ldrb	r3, [r3, #28]
 80158d8:	f023 0304 	bic.w	r3, r3, #4
 80158dc:	b2da      	uxtb	r2, r3
 80158de:	69fb      	ldr	r3, [r7, #28]
 80158e0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d13b      	bne.n	8015960 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80158e8:	69fb      	ldr	r3, [r7, #28]
 80158ea:	6a1b      	ldr	r3, [r3, #32]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d106      	bne.n	80158fe <err_tcp+0x126>
 80158f0:	4b1e      	ldr	r3, [pc, #120]	; (801596c <err_tcp+0x194>)
 80158f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80158f6:	4920      	ldr	r1, [pc, #128]	; (8015978 <err_tcp+0x1a0>)
 80158f8:	481e      	ldr	r0, [pc, #120]	; (8015974 <err_tcp+0x19c>)
 80158fa:	f00d fa7d 	bl	8022df8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80158fe:	7dfb      	ldrb	r3, [r7, #23]
 8015900:	2b04      	cmp	r3, #4
 8015902:	d104      	bne.n	801590e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	6a1b      	ldr	r3, [r3, #32]
 8015908:	2200      	movs	r2, #0
 801590a:	711a      	strb	r2, [r3, #4]
 801590c:	e003      	b.n	8015916 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	6a1b      	ldr	r3, [r3, #32]
 8015912:	78fa      	ldrb	r2, [r7, #3]
 8015914:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	6a1b      	ldr	r3, [r3, #32]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	330c      	adds	r3, #12
 801591e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015920:	68b8      	ldr	r0, [r7, #8]
 8015922:	f00c fe75 	bl	8022610 <sys_sem_valid>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d106      	bne.n	801593a <err_tcp+0x162>
 801592c:	4b0f      	ldr	r3, [pc, #60]	; (801596c <err_tcp+0x194>)
 801592e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8015932:	4912      	ldr	r1, [pc, #72]	; (801597c <err_tcp+0x1a4>)
 8015934:	480f      	ldr	r0, [pc, #60]	; (8015974 <err_tcp+0x19c>)
 8015936:	f00d fa5f 	bl	8022df8 <iprintf>
      conn->current_msg = NULL;
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	2200      	movs	r2, #0
 801593e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8015940:	68b8      	ldr	r0, [r7, #8]
 8015942:	f00c fe4b 	bl	80225dc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8015946:	e00b      	b.n	8015960 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8015948:	69fb      	ldr	r3, [r7, #28]
 801594a:	6a1b      	ldr	r3, [r3, #32]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d008      	beq.n	8015962 <err_tcp+0x18a>
 8015950:	4b06      	ldr	r3, [pc, #24]	; (801596c <err_tcp+0x194>)
 8015952:	f240 12f7 	movw	r2, #503	; 0x1f7
 8015956:	490a      	ldr	r1, [pc, #40]	; (8015980 <err_tcp+0x1a8>)
 8015958:	4806      	ldr	r0, [pc, #24]	; (8015974 <err_tcp+0x19c>)
 801595a:	f00d fa4d 	bl	8022df8 <iprintf>
  }
}
 801595e:	e000      	b.n	8015962 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8015960:	bf00      	nop
}
 8015962:	bf00      	nop
 8015964:	3720      	adds	r7, #32
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop
 801596c:	080246f4 	.word	0x080246f4
 8015970:	0802484c 	.word	0x0802484c
 8015974:	08024738 	.word	0x08024738
 8015978:	0802485c 	.word	0x0802485c
 801597c:	08024878 	.word	0x08024878
 8015980:	08024894 	.word	0x08024894

08015984 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b084      	sub	sp, #16
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	685b      	ldr	r3, [r3, #4]
 8015990:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8015992:	6879      	ldr	r1, [r7, #4]
 8015994:	68f8      	ldr	r0, [r7, #12]
 8015996:	f005 f8a9 	bl	801aaec <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801599a:	490a      	ldr	r1, [pc, #40]	; (80159c4 <setup_tcp+0x40>)
 801599c:	68f8      	ldr	r0, [r7, #12]
 801599e:	f005 f8b7 	bl	801ab10 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80159a2:	4909      	ldr	r1, [pc, #36]	; (80159c8 <setup_tcp+0x44>)
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f005 f8d5 	bl	801ab54 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80159aa:	2202      	movs	r2, #2
 80159ac:	4907      	ldr	r1, [pc, #28]	; (80159cc <setup_tcp+0x48>)
 80159ae:	68f8      	ldr	r0, [r7, #12]
 80159b0:	f005 f92c 	bl	801ac0c <tcp_poll>
  tcp_err(pcb, err_tcp);
 80159b4:	4906      	ldr	r1, [pc, #24]	; (80159d0 <setup_tcp+0x4c>)
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f005 f8ee 	bl	801ab98 <tcp_err>
}
 80159bc:	bf00      	nop
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	0801555d 	.word	0x0801555d
 80159c8:	08015731 	.word	0x08015731
 80159cc:	08015669 	.word	0x08015669
 80159d0:	080157d9 	.word	0x080157d9

080159d4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80159d4:	b590      	push	{r4, r7, lr}
 80159d6:	b089      	sub	sp, #36	; 0x24
 80159d8:	af00      	add	r7, sp, #0
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	4613      	mov	r3, r2
 80159e0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80159e6:	69fb      	ldr	r3, [r7, #28]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d102      	bne.n	80159f2 <accept_function+0x1e>
    return ERR_VAL;
 80159ec:	f06f 0305 	mvn.w	r3, #5
 80159f0:	e0a1      	b.n	8015b36 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80159f2:	69fb      	ldr	r3, [r7, #28]
 80159f4:	3314      	adds	r3, #20
 80159f6:	4618      	mov	r0, r3
 80159f8:	f00c fd7c 	bl	80224f4 <sys_mbox_valid>
 80159fc:	4603      	mov	r3, r0
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d102      	bne.n	8015a08 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8015a02:	f06f 0305 	mvn.w	r3, #5
 8015a06:	e096      	b.n	8015b36 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d11b      	bne.n	8015a46 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015a0e:	69fb      	ldr	r3, [r7, #28]
 8015a10:	f103 0414 	add.w	r4, r3, #20
 8015a14:	f06f 000c 	mvn.w	r0, #12
 8015a18:	f7ff fcb2 	bl	8015380 <lwip_netconn_err_to_msg>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	4619      	mov	r1, r3
 8015a20:	4620      	mov	r0, r4
 8015a22:	f00c fd05 	bl	8022430 <sys_mbox_trypost>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d109      	bne.n	8015a40 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d005      	beq.n	8015a40 <accept_function+0x6c>
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a38:	2200      	movs	r2, #0
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	69f8      	ldr	r0, [r7, #28]
 8015a3e:	4798      	blx	r3
    }
    return ERR_VAL;
 8015a40:	f06f 0305 	mvn.w	r3, #5
 8015a44:	e077      	b.n	8015b36 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8015a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d006      	beq.n	8015a5c <accept_function+0x88>
 8015a4e:	4b3c      	ldr	r3, [pc, #240]	; (8015b40 <accept_function+0x16c>)
 8015a50:	f240 222a 	movw	r2, #554	; 0x22a
 8015a54:	493b      	ldr	r1, [pc, #236]	; (8015b44 <accept_function+0x170>)
 8015a56:	483c      	ldr	r0, [pc, #240]	; (8015b48 <accept_function+0x174>)
 8015a58:	f00d f9ce 	bl	8022df8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8015a5c:	69fb      	ldr	r3, [r7, #28]
 8015a5e:	781a      	ldrb	r2, [r3, #0]
 8015a60:	69fb      	ldr	r3, [r7, #28]
 8015a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a64:	4619      	mov	r1, r3
 8015a66:	4610      	mov	r0, r2
 8015a68:	f000 f8f0 	bl	8015c4c <netconn_alloc>
 8015a6c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8015a6e:	69bb      	ldr	r3, [r7, #24]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d11b      	bne.n	8015aac <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015a74:	69fb      	ldr	r3, [r7, #28]
 8015a76:	f103 0414 	add.w	r4, r3, #20
 8015a7a:	f06f 000c 	mvn.w	r0, #12
 8015a7e:	f7ff fc7f 	bl	8015380 <lwip_netconn_err_to_msg>
 8015a82:	4603      	mov	r3, r0
 8015a84:	4619      	mov	r1, r3
 8015a86:	4620      	mov	r0, r4
 8015a88:	f00c fcd2 	bl	8022430 <sys_mbox_trypost>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d109      	bne.n	8015aa6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015a92:	69fb      	ldr	r3, [r7, #28]
 8015a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d005      	beq.n	8015aa6 <accept_function+0xd2>
 8015a9a:	69fb      	ldr	r3, [r7, #28]
 8015a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	2100      	movs	r1, #0
 8015aa2:	69f8      	ldr	r0, [r7, #28]
 8015aa4:	4798      	blx	r3
    }
    return ERR_MEM;
 8015aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8015aaa:	e044      	b.n	8015b36 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8015aac:	69bb      	ldr	r3, [r7, #24]
 8015aae:	68ba      	ldr	r2, [r7, #8]
 8015ab0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8015ab2:	69b8      	ldr	r0, [r7, #24]
 8015ab4:	f7ff ff66 	bl	8015984 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	3314      	adds	r3, #20
 8015abc:	69b9      	ldr	r1, [r7, #24]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f00c fcb6 	bl	8022430 <sys_mbox_trypost>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d02a      	beq.n	8015b20 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8015aca:	69bb      	ldr	r3, [r7, #24]
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	6978      	ldr	r0, [r7, #20]
 8015ad4:	f005 f80a 	bl	801aaec <tcp_arg>
    tcp_recv(pcb, NULL);
 8015ad8:	2100      	movs	r1, #0
 8015ada:	6978      	ldr	r0, [r7, #20]
 8015adc:	f005 f818 	bl	801ab10 <tcp_recv>
    tcp_sent(pcb, NULL);
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	6978      	ldr	r0, [r7, #20]
 8015ae4:	f005 f836 	bl	801ab54 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015ae8:	2200      	movs	r2, #0
 8015aea:	2100      	movs	r1, #0
 8015aec:	6978      	ldr	r0, [r7, #20]
 8015aee:	f005 f88d 	bl	801ac0c <tcp_poll>
    tcp_err(pcb, NULL);
 8015af2:	2100      	movs	r1, #0
 8015af4:	6978      	ldr	r0, [r7, #20]
 8015af6:	f005 f84f 	bl	801ab98 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8015afa:	69bb      	ldr	r3, [r7, #24]
 8015afc:	2200      	movs	r2, #0
 8015afe:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	3310      	adds	r3, #16
 8015b04:	4618      	mov	r0, r3
 8015b06:	f00c fc81 	bl	802240c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015b0a:	69bb      	ldr	r3, [r7, #24]
 8015b0c:	3310      	adds	r3, #16
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f00c fd01 	bl	8022516 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015b14:	69b8      	ldr	r0, [r7, #24]
 8015b16:	f000 f907 	bl	8015d28 <netconn_free>
    return ERR_MEM;
 8015b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b1e:	e00a      	b.n	8015b36 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015b20:	69fb      	ldr	r3, [r7, #28]
 8015b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d005      	beq.n	8015b34 <accept_function+0x160>
 8015b28:	69fb      	ldr	r3, [r7, #28]
 8015b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	2100      	movs	r1, #0
 8015b30:	69f8      	ldr	r0, [r7, #28]
 8015b32:	4798      	blx	r3
  }

  return ERR_OK;
 8015b34:	2300      	movs	r3, #0
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3724      	adds	r7, #36	; 0x24
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd90      	pop	{r4, r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	080246f4 	.word	0x080246f4
 8015b44:	080248b0 	.word	0x080248b0
 8015b48:	08024738 	.word	0x08024738

08015b4c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8015b4c:	b590      	push	{r4, r7, lr}
 8015b4e:	b085      	sub	sp, #20
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8015b54:	2300      	movs	r3, #0
 8015b56:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d006      	beq.n	8015b70 <pcb_new+0x24>
 8015b62:	4b2b      	ldr	r3, [pc, #172]	; (8015c10 <pcb_new+0xc4>)
 8015b64:	f240 2265 	movw	r2, #613	; 0x265
 8015b68:	492a      	ldr	r1, [pc, #168]	; (8015c14 <pcb_new+0xc8>)
 8015b6a:	482b      	ldr	r0, [pc, #172]	; (8015c18 <pcb_new+0xcc>)
 8015b6c:	f00d f944 	bl	8022df8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b7a:	2b10      	cmp	r3, #16
 8015b7c:	d022      	beq.n	8015bc4 <pcb_new+0x78>
 8015b7e:	2b20      	cmp	r3, #32
 8015b80:	d133      	bne.n	8015bea <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681c      	ldr	r4, [r3, #0]
 8015b86:	7bfb      	ldrb	r3, [r7, #15]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f00a f8fc 	bl	801fd86 <udp_new_ip_type>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	685b      	ldr	r3, [r3, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d02a      	beq.n	8015bf2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	2b22      	cmp	r3, #34	; 0x22
 8015ba4:	d104      	bne.n	8015bb0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	2201      	movs	r2, #1
 8015bae:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	6858      	ldr	r0, [r3, #4]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	461a      	mov	r2, r3
 8015bbc:	4917      	ldr	r1, [pc, #92]	; (8015c1c <pcb_new+0xd0>)
 8015bbe:	f00a f869 	bl	801fc94 <udp_recv>
      }
      break;
 8015bc2:	e016      	b.n	8015bf2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681c      	ldr	r4, [r3, #0]
 8015bc8:	7bfb      	ldrb	r3, [r7, #15]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f004 ff80 	bl	801aad0 <tcp_new_ip_type>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d00b      	beq.n	8015bf6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7ff fece 	bl	8015984 <setup_tcp>
      }
      break;
 8015be8:	e005      	b.n	8015bf6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	22fa      	movs	r2, #250	; 0xfa
 8015bee:	711a      	strb	r2, [r3, #4]
      return;
 8015bf0:	e00a      	b.n	8015c08 <pcb_new+0xbc>
      break;
 8015bf2:	bf00      	nop
 8015bf4:	e000      	b.n	8015bf8 <pcb_new+0xac>
      break;
 8015bf6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	685b      	ldr	r3, [r3, #4]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d102      	bne.n	8015c08 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	22ff      	movs	r2, #255	; 0xff
 8015c06:	711a      	strb	r2, [r3, #4]
  }
}
 8015c08:	3714      	adds	r7, #20
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd90      	pop	{r4, r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	080246f4 	.word	0x080246f4
 8015c14:	080248d8 	.word	0x080248d8
 8015c18:	08024738 	.word	0x08024738
 8015c1c:	08015461 	.word	0x08015461

08015c20 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b084      	sub	sp, #16
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2200      	movs	r2, #0
 8015c30:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d102      	bne.n	8015c42 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8015c3c:	68f8      	ldr	r0, [r7, #12]
 8015c3e:	f7ff ff85 	bl	8015b4c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8015c42:	bf00      	nop
 8015c44:	3710      	adds	r7, #16
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
	...

08015c4c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b086      	sub	sp, #24
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	4603      	mov	r3, r0
 8015c54:	6039      	str	r1, [r7, #0]
 8015c56:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015c5c:	2007      	movs	r0, #7
 8015c5e:	f002 f895 	bl	8017d8c <memp_malloc>
 8015c62:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d101      	bne.n	8015c6e <netconn_alloc+0x22>
    return NULL;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	e052      	b.n	8015d14 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2200      	movs	r2, #0
 8015c72:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	79fa      	ldrb	r2, [r7, #7]
 8015c78:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015c80:	79fb      	ldrb	r3, [r7, #7]
 8015c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c86:	2b10      	cmp	r3, #16
 8015c88:	d004      	beq.n	8015c94 <netconn_alloc+0x48>
 8015c8a:	2b20      	cmp	r3, #32
 8015c8c:	d105      	bne.n	8015c9a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8015c8e:	2306      	movs	r3, #6
 8015c90:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015c92:	e00a      	b.n	8015caa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8015c94:	2306      	movs	r3, #6
 8015c96:	617b      	str	r3, [r7, #20]
      break;
 8015c98:	e007      	b.n	8015caa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015c9a:	4b20      	ldr	r3, [pc, #128]	; (8015d1c <netconn_alloc+0xd0>)
 8015c9c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8015ca0:	491f      	ldr	r1, [pc, #124]	; (8015d20 <netconn_alloc+0xd4>)
 8015ca2:	4820      	ldr	r0, [pc, #128]	; (8015d24 <netconn_alloc+0xd8>)
 8015ca4:	f00d f8a8 	bl	8022df8 <iprintf>
      goto free_and_return;
 8015ca8:	e02f      	b.n	8015d0a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	3310      	adds	r3, #16
 8015cae:	6979      	ldr	r1, [r7, #20]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f00c fb91 	bl	80223d8 <sys_mbox_new>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d125      	bne.n	8015d08 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	330c      	adds	r3, #12
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f00c fc34 	bl	8022530 <sys_sem_new>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d005      	beq.n	8015cda <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	3310      	adds	r3, #16
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f00c fb9a 	bl	802240c <sys_mbox_free>
    goto free_and_return;
 8015cd8:	e017      	b.n	8015d0a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	3314      	adds	r3, #20
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f00c fc19 	bl	8022516 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	f04f 32ff 	mov.w	r2, #4294967295
 8015cf0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	683a      	ldr	r2, [r7, #0]
 8015cf6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	7cfa      	ldrb	r2, [r7, #19]
 8015d02:	771a      	strb	r2, [r3, #28]
  return conn;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	e005      	b.n	8015d14 <netconn_alloc+0xc8>
    goto free_and_return;
 8015d08:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8015d0a:	68f9      	ldr	r1, [r7, #12]
 8015d0c:	2007      	movs	r0, #7
 8015d0e:	f002 f8b3 	bl	8017e78 <memp_free>
  return NULL;
 8015d12:	2300      	movs	r3, #0
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3718      	adds	r7, #24
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	080246f4 	.word	0x080246f4
 8015d20:	080248f8 	.word	0x080248f8
 8015d24:	08024738 	.word	0x08024738

08015d28 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	685b      	ldr	r3, [r3, #4]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d006      	beq.n	8015d46 <netconn_free+0x1e>
 8015d38:	4b1b      	ldr	r3, [pc, #108]	; (8015da8 <netconn_free+0x80>)
 8015d3a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015d3e:	491b      	ldr	r1, [pc, #108]	; (8015dac <netconn_free+0x84>)
 8015d40:	481b      	ldr	r0, [pc, #108]	; (8015db0 <netconn_free+0x88>)
 8015d42:	f00d f859 	bl	8022df8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	3310      	adds	r3, #16
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f00c fbd2 	bl	80224f4 <sys_mbox_valid>
 8015d50:	4603      	mov	r3, r0
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d006      	beq.n	8015d64 <netconn_free+0x3c>
 8015d56:	4b14      	ldr	r3, [pc, #80]	; (8015da8 <netconn_free+0x80>)
 8015d58:	f240 3223 	movw	r2, #803	; 0x323
 8015d5c:	4915      	ldr	r1, [pc, #84]	; (8015db4 <netconn_free+0x8c>)
 8015d5e:	4814      	ldr	r0, [pc, #80]	; (8015db0 <netconn_free+0x88>)
 8015d60:	f00d f84a 	bl	8022df8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	3314      	adds	r3, #20
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f00c fbc3 	bl	80224f4 <sys_mbox_valid>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d006      	beq.n	8015d82 <netconn_free+0x5a>
 8015d74:	4b0c      	ldr	r3, [pc, #48]	; (8015da8 <netconn_free+0x80>)
 8015d76:	f240 3226 	movw	r2, #806	; 0x326
 8015d7a:	490f      	ldr	r1, [pc, #60]	; (8015db8 <netconn_free+0x90>)
 8015d7c:	480c      	ldr	r0, [pc, #48]	; (8015db0 <netconn_free+0x88>)
 8015d7e:	f00d f83b 	bl	8022df8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	330c      	adds	r3, #12
 8015d86:	4618      	mov	r0, r3
 8015d88:	f00c fc35 	bl	80225f6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	330c      	adds	r3, #12
 8015d90:	4618      	mov	r0, r3
 8015d92:	f00c fc4e 	bl	8022632 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	2007      	movs	r0, #7
 8015d9a:	f002 f86d 	bl	8017e78 <memp_free>
}
 8015d9e:	bf00      	nop
 8015da0:	3708      	adds	r7, #8
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	080246f4 	.word	0x080246f4
 8015dac:	08024920 	.word	0x08024920
 8015db0:	08024738 	.word	0x08024738
 8015db4:	08024950 	.word	0x08024950
 8015db8:	0802498c 	.word	0x0802498c

08015dbc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b086      	sub	sp, #24
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	3310      	adds	r3, #16
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f00c fb93 	bl	80224f4 <sys_mbox_valid>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d02f      	beq.n	8015e34 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015dd4:	e018      	b.n	8015e08 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015dde:	2b10      	cmp	r3, #16
 8015de0:	d10e      	bne.n	8015e00 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	f107 020f 	add.w	r2, r7, #15
 8015de8:	4611      	mov	r1, r2
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7ff fafe 	bl	80153ec <lwip_netconn_is_err_msg>
 8015df0:	4603      	mov	r3, r0
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d108      	bne.n	8015e08 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f002 fee1 	bl	8018bc0 <pbuf_free>
 8015dfe:	e003      	b.n	8015e08 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	4618      	mov	r0, r3
 8015e04:	f000 ffe0 	bl	8016dc8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	3310      	adds	r3, #16
 8015e0c:	f107 0210 	add.w	r2, r7, #16
 8015e10:	4611      	mov	r1, r2
 8015e12:	4618      	mov	r0, r3
 8015e14:	f00c fb57 	bl	80224c6 <sys_arch_mbox_tryfetch>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e1e:	d1da      	bne.n	8015dd6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	3310      	adds	r3, #16
 8015e24:	4618      	mov	r0, r3
 8015e26:	f00c faf1 	bl	802240c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	3310      	adds	r3, #16
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f00c fb71 	bl	8022516 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	3314      	adds	r3, #20
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f00c fb5b 	bl	80224f4 <sys_mbox_valid>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d034      	beq.n	8015eae <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015e44:	e01d      	b.n	8015e82 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	f107 020e 	add.w	r2, r7, #14
 8015e4c:	4611      	mov	r1, r2
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7ff facc 	bl	80153ec <lwip_netconn_is_err_msg>
 8015e54:	4603      	mov	r3, r0
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d113      	bne.n	8015e82 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8015e5a:	693b      	ldr	r3, [r7, #16]
 8015e5c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8015e5e:	6978      	ldr	r0, [r7, #20]
 8015e60:	f7ff ffac 	bl	8015dbc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d007      	beq.n	8015e7c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	4618      	mov	r0, r3
 8015e72:	f003 fc95 	bl	80197a0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8015e76:	697b      	ldr	r3, [r7, #20]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8015e7c:	6978      	ldr	r0, [r7, #20]
 8015e7e:	f7ff ff53 	bl	8015d28 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	3314      	adds	r3, #20
 8015e86:	f107 0210 	add.w	r2, r7, #16
 8015e8a:	4611      	mov	r1, r2
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f00c fb1a 	bl	80224c6 <sys_arch_mbox_tryfetch>
 8015e92:	4603      	mov	r3, r0
 8015e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e98:	d1d5      	bne.n	8015e46 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	3314      	adds	r3, #20
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f00c fab4 	bl	802240c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	3314      	adds	r3, #20
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f00c fb34 	bl	8022516 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8015eae:	bf00      	nop
 8015eb0:	3718      	adds	r7, #24
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
	...

08015eb8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b086      	sub	sp, #24
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	460b      	mov	r3, r1
 8015ec2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d106      	bne.n	8015edc <lwip_netconn_do_close_internal+0x24>
 8015ece:	4b87      	ldr	r3, [pc, #540]	; (80160ec <lwip_netconn_do_close_internal+0x234>)
 8015ed0:	f240 32a2 	movw	r2, #930	; 0x3a2
 8015ed4:	4986      	ldr	r1, [pc, #536]	; (80160f0 <lwip_netconn_do_close_internal+0x238>)
 8015ed6:	4887      	ldr	r0, [pc, #540]	; (80160f4 <lwip_netconn_do_close_internal+0x23c>)
 8015ed8:	f00c ff8e 	bl	8022df8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ee4:	2b10      	cmp	r3, #16
 8015ee6:	d006      	beq.n	8015ef6 <lwip_netconn_do_close_internal+0x3e>
 8015ee8:	4b80      	ldr	r3, [pc, #512]	; (80160ec <lwip_netconn_do_close_internal+0x234>)
 8015eea:	f240 32a3 	movw	r2, #931	; 0x3a3
 8015eee:	4982      	ldr	r1, [pc, #520]	; (80160f8 <lwip_netconn_do_close_internal+0x240>)
 8015ef0:	4880      	ldr	r0, [pc, #512]	; (80160f4 <lwip_netconn_do_close_internal+0x23c>)
 8015ef2:	f00c ff81 	bl	8022df8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	785b      	ldrb	r3, [r3, #1]
 8015efa:	2b04      	cmp	r3, #4
 8015efc:	d006      	beq.n	8015f0c <lwip_netconn_do_close_internal+0x54>
 8015efe:	4b7b      	ldr	r3, [pc, #492]	; (80160ec <lwip_netconn_do_close_internal+0x234>)
 8015f00:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8015f04:	497d      	ldr	r1, [pc, #500]	; (80160fc <lwip_netconn_do_close_internal+0x244>)
 8015f06:	487b      	ldr	r0, [pc, #492]	; (80160f4 <lwip_netconn_do_close_internal+0x23c>)
 8015f08:	f00c ff76 	bl	8022df8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d106      	bne.n	8015f22 <lwip_netconn_do_close_internal+0x6a>
 8015f14:	4b75      	ldr	r3, [pc, #468]	; (80160ec <lwip_netconn_do_close_internal+0x234>)
 8015f16:	f240 32a5 	movw	r2, #933	; 0x3a5
 8015f1a:	4979      	ldr	r1, [pc, #484]	; (8016100 <lwip_netconn_do_close_internal+0x248>)
 8015f1c:	4875      	ldr	r0, [pc, #468]	; (80160f4 <lwip_netconn_do_close_internal+0x23c>)
 8015f1e:	f00c ff6b 	bl	8022df8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6a1b      	ldr	r3, [r3, #32]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d106      	bne.n	8015f38 <lwip_netconn_do_close_internal+0x80>
 8015f2a:	4b70      	ldr	r3, [pc, #448]	; (80160ec <lwip_netconn_do_close_internal+0x234>)
 8015f2c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015f30:	4974      	ldr	r1, [pc, #464]	; (8016104 <lwip_netconn_do_close_internal+0x24c>)
 8015f32:	4870      	ldr	r0, [pc, #448]	; (80160f4 <lwip_netconn_do_close_internal+0x23c>)
 8015f34:	f00c ff60 	bl	8022df8 <iprintf>

  tpcb = conn->pcb.tcp;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6a1b      	ldr	r3, [r3, #32]
 8015f42:	7a1b      	ldrb	r3, [r3, #8]
 8015f44:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8015f46:	7bfb      	ldrb	r3, [r7, #15]
 8015f48:	f003 0301 	and.w	r3, r3, #1
 8015f4c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8015f4e:	7bfb      	ldrb	r3, [r7, #15]
 8015f50:	f003 0302 	and.w	r3, r3, #2
 8015f54:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8015f56:	7bfb      	ldrb	r3, [r7, #15]
 8015f58:	2b03      	cmp	r3, #3
 8015f5a:	d102      	bne.n	8015f62 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	75bb      	strb	r3, [r7, #22]
 8015f60:	e01f      	b.n	8015fa2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8015f62:	7bbb      	ldrb	r3, [r7, #14]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00e      	beq.n	8015f86 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8015f6c:	2b05      	cmp	r3, #5
 8015f6e:	d007      	beq.n	8015f80 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8015f70:	693b      	ldr	r3, [r7, #16]
 8015f72:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8015f74:	2b06      	cmp	r3, #6
 8015f76:	d003      	beq.n	8015f80 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8015f78:	693b      	ldr	r3, [r7, #16]
 8015f7a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8015f7c:	2b08      	cmp	r3, #8
 8015f7e:	d102      	bne.n	8015f86 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8015f80:	2301      	movs	r3, #1
 8015f82:	75bb      	strb	r3, [r7, #22]
 8015f84:	e00d      	b.n	8015fa2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8015f86:	7b7b      	ldrb	r3, [r7, #13]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d008      	beq.n	8015f9e <lwip_netconn_do_close_internal+0xe6>
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	8b5b      	ldrh	r3, [r3, #26]
 8015f90:	f003 0310 	and.w	r3, r3, #16
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d002      	beq.n	8015f9e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8015f98:	2301      	movs	r3, #1
 8015f9a:	75bb      	strb	r3, [r7, #22]
 8015f9c:	e001      	b.n	8015fa2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8015fa2:	7dbb      	ldrb	r3, [r7, #22]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d003      	beq.n	8015fb0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8015fa8:	2100      	movs	r1, #0
 8015faa:	6938      	ldr	r0, [r7, #16]
 8015fac:	f004 fd9e 	bl	801aaec <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	7d1b      	ldrb	r3, [r3, #20]
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d104      	bne.n	8015fc2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8015fb8:	2100      	movs	r1, #0
 8015fba:	6938      	ldr	r0, [r7, #16]
 8015fbc:	f004 fe0e 	bl	801abdc <tcp_accept>
 8015fc0:	e01d      	b.n	8015ffe <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8015fc2:	7bbb      	ldrb	r3, [r7, #14]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d007      	beq.n	8015fd8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8015fc8:	2100      	movs	r1, #0
 8015fca:	6938      	ldr	r0, [r7, #16]
 8015fcc:	f004 fda0 	bl	801ab10 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8015fd0:	2100      	movs	r1, #0
 8015fd2:	6938      	ldr	r0, [r7, #16]
 8015fd4:	f004 fe02 	bl	801abdc <tcp_accept>
    }
    if (shut_tx) {
 8015fd8:	7b7b      	ldrb	r3, [r7, #13]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d003      	beq.n	8015fe6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8015fde:	2100      	movs	r1, #0
 8015fe0:	6938      	ldr	r0, [r7, #16]
 8015fe2:	f004 fdb7 	bl	801ab54 <tcp_sent>
    }
    if (shut_close) {
 8015fe6:	7dbb      	ldrb	r3, [r7, #22]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d008      	beq.n	8015ffe <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8015fec:	2200      	movs	r2, #0
 8015fee:	2100      	movs	r1, #0
 8015ff0:	6938      	ldr	r0, [r7, #16]
 8015ff2:	f004 fe0b 	bl	801ac0c <tcp_poll>
      tcp_err(tpcb, NULL);
 8015ff6:	2100      	movs	r1, #0
 8015ff8:	6938      	ldr	r0, [r7, #16]
 8015ffa:	f004 fdcd 	bl	801ab98 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8015ffe:	7dbb      	ldrb	r3, [r7, #22]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d005      	beq.n	8016010 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8016004:	6938      	ldr	r0, [r7, #16]
 8016006:	f003 fa85 	bl	8019514 <tcp_close>
 801600a:	4603      	mov	r3, r0
 801600c:	75fb      	strb	r3, [r7, #23]
 801600e:	e007      	b.n	8016020 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8016010:	7bbb      	ldrb	r3, [r7, #14]
 8016012:	7b7a      	ldrb	r2, [r7, #13]
 8016014:	4619      	mov	r1, r3
 8016016:	6938      	ldr	r0, [r7, #16]
 8016018:	f003 faa8 	bl	801956c <tcp_shutdown>
 801601c:	4603      	mov	r3, r0
 801601e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8016020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d102      	bne.n	801602e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8016028:	2301      	movs	r3, #1
 801602a:	757b      	strb	r3, [r7, #21]
 801602c:	e016      	b.n	801605c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801602e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016036:	d10f      	bne.n	8016058 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6a1b      	ldr	r3, [r3, #32]
 801603c:	7a5b      	ldrb	r3, [r3, #9]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d10c      	bne.n	801605c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8016042:	2301      	movs	r3, #1
 8016044:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8016046:	7dbb      	ldrb	r3, [r7, #22]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d007      	beq.n	801605c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801604c:	6938      	ldr	r0, [r7, #16]
 801604e:	f003 fba7 	bl	80197a0 <tcp_abort>
          err = ERR_OK;
 8016052:	2300      	movs	r3, #0
 8016054:	75fb      	strb	r3, [r7, #23]
 8016056:	e001      	b.n	801605c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8016058:	2301      	movs	r3, #1
 801605a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 801605c:	7d7b      	ldrb	r3, [r7, #21]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d052      	beq.n	8016108 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6a1b      	ldr	r3, [r3, #32]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	330c      	adds	r3, #12
 801606a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6a1b      	ldr	r3, [r3, #32]
 8016070:	7dfa      	ldrb	r2, [r7, #23]
 8016072:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2200      	movs	r2, #0
 8016078:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2200      	movs	r2, #0
 801607e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d129      	bne.n	80160dc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8016088:	7dbb      	ldrb	r3, [r7, #22]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d00c      	beq.n	80160a8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2200      	movs	r2, #0
 8016092:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016098:	2b00      	cmp	r3, #0
 801609a:	d005      	beq.n	80160a8 <lwip_netconn_do_close_internal+0x1f0>
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160a0:	2200      	movs	r2, #0
 80160a2:	2104      	movs	r1, #4
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	4798      	blx	r3
      }
      if (shut_rx) {
 80160a8:	7bbb      	ldrb	r3, [r7, #14]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d009      	beq.n	80160c2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d005      	beq.n	80160c2 <lwip_netconn_do_close_internal+0x20a>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ba:	2200      	movs	r2, #0
 80160bc:	2100      	movs	r1, #0
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	4798      	blx	r3
      }
      if (shut_tx) {
 80160c2:	7b7b      	ldrb	r3, [r7, #13]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d009      	beq.n	80160dc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d005      	beq.n	80160dc <lwip_netconn_do_close_internal+0x224>
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160d4:	2200      	movs	r2, #0
 80160d6:	2102      	movs	r1, #2
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80160dc:	78fb      	ldrb	r3, [r7, #3]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d002      	beq.n	80160e8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80160e2:	68b8      	ldr	r0, [r7, #8]
 80160e4:	f00c fa7a 	bl	80225dc <sys_sem_signal>
    }
    return ERR_OK;
 80160e8:	2300      	movs	r3, #0
 80160ea:	e03c      	b.n	8016166 <lwip_netconn_do_close_internal+0x2ae>
 80160ec:	080246f4 	.word	0x080246f4
 80160f0:	080249c8 	.word	0x080249c8
 80160f4:	08024738 	.word	0x08024738
 80160f8:	080249d8 	.word	0x080249d8
 80160fc:	080249f8 	.word	0x080249f8
 8016100:	08024a1c 	.word	0x08024a1c
 8016104:	0802485c 	.word	0x0802485c
  }
  if (!close_finished) {
 8016108:	7d7b      	ldrb	r3, [r7, #21]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d11e      	bne.n	801614c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801610e:	693b      	ldr	r3, [r7, #16]
 8016110:	7d1b      	ldrb	r3, [r3, #20]
 8016112:	2b01      	cmp	r3, #1
 8016114:	d106      	bne.n	8016124 <lwip_netconn_do_close_internal+0x26c>
 8016116:	4b16      	ldr	r3, [pc, #88]	; (8016170 <lwip_netconn_do_close_internal+0x2b8>)
 8016118:	f240 4241 	movw	r2, #1089	; 0x441
 801611c:	4915      	ldr	r1, [pc, #84]	; (8016174 <lwip_netconn_do_close_internal+0x2bc>)
 801611e:	4816      	ldr	r0, [pc, #88]	; (8016178 <lwip_netconn_do_close_internal+0x2c0>)
 8016120:	f00c fe6a 	bl	8022df8 <iprintf>
    if (shut_tx) {
 8016124:	7b7b      	ldrb	r3, [r7, #13]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d003      	beq.n	8016132 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801612a:	4914      	ldr	r1, [pc, #80]	; (801617c <lwip_netconn_do_close_internal+0x2c4>)
 801612c:	6938      	ldr	r0, [r7, #16]
 801612e:	f004 fd11 	bl	801ab54 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8016132:	2201      	movs	r2, #1
 8016134:	4912      	ldr	r1, [pc, #72]	; (8016180 <lwip_netconn_do_close_internal+0x2c8>)
 8016136:	6938      	ldr	r0, [r7, #16]
 8016138:	f004 fd68 	bl	801ac0c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801613c:	4911      	ldr	r1, [pc, #68]	; (8016184 <lwip_netconn_do_close_internal+0x2cc>)
 801613e:	6938      	ldr	r0, [r7, #16]
 8016140:	f004 fd2a 	bl	801ab98 <tcp_err>
    tcp_arg(tpcb, conn);
 8016144:	6879      	ldr	r1, [r7, #4]
 8016146:	6938      	ldr	r0, [r7, #16]
 8016148:	f004 fcd0 	bl	801aaec <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 801614c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d106      	bne.n	8016162 <lwip_netconn_do_close_internal+0x2aa>
 8016154:	4b06      	ldr	r3, [pc, #24]	; (8016170 <lwip_netconn_do_close_internal+0x2b8>)
 8016156:	f240 424d 	movw	r2, #1101	; 0x44d
 801615a:	490b      	ldr	r1, [pc, #44]	; (8016188 <lwip_netconn_do_close_internal+0x2d0>)
 801615c:	4806      	ldr	r0, [pc, #24]	; (8016178 <lwip_netconn_do_close_internal+0x2c0>)
 801615e:	f00c fe4b 	bl	8022df8 <iprintf>
  return err;
 8016162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016166:	4618      	mov	r0, r3
 8016168:	3718      	adds	r7, #24
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}
 801616e:	bf00      	nop
 8016170:	080246f4 	.word	0x080246f4
 8016174:	08024a30 	.word	0x08024a30
 8016178:	08024738 	.word	0x08024738
 801617c:	08015731 	.word	0x08015731
 8016180:	08015669 	.word	0x08015669
 8016184:	080157d9 	.word	0x080157d9
 8016188:	08024a54 	.word	0x08024a54

0801618c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	785b      	ldrb	r3, [r3, #1]
 801619e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80161a0:	7afb      	ldrb	r3, [r7, #11]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d00d      	beq.n	80161c2 <lwip_netconn_do_delconn+0x36>
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161b0:	2b10      	cmp	r3, #16
 80161b2:	d006      	beq.n	80161c2 <lwip_netconn_do_delconn+0x36>
 80161b4:	4b60      	ldr	r3, [pc, #384]	; (8016338 <lwip_netconn_do_delconn+0x1ac>)
 80161b6:	f240 425e 	movw	r2, #1118	; 0x45e
 80161ba:	4960      	ldr	r1, [pc, #384]	; (801633c <lwip_netconn_do_delconn+0x1b0>)
 80161bc:	4860      	ldr	r0, [pc, #384]	; (8016340 <lwip_netconn_do_delconn+0x1b4>)
 80161be:	f00c fe1b 	bl	8022df8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80161c2:	7afb      	ldrb	r3, [r7, #11]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d005      	beq.n	80161d4 <lwip_netconn_do_delconn+0x48>
 80161c8:	7afb      	ldrb	r3, [r7, #11]
 80161ca:	2b02      	cmp	r3, #2
 80161cc:	d002      	beq.n	80161d4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80161ce:	7afb      	ldrb	r3, [r7, #11]
 80161d0:	2b03      	cmp	r3, #3
 80161d2:	d109      	bne.n	80161e8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80161d4:	7afb      	ldrb	r3, [r7, #11]
 80161d6:	2b03      	cmp	r3, #3
 80161d8:	d10a      	bne.n	80161f0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	7f1b      	ldrb	r3, [r3, #28]
 80161e0:	f003 0304 	and.w	r3, r3, #4
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d103      	bne.n	80161f0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	22fb      	movs	r2, #251	; 0xfb
 80161ec:	711a      	strb	r2, [r3, #4]
 80161ee:	e097      	b.n	8016320 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80161f0:	7afb      	ldrb	r3, [r7, #11]
 80161f2:	2b03      	cmp	r3, #3
 80161f4:	d10d      	bne.n	8016212 <lwip_netconn_do_delconn+0x86>
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	7f1b      	ldrb	r3, [r3, #28]
 80161fc:	f003 0304 	and.w	r3, r3, #4
 8016200:	2b00      	cmp	r3, #0
 8016202:	d106      	bne.n	8016212 <lwip_netconn_do_delconn+0x86>
 8016204:	4b4c      	ldr	r3, [pc, #304]	; (8016338 <lwip_netconn_do_delconn+0x1ac>)
 8016206:	f240 427a 	movw	r2, #1146	; 0x47a
 801620a:	494e      	ldr	r1, [pc, #312]	; (8016344 <lwip_netconn_do_delconn+0x1b8>)
 801620c:	484c      	ldr	r0, [pc, #304]	; (8016340 <lwip_netconn_do_delconn+0x1b4>)
 801620e:	f00c fdf3 	bl	8022df8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	2200      	movs	r2, #0
 8016216:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	4618      	mov	r0, r3
 801621e:	f7ff fdcd 	bl	8015dbc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d05f      	beq.n	80162ec <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016236:	2b10      	cmp	r3, #16
 8016238:	d00d      	beq.n	8016256 <lwip_netconn_do_delconn+0xca>
 801623a:	2b20      	cmp	r3, #32
 801623c:	d151      	bne.n	80162e2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	2200      	movs	r2, #0
 8016246:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	4618      	mov	r0, r3
 8016250:	f009 fd40 	bl	801fcd4 <udp_remove>
          break;
 8016254:	e046      	b.n	80162e4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	6a1b      	ldr	r3, [r3, #32]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d006      	beq.n	801626e <lwip_netconn_do_delconn+0xe2>
 8016260:	4b35      	ldr	r3, [pc, #212]	; (8016338 <lwip_netconn_do_delconn+0x1ac>)
 8016262:	f240 4294 	movw	r2, #1172	; 0x494
 8016266:	4938      	ldr	r1, [pc, #224]	; (8016348 <lwip_netconn_do_delconn+0x1bc>)
 8016268:	4835      	ldr	r0, [pc, #212]	; (8016340 <lwip_netconn_do_delconn+0x1b4>)
 801626a:	f00c fdc5 	bl	8022df8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2204      	movs	r2, #4
 8016274:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	2203      	movs	r2, #3
 801627a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	68fa      	ldr	r2, [r7, #12]
 8016282:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2100      	movs	r1, #0
 801628a:	4618      	mov	r0, r3
 801628c:	f7ff fe14 	bl	8015eb8 <lwip_netconn_do_close_internal>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	d04b      	beq.n	801632e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	785b      	ldrb	r3, [r3, #1]
 801629c:	2b04      	cmp	r3, #4
 801629e:	d006      	beq.n	80162ae <lwip_netconn_do_delconn+0x122>
 80162a0:	4b25      	ldr	r3, [pc, #148]	; (8016338 <lwip_netconn_do_delconn+0x1ac>)
 80162a2:	f240 429a 	movw	r2, #1178	; 0x49a
 80162a6:	4929      	ldr	r1, [pc, #164]	; (801634c <lwip_netconn_do_delconn+0x1c0>)
 80162a8:	4825      	ldr	r0, [pc, #148]	; (8016340 <lwip_netconn_do_delconn+0x1b4>)
 80162aa:	f00c fda5 	bl	8022df8 <iprintf>
            UNLOCK_TCPIP_CORE();
 80162ae:	4828      	ldr	r0, [pc, #160]	; (8016350 <lwip_netconn_do_delconn+0x1c4>)
 80162b0:	f00c f9fd 	bl	80226ae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	330c      	adds	r3, #12
 80162ba:	2100      	movs	r1, #0
 80162bc:	4618      	mov	r0, r3
 80162be:	f00c f95c 	bl	802257a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80162c2:	4823      	ldr	r0, [pc, #140]	; (8016350 <lwip_netconn_do_delconn+0x1c4>)
 80162c4:	f00c f9e4 	bl	8022690 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	785b      	ldrb	r3, [r3, #1]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d02d      	beq.n	801632e <lwip_netconn_do_delconn+0x1a2>
 80162d2:	4b19      	ldr	r3, [pc, #100]	; (8016338 <lwip_netconn_do_delconn+0x1ac>)
 80162d4:	f240 429e 	movw	r2, #1182	; 0x49e
 80162d8:	491c      	ldr	r1, [pc, #112]	; (801634c <lwip_netconn_do_delconn+0x1c0>)
 80162da:	4819      	ldr	r0, [pc, #100]	; (8016340 <lwip_netconn_do_delconn+0x1b4>)
 80162dc:	f00c fd8c 	bl	8022df8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80162e0:	e025      	b.n	801632e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80162e2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2200      	movs	r2, #0
 80162ea:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d007      	beq.n	8016306 <lwip_netconn_do_delconn+0x17a>
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162fc:	68fa      	ldr	r2, [r7, #12]
 80162fe:	6810      	ldr	r0, [r2, #0]
 8016300:	2200      	movs	r2, #0
 8016302:	2100      	movs	r1, #0
 8016304:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801630c:	2b00      	cmp	r3, #0
 801630e:	d007      	beq.n	8016320 <lwip_netconn_do_delconn+0x194>
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016316:	68fa      	ldr	r2, [r7, #12]
 8016318:	6810      	ldr	r0, [r2, #0]
 801631a:	2200      	movs	r2, #0
 801631c:	2102      	movs	r1, #2
 801631e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	330c      	adds	r3, #12
 8016326:	4618      	mov	r0, r3
 8016328:	f00c f972 	bl	8022610 <sys_sem_valid>
 801632c:	e000      	b.n	8016330 <lwip_netconn_do_delconn+0x1a4>
          return;
 801632e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8016330:	3710      	adds	r7, #16
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop
 8016338:	080246f4 	.word	0x080246f4
 801633c:	08024a64 	.word	0x08024a64
 8016340:	08024738 	.word	0x08024738
 8016344:	08024a78 	.word	0x08024a78
 8016348:	08024a98 	.word	0x08024a98
 801634c:	08024ab4 	.word	0x08024ab4
 8016350:	2005eb90 	.word	0x2005eb90

08016354 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d025      	beq.n	80163b6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	781b      	ldrb	r3, [r3, #0]
 8016370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016374:	2b10      	cmp	r3, #16
 8016376:	d00e      	beq.n	8016396 <lwip_netconn_do_bind+0x42>
 8016378:	2b20      	cmp	r3, #32
 801637a:	d119      	bne.n	80163b0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	6858      	ldr	r0, [r3, #4]
 8016382:	68bb      	ldr	r3, [r7, #8]
 8016384:	6899      	ldr	r1, [r3, #8]
 8016386:	68bb      	ldr	r3, [r7, #8]
 8016388:	899b      	ldrh	r3, [r3, #12]
 801638a:	461a      	mov	r2, r3
 801638c:	f009 fb8c 	bl	801faa8 <udp_bind>
 8016390:	4603      	mov	r3, r0
 8016392:	73fb      	strb	r3, [r7, #15]
        break;
 8016394:	e011      	b.n	80163ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	6858      	ldr	r0, [r3, #4]
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	6899      	ldr	r1, [r3, #8]
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	899b      	ldrh	r3, [r3, #12]
 80163a4:	461a      	mov	r2, r3
 80163a6:	f003 fa07 	bl	80197b8 <tcp_bind>
 80163aa:	4603      	mov	r3, r0
 80163ac:	73fb      	strb	r3, [r7, #15]
        break;
 80163ae:	e004      	b.n	80163ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80163b0:	23fa      	movs	r3, #250	; 0xfa
 80163b2:	73fb      	strb	r3, [r7, #15]
        break;
 80163b4:	e001      	b.n	80163ba <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80163b6:	23fa      	movs	r3, #250	; 0xfa
 80163b8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	7bfa      	ldrb	r2, [r7, #15]
 80163be:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80163c0:	bf00      	nop
 80163c2:	3710      	adds	r7, #16
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b088      	sub	sp, #32
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	60b9      	str	r1, [r7, #8]
 80163d2:	4613      	mov	r3, r2
 80163d4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80163d6:	2300      	movs	r3, #0
 80163d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d102      	bne.n	80163ea <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80163e4:	f06f 0305 	mvn.w	r3, #5
 80163e8:	e070      	b.n	80164cc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	785b      	ldrb	r3, [r3, #1]
 80163ee:	2b03      	cmp	r3, #3
 80163f0:	d006      	beq.n	8016400 <lwip_netconn_do_connected+0x38>
 80163f2:	4b38      	ldr	r3, [pc, #224]	; (80164d4 <lwip_netconn_do_connected+0x10c>)
 80163f4:	f240 5223 	movw	r2, #1315	; 0x523
 80163f8:	4937      	ldr	r1, [pc, #220]	; (80164d8 <lwip_netconn_do_connected+0x110>)
 80163fa:	4838      	ldr	r0, [pc, #224]	; (80164dc <lwip_netconn_do_connected+0x114>)
 80163fc:	f00c fcfc 	bl	8022df8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	6a1b      	ldr	r3, [r3, #32]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d10c      	bne.n	8016422 <lwip_netconn_do_connected+0x5a>
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	7f1b      	ldrb	r3, [r3, #28]
 801640c:	f003 0304 	and.w	r3, r3, #4
 8016410:	2b00      	cmp	r3, #0
 8016412:	d106      	bne.n	8016422 <lwip_netconn_do_connected+0x5a>
 8016414:	4b2f      	ldr	r3, [pc, #188]	; (80164d4 <lwip_netconn_do_connected+0x10c>)
 8016416:	f240 5224 	movw	r2, #1316	; 0x524
 801641a:	4931      	ldr	r1, [pc, #196]	; (80164e0 <lwip_netconn_do_connected+0x118>)
 801641c:	482f      	ldr	r0, [pc, #188]	; (80164dc <lwip_netconn_do_connected+0x114>)
 801641e:	f00c fceb 	bl	8022df8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	6a1b      	ldr	r3, [r3, #32]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d008      	beq.n	801643c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801642a:	69bb      	ldr	r3, [r7, #24]
 801642c:	6a1b      	ldr	r3, [r3, #32]
 801642e:	79fa      	ldrb	r2, [r7, #7]
 8016430:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016432:	69bb      	ldr	r3, [r7, #24]
 8016434:	6a1b      	ldr	r3, [r3, #32]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	330c      	adds	r3, #12
 801643a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 801643c:	69bb      	ldr	r3, [r7, #24]
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016444:	2b10      	cmp	r3, #16
 8016446:	d106      	bne.n	8016456 <lwip_netconn_do_connected+0x8e>
 8016448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d102      	bne.n	8016456 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8016450:	69b8      	ldr	r0, [r7, #24]
 8016452:	f7ff fa97 	bl	8015984 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8016456:	69bb      	ldr	r3, [r7, #24]
 8016458:	7f1b      	ldrb	r3, [r3, #28]
 801645a:	f003 0304 	and.w	r3, r3, #4
 801645e:	2b00      	cmp	r3, #0
 8016460:	bf0c      	ite	eq
 8016462:	2301      	moveq	r3, #1
 8016464:	2300      	movne	r3, #0
 8016466:	b2db      	uxtb	r3, r3
 8016468:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	7f1b      	ldrb	r3, [r3, #28]
 801646e:	f023 0304 	bic.w	r3, r3, #4
 8016472:	b2da      	uxtb	r2, r3
 8016474:	69bb      	ldr	r3, [r7, #24]
 8016476:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d002      	beq.n	8016484 <lwip_netconn_do_connected+0xbc>
 801647e:	69fb      	ldr	r3, [r7, #28]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d10c      	bne.n	801649e <lwip_netconn_do_connected+0xd6>
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d102      	bne.n	8016490 <lwip_netconn_do_connected+0xc8>
 801648a:	69fb      	ldr	r3, [r7, #28]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d006      	beq.n	801649e <lwip_netconn_do_connected+0xd6>
 8016490:	4b10      	ldr	r3, [pc, #64]	; (80164d4 <lwip_netconn_do_connected+0x10c>)
 8016492:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8016496:	4913      	ldr	r1, [pc, #76]	; (80164e4 <lwip_netconn_do_connected+0x11c>)
 8016498:	4810      	ldr	r0, [pc, #64]	; (80164dc <lwip_netconn_do_connected+0x114>)
 801649a:	f00c fcad 	bl	8022df8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 801649e:	69bb      	ldr	r3, [r7, #24]
 80164a0:	2200      	movs	r2, #0
 80164a2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80164a4:	69bb      	ldr	r3, [r7, #24]
 80164a6:	2200      	movs	r2, #0
 80164a8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80164aa:	69bb      	ldr	r3, [r7, #24]
 80164ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d005      	beq.n	80164be <lwip_netconn_do_connected+0xf6>
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164b6:	2200      	movs	r2, #0
 80164b8:	2102      	movs	r1, #2
 80164ba:	69b8      	ldr	r0, [r7, #24]
 80164bc:	4798      	blx	r3

  if (was_blocking) {
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d002      	beq.n	80164ca <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80164c4:	69f8      	ldr	r0, [r7, #28]
 80164c6:	f00c f889 	bl	80225dc <sys_sem_signal>
  }
  return ERR_OK;
 80164ca:	2300      	movs	r3, #0
}
 80164cc:	4618      	mov	r0, r3
 80164ce:	3720      	adds	r7, #32
 80164d0:	46bd      	mov	sp, r7
 80164d2:	bd80      	pop	{r7, pc}
 80164d4:	080246f4 	.word	0x080246f4
 80164d8:	08024abc 	.word	0x08024abc
 80164dc:	08024738 	.word	0x08024738
 80164e0:	08024adc 	.word	0x08024adc
 80164e4:	08024b1c 	.word	0x08024b1c

080164e8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b086      	sub	sp, #24
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 80164f4:	693b      	ldr	r3, [r7, #16]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	685b      	ldr	r3, [r3, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d102      	bne.n	8016504 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 80164fe:	23f1      	movs	r3, #241	; 0xf1
 8016500:	75fb      	strb	r3, [r7, #23]
 8016502:	e09b      	b.n	801663c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016504:	693b      	ldr	r3, [r7, #16]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	781b      	ldrb	r3, [r3, #0]
 801650a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801650e:	2b10      	cmp	r3, #16
 8016510:	d00f      	beq.n	8016532 <lwip_netconn_do_connect+0x4a>
 8016512:	2b20      	cmp	r3, #32
 8016514:	f040 8087 	bne.w	8016626 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	6858      	ldr	r0, [r3, #4]
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	6899      	ldr	r1, [r3, #8]
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	899b      	ldrh	r3, [r3, #12]
 8016526:	461a      	mov	r2, r3
 8016528:	f009 fb46 	bl	801fbb8 <udp_connect>
 801652c:	4603      	mov	r3, r0
 801652e:	75fb      	strb	r3, [r7, #23]
        break;
 8016530:	e084      	b.n	801663c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	785b      	ldrb	r3, [r3, #1]
 8016538:	2b03      	cmp	r3, #3
 801653a:	d102      	bne.n	8016542 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 801653c:	23f7      	movs	r3, #247	; 0xf7
 801653e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8016540:	e07b      	b.n	801663a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	785b      	ldrb	r3, [r3, #1]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d002      	beq.n	8016552 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 801654c:	23f6      	movs	r3, #246	; 0xf6
 801654e:	75fb      	strb	r3, [r7, #23]
        break;
 8016550:	e073      	b.n	801663a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	4618      	mov	r0, r3
 8016558:	f7ff fa14 	bl	8015984 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 801655c:	693b      	ldr	r3, [r7, #16]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	6858      	ldr	r0, [r3, #4]
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	6899      	ldr	r1, [r3, #8]
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	899a      	ldrh	r2, [r3, #12]
 801656a:	4b38      	ldr	r3, [pc, #224]	; (801664c <lwip_netconn_do_connect+0x164>)
 801656c:	f003 fb76 	bl	8019c5c <tcp_connect>
 8016570:	4603      	mov	r3, r0
 8016572:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8016574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d15e      	bne.n	801663a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	7f1b      	ldrb	r3, [r3, #28]
 8016582:	f003 0302 	and.w	r3, r3, #2
 8016586:	2b00      	cmp	r3, #0
 8016588:	bf14      	ite	ne
 801658a:	2301      	movne	r3, #1
 801658c:	2300      	moveq	r3, #0
 801658e:	b2db      	uxtb	r3, r3
 8016590:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8016592:	693b      	ldr	r3, [r7, #16]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2203      	movs	r2, #3
 8016598:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801659a:	7bfb      	ldrb	r3, [r7, #15]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d009      	beq.n	80165b4 <lwip_netconn_do_connect+0xcc>
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	7f1a      	ldrb	r2, [r3, #28]
 80165a6:	693b      	ldr	r3, [r7, #16]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f042 0204 	orr.w	r2, r2, #4
 80165ae:	b2d2      	uxtb	r2, r2
 80165b0:	771a      	strb	r2, [r3, #28]
 80165b2:	e008      	b.n	80165c6 <lwip_netconn_do_connect+0xde>
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	7f1a      	ldrb	r2, [r3, #28]
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	f022 0204 	bic.w	r2, r2, #4
 80165c2:	b2d2      	uxtb	r2, r2
 80165c4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80165c6:	7bfb      	ldrb	r3, [r7, #15]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d002      	beq.n	80165d2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80165cc:	23fb      	movs	r3, #251	; 0xfb
 80165ce:	75fb      	strb	r3, [r7, #23]
        break;
 80165d0:	e033      	b.n	801663a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80165d2:	693b      	ldr	r3, [r7, #16]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	693a      	ldr	r2, [r7, #16]
 80165d8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	785b      	ldrb	r3, [r3, #1]
 80165e0:	2b03      	cmp	r3, #3
 80165e2:	d006      	beq.n	80165f2 <lwip_netconn_do_connect+0x10a>
 80165e4:	4b1a      	ldr	r3, [pc, #104]	; (8016650 <lwip_netconn_do_connect+0x168>)
 80165e6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80165ea:	491a      	ldr	r1, [pc, #104]	; (8016654 <lwip_netconn_do_connect+0x16c>)
 80165ec:	481a      	ldr	r0, [pc, #104]	; (8016658 <lwip_netconn_do_connect+0x170>)
 80165ee:	f00c fc03 	bl	8022df8 <iprintf>
              UNLOCK_TCPIP_CORE();
 80165f2:	481a      	ldr	r0, [pc, #104]	; (801665c <lwip_netconn_do_connect+0x174>)
 80165f4:	f00c f85b 	bl	80226ae <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80165f8:	693b      	ldr	r3, [r7, #16]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	330c      	adds	r3, #12
 80165fe:	2100      	movs	r1, #0
 8016600:	4618      	mov	r0, r3
 8016602:	f00b ffba 	bl	802257a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8016606:	4815      	ldr	r0, [pc, #84]	; (801665c <lwip_netconn_do_connect+0x174>)
 8016608:	f00c f842 	bl	8022690 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	785b      	ldrb	r3, [r3, #1]
 8016612:	2b03      	cmp	r3, #3
 8016614:	d116      	bne.n	8016644 <lwip_netconn_do_connect+0x15c>
 8016616:	4b0e      	ldr	r3, [pc, #56]	; (8016650 <lwip_netconn_do_connect+0x168>)
 8016618:	f240 5274 	movw	r2, #1396	; 0x574
 801661c:	490d      	ldr	r1, [pc, #52]	; (8016654 <lwip_netconn_do_connect+0x16c>)
 801661e:	480e      	ldr	r0, [pc, #56]	; (8016658 <lwip_netconn_do_connect+0x170>)
 8016620:	f00c fbea 	bl	8022df8 <iprintf>
              return;
 8016624:	e00e      	b.n	8016644 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8016626:	4b0a      	ldr	r3, [pc, #40]	; (8016650 <lwip_netconn_do_connect+0x168>)
 8016628:	f240 527d 	movw	r2, #1405	; 0x57d
 801662c:	490c      	ldr	r1, [pc, #48]	; (8016660 <lwip_netconn_do_connect+0x178>)
 801662e:	480a      	ldr	r0, [pc, #40]	; (8016658 <lwip_netconn_do_connect+0x170>)
 8016630:	f00c fbe2 	bl	8022df8 <iprintf>
 8016634:	23fa      	movs	r3, #250	; 0xfa
 8016636:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8016638:	e000      	b.n	801663c <lwip_netconn_do_connect+0x154>
        break;
 801663a:	bf00      	nop
    }
  }
  msg->err = err;
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	7dfa      	ldrb	r2, [r7, #23]
 8016640:	711a      	strb	r2, [r3, #4]
 8016642:	e000      	b.n	8016646 <lwip_netconn_do_connect+0x15e>
              return;
 8016644:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8016646:	3718      	adds	r7, #24
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	080163c9 	.word	0x080163c9
 8016650:	080246f4 	.word	0x080246f4
 8016654:	08024ab4 	.word	0x08024ab4
 8016658:	08024738 	.word	0x08024738
 801665c:	2005eb90 	.word	0x2005eb90
 8016660:	08024b3c 	.word	0x08024b3c

08016664 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b086      	sub	sp, #24
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	685b      	ldr	r3, [r3, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d07f      	beq.n	801677a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801667a:	697b      	ldr	r3, [r7, #20]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016684:	2b10      	cmp	r3, #16
 8016686:	d175      	bne.n	8016774 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	785b      	ldrb	r3, [r3, #1]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d165      	bne.n	801675e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	685b      	ldr	r3, [r3, #4]
 8016698:	7d1b      	ldrb	r3, [r3, #20]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d002      	beq.n	80166a4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 801669e:	23fa      	movs	r3, #250	; 0xfa
 80166a0:	72fb      	strb	r3, [r7, #11]
 80166a2:	e06c      	b.n	801677e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80166a4:	23ff      	movs	r3, #255	; 0xff
 80166a6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	685b      	ldr	r3, [r3, #4]
 80166ae:	f107 020b 	add.w	r2, r7, #11
 80166b2:	7cf9      	ldrb	r1, [r7, #19]
 80166b4:	4618      	mov	r0, r3
 80166b6:	f003 f937 	bl	8019928 <tcp_listen_with_backlog_and_err>
 80166ba:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d05d      	beq.n	801677e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80166c2:	697b      	ldr	r3, [r7, #20]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	3310      	adds	r3, #16
 80166c8:	4618      	mov	r0, r3
 80166ca:	f00b ff13 	bl	80224f4 <sys_mbox_valid>
 80166ce:	4603      	mov	r3, r0
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d00b      	beq.n	80166ec <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	3310      	adds	r3, #16
 80166da:	4618      	mov	r0, r3
 80166dc:	f00b fe96 	bl	802240c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80166e0:	697b      	ldr	r3, [r7, #20]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	3310      	adds	r3, #16
 80166e6:	4618      	mov	r0, r3
 80166e8:	f00b ff15 	bl	8022516 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80166ec:	2300      	movs	r3, #0
 80166ee:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	3314      	adds	r3, #20
 80166f6:	4618      	mov	r0, r3
 80166f8:	f00b fefc 	bl	80224f4 <sys_mbox_valid>
 80166fc:	4603      	mov	r3, r0
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d108      	bne.n	8016714 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8016702:	697b      	ldr	r3, [r7, #20]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	3314      	adds	r3, #20
 8016708:	2106      	movs	r1, #6
 801670a:	4618      	mov	r0, r3
 801670c:	f00b fe64 	bl	80223d8 <sys_mbox_new>
 8016710:	4603      	mov	r3, r0
 8016712:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8016714:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d118      	bne.n	801674e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2202      	movs	r2, #2
 8016722:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8016724:	697b      	ldr	r3, [r7, #20]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	68fa      	ldr	r2, [r7, #12]
 801672a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	685a      	ldr	r2, [r3, #4]
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	4619      	mov	r1, r3
 8016738:	4610      	mov	r0, r2
 801673a:	f004 f9d7 	bl	801aaec <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801673e:	697b      	ldr	r3, [r7, #20]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	4912      	ldr	r1, [pc, #72]	; (8016790 <lwip_netconn_do_listen+0x12c>)
 8016746:	4618      	mov	r0, r3
 8016748:	f004 fa48 	bl	801abdc <tcp_accept>
 801674c:	e017      	b.n	801677e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801674e:	68f8      	ldr	r0, [r7, #12]
 8016750:	f002 fee0 	bl	8019514 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8016754:	697b      	ldr	r3, [r7, #20]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2200      	movs	r2, #0
 801675a:	605a      	str	r2, [r3, #4]
 801675c:	e00f      	b.n	801677e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	785b      	ldrb	r3, [r3, #1]
 8016764:	2b02      	cmp	r3, #2
 8016766:	d102      	bne.n	801676e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8016768:	2300      	movs	r3, #0
 801676a:	72fb      	strb	r3, [r7, #11]
 801676c:	e007      	b.n	801677e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801676e:	23f5      	movs	r3, #245	; 0xf5
 8016770:	72fb      	strb	r3, [r7, #11]
 8016772:	e004      	b.n	801677e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8016774:	23f0      	movs	r3, #240	; 0xf0
 8016776:	72fb      	strb	r3, [r7, #11]
 8016778:	e001      	b.n	801677e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801677a:	23f5      	movs	r3, #245	; 0xf5
 801677c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801677e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016786:	bf00      	nop
 8016788:	3718      	adds	r7, #24
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}
 801678e:	bf00      	nop
 8016790:	080159d5 	.word	0x080159d5

08016794 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b086      	sub	sp, #24
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	2200      	movs	r2, #0
 80167a4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	685b      	ldr	r3, [r3, #4]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d022      	beq.n	80167f6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80167ba:	2b10      	cmp	r3, #16
 80167bc:	d11b      	bne.n	80167f6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80167be:	693b      	ldr	r3, [r7, #16]
 80167c0:	689b      	ldr	r3, [r3, #8]
 80167c2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80167ca:	d202      	bcs.n	80167d2 <lwip_netconn_do_recv+0x3e>
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	e001      	b.n	80167d6 <lwip_netconn_do_recv+0x42>
 80167d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167d6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	89fa      	ldrh	r2, [r7, #14]
 80167e0:	4611      	mov	r1, r2
 80167e2:	4618      	mov	r0, r3
 80167e4:	f003 f9a4 	bl	8019b30 <tcp_recved>
        remaining -= recved;
 80167e8:	89fb      	ldrh	r3, [r7, #14]
 80167ea:	697a      	ldr	r2, [r7, #20]
 80167ec:	1ad3      	subs	r3, r2, r3
 80167ee:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80167f0:	697b      	ldr	r3, [r7, #20]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d1e6      	bne.n	80167c4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80167f6:	bf00      	nop
 80167f8:	3718      	adds	r7, #24
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
	...

08016800 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b088      	sub	sp, #32
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
 8016808:	460b      	mov	r3, r1
 801680a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801680c:	2300      	movs	r3, #0
 801680e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d106      	bne.n	8016824 <lwip_netconn_do_writemore+0x24>
 8016816:	4b96      	ldr	r3, [pc, #600]	; (8016a70 <lwip_netconn_do_writemore+0x270>)
 8016818:	f240 6273 	movw	r2, #1651	; 0x673
 801681c:	4995      	ldr	r1, [pc, #596]	; (8016a74 <lwip_netconn_do_writemore+0x274>)
 801681e:	4896      	ldr	r0, [pc, #600]	; (8016a78 <lwip_netconn_do_writemore+0x278>)
 8016820:	f00c faea 	bl	8022df8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	785b      	ldrb	r3, [r3, #1]
 8016828:	2b01      	cmp	r3, #1
 801682a:	d006      	beq.n	801683a <lwip_netconn_do_writemore+0x3a>
 801682c:	4b90      	ldr	r3, [pc, #576]	; (8016a70 <lwip_netconn_do_writemore+0x270>)
 801682e:	f240 6274 	movw	r2, #1652	; 0x674
 8016832:	4992      	ldr	r1, [pc, #584]	; (8016a7c <lwip_netconn_do_writemore+0x27c>)
 8016834:	4890      	ldr	r0, [pc, #576]	; (8016a78 <lwip_netconn_do_writemore+0x278>)
 8016836:	f00c fadf 	bl	8022df8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6a1b      	ldr	r3, [r3, #32]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d106      	bne.n	8016850 <lwip_netconn_do_writemore+0x50>
 8016842:	4b8b      	ldr	r3, [pc, #556]	; (8016a70 <lwip_netconn_do_writemore+0x270>)
 8016844:	f240 6275 	movw	r2, #1653	; 0x675
 8016848:	498d      	ldr	r1, [pc, #564]	; (8016a80 <lwip_netconn_do_writemore+0x280>)
 801684a:	488b      	ldr	r0, [pc, #556]	; (8016a78 <lwip_netconn_do_writemore+0x278>)
 801684c:	f00c fad4 	bl	8022df8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d106      	bne.n	8016866 <lwip_netconn_do_writemore+0x66>
 8016858:	4b85      	ldr	r3, [pc, #532]	; (8016a70 <lwip_netconn_do_writemore+0x270>)
 801685a:	f240 6276 	movw	r2, #1654	; 0x676
 801685e:	4989      	ldr	r1, [pc, #548]	; (8016a84 <lwip_netconn_do_writemore+0x284>)
 8016860:	4885      	ldr	r0, [pc, #532]	; (8016a78 <lwip_netconn_do_writemore+0x278>)
 8016862:	f00c fac9 	bl	8022df8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6a1b      	ldr	r3, [r3, #32]
 801686a:	699a      	ldr	r2, [r3, #24]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	6a1b      	ldr	r3, [r3, #32]
 8016870:	695b      	ldr	r3, [r3, #20]
 8016872:	429a      	cmp	r2, r3
 8016874:	d306      	bcc.n	8016884 <lwip_netconn_do_writemore+0x84>
 8016876:	4b7e      	ldr	r3, [pc, #504]	; (8016a70 <lwip_netconn_do_writemore+0x270>)
 8016878:	f240 6277 	movw	r2, #1655	; 0x677
 801687c:	4982      	ldr	r1, [pc, #520]	; (8016a88 <lwip_netconn_do_writemore+0x288>)
 801687e:	487e      	ldr	r0, [pc, #504]	; (8016a78 <lwip_netconn_do_writemore+0x278>)
 8016880:	f00c faba 	bl	8022df8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6a1b      	ldr	r3, [r3, #32]
 8016888:	899b      	ldrh	r3, [r3, #12]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d106      	bne.n	801689c <lwip_netconn_do_writemore+0x9c>
 801688e:	4b78      	ldr	r3, [pc, #480]	; (8016a70 <lwip_netconn_do_writemore+0x270>)
 8016890:	f240 6279 	movw	r2, #1657	; 0x679
 8016894:	497d      	ldr	r1, [pc, #500]	; (8016a8c <lwip_netconn_do_writemore+0x28c>)
 8016896:	4878      	ldr	r0, [pc, #480]	; (8016a78 <lwip_netconn_do_writemore+0x278>)
 8016898:	f00c faae 	bl	8022df8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6a1b      	ldr	r3, [r3, #32]
 80168a0:	7f1b      	ldrb	r3, [r3, #28]
 80168a2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	7f1b      	ldrb	r3, [r3, #28]
 80168a8:	f003 0302 	and.w	r3, r3, #2
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d104      	bne.n	80168ba <lwip_netconn_do_writemore+0xba>
 80168b0:	7ebb      	ldrb	r3, [r7, #26]
 80168b2:	f003 0304 	and.w	r3, r3, #4
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d001      	beq.n	80168be <lwip_netconn_do_writemore+0xbe>
 80168ba:	2301      	movs	r3, #1
 80168bc:	e000      	b.n	80168c0 <lwip_netconn_do_writemore+0xc0>
 80168be:	2300      	movs	r3, #0
 80168c0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6a1b      	ldr	r3, [r3, #32]
 80168c6:	689b      	ldr	r3, [r3, #8]
 80168c8:	681a      	ldr	r2, [r3, #0]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6a1b      	ldr	r3, [r3, #32]
 80168ce:	691b      	ldr	r3, [r3, #16]
 80168d0:	4413      	add	r3, r2
 80168d2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6a1b      	ldr	r3, [r3, #32]
 80168d8:	689b      	ldr	r3, [r3, #8]
 80168da:	685a      	ldr	r2, [r3, #4]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6a1b      	ldr	r3, [r3, #32]
 80168e0:	691b      	ldr	r3, [r3, #16]
 80168e2:	1ad3      	subs	r3, r2, r3
 80168e4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80168e6:	693b      	ldr	r3, [r7, #16]
 80168e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168ec:	d307      	bcc.n	80168fe <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80168ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80168f2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80168f4:	7ebb      	ldrb	r3, [r7, #26]
 80168f6:	f043 0302 	orr.w	r3, r3, #2
 80168fa:	76bb      	strb	r3, [r7, #26]
 80168fc:	e001      	b.n	8016902 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	685b      	ldr	r3, [r3, #4]
 8016906:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801690a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801690c:	89fa      	ldrh	r2, [r7, #14]
 801690e:	8bbb      	ldrh	r3, [r7, #28]
 8016910:	429a      	cmp	r2, r3
 8016912:	d216      	bcs.n	8016942 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8016914:	89fb      	ldrh	r3, [r7, #14]
 8016916:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8016918:	7e3b      	ldrb	r3, [r7, #24]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d00d      	beq.n	801693a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801691e:	8bbb      	ldrh	r3, [r7, #28]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d10e      	bne.n	8016942 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	6a1b      	ldr	r3, [r3, #32]
 8016928:	699b      	ldr	r3, [r3, #24]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d102      	bne.n	8016934 <lwip_netconn_do_writemore+0x134>
 801692e:	f06f 0306 	mvn.w	r3, #6
 8016932:	e000      	b.n	8016936 <lwip_netconn_do_writemore+0x136>
 8016934:	2300      	movs	r3, #0
 8016936:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8016938:	e07d      	b.n	8016a36 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801693a:	7ebb      	ldrb	r3, [r7, #26]
 801693c:	f043 0302 	orr.w	r3, r3, #2
 8016940:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	6a1b      	ldr	r3, [r3, #32]
 8016946:	691a      	ldr	r2, [r3, #16]
 8016948:	8bbb      	ldrh	r3, [r7, #28]
 801694a:	441a      	add	r2, r3
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	6a1b      	ldr	r3, [r3, #32]
 8016950:	689b      	ldr	r3, [r3, #8]
 8016952:	685b      	ldr	r3, [r3, #4]
 8016954:	429a      	cmp	r2, r3
 8016956:	d906      	bls.n	8016966 <lwip_netconn_do_writemore+0x166>
 8016958:	4b45      	ldr	r3, [pc, #276]	; (8016a70 <lwip_netconn_do_writemore+0x270>)
 801695a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801695e:	494c      	ldr	r1, [pc, #304]	; (8016a90 <lwip_netconn_do_writemore+0x290>)
 8016960:	4845      	ldr	r0, [pc, #276]	; (8016a78 <lwip_netconn_do_writemore+0x278>)
 8016962:	f00c fa49 	bl	8022df8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016966:	8bbb      	ldrh	r3, [r7, #28]
 8016968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801696c:	4293      	cmp	r3, r2
 801696e:	d103      	bne.n	8016978 <lwip_netconn_do_writemore+0x178>
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016976:	d209      	bcs.n	801698c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016978:	693b      	ldr	r3, [r7, #16]
 801697a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801697c:	8bba      	ldrh	r2, [r7, #28]
 801697e:	429a      	cmp	r2, r3
 8016980:	d10b      	bne.n	801699a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6a1b      	ldr	r3, [r3, #32]
 8016986:	899b      	ldrh	r3, [r3, #12]
 8016988:	2b01      	cmp	r3, #1
 801698a:	d906      	bls.n	801699a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 801698c:	2301      	movs	r3, #1
 801698e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016990:	7ebb      	ldrb	r3, [r7, #26]
 8016992:	f043 0302 	orr.w	r3, r3, #2
 8016996:	76bb      	strb	r3, [r7, #26]
 8016998:	e001      	b.n	801699e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801699a:	2300      	movs	r3, #0
 801699c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6858      	ldr	r0, [r3, #4]
 80169a2:	7ebb      	ldrb	r3, [r7, #26]
 80169a4:	8bba      	ldrh	r2, [r7, #28]
 80169a6:	6979      	ldr	r1, [r7, #20]
 80169a8:	f006 ffe2 	bl	801d970 <tcp_write>
 80169ac:	4603      	mov	r3, r0
 80169ae:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80169b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d12c      	bne.n	8016a12 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6a1b      	ldr	r3, [r3, #32]
 80169bc:	6999      	ldr	r1, [r3, #24]
 80169be:	8bba      	ldrh	r2, [r7, #28]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6a1b      	ldr	r3, [r3, #32]
 80169c4:	440a      	add	r2, r1
 80169c6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6a1b      	ldr	r3, [r3, #32]
 80169cc:	6919      	ldr	r1, [r3, #16]
 80169ce:	8bba      	ldrh	r2, [r7, #28]
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	6a1b      	ldr	r3, [r3, #32]
 80169d4:	440a      	add	r2, r1
 80169d6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6a1b      	ldr	r3, [r3, #32]
 80169dc:	691a      	ldr	r2, [r3, #16]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6a1b      	ldr	r3, [r3, #32]
 80169e2:	689b      	ldr	r3, [r3, #8]
 80169e4:	685b      	ldr	r3, [r3, #4]
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d113      	bne.n	8016a12 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	6a1b      	ldr	r3, [r3, #32]
 80169ee:	899a      	ldrh	r2, [r3, #12]
 80169f0:	3a01      	subs	r2, #1
 80169f2:	b292      	uxth	r2, r2
 80169f4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	6a1b      	ldr	r3, [r3, #32]
 80169fa:	899b      	ldrh	r3, [r3, #12]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d008      	beq.n	8016a12 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6a1b      	ldr	r3, [r3, #32]
 8016a04:	689a      	ldr	r2, [r3, #8]
 8016a06:	3208      	adds	r2, #8
 8016a08:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	6a1b      	ldr	r3, [r3, #32]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8016a12:	7e7b      	ldrb	r3, [r7, #25]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d004      	beq.n	8016a22 <lwip_netconn_do_writemore+0x222>
 8016a18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f43f af50 	beq.w	80168c2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8016a22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d004      	beq.n	8016a34 <lwip_netconn_do_writemore+0x234>
 8016a2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a32:	d146      	bne.n	8016ac2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8016a34:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8016a36:	7e3b      	ldrb	r3, [r7, #24]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d02b      	beq.n	8016a94 <lwip_netconn_do_writemore+0x294>
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6a1b      	ldr	r3, [r3, #32]
 8016a40:	699a      	ldr	r2, [r3, #24]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6a1b      	ldr	r3, [r3, #32]
 8016a46:	695b      	ldr	r3, [r3, #20]
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d223      	bcs.n	8016a94 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d005      	beq.n	8016a60 <lwip_netconn_do_writemore+0x260>
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a58:	2200      	movs	r2, #0
 8016a5a:	2103      	movs	r1, #3
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	7f1b      	ldrb	r3, [r3, #28]
 8016a64:	f043 0310 	orr.w	r3, r3, #16
 8016a68:	b2da      	uxtb	r2, r3
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	771a      	strb	r2, [r3, #28]
 8016a6e:	e028      	b.n	8016ac2 <lwip_netconn_do_writemore+0x2c2>
 8016a70:	080246f4 	.word	0x080246f4
 8016a74:	0802484c 	.word	0x0802484c
 8016a78:	08024738 	.word	0x08024738
 8016a7c:	08024b54 	.word	0x08024b54
 8016a80:	0802485c 	.word	0x0802485c
 8016a84:	08024b74 	.word	0x08024b74
 8016a88:	08024b8c 	.word	0x08024b8c
 8016a8c:	08024bcc 	.word	0x08024bcc
 8016a90:	08024bf4 	.word	0x08024bf4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	685b      	ldr	r3, [r3, #4]
 8016a98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016a9c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016aa0:	d305      	bcc.n	8016aae <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	685b      	ldr	r3, [r3, #4]
 8016aa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016aaa:	2b04      	cmp	r3, #4
 8016aac:	d909      	bls.n	8016ac2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d005      	beq.n	8016ac2 <lwip_netconn_do_writemore+0x2c2>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aba:	2200      	movs	r2, #0
 8016abc:	2103      	movs	r1, #3
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8016ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d11d      	bne.n	8016b06 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	6a1b      	ldr	r3, [r3, #32]
 8016ace:	699a      	ldr	r2, [r3, #24]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	6a1b      	ldr	r3, [r3, #32]
 8016ad4:	695b      	ldr	r3, [r3, #20]
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d002      	beq.n	8016ae0 <lwip_netconn_do_writemore+0x2e0>
 8016ada:	7e3b      	ldrb	r3, [r7, #24]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d001      	beq.n	8016ae4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	685b      	ldr	r3, [r3, #4]
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f007 fd2b 	bl	801e544 <tcp_output>
 8016aee:	4603      	mov	r3, r0
 8016af0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8016af2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8016af6:	f113 0f04 	cmn.w	r3, #4
 8016afa:	d12c      	bne.n	8016b56 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016afc:	7b3b      	ldrb	r3, [r7, #12]
 8016afe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016b00:	2301      	movs	r3, #1
 8016b02:	76fb      	strb	r3, [r7, #27]
 8016b04:	e027      	b.n	8016b56 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8016b06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b0e:	d120      	bne.n	8016b52 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f007 fd15 	bl	801e544 <tcp_output>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8016b1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016b22:	f113 0f04 	cmn.w	r3, #4
 8016b26:	d104      	bne.n	8016b32 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016b28:	7b7b      	ldrb	r3, [r7, #13]
 8016b2a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	76fb      	strb	r3, [r7, #27]
 8016b30:	e011      	b.n	8016b56 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8016b32:	7e3b      	ldrb	r3, [r7, #24]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d00e      	beq.n	8016b56 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6a1b      	ldr	r3, [r3, #32]
 8016b3c:	699b      	ldr	r3, [r3, #24]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d102      	bne.n	8016b48 <lwip_netconn_do_writemore+0x348>
 8016b42:	f06f 0306 	mvn.w	r3, #6
 8016b46:	e000      	b.n	8016b4a <lwip_netconn_do_writemore+0x34a>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	76fb      	strb	r3, [r7, #27]
 8016b50:	e001      	b.n	8016b56 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8016b52:	2301      	movs	r3, #1
 8016b54:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8016b56:	7efb      	ldrb	r3, [r7, #27]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d015      	beq.n	8016b88 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	6a1b      	ldr	r3, [r3, #32]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	330c      	adds	r3, #12
 8016b64:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6a1b      	ldr	r3, [r3, #32]
 8016b6a:	7ffa      	ldrb	r2, [r7, #31]
 8016b6c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2200      	movs	r2, #0
 8016b72:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2200      	movs	r2, #0
 8016b78:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016b7a:	78fb      	ldrb	r3, [r7, #3]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d006      	beq.n	8016b8e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8016b80:	68b8      	ldr	r0, [r7, #8]
 8016b82:	f00b fd2b 	bl	80225dc <sys_sem_signal>
 8016b86:	e002      	b.n	8016b8e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8016b88:	f04f 33ff 	mov.w	r3, #4294967295
 8016b8c:	e000      	b.n	8016b90 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8016b8e:	2300      	movs	r3, #0
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	3720      	adds	r7, #32
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b084      	sub	sp, #16
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7fe fbce 	bl	801534a <netconn_err>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d166      	bne.n	8016c88 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	781b      	ldrb	r3, [r3, #0]
 8016bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016bc4:	2b10      	cmp	r3, #16
 8016bc6:	d15d      	bne.n	8016c84 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	785b      	ldrb	r3, [r3, #1]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d002      	beq.n	8016bd8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8016bd2:	23fb      	movs	r3, #251	; 0xfb
 8016bd4:	73fb      	strb	r3, [r7, #15]
 8016bd6:	e057      	b.n	8016c88 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	685b      	ldr	r3, [r3, #4]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d04d      	beq.n	8016c7e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2201      	movs	r2, #1
 8016be8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	6a1b      	ldr	r3, [r3, #32]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d006      	beq.n	8016c02 <lwip_netconn_do_write+0x6a>
 8016bf4:	4b28      	ldr	r3, [pc, #160]	; (8016c98 <lwip_netconn_do_write+0x100>)
 8016bf6:	f240 7223 	movw	r2, #1827	; 0x723
 8016bfa:	4928      	ldr	r1, [pc, #160]	; (8016c9c <lwip_netconn_do_write+0x104>)
 8016bfc:	4828      	ldr	r0, [pc, #160]	; (8016ca0 <lwip_netconn_do_write+0x108>)
 8016bfe:	f00c f8fb 	bl	8022df8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	695b      	ldr	r3, [r3, #20]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d106      	bne.n	8016c18 <lwip_netconn_do_write+0x80>
 8016c0a:	4b23      	ldr	r3, [pc, #140]	; (8016c98 <lwip_netconn_do_write+0x100>)
 8016c0c:	f240 7224 	movw	r2, #1828	; 0x724
 8016c10:	4924      	ldr	r1, [pc, #144]	; (8016ca4 <lwip_netconn_do_write+0x10c>)
 8016c12:	4823      	ldr	r0, [pc, #140]	; (8016ca0 <lwip_netconn_do_write+0x108>)
 8016c14:	f00c f8f0 	bl	8022df8 <iprintf>
        msg->conn->current_msg = msg;
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	68ba      	ldr	r2, [r7, #8]
 8016c1e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	2100      	movs	r1, #0
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7ff fdea 	bl	8016800 <lwip_netconn_do_writemore>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d02e      	beq.n	8016c90 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	785b      	ldrb	r3, [r3, #1]
 8016c38:	2b01      	cmp	r3, #1
 8016c3a:	d006      	beq.n	8016c4a <lwip_netconn_do_write+0xb2>
 8016c3c:	4b16      	ldr	r3, [pc, #88]	; (8016c98 <lwip_netconn_do_write+0x100>)
 8016c3e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8016c42:	4919      	ldr	r1, [pc, #100]	; (8016ca8 <lwip_netconn_do_write+0x110>)
 8016c44:	4816      	ldr	r0, [pc, #88]	; (8016ca0 <lwip_netconn_do_write+0x108>)
 8016c46:	f00c f8d7 	bl	8022df8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8016c4a:	4818      	ldr	r0, [pc, #96]	; (8016cac <lwip_netconn_do_write+0x114>)
 8016c4c:	f00b fd2f 	bl	80226ae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	330c      	adds	r3, #12
 8016c56:	2100      	movs	r1, #0
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f00b fc8e 	bl	802257a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8016c5e:	4813      	ldr	r0, [pc, #76]	; (8016cac <lwip_netconn_do_write+0x114>)
 8016c60:	f00b fd16 	bl	8022690 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	785b      	ldrb	r3, [r3, #1]
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	d110      	bne.n	8016c90 <lwip_netconn_do_write+0xf8>
 8016c6e:	4b0a      	ldr	r3, [pc, #40]	; (8016c98 <lwip_netconn_do_write+0x100>)
 8016c70:	f240 722c 	movw	r2, #1836	; 0x72c
 8016c74:	490c      	ldr	r1, [pc, #48]	; (8016ca8 <lwip_netconn_do_write+0x110>)
 8016c76:	480a      	ldr	r0, [pc, #40]	; (8016ca0 <lwip_netconn_do_write+0x108>)
 8016c78:	f00c f8be 	bl	8022df8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8016c7c:	e008      	b.n	8016c90 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8016c7e:	23f5      	movs	r3, #245	; 0xf5
 8016c80:	73fb      	strb	r3, [r7, #15]
 8016c82:	e001      	b.n	8016c88 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8016c84:	23fa      	movs	r3, #250	; 0xfa
 8016c86:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	7bfa      	ldrb	r2, [r7, #15]
 8016c8c:	711a      	strb	r2, [r3, #4]
 8016c8e:	e000      	b.n	8016c92 <lwip_netconn_do_write+0xfa>
        return;
 8016c90:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8016c92:	3710      	adds	r7, #16
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	080246f4 	.word	0x080246f4
 8016c9c:	08024a98 	.word	0x08024a98
 8016ca0:	08024738 	.word	0x08024738
 8016ca4:	08024c20 	.word	0x08024c20
 8016ca8:	08024ab4 	.word	0x08024ab4
 8016cac:	2005eb90 	.word	0x2005eb90

08016cb0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b084      	sub	sp, #16
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	785b      	ldrb	r3, [r3, #1]
 8016cc2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d069      	beq.n	8016da2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	781b      	ldrb	r3, [r3, #0]
 8016cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8016cd8:	2b10      	cmp	r3, #16
 8016cda:	d162      	bne.n	8016da2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016ce0:	2b03      	cmp	r3, #3
 8016ce2:	d002      	beq.n	8016cea <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016ce4:	7afb      	ldrb	r3, [r7, #11]
 8016ce6:	2b02      	cmp	r3, #2
 8016ce8:	d05b      	beq.n	8016da2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8016cea:	7afb      	ldrb	r3, [r7, #11]
 8016cec:	2b03      	cmp	r3, #3
 8016cee:	d103      	bne.n	8016cf8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	22f5      	movs	r2, #245	; 0xf5
 8016cf4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016cf6:	e059      	b.n	8016dac <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8016cf8:	7afb      	ldrb	r3, [r7, #11]
 8016cfa:	2b01      	cmp	r3, #1
 8016cfc:	d103      	bne.n	8016d06 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	22fb      	movs	r2, #251	; 0xfb
 8016d02:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016d04:	e052      	b.n	8016dac <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	7a1b      	ldrb	r3, [r3, #8]
 8016d0a:	f003 0301 	and.w	r3, r3, #1
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d004      	beq.n	8016d1c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7ff f850 	bl	8015dbc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	6a1b      	ldr	r3, [r3, #32]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d006      	beq.n	8016d34 <lwip_netconn_do_close+0x84>
 8016d26:	4b23      	ldr	r3, [pc, #140]	; (8016db4 <lwip_netconn_do_close+0x104>)
 8016d28:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8016d2c:	4922      	ldr	r1, [pc, #136]	; (8016db8 <lwip_netconn_do_close+0x108>)
 8016d2e:	4823      	ldr	r0, [pc, #140]	; (8016dbc <lwip_netconn_do_close+0x10c>)
 8016d30:	f00c f862 	bl	8022df8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2204      	movs	r2, #4
 8016d3a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	68fa      	ldr	r2, [r7, #12]
 8016d42:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	2100      	movs	r1, #0
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7ff f8b4 	bl	8015eb8 <lwip_netconn_do_close_internal>
 8016d50:	4603      	mov	r3, r0
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d029      	beq.n	8016daa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	785b      	ldrb	r3, [r3, #1]
 8016d5c:	2b04      	cmp	r3, #4
 8016d5e:	d006      	beq.n	8016d6e <lwip_netconn_do_close+0xbe>
 8016d60:	4b14      	ldr	r3, [pc, #80]	; (8016db4 <lwip_netconn_do_close+0x104>)
 8016d62:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8016d66:	4916      	ldr	r1, [pc, #88]	; (8016dc0 <lwip_netconn_do_close+0x110>)
 8016d68:	4814      	ldr	r0, [pc, #80]	; (8016dbc <lwip_netconn_do_close+0x10c>)
 8016d6a:	f00c f845 	bl	8022df8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8016d6e:	4815      	ldr	r0, [pc, #84]	; (8016dc4 <lwip_netconn_do_close+0x114>)
 8016d70:	f00b fc9d 	bl	80226ae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	330c      	adds	r3, #12
 8016d7a:	2100      	movs	r1, #0
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f00b fbfc 	bl	802257a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8016d82:	4810      	ldr	r0, [pc, #64]	; (8016dc4 <lwip_netconn_do_close+0x114>)
 8016d84:	f00b fc84 	bl	8022690 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	785b      	ldrb	r3, [r3, #1]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d00b      	beq.n	8016daa <lwip_netconn_do_close+0xfa>
 8016d92:	4b08      	ldr	r3, [pc, #32]	; (8016db4 <lwip_netconn_do_close+0x104>)
 8016d94:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8016d98:	4909      	ldr	r1, [pc, #36]	; (8016dc0 <lwip_netconn_do_close+0x110>)
 8016d9a:	4808      	ldr	r0, [pc, #32]	; (8016dbc <lwip_netconn_do_close+0x10c>)
 8016d9c:	f00c f82c 	bl	8022df8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8016da0:	e003      	b.n	8016daa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	22f5      	movs	r2, #245	; 0xf5
 8016da6:	711a      	strb	r2, [r3, #4]
 8016da8:	e000      	b.n	8016dac <lwip_netconn_do_close+0xfc>
      return;
 8016daa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016dac:	3710      	adds	r7, #16
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}
 8016db2:	bf00      	nop
 8016db4:	080246f4 	.word	0x080246f4
 8016db8:	08024a98 	.word	0x08024a98
 8016dbc:	08024738 	.word	0x08024738
 8016dc0:	08024ab4 	.word	0x08024ab4
 8016dc4:	2005eb90 	.word	0x2005eb90

08016dc8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d013      	beq.n	8016dfe <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d00b      	beq.n	8016df6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	4618      	mov	r0, r3
 8016de4:	f001 feec 	bl	8018bc0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2200      	movs	r2, #0
 8016dec:	605a      	str	r2, [r3, #4]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	685a      	ldr	r2, [r3, #4]
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8016df6:	6879      	ldr	r1, [r7, #4]
 8016df8:	2006      	movs	r0, #6
 8016dfa:	f001 f83d 	bl	8017e78 <memp_free>
  }
}
 8016dfe:	bf00      	nop
 8016e00:	3708      	adds	r7, #8
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
	...

08016e08 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b084      	sub	sp, #16
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	60f8      	str	r0, [r7, #12]
 8016e10:	60b9      	str	r1, [r7, #8]
 8016e12:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d108      	bne.n	8016e2c <netbuf_data+0x24>
 8016e1a:	4b1b      	ldr	r3, [pc, #108]	; (8016e88 <netbuf_data+0x80>)
 8016e1c:	22c6      	movs	r2, #198	; 0xc6
 8016e1e:	491b      	ldr	r1, [pc, #108]	; (8016e8c <netbuf_data+0x84>)
 8016e20:	481b      	ldr	r0, [pc, #108]	; (8016e90 <netbuf_data+0x88>)
 8016e22:	f00b ffe9 	bl	8022df8 <iprintf>
 8016e26:	f06f 030f 	mvn.w	r3, #15
 8016e2a:	e029      	b.n	8016e80 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016e2c:	68bb      	ldr	r3, [r7, #8]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d108      	bne.n	8016e44 <netbuf_data+0x3c>
 8016e32:	4b15      	ldr	r3, [pc, #84]	; (8016e88 <netbuf_data+0x80>)
 8016e34:	22c7      	movs	r2, #199	; 0xc7
 8016e36:	4917      	ldr	r1, [pc, #92]	; (8016e94 <netbuf_data+0x8c>)
 8016e38:	4815      	ldr	r0, [pc, #84]	; (8016e90 <netbuf_data+0x88>)
 8016e3a:	f00b ffdd 	bl	8022df8 <iprintf>
 8016e3e:	f06f 030f 	mvn.w	r3, #15
 8016e42:	e01d      	b.n	8016e80 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d108      	bne.n	8016e5c <netbuf_data+0x54>
 8016e4a:	4b0f      	ldr	r3, [pc, #60]	; (8016e88 <netbuf_data+0x80>)
 8016e4c:	22c8      	movs	r2, #200	; 0xc8
 8016e4e:	4912      	ldr	r1, [pc, #72]	; (8016e98 <netbuf_data+0x90>)
 8016e50:	480f      	ldr	r0, [pc, #60]	; (8016e90 <netbuf_data+0x88>)
 8016e52:	f00b ffd1 	bl	8022df8 <iprintf>
 8016e56:	f06f 030f 	mvn.w	r3, #15
 8016e5a:	e011      	b.n	8016e80 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	685b      	ldr	r3, [r3, #4]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d102      	bne.n	8016e6a <netbuf_data+0x62>
    return ERR_BUF;
 8016e64:	f06f 0301 	mvn.w	r3, #1
 8016e68:	e00a      	b.n	8016e80 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	685a      	ldr	r2, [r3, #4]
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	895a      	ldrh	r2, [r3, #10]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8016e7e:	2300      	movs	r3, #0
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3710      	adds	r7, #16
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}
 8016e88:	08024c4c 	.word	0x08024c4c
 8016e8c:	08024d54 	.word	0x08024d54
 8016e90:	08024c9c 	.word	0x08024c9c
 8016e94:	08024d70 	.word	0x08024d70
 8016e98:	08024d90 	.word	0x08024d90

08016e9c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b082      	sub	sp, #8
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d108      	bne.n	8016ebc <netbuf_next+0x20>
 8016eaa:	4b11      	ldr	r3, [pc, #68]	; (8016ef0 <netbuf_next+0x54>)
 8016eac:	22e0      	movs	r2, #224	; 0xe0
 8016eae:	4911      	ldr	r1, [pc, #68]	; (8016ef4 <netbuf_next+0x58>)
 8016eb0:	4811      	ldr	r0, [pc, #68]	; (8016ef8 <netbuf_next+0x5c>)
 8016eb2:	f00b ffa1 	bl	8022df8 <iprintf>
 8016eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8016eba:	e014      	b.n	8016ee6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d102      	bne.n	8016ecc <netbuf_next+0x30>
    return -1;
 8016ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8016eca:	e00c      	b.n	8016ee6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	681a      	ldr	r2, [r3, #0]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	685b      	ldr	r3, [r3, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d101      	bne.n	8016ee4 <netbuf_next+0x48>
    return 1;
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	e000      	b.n	8016ee6 <netbuf_next+0x4a>
  }
  return 0;
 8016ee4:	2300      	movs	r3, #0
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3708      	adds	r7, #8
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop
 8016ef0:	08024c4c 	.word	0x08024c4c
 8016ef4:	08024dac 	.word	0x08024dac
 8016ef8:	08024c9c 	.word	0x08024c9c

08016efc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016f06:	f008 fbd5 	bl	801f6b4 <sys_timeouts_sleeptime>
 8016f0a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f12:	d10b      	bne.n	8016f2c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016f14:	4813      	ldr	r0, [pc, #76]	; (8016f64 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f16:	f00b fbca 	bl	80226ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	6839      	ldr	r1, [r7, #0]
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f00b faa0 	bl	8022464 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016f24:	480f      	ldr	r0, [pc, #60]	; (8016f64 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f26:	f00b fbb3 	bl	8022690 <sys_mutex_lock>
    return;
 8016f2a:	e018      	b.n	8016f5e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d102      	bne.n	8016f38 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016f32:	f008 fb85 	bl	801f640 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016f36:	e7e6      	b.n	8016f06 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016f38:	480a      	ldr	r0, [pc, #40]	; (8016f64 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f3a:	f00b fbb8 	bl	80226ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016f3e:	68fa      	ldr	r2, [r7, #12]
 8016f40:	6839      	ldr	r1, [r7, #0]
 8016f42:	6878      	ldr	r0, [r7, #4]
 8016f44:	f00b fa8e 	bl	8022464 <sys_arch_mbox_fetch>
 8016f48:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8016f4a:	4806      	ldr	r0, [pc, #24]	; (8016f64 <tcpip_timeouts_mbox_fetch+0x68>)
 8016f4c:	f00b fba0 	bl	8022690 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f56:	d102      	bne.n	8016f5e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016f58:	f008 fb72 	bl	801f640 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016f5c:	e7d3      	b.n	8016f06 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016f5e:	3710      	adds	r7, #16
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd80      	pop	{r7, pc}
 8016f64:	2005eb90 	.word	0x2005eb90

08016f68 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016f70:	4810      	ldr	r0, [pc, #64]	; (8016fb4 <tcpip_thread+0x4c>)
 8016f72:	f00b fb8d 	bl	8022690 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8016f76:	4b10      	ldr	r3, [pc, #64]	; (8016fb8 <tcpip_thread+0x50>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d005      	beq.n	8016f8a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016f7e:	4b0e      	ldr	r3, [pc, #56]	; (8016fb8 <tcpip_thread+0x50>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	4a0e      	ldr	r2, [pc, #56]	; (8016fbc <tcpip_thread+0x54>)
 8016f84:	6812      	ldr	r2, [r2, #0]
 8016f86:	4610      	mov	r0, r2
 8016f88:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016f8a:	f107 030c 	add.w	r3, r7, #12
 8016f8e:	4619      	mov	r1, r3
 8016f90:	480b      	ldr	r0, [pc, #44]	; (8016fc0 <tcpip_thread+0x58>)
 8016f92:	f7ff ffb3 	bl	8016efc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d106      	bne.n	8016faa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016f9c:	4b09      	ldr	r3, [pc, #36]	; (8016fc4 <tcpip_thread+0x5c>)
 8016f9e:	2291      	movs	r2, #145	; 0x91
 8016fa0:	4909      	ldr	r1, [pc, #36]	; (8016fc8 <tcpip_thread+0x60>)
 8016fa2:	480a      	ldr	r0, [pc, #40]	; (8016fcc <tcpip_thread+0x64>)
 8016fa4:	f00b ff28 	bl	8022df8 <iprintf>
      continue;
 8016fa8:	e003      	b.n	8016fb2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	4618      	mov	r0, r3
 8016fae:	f000 f80f 	bl	8016fd0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016fb2:	e7ea      	b.n	8016f8a <tcpip_thread+0x22>
 8016fb4:	2005eb90 	.word	0x2005eb90
 8016fb8:	2005eb84 	.word	0x2005eb84
 8016fbc:	2005eb88 	.word	0x2005eb88
 8016fc0:	2005eb8c 	.word	0x2005eb8c
 8016fc4:	08024de4 	.word	0x08024de4
 8016fc8:	08024e14 	.word	0x08024e14
 8016fcc:	08024e34 	.word	0x08024e34

08016fd0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b082      	sub	sp, #8
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	781b      	ldrb	r3, [r3, #0]
 8016fdc:	2b02      	cmp	r3, #2
 8016fde:	d026      	beq.n	801702e <tcpip_thread_handle_msg+0x5e>
 8016fe0:	2b02      	cmp	r3, #2
 8016fe2:	dc2b      	bgt.n	801703c <tcpip_thread_handle_msg+0x6c>
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d002      	beq.n	8016fee <tcpip_thread_handle_msg+0x1e>
 8016fe8:	2b01      	cmp	r3, #1
 8016fea:	d015      	beq.n	8017018 <tcpip_thread_handle_msg+0x48>
 8016fec:	e026      	b.n	801703c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	68db      	ldr	r3, [r3, #12]
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	6850      	ldr	r0, [r2, #4]
 8016ff6:	687a      	ldr	r2, [r7, #4]
 8016ff8:	6892      	ldr	r2, [r2, #8]
 8016ffa:	4611      	mov	r1, r2
 8016ffc:	4798      	blx	r3
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d004      	beq.n	801700e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	685b      	ldr	r3, [r3, #4]
 8017008:	4618      	mov	r0, r3
 801700a:	f001 fdd9 	bl	8018bc0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801700e:	6879      	ldr	r1, [r7, #4]
 8017010:	2009      	movs	r0, #9
 8017012:	f000 ff31 	bl	8017e78 <memp_free>
      break;
 8017016:	e018      	b.n	801704a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	687a      	ldr	r2, [r7, #4]
 801701e:	6892      	ldr	r2, [r2, #8]
 8017020:	4610      	mov	r0, r2
 8017022:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017024:	6879      	ldr	r1, [r7, #4]
 8017026:	2008      	movs	r0, #8
 8017028:	f000 ff26 	bl	8017e78 <memp_free>
      break;
 801702c:	e00d      	b.n	801704a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	687a      	ldr	r2, [r7, #4]
 8017034:	6892      	ldr	r2, [r2, #8]
 8017036:	4610      	mov	r0, r2
 8017038:	4798      	blx	r3
      break;
 801703a:	e006      	b.n	801704a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801703c:	4b05      	ldr	r3, [pc, #20]	; (8017054 <tcpip_thread_handle_msg+0x84>)
 801703e:	22cf      	movs	r2, #207	; 0xcf
 8017040:	4905      	ldr	r1, [pc, #20]	; (8017058 <tcpip_thread_handle_msg+0x88>)
 8017042:	4806      	ldr	r0, [pc, #24]	; (801705c <tcpip_thread_handle_msg+0x8c>)
 8017044:	f00b fed8 	bl	8022df8 <iprintf>
      break;
 8017048:	bf00      	nop
  }
}
 801704a:	bf00      	nop
 801704c:	3708      	adds	r7, #8
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}
 8017052:	bf00      	nop
 8017054:	08024de4 	.word	0x08024de4
 8017058:	08024e14 	.word	0x08024e14
 801705c:	08024e34 	.word	0x08024e34

08017060 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b086      	sub	sp, #24
 8017064:	af00      	add	r7, sp, #0
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	60b9      	str	r1, [r7, #8]
 801706a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801706c:	481a      	ldr	r0, [pc, #104]	; (80170d8 <tcpip_inpkt+0x78>)
 801706e:	f00b fa41 	bl	80224f4 <sys_mbox_valid>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	d105      	bne.n	8017084 <tcpip_inpkt+0x24>
 8017078:	4b18      	ldr	r3, [pc, #96]	; (80170dc <tcpip_inpkt+0x7c>)
 801707a:	22fc      	movs	r2, #252	; 0xfc
 801707c:	4918      	ldr	r1, [pc, #96]	; (80170e0 <tcpip_inpkt+0x80>)
 801707e:	4819      	ldr	r0, [pc, #100]	; (80170e4 <tcpip_inpkt+0x84>)
 8017080:	f00b feba 	bl	8022df8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017084:	2009      	movs	r0, #9
 8017086:	f000 fe81 	bl	8017d8c <memp_malloc>
 801708a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801708c:	697b      	ldr	r3, [r7, #20]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d102      	bne.n	8017098 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8017092:	f04f 33ff 	mov.w	r3, #4294967295
 8017096:	e01a      	b.n	80170ce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	2200      	movs	r2, #0
 801709c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	68fa      	ldr	r2, [r7, #12]
 80170a2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	68ba      	ldr	r2, [r7, #8]
 80170a8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	687a      	ldr	r2, [r7, #4]
 80170ae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80170b0:	6979      	ldr	r1, [r7, #20]
 80170b2:	4809      	ldr	r0, [pc, #36]	; (80170d8 <tcpip_inpkt+0x78>)
 80170b4:	f00b f9bc 	bl	8022430 <sys_mbox_trypost>
 80170b8:	4603      	mov	r3, r0
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d006      	beq.n	80170cc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80170be:	6979      	ldr	r1, [r7, #20]
 80170c0:	2009      	movs	r0, #9
 80170c2:	f000 fed9 	bl	8017e78 <memp_free>
    return ERR_MEM;
 80170c6:	f04f 33ff 	mov.w	r3, #4294967295
 80170ca:	e000      	b.n	80170ce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80170cc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3718      	adds	r7, #24
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}
 80170d6:	bf00      	nop
 80170d8:	2005eb8c 	.word	0x2005eb8c
 80170dc:	08024de4 	.word	0x08024de4
 80170e0:	08024e5c 	.word	0x08024e5c
 80170e4:	08024e34 	.word	0x08024e34

080170e8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
 80170f0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170f8:	f003 0318 	and.w	r3, r3, #24
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d006      	beq.n	801710e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017100:	4a08      	ldr	r2, [pc, #32]	; (8017124 <tcpip_input+0x3c>)
 8017102:	6839      	ldr	r1, [r7, #0]
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	f7ff ffab 	bl	8017060 <tcpip_inpkt>
 801710a:	4603      	mov	r3, r0
 801710c:	e005      	b.n	801711a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801710e:	4a06      	ldr	r2, [pc, #24]	; (8017128 <tcpip_input+0x40>)
 8017110:	6839      	ldr	r1, [r7, #0]
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f7ff ffa4 	bl	8017060 <tcpip_inpkt>
 8017118:	4603      	mov	r3, r0
}
 801711a:	4618      	mov	r0, r3
 801711c:	3708      	adds	r7, #8
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}
 8017122:	bf00      	nop
 8017124:	0802222d 	.word	0x0802222d
 8017128:	08021135 	.word	0x08021135

0801712c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b084      	sub	sp, #16
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017136:	4819      	ldr	r0, [pc, #100]	; (801719c <tcpip_try_callback+0x70>)
 8017138:	f00b f9dc 	bl	80224f4 <sys_mbox_valid>
 801713c:	4603      	mov	r3, r0
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <tcpip_try_callback+0x24>
 8017142:	4b17      	ldr	r3, [pc, #92]	; (80171a0 <tcpip_try_callback+0x74>)
 8017144:	f240 125d 	movw	r2, #349	; 0x15d
 8017148:	4916      	ldr	r1, [pc, #88]	; (80171a4 <tcpip_try_callback+0x78>)
 801714a:	4817      	ldr	r0, [pc, #92]	; (80171a8 <tcpip_try_callback+0x7c>)
 801714c:	f00b fe54 	bl	8022df8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017150:	2008      	movs	r0, #8
 8017152:	f000 fe1b 	bl	8017d8c <memp_malloc>
 8017156:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d102      	bne.n	8017164 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801715e:	f04f 33ff 	mov.w	r3, #4294967295
 8017162:	e017      	b.n	8017194 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	2201      	movs	r2, #1
 8017168:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	687a      	ldr	r2, [r7, #4]
 801716e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	683a      	ldr	r2, [r7, #0]
 8017174:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017176:	68f9      	ldr	r1, [r7, #12]
 8017178:	4808      	ldr	r0, [pc, #32]	; (801719c <tcpip_try_callback+0x70>)
 801717a:	f00b f959 	bl	8022430 <sys_mbox_trypost>
 801717e:	4603      	mov	r3, r0
 8017180:	2b00      	cmp	r3, #0
 8017182:	d006      	beq.n	8017192 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017184:	68f9      	ldr	r1, [r7, #12]
 8017186:	2008      	movs	r0, #8
 8017188:	f000 fe76 	bl	8017e78 <memp_free>
    return ERR_MEM;
 801718c:	f04f 33ff 	mov.w	r3, #4294967295
 8017190:	e000      	b.n	8017194 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8017192:	2300      	movs	r3, #0
}
 8017194:	4618      	mov	r0, r3
 8017196:	3710      	adds	r7, #16
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}
 801719c:	2005eb8c 	.word	0x2005eb8c
 80171a0:	08024de4 	.word	0x08024de4
 80171a4:	08024e5c 	.word	0x08024e5c
 80171a8:	08024e34 	.word	0x08024e34

080171ac <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b084      	sub	sp, #16
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	60f8      	str	r0, [r7, #12]
 80171b4:	60b9      	str	r1, [r7, #8]
 80171b6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80171b8:	4806      	ldr	r0, [pc, #24]	; (80171d4 <tcpip_send_msg_wait_sem+0x28>)
 80171ba:	f00b fa69 	bl	8022690 <sys_mutex_lock>
  fn(apimsg);
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	68b8      	ldr	r0, [r7, #8]
 80171c2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80171c4:	4803      	ldr	r0, [pc, #12]	; (80171d4 <tcpip_send_msg_wait_sem+0x28>)
 80171c6:	f00b fa72 	bl	80226ae <sys_mutex_unlock>
  return ERR_OK;
 80171ca:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80171cc:	4618      	mov	r0, r3
 80171ce:	3710      	adds	r7, #16
 80171d0:	46bd      	mov	sp, r7
 80171d2:	bd80      	pop	{r7, pc}
 80171d4:	2005eb90 	.word	0x2005eb90

080171d8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b084      	sub	sp, #16
 80171dc:	af02      	add	r7, sp, #8
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80171e2:	f000 f92d 	bl	8017440 <lwip_init>

  tcpip_init_done = initfunc;
 80171e6:	4a17      	ldr	r2, [pc, #92]	; (8017244 <tcpip_init+0x6c>)
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80171ec:	4a16      	ldr	r2, [pc, #88]	; (8017248 <tcpip_init+0x70>)
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80171f2:	2106      	movs	r1, #6
 80171f4:	4815      	ldr	r0, [pc, #84]	; (801724c <tcpip_init+0x74>)
 80171f6:	f00b f8ef 	bl	80223d8 <sys_mbox_new>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d006      	beq.n	801720e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017200:	4b13      	ldr	r3, [pc, #76]	; (8017250 <tcpip_init+0x78>)
 8017202:	f240 2261 	movw	r2, #609	; 0x261
 8017206:	4913      	ldr	r1, [pc, #76]	; (8017254 <tcpip_init+0x7c>)
 8017208:	4813      	ldr	r0, [pc, #76]	; (8017258 <tcpip_init+0x80>)
 801720a:	f00b fdf5 	bl	8022df8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801720e:	4813      	ldr	r0, [pc, #76]	; (801725c <tcpip_init+0x84>)
 8017210:	f00b fa28 	bl	8022664 <sys_mutex_new>
 8017214:	4603      	mov	r3, r0
 8017216:	2b00      	cmp	r3, #0
 8017218:	d006      	beq.n	8017228 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801721a:	4b0d      	ldr	r3, [pc, #52]	; (8017250 <tcpip_init+0x78>)
 801721c:	f240 2265 	movw	r2, #613	; 0x265
 8017220:	490f      	ldr	r1, [pc, #60]	; (8017260 <tcpip_init+0x88>)
 8017222:	480d      	ldr	r0, [pc, #52]	; (8017258 <tcpip_init+0x80>)
 8017224:	f00b fde8 	bl	8022df8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8017228:	2318      	movs	r3, #24
 801722a:	9300      	str	r3, [sp, #0]
 801722c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017230:	2200      	movs	r2, #0
 8017232:	490c      	ldr	r1, [pc, #48]	; (8017264 <tcpip_init+0x8c>)
 8017234:	480c      	ldr	r0, [pc, #48]	; (8017268 <tcpip_init+0x90>)
 8017236:	f00b fa47 	bl	80226c8 <sys_thread_new>
}
 801723a:	bf00      	nop
 801723c:	3708      	adds	r7, #8
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}
 8017242:	bf00      	nop
 8017244:	2005eb84 	.word	0x2005eb84
 8017248:	2005eb88 	.word	0x2005eb88
 801724c:	2005eb8c 	.word	0x2005eb8c
 8017250:	08024de4 	.word	0x08024de4
 8017254:	08024e6c 	.word	0x08024e6c
 8017258:	08024e34 	.word	0x08024e34
 801725c:	2005eb90 	.word	0x2005eb90
 8017260:	08024e90 	.word	0x08024e90
 8017264:	08016f69 	.word	0x08016f69
 8017268:	08024eb4 	.word	0x08024eb4

0801726c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801726c:	b480      	push	{r7}
 801726e:	b083      	sub	sp, #12
 8017270:	af00      	add	r7, sp, #0
 8017272:	4603      	mov	r3, r0
 8017274:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8017276:	88fb      	ldrh	r3, [r7, #6]
 8017278:	021b      	lsls	r3, r3, #8
 801727a:	b21a      	sxth	r2, r3
 801727c:	88fb      	ldrh	r3, [r7, #6]
 801727e:	0a1b      	lsrs	r3, r3, #8
 8017280:	b29b      	uxth	r3, r3
 8017282:	b21b      	sxth	r3, r3
 8017284:	4313      	orrs	r3, r2
 8017286:	b21b      	sxth	r3, r3
 8017288:	b29b      	uxth	r3, r3
}
 801728a:	4618      	mov	r0, r3
 801728c:	370c      	adds	r7, #12
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr

08017296 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8017296:	b480      	push	{r7}
 8017298:	b083      	sub	sp, #12
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	061a      	lsls	r2, r3, #24
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	021b      	lsls	r3, r3, #8
 80172a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80172aa:	431a      	orrs	r2, r3
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	0a1b      	lsrs	r3, r3, #8
 80172b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80172b4:	431a      	orrs	r2, r3
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	0e1b      	lsrs	r3, r3, #24
 80172ba:	4313      	orrs	r3, r2
}
 80172bc:	4618      	mov	r0, r3
 80172be:	370c      	adds	r7, #12
 80172c0:	46bd      	mov	sp, r7
 80172c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c6:	4770      	bx	lr

080172c8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80172c8:	b480      	push	{r7}
 80172ca:	b089      	sub	sp, #36	; 0x24
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
 80172d0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80172d6:	2300      	movs	r3, #0
 80172d8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80172da:	2300      	movs	r3, #0
 80172dc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80172de:	69fb      	ldr	r3, [r7, #28]
 80172e0:	f003 0301 	and.w	r3, r3, #1
 80172e4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80172e6:	693b      	ldr	r3, [r7, #16]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d00d      	beq.n	8017308 <lwip_standard_chksum+0x40>
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	dd0a      	ble.n	8017308 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80172f2:	69fa      	ldr	r2, [r7, #28]
 80172f4:	1c53      	adds	r3, r2, #1
 80172f6:	61fb      	str	r3, [r7, #28]
 80172f8:	f107 030e 	add.w	r3, r7, #14
 80172fc:	3301      	adds	r3, #1
 80172fe:	7812      	ldrb	r2, [r2, #0]
 8017300:	701a      	strb	r2, [r3, #0]
    len--;
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	3b01      	subs	r3, #1
 8017306:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8017308:	69fb      	ldr	r3, [r7, #28]
 801730a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801730c:	e00a      	b.n	8017324 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801730e:	69bb      	ldr	r3, [r7, #24]
 8017310:	1c9a      	adds	r2, r3, #2
 8017312:	61ba      	str	r2, [r7, #24]
 8017314:	881b      	ldrh	r3, [r3, #0]
 8017316:	461a      	mov	r2, r3
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	4413      	add	r3, r2
 801731c:	617b      	str	r3, [r7, #20]
    len -= 2;
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	3b02      	subs	r3, #2
 8017322:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	2b01      	cmp	r3, #1
 8017328:	dcf1      	bgt.n	801730e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801732a:	683b      	ldr	r3, [r7, #0]
 801732c:	2b00      	cmp	r3, #0
 801732e:	dd04      	ble.n	801733a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8017330:	f107 030e 	add.w	r3, r7, #14
 8017334:	69ba      	ldr	r2, [r7, #24]
 8017336:	7812      	ldrb	r2, [r2, #0]
 8017338:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801733a:	89fb      	ldrh	r3, [r7, #14]
 801733c:	461a      	mov	r2, r3
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	4413      	add	r3, r2
 8017342:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	0c1a      	lsrs	r2, r3, #16
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	b29b      	uxth	r3, r3
 801734c:	4413      	add	r3, r2
 801734e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8017350:	697b      	ldr	r3, [r7, #20]
 8017352:	0c1a      	lsrs	r2, r3, #16
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	b29b      	uxth	r3, r3
 8017358:	4413      	add	r3, r2
 801735a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801735c:	693b      	ldr	r3, [r7, #16]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d007      	beq.n	8017372 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	021b      	lsls	r3, r3, #8
 8017366:	b29a      	uxth	r2, r3
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	0a1b      	lsrs	r3, r3, #8
 801736c:	b2db      	uxtb	r3, r3
 801736e:	4313      	orrs	r3, r2
 8017370:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	b29b      	uxth	r3, r3
}
 8017376:	4618      	mov	r0, r3
 8017378:	3724      	adds	r7, #36	; 0x24
 801737a:	46bd      	mov	sp, r7
 801737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017380:	4770      	bx	lr

08017382 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8017382:	b580      	push	{r7, lr}
 8017384:	b082      	sub	sp, #8
 8017386:	af00      	add	r7, sp, #0
 8017388:	6078      	str	r0, [r7, #4]
 801738a:	460b      	mov	r3, r1
 801738c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801738e:	887b      	ldrh	r3, [r7, #2]
 8017390:	4619      	mov	r1, r3
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f7ff ff98 	bl	80172c8 <lwip_standard_chksum>
 8017398:	4603      	mov	r3, r0
 801739a:	43db      	mvns	r3, r3
 801739c:	b29b      	uxth	r3, r3
}
 801739e:	4618      	mov	r0, r3
 80173a0:	3708      	adds	r7, #8
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bd80      	pop	{r7, pc}

080173a6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80173a6:	b580      	push	{r7, lr}
 80173a8:	b086      	sub	sp, #24
 80173aa:	af00      	add	r7, sp, #0
 80173ac:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80173ae:	2300      	movs	r3, #0
 80173b0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80173b2:	2300      	movs	r3, #0
 80173b4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	613b      	str	r3, [r7, #16]
 80173ba:	e02b      	b.n	8017414 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	685a      	ldr	r2, [r3, #4]
 80173c0:	693b      	ldr	r3, [r7, #16]
 80173c2:	895b      	ldrh	r3, [r3, #10]
 80173c4:	4619      	mov	r1, r3
 80173c6:	4610      	mov	r0, r2
 80173c8:	f7ff ff7e 	bl	80172c8 <lwip_standard_chksum>
 80173cc:	4603      	mov	r3, r0
 80173ce:	461a      	mov	r2, r3
 80173d0:	697b      	ldr	r3, [r7, #20]
 80173d2:	4413      	add	r3, r2
 80173d4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80173d6:	697b      	ldr	r3, [r7, #20]
 80173d8:	0c1a      	lsrs	r2, r3, #16
 80173da:	697b      	ldr	r3, [r7, #20]
 80173dc:	b29b      	uxth	r3, r3
 80173de:	4413      	add	r3, r2
 80173e0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80173e2:	693b      	ldr	r3, [r7, #16]
 80173e4:	895b      	ldrh	r3, [r3, #10]
 80173e6:	f003 0301 	and.w	r3, r3, #1
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d00e      	beq.n	801740e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	bf0c      	ite	eq
 80173f6:	2301      	moveq	r3, #1
 80173f8:	2300      	movne	r3, #0
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80173fe:	697b      	ldr	r3, [r7, #20]
 8017400:	021b      	lsls	r3, r3, #8
 8017402:	b29a      	uxth	r2, r3
 8017404:	697b      	ldr	r3, [r7, #20]
 8017406:	0a1b      	lsrs	r3, r3, #8
 8017408:	b2db      	uxtb	r3, r3
 801740a:	4313      	orrs	r3, r2
 801740c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801740e:	693b      	ldr	r3, [r7, #16]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	613b      	str	r3, [r7, #16]
 8017414:	693b      	ldr	r3, [r7, #16]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d1d0      	bne.n	80173bc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d007      	beq.n	8017430 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	021b      	lsls	r3, r3, #8
 8017424:	b29a      	uxth	r2, r3
 8017426:	697b      	ldr	r3, [r7, #20]
 8017428:	0a1b      	lsrs	r3, r3, #8
 801742a:	b2db      	uxtb	r3, r3
 801742c:	4313      	orrs	r3, r2
 801742e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	b29b      	uxth	r3, r3
 8017434:	43db      	mvns	r3, r3
 8017436:	b29b      	uxth	r3, r3
}
 8017438:	4618      	mov	r0, r3
 801743a:	3718      	adds	r7, #24
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8017446:	2300      	movs	r3, #0
 8017448:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801744a:	f00b f8ff 	bl	802264c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801744e:	f000 f8d5 	bl	80175fc <mem_init>
  memp_init();
 8017452:	f000 fc2d 	bl	8017cb0 <memp_init>
  pbuf_init();
  netif_init();
 8017456:	f000 fd39 	bl	8017ecc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801745a:	f008 f963 	bl	801f724 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801745e:	f001 fe49 	bl	80190f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8017462:	f008 f8a5 	bl	801f5b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8017466:	bf00      	nop
 8017468:	3708      	adds	r7, #8
 801746a:	46bd      	mov	sp, r7
 801746c:	bd80      	pop	{r7, pc}
	...

08017470 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8017470:	b480      	push	{r7}
 8017472:	b083      	sub	sp, #12
 8017474:	af00      	add	r7, sp, #0
 8017476:	4603      	mov	r3, r0
 8017478:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801747a:	4b05      	ldr	r3, [pc, #20]	; (8017490 <ptr_to_mem+0x20>)
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	88fb      	ldrh	r3, [r7, #6]
 8017480:	4413      	add	r3, r2
}
 8017482:	4618      	mov	r0, r3
 8017484:	370c      	adds	r7, #12
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop
 8017490:	2005ebac 	.word	0x2005ebac

08017494 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8017494:	b480      	push	{r7}
 8017496:	b083      	sub	sp, #12
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801749c:	4b05      	ldr	r3, [pc, #20]	; (80174b4 <mem_to_ptr+0x20>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	687a      	ldr	r2, [r7, #4]
 80174a2:	1ad3      	subs	r3, r2, r3
 80174a4:	b29b      	uxth	r3, r3
}
 80174a6:	4618      	mov	r0, r3
 80174a8:	370c      	adds	r7, #12
 80174aa:	46bd      	mov	sp, r7
 80174ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b0:	4770      	bx	lr
 80174b2:	bf00      	nop
 80174b4:	2005ebac 	.word	0x2005ebac

080174b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80174b8:	b590      	push	{r4, r7, lr}
 80174ba:	b085      	sub	sp, #20
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80174c0:	4b45      	ldr	r3, [pc, #276]	; (80175d8 <plug_holes+0x120>)
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	687a      	ldr	r2, [r7, #4]
 80174c6:	429a      	cmp	r2, r3
 80174c8:	d206      	bcs.n	80174d8 <plug_holes+0x20>
 80174ca:	4b44      	ldr	r3, [pc, #272]	; (80175dc <plug_holes+0x124>)
 80174cc:	f240 12df 	movw	r2, #479	; 0x1df
 80174d0:	4943      	ldr	r1, [pc, #268]	; (80175e0 <plug_holes+0x128>)
 80174d2:	4844      	ldr	r0, [pc, #272]	; (80175e4 <plug_holes+0x12c>)
 80174d4:	f00b fc90 	bl	8022df8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80174d8:	4b43      	ldr	r3, [pc, #268]	; (80175e8 <plug_holes+0x130>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	687a      	ldr	r2, [r7, #4]
 80174de:	429a      	cmp	r2, r3
 80174e0:	d306      	bcc.n	80174f0 <plug_holes+0x38>
 80174e2:	4b3e      	ldr	r3, [pc, #248]	; (80175dc <plug_holes+0x124>)
 80174e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80174e8:	4940      	ldr	r1, [pc, #256]	; (80175ec <plug_holes+0x134>)
 80174ea:	483e      	ldr	r0, [pc, #248]	; (80175e4 <plug_holes+0x12c>)
 80174ec:	f00b fc84 	bl	8022df8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	791b      	ldrb	r3, [r3, #4]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d006      	beq.n	8017506 <plug_holes+0x4e>
 80174f8:	4b38      	ldr	r3, [pc, #224]	; (80175dc <plug_holes+0x124>)
 80174fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80174fe:	493c      	ldr	r1, [pc, #240]	; (80175f0 <plug_holes+0x138>)
 8017500:	4838      	ldr	r0, [pc, #224]	; (80175e4 <plug_holes+0x12c>)
 8017502:	f00b fc79 	bl	8022df8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	881b      	ldrh	r3, [r3, #0]
 801750a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801750e:	d906      	bls.n	801751e <plug_holes+0x66>
 8017510:	4b32      	ldr	r3, [pc, #200]	; (80175dc <plug_holes+0x124>)
 8017512:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8017516:	4937      	ldr	r1, [pc, #220]	; (80175f4 <plug_holes+0x13c>)
 8017518:	4832      	ldr	r0, [pc, #200]	; (80175e4 <plug_holes+0x12c>)
 801751a:	f00b fc6d 	bl	8022df8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	881b      	ldrh	r3, [r3, #0]
 8017522:	4618      	mov	r0, r3
 8017524:	f7ff ffa4 	bl	8017470 <ptr_to_mem>
 8017528:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	429a      	cmp	r2, r3
 8017530:	d024      	beq.n	801757c <plug_holes+0xc4>
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	791b      	ldrb	r3, [r3, #4]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d120      	bne.n	801757c <plug_holes+0xc4>
 801753a:	4b2b      	ldr	r3, [pc, #172]	; (80175e8 <plug_holes+0x130>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	68fa      	ldr	r2, [r7, #12]
 8017540:	429a      	cmp	r2, r3
 8017542:	d01b      	beq.n	801757c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8017544:	4b2c      	ldr	r3, [pc, #176]	; (80175f8 <plug_holes+0x140>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	68fa      	ldr	r2, [r7, #12]
 801754a:	429a      	cmp	r2, r3
 801754c:	d102      	bne.n	8017554 <plug_holes+0x9c>
      lfree = mem;
 801754e:	4a2a      	ldr	r2, [pc, #168]	; (80175f8 <plug_holes+0x140>)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	881a      	ldrh	r2, [r3, #0]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	881b      	ldrh	r3, [r3, #0]
 8017560:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017564:	d00a      	beq.n	801757c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	881b      	ldrh	r3, [r3, #0]
 801756a:	4618      	mov	r0, r3
 801756c:	f7ff ff80 	bl	8017470 <ptr_to_mem>
 8017570:	4604      	mov	r4, r0
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	f7ff ff8e 	bl	8017494 <mem_to_ptr>
 8017578:	4603      	mov	r3, r0
 801757a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	885b      	ldrh	r3, [r3, #2]
 8017580:	4618      	mov	r0, r3
 8017582:	f7ff ff75 	bl	8017470 <ptr_to_mem>
 8017586:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8017588:	68ba      	ldr	r2, [r7, #8]
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	429a      	cmp	r2, r3
 801758e:	d01f      	beq.n	80175d0 <plug_holes+0x118>
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	791b      	ldrb	r3, [r3, #4]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d11b      	bne.n	80175d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017598:	4b17      	ldr	r3, [pc, #92]	; (80175f8 <plug_holes+0x140>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d102      	bne.n	80175a8 <plug_holes+0xf0>
      lfree = pmem;
 80175a2:	4a15      	ldr	r2, [pc, #84]	; (80175f8 <plug_holes+0x140>)
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	881a      	ldrh	r2, [r3, #0]
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	881b      	ldrh	r3, [r3, #0]
 80175b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80175b8:	d00a      	beq.n	80175d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	881b      	ldrh	r3, [r3, #0]
 80175be:	4618      	mov	r0, r3
 80175c0:	f7ff ff56 	bl	8017470 <ptr_to_mem>
 80175c4:	4604      	mov	r4, r0
 80175c6:	68b8      	ldr	r0, [r7, #8]
 80175c8:	f7ff ff64 	bl	8017494 <mem_to_ptr>
 80175cc:	4603      	mov	r3, r0
 80175ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80175d0:	bf00      	nop
 80175d2:	3714      	adds	r7, #20
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd90      	pop	{r4, r7, pc}
 80175d8:	2005ebac 	.word	0x2005ebac
 80175dc:	08024ec4 	.word	0x08024ec4
 80175e0:	08024ef4 	.word	0x08024ef4
 80175e4:	08024f0c 	.word	0x08024f0c
 80175e8:	2005ebb0 	.word	0x2005ebb0
 80175ec:	08024f34 	.word	0x08024f34
 80175f0:	08024f50 	.word	0x08024f50
 80175f4:	08024f6c 	.word	0x08024f6c
 80175f8:	2005ebb8 	.word	0x2005ebb8

080175fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8017602:	4b1d      	ldr	r3, [pc, #116]	; (8017678 <mem_init+0x7c>)
 8017604:	4a1d      	ldr	r2, [pc, #116]	; (801767c <mem_init+0x80>)
 8017606:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8017608:	4b1b      	ldr	r3, [pc, #108]	; (8017678 <mem_init+0x7c>)
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8017614:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	2200      	movs	r2, #0
 801761a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2200      	movs	r2, #0
 8017620:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8017622:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8017626:	f7ff ff23 	bl	8017470 <ptr_to_mem>
 801762a:	4603      	mov	r3, r0
 801762c:	4a14      	ldr	r2, [pc, #80]	; (8017680 <mem_init+0x84>)
 801762e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8017630:	4b13      	ldr	r3, [pc, #76]	; (8017680 <mem_init+0x84>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	2201      	movs	r2, #1
 8017636:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017638:	4b11      	ldr	r3, [pc, #68]	; (8017680 <mem_init+0x84>)
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8017640:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017642:	4b0f      	ldr	r3, [pc, #60]	; (8017680 <mem_init+0x84>)
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801764a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801764c:	4b0a      	ldr	r3, [pc, #40]	; (8017678 <mem_init+0x7c>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	4a0c      	ldr	r2, [pc, #48]	; (8017684 <mem_init+0x88>)
 8017652:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017654:	480c      	ldr	r0, [pc, #48]	; (8017688 <mem_init+0x8c>)
 8017656:	f00b f805 	bl	8022664 <sys_mutex_new>
 801765a:	4603      	mov	r3, r0
 801765c:	2b00      	cmp	r3, #0
 801765e:	d006      	beq.n	801766e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017660:	4b0a      	ldr	r3, [pc, #40]	; (801768c <mem_init+0x90>)
 8017662:	f240 221f 	movw	r2, #543	; 0x21f
 8017666:	490a      	ldr	r1, [pc, #40]	; (8017690 <mem_init+0x94>)
 8017668:	480a      	ldr	r0, [pc, #40]	; (8017694 <mem_init+0x98>)
 801766a:	f00b fbc5 	bl	8022df8 <iprintf>
  }
}
 801766e:	bf00      	nop
 8017670:	3708      	adds	r7, #8
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	2005ebac 	.word	0x2005ebac
 801767c:	20044000 	.word	0x20044000
 8017680:	2005ebb0 	.word	0x2005ebb0
 8017684:	2005ebb8 	.word	0x2005ebb8
 8017688:	2005ebb4 	.word	0x2005ebb4
 801768c:	08024ec4 	.word	0x08024ec4
 8017690:	08024f98 	.word	0x08024f98
 8017694:	08024f0c 	.word	0x08024f0c

08017698 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b086      	sub	sp, #24
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7ff fef7 	bl	8017494 <mem_to_ptr>
 80176a6:	4603      	mov	r3, r0
 80176a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	881b      	ldrh	r3, [r3, #0]
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7ff fede 	bl	8017470 <ptr_to_mem>
 80176b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	885b      	ldrh	r3, [r3, #2]
 80176ba:	4618      	mov	r0, r3
 80176bc:	f7ff fed8 	bl	8017470 <ptr_to_mem>
 80176c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	881b      	ldrh	r3, [r3, #0]
 80176c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80176ca:	d818      	bhi.n	80176fe <mem_link_valid+0x66>
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	885b      	ldrh	r3, [r3, #2]
 80176d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80176d4:	d813      	bhi.n	80176fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80176da:	8afa      	ldrh	r2, [r7, #22]
 80176dc:	429a      	cmp	r2, r3
 80176de:	d004      	beq.n	80176ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	881b      	ldrh	r3, [r3, #0]
 80176e4:	8afa      	ldrh	r2, [r7, #22]
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d109      	bne.n	80176fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80176ea:	4b08      	ldr	r3, [pc, #32]	; (801770c <mem_link_valid+0x74>)
 80176ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80176ee:	693a      	ldr	r2, [r7, #16]
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d006      	beq.n	8017702 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80176f4:	693b      	ldr	r3, [r7, #16]
 80176f6:	885b      	ldrh	r3, [r3, #2]
 80176f8:	8afa      	ldrh	r2, [r7, #22]
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d001      	beq.n	8017702 <mem_link_valid+0x6a>
    return 0;
 80176fe:	2300      	movs	r3, #0
 8017700:	e000      	b.n	8017704 <mem_link_valid+0x6c>
  }
  return 1;
 8017702:	2301      	movs	r3, #1
}
 8017704:	4618      	mov	r0, r3
 8017706:	3718      	adds	r7, #24
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}
 801770c:	2005ebb0 	.word	0x2005ebb0

08017710 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b088      	sub	sp, #32
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d070      	beq.n	8017800 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	f003 0303 	and.w	r3, r3, #3
 8017724:	2b00      	cmp	r3, #0
 8017726:	d00d      	beq.n	8017744 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8017728:	4b37      	ldr	r3, [pc, #220]	; (8017808 <mem_free+0xf8>)
 801772a:	f240 2273 	movw	r2, #627	; 0x273
 801772e:	4937      	ldr	r1, [pc, #220]	; (801780c <mem_free+0xfc>)
 8017730:	4837      	ldr	r0, [pc, #220]	; (8017810 <mem_free+0x100>)
 8017732:	f00b fb61 	bl	8022df8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017736:	f00a ffe7 	bl	8022708 <sys_arch_protect>
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	68f8      	ldr	r0, [r7, #12]
 801773e:	f00a fff1 	bl	8022724 <sys_arch_unprotect>
    return;
 8017742:	e05e      	b.n	8017802 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	3b08      	subs	r3, #8
 8017748:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801774a:	4b32      	ldr	r3, [pc, #200]	; (8017814 <mem_free+0x104>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	69fa      	ldr	r2, [r7, #28]
 8017750:	429a      	cmp	r2, r3
 8017752:	d306      	bcc.n	8017762 <mem_free+0x52>
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f103 020c 	add.w	r2, r3, #12
 801775a:	4b2f      	ldr	r3, [pc, #188]	; (8017818 <mem_free+0x108>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	429a      	cmp	r2, r3
 8017760:	d90d      	bls.n	801777e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8017762:	4b29      	ldr	r3, [pc, #164]	; (8017808 <mem_free+0xf8>)
 8017764:	f240 227f 	movw	r2, #639	; 0x27f
 8017768:	492c      	ldr	r1, [pc, #176]	; (801781c <mem_free+0x10c>)
 801776a:	4829      	ldr	r0, [pc, #164]	; (8017810 <mem_free+0x100>)
 801776c:	f00b fb44 	bl	8022df8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017770:	f00a ffca 	bl	8022708 <sys_arch_protect>
 8017774:	6138      	str	r0, [r7, #16]
 8017776:	6938      	ldr	r0, [r7, #16]
 8017778:	f00a ffd4 	bl	8022724 <sys_arch_unprotect>
    return;
 801777c:	e041      	b.n	8017802 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801777e:	4828      	ldr	r0, [pc, #160]	; (8017820 <mem_free+0x110>)
 8017780:	f00a ff86 	bl	8022690 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8017784:	69fb      	ldr	r3, [r7, #28]
 8017786:	791b      	ldrb	r3, [r3, #4]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d110      	bne.n	80177ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801778c:	4b1e      	ldr	r3, [pc, #120]	; (8017808 <mem_free+0xf8>)
 801778e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8017792:	4924      	ldr	r1, [pc, #144]	; (8017824 <mem_free+0x114>)
 8017794:	481e      	ldr	r0, [pc, #120]	; (8017810 <mem_free+0x100>)
 8017796:	f00b fb2f 	bl	8022df8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801779a:	4821      	ldr	r0, [pc, #132]	; (8017820 <mem_free+0x110>)
 801779c:	f00a ff87 	bl	80226ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80177a0:	f00a ffb2 	bl	8022708 <sys_arch_protect>
 80177a4:	6178      	str	r0, [r7, #20]
 80177a6:	6978      	ldr	r0, [r7, #20]
 80177a8:	f00a ffbc 	bl	8022724 <sys_arch_unprotect>
    return;
 80177ac:	e029      	b.n	8017802 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80177ae:	69f8      	ldr	r0, [r7, #28]
 80177b0:	f7ff ff72 	bl	8017698 <mem_link_valid>
 80177b4:	4603      	mov	r3, r0
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d110      	bne.n	80177dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80177ba:	4b13      	ldr	r3, [pc, #76]	; (8017808 <mem_free+0xf8>)
 80177bc:	f240 2295 	movw	r2, #661	; 0x295
 80177c0:	4919      	ldr	r1, [pc, #100]	; (8017828 <mem_free+0x118>)
 80177c2:	4813      	ldr	r0, [pc, #76]	; (8017810 <mem_free+0x100>)
 80177c4:	f00b fb18 	bl	8022df8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80177c8:	4815      	ldr	r0, [pc, #84]	; (8017820 <mem_free+0x110>)
 80177ca:	f00a ff70 	bl	80226ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80177ce:	f00a ff9b 	bl	8022708 <sys_arch_protect>
 80177d2:	61b8      	str	r0, [r7, #24]
 80177d4:	69b8      	ldr	r0, [r7, #24]
 80177d6:	f00a ffa5 	bl	8022724 <sys_arch_unprotect>
    return;
 80177da:	e012      	b.n	8017802 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80177dc:	69fb      	ldr	r3, [r7, #28]
 80177de:	2200      	movs	r2, #0
 80177e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80177e2:	4b12      	ldr	r3, [pc, #72]	; (801782c <mem_free+0x11c>)
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	69fa      	ldr	r2, [r7, #28]
 80177e8:	429a      	cmp	r2, r3
 80177ea:	d202      	bcs.n	80177f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80177ec:	4a0f      	ldr	r2, [pc, #60]	; (801782c <mem_free+0x11c>)
 80177ee:	69fb      	ldr	r3, [r7, #28]
 80177f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80177f2:	69f8      	ldr	r0, [r7, #28]
 80177f4:	f7ff fe60 	bl	80174b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80177f8:	4809      	ldr	r0, [pc, #36]	; (8017820 <mem_free+0x110>)
 80177fa:	f00a ff58 	bl	80226ae <sys_mutex_unlock>
 80177fe:	e000      	b.n	8017802 <mem_free+0xf2>
    return;
 8017800:	bf00      	nop
}
 8017802:	3720      	adds	r7, #32
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}
 8017808:	08024ec4 	.word	0x08024ec4
 801780c:	08024fb4 	.word	0x08024fb4
 8017810:	08024f0c 	.word	0x08024f0c
 8017814:	2005ebac 	.word	0x2005ebac
 8017818:	2005ebb0 	.word	0x2005ebb0
 801781c:	08024fd8 	.word	0x08024fd8
 8017820:	2005ebb4 	.word	0x2005ebb4
 8017824:	08024ff4 	.word	0x08024ff4
 8017828:	0802501c 	.word	0x0802501c
 801782c:	2005ebb8 	.word	0x2005ebb8

08017830 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b088      	sub	sp, #32
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
 8017838:	460b      	mov	r3, r1
 801783a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801783c:	887b      	ldrh	r3, [r7, #2]
 801783e:	3303      	adds	r3, #3
 8017840:	b29b      	uxth	r3, r3
 8017842:	f023 0303 	bic.w	r3, r3, #3
 8017846:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017848:	8bfb      	ldrh	r3, [r7, #30]
 801784a:	2b0b      	cmp	r3, #11
 801784c:	d801      	bhi.n	8017852 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801784e:	230c      	movs	r3, #12
 8017850:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8017852:	8bfb      	ldrh	r3, [r7, #30]
 8017854:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017858:	d803      	bhi.n	8017862 <mem_trim+0x32>
 801785a:	8bfa      	ldrh	r2, [r7, #30]
 801785c:	887b      	ldrh	r3, [r7, #2]
 801785e:	429a      	cmp	r2, r3
 8017860:	d201      	bcs.n	8017866 <mem_trim+0x36>
    return NULL;
 8017862:	2300      	movs	r3, #0
 8017864:	e0d8      	b.n	8017a18 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017866:	4b6e      	ldr	r3, [pc, #440]	; (8017a20 <mem_trim+0x1f0>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	429a      	cmp	r2, r3
 801786e:	d304      	bcc.n	801787a <mem_trim+0x4a>
 8017870:	4b6c      	ldr	r3, [pc, #432]	; (8017a24 <mem_trim+0x1f4>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	687a      	ldr	r2, [r7, #4]
 8017876:	429a      	cmp	r2, r3
 8017878:	d306      	bcc.n	8017888 <mem_trim+0x58>
 801787a:	4b6b      	ldr	r3, [pc, #428]	; (8017a28 <mem_trim+0x1f8>)
 801787c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017880:	496a      	ldr	r1, [pc, #424]	; (8017a2c <mem_trim+0x1fc>)
 8017882:	486b      	ldr	r0, [pc, #428]	; (8017a30 <mem_trim+0x200>)
 8017884:	f00b fab8 	bl	8022df8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017888:	4b65      	ldr	r3, [pc, #404]	; (8017a20 <mem_trim+0x1f0>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	687a      	ldr	r2, [r7, #4]
 801788e:	429a      	cmp	r2, r3
 8017890:	d304      	bcc.n	801789c <mem_trim+0x6c>
 8017892:	4b64      	ldr	r3, [pc, #400]	; (8017a24 <mem_trim+0x1f4>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	687a      	ldr	r2, [r7, #4]
 8017898:	429a      	cmp	r2, r3
 801789a:	d307      	bcc.n	80178ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801789c:	f00a ff34 	bl	8022708 <sys_arch_protect>
 80178a0:	60b8      	str	r0, [r7, #8]
 80178a2:	68b8      	ldr	r0, [r7, #8]
 80178a4:	f00a ff3e 	bl	8022724 <sys_arch_unprotect>
    return rmem;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	e0b5      	b.n	8017a18 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	3b08      	subs	r3, #8
 80178b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80178b2:	69b8      	ldr	r0, [r7, #24]
 80178b4:	f7ff fdee 	bl	8017494 <mem_to_ptr>
 80178b8:	4603      	mov	r3, r0
 80178ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	881a      	ldrh	r2, [r3, #0]
 80178c0:	8afb      	ldrh	r3, [r7, #22]
 80178c2:	1ad3      	subs	r3, r2, r3
 80178c4:	b29b      	uxth	r3, r3
 80178c6:	3b08      	subs	r3, #8
 80178c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80178ca:	8bfa      	ldrh	r2, [r7, #30]
 80178cc:	8abb      	ldrh	r3, [r7, #20]
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d906      	bls.n	80178e0 <mem_trim+0xb0>
 80178d2:	4b55      	ldr	r3, [pc, #340]	; (8017a28 <mem_trim+0x1f8>)
 80178d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80178d8:	4956      	ldr	r1, [pc, #344]	; (8017a34 <mem_trim+0x204>)
 80178da:	4855      	ldr	r0, [pc, #340]	; (8017a30 <mem_trim+0x200>)
 80178dc:	f00b fa8c 	bl	8022df8 <iprintf>
  if (newsize > size) {
 80178e0:	8bfa      	ldrh	r2, [r7, #30]
 80178e2:	8abb      	ldrh	r3, [r7, #20]
 80178e4:	429a      	cmp	r2, r3
 80178e6:	d901      	bls.n	80178ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80178e8:	2300      	movs	r3, #0
 80178ea:	e095      	b.n	8017a18 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80178ec:	8bfa      	ldrh	r2, [r7, #30]
 80178ee:	8abb      	ldrh	r3, [r7, #20]
 80178f0:	429a      	cmp	r2, r3
 80178f2:	d101      	bne.n	80178f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	e08f      	b.n	8017a18 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80178f8:	484f      	ldr	r0, [pc, #316]	; (8017a38 <mem_trim+0x208>)
 80178fa:	f00a fec9 	bl	8022690 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80178fe:	69bb      	ldr	r3, [r7, #24]
 8017900:	881b      	ldrh	r3, [r3, #0]
 8017902:	4618      	mov	r0, r3
 8017904:	f7ff fdb4 	bl	8017470 <ptr_to_mem>
 8017908:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801790a:	693b      	ldr	r3, [r7, #16]
 801790c:	791b      	ldrb	r3, [r3, #4]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d13f      	bne.n	8017992 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017912:	69bb      	ldr	r3, [r7, #24]
 8017914:	881b      	ldrh	r3, [r3, #0]
 8017916:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801791a:	d106      	bne.n	801792a <mem_trim+0xfa>
 801791c:	4b42      	ldr	r3, [pc, #264]	; (8017a28 <mem_trim+0x1f8>)
 801791e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017922:	4946      	ldr	r1, [pc, #280]	; (8017a3c <mem_trim+0x20c>)
 8017924:	4842      	ldr	r0, [pc, #264]	; (8017a30 <mem_trim+0x200>)
 8017926:	f00b fa67 	bl	8022df8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	881b      	ldrh	r3, [r3, #0]
 801792e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017930:	8afa      	ldrh	r2, [r7, #22]
 8017932:	8bfb      	ldrh	r3, [r7, #30]
 8017934:	4413      	add	r3, r2
 8017936:	b29b      	uxth	r3, r3
 8017938:	3308      	adds	r3, #8
 801793a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801793c:	4b40      	ldr	r3, [pc, #256]	; (8017a40 <mem_trim+0x210>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	693a      	ldr	r2, [r7, #16]
 8017942:	429a      	cmp	r2, r3
 8017944:	d106      	bne.n	8017954 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8017946:	89fb      	ldrh	r3, [r7, #14]
 8017948:	4618      	mov	r0, r3
 801794a:	f7ff fd91 	bl	8017470 <ptr_to_mem>
 801794e:	4603      	mov	r3, r0
 8017950:	4a3b      	ldr	r2, [pc, #236]	; (8017a40 <mem_trim+0x210>)
 8017952:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017954:	89fb      	ldrh	r3, [r7, #14]
 8017956:	4618      	mov	r0, r3
 8017958:	f7ff fd8a 	bl	8017470 <ptr_to_mem>
 801795c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801795e:	693b      	ldr	r3, [r7, #16]
 8017960:	2200      	movs	r2, #0
 8017962:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017964:	693b      	ldr	r3, [r7, #16]
 8017966:	89ba      	ldrh	r2, [r7, #12]
 8017968:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	8afa      	ldrh	r2, [r7, #22]
 801796e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017970:	69bb      	ldr	r3, [r7, #24]
 8017972:	89fa      	ldrh	r2, [r7, #14]
 8017974:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017976:	693b      	ldr	r3, [r7, #16]
 8017978:	881b      	ldrh	r3, [r3, #0]
 801797a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801797e:	d047      	beq.n	8017a10 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	881b      	ldrh	r3, [r3, #0]
 8017984:	4618      	mov	r0, r3
 8017986:	f7ff fd73 	bl	8017470 <ptr_to_mem>
 801798a:	4602      	mov	r2, r0
 801798c:	89fb      	ldrh	r3, [r7, #14]
 801798e:	8053      	strh	r3, [r2, #2]
 8017990:	e03e      	b.n	8017a10 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017992:	8bfb      	ldrh	r3, [r7, #30]
 8017994:	f103 0214 	add.w	r2, r3, #20
 8017998:	8abb      	ldrh	r3, [r7, #20]
 801799a:	429a      	cmp	r2, r3
 801799c:	d838      	bhi.n	8017a10 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801799e:	8afa      	ldrh	r2, [r7, #22]
 80179a0:	8bfb      	ldrh	r3, [r7, #30]
 80179a2:	4413      	add	r3, r2
 80179a4:	b29b      	uxth	r3, r3
 80179a6:	3308      	adds	r3, #8
 80179a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80179aa:	69bb      	ldr	r3, [r7, #24]
 80179ac:	881b      	ldrh	r3, [r3, #0]
 80179ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80179b2:	d106      	bne.n	80179c2 <mem_trim+0x192>
 80179b4:	4b1c      	ldr	r3, [pc, #112]	; (8017a28 <mem_trim+0x1f8>)
 80179b6:	f240 3216 	movw	r2, #790	; 0x316
 80179ba:	4920      	ldr	r1, [pc, #128]	; (8017a3c <mem_trim+0x20c>)
 80179bc:	481c      	ldr	r0, [pc, #112]	; (8017a30 <mem_trim+0x200>)
 80179be:	f00b fa1b 	bl	8022df8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80179c2:	89fb      	ldrh	r3, [r7, #14]
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7ff fd53 	bl	8017470 <ptr_to_mem>
 80179ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80179cc:	4b1c      	ldr	r3, [pc, #112]	; (8017a40 <mem_trim+0x210>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	693a      	ldr	r2, [r7, #16]
 80179d2:	429a      	cmp	r2, r3
 80179d4:	d202      	bcs.n	80179dc <mem_trim+0x1ac>
      lfree = mem2;
 80179d6:	4a1a      	ldr	r2, [pc, #104]	; (8017a40 <mem_trim+0x210>)
 80179d8:	693b      	ldr	r3, [r7, #16]
 80179da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80179dc:	693b      	ldr	r3, [r7, #16]
 80179de:	2200      	movs	r2, #0
 80179e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80179e2:	69bb      	ldr	r3, [r7, #24]
 80179e4:	881a      	ldrh	r2, [r3, #0]
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80179ea:	693b      	ldr	r3, [r7, #16]
 80179ec:	8afa      	ldrh	r2, [r7, #22]
 80179ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80179f0:	69bb      	ldr	r3, [r7, #24]
 80179f2:	89fa      	ldrh	r2, [r7, #14]
 80179f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	881b      	ldrh	r3, [r3, #0]
 80179fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80179fe:	d007      	beq.n	8017a10 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	881b      	ldrh	r3, [r3, #0]
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7ff fd33 	bl	8017470 <ptr_to_mem>
 8017a0a:	4602      	mov	r2, r0
 8017a0c:	89fb      	ldrh	r3, [r7, #14]
 8017a0e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017a10:	4809      	ldr	r0, [pc, #36]	; (8017a38 <mem_trim+0x208>)
 8017a12:	f00a fe4c 	bl	80226ae <sys_mutex_unlock>
  return rmem;
 8017a16:	687b      	ldr	r3, [r7, #4]
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3720      	adds	r7, #32
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	2005ebac 	.word	0x2005ebac
 8017a24:	2005ebb0 	.word	0x2005ebb0
 8017a28:	08024ec4 	.word	0x08024ec4
 8017a2c:	08025050 	.word	0x08025050
 8017a30:	08024f0c 	.word	0x08024f0c
 8017a34:	08025068 	.word	0x08025068
 8017a38:	2005ebb4 	.word	0x2005ebb4
 8017a3c:	08025088 	.word	0x08025088
 8017a40:	2005ebb8 	.word	0x2005ebb8

08017a44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b088      	sub	sp, #32
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8017a4e:	88fb      	ldrh	r3, [r7, #6]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d101      	bne.n	8017a58 <mem_malloc+0x14>
    return NULL;
 8017a54:	2300      	movs	r3, #0
 8017a56:	e0e2      	b.n	8017c1e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8017a58:	88fb      	ldrh	r3, [r7, #6]
 8017a5a:	3303      	adds	r3, #3
 8017a5c:	b29b      	uxth	r3, r3
 8017a5e:	f023 0303 	bic.w	r3, r3, #3
 8017a62:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017a64:	8bbb      	ldrh	r3, [r7, #28]
 8017a66:	2b0b      	cmp	r3, #11
 8017a68:	d801      	bhi.n	8017a6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017a6a:	230c      	movs	r3, #12
 8017a6c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8017a6e:	8bbb      	ldrh	r3, [r7, #28]
 8017a70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017a74:	d803      	bhi.n	8017a7e <mem_malloc+0x3a>
 8017a76:	8bba      	ldrh	r2, [r7, #28]
 8017a78:	88fb      	ldrh	r3, [r7, #6]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d201      	bcs.n	8017a82 <mem_malloc+0x3e>
    return NULL;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	e0cd      	b.n	8017c1e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017a82:	4869      	ldr	r0, [pc, #420]	; (8017c28 <mem_malloc+0x1e4>)
 8017a84:	f00a fe04 	bl	8022690 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017a88:	4b68      	ldr	r3, [pc, #416]	; (8017c2c <mem_malloc+0x1e8>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7ff fd01 	bl	8017494 <mem_to_ptr>
 8017a92:	4603      	mov	r3, r0
 8017a94:	83fb      	strh	r3, [r7, #30]
 8017a96:	e0b7      	b.n	8017c08 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017a98:	8bfb      	ldrh	r3, [r7, #30]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7ff fce8 	bl	8017470 <ptr_to_mem>
 8017aa0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017aa2:	697b      	ldr	r3, [r7, #20]
 8017aa4:	791b      	ldrb	r3, [r3, #4]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	f040 80a7 	bne.w	8017bfa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	881b      	ldrh	r3, [r3, #0]
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	8bfb      	ldrh	r3, [r7, #30]
 8017ab4:	1ad3      	subs	r3, r2, r3
 8017ab6:	f1a3 0208 	sub.w	r2, r3, #8
 8017aba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017abc:	429a      	cmp	r2, r3
 8017abe:	f0c0 809c 	bcc.w	8017bfa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017ac2:	697b      	ldr	r3, [r7, #20]
 8017ac4:	881b      	ldrh	r3, [r3, #0]
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	8bfb      	ldrh	r3, [r7, #30]
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	f1a3 0208 	sub.w	r2, r3, #8
 8017ad0:	8bbb      	ldrh	r3, [r7, #28]
 8017ad2:	3314      	adds	r3, #20
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	d333      	bcc.n	8017b40 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017ad8:	8bfa      	ldrh	r2, [r7, #30]
 8017ada:	8bbb      	ldrh	r3, [r7, #28]
 8017adc:	4413      	add	r3, r2
 8017ade:	b29b      	uxth	r3, r3
 8017ae0:	3308      	adds	r3, #8
 8017ae2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017ae4:	8a7b      	ldrh	r3, [r7, #18]
 8017ae6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017aea:	d106      	bne.n	8017afa <mem_malloc+0xb6>
 8017aec:	4b50      	ldr	r3, [pc, #320]	; (8017c30 <mem_malloc+0x1ec>)
 8017aee:	f240 3287 	movw	r2, #903	; 0x387
 8017af2:	4950      	ldr	r1, [pc, #320]	; (8017c34 <mem_malloc+0x1f0>)
 8017af4:	4850      	ldr	r0, [pc, #320]	; (8017c38 <mem_malloc+0x1f4>)
 8017af6:	f00b f97f 	bl	8022df8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8017afa:	8a7b      	ldrh	r3, [r7, #18]
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7ff fcb7 	bl	8017470 <ptr_to_mem>
 8017b02:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	2200      	movs	r2, #0
 8017b08:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8017b0a:	697b      	ldr	r3, [r7, #20]
 8017b0c:	881a      	ldrh	r2, [r3, #0]
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	8bfa      	ldrh	r2, [r7, #30]
 8017b16:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8017b18:	697b      	ldr	r3, [r7, #20]
 8017b1a:	8a7a      	ldrh	r2, [r7, #18]
 8017b1c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8017b1e:	697b      	ldr	r3, [r7, #20]
 8017b20:	2201      	movs	r2, #1
 8017b22:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017b2c:	d00b      	beq.n	8017b46 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	881b      	ldrh	r3, [r3, #0]
 8017b32:	4618      	mov	r0, r3
 8017b34:	f7ff fc9c 	bl	8017470 <ptr_to_mem>
 8017b38:	4602      	mov	r2, r0
 8017b3a:	8a7b      	ldrh	r3, [r7, #18]
 8017b3c:	8053      	strh	r3, [r2, #2]
 8017b3e:	e002      	b.n	8017b46 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	2201      	movs	r2, #1
 8017b44:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017b46:	4b39      	ldr	r3, [pc, #228]	; (8017c2c <mem_malloc+0x1e8>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	697a      	ldr	r2, [r7, #20]
 8017b4c:	429a      	cmp	r2, r3
 8017b4e:	d127      	bne.n	8017ba0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8017b50:	4b36      	ldr	r3, [pc, #216]	; (8017c2c <mem_malloc+0x1e8>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8017b56:	e005      	b.n	8017b64 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8017b58:	69bb      	ldr	r3, [r7, #24]
 8017b5a:	881b      	ldrh	r3, [r3, #0]
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7ff fc87 	bl	8017470 <ptr_to_mem>
 8017b62:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8017b64:	69bb      	ldr	r3, [r7, #24]
 8017b66:	791b      	ldrb	r3, [r3, #4]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d004      	beq.n	8017b76 <mem_malloc+0x132>
 8017b6c:	4b33      	ldr	r3, [pc, #204]	; (8017c3c <mem_malloc+0x1f8>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	69ba      	ldr	r2, [r7, #24]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d1f0      	bne.n	8017b58 <mem_malloc+0x114>
          }
          lfree = cur;
 8017b76:	4a2d      	ldr	r2, [pc, #180]	; (8017c2c <mem_malloc+0x1e8>)
 8017b78:	69bb      	ldr	r3, [r7, #24]
 8017b7a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017b7c:	4b2b      	ldr	r3, [pc, #172]	; (8017c2c <mem_malloc+0x1e8>)
 8017b7e:	681a      	ldr	r2, [r3, #0]
 8017b80:	4b2e      	ldr	r3, [pc, #184]	; (8017c3c <mem_malloc+0x1f8>)
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d00b      	beq.n	8017ba0 <mem_malloc+0x15c>
 8017b88:	4b28      	ldr	r3, [pc, #160]	; (8017c2c <mem_malloc+0x1e8>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	791b      	ldrb	r3, [r3, #4]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d006      	beq.n	8017ba0 <mem_malloc+0x15c>
 8017b92:	4b27      	ldr	r3, [pc, #156]	; (8017c30 <mem_malloc+0x1ec>)
 8017b94:	f240 32b5 	movw	r2, #949	; 0x3b5
 8017b98:	4929      	ldr	r1, [pc, #164]	; (8017c40 <mem_malloc+0x1fc>)
 8017b9a:	4827      	ldr	r0, [pc, #156]	; (8017c38 <mem_malloc+0x1f4>)
 8017b9c:	f00b f92c 	bl	8022df8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017ba0:	4821      	ldr	r0, [pc, #132]	; (8017c28 <mem_malloc+0x1e4>)
 8017ba2:	f00a fd84 	bl	80226ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017ba6:	8bba      	ldrh	r2, [r7, #28]
 8017ba8:	697b      	ldr	r3, [r7, #20]
 8017baa:	4413      	add	r3, r2
 8017bac:	3308      	adds	r3, #8
 8017bae:	4a23      	ldr	r2, [pc, #140]	; (8017c3c <mem_malloc+0x1f8>)
 8017bb0:	6812      	ldr	r2, [r2, #0]
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	d906      	bls.n	8017bc4 <mem_malloc+0x180>
 8017bb6:	4b1e      	ldr	r3, [pc, #120]	; (8017c30 <mem_malloc+0x1ec>)
 8017bb8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8017bbc:	4921      	ldr	r1, [pc, #132]	; (8017c44 <mem_malloc+0x200>)
 8017bbe:	481e      	ldr	r0, [pc, #120]	; (8017c38 <mem_malloc+0x1f4>)
 8017bc0:	f00b f91a 	bl	8022df8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017bc4:	697b      	ldr	r3, [r7, #20]
 8017bc6:	f003 0303 	and.w	r3, r3, #3
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d006      	beq.n	8017bdc <mem_malloc+0x198>
 8017bce:	4b18      	ldr	r3, [pc, #96]	; (8017c30 <mem_malloc+0x1ec>)
 8017bd0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8017bd4:	491c      	ldr	r1, [pc, #112]	; (8017c48 <mem_malloc+0x204>)
 8017bd6:	4818      	ldr	r0, [pc, #96]	; (8017c38 <mem_malloc+0x1f4>)
 8017bd8:	f00b f90e 	bl	8022df8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	f003 0303 	and.w	r3, r3, #3
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d006      	beq.n	8017bf4 <mem_malloc+0x1b0>
 8017be6:	4b12      	ldr	r3, [pc, #72]	; (8017c30 <mem_malloc+0x1ec>)
 8017be8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8017bec:	4917      	ldr	r1, [pc, #92]	; (8017c4c <mem_malloc+0x208>)
 8017bee:	4812      	ldr	r0, [pc, #72]	; (8017c38 <mem_malloc+0x1f4>)
 8017bf0:	f00b f902 	bl	8022df8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017bf4:	697b      	ldr	r3, [r7, #20]
 8017bf6:	3308      	adds	r3, #8
 8017bf8:	e011      	b.n	8017c1e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8017bfa:	8bfb      	ldrh	r3, [r7, #30]
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7ff fc37 	bl	8017470 <ptr_to_mem>
 8017c02:	4603      	mov	r3, r0
 8017c04:	881b      	ldrh	r3, [r3, #0]
 8017c06:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017c08:	8bfa      	ldrh	r2, [r7, #30]
 8017c0a:	8bbb      	ldrh	r3, [r7, #28]
 8017c0c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8017c10:	429a      	cmp	r2, r3
 8017c12:	f4ff af41 	bcc.w	8017a98 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017c16:	4804      	ldr	r0, [pc, #16]	; (8017c28 <mem_malloc+0x1e4>)
 8017c18:	f00a fd49 	bl	80226ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017c1c:	2300      	movs	r3, #0
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3720      	adds	r7, #32
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}
 8017c26:	bf00      	nop
 8017c28:	2005ebb4 	.word	0x2005ebb4
 8017c2c:	2005ebb8 	.word	0x2005ebb8
 8017c30:	08024ec4 	.word	0x08024ec4
 8017c34:	08025088 	.word	0x08025088
 8017c38:	08024f0c 	.word	0x08024f0c
 8017c3c:	2005ebb0 	.word	0x2005ebb0
 8017c40:	0802509c 	.word	0x0802509c
 8017c44:	080250b8 	.word	0x080250b8
 8017c48:	080250e8 	.word	0x080250e8
 8017c4c:	08025118 	.word	0x08025118

08017c50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8017c50:	b480      	push	{r7}
 8017c52:	b085      	sub	sp, #20
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	689b      	ldr	r3, [r3, #8]
 8017c5c:	2200      	movs	r2, #0
 8017c5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	685b      	ldr	r3, [r3, #4]
 8017c64:	3303      	adds	r3, #3
 8017c66:	f023 0303 	bic.w	r3, r3, #3
 8017c6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	60fb      	str	r3, [r7, #12]
 8017c70:	e011      	b.n	8017c96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	689b      	ldr	r3, [r3, #8]
 8017c76:	681a      	ldr	r2, [r3, #0]
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	689b      	ldr	r3, [r3, #8]
 8017c80:	68ba      	ldr	r2, [r7, #8]
 8017c82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	881b      	ldrh	r3, [r3, #0]
 8017c88:	461a      	mov	r2, r3
 8017c8a:	68bb      	ldr	r3, [r7, #8]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	3301      	adds	r3, #1
 8017c94:	60fb      	str	r3, [r7, #12]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	885b      	ldrh	r3, [r3, #2]
 8017c9a:	461a      	mov	r2, r3
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	dbe7      	blt.n	8017c72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8017ca2:	bf00      	nop
 8017ca4:	bf00      	nop
 8017ca6:	3714      	adds	r7, #20
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cae:	4770      	bx	lr

08017cb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b082      	sub	sp, #8
 8017cb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	80fb      	strh	r3, [r7, #6]
 8017cba:	e009      	b.n	8017cd0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017cbc:	88fb      	ldrh	r3, [r7, #6]
 8017cbe:	4a08      	ldr	r2, [pc, #32]	; (8017ce0 <memp_init+0x30>)
 8017cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7ff ffc3 	bl	8017c50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017cca:	88fb      	ldrh	r3, [r7, #6]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	80fb      	strh	r3, [r7, #6]
 8017cd0:	88fb      	ldrh	r3, [r7, #6]
 8017cd2:	2b0c      	cmp	r3, #12
 8017cd4:	d9f2      	bls.n	8017cbc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8017cd6:	bf00      	nop
 8017cd8:	bf00      	nop
 8017cda:	3708      	adds	r7, #8
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bd80      	pop	{r7, pc}
 8017ce0:	08027b3c 	.word	0x08027b3c

08017ce4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017cec:	f00a fd0c 	bl	8022708 <sys_arch_protect>
 8017cf0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	689b      	ldr	r3, [r3, #8]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d015      	beq.n	8017d2c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	689b      	ldr	r3, [r3, #8]
 8017d04:	68ba      	ldr	r2, [r7, #8]
 8017d06:	6812      	ldr	r2, [r2, #0]
 8017d08:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	f003 0303 	and.w	r3, r3, #3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d006      	beq.n	8017d22 <do_memp_malloc_pool+0x3e>
 8017d14:	4b09      	ldr	r3, [pc, #36]	; (8017d3c <do_memp_malloc_pool+0x58>)
 8017d16:	f44f 728c 	mov.w	r2, #280	; 0x118
 8017d1a:	4909      	ldr	r1, [pc, #36]	; (8017d40 <do_memp_malloc_pool+0x5c>)
 8017d1c:	4809      	ldr	r0, [pc, #36]	; (8017d44 <do_memp_malloc_pool+0x60>)
 8017d1e:	f00b f86b 	bl	8022df8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017d22:	68f8      	ldr	r0, [r7, #12]
 8017d24:	f00a fcfe 	bl	8022724 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	e003      	b.n	8017d34 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017d2c:	68f8      	ldr	r0, [r7, #12]
 8017d2e:	f00a fcf9 	bl	8022724 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8017d32:	2300      	movs	r3, #0
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	3710      	adds	r7, #16
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}
 8017d3c:	0802513c 	.word	0x0802513c
 8017d40:	0802516c 	.word	0x0802516c
 8017d44:	08025190 	.word	0x08025190

08017d48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b082      	sub	sp, #8
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d106      	bne.n	8017d64 <memp_malloc_pool+0x1c>
 8017d56:	4b0a      	ldr	r3, [pc, #40]	; (8017d80 <memp_malloc_pool+0x38>)
 8017d58:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8017d5c:	4909      	ldr	r1, [pc, #36]	; (8017d84 <memp_malloc_pool+0x3c>)
 8017d5e:	480a      	ldr	r0, [pc, #40]	; (8017d88 <memp_malloc_pool+0x40>)
 8017d60:	f00b f84a 	bl	8022df8 <iprintf>
  if (desc == NULL) {
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d101      	bne.n	8017d6e <memp_malloc_pool+0x26>
    return NULL;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	e003      	b.n	8017d76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f7ff ffb8 	bl	8017ce4 <do_memp_malloc_pool>
 8017d74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	3708      	adds	r7, #8
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}
 8017d7e:	bf00      	nop
 8017d80:	0802513c 	.word	0x0802513c
 8017d84:	080251b8 	.word	0x080251b8
 8017d88:	08025190 	.word	0x08025190

08017d8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	4603      	mov	r3, r0
 8017d94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017d96:	79fb      	ldrb	r3, [r7, #7]
 8017d98:	2b0c      	cmp	r3, #12
 8017d9a:	d908      	bls.n	8017dae <memp_malloc+0x22>
 8017d9c:	4b0a      	ldr	r3, [pc, #40]	; (8017dc8 <memp_malloc+0x3c>)
 8017d9e:	f240 1257 	movw	r2, #343	; 0x157
 8017da2:	490a      	ldr	r1, [pc, #40]	; (8017dcc <memp_malloc+0x40>)
 8017da4:	480a      	ldr	r0, [pc, #40]	; (8017dd0 <memp_malloc+0x44>)
 8017da6:	f00b f827 	bl	8022df8 <iprintf>
 8017daa:	2300      	movs	r3, #0
 8017dac:	e008      	b.n	8017dc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8017dae:	79fb      	ldrb	r3, [r7, #7]
 8017db0:	4a08      	ldr	r2, [pc, #32]	; (8017dd4 <memp_malloc+0x48>)
 8017db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7ff ff94 	bl	8017ce4 <do_memp_malloc_pool>
 8017dbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
}
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	3710      	adds	r7, #16
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd80      	pop	{r7, pc}
 8017dc8:	0802513c 	.word	0x0802513c
 8017dcc:	080251cc 	.word	0x080251cc
 8017dd0:	08025190 	.word	0x08025190
 8017dd4:	08027b3c 	.word	0x08027b3c

08017dd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b084      	sub	sp, #16
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	f003 0303 	and.w	r3, r3, #3
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d006      	beq.n	8017dfa <do_memp_free_pool+0x22>
 8017dec:	4b0d      	ldr	r3, [pc, #52]	; (8017e24 <do_memp_free_pool+0x4c>)
 8017dee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8017df2:	490d      	ldr	r1, [pc, #52]	; (8017e28 <do_memp_free_pool+0x50>)
 8017df4:	480d      	ldr	r0, [pc, #52]	; (8017e2c <do_memp_free_pool+0x54>)
 8017df6:	f00a ffff 	bl	8022df8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8017dfa:	683b      	ldr	r3, [r7, #0]
 8017dfc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8017dfe:	f00a fc83 	bl	8022708 <sys_arch_protect>
 8017e02:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	689b      	ldr	r3, [r3, #8]
 8017e08:	681a      	ldr	r2, [r3, #0]
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	689b      	ldr	r3, [r3, #8]
 8017e12:	68fa      	ldr	r2, [r7, #12]
 8017e14:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017e16:	68b8      	ldr	r0, [r7, #8]
 8017e18:	f00a fc84 	bl	8022724 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8017e1c:	bf00      	nop
 8017e1e:	3710      	adds	r7, #16
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}
 8017e24:	0802513c 	.word	0x0802513c
 8017e28:	080251ec 	.word	0x080251ec
 8017e2c:	08025190 	.word	0x08025190

08017e30 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b082      	sub	sp, #8
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
 8017e38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d106      	bne.n	8017e4e <memp_free_pool+0x1e>
 8017e40:	4b0a      	ldr	r3, [pc, #40]	; (8017e6c <memp_free_pool+0x3c>)
 8017e42:	f240 1295 	movw	r2, #405	; 0x195
 8017e46:	490a      	ldr	r1, [pc, #40]	; (8017e70 <memp_free_pool+0x40>)
 8017e48:	480a      	ldr	r0, [pc, #40]	; (8017e74 <memp_free_pool+0x44>)
 8017e4a:	f00a ffd5 	bl	8022df8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d007      	beq.n	8017e64 <memp_free_pool+0x34>
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d004      	beq.n	8017e64 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8017e5a:	6839      	ldr	r1, [r7, #0]
 8017e5c:	6878      	ldr	r0, [r7, #4]
 8017e5e:	f7ff ffbb 	bl	8017dd8 <do_memp_free_pool>
 8017e62:	e000      	b.n	8017e66 <memp_free_pool+0x36>
    return;
 8017e64:	bf00      	nop
}
 8017e66:	3708      	adds	r7, #8
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	0802513c 	.word	0x0802513c
 8017e70:	080251b8 	.word	0x080251b8
 8017e74:	08025190 	.word	0x08025190

08017e78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b082      	sub	sp, #8
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	4603      	mov	r3, r0
 8017e80:	6039      	str	r1, [r7, #0]
 8017e82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017e84:	79fb      	ldrb	r3, [r7, #7]
 8017e86:	2b0c      	cmp	r3, #12
 8017e88:	d907      	bls.n	8017e9a <memp_free+0x22>
 8017e8a:	4b0c      	ldr	r3, [pc, #48]	; (8017ebc <memp_free+0x44>)
 8017e8c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017e90:	490b      	ldr	r1, [pc, #44]	; (8017ec0 <memp_free+0x48>)
 8017e92:	480c      	ldr	r0, [pc, #48]	; (8017ec4 <memp_free+0x4c>)
 8017e94:	f00a ffb0 	bl	8022df8 <iprintf>
 8017e98:	e00c      	b.n	8017eb4 <memp_free+0x3c>

  if (mem == NULL) {
 8017e9a:	683b      	ldr	r3, [r7, #0]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d008      	beq.n	8017eb2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017ea0:	79fb      	ldrb	r3, [r7, #7]
 8017ea2:	4a09      	ldr	r2, [pc, #36]	; (8017ec8 <memp_free+0x50>)
 8017ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ea8:	6839      	ldr	r1, [r7, #0]
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7ff ff94 	bl	8017dd8 <do_memp_free_pool>
 8017eb0:	e000      	b.n	8017eb4 <memp_free+0x3c>
    return;
 8017eb2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017eb4:	3708      	adds	r7, #8
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bd80      	pop	{r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	0802513c 	.word	0x0802513c
 8017ec0:	0802520c 	.word	0x0802520c
 8017ec4:	08025190 	.word	0x08025190
 8017ec8:	08027b3c 	.word	0x08027b3c

08017ecc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8017ecc:	b480      	push	{r7}
 8017ece:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8017ed0:	bf00      	nop
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed8:	4770      	bx	lr
	...

08017edc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b086      	sub	sp, #24
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	60f8      	str	r0, [r7, #12]
 8017ee4:	60b9      	str	r1, [r7, #8]
 8017ee6:	607a      	str	r2, [r7, #4]
 8017ee8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d108      	bne.n	8017f02 <netif_add+0x26>
 8017ef0:	4b57      	ldr	r3, [pc, #348]	; (8018050 <netif_add+0x174>)
 8017ef2:	f240 1227 	movw	r2, #295	; 0x127
 8017ef6:	4957      	ldr	r1, [pc, #348]	; (8018054 <netif_add+0x178>)
 8017ef8:	4857      	ldr	r0, [pc, #348]	; (8018058 <netif_add+0x17c>)
 8017efa:	f00a ff7d 	bl	8022df8 <iprintf>
 8017efe:	2300      	movs	r3, #0
 8017f00:	e0a2      	b.n	8018048 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d108      	bne.n	8017f1a <netif_add+0x3e>
 8017f08:	4b51      	ldr	r3, [pc, #324]	; (8018050 <netif_add+0x174>)
 8017f0a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8017f0e:	4953      	ldr	r1, [pc, #332]	; (801805c <netif_add+0x180>)
 8017f10:	4851      	ldr	r0, [pc, #324]	; (8018058 <netif_add+0x17c>)
 8017f12:	f00a ff71 	bl	8022df8 <iprintf>
 8017f16:	2300      	movs	r3, #0
 8017f18:	e096      	b.n	8018048 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8017f1a:	68bb      	ldr	r3, [r7, #8]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d101      	bne.n	8017f24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017f20:	4b4f      	ldr	r3, [pc, #316]	; (8018060 <netif_add+0x184>)
 8017f22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d101      	bne.n	8017f2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8017f2a:	4b4d      	ldr	r3, [pc, #308]	; (8018060 <netif_add+0x184>)
 8017f2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017f2e:	683b      	ldr	r3, [r7, #0]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d101      	bne.n	8017f38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017f34:	4b4a      	ldr	r3, [pc, #296]	; (8018060 <netif_add+0x184>)
 8017f36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	2200      	movs	r2, #0
 8017f42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	2200      	movs	r2, #0
 8017f48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	4a45      	ldr	r2, [pc, #276]	; (8018064 <netif_add+0x188>)
 8017f4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	2200      	movs	r2, #0
 8017f54:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	2200      	movs	r2, #0
 8017f5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	2200      	movs	r2, #0
 8017f62:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	6a3a      	ldr	r2, [r7, #32]
 8017f68:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8017f6a:	4b3f      	ldr	r3, [pc, #252]	; (8018068 <netif_add+0x18c>)
 8017f6c:	781a      	ldrb	r2, [r3, #0]
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f78:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017f7a:	683b      	ldr	r3, [r7, #0]
 8017f7c:	687a      	ldr	r2, [r7, #4]
 8017f7e:	68b9      	ldr	r1, [r7, #8]
 8017f80:	68f8      	ldr	r0, [r7, #12]
 8017f82:	f000 f913 	bl	80181ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8017f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f88:	68f8      	ldr	r0, [r7, #12]
 8017f8a:	4798      	blx	r3
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d001      	beq.n	8017f96 <netif_add+0xba>
    return NULL;
 8017f92:	2300      	movs	r3, #0
 8017f94:	e058      	b.n	8018048 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f9c:	2bff      	cmp	r3, #255	; 0xff
 8017f9e:	d103      	bne.n	8017fa8 <netif_add+0xcc>
        netif->num = 0;
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017fac:	4b2f      	ldr	r3, [pc, #188]	; (801806c <netif_add+0x190>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	617b      	str	r3, [r7, #20]
 8017fb2:	e02b      	b.n	801800c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017fb4:	697a      	ldr	r2, [r7, #20]
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d106      	bne.n	8017fca <netif_add+0xee>
 8017fbc:	4b24      	ldr	r3, [pc, #144]	; (8018050 <netif_add+0x174>)
 8017fbe:	f240 128b 	movw	r2, #395	; 0x18b
 8017fc2:	492b      	ldr	r1, [pc, #172]	; (8018070 <netif_add+0x194>)
 8017fc4:	4824      	ldr	r0, [pc, #144]	; (8018058 <netif_add+0x17c>)
 8017fc6:	f00a ff17 	bl	8022df8 <iprintf>
        num_netifs++;
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	3301      	adds	r3, #1
 8017fce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	2bff      	cmp	r3, #255	; 0xff
 8017fd4:	dd06      	ble.n	8017fe4 <netif_add+0x108>
 8017fd6:	4b1e      	ldr	r3, [pc, #120]	; (8018050 <netif_add+0x174>)
 8017fd8:	f240 128d 	movw	r2, #397	; 0x18d
 8017fdc:	4925      	ldr	r1, [pc, #148]	; (8018074 <netif_add+0x198>)
 8017fde:	481e      	ldr	r0, [pc, #120]	; (8018058 <netif_add+0x17c>)
 8017fe0:	f00a ff0a 	bl	8022df8 <iprintf>
        if (netif2->num == netif->num) {
 8017fe4:	697b      	ldr	r3, [r7, #20]
 8017fe6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d108      	bne.n	8018006 <netif_add+0x12a>
          netif->num++;
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	b2da      	uxtb	r2, r3
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8018004:	e005      	b.n	8018012 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	617b      	str	r3, [r7, #20]
 801800c:	697b      	ldr	r3, [r7, #20]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d1d0      	bne.n	8017fb4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d1be      	bne.n	8017f96 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801801e:	2bfe      	cmp	r3, #254	; 0xfe
 8018020:	d103      	bne.n	801802a <netif_add+0x14e>
    netif_num = 0;
 8018022:	4b11      	ldr	r3, [pc, #68]	; (8018068 <netif_add+0x18c>)
 8018024:	2200      	movs	r2, #0
 8018026:	701a      	strb	r2, [r3, #0]
 8018028:	e006      	b.n	8018038 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018030:	3301      	adds	r3, #1
 8018032:	b2da      	uxtb	r2, r3
 8018034:	4b0c      	ldr	r3, [pc, #48]	; (8018068 <netif_add+0x18c>)
 8018036:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8018038:	4b0c      	ldr	r3, [pc, #48]	; (801806c <netif_add+0x190>)
 801803a:	681a      	ldr	r2, [r3, #0]
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8018040:	4a0a      	ldr	r2, [pc, #40]	; (801806c <netif_add+0x190>)
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8018046:	68fb      	ldr	r3, [r7, #12]
}
 8018048:	4618      	mov	r0, r3
 801804a:	3718      	adds	r7, #24
 801804c:	46bd      	mov	sp, r7
 801804e:	bd80      	pop	{r7, pc}
 8018050:	08025228 	.word	0x08025228
 8018054:	080252bc 	.word	0x080252bc
 8018058:	08025278 	.word	0x08025278
 801805c:	080252d8 	.word	0x080252d8
 8018060:	08027bb0 	.word	0x08027bb0
 8018064:	08018487 	.word	0x08018487
 8018068:	20061c90 	.word	0x20061c90
 801806c:	20061c88 	.word	0x20061c88
 8018070:	080252fc 	.word	0x080252fc
 8018074:	08025310 	.word	0x08025310

08018078 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b082      	sub	sp, #8
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
 8018080:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8018082:	6839      	ldr	r1, [r7, #0]
 8018084:	6878      	ldr	r0, [r7, #4]
 8018086:	f002 ff67 	bl	801af58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801808a:	6839      	ldr	r1, [r7, #0]
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f007 fe87 	bl	801fda0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8018092:	bf00      	nop
 8018094:	3708      	adds	r7, #8
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
	...

0801809c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b086      	sub	sp, #24
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	60f8      	str	r0, [r7, #12]
 80180a4:	60b9      	str	r1, [r7, #8]
 80180a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d106      	bne.n	80180bc <netif_do_set_ipaddr+0x20>
 80180ae:	4b1d      	ldr	r3, [pc, #116]	; (8018124 <netif_do_set_ipaddr+0x88>)
 80180b0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80180b4:	491c      	ldr	r1, [pc, #112]	; (8018128 <netif_do_set_ipaddr+0x8c>)
 80180b6:	481d      	ldr	r0, [pc, #116]	; (801812c <netif_do_set_ipaddr+0x90>)
 80180b8:	f00a fe9e 	bl	8022df8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d106      	bne.n	80180d0 <netif_do_set_ipaddr+0x34>
 80180c2:	4b18      	ldr	r3, [pc, #96]	; (8018124 <netif_do_set_ipaddr+0x88>)
 80180c4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80180c8:	4917      	ldr	r1, [pc, #92]	; (8018128 <netif_do_set_ipaddr+0x8c>)
 80180ca:	4818      	ldr	r0, [pc, #96]	; (801812c <netif_do_set_ipaddr+0x90>)
 80180cc:	f00a fe94 	bl	8022df8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	681a      	ldr	r2, [r3, #0]
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	3304      	adds	r3, #4
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	429a      	cmp	r2, r3
 80180dc:	d01c      	beq.n	8018118 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	3304      	adds	r3, #4
 80180e8:	681a      	ldr	r2, [r3, #0]
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80180ee:	f107 0314 	add.w	r3, r7, #20
 80180f2:	4619      	mov	r1, r3
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f7ff ffbf 	bl	8018078 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80180fa:	68bb      	ldr	r3, [r7, #8]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d002      	beq.n	8018106 <netif_do_set_ipaddr+0x6a>
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	e000      	b.n	8018108 <netif_do_set_ipaddr+0x6c>
 8018106:	2300      	movs	r3, #0
 8018108:	68fa      	ldr	r2, [r7, #12]
 801810a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801810c:	2101      	movs	r1, #1
 801810e:	68f8      	ldr	r0, [r7, #12]
 8018110:	f000 f8d2 	bl	80182b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8018114:	2301      	movs	r3, #1
 8018116:	e000      	b.n	801811a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8018118:	2300      	movs	r3, #0
}
 801811a:	4618      	mov	r0, r3
 801811c:	3718      	adds	r7, #24
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	08025228 	.word	0x08025228
 8018128:	08025340 	.word	0x08025340
 801812c:	08025278 	.word	0x08025278

08018130 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8018130:	b480      	push	{r7}
 8018132:	b085      	sub	sp, #20
 8018134:	af00      	add	r7, sp, #0
 8018136:	60f8      	str	r0, [r7, #12]
 8018138:	60b9      	str	r1, [r7, #8]
 801813a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801813c:	68bb      	ldr	r3, [r7, #8]
 801813e:	681a      	ldr	r2, [r3, #0]
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	3308      	adds	r3, #8
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	429a      	cmp	r2, r3
 8018148:	d00a      	beq.n	8018160 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801814a:	68bb      	ldr	r3, [r7, #8]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d002      	beq.n	8018156 <netif_do_set_netmask+0x26>
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	e000      	b.n	8018158 <netif_do_set_netmask+0x28>
 8018156:	2300      	movs	r3, #0
 8018158:	68fa      	ldr	r2, [r7, #12]
 801815a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801815c:	2301      	movs	r3, #1
 801815e:	e000      	b.n	8018162 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8018160:	2300      	movs	r3, #0
}
 8018162:	4618      	mov	r0, r3
 8018164:	3714      	adds	r7, #20
 8018166:	46bd      	mov	sp, r7
 8018168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801816c:	4770      	bx	lr

0801816e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801816e:	b480      	push	{r7}
 8018170:	b085      	sub	sp, #20
 8018172:	af00      	add	r7, sp, #0
 8018174:	60f8      	str	r0, [r7, #12]
 8018176:	60b9      	str	r1, [r7, #8]
 8018178:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	681a      	ldr	r2, [r3, #0]
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	330c      	adds	r3, #12
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	429a      	cmp	r2, r3
 8018186:	d00a      	beq.n	801819e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d002      	beq.n	8018194 <netif_do_set_gw+0x26>
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	e000      	b.n	8018196 <netif_do_set_gw+0x28>
 8018194:	2300      	movs	r3, #0
 8018196:	68fa      	ldr	r2, [r7, #12]
 8018198:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801819a:	2301      	movs	r3, #1
 801819c:	e000      	b.n	80181a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801819e:	2300      	movs	r3, #0
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	3714      	adds	r7, #20
 80181a4:	46bd      	mov	sp, r7
 80181a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181aa:	4770      	bx	lr

080181ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b088      	sub	sp, #32
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	60f8      	str	r0, [r7, #12]
 80181b4:	60b9      	str	r1, [r7, #8]
 80181b6:	607a      	str	r2, [r7, #4]
 80181b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80181ba:	2300      	movs	r3, #0
 80181bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80181be:	2300      	movs	r3, #0
 80181c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d101      	bne.n	80181cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80181c8:	4b1c      	ldr	r3, [pc, #112]	; (801823c <netif_set_addr+0x90>)
 80181ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d101      	bne.n	80181d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80181d2:	4b1a      	ldr	r3, [pc, #104]	; (801823c <netif_set_addr+0x90>)
 80181d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80181d6:	683b      	ldr	r3, [r7, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d101      	bne.n	80181e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80181dc:	4b17      	ldr	r3, [pc, #92]	; (801823c <netif_set_addr+0x90>)
 80181de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d003      	beq.n	80181ee <netif_set_addr+0x42>
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d101      	bne.n	80181f2 <netif_set_addr+0x46>
 80181ee:	2301      	movs	r3, #1
 80181f0:	e000      	b.n	80181f4 <netif_set_addr+0x48>
 80181f2:	2300      	movs	r3, #0
 80181f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80181f6:	697b      	ldr	r3, [r7, #20]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d006      	beq.n	801820a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80181fc:	f107 0310 	add.w	r3, r7, #16
 8018200:	461a      	mov	r2, r3
 8018202:	68b9      	ldr	r1, [r7, #8]
 8018204:	68f8      	ldr	r0, [r7, #12]
 8018206:	f7ff ff49 	bl	801809c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801820a:	69fa      	ldr	r2, [r7, #28]
 801820c:	6879      	ldr	r1, [r7, #4]
 801820e:	68f8      	ldr	r0, [r7, #12]
 8018210:	f7ff ff8e 	bl	8018130 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8018214:	69ba      	ldr	r2, [r7, #24]
 8018216:	6839      	ldr	r1, [r7, #0]
 8018218:	68f8      	ldr	r0, [r7, #12]
 801821a:	f7ff ffa8 	bl	801816e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801821e:	697b      	ldr	r3, [r7, #20]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d106      	bne.n	8018232 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018224:	f107 0310 	add.w	r3, r7, #16
 8018228:	461a      	mov	r2, r3
 801822a:	68b9      	ldr	r1, [r7, #8]
 801822c:	68f8      	ldr	r0, [r7, #12]
 801822e:	f7ff ff35 	bl	801809c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8018232:	bf00      	nop
 8018234:	3720      	adds	r7, #32
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}
 801823a:	bf00      	nop
 801823c:	08027bb0 	.word	0x08027bb0

08018240 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8018240:	b480      	push	{r7}
 8018242:	b083      	sub	sp, #12
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8018248:	4a04      	ldr	r2, [pc, #16]	; (801825c <netif_set_default+0x1c>)
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801824e:	bf00      	nop
 8018250:	370c      	adds	r7, #12
 8018252:	46bd      	mov	sp, r7
 8018254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018258:	4770      	bx	lr
 801825a:	bf00      	nop
 801825c:	20061c8c 	.word	0x20061c8c

08018260 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d107      	bne.n	801827e <netif_set_up+0x1e>
 801826e:	4b0f      	ldr	r3, [pc, #60]	; (80182ac <netif_set_up+0x4c>)
 8018270:	f44f 7254 	mov.w	r2, #848	; 0x350
 8018274:	490e      	ldr	r1, [pc, #56]	; (80182b0 <netif_set_up+0x50>)
 8018276:	480f      	ldr	r0, [pc, #60]	; (80182b4 <netif_set_up+0x54>)
 8018278:	f00a fdbe 	bl	8022df8 <iprintf>
 801827c:	e013      	b.n	80182a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018284:	f003 0301 	and.w	r3, r3, #1
 8018288:	2b00      	cmp	r3, #0
 801828a:	d10c      	bne.n	80182a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018292:	f043 0301 	orr.w	r3, r3, #1
 8018296:	b2da      	uxtb	r2, r3
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801829e:	2103      	movs	r1, #3
 80182a0:	6878      	ldr	r0, [r7, #4]
 80182a2:	f000 f809 	bl	80182b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80182a6:	3708      	adds	r7, #8
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}
 80182ac:	08025228 	.word	0x08025228
 80182b0:	080253b0 	.word	0x080253b0
 80182b4:	08025278 	.word	0x08025278

080182b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b082      	sub	sp, #8
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
 80182c0:	460b      	mov	r3, r1
 80182c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d106      	bne.n	80182d8 <netif_issue_reports+0x20>
 80182ca:	4b18      	ldr	r3, [pc, #96]	; (801832c <netif_issue_reports+0x74>)
 80182cc:	f240 326d 	movw	r2, #877	; 0x36d
 80182d0:	4917      	ldr	r1, [pc, #92]	; (8018330 <netif_issue_reports+0x78>)
 80182d2:	4818      	ldr	r0, [pc, #96]	; (8018334 <netif_issue_reports+0x7c>)
 80182d4:	f00a fd90 	bl	8022df8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80182de:	f003 0304 	and.w	r3, r3, #4
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d01e      	beq.n	8018324 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80182ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d017      	beq.n	8018324 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80182f4:	78fb      	ldrb	r3, [r7, #3]
 80182f6:	f003 0301 	and.w	r3, r3, #1
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d013      	beq.n	8018326 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	3304      	adds	r3, #4
 8018302:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018304:	2b00      	cmp	r3, #0
 8018306:	d00e      	beq.n	8018326 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801830e:	f003 0308 	and.w	r3, r3, #8
 8018312:	2b00      	cmp	r3, #0
 8018314:	d007      	beq.n	8018326 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	3304      	adds	r3, #4
 801831a:	4619      	mov	r1, r3
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f008 fca9 	bl	8020c74 <etharp_request>
 8018322:	e000      	b.n	8018326 <netif_issue_reports+0x6e>
    return;
 8018324:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8018326:	3708      	adds	r7, #8
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}
 801832c:	08025228 	.word	0x08025228
 8018330:	080253cc 	.word	0x080253cc
 8018334:	08025278 	.word	0x08025278

08018338 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b082      	sub	sp, #8
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d107      	bne.n	8018356 <netif_set_down+0x1e>
 8018346:	4b12      	ldr	r3, [pc, #72]	; (8018390 <netif_set_down+0x58>)
 8018348:	f240 329b 	movw	r2, #923	; 0x39b
 801834c:	4911      	ldr	r1, [pc, #68]	; (8018394 <netif_set_down+0x5c>)
 801834e:	4812      	ldr	r0, [pc, #72]	; (8018398 <netif_set_down+0x60>)
 8018350:	f00a fd52 	bl	8022df8 <iprintf>
 8018354:	e019      	b.n	801838a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801835c:	f003 0301 	and.w	r3, r3, #1
 8018360:	2b00      	cmp	r3, #0
 8018362:	d012      	beq.n	801838a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801836a:	f023 0301 	bic.w	r3, r3, #1
 801836e:	b2da      	uxtb	r2, r3
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801837c:	f003 0308 	and.w	r3, r3, #8
 8018380:	2b00      	cmp	r3, #0
 8018382:	d002      	beq.n	801838a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8018384:	6878      	ldr	r0, [r7, #4]
 8018386:	f008 f833 	bl	80203f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801838a:	3708      	adds	r7, #8
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}
 8018390:	08025228 	.word	0x08025228
 8018394:	080253f0 	.word	0x080253f0
 8018398:	08025278 	.word	0x08025278

0801839c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b082      	sub	sp, #8
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d107      	bne.n	80183ba <netif_set_link_up+0x1e>
 80183aa:	4b13      	ldr	r3, [pc, #76]	; (80183f8 <netif_set_link_up+0x5c>)
 80183ac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80183b0:	4912      	ldr	r1, [pc, #72]	; (80183fc <netif_set_link_up+0x60>)
 80183b2:	4813      	ldr	r0, [pc, #76]	; (8018400 <netif_set_link_up+0x64>)
 80183b4:	f00a fd20 	bl	8022df8 <iprintf>
 80183b8:	e01b      	b.n	80183f2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183c0:	f003 0304 	and.w	r3, r3, #4
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d114      	bne.n	80183f2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183ce:	f043 0304 	orr.w	r3, r3, #4
 80183d2:	b2da      	uxtb	r2, r3
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80183da:	2103      	movs	r1, #3
 80183dc:	6878      	ldr	r0, [r7, #4]
 80183de:	f7ff ff6b 	bl	80182b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	69db      	ldr	r3, [r3, #28]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d003      	beq.n	80183f2 <netif_set_link_up+0x56>
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	69db      	ldr	r3, [r3, #28]
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80183f2:	3708      	adds	r7, #8
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd80      	pop	{r7, pc}
 80183f8:	08025228 	.word	0x08025228
 80183fc:	08025410 	.word	0x08025410
 8018400:	08025278 	.word	0x08025278

08018404 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d107      	bne.n	8018422 <netif_set_link_down+0x1e>
 8018412:	4b11      	ldr	r3, [pc, #68]	; (8018458 <netif_set_link_down+0x54>)
 8018414:	f240 4206 	movw	r2, #1030	; 0x406
 8018418:	4910      	ldr	r1, [pc, #64]	; (801845c <netif_set_link_down+0x58>)
 801841a:	4811      	ldr	r0, [pc, #68]	; (8018460 <netif_set_link_down+0x5c>)
 801841c:	f00a fcec 	bl	8022df8 <iprintf>
 8018420:	e017      	b.n	8018452 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018428:	f003 0304 	and.w	r3, r3, #4
 801842c:	2b00      	cmp	r3, #0
 801842e:	d010      	beq.n	8018452 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018436:	f023 0304 	bic.w	r3, r3, #4
 801843a:	b2da      	uxtb	r2, r3
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	69db      	ldr	r3, [r3, #28]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d003      	beq.n	8018452 <netif_set_link_down+0x4e>
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	69db      	ldr	r3, [r3, #28]
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018452:	3708      	adds	r7, #8
 8018454:	46bd      	mov	sp, r7
 8018456:	bd80      	pop	{r7, pc}
 8018458:	08025228 	.word	0x08025228
 801845c:	08025434 	.word	0x08025434
 8018460:	08025278 	.word	0x08025278

08018464 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8018464:	b480      	push	{r7}
 8018466:	b083      	sub	sp, #12
 8018468:	af00      	add	r7, sp, #0
 801846a:	6078      	str	r0, [r7, #4]
 801846c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d002      	beq.n	801847a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	683a      	ldr	r2, [r7, #0]
 8018478:	61da      	str	r2, [r3, #28]
  }
}
 801847a:	bf00      	nop
 801847c:	370c      	adds	r7, #12
 801847e:	46bd      	mov	sp, r7
 8018480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018484:	4770      	bx	lr

08018486 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018486:	b480      	push	{r7}
 8018488:	b085      	sub	sp, #20
 801848a:	af00      	add	r7, sp, #0
 801848c:	60f8      	str	r0, [r7, #12]
 801848e:	60b9      	str	r1, [r7, #8]
 8018490:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8018492:	f06f 030b 	mvn.w	r3, #11
}
 8018496:	4618      	mov	r0, r3
 8018498:	3714      	adds	r7, #20
 801849a:	46bd      	mov	sp, r7
 801849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a0:	4770      	bx	lr
	...

080184a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80184a4:	b480      	push	{r7}
 80184a6:	b085      	sub	sp, #20
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	4603      	mov	r3, r0
 80184ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80184ae:	79fb      	ldrb	r3, [r7, #7]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d013      	beq.n	80184dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80184b4:	4b0d      	ldr	r3, [pc, #52]	; (80184ec <netif_get_by_index+0x48>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	60fb      	str	r3, [r7, #12]
 80184ba:	e00c      	b.n	80184d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80184c2:	3301      	adds	r3, #1
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	79fa      	ldrb	r2, [r7, #7]
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d101      	bne.n	80184d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	e006      	b.n	80184de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	60fb      	str	r3, [r7, #12]
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d1ef      	bne.n	80184bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80184dc:	2300      	movs	r3, #0
}
 80184de:	4618      	mov	r0, r3
 80184e0:	3714      	adds	r7, #20
 80184e2:	46bd      	mov	sp, r7
 80184e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e8:	4770      	bx	lr
 80184ea:	bf00      	nop
 80184ec:	20061c88 	.word	0x20061c88

080184f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b082      	sub	sp, #8
 80184f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80184f6:	f00a f907 	bl	8022708 <sys_arch_protect>
 80184fa:	6038      	str	r0, [r7, #0]
 80184fc:	4b0d      	ldr	r3, [pc, #52]	; (8018534 <pbuf_free_ooseq+0x44>)
 80184fe:	2200      	movs	r2, #0
 8018500:	701a      	strb	r2, [r3, #0]
 8018502:	6838      	ldr	r0, [r7, #0]
 8018504:	f00a f90e 	bl	8022724 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018508:	4b0b      	ldr	r3, [pc, #44]	; (8018538 <pbuf_free_ooseq+0x48>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	607b      	str	r3, [r7, #4]
 801850e:	e00a      	b.n	8018526 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018514:	2b00      	cmp	r3, #0
 8018516:	d003      	beq.n	8018520 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018518:	6878      	ldr	r0, [r7, #4]
 801851a:	f002 fd5b 	bl	801afd4 <tcp_free_ooseq>
      return;
 801851e:	e005      	b.n	801852c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	607b      	str	r3, [r7, #4]
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d1f1      	bne.n	8018510 <pbuf_free_ooseq+0x20>
    }
  }
}
 801852c:	3708      	adds	r7, #8
 801852e:	46bd      	mov	sp, r7
 8018530:	bd80      	pop	{r7, pc}
 8018532:	bf00      	nop
 8018534:	20061c91 	.word	0x20061c91
 8018538:	20061ca0 	.word	0x20061ca0

0801853c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b082      	sub	sp, #8
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8018544:	f7ff ffd4 	bl	80184f0 <pbuf_free_ooseq>
}
 8018548:	bf00      	nop
 801854a:	3708      	adds	r7, #8
 801854c:	46bd      	mov	sp, r7
 801854e:	bd80      	pop	{r7, pc}

08018550 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b082      	sub	sp, #8
 8018554:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8018556:	f00a f8d7 	bl	8022708 <sys_arch_protect>
 801855a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801855c:	4b0f      	ldr	r3, [pc, #60]	; (801859c <pbuf_pool_is_empty+0x4c>)
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8018562:	4b0e      	ldr	r3, [pc, #56]	; (801859c <pbuf_pool_is_empty+0x4c>)
 8018564:	2201      	movs	r2, #1
 8018566:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018568:	6878      	ldr	r0, [r7, #4]
 801856a:	f00a f8db 	bl	8022724 <sys_arch_unprotect>

  if (!queued) {
 801856e:	78fb      	ldrb	r3, [r7, #3]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d10f      	bne.n	8018594 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018574:	2100      	movs	r1, #0
 8018576:	480a      	ldr	r0, [pc, #40]	; (80185a0 <pbuf_pool_is_empty+0x50>)
 8018578:	f7fe fdd8 	bl	801712c <tcpip_try_callback>
 801857c:	4603      	mov	r3, r0
 801857e:	2b00      	cmp	r3, #0
 8018580:	d008      	beq.n	8018594 <pbuf_pool_is_empty+0x44>
 8018582:	f00a f8c1 	bl	8022708 <sys_arch_protect>
 8018586:	6078      	str	r0, [r7, #4]
 8018588:	4b04      	ldr	r3, [pc, #16]	; (801859c <pbuf_pool_is_empty+0x4c>)
 801858a:	2200      	movs	r2, #0
 801858c:	701a      	strb	r2, [r3, #0]
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f00a f8c8 	bl	8022724 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8018594:	bf00      	nop
 8018596:	3708      	adds	r7, #8
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}
 801859c:	20061c91 	.word	0x20061c91
 80185a0:	0801853d 	.word	0x0801853d

080185a4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80185a4:	b480      	push	{r7}
 80185a6:	b085      	sub	sp, #20
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	60f8      	str	r0, [r7, #12]
 80185ac:	60b9      	str	r1, [r7, #8]
 80185ae:	4611      	mov	r1, r2
 80185b0:	461a      	mov	r2, r3
 80185b2:	460b      	mov	r3, r1
 80185b4:	80fb      	strh	r3, [r7, #6]
 80185b6:	4613      	mov	r3, r2
 80185b8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	2200      	movs	r2, #0
 80185be:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	68ba      	ldr	r2, [r7, #8]
 80185c4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	88fa      	ldrh	r2, [r7, #6]
 80185ca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	88ba      	ldrh	r2, [r7, #4]
 80185d0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80185d2:	8b3b      	ldrh	r3, [r7, #24]
 80185d4:	b2da      	uxtb	r2, r3
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	7f3a      	ldrb	r2, [r7, #28]
 80185de:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	2201      	movs	r2, #1
 80185e4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	2200      	movs	r2, #0
 80185ea:	73da      	strb	r2, [r3, #15]
}
 80185ec:	bf00      	nop
 80185ee:	3714      	adds	r7, #20
 80185f0:	46bd      	mov	sp, r7
 80185f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f6:	4770      	bx	lr

080185f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b08c      	sub	sp, #48	; 0x30
 80185fc:	af02      	add	r7, sp, #8
 80185fe:	4603      	mov	r3, r0
 8018600:	71fb      	strb	r3, [r7, #7]
 8018602:	460b      	mov	r3, r1
 8018604:	80bb      	strh	r3, [r7, #4]
 8018606:	4613      	mov	r3, r2
 8018608:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801860a:	79fb      	ldrb	r3, [r7, #7]
 801860c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801860e:	887b      	ldrh	r3, [r7, #2]
 8018610:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018614:	d07f      	beq.n	8018716 <pbuf_alloc+0x11e>
 8018616:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801861a:	f300 80c8 	bgt.w	80187ae <pbuf_alloc+0x1b6>
 801861e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018622:	d010      	beq.n	8018646 <pbuf_alloc+0x4e>
 8018624:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018628:	f300 80c1 	bgt.w	80187ae <pbuf_alloc+0x1b6>
 801862c:	2b01      	cmp	r3, #1
 801862e:	d002      	beq.n	8018636 <pbuf_alloc+0x3e>
 8018630:	2b41      	cmp	r3, #65	; 0x41
 8018632:	f040 80bc 	bne.w	80187ae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018636:	887a      	ldrh	r2, [r7, #2]
 8018638:	88bb      	ldrh	r3, [r7, #4]
 801863a:	4619      	mov	r1, r3
 801863c:	2000      	movs	r0, #0
 801863e:	f000 f8d1 	bl	80187e4 <pbuf_alloc_reference>
 8018642:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8018644:	e0bd      	b.n	80187c2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8018646:	2300      	movs	r3, #0
 8018648:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801864a:	2300      	movs	r3, #0
 801864c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801864e:	88bb      	ldrh	r3, [r7, #4]
 8018650:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018652:	200c      	movs	r0, #12
 8018654:	f7ff fb9a 	bl	8017d8c <memp_malloc>
 8018658:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801865a:	693b      	ldr	r3, [r7, #16]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d109      	bne.n	8018674 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8018660:	f7ff ff76 	bl	8018550 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8018664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018666:	2b00      	cmp	r3, #0
 8018668:	d002      	beq.n	8018670 <pbuf_alloc+0x78>
            pbuf_free(p);
 801866a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801866c:	f000 faa8 	bl	8018bc0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8018670:	2300      	movs	r3, #0
 8018672:	e0a7      	b.n	80187c4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018676:	3303      	adds	r3, #3
 8018678:	b29b      	uxth	r3, r3
 801867a:	f023 0303 	bic.w	r3, r3, #3
 801867e:	b29b      	uxth	r3, r3
 8018680:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8018684:	b29b      	uxth	r3, r3
 8018686:	8b7a      	ldrh	r2, [r7, #26]
 8018688:	4293      	cmp	r3, r2
 801868a:	bf28      	it	cs
 801868c:	4613      	movcs	r3, r2
 801868e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018692:	3310      	adds	r3, #16
 8018694:	693a      	ldr	r2, [r7, #16]
 8018696:	4413      	add	r3, r2
 8018698:	3303      	adds	r3, #3
 801869a:	f023 0303 	bic.w	r3, r3, #3
 801869e:	4618      	mov	r0, r3
 80186a0:	89f9      	ldrh	r1, [r7, #14]
 80186a2:	8b7a      	ldrh	r2, [r7, #26]
 80186a4:	2300      	movs	r3, #0
 80186a6:	9301      	str	r3, [sp, #4]
 80186a8:	887b      	ldrh	r3, [r7, #2]
 80186aa:	9300      	str	r3, [sp, #0]
 80186ac:	460b      	mov	r3, r1
 80186ae:	4601      	mov	r1, r0
 80186b0:	6938      	ldr	r0, [r7, #16]
 80186b2:	f7ff ff77 	bl	80185a4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80186b6:	693b      	ldr	r3, [r7, #16]
 80186b8:	685b      	ldr	r3, [r3, #4]
 80186ba:	f003 0303 	and.w	r3, r3, #3
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d006      	beq.n	80186d0 <pbuf_alloc+0xd8>
 80186c2:	4b42      	ldr	r3, [pc, #264]	; (80187cc <pbuf_alloc+0x1d4>)
 80186c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80186c8:	4941      	ldr	r1, [pc, #260]	; (80187d0 <pbuf_alloc+0x1d8>)
 80186ca:	4842      	ldr	r0, [pc, #264]	; (80187d4 <pbuf_alloc+0x1dc>)
 80186cc:	f00a fb94 	bl	8022df8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80186d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186d2:	3303      	adds	r3, #3
 80186d4:	f023 0303 	bic.w	r3, r3, #3
 80186d8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80186dc:	d106      	bne.n	80186ec <pbuf_alloc+0xf4>
 80186de:	4b3b      	ldr	r3, [pc, #236]	; (80187cc <pbuf_alloc+0x1d4>)
 80186e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80186e4:	493c      	ldr	r1, [pc, #240]	; (80187d8 <pbuf_alloc+0x1e0>)
 80186e6:	483b      	ldr	r0, [pc, #236]	; (80187d4 <pbuf_alloc+0x1dc>)
 80186e8:	f00a fb86 	bl	8022df8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80186ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d102      	bne.n	80186f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80186f2:	693b      	ldr	r3, [r7, #16]
 80186f4:	627b      	str	r3, [r7, #36]	; 0x24
 80186f6:	e002      	b.n	80186fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80186f8:	69fb      	ldr	r3, [r7, #28]
 80186fa:	693a      	ldr	r2, [r7, #16]
 80186fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80186fe:	693b      	ldr	r3, [r7, #16]
 8018700:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018702:	8b7a      	ldrh	r2, [r7, #26]
 8018704:	89fb      	ldrh	r3, [r7, #14]
 8018706:	1ad3      	subs	r3, r2, r3
 8018708:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801870a:	2300      	movs	r3, #0
 801870c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801870e:	8b7b      	ldrh	r3, [r7, #26]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d19e      	bne.n	8018652 <pbuf_alloc+0x5a>
      break;
 8018714:	e055      	b.n	80187c2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018718:	3303      	adds	r3, #3
 801871a:	b29b      	uxth	r3, r3
 801871c:	f023 0303 	bic.w	r3, r3, #3
 8018720:	b29a      	uxth	r2, r3
 8018722:	88bb      	ldrh	r3, [r7, #4]
 8018724:	3303      	adds	r3, #3
 8018726:	b29b      	uxth	r3, r3
 8018728:	f023 0303 	bic.w	r3, r3, #3
 801872c:	b29b      	uxth	r3, r3
 801872e:	4413      	add	r3, r2
 8018730:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018732:	8b3b      	ldrh	r3, [r7, #24]
 8018734:	3310      	adds	r3, #16
 8018736:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018738:	8b3a      	ldrh	r2, [r7, #24]
 801873a:	88bb      	ldrh	r3, [r7, #4]
 801873c:	3303      	adds	r3, #3
 801873e:	f023 0303 	bic.w	r3, r3, #3
 8018742:	429a      	cmp	r2, r3
 8018744:	d306      	bcc.n	8018754 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018746:	8afa      	ldrh	r2, [r7, #22]
 8018748:	88bb      	ldrh	r3, [r7, #4]
 801874a:	3303      	adds	r3, #3
 801874c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018750:	429a      	cmp	r2, r3
 8018752:	d201      	bcs.n	8018758 <pbuf_alloc+0x160>
        return NULL;
 8018754:	2300      	movs	r3, #0
 8018756:	e035      	b.n	80187c4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018758:	8afb      	ldrh	r3, [r7, #22]
 801875a:	4618      	mov	r0, r3
 801875c:	f7ff f972 	bl	8017a44 <mem_malloc>
 8018760:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8018762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018764:	2b00      	cmp	r3, #0
 8018766:	d101      	bne.n	801876c <pbuf_alloc+0x174>
        return NULL;
 8018768:	2300      	movs	r3, #0
 801876a:	e02b      	b.n	80187c4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801876c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801876e:	3310      	adds	r3, #16
 8018770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018772:	4413      	add	r3, r2
 8018774:	3303      	adds	r3, #3
 8018776:	f023 0303 	bic.w	r3, r3, #3
 801877a:	4618      	mov	r0, r3
 801877c:	88b9      	ldrh	r1, [r7, #4]
 801877e:	88ba      	ldrh	r2, [r7, #4]
 8018780:	2300      	movs	r3, #0
 8018782:	9301      	str	r3, [sp, #4]
 8018784:	887b      	ldrh	r3, [r7, #2]
 8018786:	9300      	str	r3, [sp, #0]
 8018788:	460b      	mov	r3, r1
 801878a:	4601      	mov	r1, r0
 801878c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801878e:	f7ff ff09 	bl	80185a4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	f003 0303 	and.w	r3, r3, #3
 801879a:	2b00      	cmp	r3, #0
 801879c:	d010      	beq.n	80187c0 <pbuf_alloc+0x1c8>
 801879e:	4b0b      	ldr	r3, [pc, #44]	; (80187cc <pbuf_alloc+0x1d4>)
 80187a0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80187a4:	490d      	ldr	r1, [pc, #52]	; (80187dc <pbuf_alloc+0x1e4>)
 80187a6:	480b      	ldr	r0, [pc, #44]	; (80187d4 <pbuf_alloc+0x1dc>)
 80187a8:	f00a fb26 	bl	8022df8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80187ac:	e008      	b.n	80187c0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80187ae:	4b07      	ldr	r3, [pc, #28]	; (80187cc <pbuf_alloc+0x1d4>)
 80187b0:	f240 1227 	movw	r2, #295	; 0x127
 80187b4:	490a      	ldr	r1, [pc, #40]	; (80187e0 <pbuf_alloc+0x1e8>)
 80187b6:	4807      	ldr	r0, [pc, #28]	; (80187d4 <pbuf_alloc+0x1dc>)
 80187b8:	f00a fb1e 	bl	8022df8 <iprintf>
      return NULL;
 80187bc:	2300      	movs	r3, #0
 80187be:	e001      	b.n	80187c4 <pbuf_alloc+0x1cc>
      break;
 80187c0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80187c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80187c4:	4618      	mov	r0, r3
 80187c6:	3728      	adds	r7, #40	; 0x28
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}
 80187cc:	08025458 	.word	0x08025458
 80187d0:	08025488 	.word	0x08025488
 80187d4:	080254b8 	.word	0x080254b8
 80187d8:	080254e0 	.word	0x080254e0
 80187dc:	08025514 	.word	0x08025514
 80187e0:	08025540 	.word	0x08025540

080187e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b086      	sub	sp, #24
 80187e8:	af02      	add	r7, sp, #8
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	460b      	mov	r3, r1
 80187ee:	807b      	strh	r3, [r7, #2]
 80187f0:	4613      	mov	r3, r2
 80187f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80187f4:	883b      	ldrh	r3, [r7, #0]
 80187f6:	2b41      	cmp	r3, #65	; 0x41
 80187f8:	d009      	beq.n	801880e <pbuf_alloc_reference+0x2a>
 80187fa:	883b      	ldrh	r3, [r7, #0]
 80187fc:	2b01      	cmp	r3, #1
 80187fe:	d006      	beq.n	801880e <pbuf_alloc_reference+0x2a>
 8018800:	4b0f      	ldr	r3, [pc, #60]	; (8018840 <pbuf_alloc_reference+0x5c>)
 8018802:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018806:	490f      	ldr	r1, [pc, #60]	; (8018844 <pbuf_alloc_reference+0x60>)
 8018808:	480f      	ldr	r0, [pc, #60]	; (8018848 <pbuf_alloc_reference+0x64>)
 801880a:	f00a faf5 	bl	8022df8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801880e:	200b      	movs	r0, #11
 8018810:	f7ff fabc 	bl	8017d8c <memp_malloc>
 8018814:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d101      	bne.n	8018820 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801881c:	2300      	movs	r3, #0
 801881e:	e00b      	b.n	8018838 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018820:	8879      	ldrh	r1, [r7, #2]
 8018822:	887a      	ldrh	r2, [r7, #2]
 8018824:	2300      	movs	r3, #0
 8018826:	9301      	str	r3, [sp, #4]
 8018828:	883b      	ldrh	r3, [r7, #0]
 801882a:	9300      	str	r3, [sp, #0]
 801882c:	460b      	mov	r3, r1
 801882e:	6879      	ldr	r1, [r7, #4]
 8018830:	68f8      	ldr	r0, [r7, #12]
 8018832:	f7ff feb7 	bl	80185a4 <pbuf_init_alloced_pbuf>
  return p;
 8018836:	68fb      	ldr	r3, [r7, #12]
}
 8018838:	4618      	mov	r0, r3
 801883a:	3710      	adds	r7, #16
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}
 8018840:	08025458 	.word	0x08025458
 8018844:	0802555c 	.word	0x0802555c
 8018848:	080254b8 	.word	0x080254b8

0801884c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b088      	sub	sp, #32
 8018850:	af02      	add	r7, sp, #8
 8018852:	607b      	str	r3, [r7, #4]
 8018854:	4603      	mov	r3, r0
 8018856:	73fb      	strb	r3, [r7, #15]
 8018858:	460b      	mov	r3, r1
 801885a:	81bb      	strh	r3, [r7, #12]
 801885c:	4613      	mov	r3, r2
 801885e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8018860:	7bfb      	ldrb	r3, [r7, #15]
 8018862:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018864:	8a7b      	ldrh	r3, [r7, #18]
 8018866:	3303      	adds	r3, #3
 8018868:	f023 0203 	bic.w	r2, r3, #3
 801886c:	89bb      	ldrh	r3, [r7, #12]
 801886e:	441a      	add	r2, r3
 8018870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018872:	429a      	cmp	r2, r3
 8018874:	d901      	bls.n	801887a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8018876:	2300      	movs	r3, #0
 8018878:	e018      	b.n	80188ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801887a:	6a3b      	ldr	r3, [r7, #32]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d007      	beq.n	8018890 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018880:	8a7b      	ldrh	r3, [r7, #18]
 8018882:	3303      	adds	r3, #3
 8018884:	f023 0303 	bic.w	r3, r3, #3
 8018888:	6a3a      	ldr	r2, [r7, #32]
 801888a:	4413      	add	r3, r2
 801888c:	617b      	str	r3, [r7, #20]
 801888e:	e001      	b.n	8018894 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018890:	2300      	movs	r3, #0
 8018892:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	89b9      	ldrh	r1, [r7, #12]
 8018898:	89ba      	ldrh	r2, [r7, #12]
 801889a:	2302      	movs	r3, #2
 801889c:	9301      	str	r3, [sp, #4]
 801889e:	897b      	ldrh	r3, [r7, #10]
 80188a0:	9300      	str	r3, [sp, #0]
 80188a2:	460b      	mov	r3, r1
 80188a4:	6979      	ldr	r1, [r7, #20]
 80188a6:	f7ff fe7d 	bl	80185a4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80188aa:	687b      	ldr	r3, [r7, #4]
}
 80188ac:	4618      	mov	r0, r3
 80188ae:	3718      	adds	r7, #24
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}

080188b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b084      	sub	sp, #16
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	460b      	mov	r3, r1
 80188be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d106      	bne.n	80188d4 <pbuf_realloc+0x20>
 80188c6:	4b3a      	ldr	r3, [pc, #232]	; (80189b0 <pbuf_realloc+0xfc>)
 80188c8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80188cc:	4939      	ldr	r1, [pc, #228]	; (80189b4 <pbuf_realloc+0x100>)
 80188ce:	483a      	ldr	r0, [pc, #232]	; (80189b8 <pbuf_realloc+0x104>)
 80188d0:	f00a fa92 	bl	8022df8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	891b      	ldrh	r3, [r3, #8]
 80188d8:	887a      	ldrh	r2, [r7, #2]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d263      	bcs.n	80189a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	891a      	ldrh	r2, [r3, #8]
 80188e2:	887b      	ldrh	r3, [r7, #2]
 80188e4:	1ad3      	subs	r3, r2, r3
 80188e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80188e8:	887b      	ldrh	r3, [r7, #2]
 80188ea:	817b      	strh	r3, [r7, #10]
  q = p;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80188f0:	e018      	b.n	8018924 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	895b      	ldrh	r3, [r3, #10]
 80188f6:	897a      	ldrh	r2, [r7, #10]
 80188f8:	1ad3      	subs	r3, r2, r3
 80188fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	891a      	ldrh	r2, [r3, #8]
 8018900:	893b      	ldrh	r3, [r7, #8]
 8018902:	1ad3      	subs	r3, r2, r3
 8018904:	b29a      	uxth	r2, r3
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d106      	bne.n	8018924 <pbuf_realloc+0x70>
 8018916:	4b26      	ldr	r3, [pc, #152]	; (80189b0 <pbuf_realloc+0xfc>)
 8018918:	f240 12af 	movw	r2, #431	; 0x1af
 801891c:	4927      	ldr	r1, [pc, #156]	; (80189bc <pbuf_realloc+0x108>)
 801891e:	4826      	ldr	r0, [pc, #152]	; (80189b8 <pbuf_realloc+0x104>)
 8018920:	f00a fa6a 	bl	8022df8 <iprintf>
  while (rem_len > q->len) {
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	895b      	ldrh	r3, [r3, #10]
 8018928:	897a      	ldrh	r2, [r7, #10]
 801892a:	429a      	cmp	r2, r3
 801892c:	d8e1      	bhi.n	80188f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	7b1b      	ldrb	r3, [r3, #12]
 8018932:	f003 030f 	and.w	r3, r3, #15
 8018936:	2b00      	cmp	r3, #0
 8018938:	d121      	bne.n	801897e <pbuf_realloc+0xca>
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	895b      	ldrh	r3, [r3, #10]
 801893e:	897a      	ldrh	r2, [r7, #10]
 8018940:	429a      	cmp	r2, r3
 8018942:	d01c      	beq.n	801897e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	7b5b      	ldrb	r3, [r3, #13]
 8018948:	f003 0302 	and.w	r3, r3, #2
 801894c:	2b00      	cmp	r3, #0
 801894e:	d116      	bne.n	801897e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	685a      	ldr	r2, [r3, #4]
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	1ad3      	subs	r3, r2, r3
 8018958:	b29a      	uxth	r2, r3
 801895a:	897b      	ldrh	r3, [r7, #10]
 801895c:	4413      	add	r3, r2
 801895e:	b29b      	uxth	r3, r3
 8018960:	4619      	mov	r1, r3
 8018962:	68f8      	ldr	r0, [r7, #12]
 8018964:	f7fe ff64 	bl	8017830 <mem_trim>
 8018968:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d106      	bne.n	801897e <pbuf_realloc+0xca>
 8018970:	4b0f      	ldr	r3, [pc, #60]	; (80189b0 <pbuf_realloc+0xfc>)
 8018972:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018976:	4912      	ldr	r1, [pc, #72]	; (80189c0 <pbuf_realloc+0x10c>)
 8018978:	480f      	ldr	r0, [pc, #60]	; (80189b8 <pbuf_realloc+0x104>)
 801897a:	f00a fa3d 	bl	8022df8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	897a      	ldrh	r2, [r7, #10]
 8018982:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	895a      	ldrh	r2, [r3, #10]
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d004      	beq.n	801899e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	4618      	mov	r0, r3
 801899a:	f000 f911 	bl	8018bc0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	2200      	movs	r2, #0
 80189a2:	601a      	str	r2, [r3, #0]
 80189a4:	e000      	b.n	80189a8 <pbuf_realloc+0xf4>
    return;
 80189a6:	bf00      	nop

}
 80189a8:	3710      	adds	r7, #16
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}
 80189ae:	bf00      	nop
 80189b0:	08025458 	.word	0x08025458
 80189b4:	08025570 	.word	0x08025570
 80189b8:	080254b8 	.word	0x080254b8
 80189bc:	08025588 	.word	0x08025588
 80189c0:	080255a0 	.word	0x080255a0

080189c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b086      	sub	sp, #24
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	60f8      	str	r0, [r7, #12]
 80189cc:	60b9      	str	r1, [r7, #8]
 80189ce:	4613      	mov	r3, r2
 80189d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d106      	bne.n	80189e6 <pbuf_add_header_impl+0x22>
 80189d8:	4b2b      	ldr	r3, [pc, #172]	; (8018a88 <pbuf_add_header_impl+0xc4>)
 80189da:	f240 12df 	movw	r2, #479	; 0x1df
 80189de:	492b      	ldr	r1, [pc, #172]	; (8018a8c <pbuf_add_header_impl+0xc8>)
 80189e0:	482b      	ldr	r0, [pc, #172]	; (8018a90 <pbuf_add_header_impl+0xcc>)
 80189e2:	f00a fa09 	bl	8022df8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d003      	beq.n	80189f4 <pbuf_add_header_impl+0x30>
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189f2:	d301      	bcc.n	80189f8 <pbuf_add_header_impl+0x34>
    return 1;
 80189f4:	2301      	movs	r3, #1
 80189f6:	e043      	b.n	8018a80 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d101      	bne.n	8018a02 <pbuf_add_header_impl+0x3e>
    return 0;
 80189fe:	2300      	movs	r3, #0
 8018a00:	e03e      	b.n	8018a80 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	891a      	ldrh	r2, [r3, #8]
 8018a0a:	8a7b      	ldrh	r3, [r7, #18]
 8018a0c:	4413      	add	r3, r2
 8018a0e:	b29b      	uxth	r3, r3
 8018a10:	8a7a      	ldrh	r2, [r7, #18]
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d901      	bls.n	8018a1a <pbuf_add_header_impl+0x56>
    return 1;
 8018a16:	2301      	movs	r3, #1
 8018a18:	e032      	b.n	8018a80 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	7b1b      	ldrb	r3, [r3, #12]
 8018a1e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018a20:	8a3b      	ldrh	r3, [r7, #16]
 8018a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d00c      	beq.n	8018a44 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	685a      	ldr	r2, [r3, #4]
 8018a2e:	68bb      	ldr	r3, [r7, #8]
 8018a30:	425b      	negs	r3, r3
 8018a32:	4413      	add	r3, r2
 8018a34:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	3310      	adds	r3, #16
 8018a3a:	697a      	ldr	r2, [r7, #20]
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	d20d      	bcs.n	8018a5c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8018a40:	2301      	movs	r3, #1
 8018a42:	e01d      	b.n	8018a80 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018a44:	79fb      	ldrb	r3, [r7, #7]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d006      	beq.n	8018a58 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	685a      	ldr	r2, [r3, #4]
 8018a4e:	68bb      	ldr	r3, [r7, #8]
 8018a50:	425b      	negs	r3, r3
 8018a52:	4413      	add	r3, r2
 8018a54:	617b      	str	r3, [r7, #20]
 8018a56:	e001      	b.n	8018a5c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8018a58:	2301      	movs	r3, #1
 8018a5a:	e011      	b.n	8018a80 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	697a      	ldr	r2, [r7, #20]
 8018a60:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	895a      	ldrh	r2, [r3, #10]
 8018a66:	8a7b      	ldrh	r3, [r7, #18]
 8018a68:	4413      	add	r3, r2
 8018a6a:	b29a      	uxth	r2, r3
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	891a      	ldrh	r2, [r3, #8]
 8018a74:	8a7b      	ldrh	r3, [r7, #18]
 8018a76:	4413      	add	r3, r2
 8018a78:	b29a      	uxth	r2, r3
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	811a      	strh	r2, [r3, #8]


  return 0;
 8018a7e:	2300      	movs	r3, #0
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	3718      	adds	r7, #24
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}
 8018a88:	08025458 	.word	0x08025458
 8018a8c:	080255bc 	.word	0x080255bc
 8018a90:	080254b8 	.word	0x080254b8

08018a94 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	6839      	ldr	r1, [r7, #0]
 8018aa2:	6878      	ldr	r0, [r7, #4]
 8018aa4:	f7ff ff8e 	bl	80189c4 <pbuf_add_header_impl>
 8018aa8:	4603      	mov	r3, r0
}
 8018aaa:	4618      	mov	r0, r3
 8018aac:	3708      	adds	r7, #8
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	bd80      	pop	{r7, pc}
	...

08018ab4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b084      	sub	sp, #16
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
 8018abc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d106      	bne.n	8018ad2 <pbuf_remove_header+0x1e>
 8018ac4:	4b20      	ldr	r3, [pc, #128]	; (8018b48 <pbuf_remove_header+0x94>)
 8018ac6:	f240 224b 	movw	r2, #587	; 0x24b
 8018aca:	4920      	ldr	r1, [pc, #128]	; (8018b4c <pbuf_remove_header+0x98>)
 8018acc:	4820      	ldr	r0, [pc, #128]	; (8018b50 <pbuf_remove_header+0x9c>)
 8018ace:	f00a f993 	bl	8022df8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d003      	beq.n	8018ae0 <pbuf_remove_header+0x2c>
 8018ad8:	683b      	ldr	r3, [r7, #0]
 8018ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ade:	d301      	bcc.n	8018ae4 <pbuf_remove_header+0x30>
    return 1;
 8018ae0:	2301      	movs	r3, #1
 8018ae2:	e02c      	b.n	8018b3e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018ae4:	683b      	ldr	r3, [r7, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d101      	bne.n	8018aee <pbuf_remove_header+0x3a>
    return 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	e027      	b.n	8018b3e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	895b      	ldrh	r3, [r3, #10]
 8018af6:	89fa      	ldrh	r2, [r7, #14]
 8018af8:	429a      	cmp	r2, r3
 8018afa:	d908      	bls.n	8018b0e <pbuf_remove_header+0x5a>
 8018afc:	4b12      	ldr	r3, [pc, #72]	; (8018b48 <pbuf_remove_header+0x94>)
 8018afe:	f240 2255 	movw	r2, #597	; 0x255
 8018b02:	4914      	ldr	r1, [pc, #80]	; (8018b54 <pbuf_remove_header+0xa0>)
 8018b04:	4812      	ldr	r0, [pc, #72]	; (8018b50 <pbuf_remove_header+0x9c>)
 8018b06:	f00a f977 	bl	8022df8 <iprintf>
 8018b0a:	2301      	movs	r3, #1
 8018b0c:	e017      	b.n	8018b3e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	685b      	ldr	r3, [r3, #4]
 8018b12:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	685a      	ldr	r2, [r3, #4]
 8018b18:	683b      	ldr	r3, [r7, #0]
 8018b1a:	441a      	add	r2, r3
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	895a      	ldrh	r2, [r3, #10]
 8018b24:	89fb      	ldrh	r3, [r7, #14]
 8018b26:	1ad3      	subs	r3, r2, r3
 8018b28:	b29a      	uxth	r2, r3
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	891a      	ldrh	r2, [r3, #8]
 8018b32:	89fb      	ldrh	r3, [r7, #14]
 8018b34:	1ad3      	subs	r3, r2, r3
 8018b36:	b29a      	uxth	r2, r3
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018b3c:	2300      	movs	r3, #0
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3710      	adds	r7, #16
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bd80      	pop	{r7, pc}
 8018b46:	bf00      	nop
 8018b48:	08025458 	.word	0x08025458
 8018b4c:	080255bc 	.word	0x080255bc
 8018b50:	080254b8 	.word	0x080254b8
 8018b54:	080255c8 	.word	0x080255c8

08018b58 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b082      	sub	sp, #8
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
 8018b60:	460b      	mov	r3, r1
 8018b62:	807b      	strh	r3, [r7, #2]
 8018b64:	4613      	mov	r3, r2
 8018b66:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8018b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	da08      	bge.n	8018b82 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8018b70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018b74:	425b      	negs	r3, r3
 8018b76:	4619      	mov	r1, r3
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f7ff ff9b 	bl	8018ab4 <pbuf_remove_header>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	e007      	b.n	8018b92 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8018b82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018b86:	787a      	ldrb	r2, [r7, #1]
 8018b88:	4619      	mov	r1, r3
 8018b8a:	6878      	ldr	r0, [r7, #4]
 8018b8c:	f7ff ff1a 	bl	80189c4 <pbuf_add_header_impl>
 8018b90:	4603      	mov	r3, r0
  }
}
 8018b92:	4618      	mov	r0, r3
 8018b94:	3708      	adds	r7, #8
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}

08018b9a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018b9a:	b580      	push	{r7, lr}
 8018b9c:	b082      	sub	sp, #8
 8018b9e:	af00      	add	r7, sp, #0
 8018ba0:	6078      	str	r0, [r7, #4]
 8018ba2:	460b      	mov	r3, r1
 8018ba4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8018ba6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018baa:	2201      	movs	r2, #1
 8018bac:	4619      	mov	r1, r3
 8018bae:	6878      	ldr	r0, [r7, #4]
 8018bb0:	f7ff ffd2 	bl	8018b58 <pbuf_header_impl>
 8018bb4:	4603      	mov	r3, r0
}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	3708      	adds	r7, #8
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}
	...

08018bc0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b088      	sub	sp, #32
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d10b      	bne.n	8018be6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d106      	bne.n	8018be2 <pbuf_free+0x22>
 8018bd4:	4b3b      	ldr	r3, [pc, #236]	; (8018cc4 <pbuf_free+0x104>)
 8018bd6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8018bda:	493b      	ldr	r1, [pc, #236]	; (8018cc8 <pbuf_free+0x108>)
 8018bdc:	483b      	ldr	r0, [pc, #236]	; (8018ccc <pbuf_free+0x10c>)
 8018bde:	f00a f90b 	bl	8022df8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	e069      	b.n	8018cba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8018be6:	2300      	movs	r3, #0
 8018be8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8018bea:	e062      	b.n	8018cb2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8018bec:	f009 fd8c 	bl	8022708 <sys_arch_protect>
 8018bf0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	7b9b      	ldrb	r3, [r3, #14]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d106      	bne.n	8018c08 <pbuf_free+0x48>
 8018bfa:	4b32      	ldr	r3, [pc, #200]	; (8018cc4 <pbuf_free+0x104>)
 8018bfc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018c00:	4933      	ldr	r1, [pc, #204]	; (8018cd0 <pbuf_free+0x110>)
 8018c02:	4832      	ldr	r0, [pc, #200]	; (8018ccc <pbuf_free+0x10c>)
 8018c04:	f00a f8f8 	bl	8022df8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	7b9b      	ldrb	r3, [r3, #14]
 8018c0c:	3b01      	subs	r3, #1
 8018c0e:	b2da      	uxtb	r2, r3
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	739a      	strb	r2, [r3, #14]
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	7b9b      	ldrb	r3, [r3, #14]
 8018c18:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8018c1a:	69b8      	ldr	r0, [r7, #24]
 8018c1c:	f009 fd82 	bl	8022724 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8018c20:	7dfb      	ldrb	r3, [r7, #23]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d143      	bne.n	8018cae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	7b1b      	ldrb	r3, [r3, #12]
 8018c30:	f003 030f 	and.w	r3, r3, #15
 8018c34:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	7b5b      	ldrb	r3, [r3, #13]
 8018c3a:	f003 0302 	and.w	r3, r3, #2
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d011      	beq.n	8018c66 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	691b      	ldr	r3, [r3, #16]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d106      	bne.n	8018c5c <pbuf_free+0x9c>
 8018c4e:	4b1d      	ldr	r3, [pc, #116]	; (8018cc4 <pbuf_free+0x104>)
 8018c50:	f240 22ff 	movw	r2, #767	; 0x2ff
 8018c54:	491f      	ldr	r1, [pc, #124]	; (8018cd4 <pbuf_free+0x114>)
 8018c56:	481d      	ldr	r0, [pc, #116]	; (8018ccc <pbuf_free+0x10c>)
 8018c58:	f00a f8ce 	bl	8022df8 <iprintf>
        pc->custom_free_function(p);
 8018c5c:	68bb      	ldr	r3, [r7, #8]
 8018c5e:	691b      	ldr	r3, [r3, #16]
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	4798      	blx	r3
 8018c64:	e01d      	b.n	8018ca2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8018c66:	7bfb      	ldrb	r3, [r7, #15]
 8018c68:	2b02      	cmp	r3, #2
 8018c6a:	d104      	bne.n	8018c76 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8018c6c:	6879      	ldr	r1, [r7, #4]
 8018c6e:	200c      	movs	r0, #12
 8018c70:	f7ff f902 	bl	8017e78 <memp_free>
 8018c74:	e015      	b.n	8018ca2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8018c76:	7bfb      	ldrb	r3, [r7, #15]
 8018c78:	2b01      	cmp	r3, #1
 8018c7a:	d104      	bne.n	8018c86 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8018c7c:	6879      	ldr	r1, [r7, #4]
 8018c7e:	200b      	movs	r0, #11
 8018c80:	f7ff f8fa 	bl	8017e78 <memp_free>
 8018c84:	e00d      	b.n	8018ca2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8018c86:	7bfb      	ldrb	r3, [r7, #15]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d103      	bne.n	8018c94 <pbuf_free+0xd4>
          mem_free(p);
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f7fe fd3f 	bl	8017710 <mem_free>
 8018c92:	e006      	b.n	8018ca2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8018c94:	4b0b      	ldr	r3, [pc, #44]	; (8018cc4 <pbuf_free+0x104>)
 8018c96:	f240 320f 	movw	r2, #783	; 0x30f
 8018c9a:	490f      	ldr	r1, [pc, #60]	; (8018cd8 <pbuf_free+0x118>)
 8018c9c:	480b      	ldr	r0, [pc, #44]	; (8018ccc <pbuf_free+0x10c>)
 8018c9e:	f00a f8ab 	bl	8022df8 <iprintf>
        }
      }
      count++;
 8018ca2:	7ffb      	ldrb	r3, [r7, #31]
 8018ca4:	3301      	adds	r3, #1
 8018ca6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8018ca8:	693b      	ldr	r3, [r7, #16]
 8018caa:	607b      	str	r3, [r7, #4]
 8018cac:	e001      	b.n	8018cb2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8018cae:	2300      	movs	r3, #0
 8018cb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d199      	bne.n	8018bec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8018cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	3720      	adds	r7, #32
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	08025458 	.word	0x08025458
 8018cc8:	080255bc 	.word	0x080255bc
 8018ccc:	080254b8 	.word	0x080254b8
 8018cd0:	080255e8 	.word	0x080255e8
 8018cd4:	08025600 	.word	0x08025600
 8018cd8:	08025624 	.word	0x08025624

08018cdc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8018cdc:	b480      	push	{r7}
 8018cde:	b085      	sub	sp, #20
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8018ce8:	e005      	b.n	8018cf6 <pbuf_clen+0x1a>
    ++len;
 8018cea:	89fb      	ldrh	r3, [r7, #14]
 8018cec:	3301      	adds	r3, #1
 8018cee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d1f6      	bne.n	8018cea <pbuf_clen+0xe>
  }
  return len;
 8018cfc:	89fb      	ldrh	r3, [r7, #14]
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	3714      	adds	r7, #20
 8018d02:	46bd      	mov	sp, r7
 8018d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d08:	4770      	bx	lr
	...

08018d0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b084      	sub	sp, #16
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d016      	beq.n	8018d48 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018d1a:	f009 fcf5 	bl	8022708 <sys_arch_protect>
 8018d1e:	60f8      	str	r0, [r7, #12]
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	7b9b      	ldrb	r3, [r3, #14]
 8018d24:	3301      	adds	r3, #1
 8018d26:	b2da      	uxtb	r2, r3
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	739a      	strb	r2, [r3, #14]
 8018d2c:	68f8      	ldr	r0, [r7, #12]
 8018d2e:	f009 fcf9 	bl	8022724 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	7b9b      	ldrb	r3, [r3, #14]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d106      	bne.n	8018d48 <pbuf_ref+0x3c>
 8018d3a:	4b05      	ldr	r3, [pc, #20]	; (8018d50 <pbuf_ref+0x44>)
 8018d3c:	f240 3242 	movw	r2, #834	; 0x342
 8018d40:	4904      	ldr	r1, [pc, #16]	; (8018d54 <pbuf_ref+0x48>)
 8018d42:	4805      	ldr	r0, [pc, #20]	; (8018d58 <pbuf_ref+0x4c>)
 8018d44:	f00a f858 	bl	8022df8 <iprintf>
  }
}
 8018d48:	bf00      	nop
 8018d4a:	3710      	adds	r7, #16
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}
 8018d50:	08025458 	.word	0x08025458
 8018d54:	08025638 	.word	0x08025638
 8018d58:	080254b8 	.word	0x080254b8

08018d5c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b084      	sub	sp, #16
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d002      	beq.n	8018d72 <pbuf_cat+0x16>
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d107      	bne.n	8018d82 <pbuf_cat+0x26>
 8018d72:	4b20      	ldr	r3, [pc, #128]	; (8018df4 <pbuf_cat+0x98>)
 8018d74:	f240 3259 	movw	r2, #857	; 0x359
 8018d78:	491f      	ldr	r1, [pc, #124]	; (8018df8 <pbuf_cat+0x9c>)
 8018d7a:	4820      	ldr	r0, [pc, #128]	; (8018dfc <pbuf_cat+0xa0>)
 8018d7c:	f00a f83c 	bl	8022df8 <iprintf>
 8018d80:	e034      	b.n	8018dec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	60fb      	str	r3, [r7, #12]
 8018d86:	e00a      	b.n	8018d9e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	891a      	ldrh	r2, [r3, #8]
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	891b      	ldrh	r3, [r3, #8]
 8018d90:	4413      	add	r3, r2
 8018d92:	b29a      	uxth	r2, r3
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	60fb      	str	r3, [r7, #12]
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d1f0      	bne.n	8018d88 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	891a      	ldrh	r2, [r3, #8]
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	895b      	ldrh	r3, [r3, #10]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d006      	beq.n	8018dc0 <pbuf_cat+0x64>
 8018db2:	4b10      	ldr	r3, [pc, #64]	; (8018df4 <pbuf_cat+0x98>)
 8018db4:	f240 3262 	movw	r2, #866	; 0x362
 8018db8:	4911      	ldr	r1, [pc, #68]	; (8018e00 <pbuf_cat+0xa4>)
 8018dba:	4810      	ldr	r0, [pc, #64]	; (8018dfc <pbuf_cat+0xa0>)
 8018dbc:	f00a f81c 	bl	8022df8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d006      	beq.n	8018dd6 <pbuf_cat+0x7a>
 8018dc8:	4b0a      	ldr	r3, [pc, #40]	; (8018df4 <pbuf_cat+0x98>)
 8018dca:	f240 3263 	movw	r2, #867	; 0x363
 8018dce:	490d      	ldr	r1, [pc, #52]	; (8018e04 <pbuf_cat+0xa8>)
 8018dd0:	480a      	ldr	r0, [pc, #40]	; (8018dfc <pbuf_cat+0xa0>)
 8018dd2:	f00a f811 	bl	8022df8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	891a      	ldrh	r2, [r3, #8]
 8018dda:	683b      	ldr	r3, [r7, #0]
 8018ddc:	891b      	ldrh	r3, [r3, #8]
 8018dde:	4413      	add	r3, r2
 8018de0:	b29a      	uxth	r2, r3
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	683a      	ldr	r2, [r7, #0]
 8018dea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8018dec:	3710      	adds	r7, #16
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
 8018df2:	bf00      	nop
 8018df4:	08025458 	.word	0x08025458
 8018df8:	0802564c 	.word	0x0802564c
 8018dfc:	080254b8 	.word	0x080254b8
 8018e00:	08025684 	.word	0x08025684
 8018e04:	080256b4 	.word	0x080256b4

08018e08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b086      	sub	sp, #24
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
 8018e10:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018e12:	2300      	movs	r3, #0
 8018e14:	617b      	str	r3, [r7, #20]
 8018e16:	2300      	movs	r3, #0
 8018e18:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d008      	beq.n	8018e32 <pbuf_copy+0x2a>
 8018e20:	683b      	ldr	r3, [r7, #0]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d005      	beq.n	8018e32 <pbuf_copy+0x2a>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	891a      	ldrh	r2, [r3, #8]
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	891b      	ldrh	r3, [r3, #8]
 8018e2e:	429a      	cmp	r2, r3
 8018e30:	d209      	bcs.n	8018e46 <pbuf_copy+0x3e>
 8018e32:	4b57      	ldr	r3, [pc, #348]	; (8018f90 <pbuf_copy+0x188>)
 8018e34:	f240 32c9 	movw	r2, #969	; 0x3c9
 8018e38:	4956      	ldr	r1, [pc, #344]	; (8018f94 <pbuf_copy+0x18c>)
 8018e3a:	4857      	ldr	r0, [pc, #348]	; (8018f98 <pbuf_copy+0x190>)
 8018e3c:	f009 ffdc 	bl	8022df8 <iprintf>
 8018e40:	f06f 030f 	mvn.w	r3, #15
 8018e44:	e09f      	b.n	8018f86 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	895b      	ldrh	r3, [r3, #10]
 8018e4a:	461a      	mov	r2, r3
 8018e4c:	697b      	ldr	r3, [r7, #20]
 8018e4e:	1ad2      	subs	r2, r2, r3
 8018e50:	683b      	ldr	r3, [r7, #0]
 8018e52:	895b      	ldrh	r3, [r3, #10]
 8018e54:	4619      	mov	r1, r3
 8018e56:	693b      	ldr	r3, [r7, #16]
 8018e58:	1acb      	subs	r3, r1, r3
 8018e5a:	429a      	cmp	r2, r3
 8018e5c:	d306      	bcc.n	8018e6c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8018e5e:	683b      	ldr	r3, [r7, #0]
 8018e60:	895b      	ldrh	r3, [r3, #10]
 8018e62:	461a      	mov	r2, r3
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	1ad3      	subs	r3, r2, r3
 8018e68:	60fb      	str	r3, [r7, #12]
 8018e6a:	e005      	b.n	8018e78 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	895b      	ldrh	r3, [r3, #10]
 8018e70:	461a      	mov	r2, r3
 8018e72:	697b      	ldr	r3, [r7, #20]
 8018e74:	1ad3      	subs	r3, r2, r3
 8018e76:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	685a      	ldr	r2, [r3, #4]
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	18d0      	adds	r0, r2, r3
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	685a      	ldr	r2, [r3, #4]
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	4413      	add	r3, r2
 8018e88:	68fa      	ldr	r2, [r7, #12]
 8018e8a:	4619      	mov	r1, r3
 8018e8c:	f00a f925 	bl	80230da <memcpy>
    offset_to += len;
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	4413      	add	r3, r2
 8018e96:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8018e98:	693a      	ldr	r2, [r7, #16]
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	4413      	add	r3, r2
 8018e9e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	895b      	ldrh	r3, [r3, #10]
 8018ea4:	461a      	mov	r2, r3
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	4293      	cmp	r3, r2
 8018eaa:	d906      	bls.n	8018eba <pbuf_copy+0xb2>
 8018eac:	4b38      	ldr	r3, [pc, #224]	; (8018f90 <pbuf_copy+0x188>)
 8018eae:	f240 32d9 	movw	r2, #985	; 0x3d9
 8018eb2:	493a      	ldr	r1, [pc, #232]	; (8018f9c <pbuf_copy+0x194>)
 8018eb4:	4838      	ldr	r0, [pc, #224]	; (8018f98 <pbuf_copy+0x190>)
 8018eb6:	f009 ff9f 	bl	8022df8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	895b      	ldrh	r3, [r3, #10]
 8018ebe:	461a      	mov	r2, r3
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	4293      	cmp	r3, r2
 8018ec4:	d906      	bls.n	8018ed4 <pbuf_copy+0xcc>
 8018ec6:	4b32      	ldr	r3, [pc, #200]	; (8018f90 <pbuf_copy+0x188>)
 8018ec8:	f240 32da 	movw	r2, #986	; 0x3da
 8018ecc:	4934      	ldr	r1, [pc, #208]	; (8018fa0 <pbuf_copy+0x198>)
 8018ece:	4832      	ldr	r0, [pc, #200]	; (8018f98 <pbuf_copy+0x190>)
 8018ed0:	f009 ff92 	bl	8022df8 <iprintf>
    if (offset_from >= p_from->len) {
 8018ed4:	683b      	ldr	r3, [r7, #0]
 8018ed6:	895b      	ldrh	r3, [r3, #10]
 8018ed8:	461a      	mov	r2, r3
 8018eda:	693b      	ldr	r3, [r7, #16]
 8018edc:	4293      	cmp	r3, r2
 8018ede:	d304      	bcc.n	8018eea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018ee4:	683b      	ldr	r3, [r7, #0]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	895b      	ldrh	r3, [r3, #10]
 8018eee:	461a      	mov	r2, r3
 8018ef0:	697b      	ldr	r3, [r7, #20]
 8018ef2:	4293      	cmp	r3, r2
 8018ef4:	d114      	bne.n	8018f20 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d10c      	bne.n	8018f20 <pbuf_copy+0x118>
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d009      	beq.n	8018f20 <pbuf_copy+0x118>
 8018f0c:	4b20      	ldr	r3, [pc, #128]	; (8018f90 <pbuf_copy+0x188>)
 8018f0e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018f12:	4924      	ldr	r1, [pc, #144]	; (8018fa4 <pbuf_copy+0x19c>)
 8018f14:	4820      	ldr	r0, [pc, #128]	; (8018f98 <pbuf_copy+0x190>)
 8018f16:	f009 ff6f 	bl	8022df8 <iprintf>
 8018f1a:	f06f 030f 	mvn.w	r3, #15
 8018f1e:	e032      	b.n	8018f86 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018f20:	683b      	ldr	r3, [r7, #0]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d013      	beq.n	8018f4e <pbuf_copy+0x146>
 8018f26:	683b      	ldr	r3, [r7, #0]
 8018f28:	895a      	ldrh	r2, [r3, #10]
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	891b      	ldrh	r3, [r3, #8]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d10d      	bne.n	8018f4e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d009      	beq.n	8018f4e <pbuf_copy+0x146>
 8018f3a:	4b15      	ldr	r3, [pc, #84]	; (8018f90 <pbuf_copy+0x188>)
 8018f3c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8018f40:	4919      	ldr	r1, [pc, #100]	; (8018fa8 <pbuf_copy+0x1a0>)
 8018f42:	4815      	ldr	r0, [pc, #84]	; (8018f98 <pbuf_copy+0x190>)
 8018f44:	f009 ff58 	bl	8022df8 <iprintf>
 8018f48:	f06f 0305 	mvn.w	r3, #5
 8018f4c:	e01b      	b.n	8018f86 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d013      	beq.n	8018f7c <pbuf_copy+0x174>
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	895a      	ldrh	r2, [r3, #10]
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	891b      	ldrh	r3, [r3, #8]
 8018f5c:	429a      	cmp	r2, r3
 8018f5e:	d10d      	bne.n	8018f7c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d009      	beq.n	8018f7c <pbuf_copy+0x174>
 8018f68:	4b09      	ldr	r3, [pc, #36]	; (8018f90 <pbuf_copy+0x188>)
 8018f6a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8018f6e:	490e      	ldr	r1, [pc, #56]	; (8018fa8 <pbuf_copy+0x1a0>)
 8018f70:	4809      	ldr	r0, [pc, #36]	; (8018f98 <pbuf_copy+0x190>)
 8018f72:	f009 ff41 	bl	8022df8 <iprintf>
 8018f76:	f06f 0305 	mvn.w	r3, #5
 8018f7a:	e004      	b.n	8018f86 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8018f7c:	683b      	ldr	r3, [r7, #0]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	f47f af61 	bne.w	8018e46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018f84:	2300      	movs	r3, #0
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	3718      	adds	r7, #24
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	08025458 	.word	0x08025458
 8018f94:	08025700 	.word	0x08025700
 8018f98:	080254b8 	.word	0x080254b8
 8018f9c:	08025730 	.word	0x08025730
 8018fa0:	08025748 	.word	0x08025748
 8018fa4:	08025764 	.word	0x08025764
 8018fa8:	08025774 	.word	0x08025774

08018fac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b088      	sub	sp, #32
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	60f8      	str	r0, [r7, #12]
 8018fb4:	60b9      	str	r1, [r7, #8]
 8018fb6:	4611      	mov	r1, r2
 8018fb8:	461a      	mov	r2, r3
 8018fba:	460b      	mov	r3, r1
 8018fbc:	80fb      	strh	r3, [r7, #6]
 8018fbe:	4613      	mov	r3, r2
 8018fc0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d108      	bne.n	8018fe2 <pbuf_copy_partial+0x36>
 8018fd0:	4b2b      	ldr	r3, [pc, #172]	; (8019080 <pbuf_copy_partial+0xd4>)
 8018fd2:	f240 420a 	movw	r2, #1034	; 0x40a
 8018fd6:	492b      	ldr	r1, [pc, #172]	; (8019084 <pbuf_copy_partial+0xd8>)
 8018fd8:	482b      	ldr	r0, [pc, #172]	; (8019088 <pbuf_copy_partial+0xdc>)
 8018fda:	f009 ff0d 	bl	8022df8 <iprintf>
 8018fde:	2300      	movs	r3, #0
 8018fe0:	e04a      	b.n	8019078 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018fe2:	68bb      	ldr	r3, [r7, #8]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d108      	bne.n	8018ffa <pbuf_copy_partial+0x4e>
 8018fe8:	4b25      	ldr	r3, [pc, #148]	; (8019080 <pbuf_copy_partial+0xd4>)
 8018fea:	f240 420b 	movw	r2, #1035	; 0x40b
 8018fee:	4927      	ldr	r1, [pc, #156]	; (801908c <pbuf_copy_partial+0xe0>)
 8018ff0:	4825      	ldr	r0, [pc, #148]	; (8019088 <pbuf_copy_partial+0xdc>)
 8018ff2:	f009 ff01 	bl	8022df8 <iprintf>
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	e03e      	b.n	8019078 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	61fb      	str	r3, [r7, #28]
 8018ffe:	e034      	b.n	801906a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019000:	88bb      	ldrh	r3, [r7, #4]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d00a      	beq.n	801901c <pbuf_copy_partial+0x70>
 8019006:	69fb      	ldr	r3, [r7, #28]
 8019008:	895b      	ldrh	r3, [r3, #10]
 801900a:	88ba      	ldrh	r2, [r7, #4]
 801900c:	429a      	cmp	r2, r3
 801900e:	d305      	bcc.n	801901c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019010:	69fb      	ldr	r3, [r7, #28]
 8019012:	895b      	ldrh	r3, [r3, #10]
 8019014:	88ba      	ldrh	r2, [r7, #4]
 8019016:	1ad3      	subs	r3, r2, r3
 8019018:	80bb      	strh	r3, [r7, #4]
 801901a:	e023      	b.n	8019064 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801901c:	69fb      	ldr	r3, [r7, #28]
 801901e:	895a      	ldrh	r2, [r3, #10]
 8019020:	88bb      	ldrh	r3, [r7, #4]
 8019022:	1ad3      	subs	r3, r2, r3
 8019024:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8019026:	8b3a      	ldrh	r2, [r7, #24]
 8019028:	88fb      	ldrh	r3, [r7, #6]
 801902a:	429a      	cmp	r2, r3
 801902c:	d901      	bls.n	8019032 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801902e:	88fb      	ldrh	r3, [r7, #6]
 8019030:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019032:	8b7b      	ldrh	r3, [r7, #26]
 8019034:	68ba      	ldr	r2, [r7, #8]
 8019036:	18d0      	adds	r0, r2, r3
 8019038:	69fb      	ldr	r3, [r7, #28]
 801903a:	685a      	ldr	r2, [r3, #4]
 801903c:	88bb      	ldrh	r3, [r7, #4]
 801903e:	4413      	add	r3, r2
 8019040:	8b3a      	ldrh	r2, [r7, #24]
 8019042:	4619      	mov	r1, r3
 8019044:	f00a f849 	bl	80230da <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8019048:	8afa      	ldrh	r2, [r7, #22]
 801904a:	8b3b      	ldrh	r3, [r7, #24]
 801904c:	4413      	add	r3, r2
 801904e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8019050:	8b7a      	ldrh	r2, [r7, #26]
 8019052:	8b3b      	ldrh	r3, [r7, #24]
 8019054:	4413      	add	r3, r2
 8019056:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8019058:	88fa      	ldrh	r2, [r7, #6]
 801905a:	8b3b      	ldrh	r3, [r7, #24]
 801905c:	1ad3      	subs	r3, r2, r3
 801905e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8019060:	2300      	movs	r3, #0
 8019062:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019064:	69fb      	ldr	r3, [r7, #28]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	61fb      	str	r3, [r7, #28]
 801906a:	88fb      	ldrh	r3, [r7, #6]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d002      	beq.n	8019076 <pbuf_copy_partial+0xca>
 8019070:	69fb      	ldr	r3, [r7, #28]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d1c4      	bne.n	8019000 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8019076:	8afb      	ldrh	r3, [r7, #22]
}
 8019078:	4618      	mov	r0, r3
 801907a:	3720      	adds	r7, #32
 801907c:	46bd      	mov	sp, r7
 801907e:	bd80      	pop	{r7, pc}
 8019080:	08025458 	.word	0x08025458
 8019084:	080257a0 	.word	0x080257a0
 8019088:	080254b8 	.word	0x080254b8
 801908c:	080257c0 	.word	0x080257c0

08019090 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b084      	sub	sp, #16
 8019094:	af00      	add	r7, sp, #0
 8019096:	4603      	mov	r3, r0
 8019098:	603a      	str	r2, [r7, #0]
 801909a:	71fb      	strb	r3, [r7, #7]
 801909c:	460b      	mov	r3, r1
 801909e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	8919      	ldrh	r1, [r3, #8]
 80190a4:	88ba      	ldrh	r2, [r7, #4]
 80190a6:	79fb      	ldrb	r3, [r7, #7]
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7ff faa5 	bl	80185f8 <pbuf_alloc>
 80190ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d101      	bne.n	80190ba <pbuf_clone+0x2a>
    return NULL;
 80190b6:	2300      	movs	r3, #0
 80190b8:	e011      	b.n	80190de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80190ba:	6839      	ldr	r1, [r7, #0]
 80190bc:	68f8      	ldr	r0, [r7, #12]
 80190be:	f7ff fea3 	bl	8018e08 <pbuf_copy>
 80190c2:	4603      	mov	r3, r0
 80190c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80190c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d006      	beq.n	80190dc <pbuf_clone+0x4c>
 80190ce:	4b06      	ldr	r3, [pc, #24]	; (80190e8 <pbuf_clone+0x58>)
 80190d0:	f240 5224 	movw	r2, #1316	; 0x524
 80190d4:	4905      	ldr	r1, [pc, #20]	; (80190ec <pbuf_clone+0x5c>)
 80190d6:	4806      	ldr	r0, [pc, #24]	; (80190f0 <pbuf_clone+0x60>)
 80190d8:	f009 fe8e 	bl	8022df8 <iprintf>
  return q;
 80190dc:	68fb      	ldr	r3, [r7, #12]
}
 80190de:	4618      	mov	r0, r3
 80190e0:	3710      	adds	r7, #16
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd80      	pop	{r7, pc}
 80190e6:	bf00      	nop
 80190e8:	08025458 	.word	0x08025458
 80190ec:	080258cc 	.word	0x080258cc
 80190f0:	080254b8 	.word	0x080254b8

080190f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80190f8:	f009 fd7e 	bl	8022bf8 <rand>
 80190fc:	4603      	mov	r3, r0
 80190fe:	b29b      	uxth	r3, r3
 8019100:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019104:	b29b      	uxth	r3, r3
 8019106:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801910a:	b29a      	uxth	r2, r3
 801910c:	4b01      	ldr	r3, [pc, #4]	; (8019114 <tcp_init+0x20>)
 801910e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019110:	bf00      	nop
 8019112:	bd80      	pop	{r7, pc}
 8019114:	20050080 	.word	0x20050080

08019118 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	7d1b      	ldrb	r3, [r3, #20]
 8019124:	2b01      	cmp	r3, #1
 8019126:	d105      	bne.n	8019134 <tcp_free+0x1c>
 8019128:	4b06      	ldr	r3, [pc, #24]	; (8019144 <tcp_free+0x2c>)
 801912a:	22d4      	movs	r2, #212	; 0xd4
 801912c:	4906      	ldr	r1, [pc, #24]	; (8019148 <tcp_free+0x30>)
 801912e:	4807      	ldr	r0, [pc, #28]	; (801914c <tcp_free+0x34>)
 8019130:	f009 fe62 	bl	8022df8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8019134:	6879      	ldr	r1, [r7, #4]
 8019136:	2001      	movs	r0, #1
 8019138:	f7fe fe9e 	bl	8017e78 <memp_free>
}
 801913c:	bf00      	nop
 801913e:	3708      	adds	r7, #8
 8019140:	46bd      	mov	sp, r7
 8019142:	bd80      	pop	{r7, pc}
 8019144:	08025958 	.word	0x08025958
 8019148:	08025988 	.word	0x08025988
 801914c:	0802599c 	.word	0x0802599c

08019150 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b082      	sub	sp, #8
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	7d1b      	ldrb	r3, [r3, #20]
 801915c:	2b01      	cmp	r3, #1
 801915e:	d105      	bne.n	801916c <tcp_free_listen+0x1c>
 8019160:	4b06      	ldr	r3, [pc, #24]	; (801917c <tcp_free_listen+0x2c>)
 8019162:	22df      	movs	r2, #223	; 0xdf
 8019164:	4906      	ldr	r1, [pc, #24]	; (8019180 <tcp_free_listen+0x30>)
 8019166:	4807      	ldr	r0, [pc, #28]	; (8019184 <tcp_free_listen+0x34>)
 8019168:	f009 fe46 	bl	8022df8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801916c:	6879      	ldr	r1, [r7, #4]
 801916e:	2002      	movs	r0, #2
 8019170:	f7fe fe82 	bl	8017e78 <memp_free>
}
 8019174:	bf00      	nop
 8019176:	3708      	adds	r7, #8
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}
 801917c:	08025958 	.word	0x08025958
 8019180:	080259c4 	.word	0x080259c4
 8019184:	0802599c 	.word	0x0802599c

08019188 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019188:	b580      	push	{r7, lr}
 801918a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801918c:	f001 f9be 	bl	801a50c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019190:	4b07      	ldr	r3, [pc, #28]	; (80191b0 <tcp_tmr+0x28>)
 8019192:	781b      	ldrb	r3, [r3, #0]
 8019194:	3301      	adds	r3, #1
 8019196:	b2da      	uxtb	r2, r3
 8019198:	4b05      	ldr	r3, [pc, #20]	; (80191b0 <tcp_tmr+0x28>)
 801919a:	701a      	strb	r2, [r3, #0]
 801919c:	4b04      	ldr	r3, [pc, #16]	; (80191b0 <tcp_tmr+0x28>)
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	f003 0301 	and.w	r3, r3, #1
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d001      	beq.n	80191ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80191a8:	f000 fe70 	bl	8019e8c <tcp_slowtmr>
  }
}
 80191ac:	bf00      	nop
 80191ae:	bd80      	pop	{r7, pc}
 80191b0:	20061ca9 	.word	0x20061ca9

080191b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b084      	sub	sp, #16
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
 80191bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80191be:	683b      	ldr	r3, [r7, #0]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d105      	bne.n	80191d0 <tcp_remove_listener+0x1c>
 80191c4:	4b0d      	ldr	r3, [pc, #52]	; (80191fc <tcp_remove_listener+0x48>)
 80191c6:	22ff      	movs	r2, #255	; 0xff
 80191c8:	490d      	ldr	r1, [pc, #52]	; (8019200 <tcp_remove_listener+0x4c>)
 80191ca:	480e      	ldr	r0, [pc, #56]	; (8019204 <tcp_remove_listener+0x50>)
 80191cc:	f009 fe14 	bl	8022df8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	60fb      	str	r3, [r7, #12]
 80191d4:	e00a      	b.n	80191ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80191da:	683a      	ldr	r2, [r7, #0]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d102      	bne.n	80191e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	2200      	movs	r2, #0
 80191e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	68db      	ldr	r3, [r3, #12]
 80191ea:	60fb      	str	r3, [r7, #12]
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d1f1      	bne.n	80191d6 <tcp_remove_listener+0x22>
    }
  }
}
 80191f2:	bf00      	nop
 80191f4:	bf00      	nop
 80191f6:	3710      	adds	r7, #16
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	08025958 	.word	0x08025958
 8019200:	080259e0 	.word	0x080259e0
 8019204:	0802599c 	.word	0x0802599c

08019208 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b084      	sub	sp, #16
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d106      	bne.n	8019224 <tcp_listen_closed+0x1c>
 8019216:	4b14      	ldr	r3, [pc, #80]	; (8019268 <tcp_listen_closed+0x60>)
 8019218:	f240 1211 	movw	r2, #273	; 0x111
 801921c:	4913      	ldr	r1, [pc, #76]	; (801926c <tcp_listen_closed+0x64>)
 801921e:	4814      	ldr	r0, [pc, #80]	; (8019270 <tcp_listen_closed+0x68>)
 8019220:	f009 fdea 	bl	8022df8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	7d1b      	ldrb	r3, [r3, #20]
 8019228:	2b01      	cmp	r3, #1
 801922a:	d006      	beq.n	801923a <tcp_listen_closed+0x32>
 801922c:	4b0e      	ldr	r3, [pc, #56]	; (8019268 <tcp_listen_closed+0x60>)
 801922e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8019232:	4910      	ldr	r1, [pc, #64]	; (8019274 <tcp_listen_closed+0x6c>)
 8019234:	480e      	ldr	r0, [pc, #56]	; (8019270 <tcp_listen_closed+0x68>)
 8019236:	f009 fddf 	bl	8022df8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801923a:	2301      	movs	r3, #1
 801923c:	60fb      	str	r3, [r7, #12]
 801923e:	e00b      	b.n	8019258 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8019240:	4a0d      	ldr	r2, [pc, #52]	; (8019278 <tcp_listen_closed+0x70>)
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	6879      	ldr	r1, [r7, #4]
 801924c:	4618      	mov	r0, r3
 801924e:	f7ff ffb1 	bl	80191b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	3301      	adds	r3, #1
 8019256:	60fb      	str	r3, [r7, #12]
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	2b03      	cmp	r3, #3
 801925c:	d9f0      	bls.n	8019240 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801925e:	bf00      	nop
 8019260:	bf00      	nop
 8019262:	3710      	adds	r7, #16
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}
 8019268:	08025958 	.word	0x08025958
 801926c:	08025a08 	.word	0x08025a08
 8019270:	0802599c 	.word	0x0802599c
 8019274:	08025a14 	.word	0x08025a14
 8019278:	08027b88 	.word	0x08027b88

0801927c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801927c:	b5b0      	push	{r4, r5, r7, lr}
 801927e:	b088      	sub	sp, #32
 8019280:	af04      	add	r7, sp, #16
 8019282:	6078      	str	r0, [r7, #4]
 8019284:	460b      	mov	r3, r1
 8019286:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d106      	bne.n	801929c <tcp_close_shutdown+0x20>
 801928e:	4b63      	ldr	r3, [pc, #396]	; (801941c <tcp_close_shutdown+0x1a0>)
 8019290:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019294:	4962      	ldr	r1, [pc, #392]	; (8019420 <tcp_close_shutdown+0x1a4>)
 8019296:	4863      	ldr	r0, [pc, #396]	; (8019424 <tcp_close_shutdown+0x1a8>)
 8019298:	f009 fdae 	bl	8022df8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801929c:	78fb      	ldrb	r3, [r7, #3]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d066      	beq.n	8019370 <tcp_close_shutdown+0xf4>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	7d1b      	ldrb	r3, [r3, #20]
 80192a6:	2b04      	cmp	r3, #4
 80192a8:	d003      	beq.n	80192b2 <tcp_close_shutdown+0x36>
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	7d1b      	ldrb	r3, [r3, #20]
 80192ae:	2b07      	cmp	r3, #7
 80192b0:	d15e      	bne.n	8019370 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d104      	bne.n	80192c4 <tcp_close_shutdown+0x48>
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80192be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80192c2:	d055      	beq.n	8019370 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	8b5b      	ldrh	r3, [r3, #26]
 80192c8:	f003 0310 	and.w	r3, r3, #16
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d106      	bne.n	80192de <tcp_close_shutdown+0x62>
 80192d0:	4b52      	ldr	r3, [pc, #328]	; (801941c <tcp_close_shutdown+0x1a0>)
 80192d2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80192d6:	4954      	ldr	r1, [pc, #336]	; (8019428 <tcp_close_shutdown+0x1ac>)
 80192d8:	4852      	ldr	r0, [pc, #328]	; (8019424 <tcp_close_shutdown+0x1a8>)
 80192da:	f009 fd8d 	bl	8022df8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80192e6:	687d      	ldr	r5, [r7, #4]
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	3304      	adds	r3, #4
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	8ad2      	ldrh	r2, [r2, #22]
 80192f0:	6879      	ldr	r1, [r7, #4]
 80192f2:	8b09      	ldrh	r1, [r1, #24]
 80192f4:	9102      	str	r1, [sp, #8]
 80192f6:	9201      	str	r2, [sp, #4]
 80192f8:	9300      	str	r3, [sp, #0]
 80192fa:	462b      	mov	r3, r5
 80192fc:	4622      	mov	r2, r4
 80192fe:	4601      	mov	r1, r0
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	f005 fed3 	bl	801f0ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8019306:	6878      	ldr	r0, [r7, #4]
 8019308:	f001 fcb0 	bl	801ac6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801930c:	4b47      	ldr	r3, [pc, #284]	; (801942c <tcp_close_shutdown+0x1b0>)
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	687a      	ldr	r2, [r7, #4]
 8019312:	429a      	cmp	r2, r3
 8019314:	d105      	bne.n	8019322 <tcp_close_shutdown+0xa6>
 8019316:	4b45      	ldr	r3, [pc, #276]	; (801942c <tcp_close_shutdown+0x1b0>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	68db      	ldr	r3, [r3, #12]
 801931c:	4a43      	ldr	r2, [pc, #268]	; (801942c <tcp_close_shutdown+0x1b0>)
 801931e:	6013      	str	r3, [r2, #0]
 8019320:	e013      	b.n	801934a <tcp_close_shutdown+0xce>
 8019322:	4b42      	ldr	r3, [pc, #264]	; (801942c <tcp_close_shutdown+0x1b0>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	60fb      	str	r3, [r7, #12]
 8019328:	e00c      	b.n	8019344 <tcp_close_shutdown+0xc8>
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	68db      	ldr	r3, [r3, #12]
 801932e:	687a      	ldr	r2, [r7, #4]
 8019330:	429a      	cmp	r2, r3
 8019332:	d104      	bne.n	801933e <tcp_close_shutdown+0xc2>
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	68da      	ldr	r2, [r3, #12]
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	60da      	str	r2, [r3, #12]
 801933c:	e005      	b.n	801934a <tcp_close_shutdown+0xce>
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	68db      	ldr	r3, [r3, #12]
 8019342:	60fb      	str	r3, [r7, #12]
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d1ef      	bne.n	801932a <tcp_close_shutdown+0xae>
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	2200      	movs	r2, #0
 801934e:	60da      	str	r2, [r3, #12]
 8019350:	4b37      	ldr	r3, [pc, #220]	; (8019430 <tcp_close_shutdown+0x1b4>)
 8019352:	2201      	movs	r2, #1
 8019354:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8019356:	4b37      	ldr	r3, [pc, #220]	; (8019434 <tcp_close_shutdown+0x1b8>)
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	687a      	ldr	r2, [r7, #4]
 801935c:	429a      	cmp	r2, r3
 801935e:	d102      	bne.n	8019366 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019360:	f004 f948 	bl	801d5f4 <tcp_trigger_input_pcb_close>
 8019364:	e002      	b.n	801936c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8019366:	6878      	ldr	r0, [r7, #4]
 8019368:	f7ff fed6 	bl	8019118 <tcp_free>
      }
      return ERR_OK;
 801936c:	2300      	movs	r3, #0
 801936e:	e050      	b.n	8019412 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	7d1b      	ldrb	r3, [r3, #20]
 8019374:	2b02      	cmp	r3, #2
 8019376:	d03b      	beq.n	80193f0 <tcp_close_shutdown+0x174>
 8019378:	2b02      	cmp	r3, #2
 801937a:	dc44      	bgt.n	8019406 <tcp_close_shutdown+0x18a>
 801937c:	2b00      	cmp	r3, #0
 801937e:	d002      	beq.n	8019386 <tcp_close_shutdown+0x10a>
 8019380:	2b01      	cmp	r3, #1
 8019382:	d02a      	beq.n	80193da <tcp_close_shutdown+0x15e>
 8019384:	e03f      	b.n	8019406 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	8adb      	ldrh	r3, [r3, #22]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d021      	beq.n	80193d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801938e:	4b2a      	ldr	r3, [pc, #168]	; (8019438 <tcp_close_shutdown+0x1bc>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	687a      	ldr	r2, [r7, #4]
 8019394:	429a      	cmp	r2, r3
 8019396:	d105      	bne.n	80193a4 <tcp_close_shutdown+0x128>
 8019398:	4b27      	ldr	r3, [pc, #156]	; (8019438 <tcp_close_shutdown+0x1bc>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	68db      	ldr	r3, [r3, #12]
 801939e:	4a26      	ldr	r2, [pc, #152]	; (8019438 <tcp_close_shutdown+0x1bc>)
 80193a0:	6013      	str	r3, [r2, #0]
 80193a2:	e013      	b.n	80193cc <tcp_close_shutdown+0x150>
 80193a4:	4b24      	ldr	r3, [pc, #144]	; (8019438 <tcp_close_shutdown+0x1bc>)
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	60bb      	str	r3, [r7, #8]
 80193aa:	e00c      	b.n	80193c6 <tcp_close_shutdown+0x14a>
 80193ac:	68bb      	ldr	r3, [r7, #8]
 80193ae:	68db      	ldr	r3, [r3, #12]
 80193b0:	687a      	ldr	r2, [r7, #4]
 80193b2:	429a      	cmp	r2, r3
 80193b4:	d104      	bne.n	80193c0 <tcp_close_shutdown+0x144>
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	68da      	ldr	r2, [r3, #12]
 80193ba:	68bb      	ldr	r3, [r7, #8]
 80193bc:	60da      	str	r2, [r3, #12]
 80193be:	e005      	b.n	80193cc <tcp_close_shutdown+0x150>
 80193c0:	68bb      	ldr	r3, [r7, #8]
 80193c2:	68db      	ldr	r3, [r3, #12]
 80193c4:	60bb      	str	r3, [r7, #8]
 80193c6:	68bb      	ldr	r3, [r7, #8]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d1ef      	bne.n	80193ac <tcp_close_shutdown+0x130>
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	2200      	movs	r2, #0
 80193d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80193d2:	6878      	ldr	r0, [r7, #4]
 80193d4:	f7ff fea0 	bl	8019118 <tcp_free>
      break;
 80193d8:	e01a      	b.n	8019410 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f7ff ff14 	bl	8019208 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80193e0:	6879      	ldr	r1, [r7, #4]
 80193e2:	4816      	ldr	r0, [pc, #88]	; (801943c <tcp_close_shutdown+0x1c0>)
 80193e4:	f001 fc92 	bl	801ad0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80193e8:	6878      	ldr	r0, [r7, #4]
 80193ea:	f7ff feb1 	bl	8019150 <tcp_free_listen>
      break;
 80193ee:	e00f      	b.n	8019410 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80193f0:	6879      	ldr	r1, [r7, #4]
 80193f2:	480e      	ldr	r0, [pc, #56]	; (801942c <tcp_close_shutdown+0x1b0>)
 80193f4:	f001 fc8a 	bl	801ad0c <tcp_pcb_remove>
 80193f8:	4b0d      	ldr	r3, [pc, #52]	; (8019430 <tcp_close_shutdown+0x1b4>)
 80193fa:	2201      	movs	r2, #1
 80193fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	f7ff fe8a 	bl	8019118 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019404:	e004      	b.n	8019410 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019406:	6878      	ldr	r0, [r7, #4]
 8019408:	f000 f81a 	bl	8019440 <tcp_close_shutdown_fin>
 801940c:	4603      	mov	r3, r0
 801940e:	e000      	b.n	8019412 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019410:	2300      	movs	r3, #0
}
 8019412:	4618      	mov	r0, r3
 8019414:	3710      	adds	r7, #16
 8019416:	46bd      	mov	sp, r7
 8019418:	bdb0      	pop	{r4, r5, r7, pc}
 801941a:	bf00      	nop
 801941c:	08025958 	.word	0x08025958
 8019420:	08025a2c 	.word	0x08025a2c
 8019424:	0802599c 	.word	0x0802599c
 8019428:	08025a4c 	.word	0x08025a4c
 801942c:	20061ca0 	.word	0x20061ca0
 8019430:	20061ca8 	.word	0x20061ca8
 8019434:	20061ce0 	.word	0x20061ce0
 8019438:	20061c98 	.word	0x20061c98
 801943c:	20061c9c 	.word	0x20061c9c

08019440 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b084      	sub	sp, #16
 8019444:	af00      	add	r7, sp, #0
 8019446:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d106      	bne.n	801945c <tcp_close_shutdown_fin+0x1c>
 801944e:	4b2e      	ldr	r3, [pc, #184]	; (8019508 <tcp_close_shutdown_fin+0xc8>)
 8019450:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019454:	492d      	ldr	r1, [pc, #180]	; (801950c <tcp_close_shutdown_fin+0xcc>)
 8019456:	482e      	ldr	r0, [pc, #184]	; (8019510 <tcp_close_shutdown_fin+0xd0>)
 8019458:	f009 fcce 	bl	8022df8 <iprintf>

  switch (pcb->state) {
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	7d1b      	ldrb	r3, [r3, #20]
 8019460:	2b07      	cmp	r3, #7
 8019462:	d020      	beq.n	80194a6 <tcp_close_shutdown_fin+0x66>
 8019464:	2b07      	cmp	r3, #7
 8019466:	dc2b      	bgt.n	80194c0 <tcp_close_shutdown_fin+0x80>
 8019468:	2b03      	cmp	r3, #3
 801946a:	d002      	beq.n	8019472 <tcp_close_shutdown_fin+0x32>
 801946c:	2b04      	cmp	r3, #4
 801946e:	d00d      	beq.n	801948c <tcp_close_shutdown_fin+0x4c>
 8019470:	e026      	b.n	80194c0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019472:	6878      	ldr	r0, [r7, #4]
 8019474:	f004 ff28 	bl	801e2c8 <tcp_send_fin>
 8019478:	4603      	mov	r3, r0
 801947a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801947c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d11f      	bne.n	80194c4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2205      	movs	r2, #5
 8019488:	751a      	strb	r2, [r3, #20]
      }
      break;
 801948a:	e01b      	b.n	80194c4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801948c:	6878      	ldr	r0, [r7, #4]
 801948e:	f004 ff1b 	bl	801e2c8 <tcp_send_fin>
 8019492:	4603      	mov	r3, r0
 8019494:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d114      	bne.n	80194c8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	2205      	movs	r2, #5
 80194a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80194a4:	e010      	b.n	80194c8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80194a6:	6878      	ldr	r0, [r7, #4]
 80194a8:	f004 ff0e 	bl	801e2c8 <tcp_send_fin>
 80194ac:	4603      	mov	r3, r0
 80194ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80194b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d109      	bne.n	80194cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2209      	movs	r2, #9
 80194bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80194be:	e005      	b.n	80194cc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80194c0:	2300      	movs	r3, #0
 80194c2:	e01c      	b.n	80194fe <tcp_close_shutdown_fin+0xbe>
      break;
 80194c4:	bf00      	nop
 80194c6:	e002      	b.n	80194ce <tcp_close_shutdown_fin+0x8e>
      break;
 80194c8:	bf00      	nop
 80194ca:	e000      	b.n	80194ce <tcp_close_shutdown_fin+0x8e>
      break;
 80194cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80194ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d103      	bne.n	80194de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80194d6:	6878      	ldr	r0, [r7, #4]
 80194d8:	f005 f834 	bl	801e544 <tcp_output>
 80194dc:	e00d      	b.n	80194fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80194de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80194e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194e6:	d108      	bne.n	80194fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	8b5b      	ldrh	r3, [r3, #26]
 80194ec:	f043 0308 	orr.w	r3, r3, #8
 80194f0:	b29a      	uxth	r2, r3
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80194f6:	2300      	movs	r3, #0
 80194f8:	e001      	b.n	80194fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80194fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80194fe:	4618      	mov	r0, r3
 8019500:	3710      	adds	r7, #16
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	08025958 	.word	0x08025958
 801950c:	08025a08 	.word	0x08025a08
 8019510:	0802599c 	.word	0x0802599c

08019514 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b082      	sub	sp, #8
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d109      	bne.n	8019536 <tcp_close+0x22>
 8019522:	4b0f      	ldr	r3, [pc, #60]	; (8019560 <tcp_close+0x4c>)
 8019524:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019528:	490e      	ldr	r1, [pc, #56]	; (8019564 <tcp_close+0x50>)
 801952a:	480f      	ldr	r0, [pc, #60]	; (8019568 <tcp_close+0x54>)
 801952c:	f009 fc64 	bl	8022df8 <iprintf>
 8019530:	f06f 030f 	mvn.w	r3, #15
 8019534:	e00f      	b.n	8019556 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	7d1b      	ldrb	r3, [r3, #20]
 801953a:	2b01      	cmp	r3, #1
 801953c:	d006      	beq.n	801954c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	8b5b      	ldrh	r3, [r3, #26]
 8019542:	f043 0310 	orr.w	r3, r3, #16
 8019546:	b29a      	uxth	r2, r3
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801954c:	2101      	movs	r1, #1
 801954e:	6878      	ldr	r0, [r7, #4]
 8019550:	f7ff fe94 	bl	801927c <tcp_close_shutdown>
 8019554:	4603      	mov	r3, r0
}
 8019556:	4618      	mov	r0, r3
 8019558:	3708      	adds	r7, #8
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}
 801955e:	bf00      	nop
 8019560:	08025958 	.word	0x08025958
 8019564:	08025a68 	.word	0x08025a68
 8019568:	0802599c 	.word	0x0802599c

0801956c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b084      	sub	sp, #16
 8019570:	af00      	add	r7, sp, #0
 8019572:	60f8      	str	r0, [r7, #12]
 8019574:	60b9      	str	r1, [r7, #8]
 8019576:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d109      	bne.n	8019592 <tcp_shutdown+0x26>
 801957e:	4b26      	ldr	r3, [pc, #152]	; (8019618 <tcp_shutdown+0xac>)
 8019580:	f240 2207 	movw	r2, #519	; 0x207
 8019584:	4925      	ldr	r1, [pc, #148]	; (801961c <tcp_shutdown+0xb0>)
 8019586:	4826      	ldr	r0, [pc, #152]	; (8019620 <tcp_shutdown+0xb4>)
 8019588:	f009 fc36 	bl	8022df8 <iprintf>
 801958c:	f06f 030f 	mvn.w	r3, #15
 8019590:	e03d      	b.n	801960e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	7d1b      	ldrb	r3, [r3, #20]
 8019596:	2b01      	cmp	r3, #1
 8019598:	d102      	bne.n	80195a0 <tcp_shutdown+0x34>
    return ERR_CONN;
 801959a:	f06f 030a 	mvn.w	r3, #10
 801959e:	e036      	b.n	801960e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80195a0:	68bb      	ldr	r3, [r7, #8]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d01b      	beq.n	80195de <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	8b5b      	ldrh	r3, [r3, #26]
 80195aa:	f043 0310 	orr.w	r3, r3, #16
 80195ae:	b29a      	uxth	r2, r3
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d005      	beq.n	80195c6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80195ba:	2101      	movs	r1, #1
 80195bc:	68f8      	ldr	r0, [r7, #12]
 80195be:	f7ff fe5d 	bl	801927c <tcp_close_shutdown>
 80195c2:	4603      	mov	r3, r0
 80195c4:	e023      	b.n	801960e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d007      	beq.n	80195de <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80195d2:	4618      	mov	r0, r3
 80195d4:	f7ff faf4 	bl	8018bc0 <pbuf_free>
      pcb->refused_data = NULL;
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	2200      	movs	r2, #0
 80195dc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d013      	beq.n	801960c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	7d1b      	ldrb	r3, [r3, #20]
 80195e8:	2b04      	cmp	r3, #4
 80195ea:	dc02      	bgt.n	80195f2 <tcp_shutdown+0x86>
 80195ec:	2b03      	cmp	r3, #3
 80195ee:	da02      	bge.n	80195f6 <tcp_shutdown+0x8a>
 80195f0:	e009      	b.n	8019606 <tcp_shutdown+0x9a>
 80195f2:	2b07      	cmp	r3, #7
 80195f4:	d107      	bne.n	8019606 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80195f6:	68bb      	ldr	r3, [r7, #8]
 80195f8:	b2db      	uxtb	r3, r3
 80195fa:	4619      	mov	r1, r3
 80195fc:	68f8      	ldr	r0, [r7, #12]
 80195fe:	f7ff fe3d 	bl	801927c <tcp_close_shutdown>
 8019602:	4603      	mov	r3, r0
 8019604:	e003      	b.n	801960e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8019606:	f06f 030a 	mvn.w	r3, #10
 801960a:	e000      	b.n	801960e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801960c:	2300      	movs	r3, #0
}
 801960e:	4618      	mov	r0, r3
 8019610:	3710      	adds	r7, #16
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	08025958 	.word	0x08025958
 801961c:	08025a80 	.word	0x08025a80
 8019620:	0802599c 	.word	0x0802599c

08019624 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019624:	b580      	push	{r7, lr}
 8019626:	b08e      	sub	sp, #56	; 0x38
 8019628:	af04      	add	r7, sp, #16
 801962a:	6078      	str	r0, [r7, #4]
 801962c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d107      	bne.n	8019644 <tcp_abandon+0x20>
 8019634:	4b52      	ldr	r3, [pc, #328]	; (8019780 <tcp_abandon+0x15c>)
 8019636:	f240 223d 	movw	r2, #573	; 0x23d
 801963a:	4952      	ldr	r1, [pc, #328]	; (8019784 <tcp_abandon+0x160>)
 801963c:	4852      	ldr	r0, [pc, #328]	; (8019788 <tcp_abandon+0x164>)
 801963e:	f009 fbdb 	bl	8022df8 <iprintf>
 8019642:	e099      	b.n	8019778 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	7d1b      	ldrb	r3, [r3, #20]
 8019648:	2b01      	cmp	r3, #1
 801964a:	d106      	bne.n	801965a <tcp_abandon+0x36>
 801964c:	4b4c      	ldr	r3, [pc, #304]	; (8019780 <tcp_abandon+0x15c>)
 801964e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019652:	494e      	ldr	r1, [pc, #312]	; (801978c <tcp_abandon+0x168>)
 8019654:	484c      	ldr	r0, [pc, #304]	; (8019788 <tcp_abandon+0x164>)
 8019656:	f009 fbcf 	bl	8022df8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	7d1b      	ldrb	r3, [r3, #20]
 801965e:	2b0a      	cmp	r3, #10
 8019660:	d107      	bne.n	8019672 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019662:	6879      	ldr	r1, [r7, #4]
 8019664:	484a      	ldr	r0, [pc, #296]	; (8019790 <tcp_abandon+0x16c>)
 8019666:	f001 fb51 	bl	801ad0c <tcp_pcb_remove>
    tcp_free(pcb);
 801966a:	6878      	ldr	r0, [r7, #4]
 801966c:	f7ff fd54 	bl	8019118 <tcp_free>
 8019670:	e082      	b.n	8019778 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019672:	2300      	movs	r3, #0
 8019674:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8019676:	2300      	movs	r3, #0
 8019678:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801967e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019684:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801968c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	691b      	ldr	r3, [r3, #16]
 8019692:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	7d1b      	ldrb	r3, [r3, #20]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d126      	bne.n	80196ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	8adb      	ldrh	r3, [r3, #22]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d02e      	beq.n	8019702 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80196a4:	4b3b      	ldr	r3, [pc, #236]	; (8019794 <tcp_abandon+0x170>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	687a      	ldr	r2, [r7, #4]
 80196aa:	429a      	cmp	r2, r3
 80196ac:	d105      	bne.n	80196ba <tcp_abandon+0x96>
 80196ae:	4b39      	ldr	r3, [pc, #228]	; (8019794 <tcp_abandon+0x170>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	68db      	ldr	r3, [r3, #12]
 80196b4:	4a37      	ldr	r2, [pc, #220]	; (8019794 <tcp_abandon+0x170>)
 80196b6:	6013      	str	r3, [r2, #0]
 80196b8:	e013      	b.n	80196e2 <tcp_abandon+0xbe>
 80196ba:	4b36      	ldr	r3, [pc, #216]	; (8019794 <tcp_abandon+0x170>)
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	61fb      	str	r3, [r7, #28]
 80196c0:	e00c      	b.n	80196dc <tcp_abandon+0xb8>
 80196c2:	69fb      	ldr	r3, [r7, #28]
 80196c4:	68db      	ldr	r3, [r3, #12]
 80196c6:	687a      	ldr	r2, [r7, #4]
 80196c8:	429a      	cmp	r2, r3
 80196ca:	d104      	bne.n	80196d6 <tcp_abandon+0xb2>
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	68da      	ldr	r2, [r3, #12]
 80196d0:	69fb      	ldr	r3, [r7, #28]
 80196d2:	60da      	str	r2, [r3, #12]
 80196d4:	e005      	b.n	80196e2 <tcp_abandon+0xbe>
 80196d6:	69fb      	ldr	r3, [r7, #28]
 80196d8:	68db      	ldr	r3, [r3, #12]
 80196da:	61fb      	str	r3, [r7, #28]
 80196dc:	69fb      	ldr	r3, [r7, #28]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d1ef      	bne.n	80196c2 <tcp_abandon+0x9e>
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2200      	movs	r2, #0
 80196e6:	60da      	str	r2, [r3, #12]
 80196e8:	e00b      	b.n	8019702 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	8adb      	ldrh	r3, [r3, #22]
 80196f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80196f4:	6879      	ldr	r1, [r7, #4]
 80196f6:	4828      	ldr	r0, [pc, #160]	; (8019798 <tcp_abandon+0x174>)
 80196f8:	f001 fb08 	bl	801ad0c <tcp_pcb_remove>
 80196fc:	4b27      	ldr	r3, [pc, #156]	; (801979c <tcp_abandon+0x178>)
 80196fe:	2201      	movs	r2, #1
 8019700:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019706:	2b00      	cmp	r3, #0
 8019708:	d004      	beq.n	8019714 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801970e:	4618      	mov	r0, r3
 8019710:	f000 ffdc 	bl	801a6cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019718:	2b00      	cmp	r3, #0
 801971a:	d004      	beq.n	8019726 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019720:	4618      	mov	r0, r3
 8019722:	f000 ffd3 	bl	801a6cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801972a:	2b00      	cmp	r3, #0
 801972c:	d004      	beq.n	8019738 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019732:	4618      	mov	r0, r3
 8019734:	f000 ffca 	bl	801a6cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973a:	2b00      	cmp	r3, #0
 801973c:	d00e      	beq.n	801975c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	3304      	adds	r3, #4
 8019744:	687a      	ldr	r2, [r7, #4]
 8019746:	8b12      	ldrh	r2, [r2, #24]
 8019748:	9202      	str	r2, [sp, #8]
 801974a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801974c:	9201      	str	r2, [sp, #4]
 801974e:	9300      	str	r3, [sp, #0]
 8019750:	460b      	mov	r3, r1
 8019752:	697a      	ldr	r2, [r7, #20]
 8019754:	69b9      	ldr	r1, [r7, #24]
 8019756:	6878      	ldr	r0, [r7, #4]
 8019758:	f005 fca8 	bl	801f0ac <tcp_rst>
    }
    last_state = pcb->state;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	7d1b      	ldrb	r3, [r3, #20]
 8019760:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019762:	6878      	ldr	r0, [r7, #4]
 8019764:	f7ff fcd8 	bl	8019118 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019768:	693b      	ldr	r3, [r7, #16]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d004      	beq.n	8019778 <tcp_abandon+0x154>
 801976e:	693b      	ldr	r3, [r7, #16]
 8019770:	f06f 010c 	mvn.w	r1, #12
 8019774:	68f8      	ldr	r0, [r7, #12]
 8019776:	4798      	blx	r3
  }
}
 8019778:	3728      	adds	r7, #40	; 0x28
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}
 801977e:	bf00      	nop
 8019780:	08025958 	.word	0x08025958
 8019784:	08025a9c 	.word	0x08025a9c
 8019788:	0802599c 	.word	0x0802599c
 801978c:	08025ab8 	.word	0x08025ab8
 8019790:	20061ca4 	.word	0x20061ca4
 8019794:	20061c98 	.word	0x20061c98
 8019798:	20061ca0 	.word	0x20061ca0
 801979c:	20061ca8 	.word	0x20061ca8

080197a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b082      	sub	sp, #8
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80197a8:	2101      	movs	r1, #1
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	f7ff ff3a 	bl	8019624 <tcp_abandon>
}
 80197b0:	bf00      	nop
 80197b2:	3708      	adds	r7, #8
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd80      	pop	{r7, pc}

080197b8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b088      	sub	sp, #32
 80197bc:	af00      	add	r7, sp, #0
 80197be:	60f8      	str	r0, [r7, #12]
 80197c0:	60b9      	str	r1, [r7, #8]
 80197c2:	4613      	mov	r3, r2
 80197c4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80197c6:	2304      	movs	r3, #4
 80197c8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80197ca:	68bb      	ldr	r3, [r7, #8]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d101      	bne.n	80197d4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80197d0:	4b3e      	ldr	r3, [pc, #248]	; (80198cc <tcp_bind+0x114>)
 80197d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d109      	bne.n	80197ee <tcp_bind+0x36>
 80197da:	4b3d      	ldr	r3, [pc, #244]	; (80198d0 <tcp_bind+0x118>)
 80197dc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80197e0:	493c      	ldr	r1, [pc, #240]	; (80198d4 <tcp_bind+0x11c>)
 80197e2:	483d      	ldr	r0, [pc, #244]	; (80198d8 <tcp_bind+0x120>)
 80197e4:	f009 fb08 	bl	8022df8 <iprintf>
 80197e8:	f06f 030f 	mvn.w	r3, #15
 80197ec:	e06a      	b.n	80198c4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	7d1b      	ldrb	r3, [r3, #20]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d009      	beq.n	801980a <tcp_bind+0x52>
 80197f6:	4b36      	ldr	r3, [pc, #216]	; (80198d0 <tcp_bind+0x118>)
 80197f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80197fc:	4937      	ldr	r1, [pc, #220]	; (80198dc <tcp_bind+0x124>)
 80197fe:	4836      	ldr	r0, [pc, #216]	; (80198d8 <tcp_bind+0x120>)
 8019800:	f009 fafa 	bl	8022df8 <iprintf>
 8019804:	f06f 0305 	mvn.w	r3, #5
 8019808:	e05c      	b.n	80198c4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801980a:	88fb      	ldrh	r3, [r7, #6]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d109      	bne.n	8019824 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019810:	f000 f9de 	bl	8019bd0 <tcp_new_port>
 8019814:	4603      	mov	r3, r0
 8019816:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019818:	88fb      	ldrh	r3, [r7, #6]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d135      	bne.n	801988a <tcp_bind+0xd2>
      return ERR_BUF;
 801981e:	f06f 0301 	mvn.w	r3, #1
 8019822:	e04f      	b.n	80198c4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019824:	2300      	movs	r3, #0
 8019826:	61fb      	str	r3, [r7, #28]
 8019828:	e02b      	b.n	8019882 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801982a:	4a2d      	ldr	r2, [pc, #180]	; (80198e0 <tcp_bind+0x128>)
 801982c:	69fb      	ldr	r3, [r7, #28]
 801982e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	61bb      	str	r3, [r7, #24]
 8019836:	e01e      	b.n	8019876 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019838:	69bb      	ldr	r3, [r7, #24]
 801983a:	8adb      	ldrh	r3, [r3, #22]
 801983c:	88fa      	ldrh	r2, [r7, #6]
 801983e:	429a      	cmp	r2, r3
 8019840:	d116      	bne.n	8019870 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019842:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019844:	2b00      	cmp	r3, #0
 8019846:	d010      	beq.n	801986a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019848:	69bb      	ldr	r3, [r7, #24]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d00c      	beq.n	801986a <tcp_bind+0xb2>
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d009      	beq.n	801986a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d005      	beq.n	801986a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801985e:	69bb      	ldr	r3, [r7, #24]
 8019860:	681a      	ldr	r2, [r3, #0]
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019866:	429a      	cmp	r2, r3
 8019868:	d102      	bne.n	8019870 <tcp_bind+0xb8>
              return ERR_USE;
 801986a:	f06f 0307 	mvn.w	r3, #7
 801986e:	e029      	b.n	80198c4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019870:	69bb      	ldr	r3, [r7, #24]
 8019872:	68db      	ldr	r3, [r3, #12]
 8019874:	61bb      	str	r3, [r7, #24]
 8019876:	69bb      	ldr	r3, [r7, #24]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d1dd      	bne.n	8019838 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801987c:	69fb      	ldr	r3, [r7, #28]
 801987e:	3301      	adds	r3, #1
 8019880:	61fb      	str	r3, [r7, #28]
 8019882:	69fa      	ldr	r2, [r7, #28]
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	429a      	cmp	r2, r3
 8019888:	dbcf      	blt.n	801982a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801988a:	68bb      	ldr	r3, [r7, #8]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d00c      	beq.n	80198aa <tcp_bind+0xf2>
 8019890:	68bb      	ldr	r3, [r7, #8]
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d008      	beq.n	80198aa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019898:	68bb      	ldr	r3, [r7, #8]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d002      	beq.n	80198a4 <tcp_bind+0xec>
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	e000      	b.n	80198a6 <tcp_bind+0xee>
 80198a4:	2300      	movs	r3, #0
 80198a6:	68fa      	ldr	r2, [r7, #12]
 80198a8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	88fa      	ldrh	r2, [r7, #6]
 80198ae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80198b0:	4b0c      	ldr	r3, [pc, #48]	; (80198e4 <tcp_bind+0x12c>)
 80198b2:	681a      	ldr	r2, [r3, #0]
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	60da      	str	r2, [r3, #12]
 80198b8:	4a0a      	ldr	r2, [pc, #40]	; (80198e4 <tcp_bind+0x12c>)
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	6013      	str	r3, [r2, #0]
 80198be:	f005 fdb7 	bl	801f430 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80198c2:	2300      	movs	r3, #0
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3720      	adds	r7, #32
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}
 80198cc:	08027bb0 	.word	0x08027bb0
 80198d0:	08025958 	.word	0x08025958
 80198d4:	08025aec 	.word	0x08025aec
 80198d8:	0802599c 	.word	0x0802599c
 80198dc:	08025b04 	.word	0x08025b04
 80198e0:	08027b88 	.word	0x08027b88
 80198e4:	20061c98 	.word	0x20061c98

080198e8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b084      	sub	sp, #16
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	60f8      	str	r0, [r7, #12]
 80198f0:	60b9      	str	r1, [r7, #8]
 80198f2:	4613      	mov	r3, r2
 80198f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80198f6:	68bb      	ldr	r3, [r7, #8]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d106      	bne.n	801990a <tcp_accept_null+0x22>
 80198fc:	4b07      	ldr	r3, [pc, #28]	; (801991c <tcp_accept_null+0x34>)
 80198fe:	f240 320f 	movw	r2, #783	; 0x30f
 8019902:	4907      	ldr	r1, [pc, #28]	; (8019920 <tcp_accept_null+0x38>)
 8019904:	4807      	ldr	r0, [pc, #28]	; (8019924 <tcp_accept_null+0x3c>)
 8019906:	f009 fa77 	bl	8022df8 <iprintf>

  tcp_abort(pcb);
 801990a:	68b8      	ldr	r0, [r7, #8]
 801990c:	f7ff ff48 	bl	80197a0 <tcp_abort>

  return ERR_ABRT;
 8019910:	f06f 030c 	mvn.w	r3, #12
}
 8019914:	4618      	mov	r0, r3
 8019916:	3710      	adds	r7, #16
 8019918:	46bd      	mov	sp, r7
 801991a:	bd80      	pop	{r7, pc}
 801991c:	08025958 	.word	0x08025958
 8019920:	08025b2c 	.word	0x08025b2c
 8019924:	0802599c 	.word	0x0802599c

08019928 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b088      	sub	sp, #32
 801992c:	af00      	add	r7, sp, #0
 801992e:	60f8      	str	r0, [r7, #12]
 8019930:	460b      	mov	r3, r1
 8019932:	607a      	str	r2, [r7, #4]
 8019934:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8019936:	2300      	movs	r3, #0
 8019938:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d109      	bne.n	8019954 <tcp_listen_with_backlog_and_err+0x2c>
 8019940:	4b47      	ldr	r3, [pc, #284]	; (8019a60 <tcp_listen_with_backlog_and_err+0x138>)
 8019942:	f240 3259 	movw	r2, #857	; 0x359
 8019946:	4947      	ldr	r1, [pc, #284]	; (8019a64 <tcp_listen_with_backlog_and_err+0x13c>)
 8019948:	4847      	ldr	r0, [pc, #284]	; (8019a68 <tcp_listen_with_backlog_and_err+0x140>)
 801994a:	f009 fa55 	bl	8022df8 <iprintf>
 801994e:	23f0      	movs	r3, #240	; 0xf0
 8019950:	76fb      	strb	r3, [r7, #27]
 8019952:	e079      	b.n	8019a48 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	7d1b      	ldrb	r3, [r3, #20]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d009      	beq.n	8019970 <tcp_listen_with_backlog_and_err+0x48>
 801995c:	4b40      	ldr	r3, [pc, #256]	; (8019a60 <tcp_listen_with_backlog_and_err+0x138>)
 801995e:	f240 325a 	movw	r2, #858	; 0x35a
 8019962:	4942      	ldr	r1, [pc, #264]	; (8019a6c <tcp_listen_with_backlog_and_err+0x144>)
 8019964:	4840      	ldr	r0, [pc, #256]	; (8019a68 <tcp_listen_with_backlog_and_err+0x140>)
 8019966:	f009 fa47 	bl	8022df8 <iprintf>
 801996a:	23f1      	movs	r3, #241	; 0xf1
 801996c:	76fb      	strb	r3, [r7, #27]
 801996e:	e06b      	b.n	8019a48 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	7d1b      	ldrb	r3, [r3, #20]
 8019974:	2b01      	cmp	r3, #1
 8019976:	d104      	bne.n	8019982 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801997c:	23f7      	movs	r3, #247	; 0xf7
 801997e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019980:	e062      	b.n	8019a48 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8019982:	2002      	movs	r0, #2
 8019984:	f7fe fa02 	bl	8017d8c <memp_malloc>
 8019988:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801998a:	69fb      	ldr	r3, [r7, #28]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d102      	bne.n	8019996 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8019990:	23ff      	movs	r3, #255	; 0xff
 8019992:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019994:	e058      	b.n	8019a48 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	691a      	ldr	r2, [r3, #16]
 801999a:	69fb      	ldr	r3, [r7, #28]
 801999c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	8ada      	ldrh	r2, [r3, #22]
 80199a2:	69fb      	ldr	r3, [r7, #28]
 80199a4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80199a6:	69fb      	ldr	r3, [r7, #28]
 80199a8:	2201      	movs	r2, #1
 80199aa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	7d5a      	ldrb	r2, [r3, #21]
 80199b0:	69fb      	ldr	r3, [r7, #28]
 80199b2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	7a5a      	ldrb	r2, [r3, #9]
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80199bc:	69fb      	ldr	r3, [r7, #28]
 80199be:	2200      	movs	r2, #0
 80199c0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	7ada      	ldrb	r2, [r3, #11]
 80199c6:	69fb      	ldr	r3, [r7, #28]
 80199c8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	7a9a      	ldrb	r2, [r3, #10]
 80199ce:	69fb      	ldr	r3, [r7, #28]
 80199d0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	681a      	ldr	r2, [r3, #0]
 80199d6:	69fb      	ldr	r3, [r7, #28]
 80199d8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	8adb      	ldrh	r3, [r3, #22]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d021      	beq.n	8019a26 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80199e2:	4b23      	ldr	r3, [pc, #140]	; (8019a70 <tcp_listen_with_backlog_and_err+0x148>)
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	68fa      	ldr	r2, [r7, #12]
 80199e8:	429a      	cmp	r2, r3
 80199ea:	d105      	bne.n	80199f8 <tcp_listen_with_backlog_and_err+0xd0>
 80199ec:	4b20      	ldr	r3, [pc, #128]	; (8019a70 <tcp_listen_with_backlog_and_err+0x148>)
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	68db      	ldr	r3, [r3, #12]
 80199f2:	4a1f      	ldr	r2, [pc, #124]	; (8019a70 <tcp_listen_with_backlog_and_err+0x148>)
 80199f4:	6013      	str	r3, [r2, #0]
 80199f6:	e013      	b.n	8019a20 <tcp_listen_with_backlog_and_err+0xf8>
 80199f8:	4b1d      	ldr	r3, [pc, #116]	; (8019a70 <tcp_listen_with_backlog_and_err+0x148>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	617b      	str	r3, [r7, #20]
 80199fe:	e00c      	b.n	8019a1a <tcp_listen_with_backlog_and_err+0xf2>
 8019a00:	697b      	ldr	r3, [r7, #20]
 8019a02:	68db      	ldr	r3, [r3, #12]
 8019a04:	68fa      	ldr	r2, [r7, #12]
 8019a06:	429a      	cmp	r2, r3
 8019a08:	d104      	bne.n	8019a14 <tcp_listen_with_backlog_and_err+0xec>
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	68da      	ldr	r2, [r3, #12]
 8019a0e:	697b      	ldr	r3, [r7, #20]
 8019a10:	60da      	str	r2, [r3, #12]
 8019a12:	e005      	b.n	8019a20 <tcp_listen_with_backlog_and_err+0xf8>
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	68db      	ldr	r3, [r3, #12]
 8019a18:	617b      	str	r3, [r7, #20]
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d1ef      	bne.n	8019a00 <tcp_listen_with_backlog_and_err+0xd8>
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	2200      	movs	r2, #0
 8019a24:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8019a26:	68f8      	ldr	r0, [r7, #12]
 8019a28:	f7ff fb76 	bl	8019118 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8019a2c:	69fb      	ldr	r3, [r7, #28]
 8019a2e:	4a11      	ldr	r2, [pc, #68]	; (8019a74 <tcp_listen_with_backlog_and_err+0x14c>)
 8019a30:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8019a32:	4b11      	ldr	r3, [pc, #68]	; (8019a78 <tcp_listen_with_backlog_and_err+0x150>)
 8019a34:	681a      	ldr	r2, [r3, #0]
 8019a36:	69fb      	ldr	r3, [r7, #28]
 8019a38:	60da      	str	r2, [r3, #12]
 8019a3a:	4a0f      	ldr	r2, [pc, #60]	; (8019a78 <tcp_listen_with_backlog_and_err+0x150>)
 8019a3c:	69fb      	ldr	r3, [r7, #28]
 8019a3e:	6013      	str	r3, [r2, #0]
 8019a40:	f005 fcf6 	bl	801f430 <tcp_timer_needed>
  res = ERR_OK;
 8019a44:	2300      	movs	r3, #0
 8019a46:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d002      	beq.n	8019a54 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	7efa      	ldrb	r2, [r7, #27]
 8019a52:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8019a54:	69fb      	ldr	r3, [r7, #28]
}
 8019a56:	4618      	mov	r0, r3
 8019a58:	3720      	adds	r7, #32
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}
 8019a5e:	bf00      	nop
 8019a60:	08025958 	.word	0x08025958
 8019a64:	08025b4c 	.word	0x08025b4c
 8019a68:	0802599c 	.word	0x0802599c
 8019a6c:	08025b7c 	.word	0x08025b7c
 8019a70:	20061c98 	.word	0x20061c98
 8019a74:	080198e9 	.word	0x080198e9
 8019a78:	20061c9c 	.word	0x20061c9c

08019a7c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b084      	sub	sp, #16
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d106      	bne.n	8019a98 <tcp_update_rcv_ann_wnd+0x1c>
 8019a8a:	4b25      	ldr	r3, [pc, #148]	; (8019b20 <tcp_update_rcv_ann_wnd+0xa4>)
 8019a8c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019a90:	4924      	ldr	r1, [pc, #144]	; (8019b24 <tcp_update_rcv_ann_wnd+0xa8>)
 8019a92:	4825      	ldr	r0, [pc, #148]	; (8019b28 <tcp_update_rcv_ann_wnd+0xac>)
 8019a94:	f009 f9b0 	bl	8022df8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a9c:	687a      	ldr	r2, [r7, #4]
 8019a9e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8019aa0:	4413      	add	r3, r2
 8019aa2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aa8:	687a      	ldr	r2, [r7, #4]
 8019aaa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8019aac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8019ab0:	bf28      	it	cs
 8019ab2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8019ab6:	b292      	uxth	r2, r2
 8019ab8:	4413      	add	r3, r2
 8019aba:	68fa      	ldr	r2, [r7, #12]
 8019abc:	1ad3      	subs	r3, r2, r3
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	db08      	blt.n	8019ad4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ace:	68fa      	ldr	r2, [r7, #12]
 8019ad0:	1ad3      	subs	r3, r2, r3
 8019ad2:	e020      	b.n	8019b16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019adc:	1ad3      	subs	r3, r2, r3
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	dd03      	ble.n	8019aea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019ae8:	e014      	b.n	8019b14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019af2:	1ad3      	subs	r3, r2, r3
 8019af4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019af6:	68bb      	ldr	r3, [r7, #8]
 8019af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019afc:	d306      	bcc.n	8019b0c <tcp_update_rcv_ann_wnd+0x90>
 8019afe:	4b08      	ldr	r3, [pc, #32]	; (8019b20 <tcp_update_rcv_ann_wnd+0xa4>)
 8019b00:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019b04:	4909      	ldr	r1, [pc, #36]	; (8019b2c <tcp_update_rcv_ann_wnd+0xb0>)
 8019b06:	4808      	ldr	r0, [pc, #32]	; (8019b28 <tcp_update_rcv_ann_wnd+0xac>)
 8019b08:	f009 f976 	bl	8022df8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	b29a      	uxth	r2, r3
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8019b14:	2300      	movs	r3, #0
  }
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	3710      	adds	r7, #16
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	bd80      	pop	{r7, pc}
 8019b1e:	bf00      	nop
 8019b20:	08025958 	.word	0x08025958
 8019b24:	08025bb4 	.word	0x08025bb4
 8019b28:	0802599c 	.word	0x0802599c
 8019b2c:	08025bd8 	.word	0x08025bd8

08019b30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b084      	sub	sp, #16
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
 8019b38:	460b      	mov	r3, r1
 8019b3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d107      	bne.n	8019b52 <tcp_recved+0x22>
 8019b42:	4b1f      	ldr	r3, [pc, #124]	; (8019bc0 <tcp_recved+0x90>)
 8019b44:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019b48:	491e      	ldr	r1, [pc, #120]	; (8019bc4 <tcp_recved+0x94>)
 8019b4a:	481f      	ldr	r0, [pc, #124]	; (8019bc8 <tcp_recved+0x98>)
 8019b4c:	f009 f954 	bl	8022df8 <iprintf>
 8019b50:	e032      	b.n	8019bb8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	7d1b      	ldrb	r3, [r3, #20]
 8019b56:	2b01      	cmp	r3, #1
 8019b58:	d106      	bne.n	8019b68 <tcp_recved+0x38>
 8019b5a:	4b19      	ldr	r3, [pc, #100]	; (8019bc0 <tcp_recved+0x90>)
 8019b5c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8019b60:	491a      	ldr	r1, [pc, #104]	; (8019bcc <tcp_recved+0x9c>)
 8019b62:	4819      	ldr	r0, [pc, #100]	; (8019bc8 <tcp_recved+0x98>)
 8019b64:	f009 f948 	bl	8022df8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b6c:	887b      	ldrh	r3, [r7, #2]
 8019b6e:	4413      	add	r3, r2
 8019b70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8019b72:	89fb      	ldrh	r3, [r7, #14]
 8019b74:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019b78:	d804      	bhi.n	8019b84 <tcp_recved+0x54>
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b7e:	89fa      	ldrh	r2, [r7, #14]
 8019b80:	429a      	cmp	r2, r3
 8019b82:	d204      	bcs.n	8019b8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019b8a:	851a      	strh	r2, [r3, #40]	; 0x28
 8019b8c:	e002      	b.n	8019b94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	89fa      	ldrh	r2, [r7, #14]
 8019b92:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019b94:	6878      	ldr	r0, [r7, #4]
 8019b96:	f7ff ff71 	bl	8019a7c <tcp_update_rcv_ann_wnd>
 8019b9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019ba2:	d309      	bcc.n	8019bb8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	8b5b      	ldrh	r3, [r3, #26]
 8019ba8:	f043 0302 	orr.w	r3, r3, #2
 8019bac:	b29a      	uxth	r2, r3
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019bb2:	6878      	ldr	r0, [r7, #4]
 8019bb4:	f004 fcc6 	bl	801e544 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019bb8:	3710      	adds	r7, #16
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bd80      	pop	{r7, pc}
 8019bbe:	bf00      	nop
 8019bc0:	08025958 	.word	0x08025958
 8019bc4:	08025bf4 	.word	0x08025bf4
 8019bc8:	0802599c 	.word	0x0802599c
 8019bcc:	08025c0c 	.word	0x08025c0c

08019bd0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019bd0:	b480      	push	{r7}
 8019bd2:	b083      	sub	sp, #12
 8019bd4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8019bda:	4b1e      	ldr	r3, [pc, #120]	; (8019c54 <tcp_new_port+0x84>)
 8019bdc:	881b      	ldrh	r3, [r3, #0]
 8019bde:	3301      	adds	r3, #1
 8019be0:	b29a      	uxth	r2, r3
 8019be2:	4b1c      	ldr	r3, [pc, #112]	; (8019c54 <tcp_new_port+0x84>)
 8019be4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019be6:	4b1b      	ldr	r3, [pc, #108]	; (8019c54 <tcp_new_port+0x84>)
 8019be8:	881b      	ldrh	r3, [r3, #0]
 8019bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019bee:	4293      	cmp	r3, r2
 8019bf0:	d103      	bne.n	8019bfa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019bf2:	4b18      	ldr	r3, [pc, #96]	; (8019c54 <tcp_new_port+0x84>)
 8019bf4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019bf8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	71fb      	strb	r3, [r7, #7]
 8019bfe:	e01e      	b.n	8019c3e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019c00:	79fb      	ldrb	r3, [r7, #7]
 8019c02:	4a15      	ldr	r2, [pc, #84]	; (8019c58 <tcp_new_port+0x88>)
 8019c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	603b      	str	r3, [r7, #0]
 8019c0c:	e011      	b.n	8019c32 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019c0e:	683b      	ldr	r3, [r7, #0]
 8019c10:	8ada      	ldrh	r2, [r3, #22]
 8019c12:	4b10      	ldr	r3, [pc, #64]	; (8019c54 <tcp_new_port+0x84>)
 8019c14:	881b      	ldrh	r3, [r3, #0]
 8019c16:	429a      	cmp	r2, r3
 8019c18:	d108      	bne.n	8019c2c <tcp_new_port+0x5c>
        n++;
 8019c1a:	88bb      	ldrh	r3, [r7, #4]
 8019c1c:	3301      	adds	r3, #1
 8019c1e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019c20:	88bb      	ldrh	r3, [r7, #4]
 8019c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019c26:	d3d8      	bcc.n	8019bda <tcp_new_port+0xa>
          return 0;
 8019c28:	2300      	movs	r3, #0
 8019c2a:	e00d      	b.n	8019c48 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019c2c:	683b      	ldr	r3, [r7, #0]
 8019c2e:	68db      	ldr	r3, [r3, #12]
 8019c30:	603b      	str	r3, [r7, #0]
 8019c32:	683b      	ldr	r3, [r7, #0]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d1ea      	bne.n	8019c0e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019c38:	79fb      	ldrb	r3, [r7, #7]
 8019c3a:	3301      	adds	r3, #1
 8019c3c:	71fb      	strb	r3, [r7, #7]
 8019c3e:	79fb      	ldrb	r3, [r7, #7]
 8019c40:	2b03      	cmp	r3, #3
 8019c42:	d9dd      	bls.n	8019c00 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8019c44:	4b03      	ldr	r3, [pc, #12]	; (8019c54 <tcp_new_port+0x84>)
 8019c46:	881b      	ldrh	r3, [r3, #0]
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	370c      	adds	r7, #12
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c52:	4770      	bx	lr
 8019c54:	20050080 	.word	0x20050080
 8019c58:	08027b88 	.word	0x08027b88

08019c5c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b08a      	sub	sp, #40	; 0x28
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	60f8      	str	r0, [r7, #12]
 8019c64:	60b9      	str	r1, [r7, #8]
 8019c66:	603b      	str	r3, [r7, #0]
 8019c68:	4613      	mov	r3, r2
 8019c6a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d109      	bne.n	8019c8a <tcp_connect+0x2e>
 8019c76:	4b7d      	ldr	r3, [pc, #500]	; (8019e6c <tcp_connect+0x210>)
 8019c78:	f240 4235 	movw	r2, #1077	; 0x435
 8019c7c:	497c      	ldr	r1, [pc, #496]	; (8019e70 <tcp_connect+0x214>)
 8019c7e:	487d      	ldr	r0, [pc, #500]	; (8019e74 <tcp_connect+0x218>)
 8019c80:	f009 f8ba 	bl	8022df8 <iprintf>
 8019c84:	f06f 030f 	mvn.w	r3, #15
 8019c88:	e0ec      	b.n	8019e64 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d109      	bne.n	8019ca4 <tcp_connect+0x48>
 8019c90:	4b76      	ldr	r3, [pc, #472]	; (8019e6c <tcp_connect+0x210>)
 8019c92:	f240 4236 	movw	r2, #1078	; 0x436
 8019c96:	4978      	ldr	r1, [pc, #480]	; (8019e78 <tcp_connect+0x21c>)
 8019c98:	4876      	ldr	r0, [pc, #472]	; (8019e74 <tcp_connect+0x218>)
 8019c9a:	f009 f8ad 	bl	8022df8 <iprintf>
 8019c9e:	f06f 030f 	mvn.w	r3, #15
 8019ca2:	e0df      	b.n	8019e64 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	7d1b      	ldrb	r3, [r3, #20]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d009      	beq.n	8019cc0 <tcp_connect+0x64>
 8019cac:	4b6f      	ldr	r3, [pc, #444]	; (8019e6c <tcp_connect+0x210>)
 8019cae:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8019cb2:	4972      	ldr	r1, [pc, #456]	; (8019e7c <tcp_connect+0x220>)
 8019cb4:	486f      	ldr	r0, [pc, #444]	; (8019e74 <tcp_connect+0x218>)
 8019cb6:	f009 f89f 	bl	8022df8 <iprintf>
 8019cba:	f06f 0309 	mvn.w	r3, #9
 8019cbe:	e0d1      	b.n	8019e64 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d002      	beq.n	8019ccc <tcp_connect+0x70>
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	e000      	b.n	8019cce <tcp_connect+0x72>
 8019ccc:	2300      	movs	r3, #0
 8019cce:	68fa      	ldr	r2, [r7, #12]
 8019cd0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	88fa      	ldrh	r2, [r7, #6]
 8019cd6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	7a1b      	ldrb	r3, [r3, #8]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d006      	beq.n	8019cee <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	7a1b      	ldrb	r3, [r3, #8]
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f7fe fbdd 	bl	80184a4 <netif_get_by_index>
 8019cea:	6278      	str	r0, [r7, #36]	; 0x24
 8019cec:	e005      	b.n	8019cfa <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	3304      	adds	r3, #4
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f007 f984 	bl	8021000 <ip4_route>
 8019cf8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8019cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d102      	bne.n	8019d06 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8019d00:	f06f 0303 	mvn.w	r3, #3
 8019d04:	e0ae      	b.n	8019e64 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d003      	beq.n	8019d14 <tcp_connect+0xb8>
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d111      	bne.n	8019d38 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8019d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d002      	beq.n	8019d20 <tcp_connect+0xc4>
 8019d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d1c:	3304      	adds	r3, #4
 8019d1e:	e000      	b.n	8019d22 <tcp_connect+0xc6>
 8019d20:	2300      	movs	r3, #0
 8019d22:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8019d24:	69fb      	ldr	r3, [r7, #28]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d102      	bne.n	8019d30 <tcp_connect+0xd4>
      return ERR_RTE;
 8019d2a:	f06f 0303 	mvn.w	r3, #3
 8019d2e:	e099      	b.n	8019e64 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019d30:	69fb      	ldr	r3, [r7, #28]
 8019d32:	681a      	ldr	r2, [r3, #0]
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	8adb      	ldrh	r3, [r3, #22]
 8019d3c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	8adb      	ldrh	r3, [r3, #22]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d10c      	bne.n	8019d60 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8019d46:	f7ff ff43 	bl	8019bd0 <tcp_new_port>
 8019d4a:	4603      	mov	r3, r0
 8019d4c:	461a      	mov	r2, r3
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	8adb      	ldrh	r3, [r3, #22]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d102      	bne.n	8019d60 <tcp_connect+0x104>
      return ERR_BUF;
 8019d5a:	f06f 0301 	mvn.w	r3, #1
 8019d5e:	e081      	b.n	8019e64 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8019d60:	68f8      	ldr	r0, [r7, #12]
 8019d62:	f001 f867 	bl	801ae34 <tcp_next_iss>
 8019d66:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	697a      	ldr	r2, [r7, #20]
 8019d72:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8019d74:	697b      	ldr	r3, [r7, #20]
 8019d76:	1e5a      	subs	r2, r3, #1
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	1e5a      	subs	r2, r3, #1
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8019d84:	697b      	ldr	r3, [r7, #20]
 8019d86:	1e5a      	subs	r2, r3, #1
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019daa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019db4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	3304      	adds	r3, #4
 8019dbe:	461a      	mov	r2, r3
 8019dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019dc2:	f001 f85d 	bl	801ae80 <tcp_eff_send_mss_netif>
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	461a      	mov	r2, r3
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	2201      	movs	r2, #1
 8019dd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	683a      	ldr	r2, [r7, #0]
 8019dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8019dde:	2102      	movs	r1, #2
 8019de0:	68f8      	ldr	r0, [r7, #12]
 8019de2:	f004 fac1 	bl	801e368 <tcp_enqueue_flags>
 8019de6:	4603      	mov	r3, r0
 8019de8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8019dea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d136      	bne.n	8019e60 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	2202      	movs	r2, #2
 8019df6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8019df8:	8b7b      	ldrh	r3, [r7, #26]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d021      	beq.n	8019e42 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019dfe:	4b20      	ldr	r3, [pc, #128]	; (8019e80 <tcp_connect+0x224>)
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	68fa      	ldr	r2, [r7, #12]
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d105      	bne.n	8019e14 <tcp_connect+0x1b8>
 8019e08:	4b1d      	ldr	r3, [pc, #116]	; (8019e80 <tcp_connect+0x224>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	68db      	ldr	r3, [r3, #12]
 8019e0e:	4a1c      	ldr	r2, [pc, #112]	; (8019e80 <tcp_connect+0x224>)
 8019e10:	6013      	str	r3, [r2, #0]
 8019e12:	e013      	b.n	8019e3c <tcp_connect+0x1e0>
 8019e14:	4b1a      	ldr	r3, [pc, #104]	; (8019e80 <tcp_connect+0x224>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	623b      	str	r3, [r7, #32]
 8019e1a:	e00c      	b.n	8019e36 <tcp_connect+0x1da>
 8019e1c:	6a3b      	ldr	r3, [r7, #32]
 8019e1e:	68db      	ldr	r3, [r3, #12]
 8019e20:	68fa      	ldr	r2, [r7, #12]
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d104      	bne.n	8019e30 <tcp_connect+0x1d4>
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	68da      	ldr	r2, [r3, #12]
 8019e2a:	6a3b      	ldr	r3, [r7, #32]
 8019e2c:	60da      	str	r2, [r3, #12]
 8019e2e:	e005      	b.n	8019e3c <tcp_connect+0x1e0>
 8019e30:	6a3b      	ldr	r3, [r7, #32]
 8019e32:	68db      	ldr	r3, [r3, #12]
 8019e34:	623b      	str	r3, [r7, #32]
 8019e36:	6a3b      	ldr	r3, [r7, #32]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d1ef      	bne.n	8019e1c <tcp_connect+0x1c0>
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	2200      	movs	r2, #0
 8019e40:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8019e42:	4b10      	ldr	r3, [pc, #64]	; (8019e84 <tcp_connect+0x228>)
 8019e44:	681a      	ldr	r2, [r3, #0]
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	60da      	str	r2, [r3, #12]
 8019e4a:	4a0e      	ldr	r2, [pc, #56]	; (8019e84 <tcp_connect+0x228>)
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	6013      	str	r3, [r2, #0]
 8019e50:	f005 faee 	bl	801f430 <tcp_timer_needed>
 8019e54:	4b0c      	ldr	r3, [pc, #48]	; (8019e88 <tcp_connect+0x22c>)
 8019e56:	2201      	movs	r2, #1
 8019e58:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8019e5a:	68f8      	ldr	r0, [r7, #12]
 8019e5c:	f004 fb72 	bl	801e544 <tcp_output>
  }
  return ret;
 8019e60:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8019e64:	4618      	mov	r0, r3
 8019e66:	3728      	adds	r7, #40	; 0x28
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	bd80      	pop	{r7, pc}
 8019e6c:	08025958 	.word	0x08025958
 8019e70:	08025c34 	.word	0x08025c34
 8019e74:	0802599c 	.word	0x0802599c
 8019e78:	08025c50 	.word	0x08025c50
 8019e7c:	08025c6c 	.word	0x08025c6c
 8019e80:	20061c98 	.word	0x20061c98
 8019e84:	20061ca0 	.word	0x20061ca0
 8019e88:	20061ca8 	.word	0x20061ca8

08019e8c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8019e8c:	b5b0      	push	{r4, r5, r7, lr}
 8019e8e:	b090      	sub	sp, #64	; 0x40
 8019e90:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8019e92:	2300      	movs	r3, #0
 8019e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019e98:	4b94      	ldr	r3, [pc, #592]	; (801a0ec <tcp_slowtmr+0x260>)
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	3301      	adds	r3, #1
 8019e9e:	4a93      	ldr	r2, [pc, #588]	; (801a0ec <tcp_slowtmr+0x260>)
 8019ea0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8019ea2:	4b93      	ldr	r3, [pc, #588]	; (801a0f0 <tcp_slowtmr+0x264>)
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	3301      	adds	r3, #1
 8019ea8:	b2da      	uxtb	r2, r3
 8019eaa:	4b91      	ldr	r3, [pc, #580]	; (801a0f0 <tcp_slowtmr+0x264>)
 8019eac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8019eb2:	4b90      	ldr	r3, [pc, #576]	; (801a0f4 <tcp_slowtmr+0x268>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019eb8:	e29f      	b.n	801a3fa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ebc:	7d1b      	ldrb	r3, [r3, #20]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d106      	bne.n	8019ed0 <tcp_slowtmr+0x44>
 8019ec2:	4b8d      	ldr	r3, [pc, #564]	; (801a0f8 <tcp_slowtmr+0x26c>)
 8019ec4:	f240 42be 	movw	r2, #1214	; 0x4be
 8019ec8:	498c      	ldr	r1, [pc, #560]	; (801a0fc <tcp_slowtmr+0x270>)
 8019eca:	488d      	ldr	r0, [pc, #564]	; (801a100 <tcp_slowtmr+0x274>)
 8019ecc:	f008 ff94 	bl	8022df8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed2:	7d1b      	ldrb	r3, [r3, #20]
 8019ed4:	2b01      	cmp	r3, #1
 8019ed6:	d106      	bne.n	8019ee6 <tcp_slowtmr+0x5a>
 8019ed8:	4b87      	ldr	r3, [pc, #540]	; (801a0f8 <tcp_slowtmr+0x26c>)
 8019eda:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019ede:	4989      	ldr	r1, [pc, #548]	; (801a104 <tcp_slowtmr+0x278>)
 8019ee0:	4887      	ldr	r0, [pc, #540]	; (801a100 <tcp_slowtmr+0x274>)
 8019ee2:	f008 ff89 	bl	8022df8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee8:	7d1b      	ldrb	r3, [r3, #20]
 8019eea:	2b0a      	cmp	r3, #10
 8019eec:	d106      	bne.n	8019efc <tcp_slowtmr+0x70>
 8019eee:	4b82      	ldr	r3, [pc, #520]	; (801a0f8 <tcp_slowtmr+0x26c>)
 8019ef0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019ef4:	4984      	ldr	r1, [pc, #528]	; (801a108 <tcp_slowtmr+0x27c>)
 8019ef6:	4882      	ldr	r0, [pc, #520]	; (801a100 <tcp_slowtmr+0x274>)
 8019ef8:	f008 ff7e 	bl	8022df8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019efe:	7f9a      	ldrb	r2, [r3, #30]
 8019f00:	4b7b      	ldr	r3, [pc, #492]	; (801a0f0 <tcp_slowtmr+0x264>)
 8019f02:	781b      	ldrb	r3, [r3, #0]
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d105      	bne.n	8019f14 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f0e:	68db      	ldr	r3, [r3, #12]
 8019f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019f12:	e272      	b.n	801a3fa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019f14:	4b76      	ldr	r3, [pc, #472]	; (801a0f0 <tcp_slowtmr+0x264>)
 8019f16:	781a      	ldrb	r2, [r3, #0]
 8019f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019f22:	2300      	movs	r3, #0
 8019f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f2a:	7d1b      	ldrb	r3, [r3, #20]
 8019f2c:	2b02      	cmp	r3, #2
 8019f2e:	d10a      	bne.n	8019f46 <tcp_slowtmr+0xba>
 8019f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019f36:	2b05      	cmp	r3, #5
 8019f38:	d905      	bls.n	8019f46 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8019f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f3e:	3301      	adds	r3, #1
 8019f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019f44:	e11e      	b.n	801a184 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019f4c:	2b0b      	cmp	r3, #11
 8019f4e:	d905      	bls.n	8019f5c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f54:	3301      	adds	r3, #1
 8019f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019f5a:	e113      	b.n	801a184 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d075      	beq.n	801a052 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d006      	beq.n	8019f7c <tcp_slowtmr+0xf0>
 8019f6e:	4b62      	ldr	r3, [pc, #392]	; (801a0f8 <tcp_slowtmr+0x26c>)
 8019f70:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019f74:	4965      	ldr	r1, [pc, #404]	; (801a10c <tcp_slowtmr+0x280>)
 8019f76:	4862      	ldr	r0, [pc, #392]	; (801a100 <tcp_slowtmr+0x274>)
 8019f78:	f008 ff3e 	bl	8022df8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d106      	bne.n	8019f92 <tcp_slowtmr+0x106>
 8019f84:	4b5c      	ldr	r3, [pc, #368]	; (801a0f8 <tcp_slowtmr+0x26c>)
 8019f86:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019f8a:	4961      	ldr	r1, [pc, #388]	; (801a110 <tcp_slowtmr+0x284>)
 8019f8c:	485c      	ldr	r0, [pc, #368]	; (801a100 <tcp_slowtmr+0x274>)
 8019f8e:	f008 ff33 	bl	8022df8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019f98:	2b0b      	cmp	r3, #11
 8019f9a:	d905      	bls.n	8019fa8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8019f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019fa0:	3301      	adds	r3, #1
 8019fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019fa6:	e0ed      	b.n	801a184 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019faa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019fae:	3b01      	subs	r3, #1
 8019fb0:	4a58      	ldr	r2, [pc, #352]	; (801a114 <tcp_slowtmr+0x288>)
 8019fb2:	5cd3      	ldrb	r3, [r2, r3]
 8019fb4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8019fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019fbc:	7c7a      	ldrb	r2, [r7, #17]
 8019fbe:	429a      	cmp	r2, r3
 8019fc0:	d907      	bls.n	8019fd2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8019fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019fc8:	3301      	adds	r3, #1
 8019fca:	b2da      	uxtb	r2, r3
 8019fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8019fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019fd8:	7c7a      	ldrb	r2, [r7, #17]
 8019fda:	429a      	cmp	r2, r3
 8019fdc:	f200 80d2 	bhi.w	801a184 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d108      	bne.n	801a000 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019ff0:	f005 f950 	bl	801f294 <tcp_zero_window_probe>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d014      	beq.n	801a024 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	623b      	str	r3, [r7, #32]
 8019ffe:	e011      	b.n	801a024 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a006:	4619      	mov	r1, r3
 801a008:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a00a:	f004 f815 	bl	801e038 <tcp_split_unsent_seg>
 801a00e:	4603      	mov	r3, r0
 801a010:	2b00      	cmp	r3, #0
 801a012:	d107      	bne.n	801a024 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801a014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a016:	f004 fa95 	bl	801e544 <tcp_output>
 801a01a:	4603      	mov	r3, r0
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d101      	bne.n	801a024 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801a020:	2300      	movs	r3, #0
 801a022:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801a024:	6a3b      	ldr	r3, [r7, #32]
 801a026:	2b00      	cmp	r3, #0
 801a028:	f000 80ac 	beq.w	801a184 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a02e:	2200      	movs	r2, #0
 801a030:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a036:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a03a:	2b06      	cmp	r3, #6
 801a03c:	f200 80a2 	bhi.w	801a184 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801a040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a042:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a046:	3301      	adds	r3, #1
 801a048:	b2da      	uxtb	r2, r3
 801a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a04c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801a050:	e098      	b.n	801a184 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a054:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a058:	2b00      	cmp	r3, #0
 801a05a:	db0f      	blt.n	801a07c <tcp_slowtmr+0x1f0>
 801a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a05e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a062:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a066:	4293      	cmp	r3, r2
 801a068:	d008      	beq.n	801a07c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801a06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a06c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a070:	b29b      	uxth	r3, r3
 801a072:	3301      	adds	r3, #1
 801a074:	b29b      	uxth	r3, r3
 801a076:	b21a      	sxth	r2, r3
 801a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a084:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a088:	429a      	cmp	r2, r3
 801a08a:	db7b      	blt.n	801a184 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a08c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a08e:	f004 fd4d 	bl	801eb2c <tcp_rexmit_rto_prepare>
 801a092:	4603      	mov	r3, r0
 801a094:	2b00      	cmp	r3, #0
 801a096:	d007      	beq.n	801a0a8 <tcp_slowtmr+0x21c>
 801a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d171      	bne.n	801a184 <tcp_slowtmr+0x2f8>
 801a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d06d      	beq.n	801a184 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0aa:	7d1b      	ldrb	r3, [r3, #20]
 801a0ac:	2b02      	cmp	r3, #2
 801a0ae:	d03a      	beq.n	801a126 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a0b6:	2b0c      	cmp	r3, #12
 801a0b8:	bf28      	it	cs
 801a0ba:	230c      	movcs	r3, #12
 801a0bc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a0c4:	10db      	asrs	r3, r3, #3
 801a0c6:	b21b      	sxth	r3, r3
 801a0c8:	461a      	mov	r2, r3
 801a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a0d0:	4413      	add	r3, r2
 801a0d2:	7efa      	ldrb	r2, [r7, #27]
 801a0d4:	4910      	ldr	r1, [pc, #64]	; (801a118 <tcp_slowtmr+0x28c>)
 801a0d6:	5c8a      	ldrb	r2, [r1, r2]
 801a0d8:	4093      	lsls	r3, r2
 801a0da:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a0dc:	697b      	ldr	r3, [r7, #20]
 801a0de:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801a0e2:	4293      	cmp	r3, r2
 801a0e4:	dc1a      	bgt.n	801a11c <tcp_slowtmr+0x290>
 801a0e6:	697b      	ldr	r3, [r7, #20]
 801a0e8:	b21a      	sxth	r2, r3
 801a0ea:	e019      	b.n	801a120 <tcp_slowtmr+0x294>
 801a0ec:	20061c94 	.word	0x20061c94
 801a0f0:	20061caa 	.word	0x20061caa
 801a0f4:	20061ca0 	.word	0x20061ca0
 801a0f8:	08025958 	.word	0x08025958
 801a0fc:	08025c9c 	.word	0x08025c9c
 801a100:	0802599c 	.word	0x0802599c
 801a104:	08025cc8 	.word	0x08025cc8
 801a108:	08025cf4 	.word	0x08025cf4
 801a10c:	08025d24 	.word	0x08025d24
 801a110:	08025d58 	.word	0x08025d58
 801a114:	08027b80 	.word	0x08027b80
 801a118:	08027b70 	.word	0x08027b70
 801a11c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a128:	2200      	movs	r2, #0
 801a12a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a12e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a138:	4293      	cmp	r3, r2
 801a13a:	bf28      	it	cs
 801a13c:	4613      	movcs	r3, r2
 801a13e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a140:	8a7b      	ldrh	r3, [r7, #18]
 801a142:	085b      	lsrs	r3, r3, #1
 801a144:	b29a      	uxth	r2, r3
 801a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a148:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a14e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a156:	005b      	lsls	r3, r3, #1
 801a158:	b29b      	uxth	r3, r3
 801a15a:	429a      	cmp	r2, r3
 801a15c:	d206      	bcs.n	801a16c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a162:	005b      	lsls	r3, r3, #1
 801a164:	b29a      	uxth	r2, r3
 801a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a168:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a16e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a178:	2200      	movs	r2, #0
 801a17a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a17e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a180:	f004 fd44 	bl	801ec0c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a186:	7d1b      	ldrb	r3, [r3, #20]
 801a188:	2b06      	cmp	r3, #6
 801a18a:	d111      	bne.n	801a1b0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a18e:	8b5b      	ldrh	r3, [r3, #26]
 801a190:	f003 0310 	and.w	r3, r3, #16
 801a194:	2b00      	cmp	r3, #0
 801a196:	d00b      	beq.n	801a1b0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a198:	4b9d      	ldr	r3, [pc, #628]	; (801a410 <tcp_slowtmr+0x584>)
 801a19a:	681a      	ldr	r2, [r3, #0]
 801a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19e:	6a1b      	ldr	r3, [r3, #32]
 801a1a0:	1ad3      	subs	r3, r2, r3
 801a1a2:	2b28      	cmp	r3, #40	; 0x28
 801a1a4:	d904      	bls.n	801a1b0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a1a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1aa:	3301      	adds	r3, #1
 801a1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b2:	7a5b      	ldrb	r3, [r3, #9]
 801a1b4:	f003 0308 	and.w	r3, r3, #8
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d04c      	beq.n	801a256 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a1c0:	2b04      	cmp	r3, #4
 801a1c2:	d003      	beq.n	801a1cc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a1c8:	2b07      	cmp	r3, #7
 801a1ca:	d144      	bne.n	801a256 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a1cc:	4b90      	ldr	r3, [pc, #576]	; (801a410 <tcp_slowtmr+0x584>)
 801a1ce:	681a      	ldr	r2, [r3, #0]
 801a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1d2:	6a1b      	ldr	r3, [r3, #32]
 801a1d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a1dc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801a1e0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801a1e4:	498b      	ldr	r1, [pc, #556]	; (801a414 <tcp_slowtmr+0x588>)
 801a1e6:	fba1 1303 	umull	r1, r3, r1, r3
 801a1ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a1ec:	429a      	cmp	r2, r3
 801a1ee:	d90a      	bls.n	801a206 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801a1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1f4:	3301      	adds	r3, #1
 801a1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801a1fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a1fe:	3301      	adds	r3, #1
 801a200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a204:	e027      	b.n	801a256 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a206:	4b82      	ldr	r3, [pc, #520]	; (801a410 <tcp_slowtmr+0x584>)
 801a208:	681a      	ldr	r2, [r3, #0]
 801a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a20c:	6a1b      	ldr	r3, [r3, #32]
 801a20e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a212:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a218:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a21c:	4618      	mov	r0, r3
 801a21e:	4b7e      	ldr	r3, [pc, #504]	; (801a418 <tcp_slowtmr+0x58c>)
 801a220:	fb00 f303 	mul.w	r3, r0, r3
 801a224:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a226:	497b      	ldr	r1, [pc, #492]	; (801a414 <tcp_slowtmr+0x588>)
 801a228:	fba1 1303 	umull	r1, r3, r1, r3
 801a22c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a22e:	429a      	cmp	r2, r3
 801a230:	d911      	bls.n	801a256 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801a232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a234:	f004 ffee 	bl	801f214 <tcp_keepalive>
 801a238:	4603      	mov	r3, r0
 801a23a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801a23e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a242:	2b00      	cmp	r3, #0
 801a244:	d107      	bne.n	801a256 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a248:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a24c:	3301      	adds	r3, #1
 801a24e:	b2da      	uxtb	r2, r3
 801a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a252:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d011      	beq.n	801a282 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a25e:	4b6c      	ldr	r3, [pc, #432]	; (801a410 <tcp_slowtmr+0x584>)
 801a260:	681a      	ldr	r2, [r3, #0]
 801a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a264:	6a1b      	ldr	r3, [r3, #32]
 801a266:	1ad2      	subs	r2, r2, r3
 801a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a26a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a26e:	4619      	mov	r1, r3
 801a270:	460b      	mov	r3, r1
 801a272:	005b      	lsls	r3, r3, #1
 801a274:	440b      	add	r3, r1
 801a276:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a278:	429a      	cmp	r2, r3
 801a27a:	d302      	bcc.n	801a282 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a27c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a27e:	f000 fea9 	bl	801afd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a284:	7d1b      	ldrb	r3, [r3, #20]
 801a286:	2b03      	cmp	r3, #3
 801a288:	d10b      	bne.n	801a2a2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a28a:	4b61      	ldr	r3, [pc, #388]	; (801a410 <tcp_slowtmr+0x584>)
 801a28c:	681a      	ldr	r2, [r3, #0]
 801a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a290:	6a1b      	ldr	r3, [r3, #32]
 801a292:	1ad3      	subs	r3, r2, r3
 801a294:	2b28      	cmp	r3, #40	; 0x28
 801a296:	d904      	bls.n	801a2a2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a29c:	3301      	adds	r3, #1
 801a29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2a4:	7d1b      	ldrb	r3, [r3, #20]
 801a2a6:	2b09      	cmp	r3, #9
 801a2a8:	d10b      	bne.n	801a2c2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a2aa:	4b59      	ldr	r3, [pc, #356]	; (801a410 <tcp_slowtmr+0x584>)
 801a2ac:	681a      	ldr	r2, [r3, #0]
 801a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2b0:	6a1b      	ldr	r3, [r3, #32]
 801a2b2:	1ad3      	subs	r3, r2, r3
 801a2b4:	2bf0      	cmp	r3, #240	; 0xf0
 801a2b6:	d904      	bls.n	801a2c2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801a2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2bc:	3301      	adds	r3, #1
 801a2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d060      	beq.n	801a38c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a2d0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a2d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a2d4:	f000 fcca 	bl	801ac6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d010      	beq.n	801a300 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a2de:	4b4f      	ldr	r3, [pc, #316]	; (801a41c <tcp_slowtmr+0x590>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2e4:	429a      	cmp	r2, r3
 801a2e6:	d106      	bne.n	801a2f6 <tcp_slowtmr+0x46a>
 801a2e8:	4b4d      	ldr	r3, [pc, #308]	; (801a420 <tcp_slowtmr+0x594>)
 801a2ea:	f240 526d 	movw	r2, #1389	; 0x56d
 801a2ee:	494d      	ldr	r1, [pc, #308]	; (801a424 <tcp_slowtmr+0x598>)
 801a2f0:	484d      	ldr	r0, [pc, #308]	; (801a428 <tcp_slowtmr+0x59c>)
 801a2f2:	f008 fd81 	bl	8022df8 <iprintf>
        prev->next = pcb->next;
 801a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2f8:	68da      	ldr	r2, [r3, #12]
 801a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2fc:	60da      	str	r2, [r3, #12]
 801a2fe:	e00f      	b.n	801a320 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a300:	4b46      	ldr	r3, [pc, #280]	; (801a41c <tcp_slowtmr+0x590>)
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a306:	429a      	cmp	r2, r3
 801a308:	d006      	beq.n	801a318 <tcp_slowtmr+0x48c>
 801a30a:	4b45      	ldr	r3, [pc, #276]	; (801a420 <tcp_slowtmr+0x594>)
 801a30c:	f240 5271 	movw	r2, #1393	; 0x571
 801a310:	4946      	ldr	r1, [pc, #280]	; (801a42c <tcp_slowtmr+0x5a0>)
 801a312:	4845      	ldr	r0, [pc, #276]	; (801a428 <tcp_slowtmr+0x59c>)
 801a314:	f008 fd70 	bl	8022df8 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a31a:	68db      	ldr	r3, [r3, #12]
 801a31c:	4a3f      	ldr	r2, [pc, #252]	; (801a41c <tcp_slowtmr+0x590>)
 801a31e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a324:	2b00      	cmp	r3, #0
 801a326:	d013      	beq.n	801a350 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a330:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a334:	3304      	adds	r3, #4
 801a336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a338:	8ad2      	ldrh	r2, [r2, #22]
 801a33a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a33c:	8b09      	ldrh	r1, [r1, #24]
 801a33e:	9102      	str	r1, [sp, #8]
 801a340:	9201      	str	r2, [sp, #4]
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	462b      	mov	r3, r5
 801a346:	4622      	mov	r2, r4
 801a348:	4601      	mov	r1, r0
 801a34a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a34c:	f004 feae 	bl	801f0ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a352:	691b      	ldr	r3, [r3, #16]
 801a354:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a358:	7d1b      	ldrb	r3, [r3, #20]
 801a35a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a366:	6838      	ldr	r0, [r7, #0]
 801a368:	f7fe fed6 	bl	8019118 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a36c:	4b30      	ldr	r3, [pc, #192]	; (801a430 <tcp_slowtmr+0x5a4>)
 801a36e:	2200      	movs	r2, #0
 801a370:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d004      	beq.n	801a382 <tcp_slowtmr+0x4f6>
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	f06f 010c 	mvn.w	r1, #12
 801a37e:	68b8      	ldr	r0, [r7, #8]
 801a380:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a382:	4b2b      	ldr	r3, [pc, #172]	; (801a430 <tcp_slowtmr+0x5a4>)
 801a384:	781b      	ldrb	r3, [r3, #0]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d037      	beq.n	801a3fa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801a38a:	e590      	b.n	8019eae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a38e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a392:	68db      	ldr	r3, [r3, #12]
 801a394:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a398:	7f1b      	ldrb	r3, [r3, #28]
 801a39a:	3301      	adds	r3, #1
 801a39c:	b2da      	uxtb	r2, r3
 801a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3a4:	7f1a      	ldrb	r2, [r3, #28]
 801a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3a8:	7f5b      	ldrb	r3, [r3, #29]
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d325      	bcc.n	801a3fa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a3b4:	4b1e      	ldr	r3, [pc, #120]	; (801a430 <tcp_slowtmr+0x5a4>)
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d00b      	beq.n	801a3dc <tcp_slowtmr+0x550>
 801a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a3cc:	6912      	ldr	r2, [r2, #16]
 801a3ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a3d0:	4610      	mov	r0, r2
 801a3d2:	4798      	blx	r3
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a3da:	e002      	b.n	801a3e2 <tcp_slowtmr+0x556>
 801a3dc:	2300      	movs	r3, #0
 801a3de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a3e2:	4b13      	ldr	r3, [pc, #76]	; (801a430 <tcp_slowtmr+0x5a4>)
 801a3e4:	781b      	ldrb	r3, [r3, #0]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d000      	beq.n	801a3ec <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801a3ea:	e560      	b.n	8019eae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a3ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d102      	bne.n	801a3fa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801a3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a3f6:	f004 f8a5 	bl	801e544 <tcp_output>
  while (pcb != NULL) {
 801a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	f47f ad5c 	bne.w	8019eba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a402:	2300      	movs	r3, #0
 801a404:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a406:	4b0b      	ldr	r3, [pc, #44]	; (801a434 <tcp_slowtmr+0x5a8>)
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a40c:	e067      	b.n	801a4de <tcp_slowtmr+0x652>
 801a40e:	bf00      	nop
 801a410:	20061c94 	.word	0x20061c94
 801a414:	10624dd3 	.word	0x10624dd3
 801a418:	000124f8 	.word	0x000124f8
 801a41c:	20061ca0 	.word	0x20061ca0
 801a420:	08025958 	.word	0x08025958
 801a424:	08025d90 	.word	0x08025d90
 801a428:	0802599c 	.word	0x0802599c
 801a42c:	08025dbc 	.word	0x08025dbc
 801a430:	20061ca8 	.word	0x20061ca8
 801a434:	20061ca4 	.word	0x20061ca4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a43a:	7d1b      	ldrb	r3, [r3, #20]
 801a43c:	2b0a      	cmp	r3, #10
 801a43e:	d006      	beq.n	801a44e <tcp_slowtmr+0x5c2>
 801a440:	4b2b      	ldr	r3, [pc, #172]	; (801a4f0 <tcp_slowtmr+0x664>)
 801a442:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a446:	492b      	ldr	r1, [pc, #172]	; (801a4f4 <tcp_slowtmr+0x668>)
 801a448:	482b      	ldr	r0, [pc, #172]	; (801a4f8 <tcp_slowtmr+0x66c>)
 801a44a:	f008 fcd5 	bl	8022df8 <iprintf>
    pcb_remove = 0;
 801a44e:	2300      	movs	r3, #0
 801a450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a454:	4b29      	ldr	r3, [pc, #164]	; (801a4fc <tcp_slowtmr+0x670>)
 801a456:	681a      	ldr	r2, [r3, #0]
 801a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a45a:	6a1b      	ldr	r3, [r3, #32]
 801a45c:	1ad3      	subs	r3, r2, r3
 801a45e:	2bf0      	cmp	r3, #240	; 0xf0
 801a460:	d904      	bls.n	801a46c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a466:	3301      	adds	r3, #1
 801a468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a470:	2b00      	cmp	r3, #0
 801a472:	d02f      	beq.n	801a4d4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a476:	f000 fbf9 	bl	801ac6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d010      	beq.n	801a4a2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a480:	4b1f      	ldr	r3, [pc, #124]	; (801a500 <tcp_slowtmr+0x674>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a486:	429a      	cmp	r2, r3
 801a488:	d106      	bne.n	801a498 <tcp_slowtmr+0x60c>
 801a48a:	4b19      	ldr	r3, [pc, #100]	; (801a4f0 <tcp_slowtmr+0x664>)
 801a48c:	f240 52af 	movw	r2, #1455	; 0x5af
 801a490:	491c      	ldr	r1, [pc, #112]	; (801a504 <tcp_slowtmr+0x678>)
 801a492:	4819      	ldr	r0, [pc, #100]	; (801a4f8 <tcp_slowtmr+0x66c>)
 801a494:	f008 fcb0 	bl	8022df8 <iprintf>
        prev->next = pcb->next;
 801a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a49a:	68da      	ldr	r2, [r3, #12]
 801a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a49e:	60da      	str	r2, [r3, #12]
 801a4a0:	e00f      	b.n	801a4c2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a4a2:	4b17      	ldr	r3, [pc, #92]	; (801a500 <tcp_slowtmr+0x674>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d006      	beq.n	801a4ba <tcp_slowtmr+0x62e>
 801a4ac:	4b10      	ldr	r3, [pc, #64]	; (801a4f0 <tcp_slowtmr+0x664>)
 801a4ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a4b2:	4915      	ldr	r1, [pc, #84]	; (801a508 <tcp_slowtmr+0x67c>)
 801a4b4:	4810      	ldr	r0, [pc, #64]	; (801a4f8 <tcp_slowtmr+0x66c>)
 801a4b6:	f008 fc9f 	bl	8022df8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4bc:	68db      	ldr	r3, [r3, #12]
 801a4be:	4a10      	ldr	r2, [pc, #64]	; (801a500 <tcp_slowtmr+0x674>)
 801a4c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c8:	68db      	ldr	r3, [r3, #12]
 801a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a4cc:	69f8      	ldr	r0, [r7, #28]
 801a4ce:	f7fe fe23 	bl	8019118 <tcp_free>
 801a4d2:	e004      	b.n	801a4de <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4da:	68db      	ldr	r3, [r3, #12]
 801a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d1a9      	bne.n	801a438 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a4e4:	bf00      	nop
 801a4e6:	bf00      	nop
 801a4e8:	3730      	adds	r7, #48	; 0x30
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	bdb0      	pop	{r4, r5, r7, pc}
 801a4ee:	bf00      	nop
 801a4f0:	08025958 	.word	0x08025958
 801a4f4:	08025de8 	.word	0x08025de8
 801a4f8:	0802599c 	.word	0x0802599c
 801a4fc:	20061c94 	.word	0x20061c94
 801a500:	20061ca4 	.word	0x20061ca4
 801a504:	08025e18 	.word	0x08025e18
 801a508:	08025e40 	.word	0x08025e40

0801a50c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a512:	4b2d      	ldr	r3, [pc, #180]	; (801a5c8 <tcp_fasttmr+0xbc>)
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	3301      	adds	r3, #1
 801a518:	b2da      	uxtb	r2, r3
 801a51a:	4b2b      	ldr	r3, [pc, #172]	; (801a5c8 <tcp_fasttmr+0xbc>)
 801a51c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a51e:	4b2b      	ldr	r3, [pc, #172]	; (801a5cc <tcp_fasttmr+0xc0>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a524:	e048      	b.n	801a5b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	7f9a      	ldrb	r2, [r3, #30]
 801a52a:	4b27      	ldr	r3, [pc, #156]	; (801a5c8 <tcp_fasttmr+0xbc>)
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	429a      	cmp	r2, r3
 801a530:	d03f      	beq.n	801a5b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a532:	4b25      	ldr	r3, [pc, #148]	; (801a5c8 <tcp_fasttmr+0xbc>)
 801a534:	781a      	ldrb	r2, [r3, #0]
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	8b5b      	ldrh	r3, [r3, #26]
 801a53e:	f003 0301 	and.w	r3, r3, #1
 801a542:	2b00      	cmp	r3, #0
 801a544:	d010      	beq.n	801a568 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	8b5b      	ldrh	r3, [r3, #26]
 801a54a:	f043 0302 	orr.w	r3, r3, #2
 801a54e:	b29a      	uxth	r2, r3
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a554:	6878      	ldr	r0, [r7, #4]
 801a556:	f003 fff5 	bl	801e544 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	8b5b      	ldrh	r3, [r3, #26]
 801a55e:	f023 0303 	bic.w	r3, r3, #3
 801a562:	b29a      	uxth	r2, r3
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	8b5b      	ldrh	r3, [r3, #26]
 801a56c:	f003 0308 	and.w	r3, r3, #8
 801a570:	2b00      	cmp	r3, #0
 801a572:	d009      	beq.n	801a588 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	8b5b      	ldrh	r3, [r3, #26]
 801a578:	f023 0308 	bic.w	r3, r3, #8
 801a57c:	b29a      	uxth	r2, r3
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	f7fe ff5c 	bl	8019440 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	68db      	ldr	r3, [r3, #12]
 801a58c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a592:	2b00      	cmp	r3, #0
 801a594:	d00a      	beq.n	801a5ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a596:	4b0e      	ldr	r3, [pc, #56]	; (801a5d0 <tcp_fasttmr+0xc4>)
 801a598:	2200      	movs	r2, #0
 801a59a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a59c:	6878      	ldr	r0, [r7, #4]
 801a59e:	f000 f819 	bl	801a5d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a5a2:	4b0b      	ldr	r3, [pc, #44]	; (801a5d0 <tcp_fasttmr+0xc4>)
 801a5a4:	781b      	ldrb	r3, [r3, #0]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d000      	beq.n	801a5ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a5aa:	e7b8      	b.n	801a51e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	607b      	str	r3, [r7, #4]
 801a5b0:	e002      	b.n	801a5b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	68db      	ldr	r3, [r3, #12]
 801a5b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d1b3      	bne.n	801a526 <tcp_fasttmr+0x1a>
    }
  }
}
 801a5be:	bf00      	nop
 801a5c0:	bf00      	nop
 801a5c2:	3708      	adds	r7, #8
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}
 801a5c8:	20061caa 	.word	0x20061caa
 801a5cc:	20061ca0 	.word	0x20061ca0
 801a5d0:	20061ca8 	.word	0x20061ca8

0801a5d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a5d4:	b590      	push	{r4, r7, lr}
 801a5d6:	b085      	sub	sp, #20
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d109      	bne.n	801a5f6 <tcp_process_refused_data+0x22>
 801a5e2:	4b37      	ldr	r3, [pc, #220]	; (801a6c0 <tcp_process_refused_data+0xec>)
 801a5e4:	f240 6209 	movw	r2, #1545	; 0x609
 801a5e8:	4936      	ldr	r1, [pc, #216]	; (801a6c4 <tcp_process_refused_data+0xf0>)
 801a5ea:	4837      	ldr	r0, [pc, #220]	; (801a6c8 <tcp_process_refused_data+0xf4>)
 801a5ec:	f008 fc04 	bl	8022df8 <iprintf>
 801a5f0:	f06f 030f 	mvn.w	r3, #15
 801a5f4:	e060      	b.n	801a6b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a5fa:	7b5b      	ldrb	r3, [r3, #13]
 801a5fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a602:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	2200      	movs	r2, #0
 801a608:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a610:	2b00      	cmp	r3, #0
 801a612:	d00b      	beq.n	801a62c <tcp_process_refused_data+0x58>
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	6918      	ldr	r0, [r3, #16]
 801a61e:	2300      	movs	r3, #0
 801a620:	68ba      	ldr	r2, [r7, #8]
 801a622:	6879      	ldr	r1, [r7, #4]
 801a624:	47a0      	blx	r4
 801a626:	4603      	mov	r3, r0
 801a628:	73fb      	strb	r3, [r7, #15]
 801a62a:	e007      	b.n	801a63c <tcp_process_refused_data+0x68>
 801a62c:	2300      	movs	r3, #0
 801a62e:	68ba      	ldr	r2, [r7, #8]
 801a630:	6879      	ldr	r1, [r7, #4]
 801a632:	2000      	movs	r0, #0
 801a634:	f000 f8a4 	bl	801a780 <tcp_recv_null>
 801a638:	4603      	mov	r3, r0
 801a63a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d12a      	bne.n	801a69a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a644:	7bbb      	ldrb	r3, [r7, #14]
 801a646:	f003 0320 	and.w	r3, r3, #32
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d033      	beq.n	801a6b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a652:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a656:	d005      	beq.n	801a664 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a65c:	3301      	adds	r3, #1
 801a65e:	b29a      	uxth	r2, r3
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d00b      	beq.n	801a686 <tcp_process_refused_data+0xb2>
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	6918      	ldr	r0, [r3, #16]
 801a678:	2300      	movs	r3, #0
 801a67a:	2200      	movs	r2, #0
 801a67c:	6879      	ldr	r1, [r7, #4]
 801a67e:	47a0      	blx	r4
 801a680:	4603      	mov	r3, r0
 801a682:	73fb      	strb	r3, [r7, #15]
 801a684:	e001      	b.n	801a68a <tcp_process_refused_data+0xb6>
 801a686:	2300      	movs	r3, #0
 801a688:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a68e:	f113 0f0d 	cmn.w	r3, #13
 801a692:	d110      	bne.n	801a6b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801a694:	f06f 030c 	mvn.w	r3, #12
 801a698:	e00e      	b.n	801a6b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801a69a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a69e:	f113 0f0d 	cmn.w	r3, #13
 801a6a2:	d102      	bne.n	801a6aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a6a4:	f06f 030c 	mvn.w	r3, #12
 801a6a8:	e006      	b.n	801a6b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	68ba      	ldr	r2, [r7, #8]
 801a6ae:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801a6b0:	f06f 0304 	mvn.w	r3, #4
 801a6b4:	e000      	b.n	801a6b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801a6b6:	2300      	movs	r3, #0
}
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	3714      	adds	r7, #20
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bd90      	pop	{r4, r7, pc}
 801a6c0:	08025958 	.word	0x08025958
 801a6c4:	08025e68 	.word	0x08025e68
 801a6c8:	0802599c 	.word	0x0802599c

0801a6cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b084      	sub	sp, #16
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a6d4:	e007      	b.n	801a6e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f000 f80a 	bl	801a6f6 <tcp_seg_free>
    seg = next;
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d1f4      	bne.n	801a6d6 <tcp_segs_free+0xa>
  }
}
 801a6ec:	bf00      	nop
 801a6ee:	bf00      	nop
 801a6f0:	3710      	adds	r7, #16
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}

0801a6f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a6f6:	b580      	push	{r7, lr}
 801a6f8:	b082      	sub	sp, #8
 801a6fa:	af00      	add	r7, sp, #0
 801a6fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d00c      	beq.n	801a71e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	685b      	ldr	r3, [r3, #4]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d004      	beq.n	801a716 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	685b      	ldr	r3, [r3, #4]
 801a710:	4618      	mov	r0, r3
 801a712:	f7fe fa55 	bl	8018bc0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a716:	6879      	ldr	r1, [r7, #4]
 801a718:	2003      	movs	r0, #3
 801a71a:	f7fd fbad 	bl	8017e78 <memp_free>
  }
}
 801a71e:	bf00      	nop
 801a720:	3708      	adds	r7, #8
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
	...

0801a728 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b084      	sub	sp, #16
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d106      	bne.n	801a744 <tcp_seg_copy+0x1c>
 801a736:	4b0f      	ldr	r3, [pc, #60]	; (801a774 <tcp_seg_copy+0x4c>)
 801a738:	f240 6282 	movw	r2, #1666	; 0x682
 801a73c:	490e      	ldr	r1, [pc, #56]	; (801a778 <tcp_seg_copy+0x50>)
 801a73e:	480f      	ldr	r0, [pc, #60]	; (801a77c <tcp_seg_copy+0x54>)
 801a740:	f008 fb5a 	bl	8022df8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a744:	2003      	movs	r0, #3
 801a746:	f7fd fb21 	bl	8017d8c <memp_malloc>
 801a74a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d101      	bne.n	801a756 <tcp_seg_copy+0x2e>
    return NULL;
 801a752:	2300      	movs	r3, #0
 801a754:	e00a      	b.n	801a76c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a756:	2210      	movs	r2, #16
 801a758:	6879      	ldr	r1, [r7, #4]
 801a75a:	68f8      	ldr	r0, [r7, #12]
 801a75c:	f008 fcbd 	bl	80230da <memcpy>
  pbuf_ref(cseg->p);
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	685b      	ldr	r3, [r3, #4]
 801a764:	4618      	mov	r0, r3
 801a766:	f7fe fad1 	bl	8018d0c <pbuf_ref>
  return cseg;
 801a76a:	68fb      	ldr	r3, [r7, #12]
}
 801a76c:	4618      	mov	r0, r3
 801a76e:	3710      	adds	r7, #16
 801a770:	46bd      	mov	sp, r7
 801a772:	bd80      	pop	{r7, pc}
 801a774:	08025958 	.word	0x08025958
 801a778:	08025eac 	.word	0x08025eac
 801a77c:	0802599c 	.word	0x0802599c

0801a780 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801a780:	b580      	push	{r7, lr}
 801a782:	b084      	sub	sp, #16
 801a784:	af00      	add	r7, sp, #0
 801a786:	60f8      	str	r0, [r7, #12]
 801a788:	60b9      	str	r1, [r7, #8]
 801a78a:	607a      	str	r2, [r7, #4]
 801a78c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d109      	bne.n	801a7a8 <tcp_recv_null+0x28>
 801a794:	4b12      	ldr	r3, [pc, #72]	; (801a7e0 <tcp_recv_null+0x60>)
 801a796:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a79a:	4912      	ldr	r1, [pc, #72]	; (801a7e4 <tcp_recv_null+0x64>)
 801a79c:	4812      	ldr	r0, [pc, #72]	; (801a7e8 <tcp_recv_null+0x68>)
 801a79e:	f008 fb2b 	bl	8022df8 <iprintf>
 801a7a2:	f06f 030f 	mvn.w	r3, #15
 801a7a6:	e016      	b.n	801a7d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d009      	beq.n	801a7c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	891b      	ldrh	r3, [r3, #8]
 801a7b2:	4619      	mov	r1, r3
 801a7b4:	68b8      	ldr	r0, [r7, #8]
 801a7b6:	f7ff f9bb 	bl	8019b30 <tcp_recved>
    pbuf_free(p);
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	f7fe fa00 	bl	8018bc0 <pbuf_free>
 801a7c0:	e008      	b.n	801a7d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801a7c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d104      	bne.n	801a7d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801a7ca:	68b8      	ldr	r0, [r7, #8]
 801a7cc:	f7fe fea2 	bl	8019514 <tcp_close>
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	e000      	b.n	801a7d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801a7d4:	2300      	movs	r3, #0
}
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	3710      	adds	r7, #16
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	08025958 	.word	0x08025958
 801a7e4:	08025ec8 	.word	0x08025ec8
 801a7e8:	0802599c 	.word	0x0802599c

0801a7ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b086      	sub	sp, #24
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	db01      	blt.n	801a802 <tcp_kill_prio+0x16>
 801a7fe:	79fb      	ldrb	r3, [r7, #7]
 801a800:	e000      	b.n	801a804 <tcp_kill_prio+0x18>
 801a802:	237f      	movs	r3, #127	; 0x7f
 801a804:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801a806:	7afb      	ldrb	r3, [r7, #11]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d034      	beq.n	801a876 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801a80c:	7afb      	ldrb	r3, [r7, #11]
 801a80e:	3b01      	subs	r3, #1
 801a810:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801a812:	2300      	movs	r3, #0
 801a814:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a816:	2300      	movs	r3, #0
 801a818:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a81a:	4b19      	ldr	r3, [pc, #100]	; (801a880 <tcp_kill_prio+0x94>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	617b      	str	r3, [r7, #20]
 801a820:	e01f      	b.n	801a862 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801a822:	697b      	ldr	r3, [r7, #20]
 801a824:	7d5b      	ldrb	r3, [r3, #21]
 801a826:	7afa      	ldrb	r2, [r7, #11]
 801a828:	429a      	cmp	r2, r3
 801a82a:	d80c      	bhi.n	801a846 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801a830:	7afa      	ldrb	r2, [r7, #11]
 801a832:	429a      	cmp	r2, r3
 801a834:	d112      	bne.n	801a85c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a836:	4b13      	ldr	r3, [pc, #76]	; (801a884 <tcp_kill_prio+0x98>)
 801a838:	681a      	ldr	r2, [r3, #0]
 801a83a:	697b      	ldr	r3, [r7, #20]
 801a83c:	6a1b      	ldr	r3, [r3, #32]
 801a83e:	1ad3      	subs	r3, r2, r3
 801a840:	68fa      	ldr	r2, [r7, #12]
 801a842:	429a      	cmp	r2, r3
 801a844:	d80a      	bhi.n	801a85c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801a846:	4b0f      	ldr	r3, [pc, #60]	; (801a884 <tcp_kill_prio+0x98>)
 801a848:	681a      	ldr	r2, [r3, #0]
 801a84a:	697b      	ldr	r3, [r7, #20]
 801a84c:	6a1b      	ldr	r3, [r3, #32]
 801a84e:	1ad3      	subs	r3, r2, r3
 801a850:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801a852:	697b      	ldr	r3, [r7, #20]
 801a854:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801a856:	697b      	ldr	r3, [r7, #20]
 801a858:	7d5b      	ldrb	r3, [r3, #21]
 801a85a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a85c:	697b      	ldr	r3, [r7, #20]
 801a85e:	68db      	ldr	r3, [r3, #12]
 801a860:	617b      	str	r3, [r7, #20]
 801a862:	697b      	ldr	r3, [r7, #20]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d1dc      	bne.n	801a822 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801a868:	693b      	ldr	r3, [r7, #16]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d004      	beq.n	801a878 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a86e:	6938      	ldr	r0, [r7, #16]
 801a870:	f7fe ff96 	bl	80197a0 <tcp_abort>
 801a874:	e000      	b.n	801a878 <tcp_kill_prio+0x8c>
    return;
 801a876:	bf00      	nop
  }
}
 801a878:	3718      	adds	r7, #24
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}
 801a87e:	bf00      	nop
 801a880:	20061ca0 	.word	0x20061ca0
 801a884:	20061c94 	.word	0x20061c94

0801a888 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b086      	sub	sp, #24
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	4603      	mov	r3, r0
 801a890:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801a892:	79fb      	ldrb	r3, [r7, #7]
 801a894:	2b08      	cmp	r3, #8
 801a896:	d009      	beq.n	801a8ac <tcp_kill_state+0x24>
 801a898:	79fb      	ldrb	r3, [r7, #7]
 801a89a:	2b09      	cmp	r3, #9
 801a89c:	d006      	beq.n	801a8ac <tcp_kill_state+0x24>
 801a89e:	4b1a      	ldr	r3, [pc, #104]	; (801a908 <tcp_kill_state+0x80>)
 801a8a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801a8a4:	4919      	ldr	r1, [pc, #100]	; (801a90c <tcp_kill_state+0x84>)
 801a8a6:	481a      	ldr	r0, [pc, #104]	; (801a910 <tcp_kill_state+0x88>)
 801a8a8:	f008 faa6 	bl	8022df8 <iprintf>

  inactivity = 0;
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a8b4:	4b17      	ldr	r3, [pc, #92]	; (801a914 <tcp_kill_state+0x8c>)
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	617b      	str	r3, [r7, #20]
 801a8ba:	e017      	b.n	801a8ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801a8bc:	697b      	ldr	r3, [r7, #20]
 801a8be:	7d1b      	ldrb	r3, [r3, #20]
 801a8c0:	79fa      	ldrb	r2, [r7, #7]
 801a8c2:	429a      	cmp	r2, r3
 801a8c4:	d10f      	bne.n	801a8e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a8c6:	4b14      	ldr	r3, [pc, #80]	; (801a918 <tcp_kill_state+0x90>)
 801a8c8:	681a      	ldr	r2, [r3, #0]
 801a8ca:	697b      	ldr	r3, [r7, #20]
 801a8cc:	6a1b      	ldr	r3, [r3, #32]
 801a8ce:	1ad3      	subs	r3, r2, r3
 801a8d0:	68fa      	ldr	r2, [r7, #12]
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	d807      	bhi.n	801a8e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801a8d6:	4b10      	ldr	r3, [pc, #64]	; (801a918 <tcp_kill_state+0x90>)
 801a8d8:	681a      	ldr	r2, [r3, #0]
 801a8da:	697b      	ldr	r3, [r7, #20]
 801a8dc:	6a1b      	ldr	r3, [r3, #32]
 801a8de:	1ad3      	subs	r3, r2, r3
 801a8e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801a8e2:	697b      	ldr	r3, [r7, #20]
 801a8e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a8e6:	697b      	ldr	r3, [r7, #20]
 801a8e8:	68db      	ldr	r3, [r3, #12]
 801a8ea:	617b      	str	r3, [r7, #20]
 801a8ec:	697b      	ldr	r3, [r7, #20]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d1e4      	bne.n	801a8bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801a8f2:	693b      	ldr	r3, [r7, #16]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d003      	beq.n	801a900 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	6938      	ldr	r0, [r7, #16]
 801a8fc:	f7fe fe92 	bl	8019624 <tcp_abandon>
  }
}
 801a900:	bf00      	nop
 801a902:	3718      	adds	r7, #24
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}
 801a908:	08025958 	.word	0x08025958
 801a90c:	08025ee4 	.word	0x08025ee4
 801a910:	0802599c 	.word	0x0802599c
 801a914:	20061ca0 	.word	0x20061ca0
 801a918:	20061c94 	.word	0x20061c94

0801a91c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801a922:	2300      	movs	r3, #0
 801a924:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801a926:	2300      	movs	r3, #0
 801a928:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a92a:	4b12      	ldr	r3, [pc, #72]	; (801a974 <tcp_kill_timewait+0x58>)
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	60fb      	str	r3, [r7, #12]
 801a930:	e012      	b.n	801a958 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a932:	4b11      	ldr	r3, [pc, #68]	; (801a978 <tcp_kill_timewait+0x5c>)
 801a934:	681a      	ldr	r2, [r3, #0]
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	6a1b      	ldr	r3, [r3, #32]
 801a93a:	1ad3      	subs	r3, r2, r3
 801a93c:	687a      	ldr	r2, [r7, #4]
 801a93e:	429a      	cmp	r2, r3
 801a940:	d807      	bhi.n	801a952 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801a942:	4b0d      	ldr	r3, [pc, #52]	; (801a978 <tcp_kill_timewait+0x5c>)
 801a944:	681a      	ldr	r2, [r3, #0]
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	6a1b      	ldr	r3, [r3, #32]
 801a94a:	1ad3      	subs	r3, r2, r3
 801a94c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	68db      	ldr	r3, [r3, #12]
 801a956:	60fb      	str	r3, [r7, #12]
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d1e9      	bne.n	801a932 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d002      	beq.n	801a96a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a964:	68b8      	ldr	r0, [r7, #8]
 801a966:	f7fe ff1b 	bl	80197a0 <tcp_abort>
  }
}
 801a96a:	bf00      	nop
 801a96c:	3710      	adds	r7, #16
 801a96e:	46bd      	mov	sp, r7
 801a970:	bd80      	pop	{r7, pc}
 801a972:	bf00      	nop
 801a974:	20061ca4 	.word	0x20061ca4
 801a978:	20061c94 	.word	0x20061c94

0801a97c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b082      	sub	sp, #8
 801a980:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a982:	4b10      	ldr	r3, [pc, #64]	; (801a9c4 <tcp_handle_closepend+0x48>)
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a988:	e014      	b.n	801a9b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	68db      	ldr	r3, [r3, #12]
 801a98e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	8b5b      	ldrh	r3, [r3, #26]
 801a994:	f003 0308 	and.w	r3, r3, #8
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d009      	beq.n	801a9b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	8b5b      	ldrh	r3, [r3, #26]
 801a9a0:	f023 0308 	bic.w	r3, r3, #8
 801a9a4:	b29a      	uxth	r2, r3
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801a9aa:	6878      	ldr	r0, [r7, #4]
 801a9ac:	f7fe fd48 	bl	8019440 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801a9b0:	683b      	ldr	r3, [r7, #0]
 801a9b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d1e7      	bne.n	801a98a <tcp_handle_closepend+0xe>
  }
}
 801a9ba:	bf00      	nop
 801a9bc:	bf00      	nop
 801a9be:	3708      	adds	r7, #8
 801a9c0:	46bd      	mov	sp, r7
 801a9c2:	bd80      	pop	{r7, pc}
 801a9c4:	20061ca0 	.word	0x20061ca0

0801a9c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b084      	sub	sp, #16
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a9d2:	2001      	movs	r0, #1
 801a9d4:	f7fd f9da 	bl	8017d8c <memp_malloc>
 801a9d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d126      	bne.n	801aa2e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a9e0:	f7ff ffcc 	bl	801a97c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a9e4:	f7ff ff9a 	bl	801a91c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a9e8:	2001      	movs	r0, #1
 801a9ea:	f7fd f9cf 	bl	8017d8c <memp_malloc>
 801a9ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d11b      	bne.n	801aa2e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a9f6:	2009      	movs	r0, #9
 801a9f8:	f7ff ff46 	bl	801a888 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a9fc:	2001      	movs	r0, #1
 801a9fe:	f7fd f9c5 	bl	8017d8c <memp_malloc>
 801aa02:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d111      	bne.n	801aa2e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801aa0a:	2008      	movs	r0, #8
 801aa0c:	f7ff ff3c 	bl	801a888 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801aa10:	2001      	movs	r0, #1
 801aa12:	f7fd f9bb 	bl	8017d8c <memp_malloc>
 801aa16:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d107      	bne.n	801aa2e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801aa1e:	79fb      	ldrb	r3, [r7, #7]
 801aa20:	4618      	mov	r0, r3
 801aa22:	f7ff fee3 	bl	801a7ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801aa26:	2001      	movs	r0, #1
 801aa28:	f7fd f9b0 	bl	8017d8c <memp_malloc>
 801aa2c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d03f      	beq.n	801aab4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801aa34:	229c      	movs	r2, #156	; 0x9c
 801aa36:	2100      	movs	r1, #0
 801aa38:	68f8      	ldr	r0, [r7, #12]
 801aa3a:	f008 fab5 	bl	8022fa8 <memset>
    pcb->prio = prio;
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	79fa      	ldrb	r2, [r7, #7]
 801aa42:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801aa4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801aa54:	855a      	strh	r2, [r3, #42]	; 0x2a
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	22ff      	movs	r2, #255	; 0xff
 801aa62:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	f44f 7206 	mov.w	r2, #536	; 0x218
 801aa6a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	2206      	movs	r2, #6
 801aa70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	2206      	movs	r2, #6
 801aa78:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa80:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	2201      	movs	r2, #1
 801aa86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801aa8a:	4b0d      	ldr	r3, [pc, #52]	; (801aac0 <tcp_alloc+0xf8>)
 801aa8c:	681a      	ldr	r2, [r3, #0]
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801aa92:	4b0c      	ldr	r3, [pc, #48]	; (801aac4 <tcp_alloc+0xfc>)
 801aa94:	781a      	ldrb	r2, [r3, #0]
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801aaa0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	4a08      	ldr	r2, [pc, #32]	; (801aac8 <tcp_alloc+0x100>)
 801aaa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	4a07      	ldr	r2, [pc, #28]	; (801aacc <tcp_alloc+0x104>)
 801aab0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801aab4:	68fb      	ldr	r3, [r7, #12]
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3710      	adds	r7, #16
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}
 801aabe:	bf00      	nop
 801aac0:	20061c94 	.word	0x20061c94
 801aac4:	20061caa 	.word	0x20061caa
 801aac8:	0801a781 	.word	0x0801a781
 801aacc:	006ddd00 	.word	0x006ddd00

0801aad0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b084      	sub	sp, #16
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	4603      	mov	r3, r0
 801aad8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801aada:	2040      	movs	r0, #64	; 0x40
 801aadc:	f7ff ff74 	bl	801a9c8 <tcp_alloc>
 801aae0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801aae2:	68fb      	ldr	r3, [r7, #12]
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	3710      	adds	r7, #16
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801aaec:	b480      	push	{r7}
 801aaee:	b083      	sub	sp, #12
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
 801aaf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d002      	beq.n	801ab02 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	683a      	ldr	r2, [r7, #0]
 801ab00:	611a      	str	r2, [r3, #16]
  }
}
 801ab02:	bf00      	nop
 801ab04:	370c      	adds	r7, #12
 801ab06:	46bd      	mov	sp, r7
 801ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0c:	4770      	bx	lr
	...

0801ab10 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b082      	sub	sp, #8
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
 801ab18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d00e      	beq.n	801ab3e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	7d1b      	ldrb	r3, [r3, #20]
 801ab24:	2b01      	cmp	r3, #1
 801ab26:	d106      	bne.n	801ab36 <tcp_recv+0x26>
 801ab28:	4b07      	ldr	r3, [pc, #28]	; (801ab48 <tcp_recv+0x38>)
 801ab2a:	f240 72df 	movw	r2, #2015	; 0x7df
 801ab2e:	4907      	ldr	r1, [pc, #28]	; (801ab4c <tcp_recv+0x3c>)
 801ab30:	4807      	ldr	r0, [pc, #28]	; (801ab50 <tcp_recv+0x40>)
 801ab32:	f008 f961 	bl	8022df8 <iprintf>
    pcb->recv = recv;
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	683a      	ldr	r2, [r7, #0]
 801ab3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801ab3e:	bf00      	nop
 801ab40:	3708      	adds	r7, #8
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}
 801ab46:	bf00      	nop
 801ab48:	08025958 	.word	0x08025958
 801ab4c:	08025ef4 	.word	0x08025ef4
 801ab50:	0802599c 	.word	0x0802599c

0801ab54 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b082      	sub	sp, #8
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
 801ab5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d00e      	beq.n	801ab82 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	7d1b      	ldrb	r3, [r3, #20]
 801ab68:	2b01      	cmp	r3, #1
 801ab6a:	d106      	bne.n	801ab7a <tcp_sent+0x26>
 801ab6c:	4b07      	ldr	r3, [pc, #28]	; (801ab8c <tcp_sent+0x38>)
 801ab6e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801ab72:	4907      	ldr	r1, [pc, #28]	; (801ab90 <tcp_sent+0x3c>)
 801ab74:	4807      	ldr	r0, [pc, #28]	; (801ab94 <tcp_sent+0x40>)
 801ab76:	f008 f93f 	bl	8022df8 <iprintf>
    pcb->sent = sent;
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	683a      	ldr	r2, [r7, #0]
 801ab7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801ab82:	bf00      	nop
 801ab84:	3708      	adds	r7, #8
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bd80      	pop	{r7, pc}
 801ab8a:	bf00      	nop
 801ab8c:	08025958 	.word	0x08025958
 801ab90:	08025f1c 	.word	0x08025f1c
 801ab94:	0802599c 	.word	0x0802599c

0801ab98 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b082      	sub	sp, #8
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
 801aba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d00e      	beq.n	801abc6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	7d1b      	ldrb	r3, [r3, #20]
 801abac:	2b01      	cmp	r3, #1
 801abae:	d106      	bne.n	801abbe <tcp_err+0x26>
 801abb0:	4b07      	ldr	r3, [pc, #28]	; (801abd0 <tcp_err+0x38>)
 801abb2:	f640 020d 	movw	r2, #2061	; 0x80d
 801abb6:	4907      	ldr	r1, [pc, #28]	; (801abd4 <tcp_err+0x3c>)
 801abb8:	4807      	ldr	r0, [pc, #28]	; (801abd8 <tcp_err+0x40>)
 801abba:	f008 f91d 	bl	8022df8 <iprintf>
    pcb->errf = err;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	683a      	ldr	r2, [r7, #0]
 801abc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801abc6:	bf00      	nop
 801abc8:	3708      	adds	r7, #8
 801abca:	46bd      	mov	sp, r7
 801abcc:	bd80      	pop	{r7, pc}
 801abce:	bf00      	nop
 801abd0:	08025958 	.word	0x08025958
 801abd4:	08025f44 	.word	0x08025f44
 801abd8:	0802599c 	.word	0x0802599c

0801abdc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801abdc:	b480      	push	{r7}
 801abde:	b085      	sub	sp, #20
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d008      	beq.n	801abfe <tcp_accept+0x22>
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	7d1b      	ldrb	r3, [r3, #20]
 801abf0:	2b01      	cmp	r3, #1
 801abf2:	d104      	bne.n	801abfe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	683a      	ldr	r2, [r7, #0]
 801abfc:	619a      	str	r2, [r3, #24]
  }
}
 801abfe:	bf00      	nop
 801ac00:	3714      	adds	r7, #20
 801ac02:	46bd      	mov	sp, r7
 801ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac08:	4770      	bx	lr
	...

0801ac0c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b084      	sub	sp, #16
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	60f8      	str	r0, [r7, #12]
 801ac14:	60b9      	str	r1, [r7, #8]
 801ac16:	4613      	mov	r3, r2
 801ac18:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d107      	bne.n	801ac30 <tcp_poll+0x24>
 801ac20:	4b0e      	ldr	r3, [pc, #56]	; (801ac5c <tcp_poll+0x50>)
 801ac22:	f640 023d 	movw	r2, #2109	; 0x83d
 801ac26:	490e      	ldr	r1, [pc, #56]	; (801ac60 <tcp_poll+0x54>)
 801ac28:	480e      	ldr	r0, [pc, #56]	; (801ac64 <tcp_poll+0x58>)
 801ac2a:	f008 f8e5 	bl	8022df8 <iprintf>
 801ac2e:	e011      	b.n	801ac54 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	7d1b      	ldrb	r3, [r3, #20]
 801ac34:	2b01      	cmp	r3, #1
 801ac36:	d106      	bne.n	801ac46 <tcp_poll+0x3a>
 801ac38:	4b08      	ldr	r3, [pc, #32]	; (801ac5c <tcp_poll+0x50>)
 801ac3a:	f640 023e 	movw	r2, #2110	; 0x83e
 801ac3e:	490a      	ldr	r1, [pc, #40]	; (801ac68 <tcp_poll+0x5c>)
 801ac40:	4808      	ldr	r0, [pc, #32]	; (801ac64 <tcp_poll+0x58>)
 801ac42:	f008 f8d9 	bl	8022df8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	68ba      	ldr	r2, [r7, #8]
 801ac4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	79fa      	ldrb	r2, [r7, #7]
 801ac52:	775a      	strb	r2, [r3, #29]
}
 801ac54:	3710      	adds	r7, #16
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd80      	pop	{r7, pc}
 801ac5a:	bf00      	nop
 801ac5c:	08025958 	.word	0x08025958
 801ac60:	08025f6c 	.word	0x08025f6c
 801ac64:	0802599c 	.word	0x0802599c
 801ac68:	08025f84 	.word	0x08025f84

0801ac6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b082      	sub	sp, #8
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d107      	bne.n	801ac8a <tcp_pcb_purge+0x1e>
 801ac7a:	4b21      	ldr	r3, [pc, #132]	; (801ad00 <tcp_pcb_purge+0x94>)
 801ac7c:	f640 0251 	movw	r2, #2129	; 0x851
 801ac80:	4920      	ldr	r1, [pc, #128]	; (801ad04 <tcp_pcb_purge+0x98>)
 801ac82:	4821      	ldr	r0, [pc, #132]	; (801ad08 <tcp_pcb_purge+0x9c>)
 801ac84:	f008 f8b8 	bl	8022df8 <iprintf>
 801ac88:	e037      	b.n	801acfa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	7d1b      	ldrb	r3, [r3, #20]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d033      	beq.n	801acfa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801ac96:	2b0a      	cmp	r3, #10
 801ac98:	d02f      	beq.n	801acfa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801ac9e:	2b01      	cmp	r3, #1
 801aca0:	d02b      	beq.n	801acfa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d007      	beq.n	801acba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801acae:	4618      	mov	r0, r3
 801acb0:	f7fd ff86 	bl	8018bc0 <pbuf_free>
      pcb->refused_data = NULL;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2200      	movs	r2, #0
 801acb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d002      	beq.n	801acc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801acc2:	6878      	ldr	r0, [r7, #4]
 801acc4:	f000 f986 	bl	801afd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801acce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801acd4:	4618      	mov	r0, r3
 801acd6:	f7ff fcf9 	bl	801a6cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801acde:	4618      	mov	r0, r3
 801ace0:	f7ff fcf4 	bl	801a6cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	2200      	movs	r2, #0
 801ace8:	66da      	str	r2, [r3, #108]	; 0x6c
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	2200      	movs	r2, #0
 801acf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801acfa:	3708      	adds	r7, #8
 801acfc:	46bd      	mov	sp, r7
 801acfe:	bd80      	pop	{r7, pc}
 801ad00:	08025958 	.word	0x08025958
 801ad04:	08025fa4 	.word	0x08025fa4
 801ad08:	0802599c 	.word	0x0802599c

0801ad0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b084      	sub	sp, #16
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
 801ad14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d106      	bne.n	801ad2a <tcp_pcb_remove+0x1e>
 801ad1c:	4b3e      	ldr	r3, [pc, #248]	; (801ae18 <tcp_pcb_remove+0x10c>)
 801ad1e:	f640 0283 	movw	r2, #2179	; 0x883
 801ad22:	493e      	ldr	r1, [pc, #248]	; (801ae1c <tcp_pcb_remove+0x110>)
 801ad24:	483e      	ldr	r0, [pc, #248]	; (801ae20 <tcp_pcb_remove+0x114>)
 801ad26:	f008 f867 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d106      	bne.n	801ad3e <tcp_pcb_remove+0x32>
 801ad30:	4b39      	ldr	r3, [pc, #228]	; (801ae18 <tcp_pcb_remove+0x10c>)
 801ad32:	f640 0284 	movw	r2, #2180	; 0x884
 801ad36:	493b      	ldr	r1, [pc, #236]	; (801ae24 <tcp_pcb_remove+0x118>)
 801ad38:	4839      	ldr	r0, [pc, #228]	; (801ae20 <tcp_pcb_remove+0x114>)
 801ad3a:	f008 f85d 	bl	8022df8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	683a      	ldr	r2, [r7, #0]
 801ad44:	429a      	cmp	r2, r3
 801ad46:	d105      	bne.n	801ad54 <tcp_pcb_remove+0x48>
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	68da      	ldr	r2, [r3, #12]
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	601a      	str	r2, [r3, #0]
 801ad52:	e013      	b.n	801ad7c <tcp_pcb_remove+0x70>
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	60fb      	str	r3, [r7, #12]
 801ad5a:	e00c      	b.n	801ad76 <tcp_pcb_remove+0x6a>
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	68db      	ldr	r3, [r3, #12]
 801ad60:	683a      	ldr	r2, [r7, #0]
 801ad62:	429a      	cmp	r2, r3
 801ad64:	d104      	bne.n	801ad70 <tcp_pcb_remove+0x64>
 801ad66:	683b      	ldr	r3, [r7, #0]
 801ad68:	68da      	ldr	r2, [r3, #12]
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	60da      	str	r2, [r3, #12]
 801ad6e:	e005      	b.n	801ad7c <tcp_pcb_remove+0x70>
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	68db      	ldr	r3, [r3, #12]
 801ad74:	60fb      	str	r3, [r7, #12]
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d1ef      	bne.n	801ad5c <tcp_pcb_remove+0x50>
 801ad7c:	683b      	ldr	r3, [r7, #0]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801ad82:	6838      	ldr	r0, [r7, #0]
 801ad84:	f7ff ff72 	bl	801ac6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	7d1b      	ldrb	r3, [r3, #20]
 801ad8c:	2b0a      	cmp	r3, #10
 801ad8e:	d013      	beq.n	801adb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801ad90:	683b      	ldr	r3, [r7, #0]
 801ad92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801ad94:	2b01      	cmp	r3, #1
 801ad96:	d00f      	beq.n	801adb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801ad98:	683b      	ldr	r3, [r7, #0]
 801ad9a:	8b5b      	ldrh	r3, [r3, #26]
 801ad9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d009      	beq.n	801adb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	8b5b      	ldrh	r3, [r3, #26]
 801ada8:	f043 0302 	orr.w	r3, r3, #2
 801adac:	b29a      	uxth	r2, r3
 801adae:	683b      	ldr	r3, [r7, #0]
 801adb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801adb2:	6838      	ldr	r0, [r7, #0]
 801adb4:	f003 fbc6 	bl	801e544 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801adb8:	683b      	ldr	r3, [r7, #0]
 801adba:	7d1b      	ldrb	r3, [r3, #20]
 801adbc:	2b01      	cmp	r3, #1
 801adbe:	d020      	beq.n	801ae02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801adc0:	683b      	ldr	r3, [r7, #0]
 801adc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d006      	beq.n	801add6 <tcp_pcb_remove+0xca>
 801adc8:	4b13      	ldr	r3, [pc, #76]	; (801ae18 <tcp_pcb_remove+0x10c>)
 801adca:	f640 0293 	movw	r2, #2195	; 0x893
 801adce:	4916      	ldr	r1, [pc, #88]	; (801ae28 <tcp_pcb_remove+0x11c>)
 801add0:	4813      	ldr	r0, [pc, #76]	; (801ae20 <tcp_pcb_remove+0x114>)
 801add2:	f008 f811 	bl	8022df8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801adda:	2b00      	cmp	r3, #0
 801addc:	d006      	beq.n	801adec <tcp_pcb_remove+0xe0>
 801adde:	4b0e      	ldr	r3, [pc, #56]	; (801ae18 <tcp_pcb_remove+0x10c>)
 801ade0:	f640 0294 	movw	r2, #2196	; 0x894
 801ade4:	4911      	ldr	r1, [pc, #68]	; (801ae2c <tcp_pcb_remove+0x120>)
 801ade6:	480e      	ldr	r0, [pc, #56]	; (801ae20 <tcp_pcb_remove+0x114>)
 801ade8:	f008 f806 	bl	8022df8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d006      	beq.n	801ae02 <tcp_pcb_remove+0xf6>
 801adf4:	4b08      	ldr	r3, [pc, #32]	; (801ae18 <tcp_pcb_remove+0x10c>)
 801adf6:	f640 0296 	movw	r2, #2198	; 0x896
 801adfa:	490d      	ldr	r1, [pc, #52]	; (801ae30 <tcp_pcb_remove+0x124>)
 801adfc:	4808      	ldr	r0, [pc, #32]	; (801ae20 <tcp_pcb_remove+0x114>)
 801adfe:	f007 fffb 	bl	8022df8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801ae02:	683b      	ldr	r3, [r7, #0]
 801ae04:	2200      	movs	r2, #0
 801ae06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801ae08:	683b      	ldr	r3, [r7, #0]
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801ae0e:	bf00      	nop
 801ae10:	3710      	adds	r7, #16
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	08025958 	.word	0x08025958
 801ae1c:	08025fc0 	.word	0x08025fc0
 801ae20:	0802599c 	.word	0x0802599c
 801ae24:	08025fdc 	.word	0x08025fdc
 801ae28:	08025ffc 	.word	0x08025ffc
 801ae2c:	08026014 	.word	0x08026014
 801ae30:	08026030 	.word	0x08026030

0801ae34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801ae34:	b580      	push	{r7, lr}
 801ae36:	b082      	sub	sp, #8
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d106      	bne.n	801ae50 <tcp_next_iss+0x1c>
 801ae42:	4b0a      	ldr	r3, [pc, #40]	; (801ae6c <tcp_next_iss+0x38>)
 801ae44:	f640 02af 	movw	r2, #2223	; 0x8af
 801ae48:	4909      	ldr	r1, [pc, #36]	; (801ae70 <tcp_next_iss+0x3c>)
 801ae4a:	480a      	ldr	r0, [pc, #40]	; (801ae74 <tcp_next_iss+0x40>)
 801ae4c:	f007 ffd4 	bl	8022df8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801ae50:	4b09      	ldr	r3, [pc, #36]	; (801ae78 <tcp_next_iss+0x44>)
 801ae52:	681a      	ldr	r2, [r3, #0]
 801ae54:	4b09      	ldr	r3, [pc, #36]	; (801ae7c <tcp_next_iss+0x48>)
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	4413      	add	r3, r2
 801ae5a:	4a07      	ldr	r2, [pc, #28]	; (801ae78 <tcp_next_iss+0x44>)
 801ae5c:	6013      	str	r3, [r2, #0]
  return iss;
 801ae5e:	4b06      	ldr	r3, [pc, #24]	; (801ae78 <tcp_next_iss+0x44>)
 801ae60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801ae62:	4618      	mov	r0, r3
 801ae64:	3708      	adds	r7, #8
 801ae66:	46bd      	mov	sp, r7
 801ae68:	bd80      	pop	{r7, pc}
 801ae6a:	bf00      	nop
 801ae6c:	08025958 	.word	0x08025958
 801ae70:	08026048 	.word	0x08026048
 801ae74:	0802599c 	.word	0x0802599c
 801ae78:	20050084 	.word	0x20050084
 801ae7c:	20061c94 	.word	0x20061c94

0801ae80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b086      	sub	sp, #24
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	4603      	mov	r3, r0
 801ae88:	60b9      	str	r1, [r7, #8]
 801ae8a:	607a      	str	r2, [r7, #4]
 801ae8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d106      	bne.n	801aea2 <tcp_eff_send_mss_netif+0x22>
 801ae94:	4b14      	ldr	r3, [pc, #80]	; (801aee8 <tcp_eff_send_mss_netif+0x68>)
 801ae96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801ae9a:	4914      	ldr	r1, [pc, #80]	; (801aeec <tcp_eff_send_mss_netif+0x6c>)
 801ae9c:	4814      	ldr	r0, [pc, #80]	; (801aef0 <tcp_eff_send_mss_netif+0x70>)
 801ae9e:	f007 ffab 	bl	8022df8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801aea2:	68bb      	ldr	r3, [r7, #8]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d101      	bne.n	801aeac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801aea8:	89fb      	ldrh	r3, [r7, #14]
 801aeaa:	e019      	b.n	801aee0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801aeb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801aeb2:	8afb      	ldrh	r3, [r7, #22]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d012      	beq.n	801aede <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801aeb8:	2328      	movs	r3, #40	; 0x28
 801aeba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801aebc:	8afa      	ldrh	r2, [r7, #22]
 801aebe:	8abb      	ldrh	r3, [r7, #20]
 801aec0:	429a      	cmp	r2, r3
 801aec2:	d904      	bls.n	801aece <tcp_eff_send_mss_netif+0x4e>
 801aec4:	8afa      	ldrh	r2, [r7, #22]
 801aec6:	8abb      	ldrh	r3, [r7, #20]
 801aec8:	1ad3      	subs	r3, r2, r3
 801aeca:	b29b      	uxth	r3, r3
 801aecc:	e000      	b.n	801aed0 <tcp_eff_send_mss_netif+0x50>
 801aece:	2300      	movs	r3, #0
 801aed0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801aed2:	8a7a      	ldrh	r2, [r7, #18]
 801aed4:	89fb      	ldrh	r3, [r7, #14]
 801aed6:	4293      	cmp	r3, r2
 801aed8:	bf28      	it	cs
 801aeda:	4613      	movcs	r3, r2
 801aedc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801aede:	89fb      	ldrh	r3, [r7, #14]
}
 801aee0:	4618      	mov	r0, r3
 801aee2:	3718      	adds	r7, #24
 801aee4:	46bd      	mov	sp, r7
 801aee6:	bd80      	pop	{r7, pc}
 801aee8:	08025958 	.word	0x08025958
 801aeec:	08026064 	.word	0x08026064
 801aef0:	0802599c 	.word	0x0802599c

0801aef4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b084      	sub	sp, #16
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]
 801aefc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801aefe:	683b      	ldr	r3, [r7, #0]
 801af00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d119      	bne.n	801af3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 801af08:	4b10      	ldr	r3, [pc, #64]	; (801af4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801af0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801af0e:	4910      	ldr	r1, [pc, #64]	; (801af50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801af10:	4810      	ldr	r0, [pc, #64]	; (801af54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801af12:	f007 ff71 	bl	8022df8 <iprintf>

  while (pcb != NULL) {
 801af16:	e011      	b.n	801af3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	681a      	ldr	r2, [r3, #0]
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	429a      	cmp	r2, r3
 801af22:	d108      	bne.n	801af36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	68db      	ldr	r3, [r3, #12]
 801af28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801af2a:	68f8      	ldr	r0, [r7, #12]
 801af2c:	f7fe fc38 	bl	80197a0 <tcp_abort>
      pcb = next;
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	60fb      	str	r3, [r7, #12]
 801af34:	e002      	b.n	801af3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	68db      	ldr	r3, [r3, #12]
 801af3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d1ea      	bne.n	801af18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801af42:	bf00      	nop
 801af44:	bf00      	nop
 801af46:	3710      	adds	r7, #16
 801af48:	46bd      	mov	sp, r7
 801af4a:	bd80      	pop	{r7, pc}
 801af4c:	08025958 	.word	0x08025958
 801af50:	0802608c 	.word	0x0802608c
 801af54:	0802599c 	.word	0x0802599c

0801af58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b084      	sub	sp, #16
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	6078      	str	r0, [r7, #4]
 801af60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d02a      	beq.n	801afbe <tcp_netif_ip_addr_changed+0x66>
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d026      	beq.n	801afbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801af70:	4b15      	ldr	r3, [pc, #84]	; (801afc8 <tcp_netif_ip_addr_changed+0x70>)
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	4619      	mov	r1, r3
 801af76:	6878      	ldr	r0, [r7, #4]
 801af78:	f7ff ffbc 	bl	801aef4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801af7c:	4b13      	ldr	r3, [pc, #76]	; (801afcc <tcp_netif_ip_addr_changed+0x74>)
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	4619      	mov	r1, r3
 801af82:	6878      	ldr	r0, [r7, #4]
 801af84:	f7ff ffb6 	bl	801aef4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d017      	beq.n	801afbe <tcp_netif_ip_addr_changed+0x66>
 801af8e:	683b      	ldr	r3, [r7, #0]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d013      	beq.n	801afbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801af96:	4b0e      	ldr	r3, [pc, #56]	; (801afd0 <tcp_netif_ip_addr_changed+0x78>)
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	60fb      	str	r3, [r7, #12]
 801af9c:	e00c      	b.n	801afb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	681a      	ldr	r2, [r3, #0]
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	429a      	cmp	r2, r3
 801afa8:	d103      	bne.n	801afb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801afaa:	683b      	ldr	r3, [r7, #0]
 801afac:	681a      	ldr	r2, [r3, #0]
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	68db      	ldr	r3, [r3, #12]
 801afb6:	60fb      	str	r3, [r7, #12]
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d1ef      	bne.n	801af9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801afbe:	bf00      	nop
 801afc0:	3710      	adds	r7, #16
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bd80      	pop	{r7, pc}
 801afc6:	bf00      	nop
 801afc8:	20061ca0 	.word	0x20061ca0
 801afcc:	20061c98 	.word	0x20061c98
 801afd0:	20061c9c 	.word	0x20061c9c

0801afd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801afd4:	b580      	push	{r7, lr}
 801afd6:	b082      	sub	sp, #8
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d007      	beq.n	801aff4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801afe8:	4618      	mov	r0, r3
 801afea:	f7ff fb6f 	bl	801a6cc <tcp_segs_free>
    pcb->ooseq = NULL;
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	2200      	movs	r2, #0
 801aff2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801aff4:	bf00      	nop
 801aff6:	3708      	adds	r7, #8
 801aff8:	46bd      	mov	sp, r7
 801affa:	bd80      	pop	{r7, pc}

0801affc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801affc:	b590      	push	{r4, r7, lr}
 801affe:	b08d      	sub	sp, #52	; 0x34
 801b000:	af04      	add	r7, sp, #16
 801b002:	6078      	str	r0, [r7, #4]
 801b004:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d105      	bne.n	801b018 <tcp_input+0x1c>
 801b00c:	4b9b      	ldr	r3, [pc, #620]	; (801b27c <tcp_input+0x280>)
 801b00e:	2283      	movs	r2, #131	; 0x83
 801b010:	499b      	ldr	r1, [pc, #620]	; (801b280 <tcp_input+0x284>)
 801b012:	489c      	ldr	r0, [pc, #624]	; (801b284 <tcp_input+0x288>)
 801b014:	f007 fef0 	bl	8022df8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	685b      	ldr	r3, [r3, #4]
 801b01c:	4a9a      	ldr	r2, [pc, #616]	; (801b288 <tcp_input+0x28c>)
 801b01e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	895b      	ldrh	r3, [r3, #10]
 801b024:	2b13      	cmp	r3, #19
 801b026:	f240 83d1 	bls.w	801b7cc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b02a:	4b98      	ldr	r3, [pc, #608]	; (801b28c <tcp_input+0x290>)
 801b02c:	695b      	ldr	r3, [r3, #20]
 801b02e:	4a97      	ldr	r2, [pc, #604]	; (801b28c <tcp_input+0x290>)
 801b030:	6812      	ldr	r2, [r2, #0]
 801b032:	4611      	mov	r1, r2
 801b034:	4618      	mov	r0, r3
 801b036:	f006 fa79 	bl	802152c <ip4_addr_isbroadcast_u32>
 801b03a:	4603      	mov	r3, r0
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	f040 83c7 	bne.w	801b7d0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b042:	4b92      	ldr	r3, [pc, #584]	; (801b28c <tcp_input+0x290>)
 801b044:	695b      	ldr	r3, [r3, #20]
 801b046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b04a:	2be0      	cmp	r3, #224	; 0xe0
 801b04c:	f000 83c0 	beq.w	801b7d0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b050:	4b8d      	ldr	r3, [pc, #564]	; (801b288 <tcp_input+0x28c>)
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	899b      	ldrh	r3, [r3, #12]
 801b056:	b29b      	uxth	r3, r3
 801b058:	4618      	mov	r0, r3
 801b05a:	f7fc f907 	bl	801726c <lwip_htons>
 801b05e:	4603      	mov	r3, r0
 801b060:	0b1b      	lsrs	r3, r3, #12
 801b062:	b29b      	uxth	r3, r3
 801b064:	b2db      	uxtb	r3, r3
 801b066:	009b      	lsls	r3, r3, #2
 801b068:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b06a:	7cbb      	ldrb	r3, [r7, #18]
 801b06c:	2b13      	cmp	r3, #19
 801b06e:	f240 83b1 	bls.w	801b7d4 <tcp_input+0x7d8>
 801b072:	7cbb      	ldrb	r3, [r7, #18]
 801b074:	b29a      	uxth	r2, r3
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	891b      	ldrh	r3, [r3, #8]
 801b07a:	429a      	cmp	r2, r3
 801b07c:	f200 83aa 	bhi.w	801b7d4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b080:	7cbb      	ldrb	r3, [r7, #18]
 801b082:	b29b      	uxth	r3, r3
 801b084:	3b14      	subs	r3, #20
 801b086:	b29a      	uxth	r2, r3
 801b088:	4b81      	ldr	r3, [pc, #516]	; (801b290 <tcp_input+0x294>)
 801b08a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801b08c:	4b81      	ldr	r3, [pc, #516]	; (801b294 <tcp_input+0x298>)
 801b08e:	2200      	movs	r2, #0
 801b090:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	895a      	ldrh	r2, [r3, #10]
 801b096:	7cbb      	ldrb	r3, [r7, #18]
 801b098:	b29b      	uxth	r3, r3
 801b09a:	429a      	cmp	r2, r3
 801b09c:	d309      	bcc.n	801b0b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801b09e:	4b7c      	ldr	r3, [pc, #496]	; (801b290 <tcp_input+0x294>)
 801b0a0:	881a      	ldrh	r2, [r3, #0]
 801b0a2:	4b7d      	ldr	r3, [pc, #500]	; (801b298 <tcp_input+0x29c>)
 801b0a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b0a6:	7cbb      	ldrb	r3, [r7, #18]
 801b0a8:	4619      	mov	r1, r3
 801b0aa:	6878      	ldr	r0, [r7, #4]
 801b0ac:	f7fd fd02 	bl	8018ab4 <pbuf_remove_header>
 801b0b0:	e04e      	b.n	801b150 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d105      	bne.n	801b0c6 <tcp_input+0xca>
 801b0ba:	4b70      	ldr	r3, [pc, #448]	; (801b27c <tcp_input+0x280>)
 801b0bc:	22c2      	movs	r2, #194	; 0xc2
 801b0be:	4977      	ldr	r1, [pc, #476]	; (801b29c <tcp_input+0x2a0>)
 801b0c0:	4870      	ldr	r0, [pc, #448]	; (801b284 <tcp_input+0x288>)
 801b0c2:	f007 fe99 	bl	8022df8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801b0c6:	2114      	movs	r1, #20
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	f7fd fcf3 	bl	8018ab4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	895a      	ldrh	r2, [r3, #10]
 801b0d2:	4b71      	ldr	r3, [pc, #452]	; (801b298 <tcp_input+0x29c>)
 801b0d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b0d6:	4b6e      	ldr	r3, [pc, #440]	; (801b290 <tcp_input+0x294>)
 801b0d8:	881a      	ldrh	r2, [r3, #0]
 801b0da:	4b6f      	ldr	r3, [pc, #444]	; (801b298 <tcp_input+0x29c>)
 801b0dc:	881b      	ldrh	r3, [r3, #0]
 801b0de:	1ad3      	subs	r3, r2, r3
 801b0e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801b0e2:	4b6d      	ldr	r3, [pc, #436]	; (801b298 <tcp_input+0x29c>)
 801b0e4:	881b      	ldrh	r3, [r3, #0]
 801b0e6:	4619      	mov	r1, r3
 801b0e8:	6878      	ldr	r0, [r7, #4]
 801b0ea:	f7fd fce3 	bl	8018ab4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	895b      	ldrh	r3, [r3, #10]
 801b0f4:	8a3a      	ldrh	r2, [r7, #16]
 801b0f6:	429a      	cmp	r2, r3
 801b0f8:	f200 836e 	bhi.w	801b7d8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	685b      	ldr	r3, [r3, #4]
 801b102:	4a64      	ldr	r2, [pc, #400]	; (801b294 <tcp_input+0x298>)
 801b104:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	8a3a      	ldrh	r2, [r7, #16]
 801b10c:	4611      	mov	r1, r2
 801b10e:	4618      	mov	r0, r3
 801b110:	f7fd fcd0 	bl	8018ab4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	891a      	ldrh	r2, [r3, #8]
 801b118:	8a3b      	ldrh	r3, [r7, #16]
 801b11a:	1ad3      	subs	r3, r2, r3
 801b11c:	b29a      	uxth	r2, r3
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	895b      	ldrh	r3, [r3, #10]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d005      	beq.n	801b136 <tcp_input+0x13a>
 801b12a:	4b54      	ldr	r3, [pc, #336]	; (801b27c <tcp_input+0x280>)
 801b12c:	22df      	movs	r2, #223	; 0xdf
 801b12e:	495c      	ldr	r1, [pc, #368]	; (801b2a0 <tcp_input+0x2a4>)
 801b130:	4854      	ldr	r0, [pc, #336]	; (801b284 <tcp_input+0x288>)
 801b132:	f007 fe61 	bl	8022df8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	891a      	ldrh	r2, [r3, #8]
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	891b      	ldrh	r3, [r3, #8]
 801b140:	429a      	cmp	r2, r3
 801b142:	d005      	beq.n	801b150 <tcp_input+0x154>
 801b144:	4b4d      	ldr	r3, [pc, #308]	; (801b27c <tcp_input+0x280>)
 801b146:	22e0      	movs	r2, #224	; 0xe0
 801b148:	4956      	ldr	r1, [pc, #344]	; (801b2a4 <tcp_input+0x2a8>)
 801b14a:	484e      	ldr	r0, [pc, #312]	; (801b284 <tcp_input+0x288>)
 801b14c:	f007 fe54 	bl	8022df8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b150:	4b4d      	ldr	r3, [pc, #308]	; (801b288 <tcp_input+0x28c>)
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	881b      	ldrh	r3, [r3, #0]
 801b156:	b29b      	uxth	r3, r3
 801b158:	4a4b      	ldr	r2, [pc, #300]	; (801b288 <tcp_input+0x28c>)
 801b15a:	6814      	ldr	r4, [r2, #0]
 801b15c:	4618      	mov	r0, r3
 801b15e:	f7fc f885 	bl	801726c <lwip_htons>
 801b162:	4603      	mov	r3, r0
 801b164:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b166:	4b48      	ldr	r3, [pc, #288]	; (801b288 <tcp_input+0x28c>)
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	885b      	ldrh	r3, [r3, #2]
 801b16c:	b29b      	uxth	r3, r3
 801b16e:	4a46      	ldr	r2, [pc, #280]	; (801b288 <tcp_input+0x28c>)
 801b170:	6814      	ldr	r4, [r2, #0]
 801b172:	4618      	mov	r0, r3
 801b174:	f7fc f87a 	bl	801726c <lwip_htons>
 801b178:	4603      	mov	r3, r0
 801b17a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b17c:	4b42      	ldr	r3, [pc, #264]	; (801b288 <tcp_input+0x28c>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	685b      	ldr	r3, [r3, #4]
 801b182:	4a41      	ldr	r2, [pc, #260]	; (801b288 <tcp_input+0x28c>)
 801b184:	6814      	ldr	r4, [r2, #0]
 801b186:	4618      	mov	r0, r3
 801b188:	f7fc f885 	bl	8017296 <lwip_htonl>
 801b18c:	4603      	mov	r3, r0
 801b18e:	6063      	str	r3, [r4, #4]
 801b190:	6863      	ldr	r3, [r4, #4]
 801b192:	4a45      	ldr	r2, [pc, #276]	; (801b2a8 <tcp_input+0x2ac>)
 801b194:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b196:	4b3c      	ldr	r3, [pc, #240]	; (801b288 <tcp_input+0x28c>)
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	689b      	ldr	r3, [r3, #8]
 801b19c:	4a3a      	ldr	r2, [pc, #232]	; (801b288 <tcp_input+0x28c>)
 801b19e:	6814      	ldr	r4, [r2, #0]
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7fc f878 	bl	8017296 <lwip_htonl>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	60a3      	str	r3, [r4, #8]
 801b1aa:	68a3      	ldr	r3, [r4, #8]
 801b1ac:	4a3f      	ldr	r2, [pc, #252]	; (801b2ac <tcp_input+0x2b0>)
 801b1ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b1b0:	4b35      	ldr	r3, [pc, #212]	; (801b288 <tcp_input+0x28c>)
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	89db      	ldrh	r3, [r3, #14]
 801b1b6:	b29b      	uxth	r3, r3
 801b1b8:	4a33      	ldr	r2, [pc, #204]	; (801b288 <tcp_input+0x28c>)
 801b1ba:	6814      	ldr	r4, [r2, #0]
 801b1bc:	4618      	mov	r0, r3
 801b1be:	f7fc f855 	bl	801726c <lwip_htons>
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b1c6:	4b30      	ldr	r3, [pc, #192]	; (801b288 <tcp_input+0x28c>)
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	899b      	ldrh	r3, [r3, #12]
 801b1cc:	b29b      	uxth	r3, r3
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f7fc f84c 	bl	801726c <lwip_htons>
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	b2db      	uxtb	r3, r3
 801b1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b1dc:	b2da      	uxtb	r2, r3
 801b1de:	4b34      	ldr	r3, [pc, #208]	; (801b2b0 <tcp_input+0x2b4>)
 801b1e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	891a      	ldrh	r2, [r3, #8]
 801b1e6:	4b33      	ldr	r3, [pc, #204]	; (801b2b4 <tcp_input+0x2b8>)
 801b1e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801b1ea:	4b31      	ldr	r3, [pc, #196]	; (801b2b0 <tcp_input+0x2b4>)
 801b1ec:	781b      	ldrb	r3, [r3, #0]
 801b1ee:	f003 0303 	and.w	r3, r3, #3
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d00c      	beq.n	801b210 <tcp_input+0x214>
    tcplen++;
 801b1f6:	4b2f      	ldr	r3, [pc, #188]	; (801b2b4 <tcp_input+0x2b8>)
 801b1f8:	881b      	ldrh	r3, [r3, #0]
 801b1fa:	3301      	adds	r3, #1
 801b1fc:	b29a      	uxth	r2, r3
 801b1fe:	4b2d      	ldr	r3, [pc, #180]	; (801b2b4 <tcp_input+0x2b8>)
 801b200:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	891a      	ldrh	r2, [r3, #8]
 801b206:	4b2b      	ldr	r3, [pc, #172]	; (801b2b4 <tcp_input+0x2b8>)
 801b208:	881b      	ldrh	r3, [r3, #0]
 801b20a:	429a      	cmp	r2, r3
 801b20c:	f200 82e6 	bhi.w	801b7dc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801b210:	2300      	movs	r3, #0
 801b212:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b214:	4b28      	ldr	r3, [pc, #160]	; (801b2b8 <tcp_input+0x2bc>)
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	61fb      	str	r3, [r7, #28]
 801b21a:	e09d      	b.n	801b358 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801b21c:	69fb      	ldr	r3, [r7, #28]
 801b21e:	7d1b      	ldrb	r3, [r3, #20]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d105      	bne.n	801b230 <tcp_input+0x234>
 801b224:	4b15      	ldr	r3, [pc, #84]	; (801b27c <tcp_input+0x280>)
 801b226:	22fb      	movs	r2, #251	; 0xfb
 801b228:	4924      	ldr	r1, [pc, #144]	; (801b2bc <tcp_input+0x2c0>)
 801b22a:	4816      	ldr	r0, [pc, #88]	; (801b284 <tcp_input+0x288>)
 801b22c:	f007 fde4 	bl	8022df8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b230:	69fb      	ldr	r3, [r7, #28]
 801b232:	7d1b      	ldrb	r3, [r3, #20]
 801b234:	2b0a      	cmp	r3, #10
 801b236:	d105      	bne.n	801b244 <tcp_input+0x248>
 801b238:	4b10      	ldr	r3, [pc, #64]	; (801b27c <tcp_input+0x280>)
 801b23a:	22fc      	movs	r2, #252	; 0xfc
 801b23c:	4920      	ldr	r1, [pc, #128]	; (801b2c0 <tcp_input+0x2c4>)
 801b23e:	4811      	ldr	r0, [pc, #68]	; (801b284 <tcp_input+0x288>)
 801b240:	f007 fdda 	bl	8022df8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b244:	69fb      	ldr	r3, [r7, #28]
 801b246:	7d1b      	ldrb	r3, [r3, #20]
 801b248:	2b01      	cmp	r3, #1
 801b24a:	d105      	bne.n	801b258 <tcp_input+0x25c>
 801b24c:	4b0b      	ldr	r3, [pc, #44]	; (801b27c <tcp_input+0x280>)
 801b24e:	22fd      	movs	r2, #253	; 0xfd
 801b250:	491c      	ldr	r1, [pc, #112]	; (801b2c4 <tcp_input+0x2c8>)
 801b252:	480c      	ldr	r0, [pc, #48]	; (801b284 <tcp_input+0x288>)
 801b254:	f007 fdd0 	bl	8022df8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	7a1b      	ldrb	r3, [r3, #8]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d033      	beq.n	801b2c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b260:	69fb      	ldr	r3, [r7, #28]
 801b262:	7a1a      	ldrb	r2, [r3, #8]
 801b264:	4b09      	ldr	r3, [pc, #36]	; (801b28c <tcp_input+0x290>)
 801b266:	685b      	ldr	r3, [r3, #4]
 801b268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b26c:	3301      	adds	r3, #1
 801b26e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b270:	429a      	cmp	r2, r3
 801b272:	d029      	beq.n	801b2c8 <tcp_input+0x2cc>
      prev = pcb;
 801b274:	69fb      	ldr	r3, [r7, #28]
 801b276:	61bb      	str	r3, [r7, #24]
      continue;
 801b278:	e06b      	b.n	801b352 <tcp_input+0x356>
 801b27a:	bf00      	nop
 801b27c:	080260c0 	.word	0x080260c0
 801b280:	080260f4 	.word	0x080260f4
 801b284:	0802610c 	.word	0x0802610c
 801b288:	20061cbc 	.word	0x20061cbc
 801b28c:	2005eb94 	.word	0x2005eb94
 801b290:	20061cc0 	.word	0x20061cc0
 801b294:	20061cc4 	.word	0x20061cc4
 801b298:	20061cc2 	.word	0x20061cc2
 801b29c:	08026134 	.word	0x08026134
 801b2a0:	08026144 	.word	0x08026144
 801b2a4:	08026150 	.word	0x08026150
 801b2a8:	20061ccc 	.word	0x20061ccc
 801b2ac:	20061cd0 	.word	0x20061cd0
 801b2b0:	20061cd8 	.word	0x20061cd8
 801b2b4:	20061cd6 	.word	0x20061cd6
 801b2b8:	20061ca0 	.word	0x20061ca0
 801b2bc:	08026170 	.word	0x08026170
 801b2c0:	08026198 	.word	0x08026198
 801b2c4:	080261c4 	.word	0x080261c4
    }

    if (pcb->remote_port == tcphdr->src &&
 801b2c8:	69fb      	ldr	r3, [r7, #28]
 801b2ca:	8b1a      	ldrh	r2, [r3, #24]
 801b2cc:	4b72      	ldr	r3, [pc, #456]	; (801b498 <tcp_input+0x49c>)
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	881b      	ldrh	r3, [r3, #0]
 801b2d2:	b29b      	uxth	r3, r3
 801b2d4:	429a      	cmp	r2, r3
 801b2d6:	d13a      	bne.n	801b34e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b2d8:	69fb      	ldr	r3, [r7, #28]
 801b2da:	8ada      	ldrh	r2, [r3, #22]
 801b2dc:	4b6e      	ldr	r3, [pc, #440]	; (801b498 <tcp_input+0x49c>)
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	885b      	ldrh	r3, [r3, #2]
 801b2e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b2e4:	429a      	cmp	r2, r3
 801b2e6:	d132      	bne.n	801b34e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b2e8:	69fb      	ldr	r3, [r7, #28]
 801b2ea:	685a      	ldr	r2, [r3, #4]
 801b2ec:	4b6b      	ldr	r3, [pc, #428]	; (801b49c <tcp_input+0x4a0>)
 801b2ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d12c      	bne.n	801b34e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b2f4:	69fb      	ldr	r3, [r7, #28]
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	4b68      	ldr	r3, [pc, #416]	; (801b49c <tcp_input+0x4a0>)
 801b2fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	d126      	bne.n	801b34e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b300:	69fb      	ldr	r3, [r7, #28]
 801b302:	68db      	ldr	r3, [r3, #12]
 801b304:	69fa      	ldr	r2, [r7, #28]
 801b306:	429a      	cmp	r2, r3
 801b308:	d106      	bne.n	801b318 <tcp_input+0x31c>
 801b30a:	4b65      	ldr	r3, [pc, #404]	; (801b4a0 <tcp_input+0x4a4>)
 801b30c:	f240 120d 	movw	r2, #269	; 0x10d
 801b310:	4964      	ldr	r1, [pc, #400]	; (801b4a4 <tcp_input+0x4a8>)
 801b312:	4865      	ldr	r0, [pc, #404]	; (801b4a8 <tcp_input+0x4ac>)
 801b314:	f007 fd70 	bl	8022df8 <iprintf>
      if (prev != NULL) {
 801b318:	69bb      	ldr	r3, [r7, #24]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d00a      	beq.n	801b334 <tcp_input+0x338>
        prev->next = pcb->next;
 801b31e:	69fb      	ldr	r3, [r7, #28]
 801b320:	68da      	ldr	r2, [r3, #12]
 801b322:	69bb      	ldr	r3, [r7, #24]
 801b324:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b326:	4b61      	ldr	r3, [pc, #388]	; (801b4ac <tcp_input+0x4b0>)
 801b328:	681a      	ldr	r2, [r3, #0]
 801b32a:	69fb      	ldr	r3, [r7, #28]
 801b32c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b32e:	4a5f      	ldr	r2, [pc, #380]	; (801b4ac <tcp_input+0x4b0>)
 801b330:	69fb      	ldr	r3, [r7, #28]
 801b332:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b334:	69fb      	ldr	r3, [r7, #28]
 801b336:	68db      	ldr	r3, [r3, #12]
 801b338:	69fa      	ldr	r2, [r7, #28]
 801b33a:	429a      	cmp	r2, r3
 801b33c:	d111      	bne.n	801b362 <tcp_input+0x366>
 801b33e:	4b58      	ldr	r3, [pc, #352]	; (801b4a0 <tcp_input+0x4a4>)
 801b340:	f240 1215 	movw	r2, #277	; 0x115
 801b344:	495a      	ldr	r1, [pc, #360]	; (801b4b0 <tcp_input+0x4b4>)
 801b346:	4858      	ldr	r0, [pc, #352]	; (801b4a8 <tcp_input+0x4ac>)
 801b348:	f007 fd56 	bl	8022df8 <iprintf>
      break;
 801b34c:	e009      	b.n	801b362 <tcp_input+0x366>
    }
    prev = pcb;
 801b34e:	69fb      	ldr	r3, [r7, #28]
 801b350:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b352:	69fb      	ldr	r3, [r7, #28]
 801b354:	68db      	ldr	r3, [r3, #12]
 801b356:	61fb      	str	r3, [r7, #28]
 801b358:	69fb      	ldr	r3, [r7, #28]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	f47f af5e 	bne.w	801b21c <tcp_input+0x220>
 801b360:	e000      	b.n	801b364 <tcp_input+0x368>
      break;
 801b362:	bf00      	nop
  }

  if (pcb == NULL) {
 801b364:	69fb      	ldr	r3, [r7, #28]
 801b366:	2b00      	cmp	r3, #0
 801b368:	f040 80aa 	bne.w	801b4c0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b36c:	4b51      	ldr	r3, [pc, #324]	; (801b4b4 <tcp_input+0x4b8>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	61fb      	str	r3, [r7, #28]
 801b372:	e03f      	b.n	801b3f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b374:	69fb      	ldr	r3, [r7, #28]
 801b376:	7d1b      	ldrb	r3, [r3, #20]
 801b378:	2b0a      	cmp	r3, #10
 801b37a:	d006      	beq.n	801b38a <tcp_input+0x38e>
 801b37c:	4b48      	ldr	r3, [pc, #288]	; (801b4a0 <tcp_input+0x4a4>)
 801b37e:	f240 121f 	movw	r2, #287	; 0x11f
 801b382:	494d      	ldr	r1, [pc, #308]	; (801b4b8 <tcp_input+0x4bc>)
 801b384:	4848      	ldr	r0, [pc, #288]	; (801b4a8 <tcp_input+0x4ac>)
 801b386:	f007 fd37 	bl	8022df8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b38a:	69fb      	ldr	r3, [r7, #28]
 801b38c:	7a1b      	ldrb	r3, [r3, #8]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d009      	beq.n	801b3a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b392:	69fb      	ldr	r3, [r7, #28]
 801b394:	7a1a      	ldrb	r2, [r3, #8]
 801b396:	4b41      	ldr	r3, [pc, #260]	; (801b49c <tcp_input+0x4a0>)
 801b398:	685b      	ldr	r3, [r3, #4]
 801b39a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b39e:	3301      	adds	r3, #1
 801b3a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b3a2:	429a      	cmp	r2, r3
 801b3a4:	d122      	bne.n	801b3ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b3a6:	69fb      	ldr	r3, [r7, #28]
 801b3a8:	8b1a      	ldrh	r2, [r3, #24]
 801b3aa:	4b3b      	ldr	r3, [pc, #236]	; (801b498 <tcp_input+0x49c>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	881b      	ldrh	r3, [r3, #0]
 801b3b0:	b29b      	uxth	r3, r3
 801b3b2:	429a      	cmp	r2, r3
 801b3b4:	d11b      	bne.n	801b3ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b3b6:	69fb      	ldr	r3, [r7, #28]
 801b3b8:	8ada      	ldrh	r2, [r3, #22]
 801b3ba:	4b37      	ldr	r3, [pc, #220]	; (801b498 <tcp_input+0x49c>)
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	885b      	ldrh	r3, [r3, #2]
 801b3c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b3c2:	429a      	cmp	r2, r3
 801b3c4:	d113      	bne.n	801b3ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b3c6:	69fb      	ldr	r3, [r7, #28]
 801b3c8:	685a      	ldr	r2, [r3, #4]
 801b3ca:	4b34      	ldr	r3, [pc, #208]	; (801b49c <tcp_input+0x4a0>)
 801b3cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b3ce:	429a      	cmp	r2, r3
 801b3d0:	d10d      	bne.n	801b3ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b3d2:	69fb      	ldr	r3, [r7, #28]
 801b3d4:	681a      	ldr	r2, [r3, #0]
 801b3d6:	4b31      	ldr	r3, [pc, #196]	; (801b49c <tcp_input+0x4a0>)
 801b3d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d107      	bne.n	801b3ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b3de:	69f8      	ldr	r0, [r7, #28]
 801b3e0:	f000 fb56 	bl	801ba90 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b3e4:	6878      	ldr	r0, [r7, #4]
 801b3e6:	f7fd fbeb 	bl	8018bc0 <pbuf_free>
        return;
 801b3ea:	e1fd      	b.n	801b7e8 <tcp_input+0x7ec>
        continue;
 801b3ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b3ee:	69fb      	ldr	r3, [r7, #28]
 801b3f0:	68db      	ldr	r3, [r3, #12]
 801b3f2:	61fb      	str	r3, [r7, #28]
 801b3f4:	69fb      	ldr	r3, [r7, #28]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d1bc      	bne.n	801b374 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b3fe:	4b2f      	ldr	r3, [pc, #188]	; (801b4bc <tcp_input+0x4c0>)
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	617b      	str	r3, [r7, #20]
 801b404:	e02a      	b.n	801b45c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b406:	697b      	ldr	r3, [r7, #20]
 801b408:	7a1b      	ldrb	r3, [r3, #8]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d00c      	beq.n	801b428 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b40e:	697b      	ldr	r3, [r7, #20]
 801b410:	7a1a      	ldrb	r2, [r3, #8]
 801b412:	4b22      	ldr	r3, [pc, #136]	; (801b49c <tcp_input+0x4a0>)
 801b414:	685b      	ldr	r3, [r3, #4]
 801b416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b41a:	3301      	adds	r3, #1
 801b41c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b41e:	429a      	cmp	r2, r3
 801b420:	d002      	beq.n	801b428 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b422:	697b      	ldr	r3, [r7, #20]
 801b424:	61bb      	str	r3, [r7, #24]
        continue;
 801b426:	e016      	b.n	801b456 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b428:	697b      	ldr	r3, [r7, #20]
 801b42a:	8ada      	ldrh	r2, [r3, #22]
 801b42c:	4b1a      	ldr	r3, [pc, #104]	; (801b498 <tcp_input+0x49c>)
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	885b      	ldrh	r3, [r3, #2]
 801b432:	b29b      	uxth	r3, r3
 801b434:	429a      	cmp	r2, r3
 801b436:	d10c      	bne.n	801b452 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b438:	697b      	ldr	r3, [r7, #20]
 801b43a:	681a      	ldr	r2, [r3, #0]
 801b43c:	4b17      	ldr	r3, [pc, #92]	; (801b49c <tcp_input+0x4a0>)
 801b43e:	695b      	ldr	r3, [r3, #20]
 801b440:	429a      	cmp	r2, r3
 801b442:	d00f      	beq.n	801b464 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b444:	697b      	ldr	r3, [r7, #20]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d00d      	beq.n	801b466 <tcp_input+0x46a>
 801b44a:	697b      	ldr	r3, [r7, #20]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d009      	beq.n	801b466 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b452:	697b      	ldr	r3, [r7, #20]
 801b454:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	68db      	ldr	r3, [r3, #12]
 801b45a:	617b      	str	r3, [r7, #20]
 801b45c:	697b      	ldr	r3, [r7, #20]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d1d1      	bne.n	801b406 <tcp_input+0x40a>
 801b462:	e000      	b.n	801b466 <tcp_input+0x46a>
            break;
 801b464:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b466:	697b      	ldr	r3, [r7, #20]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d029      	beq.n	801b4c0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b46c:	69bb      	ldr	r3, [r7, #24]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d00a      	beq.n	801b488 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b472:	697b      	ldr	r3, [r7, #20]
 801b474:	68da      	ldr	r2, [r3, #12]
 801b476:	69bb      	ldr	r3, [r7, #24]
 801b478:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b47a:	4b10      	ldr	r3, [pc, #64]	; (801b4bc <tcp_input+0x4c0>)
 801b47c:	681a      	ldr	r2, [r3, #0]
 801b47e:	697b      	ldr	r3, [r7, #20]
 801b480:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b482:	4a0e      	ldr	r2, [pc, #56]	; (801b4bc <tcp_input+0x4c0>)
 801b484:	697b      	ldr	r3, [r7, #20]
 801b486:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b488:	6978      	ldr	r0, [r7, #20]
 801b48a:	f000 fa03 	bl	801b894 <tcp_listen_input>
      }
      pbuf_free(p);
 801b48e:	6878      	ldr	r0, [r7, #4]
 801b490:	f7fd fb96 	bl	8018bc0 <pbuf_free>
      return;
 801b494:	e1a8      	b.n	801b7e8 <tcp_input+0x7ec>
 801b496:	bf00      	nop
 801b498:	20061cbc 	.word	0x20061cbc
 801b49c:	2005eb94 	.word	0x2005eb94
 801b4a0:	080260c0 	.word	0x080260c0
 801b4a4:	080261ec 	.word	0x080261ec
 801b4a8:	0802610c 	.word	0x0802610c
 801b4ac:	20061ca0 	.word	0x20061ca0
 801b4b0:	08026218 	.word	0x08026218
 801b4b4:	20061ca4 	.word	0x20061ca4
 801b4b8:	08026244 	.word	0x08026244
 801b4bc:	20061c9c 	.word	0x20061c9c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b4c0:	69fb      	ldr	r3, [r7, #28]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	f000 8158 	beq.w	801b778 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b4c8:	4b95      	ldr	r3, [pc, #596]	; (801b720 <tcp_input+0x724>)
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	891a      	ldrh	r2, [r3, #8]
 801b4d2:	4b93      	ldr	r3, [pc, #588]	; (801b720 <tcp_input+0x724>)
 801b4d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b4d6:	4a92      	ldr	r2, [pc, #584]	; (801b720 <tcp_input+0x724>)
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b4dc:	4b91      	ldr	r3, [pc, #580]	; (801b724 <tcp_input+0x728>)
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	4a8f      	ldr	r2, [pc, #572]	; (801b720 <tcp_input+0x724>)
 801b4e2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b4e4:	4b90      	ldr	r3, [pc, #576]	; (801b728 <tcp_input+0x72c>)
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b4ea:	4b90      	ldr	r3, [pc, #576]	; (801b72c <tcp_input+0x730>)
 801b4ec:	2200      	movs	r2, #0
 801b4ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b4f0:	4b8f      	ldr	r3, [pc, #572]	; (801b730 <tcp_input+0x734>)
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b4f6:	4b8f      	ldr	r3, [pc, #572]	; (801b734 <tcp_input+0x738>)
 801b4f8:	781b      	ldrb	r3, [r3, #0]
 801b4fa:	f003 0308 	and.w	r3, r3, #8
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d006      	beq.n	801b510 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	7b5b      	ldrb	r3, [r3, #13]
 801b506:	f043 0301 	orr.w	r3, r3, #1
 801b50a:	b2da      	uxtb	r2, r3
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b510:	69fb      	ldr	r3, [r7, #28]
 801b512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b514:	2b00      	cmp	r3, #0
 801b516:	d017      	beq.n	801b548 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b518:	69f8      	ldr	r0, [r7, #28]
 801b51a:	f7ff f85b 	bl	801a5d4 <tcp_process_refused_data>
 801b51e:	4603      	mov	r3, r0
 801b520:	f113 0f0d 	cmn.w	r3, #13
 801b524:	d007      	beq.n	801b536 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b526:	69fb      	ldr	r3, [r7, #28]
 801b528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d00c      	beq.n	801b548 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b52e:	4b82      	ldr	r3, [pc, #520]	; (801b738 <tcp_input+0x73c>)
 801b530:	881b      	ldrh	r3, [r3, #0]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d008      	beq.n	801b548 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b536:	69fb      	ldr	r3, [r7, #28]
 801b538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	f040 80e3 	bne.w	801b706 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b540:	69f8      	ldr	r0, [r7, #28]
 801b542:	f003 fe05 	bl	801f150 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b546:	e0de      	b.n	801b706 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801b548:	4a7c      	ldr	r2, [pc, #496]	; (801b73c <tcp_input+0x740>)
 801b54a:	69fb      	ldr	r3, [r7, #28]
 801b54c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b54e:	69f8      	ldr	r0, [r7, #28]
 801b550:	f000 fb18 	bl	801bb84 <tcp_process>
 801b554:	4603      	mov	r3, r0
 801b556:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b55c:	f113 0f0d 	cmn.w	r3, #13
 801b560:	f000 80d3 	beq.w	801b70a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801b564:	4b71      	ldr	r3, [pc, #452]	; (801b72c <tcp_input+0x730>)
 801b566:	781b      	ldrb	r3, [r3, #0]
 801b568:	f003 0308 	and.w	r3, r3, #8
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d015      	beq.n	801b59c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b570:	69fb      	ldr	r3, [r7, #28]
 801b572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b576:	2b00      	cmp	r3, #0
 801b578:	d008      	beq.n	801b58c <tcp_input+0x590>
 801b57a:	69fb      	ldr	r3, [r7, #28]
 801b57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b580:	69fa      	ldr	r2, [r7, #28]
 801b582:	6912      	ldr	r2, [r2, #16]
 801b584:	f06f 010d 	mvn.w	r1, #13
 801b588:	4610      	mov	r0, r2
 801b58a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b58c:	69f9      	ldr	r1, [r7, #28]
 801b58e:	486c      	ldr	r0, [pc, #432]	; (801b740 <tcp_input+0x744>)
 801b590:	f7ff fbbc 	bl	801ad0c <tcp_pcb_remove>
        tcp_free(pcb);
 801b594:	69f8      	ldr	r0, [r7, #28]
 801b596:	f7fd fdbf 	bl	8019118 <tcp_free>
 801b59a:	e0da      	b.n	801b752 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801b59c:	2300      	movs	r3, #0
 801b59e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b5a0:	4b63      	ldr	r3, [pc, #396]	; (801b730 <tcp_input+0x734>)
 801b5a2:	881b      	ldrh	r3, [r3, #0]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d01d      	beq.n	801b5e4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b5a8:	4b61      	ldr	r3, [pc, #388]	; (801b730 <tcp_input+0x734>)
 801b5aa:	881b      	ldrh	r3, [r3, #0]
 801b5ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b5ae:	69fb      	ldr	r3, [r7, #28]
 801b5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d00a      	beq.n	801b5ce <tcp_input+0x5d2>
 801b5b8:	69fb      	ldr	r3, [r7, #28]
 801b5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b5be:	69fa      	ldr	r2, [r7, #28]
 801b5c0:	6910      	ldr	r0, [r2, #16]
 801b5c2:	89fa      	ldrh	r2, [r7, #14]
 801b5c4:	69f9      	ldr	r1, [r7, #28]
 801b5c6:	4798      	blx	r3
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	74fb      	strb	r3, [r7, #19]
 801b5cc:	e001      	b.n	801b5d2 <tcp_input+0x5d6>
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b5d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b5d6:	f113 0f0d 	cmn.w	r3, #13
 801b5da:	f000 8098 	beq.w	801b70e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b5de:	4b54      	ldr	r3, [pc, #336]	; (801b730 <tcp_input+0x734>)
 801b5e0:	2200      	movs	r2, #0
 801b5e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b5e4:	69f8      	ldr	r0, [r7, #28]
 801b5e6:	f000 f915 	bl	801b814 <tcp_input_delayed_close>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	f040 8090 	bne.w	801b712 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b5f2:	4b4d      	ldr	r3, [pc, #308]	; (801b728 <tcp_input+0x72c>)
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d041      	beq.n	801b67e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b5fa:	69fb      	ldr	r3, [r7, #28]
 801b5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d006      	beq.n	801b610 <tcp_input+0x614>
 801b602:	4b50      	ldr	r3, [pc, #320]	; (801b744 <tcp_input+0x748>)
 801b604:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b608:	494f      	ldr	r1, [pc, #316]	; (801b748 <tcp_input+0x74c>)
 801b60a:	4850      	ldr	r0, [pc, #320]	; (801b74c <tcp_input+0x750>)
 801b60c:	f007 fbf4 	bl	8022df8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b610:	69fb      	ldr	r3, [r7, #28]
 801b612:	8b5b      	ldrh	r3, [r3, #26]
 801b614:	f003 0310 	and.w	r3, r3, #16
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d008      	beq.n	801b62e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b61c:	4b42      	ldr	r3, [pc, #264]	; (801b728 <tcp_input+0x72c>)
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	4618      	mov	r0, r3
 801b622:	f7fd facd 	bl	8018bc0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b626:	69f8      	ldr	r0, [r7, #28]
 801b628:	f7fe f8ba 	bl	80197a0 <tcp_abort>
            goto aborted;
 801b62c:	e091      	b.n	801b752 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b62e:	69fb      	ldr	r3, [r7, #28]
 801b630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b634:	2b00      	cmp	r3, #0
 801b636:	d00c      	beq.n	801b652 <tcp_input+0x656>
 801b638:	69fb      	ldr	r3, [r7, #28]
 801b63a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b63e:	69fb      	ldr	r3, [r7, #28]
 801b640:	6918      	ldr	r0, [r3, #16]
 801b642:	4b39      	ldr	r3, [pc, #228]	; (801b728 <tcp_input+0x72c>)
 801b644:	681a      	ldr	r2, [r3, #0]
 801b646:	2300      	movs	r3, #0
 801b648:	69f9      	ldr	r1, [r7, #28]
 801b64a:	47a0      	blx	r4
 801b64c:	4603      	mov	r3, r0
 801b64e:	74fb      	strb	r3, [r7, #19]
 801b650:	e008      	b.n	801b664 <tcp_input+0x668>
 801b652:	4b35      	ldr	r3, [pc, #212]	; (801b728 <tcp_input+0x72c>)
 801b654:	681a      	ldr	r2, [r3, #0]
 801b656:	2300      	movs	r3, #0
 801b658:	69f9      	ldr	r1, [r7, #28]
 801b65a:	2000      	movs	r0, #0
 801b65c:	f7ff f890 	bl	801a780 <tcp_recv_null>
 801b660:	4603      	mov	r3, r0
 801b662:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b668:	f113 0f0d 	cmn.w	r3, #13
 801b66c:	d053      	beq.n	801b716 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b66e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d003      	beq.n	801b67e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b676:	4b2c      	ldr	r3, [pc, #176]	; (801b728 <tcp_input+0x72c>)
 801b678:	681a      	ldr	r2, [r3, #0]
 801b67a:	69fb      	ldr	r3, [r7, #28]
 801b67c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b67e:	4b2b      	ldr	r3, [pc, #172]	; (801b72c <tcp_input+0x730>)
 801b680:	781b      	ldrb	r3, [r3, #0]
 801b682:	f003 0320 	and.w	r3, r3, #32
 801b686:	2b00      	cmp	r3, #0
 801b688:	d030      	beq.n	801b6ec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801b68a:	69fb      	ldr	r3, [r7, #28]
 801b68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d009      	beq.n	801b6a6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b692:	69fb      	ldr	r3, [r7, #28]
 801b694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b696:	7b5a      	ldrb	r2, [r3, #13]
 801b698:	69fb      	ldr	r3, [r7, #28]
 801b69a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b69c:	f042 0220 	orr.w	r2, r2, #32
 801b6a0:	b2d2      	uxtb	r2, r2
 801b6a2:	735a      	strb	r2, [r3, #13]
 801b6a4:	e022      	b.n	801b6ec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b6a6:	69fb      	ldr	r3, [r7, #28]
 801b6a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b6aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b6ae:	d005      	beq.n	801b6bc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801b6b0:	69fb      	ldr	r3, [r7, #28]
 801b6b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b6b4:	3301      	adds	r3, #1
 801b6b6:	b29a      	uxth	r2, r3
 801b6b8:	69fb      	ldr	r3, [r7, #28]
 801b6ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b6bc:	69fb      	ldr	r3, [r7, #28]
 801b6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d00b      	beq.n	801b6de <tcp_input+0x6e2>
 801b6c6:	69fb      	ldr	r3, [r7, #28]
 801b6c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b6cc:	69fb      	ldr	r3, [r7, #28]
 801b6ce:	6918      	ldr	r0, [r3, #16]
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	69f9      	ldr	r1, [r7, #28]
 801b6d6:	47a0      	blx	r4
 801b6d8:	4603      	mov	r3, r0
 801b6da:	74fb      	strb	r3, [r7, #19]
 801b6dc:	e001      	b.n	801b6e2 <tcp_input+0x6e6>
 801b6de:	2300      	movs	r3, #0
 801b6e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b6e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b6e6:	f113 0f0d 	cmn.w	r3, #13
 801b6ea:	d016      	beq.n	801b71a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b6ec:	4b13      	ldr	r3, [pc, #76]	; (801b73c <tcp_input+0x740>)
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b6f2:	69f8      	ldr	r0, [r7, #28]
 801b6f4:	f000 f88e 	bl	801b814 <tcp_input_delayed_close>
 801b6f8:	4603      	mov	r3, r0
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d128      	bne.n	801b750 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b6fe:	69f8      	ldr	r0, [r7, #28]
 801b700:	f002 ff20 	bl	801e544 <tcp_output>
 801b704:	e025      	b.n	801b752 <tcp_input+0x756>
        goto aborted;
 801b706:	bf00      	nop
 801b708:	e023      	b.n	801b752 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b70a:	bf00      	nop
 801b70c:	e021      	b.n	801b752 <tcp_input+0x756>
              goto aborted;
 801b70e:	bf00      	nop
 801b710:	e01f      	b.n	801b752 <tcp_input+0x756>
          goto aborted;
 801b712:	bf00      	nop
 801b714:	e01d      	b.n	801b752 <tcp_input+0x756>
            goto aborted;
 801b716:	bf00      	nop
 801b718:	e01b      	b.n	801b752 <tcp_input+0x756>
              goto aborted;
 801b71a:	bf00      	nop
 801b71c:	e019      	b.n	801b752 <tcp_input+0x756>
 801b71e:	bf00      	nop
 801b720:	20061cac 	.word	0x20061cac
 801b724:	20061cbc 	.word	0x20061cbc
 801b728:	20061cdc 	.word	0x20061cdc
 801b72c:	20061cd9 	.word	0x20061cd9
 801b730:	20061cd4 	.word	0x20061cd4
 801b734:	20061cd8 	.word	0x20061cd8
 801b738:	20061cd6 	.word	0x20061cd6
 801b73c:	20061ce0 	.word	0x20061ce0
 801b740:	20061ca0 	.word	0x20061ca0
 801b744:	080260c0 	.word	0x080260c0
 801b748:	08026274 	.word	0x08026274
 801b74c:	0802610c 	.word	0x0802610c
          goto aborted;
 801b750:	bf00      	nop
    tcp_input_pcb = NULL;
 801b752:	4b27      	ldr	r3, [pc, #156]	; (801b7f0 <tcp_input+0x7f4>)
 801b754:	2200      	movs	r2, #0
 801b756:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b758:	4b26      	ldr	r3, [pc, #152]	; (801b7f4 <tcp_input+0x7f8>)
 801b75a:	2200      	movs	r2, #0
 801b75c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b75e:	4b26      	ldr	r3, [pc, #152]	; (801b7f8 <tcp_input+0x7fc>)
 801b760:	685b      	ldr	r3, [r3, #4]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d03f      	beq.n	801b7e6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801b766:	4b24      	ldr	r3, [pc, #144]	; (801b7f8 <tcp_input+0x7fc>)
 801b768:	685b      	ldr	r3, [r3, #4]
 801b76a:	4618      	mov	r0, r3
 801b76c:	f7fd fa28 	bl	8018bc0 <pbuf_free>
      inseg.p = NULL;
 801b770:	4b21      	ldr	r3, [pc, #132]	; (801b7f8 <tcp_input+0x7fc>)
 801b772:	2200      	movs	r2, #0
 801b774:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b776:	e036      	b.n	801b7e6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b778:	4b20      	ldr	r3, [pc, #128]	; (801b7fc <tcp_input+0x800>)
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	899b      	ldrh	r3, [r3, #12]
 801b77e:	b29b      	uxth	r3, r3
 801b780:	4618      	mov	r0, r3
 801b782:	f7fb fd73 	bl	801726c <lwip_htons>
 801b786:	4603      	mov	r3, r0
 801b788:	b2db      	uxtb	r3, r3
 801b78a:	f003 0304 	and.w	r3, r3, #4
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d118      	bne.n	801b7c4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b792:	4b1b      	ldr	r3, [pc, #108]	; (801b800 <tcp_input+0x804>)
 801b794:	6819      	ldr	r1, [r3, #0]
 801b796:	4b1b      	ldr	r3, [pc, #108]	; (801b804 <tcp_input+0x808>)
 801b798:	881b      	ldrh	r3, [r3, #0]
 801b79a:	461a      	mov	r2, r3
 801b79c:	4b1a      	ldr	r3, [pc, #104]	; (801b808 <tcp_input+0x80c>)
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b7a2:	4b16      	ldr	r3, [pc, #88]	; (801b7fc <tcp_input+0x800>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b7a6:	885b      	ldrh	r3, [r3, #2]
 801b7a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b7aa:	4a14      	ldr	r2, [pc, #80]	; (801b7fc <tcp_input+0x800>)
 801b7ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b7ae:	8812      	ldrh	r2, [r2, #0]
 801b7b0:	b292      	uxth	r2, r2
 801b7b2:	9202      	str	r2, [sp, #8]
 801b7b4:	9301      	str	r3, [sp, #4]
 801b7b6:	4b15      	ldr	r3, [pc, #84]	; (801b80c <tcp_input+0x810>)
 801b7b8:	9300      	str	r3, [sp, #0]
 801b7ba:	4b15      	ldr	r3, [pc, #84]	; (801b810 <tcp_input+0x814>)
 801b7bc:	4602      	mov	r2, r0
 801b7be:	2000      	movs	r0, #0
 801b7c0:	f003 fc74 	bl	801f0ac <tcp_rst>
    pbuf_free(p);
 801b7c4:	6878      	ldr	r0, [r7, #4]
 801b7c6:	f7fd f9fb 	bl	8018bc0 <pbuf_free>
  return;
 801b7ca:	e00c      	b.n	801b7e6 <tcp_input+0x7ea>
    goto dropped;
 801b7cc:	bf00      	nop
 801b7ce:	e006      	b.n	801b7de <tcp_input+0x7e2>
    goto dropped;
 801b7d0:	bf00      	nop
 801b7d2:	e004      	b.n	801b7de <tcp_input+0x7e2>
    goto dropped;
 801b7d4:	bf00      	nop
 801b7d6:	e002      	b.n	801b7de <tcp_input+0x7e2>
      goto dropped;
 801b7d8:	bf00      	nop
 801b7da:	e000      	b.n	801b7de <tcp_input+0x7e2>
      goto dropped;
 801b7dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801b7de:	6878      	ldr	r0, [r7, #4]
 801b7e0:	f7fd f9ee 	bl	8018bc0 <pbuf_free>
 801b7e4:	e000      	b.n	801b7e8 <tcp_input+0x7ec>
  return;
 801b7e6:	bf00      	nop
}
 801b7e8:	3724      	adds	r7, #36	; 0x24
 801b7ea:	46bd      	mov	sp, r7
 801b7ec:	bd90      	pop	{r4, r7, pc}
 801b7ee:	bf00      	nop
 801b7f0:	20061ce0 	.word	0x20061ce0
 801b7f4:	20061cdc 	.word	0x20061cdc
 801b7f8:	20061cac 	.word	0x20061cac
 801b7fc:	20061cbc 	.word	0x20061cbc
 801b800:	20061cd0 	.word	0x20061cd0
 801b804:	20061cd6 	.word	0x20061cd6
 801b808:	20061ccc 	.word	0x20061ccc
 801b80c:	2005eba4 	.word	0x2005eba4
 801b810:	2005eba8 	.word	0x2005eba8

0801b814 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b082      	sub	sp, #8
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d106      	bne.n	801b830 <tcp_input_delayed_close+0x1c>
 801b822:	4b17      	ldr	r3, [pc, #92]	; (801b880 <tcp_input_delayed_close+0x6c>)
 801b824:	f240 225a 	movw	r2, #602	; 0x25a
 801b828:	4916      	ldr	r1, [pc, #88]	; (801b884 <tcp_input_delayed_close+0x70>)
 801b82a:	4817      	ldr	r0, [pc, #92]	; (801b888 <tcp_input_delayed_close+0x74>)
 801b82c:	f007 fae4 	bl	8022df8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801b830:	4b16      	ldr	r3, [pc, #88]	; (801b88c <tcp_input_delayed_close+0x78>)
 801b832:	781b      	ldrb	r3, [r3, #0]
 801b834:	f003 0310 	and.w	r3, r3, #16
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d01c      	beq.n	801b876 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	8b5b      	ldrh	r3, [r3, #26]
 801b840:	f003 0310 	and.w	r3, r3, #16
 801b844:	2b00      	cmp	r3, #0
 801b846:	d10d      	bne.n	801b864 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d008      	beq.n	801b864 <tcp_input_delayed_close+0x50>
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b858:	687a      	ldr	r2, [r7, #4]
 801b85a:	6912      	ldr	r2, [r2, #16]
 801b85c:	f06f 010e 	mvn.w	r1, #14
 801b860:	4610      	mov	r0, r2
 801b862:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b864:	6879      	ldr	r1, [r7, #4]
 801b866:	480a      	ldr	r0, [pc, #40]	; (801b890 <tcp_input_delayed_close+0x7c>)
 801b868:	f7ff fa50 	bl	801ad0c <tcp_pcb_remove>
    tcp_free(pcb);
 801b86c:	6878      	ldr	r0, [r7, #4]
 801b86e:	f7fd fc53 	bl	8019118 <tcp_free>
    return 1;
 801b872:	2301      	movs	r3, #1
 801b874:	e000      	b.n	801b878 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801b876:	2300      	movs	r3, #0
}
 801b878:	4618      	mov	r0, r3
 801b87a:	3708      	adds	r7, #8
 801b87c:	46bd      	mov	sp, r7
 801b87e:	bd80      	pop	{r7, pc}
 801b880:	080260c0 	.word	0x080260c0
 801b884:	08026290 	.word	0x08026290
 801b888:	0802610c 	.word	0x0802610c
 801b88c:	20061cd9 	.word	0x20061cd9
 801b890:	20061ca0 	.word	0x20061ca0

0801b894 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801b894:	b590      	push	{r4, r7, lr}
 801b896:	b08b      	sub	sp, #44	; 0x2c
 801b898:	af04      	add	r7, sp, #16
 801b89a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801b89c:	4b6f      	ldr	r3, [pc, #444]	; (801ba5c <tcp_listen_input+0x1c8>)
 801b89e:	781b      	ldrb	r3, [r3, #0]
 801b8a0:	f003 0304 	and.w	r3, r3, #4
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	f040 80d2 	bne.w	801ba4e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d106      	bne.n	801b8be <tcp_listen_input+0x2a>
 801b8b0:	4b6b      	ldr	r3, [pc, #428]	; (801ba60 <tcp_listen_input+0x1cc>)
 801b8b2:	f240 2281 	movw	r2, #641	; 0x281
 801b8b6:	496b      	ldr	r1, [pc, #428]	; (801ba64 <tcp_listen_input+0x1d0>)
 801b8b8:	486b      	ldr	r0, [pc, #428]	; (801ba68 <tcp_listen_input+0x1d4>)
 801b8ba:	f007 fa9d 	bl	8022df8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801b8be:	4b67      	ldr	r3, [pc, #412]	; (801ba5c <tcp_listen_input+0x1c8>)
 801b8c0:	781b      	ldrb	r3, [r3, #0]
 801b8c2:	f003 0310 	and.w	r3, r3, #16
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d019      	beq.n	801b8fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b8ca:	4b68      	ldr	r3, [pc, #416]	; (801ba6c <tcp_listen_input+0x1d8>)
 801b8cc:	6819      	ldr	r1, [r3, #0]
 801b8ce:	4b68      	ldr	r3, [pc, #416]	; (801ba70 <tcp_listen_input+0x1dc>)
 801b8d0:	881b      	ldrh	r3, [r3, #0]
 801b8d2:	461a      	mov	r2, r3
 801b8d4:	4b67      	ldr	r3, [pc, #412]	; (801ba74 <tcp_listen_input+0x1e0>)
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b8da:	4b67      	ldr	r3, [pc, #412]	; (801ba78 <tcp_listen_input+0x1e4>)
 801b8dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b8de:	885b      	ldrh	r3, [r3, #2]
 801b8e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b8e2:	4a65      	ldr	r2, [pc, #404]	; (801ba78 <tcp_listen_input+0x1e4>)
 801b8e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b8e6:	8812      	ldrh	r2, [r2, #0]
 801b8e8:	b292      	uxth	r2, r2
 801b8ea:	9202      	str	r2, [sp, #8]
 801b8ec:	9301      	str	r3, [sp, #4]
 801b8ee:	4b63      	ldr	r3, [pc, #396]	; (801ba7c <tcp_listen_input+0x1e8>)
 801b8f0:	9300      	str	r3, [sp, #0]
 801b8f2:	4b63      	ldr	r3, [pc, #396]	; (801ba80 <tcp_listen_input+0x1ec>)
 801b8f4:	4602      	mov	r2, r0
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f003 fbd8 	bl	801f0ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801b8fc:	e0a9      	b.n	801ba52 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801b8fe:	4b57      	ldr	r3, [pc, #348]	; (801ba5c <tcp_listen_input+0x1c8>)
 801b900:	781b      	ldrb	r3, [r3, #0]
 801b902:	f003 0302 	and.w	r3, r3, #2
 801b906:	2b00      	cmp	r3, #0
 801b908:	f000 80a3 	beq.w	801ba52 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	7d5b      	ldrb	r3, [r3, #21]
 801b910:	4618      	mov	r0, r3
 801b912:	f7ff f859 	bl	801a9c8 <tcp_alloc>
 801b916:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801b918:	697b      	ldr	r3, [r7, #20]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d111      	bne.n	801b942 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	699b      	ldr	r3, [r3, #24]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d00a      	beq.n	801b93c <tcp_listen_input+0xa8>
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	699b      	ldr	r3, [r3, #24]
 801b92a:	687a      	ldr	r2, [r7, #4]
 801b92c:	6910      	ldr	r0, [r2, #16]
 801b92e:	f04f 32ff 	mov.w	r2, #4294967295
 801b932:	2100      	movs	r1, #0
 801b934:	4798      	blx	r3
 801b936:	4603      	mov	r3, r0
 801b938:	73bb      	strb	r3, [r7, #14]
      return;
 801b93a:	e08b      	b.n	801ba54 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b93c:	23f0      	movs	r3, #240	; 0xf0
 801b93e:	73bb      	strb	r3, [r7, #14]
      return;
 801b940:	e088      	b.n	801ba54 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b942:	4b50      	ldr	r3, [pc, #320]	; (801ba84 <tcp_listen_input+0x1f0>)
 801b944:	695a      	ldr	r2, [r3, #20]
 801b946:	697b      	ldr	r3, [r7, #20]
 801b948:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b94a:	4b4e      	ldr	r3, [pc, #312]	; (801ba84 <tcp_listen_input+0x1f0>)
 801b94c:	691a      	ldr	r2, [r3, #16]
 801b94e:	697b      	ldr	r3, [r7, #20]
 801b950:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	8ada      	ldrh	r2, [r3, #22]
 801b956:	697b      	ldr	r3, [r7, #20]
 801b958:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801b95a:	4b47      	ldr	r3, [pc, #284]	; (801ba78 <tcp_listen_input+0x1e4>)
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	881b      	ldrh	r3, [r3, #0]
 801b960:	b29a      	uxth	r2, r3
 801b962:	697b      	ldr	r3, [r7, #20]
 801b964:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	2203      	movs	r2, #3
 801b96a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801b96c:	4b41      	ldr	r3, [pc, #260]	; (801ba74 <tcp_listen_input+0x1e0>)
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	1c5a      	adds	r2, r3, #1
 801b972:	697b      	ldr	r3, [r7, #20]
 801b974:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b976:	697b      	ldr	r3, [r7, #20]
 801b978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b97a:	697b      	ldr	r3, [r7, #20]
 801b97c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801b97e:	6978      	ldr	r0, [r7, #20]
 801b980:	f7ff fa58 	bl	801ae34 <tcp_next_iss>
 801b984:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801b986:	697b      	ldr	r3, [r7, #20]
 801b988:	693a      	ldr	r2, [r7, #16]
 801b98a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801b98c:	697b      	ldr	r3, [r7, #20]
 801b98e:	693a      	ldr	r2, [r7, #16]
 801b990:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801b992:	697b      	ldr	r3, [r7, #20]
 801b994:	693a      	ldr	r2, [r7, #16]
 801b996:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801b998:	697b      	ldr	r3, [r7, #20]
 801b99a:	693a      	ldr	r2, [r7, #16]
 801b99c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b99e:	4b35      	ldr	r3, [pc, #212]	; (801ba74 <tcp_listen_input+0x1e0>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	1e5a      	subs	r2, r3, #1
 801b9a4:	697b      	ldr	r3, [r7, #20]
 801b9a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	691a      	ldr	r2, [r3, #16]
 801b9ac:	697b      	ldr	r3, [r7, #20]
 801b9ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801b9b0:	697b      	ldr	r3, [r7, #20]
 801b9b2:	687a      	ldr	r2, [r7, #4]
 801b9b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	7a5b      	ldrb	r3, [r3, #9]
 801b9ba:	f003 030c 	and.w	r3, r3, #12
 801b9be:	b2da      	uxtb	r2, r3
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	7a1a      	ldrb	r2, [r3, #8]
 801b9c8:	697b      	ldr	r3, [r7, #20]
 801b9ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801b9cc:	4b2e      	ldr	r3, [pc, #184]	; (801ba88 <tcp_listen_input+0x1f4>)
 801b9ce:	681a      	ldr	r2, [r3, #0]
 801b9d0:	697b      	ldr	r3, [r7, #20]
 801b9d2:	60da      	str	r2, [r3, #12]
 801b9d4:	4a2c      	ldr	r2, [pc, #176]	; (801ba88 <tcp_listen_input+0x1f4>)
 801b9d6:	697b      	ldr	r3, [r7, #20]
 801b9d8:	6013      	str	r3, [r2, #0]
 801b9da:	f003 fd29 	bl	801f430 <tcp_timer_needed>
 801b9de:	4b2b      	ldr	r3, [pc, #172]	; (801ba8c <tcp_listen_input+0x1f8>)
 801b9e0:	2201      	movs	r2, #1
 801b9e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b9e4:	6978      	ldr	r0, [r7, #20]
 801b9e6:	f001 fd8f 	bl	801d508 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b9ea:	4b23      	ldr	r3, [pc, #140]	; (801ba78 <tcp_listen_input+0x1e4>)
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	89db      	ldrh	r3, [r3, #14]
 801b9f0:	b29a      	uxth	r2, r3
 801b9f2:	697b      	ldr	r3, [r7, #20]
 801b9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b9f8:	697b      	ldr	r3, [r7, #20]
 801b9fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b9fe:	697b      	ldr	r3, [r7, #20]
 801ba00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ba04:	697b      	ldr	r3, [r7, #20]
 801ba06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801ba08:	697b      	ldr	r3, [r7, #20]
 801ba0a:	3304      	adds	r3, #4
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	f005 faf7 	bl	8021000 <ip4_route>
 801ba12:	4601      	mov	r1, r0
 801ba14:	697b      	ldr	r3, [r7, #20]
 801ba16:	3304      	adds	r3, #4
 801ba18:	461a      	mov	r2, r3
 801ba1a:	4620      	mov	r0, r4
 801ba1c:	f7ff fa30 	bl	801ae80 <tcp_eff_send_mss_netif>
 801ba20:	4603      	mov	r3, r0
 801ba22:	461a      	mov	r2, r3
 801ba24:	697b      	ldr	r3, [r7, #20]
 801ba26:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801ba28:	2112      	movs	r1, #18
 801ba2a:	6978      	ldr	r0, [r7, #20]
 801ba2c:	f002 fc9c 	bl	801e368 <tcp_enqueue_flags>
 801ba30:	4603      	mov	r3, r0
 801ba32:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801ba34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d004      	beq.n	801ba46 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801ba3c:	2100      	movs	r1, #0
 801ba3e:	6978      	ldr	r0, [r7, #20]
 801ba40:	f7fd fdf0 	bl	8019624 <tcp_abandon>
      return;
 801ba44:	e006      	b.n	801ba54 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801ba46:	6978      	ldr	r0, [r7, #20]
 801ba48:	f002 fd7c 	bl	801e544 <tcp_output>
  return;
 801ba4c:	e001      	b.n	801ba52 <tcp_listen_input+0x1be>
    return;
 801ba4e:	bf00      	nop
 801ba50:	e000      	b.n	801ba54 <tcp_listen_input+0x1c0>
  return;
 801ba52:	bf00      	nop
}
 801ba54:	371c      	adds	r7, #28
 801ba56:	46bd      	mov	sp, r7
 801ba58:	bd90      	pop	{r4, r7, pc}
 801ba5a:	bf00      	nop
 801ba5c:	20061cd8 	.word	0x20061cd8
 801ba60:	080260c0 	.word	0x080260c0
 801ba64:	080262b8 	.word	0x080262b8
 801ba68:	0802610c 	.word	0x0802610c
 801ba6c:	20061cd0 	.word	0x20061cd0
 801ba70:	20061cd6 	.word	0x20061cd6
 801ba74:	20061ccc 	.word	0x20061ccc
 801ba78:	20061cbc 	.word	0x20061cbc
 801ba7c:	2005eba4 	.word	0x2005eba4
 801ba80:	2005eba8 	.word	0x2005eba8
 801ba84:	2005eb94 	.word	0x2005eb94
 801ba88:	20061ca0 	.word	0x20061ca0
 801ba8c:	20061ca8 	.word	0x20061ca8

0801ba90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b086      	sub	sp, #24
 801ba94:	af04      	add	r7, sp, #16
 801ba96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801ba98:	4b2f      	ldr	r3, [pc, #188]	; (801bb58 <tcp_timewait_input+0xc8>)
 801ba9a:	781b      	ldrb	r3, [r3, #0]
 801ba9c:	f003 0304 	and.w	r3, r3, #4
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d153      	bne.n	801bb4c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d106      	bne.n	801bab8 <tcp_timewait_input+0x28>
 801baaa:	4b2c      	ldr	r3, [pc, #176]	; (801bb5c <tcp_timewait_input+0xcc>)
 801baac:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bab0:	492b      	ldr	r1, [pc, #172]	; (801bb60 <tcp_timewait_input+0xd0>)
 801bab2:	482c      	ldr	r0, [pc, #176]	; (801bb64 <tcp_timewait_input+0xd4>)
 801bab4:	f007 f9a0 	bl	8022df8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801bab8:	4b27      	ldr	r3, [pc, #156]	; (801bb58 <tcp_timewait_input+0xc8>)
 801baba:	781b      	ldrb	r3, [r3, #0]
 801babc:	f003 0302 	and.w	r3, r3, #2
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d02a      	beq.n	801bb1a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801bac4:	4b28      	ldr	r3, [pc, #160]	; (801bb68 <tcp_timewait_input+0xd8>)
 801bac6:	681a      	ldr	r2, [r3, #0]
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bacc:	1ad3      	subs	r3, r2, r3
 801bace:	2b00      	cmp	r3, #0
 801bad0:	db2d      	blt.n	801bb2e <tcp_timewait_input+0x9e>
 801bad2:	4b25      	ldr	r3, [pc, #148]	; (801bb68 <tcp_timewait_input+0xd8>)
 801bad4:	681a      	ldr	r2, [r3, #0]
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bada:	6879      	ldr	r1, [r7, #4]
 801badc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bade:	440b      	add	r3, r1
 801bae0:	1ad3      	subs	r3, r2, r3
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	dc23      	bgt.n	801bb2e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bae6:	4b21      	ldr	r3, [pc, #132]	; (801bb6c <tcp_timewait_input+0xdc>)
 801bae8:	6819      	ldr	r1, [r3, #0]
 801baea:	4b21      	ldr	r3, [pc, #132]	; (801bb70 <tcp_timewait_input+0xe0>)
 801baec:	881b      	ldrh	r3, [r3, #0]
 801baee:	461a      	mov	r2, r3
 801baf0:	4b1d      	ldr	r3, [pc, #116]	; (801bb68 <tcp_timewait_input+0xd8>)
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801baf6:	4b1f      	ldr	r3, [pc, #124]	; (801bb74 <tcp_timewait_input+0xe4>)
 801baf8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bafa:	885b      	ldrh	r3, [r3, #2]
 801bafc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bafe:	4a1d      	ldr	r2, [pc, #116]	; (801bb74 <tcp_timewait_input+0xe4>)
 801bb00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb02:	8812      	ldrh	r2, [r2, #0]
 801bb04:	b292      	uxth	r2, r2
 801bb06:	9202      	str	r2, [sp, #8]
 801bb08:	9301      	str	r3, [sp, #4]
 801bb0a:	4b1b      	ldr	r3, [pc, #108]	; (801bb78 <tcp_timewait_input+0xe8>)
 801bb0c:	9300      	str	r3, [sp, #0]
 801bb0e:	4b1b      	ldr	r3, [pc, #108]	; (801bb7c <tcp_timewait_input+0xec>)
 801bb10:	4602      	mov	r2, r0
 801bb12:	6878      	ldr	r0, [r7, #4]
 801bb14:	f003 faca 	bl	801f0ac <tcp_rst>
      return;
 801bb18:	e01b      	b.n	801bb52 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801bb1a:	4b0f      	ldr	r3, [pc, #60]	; (801bb58 <tcp_timewait_input+0xc8>)
 801bb1c:	781b      	ldrb	r3, [r3, #0]
 801bb1e:	f003 0301 	and.w	r3, r3, #1
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d003      	beq.n	801bb2e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801bb26:	4b16      	ldr	r3, [pc, #88]	; (801bb80 <tcp_timewait_input+0xf0>)
 801bb28:	681a      	ldr	r2, [r3, #0]
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801bb2e:	4b10      	ldr	r3, [pc, #64]	; (801bb70 <tcp_timewait_input+0xe0>)
 801bb30:	881b      	ldrh	r3, [r3, #0]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d00c      	beq.n	801bb50 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	8b5b      	ldrh	r3, [r3, #26]
 801bb3a:	f043 0302 	orr.w	r3, r3, #2
 801bb3e:	b29a      	uxth	r2, r3
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bb44:	6878      	ldr	r0, [r7, #4]
 801bb46:	f002 fcfd 	bl	801e544 <tcp_output>
  }
  return;
 801bb4a:	e001      	b.n	801bb50 <tcp_timewait_input+0xc0>
    return;
 801bb4c:	bf00      	nop
 801bb4e:	e000      	b.n	801bb52 <tcp_timewait_input+0xc2>
  return;
 801bb50:	bf00      	nop
}
 801bb52:	3708      	adds	r7, #8
 801bb54:	46bd      	mov	sp, r7
 801bb56:	bd80      	pop	{r7, pc}
 801bb58:	20061cd8 	.word	0x20061cd8
 801bb5c:	080260c0 	.word	0x080260c0
 801bb60:	080262d8 	.word	0x080262d8
 801bb64:	0802610c 	.word	0x0802610c
 801bb68:	20061ccc 	.word	0x20061ccc
 801bb6c:	20061cd0 	.word	0x20061cd0
 801bb70:	20061cd6 	.word	0x20061cd6
 801bb74:	20061cbc 	.word	0x20061cbc
 801bb78:	2005eba4 	.word	0x2005eba4
 801bb7c:	2005eba8 	.word	0x2005eba8
 801bb80:	20061c94 	.word	0x20061c94

0801bb84 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801bb84:	b590      	push	{r4, r7, lr}
 801bb86:	b08d      	sub	sp, #52	; 0x34
 801bb88:	af04      	add	r7, sp, #16
 801bb8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801bb90:	2300      	movs	r3, #0
 801bb92:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d106      	bne.n	801bba8 <tcp_process+0x24>
 801bb9a:	4b9d      	ldr	r3, [pc, #628]	; (801be10 <tcp_process+0x28c>)
 801bb9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801bba0:	499c      	ldr	r1, [pc, #624]	; (801be14 <tcp_process+0x290>)
 801bba2:	489d      	ldr	r0, [pc, #628]	; (801be18 <tcp_process+0x294>)
 801bba4:	f007 f928 	bl	8022df8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801bba8:	4b9c      	ldr	r3, [pc, #624]	; (801be1c <tcp_process+0x298>)
 801bbaa:	781b      	ldrb	r3, [r3, #0]
 801bbac:	f003 0304 	and.w	r3, r3, #4
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d04e      	beq.n	801bc52 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	7d1b      	ldrb	r3, [r3, #20]
 801bbb8:	2b02      	cmp	r3, #2
 801bbba:	d108      	bne.n	801bbce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bbc0:	4b97      	ldr	r3, [pc, #604]	; (801be20 <tcp_process+0x29c>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	429a      	cmp	r2, r3
 801bbc6:	d123      	bne.n	801bc10 <tcp_process+0x8c>
        acceptable = 1;
 801bbc8:	2301      	movs	r3, #1
 801bbca:	76fb      	strb	r3, [r7, #27]
 801bbcc:	e020      	b.n	801bc10 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bbd2:	4b94      	ldr	r3, [pc, #592]	; (801be24 <tcp_process+0x2a0>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	429a      	cmp	r2, r3
 801bbd8:	d102      	bne.n	801bbe0 <tcp_process+0x5c>
        acceptable = 1;
 801bbda:	2301      	movs	r3, #1
 801bbdc:	76fb      	strb	r3, [r7, #27]
 801bbde:	e017      	b.n	801bc10 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bbe0:	4b90      	ldr	r3, [pc, #576]	; (801be24 <tcp_process+0x2a0>)
 801bbe2:	681a      	ldr	r2, [r3, #0]
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbe8:	1ad3      	subs	r3, r2, r3
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	db10      	blt.n	801bc10 <tcp_process+0x8c>
 801bbee:	4b8d      	ldr	r3, [pc, #564]	; (801be24 <tcp_process+0x2a0>)
 801bbf0:	681a      	ldr	r2, [r3, #0]
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbf6:	6879      	ldr	r1, [r7, #4]
 801bbf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bbfa:	440b      	add	r3, r1
 801bbfc:	1ad3      	subs	r3, r2, r3
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	dc06      	bgt.n	801bc10 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	8b5b      	ldrh	r3, [r3, #26]
 801bc06:	f043 0302 	orr.w	r3, r3, #2
 801bc0a:	b29a      	uxth	r2, r3
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801bc10:	7efb      	ldrb	r3, [r7, #27]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d01b      	beq.n	801bc4e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	7d1b      	ldrb	r3, [r3, #20]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d106      	bne.n	801bc2c <tcp_process+0xa8>
 801bc1e:	4b7c      	ldr	r3, [pc, #496]	; (801be10 <tcp_process+0x28c>)
 801bc20:	f44f 724e 	mov.w	r2, #824	; 0x338
 801bc24:	4980      	ldr	r1, [pc, #512]	; (801be28 <tcp_process+0x2a4>)
 801bc26:	487c      	ldr	r0, [pc, #496]	; (801be18 <tcp_process+0x294>)
 801bc28:	f007 f8e6 	bl	8022df8 <iprintf>
      recv_flags |= TF_RESET;
 801bc2c:	4b7f      	ldr	r3, [pc, #508]	; (801be2c <tcp_process+0x2a8>)
 801bc2e:	781b      	ldrb	r3, [r3, #0]
 801bc30:	f043 0308 	orr.w	r3, r3, #8
 801bc34:	b2da      	uxtb	r2, r3
 801bc36:	4b7d      	ldr	r3, [pc, #500]	; (801be2c <tcp_process+0x2a8>)
 801bc38:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	8b5b      	ldrh	r3, [r3, #26]
 801bc3e:	f023 0301 	bic.w	r3, r3, #1
 801bc42:	b29a      	uxth	r2, r3
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801bc48:	f06f 030d 	mvn.w	r3, #13
 801bc4c:	e37a      	b.n	801c344 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801bc4e:	2300      	movs	r3, #0
 801bc50:	e378      	b.n	801c344 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801bc52:	4b72      	ldr	r3, [pc, #456]	; (801be1c <tcp_process+0x298>)
 801bc54:	781b      	ldrb	r3, [r3, #0]
 801bc56:	f003 0302 	and.w	r3, r3, #2
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d010      	beq.n	801bc80 <tcp_process+0xfc>
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	7d1b      	ldrb	r3, [r3, #20]
 801bc62:	2b02      	cmp	r3, #2
 801bc64:	d00c      	beq.n	801bc80 <tcp_process+0xfc>
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	7d1b      	ldrb	r3, [r3, #20]
 801bc6a:	2b03      	cmp	r3, #3
 801bc6c:	d008      	beq.n	801bc80 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	8b5b      	ldrh	r3, [r3, #26]
 801bc72:	f043 0302 	orr.w	r3, r3, #2
 801bc76:	b29a      	uxth	r2, r3
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	e361      	b.n	801c344 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	8b5b      	ldrh	r3, [r3, #26]
 801bc84:	f003 0310 	and.w	r3, r3, #16
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d103      	bne.n	801bc94 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801bc8c:	4b68      	ldr	r3, [pc, #416]	; (801be30 <tcp_process+0x2ac>)
 801bc8e:	681a      	ldr	r2, [r3, #0]
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	2200      	movs	r2, #0
 801bc98:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801bca4:	6878      	ldr	r0, [r7, #4]
 801bca6:	f001 fc2f 	bl	801d508 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	7d1b      	ldrb	r3, [r3, #20]
 801bcae:	3b02      	subs	r3, #2
 801bcb0:	2b07      	cmp	r3, #7
 801bcb2:	f200 8337 	bhi.w	801c324 <tcp_process+0x7a0>
 801bcb6:	a201      	add	r2, pc, #4	; (adr r2, 801bcbc <tcp_process+0x138>)
 801bcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcbc:	0801bcdd 	.word	0x0801bcdd
 801bcc0:	0801bf0d 	.word	0x0801bf0d
 801bcc4:	0801c085 	.word	0x0801c085
 801bcc8:	0801c0af 	.word	0x0801c0af
 801bccc:	0801c1d3 	.word	0x0801c1d3
 801bcd0:	0801c085 	.word	0x0801c085
 801bcd4:	0801c25f 	.word	0x0801c25f
 801bcd8:	0801c2ef 	.word	0x0801c2ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801bcdc:	4b4f      	ldr	r3, [pc, #316]	; (801be1c <tcp_process+0x298>)
 801bcde:	781b      	ldrb	r3, [r3, #0]
 801bce0:	f003 0310 	and.w	r3, r3, #16
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	f000 80e4 	beq.w	801beb2 <tcp_process+0x32e>
 801bcea:	4b4c      	ldr	r3, [pc, #304]	; (801be1c <tcp_process+0x298>)
 801bcec:	781b      	ldrb	r3, [r3, #0]
 801bcee:	f003 0302 	and.w	r3, r3, #2
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	f000 80dd 	beq.w	801beb2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcfc:	1c5a      	adds	r2, r3, #1
 801bcfe:	4b48      	ldr	r3, [pc, #288]	; (801be20 <tcp_process+0x29c>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	f040 80d5 	bne.w	801beb2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801bd08:	4b46      	ldr	r3, [pc, #280]	; (801be24 <tcp_process+0x2a0>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	1c5a      	adds	r2, r3, #1
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801bd1a:	4b41      	ldr	r3, [pc, #260]	; (801be20 <tcp_process+0x29c>)
 801bd1c:	681a      	ldr	r2, [r3, #0]
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801bd22:	4b44      	ldr	r3, [pc, #272]	; (801be34 <tcp_process+0x2b0>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	89db      	ldrh	r3, [r3, #14]
 801bd28:	b29a      	uxth	r2, r3
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801bd3c:	4b39      	ldr	r3, [pc, #228]	; (801be24 <tcp_process+0x2a0>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	1e5a      	subs	r2, r3, #1
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	2204      	movs	r2, #4
 801bd4a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	3304      	adds	r3, #4
 801bd54:	4618      	mov	r0, r3
 801bd56:	f005 f953 	bl	8021000 <ip4_route>
 801bd5a:	4601      	mov	r1, r0
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	3304      	adds	r3, #4
 801bd60:	461a      	mov	r2, r3
 801bd62:	4620      	mov	r0, r4
 801bd64:	f7ff f88c 	bl	801ae80 <tcp_eff_send_mss_netif>
 801bd68:	4603      	mov	r3, r0
 801bd6a:	461a      	mov	r2, r3
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd74:	009a      	lsls	r2, r3, #2
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd7a:	005b      	lsls	r3, r3, #1
 801bd7c:	f241 111c 	movw	r1, #4380	; 0x111c
 801bd80:	428b      	cmp	r3, r1
 801bd82:	bf38      	it	cc
 801bd84:	460b      	movcc	r3, r1
 801bd86:	429a      	cmp	r2, r3
 801bd88:	d204      	bcs.n	801bd94 <tcp_process+0x210>
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd8e:	009b      	lsls	r3, r3, #2
 801bd90:	b29b      	uxth	r3, r3
 801bd92:	e00d      	b.n	801bdb0 <tcp_process+0x22c>
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd98:	005b      	lsls	r3, r3, #1
 801bd9a:	f241 121c 	movw	r2, #4380	; 0x111c
 801bd9e:	4293      	cmp	r3, r2
 801bda0:	d904      	bls.n	801bdac <tcp_process+0x228>
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bda6:	005b      	lsls	r3, r3, #1
 801bda8:	b29b      	uxth	r3, r3
 801bdaa:	e001      	b.n	801bdb0 <tcp_process+0x22c>
 801bdac:	f241 131c 	movw	r3, #4380	; 0x111c
 801bdb0:	687a      	ldr	r2, [r7, #4]
 801bdb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d106      	bne.n	801bdce <tcp_process+0x24a>
 801bdc0:	4b13      	ldr	r3, [pc, #76]	; (801be10 <tcp_process+0x28c>)
 801bdc2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801bdc6:	491c      	ldr	r1, [pc, #112]	; (801be38 <tcp_process+0x2b4>)
 801bdc8:	4813      	ldr	r0, [pc, #76]	; (801be18 <tcp_process+0x294>)
 801bdca:	f007 f815 	bl	8022df8 <iprintf>
        --pcb->snd_queuelen;
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bdd4:	3b01      	subs	r3, #1
 801bdd6:	b29a      	uxth	r2, r3
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bde2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801bde4:	69fb      	ldr	r3, [r7, #28]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d12a      	bne.n	801be40 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bdee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801bdf0:	69fb      	ldr	r3, [r7, #28]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d106      	bne.n	801be04 <tcp_process+0x280>
 801bdf6:	4b06      	ldr	r3, [pc, #24]	; (801be10 <tcp_process+0x28c>)
 801bdf8:	f44f 725d 	mov.w	r2, #884	; 0x374
 801bdfc:	490f      	ldr	r1, [pc, #60]	; (801be3c <tcp_process+0x2b8>)
 801bdfe:	4806      	ldr	r0, [pc, #24]	; (801be18 <tcp_process+0x294>)
 801be00:	f006 fffa 	bl	8022df8 <iprintf>
          pcb->unsent = rseg->next;
 801be04:	69fb      	ldr	r3, [r7, #28]
 801be06:	681a      	ldr	r2, [r3, #0]
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	66da      	str	r2, [r3, #108]	; 0x6c
 801be0c:	e01c      	b.n	801be48 <tcp_process+0x2c4>
 801be0e:	bf00      	nop
 801be10:	080260c0 	.word	0x080260c0
 801be14:	080262f8 	.word	0x080262f8
 801be18:	0802610c 	.word	0x0802610c
 801be1c:	20061cd8 	.word	0x20061cd8
 801be20:	20061cd0 	.word	0x20061cd0
 801be24:	20061ccc 	.word	0x20061ccc
 801be28:	08026314 	.word	0x08026314
 801be2c:	20061cd9 	.word	0x20061cd9
 801be30:	20061c94 	.word	0x20061c94
 801be34:	20061cbc 	.word	0x20061cbc
 801be38:	08026334 	.word	0x08026334
 801be3c:	0802634c 	.word	0x0802634c
        } else {
          pcb->unacked = rseg->next;
 801be40:	69fb      	ldr	r3, [r7, #28]
 801be42:	681a      	ldr	r2, [r3, #0]
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801be48:	69f8      	ldr	r0, [r7, #28]
 801be4a:	f7fe fc54 	bl	801a6f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be52:	2b00      	cmp	r3, #0
 801be54:	d104      	bne.n	801be60 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be5c:	861a      	strh	r2, [r3, #48]	; 0x30
 801be5e:	e006      	b.n	801be6e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	2200      	movs	r2, #0
 801be64:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	2200      	movs	r2, #0
 801be6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be74:	2b00      	cmp	r3, #0
 801be76:	d00a      	beq.n	801be8e <tcp_process+0x30a>
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be7e:	687a      	ldr	r2, [r7, #4]
 801be80:	6910      	ldr	r0, [r2, #16]
 801be82:	2200      	movs	r2, #0
 801be84:	6879      	ldr	r1, [r7, #4]
 801be86:	4798      	blx	r3
 801be88:	4603      	mov	r3, r0
 801be8a:	76bb      	strb	r3, [r7, #26]
 801be8c:	e001      	b.n	801be92 <tcp_process+0x30e>
 801be8e:	2300      	movs	r3, #0
 801be90:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801be92:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801be96:	f113 0f0d 	cmn.w	r3, #13
 801be9a:	d102      	bne.n	801bea2 <tcp_process+0x31e>
          return ERR_ABRT;
 801be9c:	f06f 030c 	mvn.w	r3, #12
 801bea0:	e250      	b.n	801c344 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	8b5b      	ldrh	r3, [r3, #26]
 801bea6:	f043 0302 	orr.w	r3, r3, #2
 801beaa:	b29a      	uxth	r2, r3
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801beb0:	e23a      	b.n	801c328 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801beb2:	4b98      	ldr	r3, [pc, #608]	; (801c114 <tcp_process+0x590>)
 801beb4:	781b      	ldrb	r3, [r3, #0]
 801beb6:	f003 0310 	and.w	r3, r3, #16
 801beba:	2b00      	cmp	r3, #0
 801bebc:	f000 8234 	beq.w	801c328 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bec0:	4b95      	ldr	r3, [pc, #596]	; (801c118 <tcp_process+0x594>)
 801bec2:	6819      	ldr	r1, [r3, #0]
 801bec4:	4b95      	ldr	r3, [pc, #596]	; (801c11c <tcp_process+0x598>)
 801bec6:	881b      	ldrh	r3, [r3, #0]
 801bec8:	461a      	mov	r2, r3
 801beca:	4b95      	ldr	r3, [pc, #596]	; (801c120 <tcp_process+0x59c>)
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bed0:	4b94      	ldr	r3, [pc, #592]	; (801c124 <tcp_process+0x5a0>)
 801bed2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bed4:	885b      	ldrh	r3, [r3, #2]
 801bed6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bed8:	4a92      	ldr	r2, [pc, #584]	; (801c124 <tcp_process+0x5a0>)
 801beda:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bedc:	8812      	ldrh	r2, [r2, #0]
 801bede:	b292      	uxth	r2, r2
 801bee0:	9202      	str	r2, [sp, #8]
 801bee2:	9301      	str	r3, [sp, #4]
 801bee4:	4b90      	ldr	r3, [pc, #576]	; (801c128 <tcp_process+0x5a4>)
 801bee6:	9300      	str	r3, [sp, #0]
 801bee8:	4b90      	ldr	r3, [pc, #576]	; (801c12c <tcp_process+0x5a8>)
 801beea:	4602      	mov	r2, r0
 801beec:	6878      	ldr	r0, [r7, #4]
 801beee:	f003 f8dd 	bl	801f0ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bef8:	2b05      	cmp	r3, #5
 801befa:	f200 8215 	bhi.w	801c328 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	2200      	movs	r2, #0
 801bf02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801bf04:	6878      	ldr	r0, [r7, #4]
 801bf06:	f002 fea9 	bl	801ec5c <tcp_rexmit_rto>
      break;
 801bf0a:	e20d      	b.n	801c328 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801bf0c:	4b81      	ldr	r3, [pc, #516]	; (801c114 <tcp_process+0x590>)
 801bf0e:	781b      	ldrb	r3, [r3, #0]
 801bf10:	f003 0310 	and.w	r3, r3, #16
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	f000 80a1 	beq.w	801c05c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bf1a:	4b7f      	ldr	r3, [pc, #508]	; (801c118 <tcp_process+0x594>)
 801bf1c:	681a      	ldr	r2, [r3, #0]
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf22:	1ad3      	subs	r3, r2, r3
 801bf24:	3b01      	subs	r3, #1
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	db7e      	blt.n	801c028 <tcp_process+0x4a4>
 801bf2a:	4b7b      	ldr	r3, [pc, #492]	; (801c118 <tcp_process+0x594>)
 801bf2c:	681a      	ldr	r2, [r3, #0]
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bf32:	1ad3      	subs	r3, r2, r3
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	dc77      	bgt.n	801c028 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	2204      	movs	r2, #4
 801bf3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d102      	bne.n	801bf4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801bf46:	23fa      	movs	r3, #250	; 0xfa
 801bf48:	76bb      	strb	r3, [r7, #26]
 801bf4a:	e01d      	b.n	801bf88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bf50:	699b      	ldr	r3, [r3, #24]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d106      	bne.n	801bf64 <tcp_process+0x3e0>
 801bf56:	4b76      	ldr	r3, [pc, #472]	; (801c130 <tcp_process+0x5ac>)
 801bf58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801bf5c:	4975      	ldr	r1, [pc, #468]	; (801c134 <tcp_process+0x5b0>)
 801bf5e:	4876      	ldr	r0, [pc, #472]	; (801c138 <tcp_process+0x5b4>)
 801bf60:	f006 ff4a 	bl	8022df8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bf68:	699b      	ldr	r3, [r3, #24]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d00a      	beq.n	801bf84 <tcp_process+0x400>
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bf72:	699b      	ldr	r3, [r3, #24]
 801bf74:	687a      	ldr	r2, [r7, #4]
 801bf76:	6910      	ldr	r0, [r2, #16]
 801bf78:	2200      	movs	r2, #0
 801bf7a:	6879      	ldr	r1, [r7, #4]
 801bf7c:	4798      	blx	r3
 801bf7e:	4603      	mov	r3, r0
 801bf80:	76bb      	strb	r3, [r7, #26]
 801bf82:	e001      	b.n	801bf88 <tcp_process+0x404>
 801bf84:	23f0      	movs	r3, #240	; 0xf0
 801bf86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801bf88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d00a      	beq.n	801bfa6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801bf90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bf94:	f113 0f0d 	cmn.w	r3, #13
 801bf98:	d002      	beq.n	801bfa0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801bf9a:	6878      	ldr	r0, [r7, #4]
 801bf9c:	f7fd fc00 	bl	80197a0 <tcp_abort>
            }
            return ERR_ABRT;
 801bfa0:	f06f 030c 	mvn.w	r3, #12
 801bfa4:	e1ce      	b.n	801c344 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801bfa6:	6878      	ldr	r0, [r7, #4]
 801bfa8:	f000 fae0 	bl	801c56c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801bfac:	4b63      	ldr	r3, [pc, #396]	; (801c13c <tcp_process+0x5b8>)
 801bfae:	881b      	ldrh	r3, [r3, #0]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d005      	beq.n	801bfc0 <tcp_process+0x43c>
            recv_acked--;
 801bfb4:	4b61      	ldr	r3, [pc, #388]	; (801c13c <tcp_process+0x5b8>)
 801bfb6:	881b      	ldrh	r3, [r3, #0]
 801bfb8:	3b01      	subs	r3, #1
 801bfba:	b29a      	uxth	r2, r3
 801bfbc:	4b5f      	ldr	r3, [pc, #380]	; (801c13c <tcp_process+0x5b8>)
 801bfbe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfc4:	009a      	lsls	r2, r3, #2
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfca:	005b      	lsls	r3, r3, #1
 801bfcc:	f241 111c 	movw	r1, #4380	; 0x111c
 801bfd0:	428b      	cmp	r3, r1
 801bfd2:	bf38      	it	cc
 801bfd4:	460b      	movcc	r3, r1
 801bfd6:	429a      	cmp	r2, r3
 801bfd8:	d204      	bcs.n	801bfe4 <tcp_process+0x460>
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfde:	009b      	lsls	r3, r3, #2
 801bfe0:	b29b      	uxth	r3, r3
 801bfe2:	e00d      	b.n	801c000 <tcp_process+0x47c>
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfe8:	005b      	lsls	r3, r3, #1
 801bfea:	f241 121c 	movw	r2, #4380	; 0x111c
 801bfee:	4293      	cmp	r3, r2
 801bff0:	d904      	bls.n	801bffc <tcp_process+0x478>
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bff6:	005b      	lsls	r3, r3, #1
 801bff8:	b29b      	uxth	r3, r3
 801bffa:	e001      	b.n	801c000 <tcp_process+0x47c>
 801bffc:	f241 131c 	movw	r3, #4380	; 0x111c
 801c000:	687a      	ldr	r2, [r7, #4]
 801c002:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801c006:	4b4e      	ldr	r3, [pc, #312]	; (801c140 <tcp_process+0x5bc>)
 801c008:	781b      	ldrb	r3, [r3, #0]
 801c00a:	f003 0320 	and.w	r3, r3, #32
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d037      	beq.n	801c082 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	8b5b      	ldrh	r3, [r3, #26]
 801c016:	f043 0302 	orr.w	r3, r3, #2
 801c01a:	b29a      	uxth	r2, r3
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	2207      	movs	r2, #7
 801c024:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801c026:	e02c      	b.n	801c082 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c028:	4b3b      	ldr	r3, [pc, #236]	; (801c118 <tcp_process+0x594>)
 801c02a:	6819      	ldr	r1, [r3, #0]
 801c02c:	4b3b      	ldr	r3, [pc, #236]	; (801c11c <tcp_process+0x598>)
 801c02e:	881b      	ldrh	r3, [r3, #0]
 801c030:	461a      	mov	r2, r3
 801c032:	4b3b      	ldr	r3, [pc, #236]	; (801c120 <tcp_process+0x59c>)
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c038:	4b3a      	ldr	r3, [pc, #232]	; (801c124 <tcp_process+0x5a0>)
 801c03a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c03c:	885b      	ldrh	r3, [r3, #2]
 801c03e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c040:	4a38      	ldr	r2, [pc, #224]	; (801c124 <tcp_process+0x5a0>)
 801c042:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c044:	8812      	ldrh	r2, [r2, #0]
 801c046:	b292      	uxth	r2, r2
 801c048:	9202      	str	r2, [sp, #8]
 801c04a:	9301      	str	r3, [sp, #4]
 801c04c:	4b36      	ldr	r3, [pc, #216]	; (801c128 <tcp_process+0x5a4>)
 801c04e:	9300      	str	r3, [sp, #0]
 801c050:	4b36      	ldr	r3, [pc, #216]	; (801c12c <tcp_process+0x5a8>)
 801c052:	4602      	mov	r2, r0
 801c054:	6878      	ldr	r0, [r7, #4]
 801c056:	f003 f829 	bl	801f0ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801c05a:	e167      	b.n	801c32c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c05c:	4b2d      	ldr	r3, [pc, #180]	; (801c114 <tcp_process+0x590>)
 801c05e:	781b      	ldrb	r3, [r3, #0]
 801c060:	f003 0302 	and.w	r3, r3, #2
 801c064:	2b00      	cmp	r3, #0
 801c066:	f000 8161 	beq.w	801c32c <tcp_process+0x7a8>
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c06e:	1e5a      	subs	r2, r3, #1
 801c070:	4b2b      	ldr	r3, [pc, #172]	; (801c120 <tcp_process+0x59c>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	429a      	cmp	r2, r3
 801c076:	f040 8159 	bne.w	801c32c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801c07a:	6878      	ldr	r0, [r7, #4]
 801c07c:	f002 fe10 	bl	801eca0 <tcp_rexmit>
      break;
 801c080:	e154      	b.n	801c32c <tcp_process+0x7a8>
 801c082:	e153      	b.n	801c32c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801c084:	6878      	ldr	r0, [r7, #4]
 801c086:	f000 fa71 	bl	801c56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801c08a:	4b2d      	ldr	r3, [pc, #180]	; (801c140 <tcp_process+0x5bc>)
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	f003 0320 	and.w	r3, r3, #32
 801c092:	2b00      	cmp	r3, #0
 801c094:	f000 814c 	beq.w	801c330 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	8b5b      	ldrh	r3, [r3, #26]
 801c09c:	f043 0302 	orr.w	r3, r3, #2
 801c0a0:	b29a      	uxth	r2, r3
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	2207      	movs	r2, #7
 801c0aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c0ac:	e140      	b.n	801c330 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801c0ae:	6878      	ldr	r0, [r7, #4]
 801c0b0:	f000 fa5c 	bl	801c56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c0b4:	4b22      	ldr	r3, [pc, #136]	; (801c140 <tcp_process+0x5bc>)
 801c0b6:	781b      	ldrb	r3, [r3, #0]
 801c0b8:	f003 0320 	and.w	r3, r3, #32
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d071      	beq.n	801c1a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c0c0:	4b14      	ldr	r3, [pc, #80]	; (801c114 <tcp_process+0x590>)
 801c0c2:	781b      	ldrb	r3, [r3, #0]
 801c0c4:	f003 0310 	and.w	r3, r3, #16
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d060      	beq.n	801c18e <tcp_process+0x60a>
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c0d0:	4b11      	ldr	r3, [pc, #68]	; (801c118 <tcp_process+0x594>)
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	429a      	cmp	r2, r3
 801c0d6:	d15a      	bne.n	801c18e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d156      	bne.n	801c18e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	8b5b      	ldrh	r3, [r3, #26]
 801c0e4:	f043 0302 	orr.w	r3, r3, #2
 801c0e8:	b29a      	uxth	r2, r3
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801c0ee:	6878      	ldr	r0, [r7, #4]
 801c0f0:	f7fe fdbc 	bl	801ac6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c0f4:	4b13      	ldr	r3, [pc, #76]	; (801c144 <tcp_process+0x5c0>)
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	687a      	ldr	r2, [r7, #4]
 801c0fa:	429a      	cmp	r2, r3
 801c0fc:	d105      	bne.n	801c10a <tcp_process+0x586>
 801c0fe:	4b11      	ldr	r3, [pc, #68]	; (801c144 <tcp_process+0x5c0>)
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	68db      	ldr	r3, [r3, #12]
 801c104:	4a0f      	ldr	r2, [pc, #60]	; (801c144 <tcp_process+0x5c0>)
 801c106:	6013      	str	r3, [r2, #0]
 801c108:	e02e      	b.n	801c168 <tcp_process+0x5e4>
 801c10a:	4b0e      	ldr	r3, [pc, #56]	; (801c144 <tcp_process+0x5c0>)
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	617b      	str	r3, [r7, #20]
 801c110:	e027      	b.n	801c162 <tcp_process+0x5de>
 801c112:	bf00      	nop
 801c114:	20061cd8 	.word	0x20061cd8
 801c118:	20061cd0 	.word	0x20061cd0
 801c11c:	20061cd6 	.word	0x20061cd6
 801c120:	20061ccc 	.word	0x20061ccc
 801c124:	20061cbc 	.word	0x20061cbc
 801c128:	2005eba4 	.word	0x2005eba4
 801c12c:	2005eba8 	.word	0x2005eba8
 801c130:	080260c0 	.word	0x080260c0
 801c134:	08026360 	.word	0x08026360
 801c138:	0802610c 	.word	0x0802610c
 801c13c:	20061cd4 	.word	0x20061cd4
 801c140:	20061cd9 	.word	0x20061cd9
 801c144:	20061ca0 	.word	0x20061ca0
 801c148:	697b      	ldr	r3, [r7, #20]
 801c14a:	68db      	ldr	r3, [r3, #12]
 801c14c:	687a      	ldr	r2, [r7, #4]
 801c14e:	429a      	cmp	r2, r3
 801c150:	d104      	bne.n	801c15c <tcp_process+0x5d8>
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	68da      	ldr	r2, [r3, #12]
 801c156:	697b      	ldr	r3, [r7, #20]
 801c158:	60da      	str	r2, [r3, #12]
 801c15a:	e005      	b.n	801c168 <tcp_process+0x5e4>
 801c15c:	697b      	ldr	r3, [r7, #20]
 801c15e:	68db      	ldr	r3, [r3, #12]
 801c160:	617b      	str	r3, [r7, #20]
 801c162:	697b      	ldr	r3, [r7, #20]
 801c164:	2b00      	cmp	r3, #0
 801c166:	d1ef      	bne.n	801c148 <tcp_process+0x5c4>
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	2200      	movs	r2, #0
 801c16c:	60da      	str	r2, [r3, #12]
 801c16e:	4b77      	ldr	r3, [pc, #476]	; (801c34c <tcp_process+0x7c8>)
 801c170:	2201      	movs	r2, #1
 801c172:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	220a      	movs	r2, #10
 801c178:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c17a:	4b75      	ldr	r3, [pc, #468]	; (801c350 <tcp_process+0x7cc>)
 801c17c:	681a      	ldr	r2, [r3, #0]
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	60da      	str	r2, [r3, #12]
 801c182:	4a73      	ldr	r2, [pc, #460]	; (801c350 <tcp_process+0x7cc>)
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	6013      	str	r3, [r2, #0]
 801c188:	f003 f952 	bl	801f430 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c18c:	e0d2      	b.n	801c334 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	8b5b      	ldrh	r3, [r3, #26]
 801c192:	f043 0302 	orr.w	r3, r3, #2
 801c196:	b29a      	uxth	r2, r3
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	2208      	movs	r2, #8
 801c1a0:	751a      	strb	r2, [r3, #20]
      break;
 801c1a2:	e0c7      	b.n	801c334 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c1a4:	4b6b      	ldr	r3, [pc, #428]	; (801c354 <tcp_process+0x7d0>)
 801c1a6:	781b      	ldrb	r3, [r3, #0]
 801c1a8:	f003 0310 	and.w	r3, r3, #16
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	f000 80c1 	beq.w	801c334 <tcp_process+0x7b0>
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c1b6:	4b68      	ldr	r3, [pc, #416]	; (801c358 <tcp_process+0x7d4>)
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	f040 80ba 	bne.w	801c334 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	f040 80b5 	bne.w	801c334 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	2206      	movs	r2, #6
 801c1ce:	751a      	strb	r2, [r3, #20]
      break;
 801c1d0:	e0b0      	b.n	801c334 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801c1d2:	6878      	ldr	r0, [r7, #4]
 801c1d4:	f000 f9ca 	bl	801c56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c1d8:	4b60      	ldr	r3, [pc, #384]	; (801c35c <tcp_process+0x7d8>)
 801c1da:	781b      	ldrb	r3, [r3, #0]
 801c1dc:	f003 0320 	and.w	r3, r3, #32
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	f000 80a9 	beq.w	801c338 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	8b5b      	ldrh	r3, [r3, #26]
 801c1ea:	f043 0302 	orr.w	r3, r3, #2
 801c1ee:	b29a      	uxth	r2, r3
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801c1f4:	6878      	ldr	r0, [r7, #4]
 801c1f6:	f7fe fd39 	bl	801ac6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c1fa:	4b59      	ldr	r3, [pc, #356]	; (801c360 <tcp_process+0x7dc>)
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	687a      	ldr	r2, [r7, #4]
 801c200:	429a      	cmp	r2, r3
 801c202:	d105      	bne.n	801c210 <tcp_process+0x68c>
 801c204:	4b56      	ldr	r3, [pc, #344]	; (801c360 <tcp_process+0x7dc>)
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	68db      	ldr	r3, [r3, #12]
 801c20a:	4a55      	ldr	r2, [pc, #340]	; (801c360 <tcp_process+0x7dc>)
 801c20c:	6013      	str	r3, [r2, #0]
 801c20e:	e013      	b.n	801c238 <tcp_process+0x6b4>
 801c210:	4b53      	ldr	r3, [pc, #332]	; (801c360 <tcp_process+0x7dc>)
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	613b      	str	r3, [r7, #16]
 801c216:	e00c      	b.n	801c232 <tcp_process+0x6ae>
 801c218:	693b      	ldr	r3, [r7, #16]
 801c21a:	68db      	ldr	r3, [r3, #12]
 801c21c:	687a      	ldr	r2, [r7, #4]
 801c21e:	429a      	cmp	r2, r3
 801c220:	d104      	bne.n	801c22c <tcp_process+0x6a8>
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	68da      	ldr	r2, [r3, #12]
 801c226:	693b      	ldr	r3, [r7, #16]
 801c228:	60da      	str	r2, [r3, #12]
 801c22a:	e005      	b.n	801c238 <tcp_process+0x6b4>
 801c22c:	693b      	ldr	r3, [r7, #16]
 801c22e:	68db      	ldr	r3, [r3, #12]
 801c230:	613b      	str	r3, [r7, #16]
 801c232:	693b      	ldr	r3, [r7, #16]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d1ef      	bne.n	801c218 <tcp_process+0x694>
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	2200      	movs	r2, #0
 801c23c:	60da      	str	r2, [r3, #12]
 801c23e:	4b43      	ldr	r3, [pc, #268]	; (801c34c <tcp_process+0x7c8>)
 801c240:	2201      	movs	r2, #1
 801c242:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	220a      	movs	r2, #10
 801c248:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c24a:	4b41      	ldr	r3, [pc, #260]	; (801c350 <tcp_process+0x7cc>)
 801c24c:	681a      	ldr	r2, [r3, #0]
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	60da      	str	r2, [r3, #12]
 801c252:	4a3f      	ldr	r2, [pc, #252]	; (801c350 <tcp_process+0x7cc>)
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	6013      	str	r3, [r2, #0]
 801c258:	f003 f8ea 	bl	801f430 <tcp_timer_needed>
      }
      break;
 801c25c:	e06c      	b.n	801c338 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	f000 f984 	bl	801c56c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c264:	4b3b      	ldr	r3, [pc, #236]	; (801c354 <tcp_process+0x7d0>)
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	f003 0310 	and.w	r3, r3, #16
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d065      	beq.n	801c33c <tcp_process+0x7b8>
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c274:	4b38      	ldr	r3, [pc, #224]	; (801c358 <tcp_process+0x7d4>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	429a      	cmp	r2, r3
 801c27a:	d15f      	bne.n	801c33c <tcp_process+0x7b8>
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c280:	2b00      	cmp	r3, #0
 801c282:	d15b      	bne.n	801c33c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801c284:	6878      	ldr	r0, [r7, #4]
 801c286:	f7fe fcf1 	bl	801ac6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c28a:	4b35      	ldr	r3, [pc, #212]	; (801c360 <tcp_process+0x7dc>)
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	687a      	ldr	r2, [r7, #4]
 801c290:	429a      	cmp	r2, r3
 801c292:	d105      	bne.n	801c2a0 <tcp_process+0x71c>
 801c294:	4b32      	ldr	r3, [pc, #200]	; (801c360 <tcp_process+0x7dc>)
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	68db      	ldr	r3, [r3, #12]
 801c29a:	4a31      	ldr	r2, [pc, #196]	; (801c360 <tcp_process+0x7dc>)
 801c29c:	6013      	str	r3, [r2, #0]
 801c29e:	e013      	b.n	801c2c8 <tcp_process+0x744>
 801c2a0:	4b2f      	ldr	r3, [pc, #188]	; (801c360 <tcp_process+0x7dc>)
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	60fb      	str	r3, [r7, #12]
 801c2a6:	e00c      	b.n	801c2c2 <tcp_process+0x73e>
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	68db      	ldr	r3, [r3, #12]
 801c2ac:	687a      	ldr	r2, [r7, #4]
 801c2ae:	429a      	cmp	r2, r3
 801c2b0:	d104      	bne.n	801c2bc <tcp_process+0x738>
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	68da      	ldr	r2, [r3, #12]
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	60da      	str	r2, [r3, #12]
 801c2ba:	e005      	b.n	801c2c8 <tcp_process+0x744>
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	68db      	ldr	r3, [r3, #12]
 801c2c0:	60fb      	str	r3, [r7, #12]
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d1ef      	bne.n	801c2a8 <tcp_process+0x724>
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	60da      	str	r2, [r3, #12]
 801c2ce:	4b1f      	ldr	r3, [pc, #124]	; (801c34c <tcp_process+0x7c8>)
 801c2d0:	2201      	movs	r2, #1
 801c2d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	220a      	movs	r2, #10
 801c2d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c2da:	4b1d      	ldr	r3, [pc, #116]	; (801c350 <tcp_process+0x7cc>)
 801c2dc:	681a      	ldr	r2, [r3, #0]
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	60da      	str	r2, [r3, #12]
 801c2e2:	4a1b      	ldr	r2, [pc, #108]	; (801c350 <tcp_process+0x7cc>)
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	6013      	str	r3, [r2, #0]
 801c2e8:	f003 f8a2 	bl	801f430 <tcp_timer_needed>
      }
      break;
 801c2ec:	e026      	b.n	801c33c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c2ee:	6878      	ldr	r0, [r7, #4]
 801c2f0:	f000 f93c 	bl	801c56c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c2f4:	4b17      	ldr	r3, [pc, #92]	; (801c354 <tcp_process+0x7d0>)
 801c2f6:	781b      	ldrb	r3, [r3, #0]
 801c2f8:	f003 0310 	and.w	r3, r3, #16
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d01f      	beq.n	801c340 <tcp_process+0x7bc>
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c304:	4b14      	ldr	r3, [pc, #80]	; (801c358 <tcp_process+0x7d4>)
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	429a      	cmp	r2, r3
 801c30a:	d119      	bne.n	801c340 <tcp_process+0x7bc>
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c310:	2b00      	cmp	r3, #0
 801c312:	d115      	bne.n	801c340 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c314:	4b11      	ldr	r3, [pc, #68]	; (801c35c <tcp_process+0x7d8>)
 801c316:	781b      	ldrb	r3, [r3, #0]
 801c318:	f043 0310 	orr.w	r3, r3, #16
 801c31c:	b2da      	uxtb	r2, r3
 801c31e:	4b0f      	ldr	r3, [pc, #60]	; (801c35c <tcp_process+0x7d8>)
 801c320:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c322:	e00d      	b.n	801c340 <tcp_process+0x7bc>
    default:
      break;
 801c324:	bf00      	nop
 801c326:	e00c      	b.n	801c342 <tcp_process+0x7be>
      break;
 801c328:	bf00      	nop
 801c32a:	e00a      	b.n	801c342 <tcp_process+0x7be>
      break;
 801c32c:	bf00      	nop
 801c32e:	e008      	b.n	801c342 <tcp_process+0x7be>
      break;
 801c330:	bf00      	nop
 801c332:	e006      	b.n	801c342 <tcp_process+0x7be>
      break;
 801c334:	bf00      	nop
 801c336:	e004      	b.n	801c342 <tcp_process+0x7be>
      break;
 801c338:	bf00      	nop
 801c33a:	e002      	b.n	801c342 <tcp_process+0x7be>
      break;
 801c33c:	bf00      	nop
 801c33e:	e000      	b.n	801c342 <tcp_process+0x7be>
      break;
 801c340:	bf00      	nop
  }
  return ERR_OK;
 801c342:	2300      	movs	r3, #0
}
 801c344:	4618      	mov	r0, r3
 801c346:	3724      	adds	r7, #36	; 0x24
 801c348:	46bd      	mov	sp, r7
 801c34a:	bd90      	pop	{r4, r7, pc}
 801c34c:	20061ca8 	.word	0x20061ca8
 801c350:	20061ca4 	.word	0x20061ca4
 801c354:	20061cd8 	.word	0x20061cd8
 801c358:	20061cd0 	.word	0x20061cd0
 801c35c:	20061cd9 	.word	0x20061cd9
 801c360:	20061ca0 	.word	0x20061ca0

0801c364 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c364:	b590      	push	{r4, r7, lr}
 801c366:	b085      	sub	sp, #20
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
 801c36c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d106      	bne.n	801c382 <tcp_oos_insert_segment+0x1e>
 801c374:	4b3b      	ldr	r3, [pc, #236]	; (801c464 <tcp_oos_insert_segment+0x100>)
 801c376:	f240 421f 	movw	r2, #1055	; 0x41f
 801c37a:	493b      	ldr	r1, [pc, #236]	; (801c468 <tcp_oos_insert_segment+0x104>)
 801c37c:	483b      	ldr	r0, [pc, #236]	; (801c46c <tcp_oos_insert_segment+0x108>)
 801c37e:	f006 fd3b 	bl	8022df8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	68db      	ldr	r3, [r3, #12]
 801c386:	899b      	ldrh	r3, [r3, #12]
 801c388:	b29b      	uxth	r3, r3
 801c38a:	4618      	mov	r0, r3
 801c38c:	f7fa ff6e 	bl	801726c <lwip_htons>
 801c390:	4603      	mov	r3, r0
 801c392:	b2db      	uxtb	r3, r3
 801c394:	f003 0301 	and.w	r3, r3, #1
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d028      	beq.n	801c3ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c39c:	6838      	ldr	r0, [r7, #0]
 801c39e:	f7fe f995 	bl	801a6cc <tcp_segs_free>
    next = NULL;
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	603b      	str	r3, [r7, #0]
 801c3a6:	e056      	b.n	801c456 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c3a8:	683b      	ldr	r3, [r7, #0]
 801c3aa:	68db      	ldr	r3, [r3, #12]
 801c3ac:	899b      	ldrh	r3, [r3, #12]
 801c3ae:	b29b      	uxth	r3, r3
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	f7fa ff5b 	bl	801726c <lwip_htons>
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	b2db      	uxtb	r3, r3
 801c3ba:	f003 0301 	and.w	r3, r3, #1
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d00d      	beq.n	801c3de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	68db      	ldr	r3, [r3, #12]
 801c3c6:	899b      	ldrh	r3, [r3, #12]
 801c3c8:	b29c      	uxth	r4, r3
 801c3ca:	2001      	movs	r0, #1
 801c3cc:	f7fa ff4e 	bl	801726c <lwip_htons>
 801c3d0:	4603      	mov	r3, r0
 801c3d2:	461a      	mov	r2, r3
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	68db      	ldr	r3, [r3, #12]
 801c3d8:	4322      	orrs	r2, r4
 801c3da:	b292      	uxth	r2, r2
 801c3dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c3e2:	683b      	ldr	r3, [r7, #0]
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c3e8:	68f8      	ldr	r0, [r7, #12]
 801c3ea:	f7fe f984 	bl	801a6f6 <tcp_seg_free>
    while (next &&
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d00e      	beq.n	801c412 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	891b      	ldrh	r3, [r3, #8]
 801c3f8:	461a      	mov	r2, r3
 801c3fa:	4b1d      	ldr	r3, [pc, #116]	; (801c470 <tcp_oos_insert_segment+0x10c>)
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	441a      	add	r2, r3
 801c400:	683b      	ldr	r3, [r7, #0]
 801c402:	68db      	ldr	r3, [r3, #12]
 801c404:	685b      	ldr	r3, [r3, #4]
 801c406:	6839      	ldr	r1, [r7, #0]
 801c408:	8909      	ldrh	r1, [r1, #8]
 801c40a:	440b      	add	r3, r1
 801c40c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c40e:	2b00      	cmp	r3, #0
 801c410:	daca      	bge.n	801c3a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c412:	683b      	ldr	r3, [r7, #0]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d01e      	beq.n	801c456 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	891b      	ldrh	r3, [r3, #8]
 801c41c:	461a      	mov	r2, r3
 801c41e:	4b14      	ldr	r3, [pc, #80]	; (801c470 <tcp_oos_insert_segment+0x10c>)
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	441a      	add	r2, r3
 801c424:	683b      	ldr	r3, [r7, #0]
 801c426:	68db      	ldr	r3, [r3, #12]
 801c428:	685b      	ldr	r3, [r3, #4]
 801c42a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	dd12      	ble.n	801c456 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c430:	683b      	ldr	r3, [r7, #0]
 801c432:	68db      	ldr	r3, [r3, #12]
 801c434:	685b      	ldr	r3, [r3, #4]
 801c436:	b29a      	uxth	r2, r3
 801c438:	4b0d      	ldr	r3, [pc, #52]	; (801c470 <tcp_oos_insert_segment+0x10c>)
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	b29b      	uxth	r3, r3
 801c43e:	1ad3      	subs	r3, r2, r3
 801c440:	b29a      	uxth	r2, r3
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	685a      	ldr	r2, [r3, #4]
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	891b      	ldrh	r3, [r3, #8]
 801c44e:	4619      	mov	r1, r3
 801c450:	4610      	mov	r0, r2
 801c452:	f7fc fa2f 	bl	80188b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	683a      	ldr	r2, [r7, #0]
 801c45a:	601a      	str	r2, [r3, #0]
}
 801c45c:	bf00      	nop
 801c45e:	3714      	adds	r7, #20
 801c460:	46bd      	mov	sp, r7
 801c462:	bd90      	pop	{r4, r7, pc}
 801c464:	080260c0 	.word	0x080260c0
 801c468:	08026380 	.word	0x08026380
 801c46c:	0802610c 	.word	0x0802610c
 801c470:	20061ccc 	.word	0x20061ccc

0801c474 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c474:	b5b0      	push	{r4, r5, r7, lr}
 801c476:	b086      	sub	sp, #24
 801c478:	af00      	add	r7, sp, #0
 801c47a:	60f8      	str	r0, [r7, #12]
 801c47c:	60b9      	str	r1, [r7, #8]
 801c47e:	607a      	str	r2, [r7, #4]
 801c480:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c482:	e03e      	b.n	801c502 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c484:	68bb      	ldr	r3, [r7, #8]
 801c486:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c488:	68bb      	ldr	r3, [r7, #8]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c48e:	697b      	ldr	r3, [r7, #20]
 801c490:	685b      	ldr	r3, [r3, #4]
 801c492:	4618      	mov	r0, r3
 801c494:	f7fc fc22 	bl	8018cdc <pbuf_clen>
 801c498:	4603      	mov	r3, r0
 801c49a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c4a2:	8a7a      	ldrh	r2, [r7, #18]
 801c4a4:	429a      	cmp	r2, r3
 801c4a6:	d906      	bls.n	801c4b6 <tcp_free_acked_segments+0x42>
 801c4a8:	4b2a      	ldr	r3, [pc, #168]	; (801c554 <tcp_free_acked_segments+0xe0>)
 801c4aa:	f240 4257 	movw	r2, #1111	; 0x457
 801c4ae:	492a      	ldr	r1, [pc, #168]	; (801c558 <tcp_free_acked_segments+0xe4>)
 801c4b0:	482a      	ldr	r0, [pc, #168]	; (801c55c <tcp_free_acked_segments+0xe8>)
 801c4b2:	f006 fca1 	bl	8022df8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c4bc:	8a7b      	ldrh	r3, [r7, #18]
 801c4be:	1ad3      	subs	r3, r2, r3
 801c4c0:	b29a      	uxth	r2, r3
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c4c8:	697b      	ldr	r3, [r7, #20]
 801c4ca:	891a      	ldrh	r2, [r3, #8]
 801c4cc:	4b24      	ldr	r3, [pc, #144]	; (801c560 <tcp_free_acked_segments+0xec>)
 801c4ce:	881b      	ldrh	r3, [r3, #0]
 801c4d0:	4413      	add	r3, r2
 801c4d2:	b29a      	uxth	r2, r3
 801c4d4:	4b22      	ldr	r3, [pc, #136]	; (801c560 <tcp_free_acked_segments+0xec>)
 801c4d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c4d8:	6978      	ldr	r0, [r7, #20]
 801c4da:	f7fe f90c 	bl	801a6f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d00c      	beq.n	801c502 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c4e8:	68bb      	ldr	r3, [r7, #8]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d109      	bne.n	801c502 <tcp_free_acked_segments+0x8e>
 801c4ee:	683b      	ldr	r3, [r7, #0]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d106      	bne.n	801c502 <tcp_free_acked_segments+0x8e>
 801c4f4:	4b17      	ldr	r3, [pc, #92]	; (801c554 <tcp_free_acked_segments+0xe0>)
 801c4f6:	f240 4261 	movw	r2, #1121	; 0x461
 801c4fa:	491a      	ldr	r1, [pc, #104]	; (801c564 <tcp_free_acked_segments+0xf0>)
 801c4fc:	4817      	ldr	r0, [pc, #92]	; (801c55c <tcp_free_acked_segments+0xe8>)
 801c4fe:	f006 fc7b 	bl	8022df8 <iprintf>
  while (seg_list != NULL &&
 801c502:	68bb      	ldr	r3, [r7, #8]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d020      	beq.n	801c54a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c508:	68bb      	ldr	r3, [r7, #8]
 801c50a:	68db      	ldr	r3, [r3, #12]
 801c50c:	685b      	ldr	r3, [r3, #4]
 801c50e:	4618      	mov	r0, r3
 801c510:	f7fa fec1 	bl	8017296 <lwip_htonl>
 801c514:	4604      	mov	r4, r0
 801c516:	68bb      	ldr	r3, [r7, #8]
 801c518:	891b      	ldrh	r3, [r3, #8]
 801c51a:	461d      	mov	r5, r3
 801c51c:	68bb      	ldr	r3, [r7, #8]
 801c51e:	68db      	ldr	r3, [r3, #12]
 801c520:	899b      	ldrh	r3, [r3, #12]
 801c522:	b29b      	uxth	r3, r3
 801c524:	4618      	mov	r0, r3
 801c526:	f7fa fea1 	bl	801726c <lwip_htons>
 801c52a:	4603      	mov	r3, r0
 801c52c:	b2db      	uxtb	r3, r3
 801c52e:	f003 0303 	and.w	r3, r3, #3
 801c532:	2b00      	cmp	r3, #0
 801c534:	d001      	beq.n	801c53a <tcp_free_acked_segments+0xc6>
 801c536:	2301      	movs	r3, #1
 801c538:	e000      	b.n	801c53c <tcp_free_acked_segments+0xc8>
 801c53a:	2300      	movs	r3, #0
 801c53c:	442b      	add	r3, r5
 801c53e:	18e2      	adds	r2, r4, r3
 801c540:	4b09      	ldr	r3, [pc, #36]	; (801c568 <tcp_free_acked_segments+0xf4>)
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c546:	2b00      	cmp	r3, #0
 801c548:	dd9c      	ble.n	801c484 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c54a:	68bb      	ldr	r3, [r7, #8]
}
 801c54c:	4618      	mov	r0, r3
 801c54e:	3718      	adds	r7, #24
 801c550:	46bd      	mov	sp, r7
 801c552:	bdb0      	pop	{r4, r5, r7, pc}
 801c554:	080260c0 	.word	0x080260c0
 801c558:	080263a8 	.word	0x080263a8
 801c55c:	0802610c 	.word	0x0802610c
 801c560:	20061cd4 	.word	0x20061cd4
 801c564:	080263d0 	.word	0x080263d0
 801c568:	20061cd0 	.word	0x20061cd0

0801c56c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c56c:	b5b0      	push	{r4, r5, r7, lr}
 801c56e:	b094      	sub	sp, #80	; 0x50
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c574:	2300      	movs	r3, #0
 801c576:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d106      	bne.n	801c58c <tcp_receive+0x20>
 801c57e:	4b91      	ldr	r3, [pc, #580]	; (801c7c4 <tcp_receive+0x258>)
 801c580:	f240 427b 	movw	r2, #1147	; 0x47b
 801c584:	4990      	ldr	r1, [pc, #576]	; (801c7c8 <tcp_receive+0x25c>)
 801c586:	4891      	ldr	r0, [pc, #580]	; (801c7cc <tcp_receive+0x260>)
 801c588:	f006 fc36 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	7d1b      	ldrb	r3, [r3, #20]
 801c590:	2b03      	cmp	r3, #3
 801c592:	d806      	bhi.n	801c5a2 <tcp_receive+0x36>
 801c594:	4b8b      	ldr	r3, [pc, #556]	; (801c7c4 <tcp_receive+0x258>)
 801c596:	f240 427c 	movw	r2, #1148	; 0x47c
 801c59a:	498d      	ldr	r1, [pc, #564]	; (801c7d0 <tcp_receive+0x264>)
 801c59c:	488b      	ldr	r0, [pc, #556]	; (801c7cc <tcp_receive+0x260>)
 801c59e:	f006 fc2b 	bl	8022df8 <iprintf>

  if (flags & TCP_ACK) {
 801c5a2:	4b8c      	ldr	r3, [pc, #560]	; (801c7d4 <tcp_receive+0x268>)
 801c5a4:	781b      	ldrb	r3, [r3, #0]
 801c5a6:	f003 0310 	and.w	r3, r3, #16
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	f000 8264 	beq.w	801ca78 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c5b6:	461a      	mov	r2, r3
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c5bc:	4413      	add	r3, r2
 801c5be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c5c4:	4b84      	ldr	r3, [pc, #528]	; (801c7d8 <tcp_receive+0x26c>)
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	1ad3      	subs	r3, r2, r3
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	db1b      	blt.n	801c606 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c5d2:	4b81      	ldr	r3, [pc, #516]	; (801c7d8 <tcp_receive+0x26c>)
 801c5d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c5d6:	429a      	cmp	r2, r3
 801c5d8:	d106      	bne.n	801c5e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c5de:	4b7f      	ldr	r3, [pc, #508]	; (801c7dc <tcp_receive+0x270>)
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	1ad3      	subs	r3, r2, r3
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	db0e      	blt.n	801c606 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c5ec:	4b7b      	ldr	r3, [pc, #492]	; (801c7dc <tcp_receive+0x270>)
 801c5ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	d125      	bne.n	801c640 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c5f4:	4b7a      	ldr	r3, [pc, #488]	; (801c7e0 <tcp_receive+0x274>)
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	89db      	ldrh	r3, [r3, #14]
 801c5fa:	b29a      	uxth	r2, r3
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c602:	429a      	cmp	r2, r3
 801c604:	d91c      	bls.n	801c640 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c606:	4b76      	ldr	r3, [pc, #472]	; (801c7e0 <tcp_receive+0x274>)
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	89db      	ldrh	r3, [r3, #14]
 801c60c:	b29a      	uxth	r2, r3
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c620:	429a      	cmp	r2, r3
 801c622:	d205      	bcs.n	801c630 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c630:	4b69      	ldr	r3, [pc, #420]	; (801c7d8 <tcp_receive+0x26c>)
 801c632:	681a      	ldr	r2, [r3, #0]
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c638:	4b68      	ldr	r3, [pc, #416]	; (801c7dc <tcp_receive+0x270>)
 801c63a:	681a      	ldr	r2, [r3, #0]
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c640:	4b66      	ldr	r3, [pc, #408]	; (801c7dc <tcp_receive+0x270>)
 801c642:	681a      	ldr	r2, [r3, #0]
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c648:	1ad3      	subs	r3, r2, r3
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	dc58      	bgt.n	801c700 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c64e:	4b65      	ldr	r3, [pc, #404]	; (801c7e4 <tcp_receive+0x278>)
 801c650:	881b      	ldrh	r3, [r3, #0]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d14b      	bne.n	801c6ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c65a:	687a      	ldr	r2, [r7, #4]
 801c65c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c660:	4413      	add	r3, r2
 801c662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c664:	429a      	cmp	r2, r3
 801c666:	d142      	bne.n	801c6ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c66e:	2b00      	cmp	r3, #0
 801c670:	db3d      	blt.n	801c6ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c676:	4b59      	ldr	r3, [pc, #356]	; (801c7dc <tcp_receive+0x270>)
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	429a      	cmp	r2, r3
 801c67c:	d137      	bne.n	801c6ee <tcp_receive+0x182>
              found_dupack = 1;
 801c67e:	2301      	movs	r3, #1
 801c680:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c688:	2bff      	cmp	r3, #255	; 0xff
 801c68a:	d007      	beq.n	801c69c <tcp_receive+0x130>
                ++pcb->dupacks;
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c692:	3301      	adds	r3, #1
 801c694:	b2da      	uxtb	r2, r3
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c6a2:	2b03      	cmp	r3, #3
 801c6a4:	d91b      	bls.n	801c6de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c6b0:	4413      	add	r3, r2
 801c6b2:	b29a      	uxth	r2, r3
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c6ba:	429a      	cmp	r2, r3
 801c6bc:	d30a      	bcc.n	801c6d4 <tcp_receive+0x168>
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c6c8:	4413      	add	r3, r2
 801c6ca:	b29a      	uxth	r2, r3
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c6d2:	e004      	b.n	801c6de <tcp_receive+0x172>
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c6da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c6e4:	2b02      	cmp	r3, #2
 801c6e6:	d902      	bls.n	801c6ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c6e8:	6878      	ldr	r0, [r7, #4]
 801c6ea:	f002 fb45 	bl	801ed78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	f040 8161 	bne.w	801c9b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	2200      	movs	r2, #0
 801c6fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c6fe:	e15b      	b.n	801c9b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c700:	4b36      	ldr	r3, [pc, #216]	; (801c7dc <tcp_receive+0x270>)
 801c702:	681a      	ldr	r2, [r3, #0]
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c708:	1ad3      	subs	r3, r2, r3
 801c70a:	3b01      	subs	r3, #1
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	f2c0 814e 	blt.w	801c9ae <tcp_receive+0x442>
 801c712:	4b32      	ldr	r3, [pc, #200]	; (801c7dc <tcp_receive+0x270>)
 801c714:	681a      	ldr	r2, [r3, #0]
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c71a:	1ad3      	subs	r3, r2, r3
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	f300 8146 	bgt.w	801c9ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	8b5b      	ldrh	r3, [r3, #26]
 801c726:	f003 0304 	and.w	r3, r3, #4
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d010      	beq.n	801c750 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	8b5b      	ldrh	r3, [r3, #26]
 801c732:	f023 0304 	bic.w	r3, r3, #4
 801c736:	b29a      	uxth	r2, r3
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	2200      	movs	r2, #0
 801c74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	2200      	movs	r2, #0
 801c754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c75e:	10db      	asrs	r3, r3, #3
 801c760:	b21b      	sxth	r3, r3
 801c762:	b29a      	uxth	r2, r3
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c76a:	b29b      	uxth	r3, r3
 801c76c:	4413      	add	r3, r2
 801c76e:	b29b      	uxth	r3, r3
 801c770:	b21a      	sxth	r2, r3
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c778:	4b18      	ldr	r3, [pc, #96]	; (801c7dc <tcp_receive+0x270>)
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	b29a      	uxth	r2, r3
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c782:	b29b      	uxth	r3, r3
 801c784:	1ad3      	subs	r3, r2, r3
 801c786:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	2200      	movs	r2, #0
 801c78c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801c790:	4b12      	ldr	r3, [pc, #72]	; (801c7dc <tcp_receive+0x270>)
 801c792:	681a      	ldr	r2, [r3, #0]
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	7d1b      	ldrb	r3, [r3, #20]
 801c79c:	2b03      	cmp	r3, #3
 801c79e:	f240 8097 	bls.w	801c8d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c7ae:	429a      	cmp	r2, r3
 801c7b0:	d245      	bcs.n	801c83e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	8b5b      	ldrh	r3, [r3, #26]
 801c7b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d014      	beq.n	801c7e8 <tcp_receive+0x27c>
 801c7be:	2301      	movs	r3, #1
 801c7c0:	e013      	b.n	801c7ea <tcp_receive+0x27e>
 801c7c2:	bf00      	nop
 801c7c4:	080260c0 	.word	0x080260c0
 801c7c8:	080263f0 	.word	0x080263f0
 801c7cc:	0802610c 	.word	0x0802610c
 801c7d0:	0802640c 	.word	0x0802640c
 801c7d4:	20061cd8 	.word	0x20061cd8
 801c7d8:	20061ccc 	.word	0x20061ccc
 801c7dc:	20061cd0 	.word	0x20061cd0
 801c7e0:	20061cbc 	.word	0x20061cbc
 801c7e4:	20061cd6 	.word	0x20061cd6
 801c7e8:	2302      	movs	r3, #2
 801c7ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c7ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c7f2:	b29a      	uxth	r2, r3
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c7f8:	fb12 f303 	smulbb	r3, r2, r3
 801c7fc:	b29b      	uxth	r3, r3
 801c7fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c800:	4293      	cmp	r3, r2
 801c802:	bf28      	it	cs
 801c804:	4613      	movcs	r3, r2
 801c806:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c80e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c810:	4413      	add	r3, r2
 801c812:	b29a      	uxth	r2, r3
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c81a:	429a      	cmp	r2, r3
 801c81c:	d309      	bcc.n	801c832 <tcp_receive+0x2c6>
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c824:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c826:	4413      	add	r3, r2
 801c828:	b29a      	uxth	r2, r3
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c830:	e04e      	b.n	801c8d0 <tcp_receive+0x364>
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c838:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c83c:	e048      	b.n	801c8d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c846:	4413      	add	r3, r2
 801c848:	b29a      	uxth	r2, r3
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801c850:	429a      	cmp	r2, r3
 801c852:	d309      	bcc.n	801c868 <tcp_receive+0x2fc>
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c85a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c85c:	4413      	add	r3, r2
 801c85e:	b29a      	uxth	r2, r3
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801c866:	e004      	b.n	801c872 <tcp_receive+0x306>
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c86e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c87e:	429a      	cmp	r2, r3
 801c880:	d326      	bcc.n	801c8d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c88e:	1ad3      	subs	r3, r2, r3
 801c890:	b29a      	uxth	r2, r3
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c8a2:	4413      	add	r3, r2
 801c8a4:	b29a      	uxth	r2, r3
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	d30a      	bcc.n	801c8c6 <tcp_receive+0x35a>
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c8ba:	4413      	add	r3, r2
 801c8bc:	b29a      	uxth	r2, r3
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c8c4:	e004      	b.n	801c8d0 <tcp_receive+0x364>
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c8cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8d8:	4a98      	ldr	r2, [pc, #608]	; (801cb3c <tcp_receive+0x5d0>)
 801c8da:	6878      	ldr	r0, [r7, #4]
 801c8dc:	f7ff fdca 	bl	801c474 <tcp_free_acked_segments>
 801c8e0:	4602      	mov	r2, r0
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8ee:	4a94      	ldr	r2, [pc, #592]	; (801cb40 <tcp_receive+0x5d4>)
 801c8f0:	6878      	ldr	r0, [r7, #4]
 801c8f2:	f7ff fdbf 	bl	801c474 <tcp_free_acked_segments>
 801c8f6:	4602      	mov	r2, r0
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c900:	2b00      	cmp	r3, #0
 801c902:	d104      	bne.n	801c90e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c90a:	861a      	strh	r2, [r3, #48]	; 0x30
 801c90c:	e002      	b.n	801c914 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	2200      	movs	r2, #0
 801c912:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	2200      	movs	r2, #0
 801c918:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d103      	bne.n	801c92a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	2200      	movs	r2, #0
 801c926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c930:	4b84      	ldr	r3, [pc, #528]	; (801cb44 <tcp_receive+0x5d8>)
 801c932:	881b      	ldrh	r3, [r3, #0]
 801c934:	4413      	add	r3, r2
 801c936:	b29a      	uxth	r2, r3
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	8b5b      	ldrh	r3, [r3, #26]
 801c942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c946:	2b00      	cmp	r3, #0
 801c948:	d035      	beq.n	801c9b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d118      	bne.n	801c984 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c956:	2b00      	cmp	r3, #0
 801c958:	d00c      	beq.n	801c974 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c962:	68db      	ldr	r3, [r3, #12]
 801c964:	685b      	ldr	r3, [r3, #4]
 801c966:	4618      	mov	r0, r3
 801c968:	f7fa fc95 	bl	8017296 <lwip_htonl>
 801c96c:	4603      	mov	r3, r0
 801c96e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801c970:	2b00      	cmp	r3, #0
 801c972:	dc20      	bgt.n	801c9b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	8b5b      	ldrh	r3, [r3, #26]
 801c978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c97c:	b29a      	uxth	r2, r3
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c982:	e018      	b.n	801c9b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c98c:	68db      	ldr	r3, [r3, #12]
 801c98e:	685b      	ldr	r3, [r3, #4]
 801c990:	4618      	mov	r0, r3
 801c992:	f7fa fc80 	bl	8017296 <lwip_htonl>
 801c996:	4603      	mov	r3, r0
 801c998:	1ae3      	subs	r3, r4, r3
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	dc0b      	bgt.n	801c9b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	8b5b      	ldrh	r3, [r3, #26]
 801c9a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c9a6:	b29a      	uxth	r2, r3
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c9ac:	e003      	b.n	801c9b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801c9ae:	6878      	ldr	r0, [r7, #4]
 801c9b0:	f002 fbce 	bl	801f150 <tcp_send_empty_ack>
 801c9b4:	e000      	b.n	801c9b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c9b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d05b      	beq.n	801ca78 <tcp_receive+0x50c>
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c9c4:	4b60      	ldr	r3, [pc, #384]	; (801cb48 <tcp_receive+0x5dc>)
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	1ad3      	subs	r3, r2, r3
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	da54      	bge.n	801ca78 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c9ce:	4b5f      	ldr	r3, [pc, #380]	; (801cb4c <tcp_receive+0x5e0>)
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	b29a      	uxth	r2, r3
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9d8:	b29b      	uxth	r3, r3
 801c9da:	1ad3      	subs	r3, r2, r3
 801c9dc:	b29b      	uxth	r3, r3
 801c9de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c9e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c9ec:	10db      	asrs	r3, r3, #3
 801c9ee:	b21b      	sxth	r3, r3
 801c9f0:	b29b      	uxth	r3, r3
 801c9f2:	1ad3      	subs	r3, r2, r3
 801c9f4:	b29b      	uxth	r3, r3
 801c9f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ca00:	b29a      	uxth	r2, r3
 801ca02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ca06:	4413      	add	r3, r2
 801ca08:	b29b      	uxth	r3, r3
 801ca0a:	b21a      	sxth	r2, r3
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801ca10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	da05      	bge.n	801ca24 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801ca18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ca1c:	425b      	negs	r3, r3
 801ca1e:	b29b      	uxth	r3, r3
 801ca20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801ca24:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ca2e:	109b      	asrs	r3, r3, #2
 801ca30:	b21b      	sxth	r3, r3
 801ca32:	b29b      	uxth	r3, r3
 801ca34:	1ad3      	subs	r3, r2, r3
 801ca36:	b29b      	uxth	r3, r3
 801ca38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ca42:	b29a      	uxth	r2, r3
 801ca44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ca48:	4413      	add	r3, r2
 801ca4a:	b29b      	uxth	r3, r3
 801ca4c:	b21a      	sxth	r2, r3
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ca58:	10db      	asrs	r3, r3, #3
 801ca5a:	b21b      	sxth	r3, r3
 801ca5c:	b29a      	uxth	r2, r3
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ca64:	b29b      	uxth	r3, r3
 801ca66:	4413      	add	r3, r2
 801ca68:	b29b      	uxth	r3, r3
 801ca6a:	b21a      	sxth	r2, r3
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	2200      	movs	r2, #0
 801ca76:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ca78:	4b35      	ldr	r3, [pc, #212]	; (801cb50 <tcp_receive+0x5e4>)
 801ca7a:	881b      	ldrh	r3, [r3, #0]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	f000 84e2 	beq.w	801d446 <tcp_receive+0xeda>
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	7d1b      	ldrb	r3, [r3, #20]
 801ca86:	2b06      	cmp	r3, #6
 801ca88:	f200 84dd 	bhi.w	801d446 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ca90:	4b30      	ldr	r3, [pc, #192]	; (801cb54 <tcp_receive+0x5e8>)
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	1ad3      	subs	r3, r2, r3
 801ca96:	3b01      	subs	r3, #1
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	f2c0 808f 	blt.w	801cbbc <tcp_receive+0x650>
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801caa2:	4b2b      	ldr	r3, [pc, #172]	; (801cb50 <tcp_receive+0x5e4>)
 801caa4:	881b      	ldrh	r3, [r3, #0]
 801caa6:	4619      	mov	r1, r3
 801caa8:	4b2a      	ldr	r3, [pc, #168]	; (801cb54 <tcp_receive+0x5e8>)
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	440b      	add	r3, r1
 801caae:	1ad3      	subs	r3, r2, r3
 801cab0:	3301      	adds	r3, #1
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	f300 8082 	bgt.w	801cbbc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801cab8:	4b27      	ldr	r3, [pc, #156]	; (801cb58 <tcp_receive+0x5ec>)
 801caba:	685b      	ldr	r3, [r3, #4]
 801cabc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cac2:	4b24      	ldr	r3, [pc, #144]	; (801cb54 <tcp_receive+0x5e8>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	1ad3      	subs	r3, r2, r3
 801cac8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801caca:	4b23      	ldr	r3, [pc, #140]	; (801cb58 <tcp_receive+0x5ec>)
 801cacc:	685b      	ldr	r3, [r3, #4]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d106      	bne.n	801cae0 <tcp_receive+0x574>
 801cad2:	4b22      	ldr	r3, [pc, #136]	; (801cb5c <tcp_receive+0x5f0>)
 801cad4:	f240 5294 	movw	r2, #1428	; 0x594
 801cad8:	4921      	ldr	r1, [pc, #132]	; (801cb60 <tcp_receive+0x5f4>)
 801cada:	4822      	ldr	r0, [pc, #136]	; (801cb64 <tcp_receive+0x5f8>)
 801cadc:	f006 f98c 	bl	8022df8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cae2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cae6:	4293      	cmp	r3, r2
 801cae8:	d906      	bls.n	801caf8 <tcp_receive+0x58c>
 801caea:	4b1c      	ldr	r3, [pc, #112]	; (801cb5c <tcp_receive+0x5f0>)
 801caec:	f240 5295 	movw	r2, #1429	; 0x595
 801caf0:	491d      	ldr	r1, [pc, #116]	; (801cb68 <tcp_receive+0x5fc>)
 801caf2:	481c      	ldr	r0, [pc, #112]	; (801cb64 <tcp_receive+0x5f8>)
 801caf4:	f006 f980 	bl	8022df8 <iprintf>
      off = (u16_t)off32;
 801caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cafa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801cafe:	4b16      	ldr	r3, [pc, #88]	; (801cb58 <tcp_receive+0x5ec>)
 801cb00:	685b      	ldr	r3, [r3, #4]
 801cb02:	891b      	ldrh	r3, [r3, #8]
 801cb04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cb08:	429a      	cmp	r2, r3
 801cb0a:	d906      	bls.n	801cb1a <tcp_receive+0x5ae>
 801cb0c:	4b13      	ldr	r3, [pc, #76]	; (801cb5c <tcp_receive+0x5f0>)
 801cb0e:	f240 5297 	movw	r2, #1431	; 0x597
 801cb12:	4916      	ldr	r1, [pc, #88]	; (801cb6c <tcp_receive+0x600>)
 801cb14:	4813      	ldr	r0, [pc, #76]	; (801cb64 <tcp_receive+0x5f8>)
 801cb16:	f006 f96f 	bl	8022df8 <iprintf>
      inseg.len -= off;
 801cb1a:	4b0f      	ldr	r3, [pc, #60]	; (801cb58 <tcp_receive+0x5ec>)
 801cb1c:	891a      	ldrh	r2, [r3, #8]
 801cb1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cb22:	1ad3      	subs	r3, r2, r3
 801cb24:	b29a      	uxth	r2, r3
 801cb26:	4b0c      	ldr	r3, [pc, #48]	; (801cb58 <tcp_receive+0x5ec>)
 801cb28:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cb2a:	4b0b      	ldr	r3, [pc, #44]	; (801cb58 <tcp_receive+0x5ec>)
 801cb2c:	685b      	ldr	r3, [r3, #4]
 801cb2e:	891a      	ldrh	r2, [r3, #8]
 801cb30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cb34:	1ad3      	subs	r3, r2, r3
 801cb36:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801cb38:	e02a      	b.n	801cb90 <tcp_receive+0x624>
 801cb3a:	bf00      	nop
 801cb3c:	08026428 	.word	0x08026428
 801cb40:	08026430 	.word	0x08026430
 801cb44:	20061cd4 	.word	0x20061cd4
 801cb48:	20061cd0 	.word	0x20061cd0
 801cb4c:	20061c94 	.word	0x20061c94
 801cb50:	20061cd6 	.word	0x20061cd6
 801cb54:	20061ccc 	.word	0x20061ccc
 801cb58:	20061cac 	.word	0x20061cac
 801cb5c:	080260c0 	.word	0x080260c0
 801cb60:	08026438 	.word	0x08026438
 801cb64:	0802610c 	.word	0x0802610c
 801cb68:	08026448 	.word	0x08026448
 801cb6c:	08026458 	.word	0x08026458
        off -= p->len;
 801cb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb72:	895b      	ldrh	r3, [r3, #10]
 801cb74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cb78:	1ad3      	subs	r3, r2, r3
 801cb7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801cb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801cb82:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801cb84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb86:	2200      	movs	r2, #0
 801cb88:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801cb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801cb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb92:	895b      	ldrh	r3, [r3, #10]
 801cb94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cb98:	429a      	cmp	r2, r3
 801cb9a:	d8e9      	bhi.n	801cb70 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801cb9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cba0:	4619      	mov	r1, r3
 801cba2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801cba4:	f7fb ff86 	bl	8018ab4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbac:	4a91      	ldr	r2, [pc, #580]	; (801cdf4 <tcp_receive+0x888>)
 801cbae:	6013      	str	r3, [r2, #0]
 801cbb0:	4b91      	ldr	r3, [pc, #580]	; (801cdf8 <tcp_receive+0x88c>)
 801cbb2:	68db      	ldr	r3, [r3, #12]
 801cbb4:	4a8f      	ldr	r2, [pc, #572]	; (801cdf4 <tcp_receive+0x888>)
 801cbb6:	6812      	ldr	r2, [r2, #0]
 801cbb8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cbba:	e00d      	b.n	801cbd8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801cbbc:	4b8d      	ldr	r3, [pc, #564]	; (801cdf4 <tcp_receive+0x888>)
 801cbbe:	681a      	ldr	r2, [r3, #0]
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbc4:	1ad3      	subs	r3, r2, r3
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	da06      	bge.n	801cbd8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	8b5b      	ldrh	r3, [r3, #26]
 801cbce:	f043 0302 	orr.w	r3, r3, #2
 801cbd2:	b29a      	uxth	r2, r3
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cbd8:	4b86      	ldr	r3, [pc, #536]	; (801cdf4 <tcp_receive+0x888>)
 801cbda:	681a      	ldr	r2, [r3, #0]
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbe0:	1ad3      	subs	r3, r2, r3
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	f2c0 842a 	blt.w	801d43c <tcp_receive+0xed0>
 801cbe8:	4b82      	ldr	r3, [pc, #520]	; (801cdf4 <tcp_receive+0x888>)
 801cbea:	681a      	ldr	r2, [r3, #0]
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbf0:	6879      	ldr	r1, [r7, #4]
 801cbf2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cbf4:	440b      	add	r3, r1
 801cbf6:	1ad3      	subs	r3, r2, r3
 801cbf8:	3301      	adds	r3, #1
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	f300 841e 	bgt.w	801d43c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cc04:	4b7b      	ldr	r3, [pc, #492]	; (801cdf4 <tcp_receive+0x888>)
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	429a      	cmp	r2, r3
 801cc0a:	f040 829a 	bne.w	801d142 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801cc0e:	4b7a      	ldr	r3, [pc, #488]	; (801cdf8 <tcp_receive+0x88c>)
 801cc10:	891c      	ldrh	r4, [r3, #8]
 801cc12:	4b79      	ldr	r3, [pc, #484]	; (801cdf8 <tcp_receive+0x88c>)
 801cc14:	68db      	ldr	r3, [r3, #12]
 801cc16:	899b      	ldrh	r3, [r3, #12]
 801cc18:	b29b      	uxth	r3, r3
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	f7fa fb26 	bl	801726c <lwip_htons>
 801cc20:	4603      	mov	r3, r0
 801cc22:	b2db      	uxtb	r3, r3
 801cc24:	f003 0303 	and.w	r3, r3, #3
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d001      	beq.n	801cc30 <tcp_receive+0x6c4>
 801cc2c:	2301      	movs	r3, #1
 801cc2e:	e000      	b.n	801cc32 <tcp_receive+0x6c6>
 801cc30:	2300      	movs	r3, #0
 801cc32:	4423      	add	r3, r4
 801cc34:	b29a      	uxth	r2, r3
 801cc36:	4b71      	ldr	r3, [pc, #452]	; (801cdfc <tcp_receive+0x890>)
 801cc38:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cc3e:	4b6f      	ldr	r3, [pc, #444]	; (801cdfc <tcp_receive+0x890>)
 801cc40:	881b      	ldrh	r3, [r3, #0]
 801cc42:	429a      	cmp	r2, r3
 801cc44:	d275      	bcs.n	801cd32 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cc46:	4b6c      	ldr	r3, [pc, #432]	; (801cdf8 <tcp_receive+0x88c>)
 801cc48:	68db      	ldr	r3, [r3, #12]
 801cc4a:	899b      	ldrh	r3, [r3, #12]
 801cc4c:	b29b      	uxth	r3, r3
 801cc4e:	4618      	mov	r0, r3
 801cc50:	f7fa fb0c 	bl	801726c <lwip_htons>
 801cc54:	4603      	mov	r3, r0
 801cc56:	b2db      	uxtb	r3, r3
 801cc58:	f003 0301 	and.w	r3, r3, #1
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d01f      	beq.n	801cca0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801cc60:	4b65      	ldr	r3, [pc, #404]	; (801cdf8 <tcp_receive+0x88c>)
 801cc62:	68db      	ldr	r3, [r3, #12]
 801cc64:	899b      	ldrh	r3, [r3, #12]
 801cc66:	b29b      	uxth	r3, r3
 801cc68:	b21b      	sxth	r3, r3
 801cc6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cc6e:	b21c      	sxth	r4, r3
 801cc70:	4b61      	ldr	r3, [pc, #388]	; (801cdf8 <tcp_receive+0x88c>)
 801cc72:	68db      	ldr	r3, [r3, #12]
 801cc74:	899b      	ldrh	r3, [r3, #12]
 801cc76:	b29b      	uxth	r3, r3
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f7fa faf7 	bl	801726c <lwip_htons>
 801cc7e:	4603      	mov	r3, r0
 801cc80:	b2db      	uxtb	r3, r3
 801cc82:	b29b      	uxth	r3, r3
 801cc84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801cc88:	b29b      	uxth	r3, r3
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f7fa faee 	bl	801726c <lwip_htons>
 801cc90:	4603      	mov	r3, r0
 801cc92:	b21b      	sxth	r3, r3
 801cc94:	4323      	orrs	r3, r4
 801cc96:	b21a      	sxth	r2, r3
 801cc98:	4b57      	ldr	r3, [pc, #348]	; (801cdf8 <tcp_receive+0x88c>)
 801cc9a:	68db      	ldr	r3, [r3, #12]
 801cc9c:	b292      	uxth	r2, r2
 801cc9e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cca4:	4b54      	ldr	r3, [pc, #336]	; (801cdf8 <tcp_receive+0x88c>)
 801cca6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cca8:	4b53      	ldr	r3, [pc, #332]	; (801cdf8 <tcp_receive+0x88c>)
 801ccaa:	68db      	ldr	r3, [r3, #12]
 801ccac:	899b      	ldrh	r3, [r3, #12]
 801ccae:	b29b      	uxth	r3, r3
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f7fa fadb 	bl	801726c <lwip_htons>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	b2db      	uxtb	r3, r3
 801ccba:	f003 0302 	and.w	r3, r3, #2
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d005      	beq.n	801ccce <tcp_receive+0x762>
            inseg.len -= 1;
 801ccc2:	4b4d      	ldr	r3, [pc, #308]	; (801cdf8 <tcp_receive+0x88c>)
 801ccc4:	891b      	ldrh	r3, [r3, #8]
 801ccc6:	3b01      	subs	r3, #1
 801ccc8:	b29a      	uxth	r2, r3
 801ccca:	4b4b      	ldr	r3, [pc, #300]	; (801cdf8 <tcp_receive+0x88c>)
 801cccc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801ccce:	4b4a      	ldr	r3, [pc, #296]	; (801cdf8 <tcp_receive+0x88c>)
 801ccd0:	685b      	ldr	r3, [r3, #4]
 801ccd2:	4a49      	ldr	r2, [pc, #292]	; (801cdf8 <tcp_receive+0x88c>)
 801ccd4:	8912      	ldrh	r2, [r2, #8]
 801ccd6:	4611      	mov	r1, r2
 801ccd8:	4618      	mov	r0, r3
 801ccda:	f7fb fdeb 	bl	80188b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801ccde:	4b46      	ldr	r3, [pc, #280]	; (801cdf8 <tcp_receive+0x88c>)
 801cce0:	891c      	ldrh	r4, [r3, #8]
 801cce2:	4b45      	ldr	r3, [pc, #276]	; (801cdf8 <tcp_receive+0x88c>)
 801cce4:	68db      	ldr	r3, [r3, #12]
 801cce6:	899b      	ldrh	r3, [r3, #12]
 801cce8:	b29b      	uxth	r3, r3
 801ccea:	4618      	mov	r0, r3
 801ccec:	f7fa fabe 	bl	801726c <lwip_htons>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	b2db      	uxtb	r3, r3
 801ccf4:	f003 0303 	and.w	r3, r3, #3
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d001      	beq.n	801cd00 <tcp_receive+0x794>
 801ccfc:	2301      	movs	r3, #1
 801ccfe:	e000      	b.n	801cd02 <tcp_receive+0x796>
 801cd00:	2300      	movs	r3, #0
 801cd02:	4423      	add	r3, r4
 801cd04:	b29a      	uxth	r2, r3
 801cd06:	4b3d      	ldr	r3, [pc, #244]	; (801cdfc <tcp_receive+0x890>)
 801cd08:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cd0a:	4b3c      	ldr	r3, [pc, #240]	; (801cdfc <tcp_receive+0x890>)
 801cd0c:	881b      	ldrh	r3, [r3, #0]
 801cd0e:	461a      	mov	r2, r3
 801cd10:	4b38      	ldr	r3, [pc, #224]	; (801cdf4 <tcp_receive+0x888>)
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	441a      	add	r2, r3
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd1a:	6879      	ldr	r1, [r7, #4]
 801cd1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cd1e:	440b      	add	r3, r1
 801cd20:	429a      	cmp	r2, r3
 801cd22:	d006      	beq.n	801cd32 <tcp_receive+0x7c6>
 801cd24:	4b36      	ldr	r3, [pc, #216]	; (801ce00 <tcp_receive+0x894>)
 801cd26:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801cd2a:	4936      	ldr	r1, [pc, #216]	; (801ce04 <tcp_receive+0x898>)
 801cd2c:	4836      	ldr	r0, [pc, #216]	; (801ce08 <tcp_receive+0x89c>)
 801cd2e:	f006 f863 	bl	8022df8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	f000 80e7 	beq.w	801cf0a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cd3c:	4b2e      	ldr	r3, [pc, #184]	; (801cdf8 <tcp_receive+0x88c>)
 801cd3e:	68db      	ldr	r3, [r3, #12]
 801cd40:	899b      	ldrh	r3, [r3, #12]
 801cd42:	b29b      	uxth	r3, r3
 801cd44:	4618      	mov	r0, r3
 801cd46:	f7fa fa91 	bl	801726c <lwip_htons>
 801cd4a:	4603      	mov	r3, r0
 801cd4c:	b2db      	uxtb	r3, r3
 801cd4e:	f003 0301 	and.w	r3, r3, #1
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d010      	beq.n	801cd78 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801cd56:	e00a      	b.n	801cd6e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd5c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd62:	681a      	ldr	r2, [r3, #0]
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801cd68:	68f8      	ldr	r0, [r7, #12]
 801cd6a:	f7fd fcc4 	bl	801a6f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d1f0      	bne.n	801cd58 <tcp_receive+0x7ec>
 801cd76:	e0c8      	b.n	801cf0a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801cd7e:	e052      	b.n	801ce26 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd82:	68db      	ldr	r3, [r3, #12]
 801cd84:	899b      	ldrh	r3, [r3, #12]
 801cd86:	b29b      	uxth	r3, r3
 801cd88:	4618      	mov	r0, r3
 801cd8a:	f7fa fa6f 	bl	801726c <lwip_htons>
 801cd8e:	4603      	mov	r3, r0
 801cd90:	b2db      	uxtb	r3, r3
 801cd92:	f003 0301 	and.w	r3, r3, #1
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d03d      	beq.n	801ce16 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801cd9a:	4b17      	ldr	r3, [pc, #92]	; (801cdf8 <tcp_receive+0x88c>)
 801cd9c:	68db      	ldr	r3, [r3, #12]
 801cd9e:	899b      	ldrh	r3, [r3, #12]
 801cda0:	b29b      	uxth	r3, r3
 801cda2:	4618      	mov	r0, r3
 801cda4:	f7fa fa62 	bl	801726c <lwip_htons>
 801cda8:	4603      	mov	r3, r0
 801cdaa:	b2db      	uxtb	r3, r3
 801cdac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d130      	bne.n	801ce16 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cdb4:	4b10      	ldr	r3, [pc, #64]	; (801cdf8 <tcp_receive+0x88c>)
 801cdb6:	68db      	ldr	r3, [r3, #12]
 801cdb8:	899b      	ldrh	r3, [r3, #12]
 801cdba:	b29c      	uxth	r4, r3
 801cdbc:	2001      	movs	r0, #1
 801cdbe:	f7fa fa55 	bl	801726c <lwip_htons>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	461a      	mov	r2, r3
 801cdc6:	4b0c      	ldr	r3, [pc, #48]	; (801cdf8 <tcp_receive+0x88c>)
 801cdc8:	68db      	ldr	r3, [r3, #12]
 801cdca:	4322      	orrs	r2, r4
 801cdcc:	b292      	uxth	r2, r2
 801cdce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801cdd0:	4b09      	ldr	r3, [pc, #36]	; (801cdf8 <tcp_receive+0x88c>)
 801cdd2:	891c      	ldrh	r4, [r3, #8]
 801cdd4:	4b08      	ldr	r3, [pc, #32]	; (801cdf8 <tcp_receive+0x88c>)
 801cdd6:	68db      	ldr	r3, [r3, #12]
 801cdd8:	899b      	ldrh	r3, [r3, #12]
 801cdda:	b29b      	uxth	r3, r3
 801cddc:	4618      	mov	r0, r3
 801cdde:	f7fa fa45 	bl	801726c <lwip_htons>
 801cde2:	4603      	mov	r3, r0
 801cde4:	b2db      	uxtb	r3, r3
 801cde6:	f003 0303 	and.w	r3, r3, #3
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d00e      	beq.n	801ce0c <tcp_receive+0x8a0>
 801cdee:	2301      	movs	r3, #1
 801cdf0:	e00d      	b.n	801ce0e <tcp_receive+0x8a2>
 801cdf2:	bf00      	nop
 801cdf4:	20061ccc 	.word	0x20061ccc
 801cdf8:	20061cac 	.word	0x20061cac
 801cdfc:	20061cd6 	.word	0x20061cd6
 801ce00:	080260c0 	.word	0x080260c0
 801ce04:	08026468 	.word	0x08026468
 801ce08:	0802610c 	.word	0x0802610c
 801ce0c:	2300      	movs	r3, #0
 801ce0e:	4423      	add	r3, r4
 801ce10:	b29a      	uxth	r2, r3
 801ce12:	4b98      	ldr	r3, [pc, #608]	; (801d074 <tcp_receive+0xb08>)
 801ce14:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801ce16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce18:	613b      	str	r3, [r7, #16]
              next = next->next;
 801ce1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801ce20:	6938      	ldr	r0, [r7, #16]
 801ce22:	f7fd fc68 	bl	801a6f6 <tcp_seg_free>
            while (next &&
 801ce26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d00e      	beq.n	801ce4a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801ce2c:	4b91      	ldr	r3, [pc, #580]	; (801d074 <tcp_receive+0xb08>)
 801ce2e:	881b      	ldrh	r3, [r3, #0]
 801ce30:	461a      	mov	r2, r3
 801ce32:	4b91      	ldr	r3, [pc, #580]	; (801d078 <tcp_receive+0xb0c>)
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	441a      	add	r2, r3
 801ce38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce3a:	68db      	ldr	r3, [r3, #12]
 801ce3c:	685b      	ldr	r3, [r3, #4]
 801ce3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ce40:	8909      	ldrh	r1, [r1, #8]
 801ce42:	440b      	add	r3, r1
 801ce44:	1ad3      	subs	r3, r2, r3
            while (next &&
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	da9a      	bge.n	801cd80 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801ce4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d059      	beq.n	801cf04 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801ce50:	4b88      	ldr	r3, [pc, #544]	; (801d074 <tcp_receive+0xb08>)
 801ce52:	881b      	ldrh	r3, [r3, #0]
 801ce54:	461a      	mov	r2, r3
 801ce56:	4b88      	ldr	r3, [pc, #544]	; (801d078 <tcp_receive+0xb0c>)
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	441a      	add	r2, r3
 801ce5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce5e:	68db      	ldr	r3, [r3, #12]
 801ce60:	685b      	ldr	r3, [r3, #4]
 801ce62:	1ad3      	subs	r3, r2, r3
            if (next &&
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	dd4d      	ble.n	801cf04 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ce68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce6a:	68db      	ldr	r3, [r3, #12]
 801ce6c:	685b      	ldr	r3, [r3, #4]
 801ce6e:	b29a      	uxth	r2, r3
 801ce70:	4b81      	ldr	r3, [pc, #516]	; (801d078 <tcp_receive+0xb0c>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	b29b      	uxth	r3, r3
 801ce76:	1ad3      	subs	r3, r2, r3
 801ce78:	b29a      	uxth	r2, r3
 801ce7a:	4b80      	ldr	r3, [pc, #512]	; (801d07c <tcp_receive+0xb10>)
 801ce7c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ce7e:	4b7f      	ldr	r3, [pc, #508]	; (801d07c <tcp_receive+0xb10>)
 801ce80:	68db      	ldr	r3, [r3, #12]
 801ce82:	899b      	ldrh	r3, [r3, #12]
 801ce84:	b29b      	uxth	r3, r3
 801ce86:	4618      	mov	r0, r3
 801ce88:	f7fa f9f0 	bl	801726c <lwip_htons>
 801ce8c:	4603      	mov	r3, r0
 801ce8e:	b2db      	uxtb	r3, r3
 801ce90:	f003 0302 	and.w	r3, r3, #2
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d005      	beq.n	801cea4 <tcp_receive+0x938>
                inseg.len -= 1;
 801ce98:	4b78      	ldr	r3, [pc, #480]	; (801d07c <tcp_receive+0xb10>)
 801ce9a:	891b      	ldrh	r3, [r3, #8]
 801ce9c:	3b01      	subs	r3, #1
 801ce9e:	b29a      	uxth	r2, r3
 801cea0:	4b76      	ldr	r3, [pc, #472]	; (801d07c <tcp_receive+0xb10>)
 801cea2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801cea4:	4b75      	ldr	r3, [pc, #468]	; (801d07c <tcp_receive+0xb10>)
 801cea6:	685b      	ldr	r3, [r3, #4]
 801cea8:	4a74      	ldr	r2, [pc, #464]	; (801d07c <tcp_receive+0xb10>)
 801ceaa:	8912      	ldrh	r2, [r2, #8]
 801ceac:	4611      	mov	r1, r2
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f7fb fd00 	bl	80188b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801ceb4:	4b71      	ldr	r3, [pc, #452]	; (801d07c <tcp_receive+0xb10>)
 801ceb6:	891c      	ldrh	r4, [r3, #8]
 801ceb8:	4b70      	ldr	r3, [pc, #448]	; (801d07c <tcp_receive+0xb10>)
 801ceba:	68db      	ldr	r3, [r3, #12]
 801cebc:	899b      	ldrh	r3, [r3, #12]
 801cebe:	b29b      	uxth	r3, r3
 801cec0:	4618      	mov	r0, r3
 801cec2:	f7fa f9d3 	bl	801726c <lwip_htons>
 801cec6:	4603      	mov	r3, r0
 801cec8:	b2db      	uxtb	r3, r3
 801ceca:	f003 0303 	and.w	r3, r3, #3
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d001      	beq.n	801ced6 <tcp_receive+0x96a>
 801ced2:	2301      	movs	r3, #1
 801ced4:	e000      	b.n	801ced8 <tcp_receive+0x96c>
 801ced6:	2300      	movs	r3, #0
 801ced8:	4423      	add	r3, r4
 801ceda:	b29a      	uxth	r2, r3
 801cedc:	4b65      	ldr	r3, [pc, #404]	; (801d074 <tcp_receive+0xb08>)
 801cede:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cee0:	4b64      	ldr	r3, [pc, #400]	; (801d074 <tcp_receive+0xb08>)
 801cee2:	881b      	ldrh	r3, [r3, #0]
 801cee4:	461a      	mov	r2, r3
 801cee6:	4b64      	ldr	r3, [pc, #400]	; (801d078 <tcp_receive+0xb0c>)
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	441a      	add	r2, r3
 801ceec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ceee:	68db      	ldr	r3, [r3, #12]
 801cef0:	685b      	ldr	r3, [r3, #4]
 801cef2:	429a      	cmp	r2, r3
 801cef4:	d006      	beq.n	801cf04 <tcp_receive+0x998>
 801cef6:	4b62      	ldr	r3, [pc, #392]	; (801d080 <tcp_receive+0xb14>)
 801cef8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801cefc:	4961      	ldr	r1, [pc, #388]	; (801d084 <tcp_receive+0xb18>)
 801cefe:	4862      	ldr	r0, [pc, #392]	; (801d088 <tcp_receive+0xb1c>)
 801cf00:	f005 ff7a 	bl	8022df8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cf08:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801cf0a:	4b5a      	ldr	r3, [pc, #360]	; (801d074 <tcp_receive+0xb08>)
 801cf0c:	881b      	ldrh	r3, [r3, #0]
 801cf0e:	461a      	mov	r2, r3
 801cf10:	4b59      	ldr	r3, [pc, #356]	; (801d078 <tcp_receive+0xb0c>)
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	441a      	add	r2, r3
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cf1e:	4b55      	ldr	r3, [pc, #340]	; (801d074 <tcp_receive+0xb08>)
 801cf20:	881b      	ldrh	r3, [r3, #0]
 801cf22:	429a      	cmp	r2, r3
 801cf24:	d206      	bcs.n	801cf34 <tcp_receive+0x9c8>
 801cf26:	4b56      	ldr	r3, [pc, #344]	; (801d080 <tcp_receive+0xb14>)
 801cf28:	f240 6207 	movw	r2, #1543	; 0x607
 801cf2c:	4957      	ldr	r1, [pc, #348]	; (801d08c <tcp_receive+0xb20>)
 801cf2e:	4856      	ldr	r0, [pc, #344]	; (801d088 <tcp_receive+0xb1c>)
 801cf30:	f005 ff62 	bl	8022df8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cf38:	4b4e      	ldr	r3, [pc, #312]	; (801d074 <tcp_receive+0xb08>)
 801cf3a:	881b      	ldrh	r3, [r3, #0]
 801cf3c:	1ad3      	subs	r3, r2, r3
 801cf3e:	b29a      	uxth	r2, r3
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801cf44:	6878      	ldr	r0, [r7, #4]
 801cf46:	f7fc fd99 	bl	8019a7c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801cf4a:	4b4c      	ldr	r3, [pc, #304]	; (801d07c <tcp_receive+0xb10>)
 801cf4c:	685b      	ldr	r3, [r3, #4]
 801cf4e:	891b      	ldrh	r3, [r3, #8]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d006      	beq.n	801cf62 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801cf54:	4b49      	ldr	r3, [pc, #292]	; (801d07c <tcp_receive+0xb10>)
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	4a4d      	ldr	r2, [pc, #308]	; (801d090 <tcp_receive+0xb24>)
 801cf5a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801cf5c:	4b47      	ldr	r3, [pc, #284]	; (801d07c <tcp_receive+0xb10>)
 801cf5e:	2200      	movs	r2, #0
 801cf60:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cf62:	4b46      	ldr	r3, [pc, #280]	; (801d07c <tcp_receive+0xb10>)
 801cf64:	68db      	ldr	r3, [r3, #12]
 801cf66:	899b      	ldrh	r3, [r3, #12]
 801cf68:	b29b      	uxth	r3, r3
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7fa f97e 	bl	801726c <lwip_htons>
 801cf70:	4603      	mov	r3, r0
 801cf72:	b2db      	uxtb	r3, r3
 801cf74:	f003 0301 	and.w	r3, r3, #1
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	f000 80b8 	beq.w	801d0ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801cf7e:	4b45      	ldr	r3, [pc, #276]	; (801d094 <tcp_receive+0xb28>)
 801cf80:	781b      	ldrb	r3, [r3, #0]
 801cf82:	f043 0320 	orr.w	r3, r3, #32
 801cf86:	b2da      	uxtb	r2, r3
 801cf88:	4b42      	ldr	r3, [pc, #264]	; (801d094 <tcp_receive+0xb28>)
 801cf8a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801cf8c:	e0af      	b.n	801d0ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cf92:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cf98:	68db      	ldr	r3, [r3, #12]
 801cf9a:	685b      	ldr	r3, [r3, #4]
 801cf9c:	4a36      	ldr	r2, [pc, #216]	; (801d078 <tcp_receive+0xb0c>)
 801cf9e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cfa0:	68bb      	ldr	r3, [r7, #8]
 801cfa2:	891b      	ldrh	r3, [r3, #8]
 801cfa4:	461c      	mov	r4, r3
 801cfa6:	68bb      	ldr	r3, [r7, #8]
 801cfa8:	68db      	ldr	r3, [r3, #12]
 801cfaa:	899b      	ldrh	r3, [r3, #12]
 801cfac:	b29b      	uxth	r3, r3
 801cfae:	4618      	mov	r0, r3
 801cfb0:	f7fa f95c 	bl	801726c <lwip_htons>
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	b2db      	uxtb	r3, r3
 801cfb8:	f003 0303 	and.w	r3, r3, #3
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d001      	beq.n	801cfc4 <tcp_receive+0xa58>
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	e000      	b.n	801cfc6 <tcp_receive+0xa5a>
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	191a      	adds	r2, r3, r4
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfcc:	441a      	add	r2, r3
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cfd6:	461c      	mov	r4, r3
 801cfd8:	68bb      	ldr	r3, [r7, #8]
 801cfda:	891b      	ldrh	r3, [r3, #8]
 801cfdc:	461d      	mov	r5, r3
 801cfde:	68bb      	ldr	r3, [r7, #8]
 801cfe0:	68db      	ldr	r3, [r3, #12]
 801cfe2:	899b      	ldrh	r3, [r3, #12]
 801cfe4:	b29b      	uxth	r3, r3
 801cfe6:	4618      	mov	r0, r3
 801cfe8:	f7fa f940 	bl	801726c <lwip_htons>
 801cfec:	4603      	mov	r3, r0
 801cfee:	b2db      	uxtb	r3, r3
 801cff0:	f003 0303 	and.w	r3, r3, #3
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d001      	beq.n	801cffc <tcp_receive+0xa90>
 801cff8:	2301      	movs	r3, #1
 801cffa:	e000      	b.n	801cffe <tcp_receive+0xa92>
 801cffc:	2300      	movs	r3, #0
 801cffe:	442b      	add	r3, r5
 801d000:	429c      	cmp	r4, r3
 801d002:	d206      	bcs.n	801d012 <tcp_receive+0xaa6>
 801d004:	4b1e      	ldr	r3, [pc, #120]	; (801d080 <tcp_receive+0xb14>)
 801d006:	f240 622b 	movw	r2, #1579	; 0x62b
 801d00a:	4923      	ldr	r1, [pc, #140]	; (801d098 <tcp_receive+0xb2c>)
 801d00c:	481e      	ldr	r0, [pc, #120]	; (801d088 <tcp_receive+0xb1c>)
 801d00e:	f005 fef3 	bl	8022df8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d012:	68bb      	ldr	r3, [r7, #8]
 801d014:	891b      	ldrh	r3, [r3, #8]
 801d016:	461c      	mov	r4, r3
 801d018:	68bb      	ldr	r3, [r7, #8]
 801d01a:	68db      	ldr	r3, [r3, #12]
 801d01c:	899b      	ldrh	r3, [r3, #12]
 801d01e:	b29b      	uxth	r3, r3
 801d020:	4618      	mov	r0, r3
 801d022:	f7fa f923 	bl	801726c <lwip_htons>
 801d026:	4603      	mov	r3, r0
 801d028:	b2db      	uxtb	r3, r3
 801d02a:	f003 0303 	and.w	r3, r3, #3
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d001      	beq.n	801d036 <tcp_receive+0xaca>
 801d032:	2301      	movs	r3, #1
 801d034:	e000      	b.n	801d038 <tcp_receive+0xacc>
 801d036:	2300      	movs	r3, #0
 801d038:	1919      	adds	r1, r3, r4
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d03e:	b28b      	uxth	r3, r1
 801d040:	1ad3      	subs	r3, r2, r3
 801d042:	b29a      	uxth	r2, r3
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801d048:	6878      	ldr	r0, [r7, #4]
 801d04a:	f7fc fd17 	bl	8019a7c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801d04e:	68bb      	ldr	r3, [r7, #8]
 801d050:	685b      	ldr	r3, [r3, #4]
 801d052:	891b      	ldrh	r3, [r3, #8]
 801d054:	2b00      	cmp	r3, #0
 801d056:	d028      	beq.n	801d0aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801d058:	4b0d      	ldr	r3, [pc, #52]	; (801d090 <tcp_receive+0xb24>)
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d01d      	beq.n	801d09c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801d060:	4b0b      	ldr	r3, [pc, #44]	; (801d090 <tcp_receive+0xb24>)
 801d062:	681a      	ldr	r2, [r3, #0]
 801d064:	68bb      	ldr	r3, [r7, #8]
 801d066:	685b      	ldr	r3, [r3, #4]
 801d068:	4619      	mov	r1, r3
 801d06a:	4610      	mov	r0, r2
 801d06c:	f7fb fe76 	bl	8018d5c <pbuf_cat>
 801d070:	e018      	b.n	801d0a4 <tcp_receive+0xb38>
 801d072:	bf00      	nop
 801d074:	20061cd6 	.word	0x20061cd6
 801d078:	20061ccc 	.word	0x20061ccc
 801d07c:	20061cac 	.word	0x20061cac
 801d080:	080260c0 	.word	0x080260c0
 801d084:	080264a0 	.word	0x080264a0
 801d088:	0802610c 	.word	0x0802610c
 801d08c:	080264dc 	.word	0x080264dc
 801d090:	20061cdc 	.word	0x20061cdc
 801d094:	20061cd9 	.word	0x20061cd9
 801d098:	080264fc 	.word	0x080264fc
            } else {
              recv_data = cseg->p;
 801d09c:	68bb      	ldr	r3, [r7, #8]
 801d09e:	685b      	ldr	r3, [r3, #4]
 801d0a0:	4a70      	ldr	r2, [pc, #448]	; (801d264 <tcp_receive+0xcf8>)
 801d0a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801d0a4:	68bb      	ldr	r3, [r7, #8]
 801d0a6:	2200      	movs	r2, #0
 801d0a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d0aa:	68bb      	ldr	r3, [r7, #8]
 801d0ac:	68db      	ldr	r3, [r3, #12]
 801d0ae:	899b      	ldrh	r3, [r3, #12]
 801d0b0:	b29b      	uxth	r3, r3
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7fa f8da 	bl	801726c <lwip_htons>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	b2db      	uxtb	r3, r3
 801d0bc:	f003 0301 	and.w	r3, r3, #1
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d00d      	beq.n	801d0e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801d0c4:	4b68      	ldr	r3, [pc, #416]	; (801d268 <tcp_receive+0xcfc>)
 801d0c6:	781b      	ldrb	r3, [r3, #0]
 801d0c8:	f043 0320 	orr.w	r3, r3, #32
 801d0cc:	b2da      	uxtb	r2, r3
 801d0ce:	4b66      	ldr	r3, [pc, #408]	; (801d268 <tcp_receive+0xcfc>)
 801d0d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	7d1b      	ldrb	r3, [r3, #20]
 801d0d6:	2b04      	cmp	r3, #4
 801d0d8:	d102      	bne.n	801d0e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	2207      	movs	r2, #7
 801d0de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801d0e0:	68bb      	ldr	r3, [r7, #8]
 801d0e2:	681a      	ldr	r2, [r3, #0]
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801d0e8:	68b8      	ldr	r0, [r7, #8]
 801d0ea:	f7fd fb04 	bl	801a6f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d008      	beq.n	801d108 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0fa:	68db      	ldr	r3, [r3, #12]
 801d0fc:	685a      	ldr	r2, [r3, #4]
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801d102:	429a      	cmp	r2, r3
 801d104:	f43f af43 	beq.w	801cf8e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	8b5b      	ldrh	r3, [r3, #26]
 801d10c:	f003 0301 	and.w	r3, r3, #1
 801d110:	2b00      	cmp	r3, #0
 801d112:	d00e      	beq.n	801d132 <tcp_receive+0xbc6>
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	8b5b      	ldrh	r3, [r3, #26]
 801d118:	f023 0301 	bic.w	r3, r3, #1
 801d11c:	b29a      	uxth	r2, r3
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	835a      	strh	r2, [r3, #26]
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	8b5b      	ldrh	r3, [r3, #26]
 801d126:	f043 0302 	orr.w	r3, r3, #2
 801d12a:	b29a      	uxth	r2, r3
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d130:	e188      	b.n	801d444 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	8b5b      	ldrh	r3, [r3, #26]
 801d136:	f043 0301 	orr.w	r3, r3, #1
 801d13a:	b29a      	uxth	r2, r3
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d140:	e180      	b.n	801d444 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d146:	2b00      	cmp	r3, #0
 801d148:	d106      	bne.n	801d158 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d14a:	4848      	ldr	r0, [pc, #288]	; (801d26c <tcp_receive+0xd00>)
 801d14c:	f7fd faec 	bl	801a728 <tcp_seg_copy>
 801d150:	4602      	mov	r2, r0
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	675a      	str	r2, [r3, #116]	; 0x74
 801d156:	e16d      	b.n	801d434 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d158:	2300      	movs	r3, #0
 801d15a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d160:	63bb      	str	r3, [r7, #56]	; 0x38
 801d162:	e157      	b.n	801d414 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d166:	68db      	ldr	r3, [r3, #12]
 801d168:	685a      	ldr	r2, [r3, #4]
 801d16a:	4b41      	ldr	r3, [pc, #260]	; (801d270 <tcp_receive+0xd04>)
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	429a      	cmp	r2, r3
 801d170:	d11d      	bne.n	801d1ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d172:	4b3e      	ldr	r3, [pc, #248]	; (801d26c <tcp_receive+0xd00>)
 801d174:	891a      	ldrh	r2, [r3, #8]
 801d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d178:	891b      	ldrh	r3, [r3, #8]
 801d17a:	429a      	cmp	r2, r3
 801d17c:	f240 814f 	bls.w	801d41e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d180:	483a      	ldr	r0, [pc, #232]	; (801d26c <tcp_receive+0xd00>)
 801d182:	f7fd fad1 	bl	801a728 <tcp_seg_copy>
 801d186:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d188:	697b      	ldr	r3, [r7, #20]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	f000 8149 	beq.w	801d422 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801d190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d192:	2b00      	cmp	r3, #0
 801d194:	d003      	beq.n	801d19e <tcp_receive+0xc32>
                    prev->next = cseg;
 801d196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d198:	697a      	ldr	r2, [r7, #20]
 801d19a:	601a      	str	r2, [r3, #0]
 801d19c:	e002      	b.n	801d1a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	697a      	ldr	r2, [r7, #20]
 801d1a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d1a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d1a6:	6978      	ldr	r0, [r7, #20]
 801d1a8:	f7ff f8dc 	bl	801c364 <tcp_oos_insert_segment>
                }
                break;
 801d1ac:	e139      	b.n	801d422 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d117      	bne.n	801d1e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d1b4:	4b2e      	ldr	r3, [pc, #184]	; (801d270 <tcp_receive+0xd04>)
 801d1b6:	681a      	ldr	r2, [r3, #0]
 801d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1ba:	68db      	ldr	r3, [r3, #12]
 801d1bc:	685b      	ldr	r3, [r3, #4]
 801d1be:	1ad3      	subs	r3, r2, r3
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	da57      	bge.n	801d274 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d1c4:	4829      	ldr	r0, [pc, #164]	; (801d26c <tcp_receive+0xd00>)
 801d1c6:	f7fd faaf 	bl	801a728 <tcp_seg_copy>
 801d1ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d1cc:	69bb      	ldr	r3, [r7, #24]
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	f000 8129 	beq.w	801d426 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	69ba      	ldr	r2, [r7, #24]
 801d1d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d1da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d1dc:	69b8      	ldr	r0, [r7, #24]
 801d1de:	f7ff f8c1 	bl	801c364 <tcp_oos_insert_segment>
                  }
                  break;
 801d1e2:	e120      	b.n	801d426 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d1e4:	4b22      	ldr	r3, [pc, #136]	; (801d270 <tcp_receive+0xd04>)
 801d1e6:	681a      	ldr	r2, [r3, #0]
 801d1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1ea:	68db      	ldr	r3, [r3, #12]
 801d1ec:	685b      	ldr	r3, [r3, #4]
 801d1ee:	1ad3      	subs	r3, r2, r3
 801d1f0:	3b01      	subs	r3, #1
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	db3e      	blt.n	801d274 <tcp_receive+0xd08>
 801d1f6:	4b1e      	ldr	r3, [pc, #120]	; (801d270 <tcp_receive+0xd04>)
 801d1f8:	681a      	ldr	r2, [r3, #0]
 801d1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1fc:	68db      	ldr	r3, [r3, #12]
 801d1fe:	685b      	ldr	r3, [r3, #4]
 801d200:	1ad3      	subs	r3, r2, r3
 801d202:	3301      	adds	r3, #1
 801d204:	2b00      	cmp	r3, #0
 801d206:	dc35      	bgt.n	801d274 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d208:	4818      	ldr	r0, [pc, #96]	; (801d26c <tcp_receive+0xd00>)
 801d20a:	f7fd fa8d 	bl	801a728 <tcp_seg_copy>
 801d20e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801d210:	69fb      	ldr	r3, [r7, #28]
 801d212:	2b00      	cmp	r3, #0
 801d214:	f000 8109 	beq.w	801d42a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d21a:	68db      	ldr	r3, [r3, #12]
 801d21c:	685b      	ldr	r3, [r3, #4]
 801d21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d220:	8912      	ldrh	r2, [r2, #8]
 801d222:	441a      	add	r2, r3
 801d224:	4b12      	ldr	r3, [pc, #72]	; (801d270 <tcp_receive+0xd04>)
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	1ad3      	subs	r3, r2, r3
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	dd12      	ble.n	801d254 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d22e:	4b10      	ldr	r3, [pc, #64]	; (801d270 <tcp_receive+0xd04>)
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	b29a      	uxth	r2, r3
 801d234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d236:	68db      	ldr	r3, [r3, #12]
 801d238:	685b      	ldr	r3, [r3, #4]
 801d23a:	b29b      	uxth	r3, r3
 801d23c:	1ad3      	subs	r3, r2, r3
 801d23e:	b29a      	uxth	r2, r3
 801d240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d242:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d246:	685a      	ldr	r2, [r3, #4]
 801d248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d24a:	891b      	ldrh	r3, [r3, #8]
 801d24c:	4619      	mov	r1, r3
 801d24e:	4610      	mov	r0, r2
 801d250:	f7fb fb30 	bl	80188b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801d254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d256:	69fa      	ldr	r2, [r7, #28]
 801d258:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801d25a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d25c:	69f8      	ldr	r0, [r7, #28]
 801d25e:	f7ff f881 	bl	801c364 <tcp_oos_insert_segment>
                  }
                  break;
 801d262:	e0e2      	b.n	801d42a <tcp_receive+0xebe>
 801d264:	20061cdc 	.word	0x20061cdc
 801d268:	20061cd9 	.word	0x20061cd9
 801d26c:	20061cac 	.word	0x20061cac
 801d270:	20061ccc 	.word	0x20061ccc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801d274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d276:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	f040 80c6 	bne.w	801d40e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d282:	4b80      	ldr	r3, [pc, #512]	; (801d484 <tcp_receive+0xf18>)
 801d284:	681a      	ldr	r2, [r3, #0]
 801d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d288:	68db      	ldr	r3, [r3, #12]
 801d28a:	685b      	ldr	r3, [r3, #4]
 801d28c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801d28e:	2b00      	cmp	r3, #0
 801d290:	f340 80bd 	ble.w	801d40e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d296:	68db      	ldr	r3, [r3, #12]
 801d298:	899b      	ldrh	r3, [r3, #12]
 801d29a:	b29b      	uxth	r3, r3
 801d29c:	4618      	mov	r0, r3
 801d29e:	f7f9 ffe5 	bl	801726c <lwip_htons>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	b2db      	uxtb	r3, r3
 801d2a6:	f003 0301 	and.w	r3, r3, #1
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	f040 80bf 	bne.w	801d42e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d2b0:	4875      	ldr	r0, [pc, #468]	; (801d488 <tcp_receive+0xf1c>)
 801d2b2:	f7fd fa39 	bl	801a728 <tcp_seg_copy>
 801d2b6:	4602      	mov	r2, r0
 801d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	f000 80b6 	beq.w	801d432 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2c8:	68db      	ldr	r3, [r3, #12]
 801d2ca:	685b      	ldr	r3, [r3, #4]
 801d2cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d2ce:	8912      	ldrh	r2, [r2, #8]
 801d2d0:	441a      	add	r2, r3
 801d2d2:	4b6c      	ldr	r3, [pc, #432]	; (801d484 <tcp_receive+0xf18>)
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	1ad3      	subs	r3, r2, r3
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	dd12      	ble.n	801d302 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d2dc:	4b69      	ldr	r3, [pc, #420]	; (801d484 <tcp_receive+0xf18>)
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	b29a      	uxth	r2, r3
 801d2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2e4:	68db      	ldr	r3, [r3, #12]
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	b29b      	uxth	r3, r3
 801d2ea:	1ad3      	subs	r3, r2, r3
 801d2ec:	b29a      	uxth	r2, r3
 801d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2f4:	685a      	ldr	r2, [r3, #4]
 801d2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2f8:	891b      	ldrh	r3, [r3, #8]
 801d2fa:	4619      	mov	r1, r3
 801d2fc:	4610      	mov	r0, r2
 801d2fe:	f7fb fad9 	bl	80188b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d302:	4b62      	ldr	r3, [pc, #392]	; (801d48c <tcp_receive+0xf20>)
 801d304:	881b      	ldrh	r3, [r3, #0]
 801d306:	461a      	mov	r2, r3
 801d308:	4b5e      	ldr	r3, [pc, #376]	; (801d484 <tcp_receive+0xf18>)
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	441a      	add	r2, r3
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d312:	6879      	ldr	r1, [r7, #4]
 801d314:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d316:	440b      	add	r3, r1
 801d318:	1ad3      	subs	r3, r2, r3
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	f340 8089 	ble.w	801d432 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	68db      	ldr	r3, [r3, #12]
 801d326:	899b      	ldrh	r3, [r3, #12]
 801d328:	b29b      	uxth	r3, r3
 801d32a:	4618      	mov	r0, r3
 801d32c:	f7f9 ff9e 	bl	801726c <lwip_htons>
 801d330:	4603      	mov	r3, r0
 801d332:	b2db      	uxtb	r3, r3
 801d334:	f003 0301 	and.w	r3, r3, #1
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d022      	beq.n	801d382 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	68db      	ldr	r3, [r3, #12]
 801d342:	899b      	ldrh	r3, [r3, #12]
 801d344:	b29b      	uxth	r3, r3
 801d346:	b21b      	sxth	r3, r3
 801d348:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d34c:	b21c      	sxth	r4, r3
 801d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	68db      	ldr	r3, [r3, #12]
 801d354:	899b      	ldrh	r3, [r3, #12]
 801d356:	b29b      	uxth	r3, r3
 801d358:	4618      	mov	r0, r3
 801d35a:	f7f9 ff87 	bl	801726c <lwip_htons>
 801d35e:	4603      	mov	r3, r0
 801d360:	b2db      	uxtb	r3, r3
 801d362:	b29b      	uxth	r3, r3
 801d364:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d368:	b29b      	uxth	r3, r3
 801d36a:	4618      	mov	r0, r3
 801d36c:	f7f9 ff7e 	bl	801726c <lwip_htons>
 801d370:	4603      	mov	r3, r0
 801d372:	b21b      	sxth	r3, r3
 801d374:	4323      	orrs	r3, r4
 801d376:	b21a      	sxth	r2, r3
 801d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	68db      	ldr	r3, [r3, #12]
 801d37e:	b292      	uxth	r2, r2
 801d380:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d386:	b29a      	uxth	r2, r3
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d38c:	4413      	add	r3, r2
 801d38e:	b299      	uxth	r1, r3
 801d390:	4b3c      	ldr	r3, [pc, #240]	; (801d484 <tcp_receive+0xf18>)
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	b29a      	uxth	r2, r3
 801d396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	1a8a      	subs	r2, r1, r2
 801d39c:	b292      	uxth	r2, r2
 801d39e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	685a      	ldr	r2, [r3, #4]
 801d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	891b      	ldrh	r3, [r3, #8]
 801d3ac:	4619      	mov	r1, r3
 801d3ae:	4610      	mov	r0, r2
 801d3b0:	f7fb fa80 	bl	80188b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	891c      	ldrh	r4, [r3, #8]
 801d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	68db      	ldr	r3, [r3, #12]
 801d3c0:	899b      	ldrh	r3, [r3, #12]
 801d3c2:	b29b      	uxth	r3, r3
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f7f9 ff51 	bl	801726c <lwip_htons>
 801d3ca:	4603      	mov	r3, r0
 801d3cc:	b2db      	uxtb	r3, r3
 801d3ce:	f003 0303 	and.w	r3, r3, #3
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d001      	beq.n	801d3da <tcp_receive+0xe6e>
 801d3d6:	2301      	movs	r3, #1
 801d3d8:	e000      	b.n	801d3dc <tcp_receive+0xe70>
 801d3da:	2300      	movs	r3, #0
 801d3dc:	4423      	add	r3, r4
 801d3de:	b29a      	uxth	r2, r3
 801d3e0:	4b2a      	ldr	r3, [pc, #168]	; (801d48c <tcp_receive+0xf20>)
 801d3e2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d3e4:	4b29      	ldr	r3, [pc, #164]	; (801d48c <tcp_receive+0xf20>)
 801d3e6:	881b      	ldrh	r3, [r3, #0]
 801d3e8:	461a      	mov	r2, r3
 801d3ea:	4b26      	ldr	r3, [pc, #152]	; (801d484 <tcp_receive+0xf18>)
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	441a      	add	r2, r3
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3f4:	6879      	ldr	r1, [r7, #4]
 801d3f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d3f8:	440b      	add	r3, r1
 801d3fa:	429a      	cmp	r2, r3
 801d3fc:	d019      	beq.n	801d432 <tcp_receive+0xec6>
 801d3fe:	4b24      	ldr	r3, [pc, #144]	; (801d490 <tcp_receive+0xf24>)
 801d400:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d404:	4923      	ldr	r1, [pc, #140]	; (801d494 <tcp_receive+0xf28>)
 801d406:	4824      	ldr	r0, [pc, #144]	; (801d498 <tcp_receive+0xf2c>)
 801d408:	f005 fcf6 	bl	8022df8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d40c:	e011      	b.n	801d432 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	63bb      	str	r3, [r7, #56]	; 0x38
 801d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d416:	2b00      	cmp	r3, #0
 801d418:	f47f aea4 	bne.w	801d164 <tcp_receive+0xbf8>
 801d41c:	e00a      	b.n	801d434 <tcp_receive+0xec8>
                break;
 801d41e:	bf00      	nop
 801d420:	e008      	b.n	801d434 <tcp_receive+0xec8>
                break;
 801d422:	bf00      	nop
 801d424:	e006      	b.n	801d434 <tcp_receive+0xec8>
                  break;
 801d426:	bf00      	nop
 801d428:	e004      	b.n	801d434 <tcp_receive+0xec8>
                  break;
 801d42a:	bf00      	nop
 801d42c:	e002      	b.n	801d434 <tcp_receive+0xec8>
                  break;
 801d42e:	bf00      	nop
 801d430:	e000      	b.n	801d434 <tcp_receive+0xec8>
                break;
 801d432:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d434:	6878      	ldr	r0, [r7, #4]
 801d436:	f001 fe8b 	bl	801f150 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d43a:	e003      	b.n	801d444 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d43c:	6878      	ldr	r0, [r7, #4]
 801d43e:	f001 fe87 	bl	801f150 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d442:	e01a      	b.n	801d47a <tcp_receive+0xf0e>
 801d444:	e019      	b.n	801d47a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d446:	4b0f      	ldr	r3, [pc, #60]	; (801d484 <tcp_receive+0xf18>)
 801d448:	681a      	ldr	r2, [r3, #0]
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d44e:	1ad3      	subs	r3, r2, r3
 801d450:	2b00      	cmp	r3, #0
 801d452:	db0a      	blt.n	801d46a <tcp_receive+0xefe>
 801d454:	4b0b      	ldr	r3, [pc, #44]	; (801d484 <tcp_receive+0xf18>)
 801d456:	681a      	ldr	r2, [r3, #0]
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d45c:	6879      	ldr	r1, [r7, #4]
 801d45e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d460:	440b      	add	r3, r1
 801d462:	1ad3      	subs	r3, r2, r3
 801d464:	3301      	adds	r3, #1
 801d466:	2b00      	cmp	r3, #0
 801d468:	dd07      	ble.n	801d47a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	8b5b      	ldrh	r3, [r3, #26]
 801d46e:	f043 0302 	orr.w	r3, r3, #2
 801d472:	b29a      	uxth	r2, r3
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d478:	e7ff      	b.n	801d47a <tcp_receive+0xf0e>
 801d47a:	bf00      	nop
 801d47c:	3750      	adds	r7, #80	; 0x50
 801d47e:	46bd      	mov	sp, r7
 801d480:	bdb0      	pop	{r4, r5, r7, pc}
 801d482:	bf00      	nop
 801d484:	20061ccc 	.word	0x20061ccc
 801d488:	20061cac 	.word	0x20061cac
 801d48c:	20061cd6 	.word	0x20061cd6
 801d490:	080260c0 	.word	0x080260c0
 801d494:	08026468 	.word	0x08026468
 801d498:	0802610c 	.word	0x0802610c

0801d49c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d49c:	b480      	push	{r7}
 801d49e:	b083      	sub	sp, #12
 801d4a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d4a2:	4b15      	ldr	r3, [pc, #84]	; (801d4f8 <tcp_get_next_optbyte+0x5c>)
 801d4a4:	881b      	ldrh	r3, [r3, #0]
 801d4a6:	1c5a      	adds	r2, r3, #1
 801d4a8:	b291      	uxth	r1, r2
 801d4aa:	4a13      	ldr	r2, [pc, #76]	; (801d4f8 <tcp_get_next_optbyte+0x5c>)
 801d4ac:	8011      	strh	r1, [r2, #0]
 801d4ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d4b0:	4b12      	ldr	r3, [pc, #72]	; (801d4fc <tcp_get_next_optbyte+0x60>)
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d004      	beq.n	801d4c2 <tcp_get_next_optbyte+0x26>
 801d4b8:	4b11      	ldr	r3, [pc, #68]	; (801d500 <tcp_get_next_optbyte+0x64>)
 801d4ba:	881b      	ldrh	r3, [r3, #0]
 801d4bc:	88fa      	ldrh	r2, [r7, #6]
 801d4be:	429a      	cmp	r2, r3
 801d4c0:	d208      	bcs.n	801d4d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d4c2:	4b10      	ldr	r3, [pc, #64]	; (801d504 <tcp_get_next_optbyte+0x68>)
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	3314      	adds	r3, #20
 801d4c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d4ca:	88fb      	ldrh	r3, [r7, #6]
 801d4cc:	683a      	ldr	r2, [r7, #0]
 801d4ce:	4413      	add	r3, r2
 801d4d0:	781b      	ldrb	r3, [r3, #0]
 801d4d2:	e00b      	b.n	801d4ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d4d4:	88fb      	ldrh	r3, [r7, #6]
 801d4d6:	b2da      	uxtb	r2, r3
 801d4d8:	4b09      	ldr	r3, [pc, #36]	; (801d500 <tcp_get_next_optbyte+0x64>)
 801d4da:	881b      	ldrh	r3, [r3, #0]
 801d4dc:	b2db      	uxtb	r3, r3
 801d4de:	1ad3      	subs	r3, r2, r3
 801d4e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d4e2:	4b06      	ldr	r3, [pc, #24]	; (801d4fc <tcp_get_next_optbyte+0x60>)
 801d4e4:	681a      	ldr	r2, [r3, #0]
 801d4e6:	797b      	ldrb	r3, [r7, #5]
 801d4e8:	4413      	add	r3, r2
 801d4ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	370c      	adds	r7, #12
 801d4f0:	46bd      	mov	sp, r7
 801d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f6:	4770      	bx	lr
 801d4f8:	20061cc8 	.word	0x20061cc8
 801d4fc:	20061cc4 	.word	0x20061cc4
 801d500:	20061cc2 	.word	0x20061cc2
 801d504:	20061cbc 	.word	0x20061cbc

0801d508 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d508:	b580      	push	{r7, lr}
 801d50a:	b084      	sub	sp, #16
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d106      	bne.n	801d524 <tcp_parseopt+0x1c>
 801d516:	4b32      	ldr	r3, [pc, #200]	; (801d5e0 <tcp_parseopt+0xd8>)
 801d518:	f240 727d 	movw	r2, #1917	; 0x77d
 801d51c:	4931      	ldr	r1, [pc, #196]	; (801d5e4 <tcp_parseopt+0xdc>)
 801d51e:	4832      	ldr	r0, [pc, #200]	; (801d5e8 <tcp_parseopt+0xe0>)
 801d520:	f005 fc6a 	bl	8022df8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d524:	4b31      	ldr	r3, [pc, #196]	; (801d5ec <tcp_parseopt+0xe4>)
 801d526:	881b      	ldrh	r3, [r3, #0]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d055      	beq.n	801d5d8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d52c:	4b30      	ldr	r3, [pc, #192]	; (801d5f0 <tcp_parseopt+0xe8>)
 801d52e:	2200      	movs	r2, #0
 801d530:	801a      	strh	r2, [r3, #0]
 801d532:	e045      	b.n	801d5c0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d534:	f7ff ffb2 	bl	801d49c <tcp_get_next_optbyte>
 801d538:	4603      	mov	r3, r0
 801d53a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d53c:	7bfb      	ldrb	r3, [r7, #15]
 801d53e:	2b02      	cmp	r3, #2
 801d540:	d006      	beq.n	801d550 <tcp_parseopt+0x48>
 801d542:	2b02      	cmp	r3, #2
 801d544:	dc2b      	bgt.n	801d59e <tcp_parseopt+0x96>
 801d546:	2b00      	cmp	r3, #0
 801d548:	d041      	beq.n	801d5ce <tcp_parseopt+0xc6>
 801d54a:	2b01      	cmp	r3, #1
 801d54c:	d127      	bne.n	801d59e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d54e:	e037      	b.n	801d5c0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d550:	f7ff ffa4 	bl	801d49c <tcp_get_next_optbyte>
 801d554:	4603      	mov	r3, r0
 801d556:	2b04      	cmp	r3, #4
 801d558:	d13b      	bne.n	801d5d2 <tcp_parseopt+0xca>
 801d55a:	4b25      	ldr	r3, [pc, #148]	; (801d5f0 <tcp_parseopt+0xe8>)
 801d55c:	881b      	ldrh	r3, [r3, #0]
 801d55e:	3301      	adds	r3, #1
 801d560:	4a22      	ldr	r2, [pc, #136]	; (801d5ec <tcp_parseopt+0xe4>)
 801d562:	8812      	ldrh	r2, [r2, #0]
 801d564:	4293      	cmp	r3, r2
 801d566:	da34      	bge.n	801d5d2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d568:	f7ff ff98 	bl	801d49c <tcp_get_next_optbyte>
 801d56c:	4603      	mov	r3, r0
 801d56e:	b29b      	uxth	r3, r3
 801d570:	021b      	lsls	r3, r3, #8
 801d572:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d574:	f7ff ff92 	bl	801d49c <tcp_get_next_optbyte>
 801d578:	4603      	mov	r3, r0
 801d57a:	b29a      	uxth	r2, r3
 801d57c:	89bb      	ldrh	r3, [r7, #12]
 801d57e:	4313      	orrs	r3, r2
 801d580:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d582:	89bb      	ldrh	r3, [r7, #12]
 801d584:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d588:	d804      	bhi.n	801d594 <tcp_parseopt+0x8c>
 801d58a:	89bb      	ldrh	r3, [r7, #12]
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d001      	beq.n	801d594 <tcp_parseopt+0x8c>
 801d590:	89ba      	ldrh	r2, [r7, #12]
 801d592:	e001      	b.n	801d598 <tcp_parseopt+0x90>
 801d594:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d59c:	e010      	b.n	801d5c0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d59e:	f7ff ff7d 	bl	801d49c <tcp_get_next_optbyte>
 801d5a2:	4603      	mov	r3, r0
 801d5a4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d5a6:	7afb      	ldrb	r3, [r7, #11]
 801d5a8:	2b01      	cmp	r3, #1
 801d5aa:	d914      	bls.n	801d5d6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d5ac:	7afb      	ldrb	r3, [r7, #11]
 801d5ae:	b29a      	uxth	r2, r3
 801d5b0:	4b0f      	ldr	r3, [pc, #60]	; (801d5f0 <tcp_parseopt+0xe8>)
 801d5b2:	881b      	ldrh	r3, [r3, #0]
 801d5b4:	4413      	add	r3, r2
 801d5b6:	b29b      	uxth	r3, r3
 801d5b8:	3b02      	subs	r3, #2
 801d5ba:	b29a      	uxth	r2, r3
 801d5bc:	4b0c      	ldr	r3, [pc, #48]	; (801d5f0 <tcp_parseopt+0xe8>)
 801d5be:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d5c0:	4b0b      	ldr	r3, [pc, #44]	; (801d5f0 <tcp_parseopt+0xe8>)
 801d5c2:	881a      	ldrh	r2, [r3, #0]
 801d5c4:	4b09      	ldr	r3, [pc, #36]	; (801d5ec <tcp_parseopt+0xe4>)
 801d5c6:	881b      	ldrh	r3, [r3, #0]
 801d5c8:	429a      	cmp	r2, r3
 801d5ca:	d3b3      	bcc.n	801d534 <tcp_parseopt+0x2c>
 801d5cc:	e004      	b.n	801d5d8 <tcp_parseopt+0xd0>
          return;
 801d5ce:	bf00      	nop
 801d5d0:	e002      	b.n	801d5d8 <tcp_parseopt+0xd0>
            return;
 801d5d2:	bf00      	nop
 801d5d4:	e000      	b.n	801d5d8 <tcp_parseopt+0xd0>
            return;
 801d5d6:	bf00      	nop
      }
    }
  }
}
 801d5d8:	3710      	adds	r7, #16
 801d5da:	46bd      	mov	sp, r7
 801d5dc:	bd80      	pop	{r7, pc}
 801d5de:	bf00      	nop
 801d5e0:	080260c0 	.word	0x080260c0
 801d5e4:	08026524 	.word	0x08026524
 801d5e8:	0802610c 	.word	0x0802610c
 801d5ec:	20061cc0 	.word	0x20061cc0
 801d5f0:	20061cc8 	.word	0x20061cc8

0801d5f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d5f4:	b480      	push	{r7}
 801d5f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d5f8:	4b05      	ldr	r3, [pc, #20]	; (801d610 <tcp_trigger_input_pcb_close+0x1c>)
 801d5fa:	781b      	ldrb	r3, [r3, #0]
 801d5fc:	f043 0310 	orr.w	r3, r3, #16
 801d600:	b2da      	uxtb	r2, r3
 801d602:	4b03      	ldr	r3, [pc, #12]	; (801d610 <tcp_trigger_input_pcb_close+0x1c>)
 801d604:	701a      	strb	r2, [r3, #0]
}
 801d606:	bf00      	nop
 801d608:	46bd      	mov	sp, r7
 801d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d60e:	4770      	bx	lr
 801d610:	20061cd9 	.word	0x20061cd9

0801d614 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d614:	b580      	push	{r7, lr}
 801d616:	b084      	sub	sp, #16
 801d618:	af00      	add	r7, sp, #0
 801d61a:	60f8      	str	r0, [r7, #12]
 801d61c:	60b9      	str	r1, [r7, #8]
 801d61e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d620:	68fb      	ldr	r3, [r7, #12]
 801d622:	2b00      	cmp	r3, #0
 801d624:	d00a      	beq.n	801d63c <tcp_route+0x28>
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	7a1b      	ldrb	r3, [r3, #8]
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d006      	beq.n	801d63c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	7a1b      	ldrb	r3, [r3, #8]
 801d632:	4618      	mov	r0, r3
 801d634:	f7fa ff36 	bl	80184a4 <netif_get_by_index>
 801d638:	4603      	mov	r3, r0
 801d63a:	e003      	b.n	801d644 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d63c:	6878      	ldr	r0, [r7, #4]
 801d63e:	f003 fcdf 	bl	8021000 <ip4_route>
 801d642:	4603      	mov	r3, r0
  }
}
 801d644:	4618      	mov	r0, r3
 801d646:	3710      	adds	r7, #16
 801d648:	46bd      	mov	sp, r7
 801d64a:	bd80      	pop	{r7, pc}

0801d64c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d64c:	b590      	push	{r4, r7, lr}
 801d64e:	b087      	sub	sp, #28
 801d650:	af00      	add	r7, sp, #0
 801d652:	60f8      	str	r0, [r7, #12]
 801d654:	60b9      	str	r1, [r7, #8]
 801d656:	603b      	str	r3, [r7, #0]
 801d658:	4613      	mov	r3, r2
 801d65a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d105      	bne.n	801d66e <tcp_create_segment+0x22>
 801d662:	4b44      	ldr	r3, [pc, #272]	; (801d774 <tcp_create_segment+0x128>)
 801d664:	22a3      	movs	r2, #163	; 0xa3
 801d666:	4944      	ldr	r1, [pc, #272]	; (801d778 <tcp_create_segment+0x12c>)
 801d668:	4844      	ldr	r0, [pc, #272]	; (801d77c <tcp_create_segment+0x130>)
 801d66a:	f005 fbc5 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d66e:	68bb      	ldr	r3, [r7, #8]
 801d670:	2b00      	cmp	r3, #0
 801d672:	d105      	bne.n	801d680 <tcp_create_segment+0x34>
 801d674:	4b3f      	ldr	r3, [pc, #252]	; (801d774 <tcp_create_segment+0x128>)
 801d676:	22a4      	movs	r2, #164	; 0xa4
 801d678:	4941      	ldr	r1, [pc, #260]	; (801d780 <tcp_create_segment+0x134>)
 801d67a:	4840      	ldr	r0, [pc, #256]	; (801d77c <tcp_create_segment+0x130>)
 801d67c:	f005 fbbc 	bl	8022df8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d680:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d684:	009b      	lsls	r3, r3, #2
 801d686:	b2db      	uxtb	r3, r3
 801d688:	f003 0304 	and.w	r3, r3, #4
 801d68c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d68e:	2003      	movs	r0, #3
 801d690:	f7fa fb7c 	bl	8017d8c <memp_malloc>
 801d694:	6138      	str	r0, [r7, #16]
 801d696:	693b      	ldr	r3, [r7, #16]
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d104      	bne.n	801d6a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d69c:	68b8      	ldr	r0, [r7, #8]
 801d69e:	f7fb fa8f 	bl	8018bc0 <pbuf_free>
    return NULL;
 801d6a2:	2300      	movs	r3, #0
 801d6a4:	e061      	b.n	801d76a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d6a6:	693b      	ldr	r3, [r7, #16]
 801d6a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d6ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d6ae:	693b      	ldr	r3, [r7, #16]
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d6b4:	693b      	ldr	r3, [r7, #16]
 801d6b6:	68ba      	ldr	r2, [r7, #8]
 801d6b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d6ba:	68bb      	ldr	r3, [r7, #8]
 801d6bc:	891a      	ldrh	r2, [r3, #8]
 801d6be:	7dfb      	ldrb	r3, [r7, #23]
 801d6c0:	b29b      	uxth	r3, r3
 801d6c2:	429a      	cmp	r2, r3
 801d6c4:	d205      	bcs.n	801d6d2 <tcp_create_segment+0x86>
 801d6c6:	4b2b      	ldr	r3, [pc, #172]	; (801d774 <tcp_create_segment+0x128>)
 801d6c8:	22b0      	movs	r2, #176	; 0xb0
 801d6ca:	492e      	ldr	r1, [pc, #184]	; (801d784 <tcp_create_segment+0x138>)
 801d6cc:	482b      	ldr	r0, [pc, #172]	; (801d77c <tcp_create_segment+0x130>)
 801d6ce:	f005 fb93 	bl	8022df8 <iprintf>
  seg->len = p->tot_len - optlen;
 801d6d2:	68bb      	ldr	r3, [r7, #8]
 801d6d4:	891a      	ldrh	r2, [r3, #8]
 801d6d6:	7dfb      	ldrb	r3, [r7, #23]
 801d6d8:	b29b      	uxth	r3, r3
 801d6da:	1ad3      	subs	r3, r2, r3
 801d6dc:	b29a      	uxth	r2, r3
 801d6de:	693b      	ldr	r3, [r7, #16]
 801d6e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d6e2:	2114      	movs	r1, #20
 801d6e4:	68b8      	ldr	r0, [r7, #8]
 801d6e6:	f7fb f9d5 	bl	8018a94 <pbuf_add_header>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d004      	beq.n	801d6fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d6f0:	6938      	ldr	r0, [r7, #16]
 801d6f2:	f7fd f800 	bl	801a6f6 <tcp_seg_free>
    return NULL;
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	e037      	b.n	801d76a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d6fa:	693b      	ldr	r3, [r7, #16]
 801d6fc:	685b      	ldr	r3, [r3, #4]
 801d6fe:	685a      	ldr	r2, [r3, #4]
 801d700:	693b      	ldr	r3, [r7, #16]
 801d702:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	8ada      	ldrh	r2, [r3, #22]
 801d708:	693b      	ldr	r3, [r7, #16]
 801d70a:	68dc      	ldr	r4, [r3, #12]
 801d70c:	4610      	mov	r0, r2
 801d70e:	f7f9 fdad 	bl	801726c <lwip_htons>
 801d712:	4603      	mov	r3, r0
 801d714:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	8b1a      	ldrh	r2, [r3, #24]
 801d71a:	693b      	ldr	r3, [r7, #16]
 801d71c:	68dc      	ldr	r4, [r3, #12]
 801d71e:	4610      	mov	r0, r2
 801d720:	f7f9 fda4 	bl	801726c <lwip_htons>
 801d724:	4603      	mov	r3, r0
 801d726:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d728:	693b      	ldr	r3, [r7, #16]
 801d72a:	68dc      	ldr	r4, [r3, #12]
 801d72c:	6838      	ldr	r0, [r7, #0]
 801d72e:	f7f9 fdb2 	bl	8017296 <lwip_htonl>
 801d732:	4603      	mov	r3, r0
 801d734:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d736:	7dfb      	ldrb	r3, [r7, #23]
 801d738:	089b      	lsrs	r3, r3, #2
 801d73a:	b2db      	uxtb	r3, r3
 801d73c:	b29b      	uxth	r3, r3
 801d73e:	3305      	adds	r3, #5
 801d740:	b29b      	uxth	r3, r3
 801d742:	031b      	lsls	r3, r3, #12
 801d744:	b29a      	uxth	r2, r3
 801d746:	79fb      	ldrb	r3, [r7, #7]
 801d748:	b29b      	uxth	r3, r3
 801d74a:	4313      	orrs	r3, r2
 801d74c:	b29a      	uxth	r2, r3
 801d74e:	693b      	ldr	r3, [r7, #16]
 801d750:	68dc      	ldr	r4, [r3, #12]
 801d752:	4610      	mov	r0, r2
 801d754:	f7f9 fd8a 	bl	801726c <lwip_htons>
 801d758:	4603      	mov	r3, r0
 801d75a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d75c:	693b      	ldr	r3, [r7, #16]
 801d75e:	68db      	ldr	r3, [r3, #12]
 801d760:	2200      	movs	r2, #0
 801d762:	749a      	strb	r2, [r3, #18]
 801d764:	2200      	movs	r2, #0
 801d766:	74da      	strb	r2, [r3, #19]
  return seg;
 801d768:	693b      	ldr	r3, [r7, #16]
}
 801d76a:	4618      	mov	r0, r3
 801d76c:	371c      	adds	r7, #28
 801d76e:	46bd      	mov	sp, r7
 801d770:	bd90      	pop	{r4, r7, pc}
 801d772:	bf00      	nop
 801d774:	08026540 	.word	0x08026540
 801d778:	08026574 	.word	0x08026574
 801d77c:	08026594 	.word	0x08026594
 801d780:	080265bc 	.word	0x080265bc
 801d784:	080265e0 	.word	0x080265e0

0801d788 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	b086      	sub	sp, #24
 801d78c:	af00      	add	r7, sp, #0
 801d78e:	607b      	str	r3, [r7, #4]
 801d790:	4603      	mov	r3, r0
 801d792:	73fb      	strb	r3, [r7, #15]
 801d794:	460b      	mov	r3, r1
 801d796:	81bb      	strh	r3, [r7, #12]
 801d798:	4613      	mov	r3, r2
 801d79a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801d79c:	89bb      	ldrh	r3, [r7, #12]
 801d79e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d105      	bne.n	801d7b2 <tcp_pbuf_prealloc+0x2a>
 801d7a6:	4b30      	ldr	r3, [pc, #192]	; (801d868 <tcp_pbuf_prealloc+0xe0>)
 801d7a8:	22e8      	movs	r2, #232	; 0xe8
 801d7aa:	4930      	ldr	r1, [pc, #192]	; (801d86c <tcp_pbuf_prealloc+0xe4>)
 801d7ac:	4830      	ldr	r0, [pc, #192]	; (801d870 <tcp_pbuf_prealloc+0xe8>)
 801d7ae:	f005 fb23 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d7b2:	6a3b      	ldr	r3, [r7, #32]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d105      	bne.n	801d7c4 <tcp_pbuf_prealloc+0x3c>
 801d7b8:	4b2b      	ldr	r3, [pc, #172]	; (801d868 <tcp_pbuf_prealloc+0xe0>)
 801d7ba:	22e9      	movs	r2, #233	; 0xe9
 801d7bc:	492d      	ldr	r1, [pc, #180]	; (801d874 <tcp_pbuf_prealloc+0xec>)
 801d7be:	482c      	ldr	r0, [pc, #176]	; (801d870 <tcp_pbuf_prealloc+0xe8>)
 801d7c0:	f005 fb1a 	bl	8022df8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d7c4:	89ba      	ldrh	r2, [r7, #12]
 801d7c6:	897b      	ldrh	r3, [r7, #10]
 801d7c8:	429a      	cmp	r2, r3
 801d7ca:	d221      	bcs.n	801d810 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d7cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d7d0:	f003 0302 	and.w	r3, r3, #2
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d111      	bne.n	801d7fc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801d7d8:	6a3b      	ldr	r3, [r7, #32]
 801d7da:	8b5b      	ldrh	r3, [r3, #26]
 801d7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d115      	bne.n	801d810 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801d7e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d007      	beq.n	801d7fc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801d7ec:	6a3b      	ldr	r3, [r7, #32]
 801d7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d103      	bne.n	801d7fc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801d7f4:	6a3b      	ldr	r3, [r7, #32]
 801d7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d009      	beq.n	801d810 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d7fc:	89bb      	ldrh	r3, [r7, #12]
 801d7fe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801d802:	f023 0203 	bic.w	r2, r3, #3
 801d806:	897b      	ldrh	r3, [r7, #10]
 801d808:	4293      	cmp	r3, r2
 801d80a:	bf28      	it	cs
 801d80c:	4613      	movcs	r3, r2
 801d80e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d810:	8af9      	ldrh	r1, [r7, #22]
 801d812:	7bfb      	ldrb	r3, [r7, #15]
 801d814:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d818:	4618      	mov	r0, r3
 801d81a:	f7fa feed 	bl	80185f8 <pbuf_alloc>
 801d81e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d820:	693b      	ldr	r3, [r7, #16]
 801d822:	2b00      	cmp	r3, #0
 801d824:	d101      	bne.n	801d82a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801d826:	2300      	movs	r3, #0
 801d828:	e019      	b.n	801d85e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d82a:	693b      	ldr	r3, [r7, #16]
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d006      	beq.n	801d840 <tcp_pbuf_prealloc+0xb8>
 801d832:	4b0d      	ldr	r3, [pc, #52]	; (801d868 <tcp_pbuf_prealloc+0xe0>)
 801d834:	f240 120b 	movw	r2, #267	; 0x10b
 801d838:	490f      	ldr	r1, [pc, #60]	; (801d878 <tcp_pbuf_prealloc+0xf0>)
 801d83a:	480d      	ldr	r0, [pc, #52]	; (801d870 <tcp_pbuf_prealloc+0xe8>)
 801d83c:	f005 fadc 	bl	8022df8 <iprintf>
  *oversize = p->len - length;
 801d840:	693b      	ldr	r3, [r7, #16]
 801d842:	895a      	ldrh	r2, [r3, #10]
 801d844:	89bb      	ldrh	r3, [r7, #12]
 801d846:	1ad3      	subs	r3, r2, r3
 801d848:	b29a      	uxth	r2, r3
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d84e:	693b      	ldr	r3, [r7, #16]
 801d850:	89ba      	ldrh	r2, [r7, #12]
 801d852:	811a      	strh	r2, [r3, #8]
 801d854:	693b      	ldr	r3, [r7, #16]
 801d856:	891a      	ldrh	r2, [r3, #8]
 801d858:	693b      	ldr	r3, [r7, #16]
 801d85a:	815a      	strh	r2, [r3, #10]
  return p;
 801d85c:	693b      	ldr	r3, [r7, #16]
}
 801d85e:	4618      	mov	r0, r3
 801d860:	3718      	adds	r7, #24
 801d862:	46bd      	mov	sp, r7
 801d864:	bd80      	pop	{r7, pc}
 801d866:	bf00      	nop
 801d868:	08026540 	.word	0x08026540
 801d86c:	080265f8 	.word	0x080265f8
 801d870:	08026594 	.word	0x08026594
 801d874:	0802661c 	.word	0x0802661c
 801d878:	0802663c 	.word	0x0802663c

0801d87c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b082      	sub	sp, #8
 801d880:	af00      	add	r7, sp, #0
 801d882:	6078      	str	r0, [r7, #4]
 801d884:	460b      	mov	r3, r1
 801d886:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d106      	bne.n	801d89c <tcp_write_checks+0x20>
 801d88e:	4b33      	ldr	r3, [pc, #204]	; (801d95c <tcp_write_checks+0xe0>)
 801d890:	f240 1233 	movw	r2, #307	; 0x133
 801d894:	4932      	ldr	r1, [pc, #200]	; (801d960 <tcp_write_checks+0xe4>)
 801d896:	4833      	ldr	r0, [pc, #204]	; (801d964 <tcp_write_checks+0xe8>)
 801d898:	f005 faae 	bl	8022df8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	7d1b      	ldrb	r3, [r3, #20]
 801d8a0:	2b04      	cmp	r3, #4
 801d8a2:	d00e      	beq.n	801d8c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801d8a8:	2b07      	cmp	r3, #7
 801d8aa:	d00a      	beq.n	801d8c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d8b0:	2b02      	cmp	r3, #2
 801d8b2:	d006      	beq.n	801d8c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801d8b8:	2b03      	cmp	r3, #3
 801d8ba:	d002      	beq.n	801d8c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801d8bc:	f06f 030a 	mvn.w	r3, #10
 801d8c0:	e048      	b.n	801d954 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801d8c2:	887b      	ldrh	r3, [r7, #2]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d101      	bne.n	801d8cc <tcp_write_checks+0x50>
    return ERR_OK;
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	e043      	b.n	801d954 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d8d2:	887a      	ldrh	r2, [r7, #2]
 801d8d4:	429a      	cmp	r2, r3
 801d8d6:	d909      	bls.n	801d8ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	8b5b      	ldrh	r3, [r3, #26]
 801d8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d8e0:	b29a      	uxth	r2, r3
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d8e6:	f04f 33ff 	mov.w	r3, #4294967295
 801d8ea:	e033      	b.n	801d954 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d8f2:	2b08      	cmp	r3, #8
 801d8f4:	d909      	bls.n	801d90a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	8b5b      	ldrh	r3, [r3, #26]
 801d8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d8fe:	b29a      	uxth	r2, r3
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d904:	f04f 33ff 	mov.w	r3, #4294967295
 801d908:	e024      	b.n	801d954 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d910:	2b00      	cmp	r3, #0
 801d912:	d00f      	beq.n	801d934 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d11a      	bne.n	801d952 <tcp_write_checks+0xd6>
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d920:	2b00      	cmp	r3, #0
 801d922:	d116      	bne.n	801d952 <tcp_write_checks+0xd6>
 801d924:	4b0d      	ldr	r3, [pc, #52]	; (801d95c <tcp_write_checks+0xe0>)
 801d926:	f240 1255 	movw	r2, #341	; 0x155
 801d92a:	490f      	ldr	r1, [pc, #60]	; (801d968 <tcp_write_checks+0xec>)
 801d92c:	480d      	ldr	r0, [pc, #52]	; (801d964 <tcp_write_checks+0xe8>)
 801d92e:	f005 fa63 	bl	8022df8 <iprintf>
 801d932:	e00e      	b.n	801d952 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d103      	bne.n	801d944 <tcp_write_checks+0xc8>
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d940:	2b00      	cmp	r3, #0
 801d942:	d006      	beq.n	801d952 <tcp_write_checks+0xd6>
 801d944:	4b05      	ldr	r3, [pc, #20]	; (801d95c <tcp_write_checks+0xe0>)
 801d946:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801d94a:	4908      	ldr	r1, [pc, #32]	; (801d96c <tcp_write_checks+0xf0>)
 801d94c:	4805      	ldr	r0, [pc, #20]	; (801d964 <tcp_write_checks+0xe8>)
 801d94e:	f005 fa53 	bl	8022df8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801d952:	2300      	movs	r3, #0
}
 801d954:	4618      	mov	r0, r3
 801d956:	3708      	adds	r7, #8
 801d958:	46bd      	mov	sp, r7
 801d95a:	bd80      	pop	{r7, pc}
 801d95c:	08026540 	.word	0x08026540
 801d960:	08026650 	.word	0x08026650
 801d964:	08026594 	.word	0x08026594
 801d968:	08026670 	.word	0x08026670
 801d96c:	080266ac 	.word	0x080266ac

0801d970 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801d970:	b590      	push	{r4, r7, lr}
 801d972:	b09b      	sub	sp, #108	; 0x6c
 801d974:	af04      	add	r7, sp, #16
 801d976:	60f8      	str	r0, [r7, #12]
 801d978:	60b9      	str	r1, [r7, #8]
 801d97a:	4611      	mov	r1, r2
 801d97c:	461a      	mov	r2, r3
 801d97e:	460b      	mov	r3, r1
 801d980:	80fb      	strh	r3, [r7, #6]
 801d982:	4613      	mov	r3, r2
 801d984:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801d986:	2300      	movs	r3, #0
 801d988:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801d98a:	2300      	movs	r3, #0
 801d98c:	653b      	str	r3, [r7, #80]	; 0x50
 801d98e:	2300      	movs	r3, #0
 801d990:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d992:	2300      	movs	r3, #0
 801d994:	64bb      	str	r3, [r7, #72]	; 0x48
 801d996:	2300      	movs	r3, #0
 801d998:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801d99a:	2300      	movs	r3, #0
 801d99c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801d9aa:	2300      	movs	r3, #0
 801d9ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d109      	bne.n	801d9cc <tcp_write+0x5c>
 801d9b8:	4ba4      	ldr	r3, [pc, #656]	; (801dc4c <tcp_write+0x2dc>)
 801d9ba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801d9be:	49a4      	ldr	r1, [pc, #656]	; (801dc50 <tcp_write+0x2e0>)
 801d9c0:	48a4      	ldr	r0, [pc, #656]	; (801dc54 <tcp_write+0x2e4>)
 801d9c2:	f005 fa19 	bl	8022df8 <iprintf>
 801d9c6:	f06f 030f 	mvn.w	r3, #15
 801d9ca:	e32a      	b.n	801e022 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d9d2:	085b      	lsrs	r3, r3, #1
 801d9d4:	b29a      	uxth	r2, r3
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d9da:	4293      	cmp	r3, r2
 801d9dc:	bf28      	it	cs
 801d9de:	4613      	movcs	r3, r2
 801d9e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d9e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d102      	bne.n	801d9ee <tcp_write+0x7e>
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d9ec:	e000      	b.n	801d9f0 <tcp_write+0x80>
 801d9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d9f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d9f2:	68bb      	ldr	r3, [r7, #8]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d109      	bne.n	801da0c <tcp_write+0x9c>
 801d9f8:	4b94      	ldr	r3, [pc, #592]	; (801dc4c <tcp_write+0x2dc>)
 801d9fa:	f240 12ad 	movw	r2, #429	; 0x1ad
 801d9fe:	4996      	ldr	r1, [pc, #600]	; (801dc58 <tcp_write+0x2e8>)
 801da00:	4894      	ldr	r0, [pc, #592]	; (801dc54 <tcp_write+0x2e4>)
 801da02:	f005 f9f9 	bl	8022df8 <iprintf>
 801da06:	f06f 030f 	mvn.w	r3, #15
 801da0a:	e30a      	b.n	801e022 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801da0c:	88fb      	ldrh	r3, [r7, #6]
 801da0e:	4619      	mov	r1, r3
 801da10:	68f8      	ldr	r0, [r7, #12]
 801da12:	f7ff ff33 	bl	801d87c <tcp_write_checks>
 801da16:	4603      	mov	r3, r0
 801da18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801da1c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801da20:	2b00      	cmp	r3, #0
 801da22:	d002      	beq.n	801da2a <tcp_write+0xba>
    return err;
 801da24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801da28:	e2fb      	b.n	801e022 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801da30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801da34:	2300      	movs	r3, #0
 801da36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801da3e:	2b00      	cmp	r3, #0
 801da40:	f000 80f6 	beq.w	801dc30 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801da48:	653b      	str	r3, [r7, #80]	; 0x50
 801da4a:	e002      	b.n	801da52 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801da4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801da52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	2b00      	cmp	r3, #0
 801da58:	d1f8      	bne.n	801da4c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801da5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da5c:	7a9b      	ldrb	r3, [r3, #10]
 801da5e:	009b      	lsls	r3, r3, #2
 801da60:	b29b      	uxth	r3, r3
 801da62:	f003 0304 	and.w	r3, r3, #4
 801da66:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801da68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da6c:	891b      	ldrh	r3, [r3, #8]
 801da6e:	4619      	mov	r1, r3
 801da70:	8c3b      	ldrh	r3, [r7, #32]
 801da72:	440b      	add	r3, r1
 801da74:	429a      	cmp	r2, r3
 801da76:	da06      	bge.n	801da86 <tcp_write+0x116>
 801da78:	4b74      	ldr	r3, [pc, #464]	; (801dc4c <tcp_write+0x2dc>)
 801da7a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801da7e:	4977      	ldr	r1, [pc, #476]	; (801dc5c <tcp_write+0x2ec>)
 801da80:	4874      	ldr	r0, [pc, #464]	; (801dc54 <tcp_write+0x2e4>)
 801da82:	f005 f9b9 	bl	8022df8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801da86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da88:	891a      	ldrh	r2, [r3, #8]
 801da8a:	8c3b      	ldrh	r3, [r7, #32]
 801da8c:	4413      	add	r3, r2
 801da8e:	b29b      	uxth	r3, r3
 801da90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da92:	1ad3      	subs	r3, r2, r3
 801da94:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801da96:	68fb      	ldr	r3, [r7, #12]
 801da98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801da9c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801da9e:	8a7b      	ldrh	r3, [r7, #18]
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d026      	beq.n	801daf2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801daa4:	8a7b      	ldrh	r3, [r7, #18]
 801daa6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d206      	bcs.n	801daba <tcp_write+0x14a>
 801daac:	4b67      	ldr	r3, [pc, #412]	; (801dc4c <tcp_write+0x2dc>)
 801daae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801dab2:	496b      	ldr	r1, [pc, #428]	; (801dc60 <tcp_write+0x2f0>)
 801dab4:	4867      	ldr	r0, [pc, #412]	; (801dc54 <tcp_write+0x2e4>)
 801dab6:	f005 f99f 	bl	8022df8 <iprintf>
      seg = last_unsent;
 801daba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dabc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801dabe:	8a7b      	ldrh	r3, [r7, #18]
 801dac0:	88fa      	ldrh	r2, [r7, #6]
 801dac2:	4293      	cmp	r3, r2
 801dac4:	bf28      	it	cs
 801dac6:	4613      	movcs	r3, r2
 801dac8:	b29b      	uxth	r3, r3
 801daca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dacc:	4293      	cmp	r3, r2
 801dace:	bf28      	it	cs
 801dad0:	4613      	movcs	r3, r2
 801dad2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801dad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dad8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dada:	4413      	add	r3, r2
 801dadc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801dae0:	8a7a      	ldrh	r2, [r7, #18]
 801dae2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dae4:	1ad3      	subs	r3, r2, r3
 801dae6:	b29b      	uxth	r3, r3
 801dae8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801daea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801daec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801daee:	1ad3      	subs	r3, r2, r3
 801daf0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801daf2:	8a7b      	ldrh	r3, [r7, #18]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d00b      	beq.n	801db10 <tcp_write+0x1a0>
 801daf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dafc:	88fb      	ldrh	r3, [r7, #6]
 801dafe:	429a      	cmp	r2, r3
 801db00:	d006      	beq.n	801db10 <tcp_write+0x1a0>
 801db02:	4b52      	ldr	r3, [pc, #328]	; (801dc4c <tcp_write+0x2dc>)
 801db04:	f44f 7200 	mov.w	r2, #512	; 0x200
 801db08:	4956      	ldr	r1, [pc, #344]	; (801dc64 <tcp_write+0x2f4>)
 801db0a:	4852      	ldr	r0, [pc, #328]	; (801dc54 <tcp_write+0x2e4>)
 801db0c:	f005 f974 	bl	8022df8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801db10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db14:	88fb      	ldrh	r3, [r7, #6]
 801db16:	429a      	cmp	r2, r3
 801db18:	f080 8167 	bcs.w	801ddea <tcp_write+0x47a>
 801db1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db1e:	2b00      	cmp	r3, #0
 801db20:	f000 8163 	beq.w	801ddea <tcp_write+0x47a>
 801db24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db26:	891b      	ldrh	r3, [r3, #8]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	f000 815e 	beq.w	801ddea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801db2e:	88fa      	ldrh	r2, [r7, #6]
 801db30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db34:	1ad2      	subs	r2, r2, r3
 801db36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db38:	4293      	cmp	r3, r2
 801db3a:	bfa8      	it	ge
 801db3c:	4613      	movge	r3, r2
 801db3e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801db40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db42:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801db44:	797b      	ldrb	r3, [r7, #5]
 801db46:	f003 0301 	and.w	r3, r3, #1
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d027      	beq.n	801db9e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801db4e:	f107 0012 	add.w	r0, r7, #18
 801db52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801db54:	8bf9      	ldrh	r1, [r7, #30]
 801db56:	2301      	movs	r3, #1
 801db58:	9302      	str	r3, [sp, #8]
 801db5a:	797b      	ldrb	r3, [r7, #5]
 801db5c:	9301      	str	r3, [sp, #4]
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	9300      	str	r3, [sp, #0]
 801db62:	4603      	mov	r3, r0
 801db64:	2000      	movs	r0, #0
 801db66:	f7ff fe0f 	bl	801d788 <tcp_pbuf_prealloc>
 801db6a:	6578      	str	r0, [r7, #84]	; 0x54
 801db6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db6e:	2b00      	cmp	r3, #0
 801db70:	f000 8225 	beq.w	801dfbe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801db74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db76:	6858      	ldr	r0, [r3, #4]
 801db78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db7c:	68ba      	ldr	r2, [r7, #8]
 801db7e:	4413      	add	r3, r2
 801db80:	8bfa      	ldrh	r2, [r7, #30]
 801db82:	4619      	mov	r1, r3
 801db84:	f005 faa9 	bl	80230da <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801db88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801db8a:	f7fb f8a7 	bl	8018cdc <pbuf_clen>
 801db8e:	4603      	mov	r3, r0
 801db90:	461a      	mov	r2, r3
 801db92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801db96:	4413      	add	r3, r2
 801db98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801db9c:	e041      	b.n	801dc22 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801db9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dba0:	685b      	ldr	r3, [r3, #4]
 801dba2:	637b      	str	r3, [r7, #52]	; 0x34
 801dba4:	e002      	b.n	801dbac <tcp_write+0x23c>
 801dba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	637b      	str	r3, [r7, #52]	; 0x34
 801dbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d1f8      	bne.n	801dba6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801dbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbb6:	7b1b      	ldrb	r3, [r3, #12]
 801dbb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d115      	bne.n	801dbec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801dbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbc2:	685b      	ldr	r3, [r3, #4]
 801dbc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dbc6:	8952      	ldrh	r2, [r2, #10]
 801dbc8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801dbca:	68ba      	ldr	r2, [r7, #8]
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	d10d      	bne.n	801dbec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801dbd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d006      	beq.n	801dbe6 <tcp_write+0x276>
 801dbd8:	4b1c      	ldr	r3, [pc, #112]	; (801dc4c <tcp_write+0x2dc>)
 801dbda:	f240 2231 	movw	r2, #561	; 0x231
 801dbde:	4922      	ldr	r1, [pc, #136]	; (801dc68 <tcp_write+0x2f8>)
 801dbe0:	481c      	ldr	r0, [pc, #112]	; (801dc54 <tcp_write+0x2e4>)
 801dbe2:	f005 f909 	bl	8022df8 <iprintf>
          extendlen = seglen;
 801dbe6:	8bfb      	ldrh	r3, [r7, #30]
 801dbe8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801dbea:	e01a      	b.n	801dc22 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801dbec:	8bfb      	ldrh	r3, [r7, #30]
 801dbee:	2201      	movs	r2, #1
 801dbf0:	4619      	mov	r1, r3
 801dbf2:	2000      	movs	r0, #0
 801dbf4:	f7fa fd00 	bl	80185f8 <pbuf_alloc>
 801dbf8:	6578      	str	r0, [r7, #84]	; 0x54
 801dbfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	f000 81e0 	beq.w	801dfc2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801dc02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dc06:	68ba      	ldr	r2, [r7, #8]
 801dc08:	441a      	add	r2, r3
 801dc0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dc0c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801dc0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801dc10:	f7fb f864 	bl	8018cdc <pbuf_clen>
 801dc14:	4603      	mov	r3, r0
 801dc16:	461a      	mov	r2, r3
 801dc18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dc1c:	4413      	add	r3, r2
 801dc1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801dc22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dc26:	8bfb      	ldrh	r3, [r7, #30]
 801dc28:	4413      	add	r3, r2
 801dc2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801dc2e:	e0dc      	b.n	801ddea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801dc30:	68fb      	ldr	r3, [r7, #12]
 801dc32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	f000 80d7 	beq.w	801ddea <tcp_write+0x47a>
 801dc3c:	4b03      	ldr	r3, [pc, #12]	; (801dc4c <tcp_write+0x2dc>)
 801dc3e:	f240 224a 	movw	r2, #586	; 0x24a
 801dc42:	490a      	ldr	r1, [pc, #40]	; (801dc6c <tcp_write+0x2fc>)
 801dc44:	4803      	ldr	r0, [pc, #12]	; (801dc54 <tcp_write+0x2e4>)
 801dc46:	f005 f8d7 	bl	8022df8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801dc4a:	e0ce      	b.n	801ddea <tcp_write+0x47a>
 801dc4c:	08026540 	.word	0x08026540
 801dc50:	080266e0 	.word	0x080266e0
 801dc54:	08026594 	.word	0x08026594
 801dc58:	080266f8 	.word	0x080266f8
 801dc5c:	0802672c 	.word	0x0802672c
 801dc60:	08026744 	.word	0x08026744
 801dc64:	08026764 	.word	0x08026764
 801dc68:	08026784 	.word	0x08026784
 801dc6c:	080267b0 	.word	0x080267b0
    struct pbuf *p;
    u16_t left = len - pos;
 801dc70:	88fa      	ldrh	r2, [r7, #6]
 801dc72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dc76:	1ad3      	subs	r3, r2, r3
 801dc78:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801dc7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dc7e:	b29b      	uxth	r3, r3
 801dc80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dc82:	1ad3      	subs	r3, r2, r3
 801dc84:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801dc86:	8b7a      	ldrh	r2, [r7, #26]
 801dc88:	8bbb      	ldrh	r3, [r7, #28]
 801dc8a:	4293      	cmp	r3, r2
 801dc8c:	bf28      	it	cs
 801dc8e:	4613      	movcs	r3, r2
 801dc90:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801dc92:	797b      	ldrb	r3, [r7, #5]
 801dc94:	f003 0301 	and.w	r3, r3, #1
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d036      	beq.n	801dd0a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801dc9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dca0:	b29a      	uxth	r2, r3
 801dca2:	8b3b      	ldrh	r3, [r7, #24]
 801dca4:	4413      	add	r3, r2
 801dca6:	b299      	uxth	r1, r3
 801dca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	bf0c      	ite	eq
 801dcae:	2301      	moveq	r3, #1
 801dcb0:	2300      	movne	r3, #0
 801dcb2:	b2db      	uxtb	r3, r3
 801dcb4:	f107 0012 	add.w	r0, r7, #18
 801dcb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dcba:	9302      	str	r3, [sp, #8]
 801dcbc:	797b      	ldrb	r3, [r7, #5]
 801dcbe:	9301      	str	r3, [sp, #4]
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	9300      	str	r3, [sp, #0]
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	2036      	movs	r0, #54	; 0x36
 801dcc8:	f7ff fd5e 	bl	801d788 <tcp_pbuf_prealloc>
 801dccc:	6338      	str	r0, [r7, #48]	; 0x30
 801dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	f000 8178 	beq.w	801dfc6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcd8:	895b      	ldrh	r3, [r3, #10]
 801dcda:	8b3a      	ldrh	r2, [r7, #24]
 801dcdc:	429a      	cmp	r2, r3
 801dcde:	d906      	bls.n	801dcee <tcp_write+0x37e>
 801dce0:	4b8c      	ldr	r3, [pc, #560]	; (801df14 <tcp_write+0x5a4>)
 801dce2:	f240 2266 	movw	r2, #614	; 0x266
 801dce6:	498c      	ldr	r1, [pc, #560]	; (801df18 <tcp_write+0x5a8>)
 801dce8:	488c      	ldr	r0, [pc, #560]	; (801df1c <tcp_write+0x5ac>)
 801dcea:	f005 f885 	bl	8022df8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801dcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcf0:	685a      	ldr	r2, [r3, #4]
 801dcf2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dcf6:	18d0      	adds	r0, r2, r3
 801dcf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dcfc:	68ba      	ldr	r2, [r7, #8]
 801dcfe:	4413      	add	r3, r2
 801dd00:	8b3a      	ldrh	r2, [r7, #24]
 801dd02:	4619      	mov	r1, r3
 801dd04:	f005 f9e9 	bl	80230da <memcpy>
 801dd08:	e02f      	b.n	801dd6a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801dd0a:	8a7b      	ldrh	r3, [r7, #18]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d006      	beq.n	801dd1e <tcp_write+0x3ae>
 801dd10:	4b80      	ldr	r3, [pc, #512]	; (801df14 <tcp_write+0x5a4>)
 801dd12:	f240 2271 	movw	r2, #625	; 0x271
 801dd16:	4982      	ldr	r1, [pc, #520]	; (801df20 <tcp_write+0x5b0>)
 801dd18:	4880      	ldr	r0, [pc, #512]	; (801df1c <tcp_write+0x5ac>)
 801dd1a:	f005 f86d 	bl	8022df8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801dd1e:	8b3b      	ldrh	r3, [r7, #24]
 801dd20:	2201      	movs	r2, #1
 801dd22:	4619      	mov	r1, r3
 801dd24:	2036      	movs	r0, #54	; 0x36
 801dd26:	f7fa fc67 	bl	80185f8 <pbuf_alloc>
 801dd2a:	6178      	str	r0, [r7, #20]
 801dd2c:	697b      	ldr	r3, [r7, #20]
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	f000 814b 	beq.w	801dfca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801dd34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dd38:	68ba      	ldr	r2, [r7, #8]
 801dd3a:	441a      	add	r2, r3
 801dd3c:	697b      	ldr	r3, [r7, #20]
 801dd3e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801dd40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dd44:	b29b      	uxth	r3, r3
 801dd46:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dd4a:	4619      	mov	r1, r3
 801dd4c:	2036      	movs	r0, #54	; 0x36
 801dd4e:	f7fa fc53 	bl	80185f8 <pbuf_alloc>
 801dd52:	6338      	str	r0, [r7, #48]	; 0x30
 801dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d103      	bne.n	801dd62 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801dd5a:	6978      	ldr	r0, [r7, #20]
 801dd5c:	f7fa ff30 	bl	8018bc0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801dd60:	e136      	b.n	801dfd0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801dd62:	6979      	ldr	r1, [r7, #20]
 801dd64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dd66:	f7fa fff9 	bl	8018d5c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801dd6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dd6c:	f7fa ffb6 	bl	8018cdc <pbuf_clen>
 801dd70:	4603      	mov	r3, r0
 801dd72:	461a      	mov	r2, r3
 801dd74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dd78:	4413      	add	r3, r2
 801dd7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801dd7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dd82:	2b09      	cmp	r3, #9
 801dd84:	d903      	bls.n	801dd8e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801dd86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dd88:	f7fa ff1a 	bl	8018bc0 <pbuf_free>
      goto memerr;
 801dd8c:	e120      	b.n	801dfd0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801dd92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dd96:	441a      	add	r2, r3
 801dd98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd9c:	9300      	str	r3, [sp, #0]
 801dd9e:	4613      	mov	r3, r2
 801dda0:	2200      	movs	r2, #0
 801dda2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dda4:	68f8      	ldr	r0, [r7, #12]
 801dda6:	f7ff fc51 	bl	801d64c <tcp_create_segment>
 801ddaa:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ddac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	f000 810d 	beq.w	801dfce <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801ddb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d102      	bne.n	801ddc0 <tcp_write+0x450>
      queue = seg;
 801ddba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ddbc:	647b      	str	r3, [r7, #68]	; 0x44
 801ddbe:	e00c      	b.n	801ddda <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ddc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d106      	bne.n	801ddd4 <tcp_write+0x464>
 801ddc6:	4b53      	ldr	r3, [pc, #332]	; (801df14 <tcp_write+0x5a4>)
 801ddc8:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ddcc:	4955      	ldr	r1, [pc, #340]	; (801df24 <tcp_write+0x5b4>)
 801ddce:	4853      	ldr	r0, [pc, #332]	; (801df1c <tcp_write+0x5ac>)
 801ddd0:	f005 f812 	bl	8022df8 <iprintf>
      prev_seg->next = seg;
 801ddd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ddd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ddd8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801ddda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dddc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801ddde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dde2:	8b3b      	ldrh	r3, [r7, #24]
 801dde4:	4413      	add	r3, r2
 801dde6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801ddea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ddee:	88fb      	ldrh	r3, [r7, #6]
 801ddf0:	429a      	cmp	r2, r3
 801ddf2:	f4ff af3d 	bcc.w	801dc70 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801ddf6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d02c      	beq.n	801de56 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801ddfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddfe:	685b      	ldr	r3, [r3, #4]
 801de00:	62fb      	str	r3, [r7, #44]	; 0x2c
 801de02:	e01e      	b.n	801de42 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de06:	891a      	ldrh	r2, [r3, #8]
 801de08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de0a:	4413      	add	r3, r2
 801de0c:	b29a      	uxth	r2, r3
 801de0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de10:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801de12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d110      	bne.n	801de3c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de1c:	685b      	ldr	r3, [r3, #4]
 801de1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801de20:	8952      	ldrh	r2, [r2, #10]
 801de22:	4413      	add	r3, r2
 801de24:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801de26:	68b9      	ldr	r1, [r7, #8]
 801de28:	4618      	mov	r0, r3
 801de2a:	f005 f956 	bl	80230da <memcpy>
        p->len += oversize_used;
 801de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de30:	895a      	ldrh	r2, [r3, #10]
 801de32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de34:	4413      	add	r3, r2
 801de36:	b29a      	uxth	r2, r3
 801de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de3a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801de3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	62fb      	str	r3, [r7, #44]	; 0x2c
 801de42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de44:	2b00      	cmp	r3, #0
 801de46:	d1dd      	bne.n	801de04 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801de48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de4a:	891a      	ldrh	r2, [r3, #8]
 801de4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de4e:	4413      	add	r3, r2
 801de50:	b29a      	uxth	r2, r3
 801de52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de54:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801de56:	8a7a      	ldrh	r2, [r7, #18]
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801de5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801de60:	2b00      	cmp	r3, #0
 801de62:	d018      	beq.n	801de96 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801de64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de66:	2b00      	cmp	r3, #0
 801de68:	d106      	bne.n	801de78 <tcp_write+0x508>
 801de6a:	4b2a      	ldr	r3, [pc, #168]	; (801df14 <tcp_write+0x5a4>)
 801de6c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801de70:	492d      	ldr	r1, [pc, #180]	; (801df28 <tcp_write+0x5b8>)
 801de72:	482a      	ldr	r0, [pc, #168]	; (801df1c <tcp_write+0x5ac>)
 801de74:	f004 ffc0 	bl	8022df8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801de78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de7a:	685b      	ldr	r3, [r3, #4]
 801de7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801de7e:	4618      	mov	r0, r3
 801de80:	f7fa ff6c 	bl	8018d5c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801de84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de86:	891a      	ldrh	r2, [r3, #8]
 801de88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801de8a:	891b      	ldrh	r3, [r3, #8]
 801de8c:	4413      	add	r3, r2
 801de8e:	b29a      	uxth	r2, r3
 801de90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de92:	811a      	strh	r2, [r3, #8]
 801de94:	e037      	b.n	801df06 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801de96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d034      	beq.n	801df06 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801de9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d003      	beq.n	801deaa <tcp_write+0x53a>
 801dea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dea4:	685b      	ldr	r3, [r3, #4]
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d106      	bne.n	801deb8 <tcp_write+0x548>
 801deaa:	4b1a      	ldr	r3, [pc, #104]	; (801df14 <tcp_write+0x5a4>)
 801deac:	f240 22e6 	movw	r2, #742	; 0x2e6
 801deb0:	491e      	ldr	r1, [pc, #120]	; (801df2c <tcp_write+0x5bc>)
 801deb2:	481a      	ldr	r0, [pc, #104]	; (801df1c <tcp_write+0x5ac>)
 801deb4:	f004 ffa0 	bl	8022df8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801deb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801deba:	685b      	ldr	r3, [r3, #4]
 801debc:	62bb      	str	r3, [r7, #40]	; 0x28
 801debe:	e009      	b.n	801ded4 <tcp_write+0x564>
      p->tot_len += extendlen;
 801dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dec2:	891a      	ldrh	r2, [r3, #8]
 801dec4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dec6:	4413      	add	r3, r2
 801dec8:	b29a      	uxth	r2, r3
 801deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801decc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	62bb      	str	r3, [r7, #40]	; 0x28
 801ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d1f1      	bne.n	801dec0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dede:	891a      	ldrh	r2, [r3, #8]
 801dee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dee2:	4413      	add	r3, r2
 801dee4:	b29a      	uxth	r2, r3
 801dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dee8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801deea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801deec:	895a      	ldrh	r2, [r3, #10]
 801deee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801def0:	4413      	add	r3, r2
 801def2:	b29a      	uxth	r2, r3
 801def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801def6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801def8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801defa:	891a      	ldrh	r2, [r3, #8]
 801defc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801defe:	4413      	add	r3, r2
 801df00:	b29a      	uxth	r2, r3
 801df02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801df04:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801df06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d111      	bne.n	801df30 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801df10:	66da      	str	r2, [r3, #108]	; 0x6c
 801df12:	e010      	b.n	801df36 <tcp_write+0x5c6>
 801df14:	08026540 	.word	0x08026540
 801df18:	080267e0 	.word	0x080267e0
 801df1c:	08026594 	.word	0x08026594
 801df20:	08026820 	.word	0x08026820
 801df24:	08026830 	.word	0x08026830
 801df28:	08026844 	.word	0x08026844
 801df2c:	0802687c 	.word	0x0802687c
  } else {
    last_unsent->next = queue;
 801df30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801df32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801df34:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801df3a:	88fb      	ldrh	r3, [r7, #6]
 801df3c:	441a      	add	r2, r3
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801df48:	88fb      	ldrh	r3, [r7, #6]
 801df4a:	1ad3      	subs	r3, r2, r3
 801df4c:	b29a      	uxth	r2, r3
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801df5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801df64:	2b00      	cmp	r3, #0
 801df66:	d00e      	beq.n	801df86 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d10a      	bne.n	801df86 <tcp_write+0x616>
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df74:	2b00      	cmp	r3, #0
 801df76:	d106      	bne.n	801df86 <tcp_write+0x616>
 801df78:	4b2c      	ldr	r3, [pc, #176]	; (801e02c <tcp_write+0x6bc>)
 801df7a:	f240 3212 	movw	r2, #786	; 0x312
 801df7e:	492c      	ldr	r1, [pc, #176]	; (801e030 <tcp_write+0x6c0>)
 801df80:	482c      	ldr	r0, [pc, #176]	; (801e034 <tcp_write+0x6c4>)
 801df82:	f004 ff39 	bl	8022df8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801df86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d016      	beq.n	801dfba <tcp_write+0x64a>
 801df8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801df8e:	68db      	ldr	r3, [r3, #12]
 801df90:	2b00      	cmp	r3, #0
 801df92:	d012      	beq.n	801dfba <tcp_write+0x64a>
 801df94:	797b      	ldrb	r3, [r7, #5]
 801df96:	f003 0302 	and.w	r3, r3, #2
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d10d      	bne.n	801dfba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801df9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dfa0:	68db      	ldr	r3, [r3, #12]
 801dfa2:	899b      	ldrh	r3, [r3, #12]
 801dfa4:	b29c      	uxth	r4, r3
 801dfa6:	2008      	movs	r0, #8
 801dfa8:	f7f9 f960 	bl	801726c <lwip_htons>
 801dfac:	4603      	mov	r3, r0
 801dfae:	461a      	mov	r2, r3
 801dfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dfb2:	68db      	ldr	r3, [r3, #12]
 801dfb4:	4322      	orrs	r2, r4
 801dfb6:	b292      	uxth	r2, r2
 801dfb8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801dfba:	2300      	movs	r3, #0
 801dfbc:	e031      	b.n	801e022 <tcp_write+0x6b2>
          goto memerr;
 801dfbe:	bf00      	nop
 801dfc0:	e006      	b.n	801dfd0 <tcp_write+0x660>
            goto memerr;
 801dfc2:	bf00      	nop
 801dfc4:	e004      	b.n	801dfd0 <tcp_write+0x660>
        goto memerr;
 801dfc6:	bf00      	nop
 801dfc8:	e002      	b.n	801dfd0 <tcp_write+0x660>
        goto memerr;
 801dfca:	bf00      	nop
 801dfcc:	e000      	b.n	801dfd0 <tcp_write+0x660>
      goto memerr;
 801dfce:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	8b5b      	ldrh	r3, [r3, #26]
 801dfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfd8:	b29a      	uxth	r2, r3
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801dfde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d002      	beq.n	801dfea <tcp_write+0x67a>
    pbuf_free(concat_p);
 801dfe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801dfe6:	f7fa fdeb 	bl	8018bc0 <pbuf_free>
  }
  if (queue != NULL) {
 801dfea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d002      	beq.n	801dff6 <tcp_write+0x686>
    tcp_segs_free(queue);
 801dff0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dff2:	f7fc fb6b 	bl	801a6cc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d00e      	beq.n	801e01e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e004:	2b00      	cmp	r3, #0
 801e006:	d10a      	bne.n	801e01e <tcp_write+0x6ae>
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d106      	bne.n	801e01e <tcp_write+0x6ae>
 801e010:	4b06      	ldr	r3, [pc, #24]	; (801e02c <tcp_write+0x6bc>)
 801e012:	f240 3227 	movw	r2, #807	; 0x327
 801e016:	4906      	ldr	r1, [pc, #24]	; (801e030 <tcp_write+0x6c0>)
 801e018:	4806      	ldr	r0, [pc, #24]	; (801e034 <tcp_write+0x6c4>)
 801e01a:	f004 feed 	bl	8022df8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801e01e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e022:	4618      	mov	r0, r3
 801e024:	375c      	adds	r7, #92	; 0x5c
 801e026:	46bd      	mov	sp, r7
 801e028:	bd90      	pop	{r4, r7, pc}
 801e02a:	bf00      	nop
 801e02c:	08026540 	.word	0x08026540
 801e030:	080268b4 	.word	0x080268b4
 801e034:	08026594 	.word	0x08026594

0801e038 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801e038:	b590      	push	{r4, r7, lr}
 801e03a:	b08b      	sub	sp, #44	; 0x2c
 801e03c:	af02      	add	r7, sp, #8
 801e03e:	6078      	str	r0, [r7, #4]
 801e040:	460b      	mov	r3, r1
 801e042:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801e044:	2300      	movs	r3, #0
 801e046:	61fb      	str	r3, [r7, #28]
 801e048:	2300      	movs	r3, #0
 801e04a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801e04c:	2300      	movs	r3, #0
 801e04e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	2b00      	cmp	r3, #0
 801e054:	d106      	bne.n	801e064 <tcp_split_unsent_seg+0x2c>
 801e056:	4b95      	ldr	r3, [pc, #596]	; (801e2ac <tcp_split_unsent_seg+0x274>)
 801e058:	f240 324b 	movw	r2, #843	; 0x34b
 801e05c:	4994      	ldr	r1, [pc, #592]	; (801e2b0 <tcp_split_unsent_seg+0x278>)
 801e05e:	4895      	ldr	r0, [pc, #596]	; (801e2b4 <tcp_split_unsent_seg+0x27c>)
 801e060:	f004 feca 	bl	8022df8 <iprintf>

  useg = pcb->unsent;
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e068:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801e06a:	697b      	ldr	r3, [r7, #20]
 801e06c:	2b00      	cmp	r3, #0
 801e06e:	d102      	bne.n	801e076 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801e070:	f04f 33ff 	mov.w	r3, #4294967295
 801e074:	e116      	b.n	801e2a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801e076:	887b      	ldrh	r3, [r7, #2]
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d109      	bne.n	801e090 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e07c:	4b8b      	ldr	r3, [pc, #556]	; (801e2ac <tcp_split_unsent_seg+0x274>)
 801e07e:	f240 3253 	movw	r2, #851	; 0x353
 801e082:	498d      	ldr	r1, [pc, #564]	; (801e2b8 <tcp_split_unsent_seg+0x280>)
 801e084:	488b      	ldr	r0, [pc, #556]	; (801e2b4 <tcp_split_unsent_seg+0x27c>)
 801e086:	f004 feb7 	bl	8022df8 <iprintf>
    return ERR_VAL;
 801e08a:	f06f 0305 	mvn.w	r3, #5
 801e08e:	e109      	b.n	801e2a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801e090:	697b      	ldr	r3, [r7, #20]
 801e092:	891b      	ldrh	r3, [r3, #8]
 801e094:	887a      	ldrh	r2, [r7, #2]
 801e096:	429a      	cmp	r2, r3
 801e098:	d301      	bcc.n	801e09e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801e09a:	2300      	movs	r3, #0
 801e09c:	e102      	b.n	801e2a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e0a2:	887a      	ldrh	r2, [r7, #2]
 801e0a4:	429a      	cmp	r2, r3
 801e0a6:	d906      	bls.n	801e0b6 <tcp_split_unsent_seg+0x7e>
 801e0a8:	4b80      	ldr	r3, [pc, #512]	; (801e2ac <tcp_split_unsent_seg+0x274>)
 801e0aa:	f240 325b 	movw	r2, #859	; 0x35b
 801e0ae:	4983      	ldr	r1, [pc, #524]	; (801e2bc <tcp_split_unsent_seg+0x284>)
 801e0b0:	4880      	ldr	r0, [pc, #512]	; (801e2b4 <tcp_split_unsent_seg+0x27c>)
 801e0b2:	f004 fea1 	bl	8022df8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801e0b6:	697b      	ldr	r3, [r7, #20]
 801e0b8:	891b      	ldrh	r3, [r3, #8]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d106      	bne.n	801e0cc <tcp_split_unsent_seg+0x94>
 801e0be:	4b7b      	ldr	r3, [pc, #492]	; (801e2ac <tcp_split_unsent_seg+0x274>)
 801e0c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801e0c4:	497e      	ldr	r1, [pc, #504]	; (801e2c0 <tcp_split_unsent_seg+0x288>)
 801e0c6:	487b      	ldr	r0, [pc, #492]	; (801e2b4 <tcp_split_unsent_seg+0x27c>)
 801e0c8:	f004 fe96 	bl	8022df8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801e0cc:	697b      	ldr	r3, [r7, #20]
 801e0ce:	7a9b      	ldrb	r3, [r3, #10]
 801e0d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e0d2:	7bfb      	ldrb	r3, [r7, #15]
 801e0d4:	009b      	lsls	r3, r3, #2
 801e0d6:	b2db      	uxtb	r3, r3
 801e0d8:	f003 0304 	and.w	r3, r3, #4
 801e0dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801e0de:	697b      	ldr	r3, [r7, #20]
 801e0e0:	891a      	ldrh	r2, [r3, #8]
 801e0e2:	887b      	ldrh	r3, [r7, #2]
 801e0e4:	1ad3      	subs	r3, r2, r3
 801e0e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e0e8:	7bbb      	ldrb	r3, [r7, #14]
 801e0ea:	b29a      	uxth	r2, r3
 801e0ec:	89bb      	ldrh	r3, [r7, #12]
 801e0ee:	4413      	add	r3, r2
 801e0f0:	b29b      	uxth	r3, r3
 801e0f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e0f6:	4619      	mov	r1, r3
 801e0f8:	2036      	movs	r0, #54	; 0x36
 801e0fa:	f7fa fa7d 	bl	80185f8 <pbuf_alloc>
 801e0fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e100:	693b      	ldr	r3, [r7, #16]
 801e102:	2b00      	cmp	r3, #0
 801e104:	f000 80b7 	beq.w	801e276 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801e108:	697b      	ldr	r3, [r7, #20]
 801e10a:	685b      	ldr	r3, [r3, #4]
 801e10c:	891a      	ldrh	r2, [r3, #8]
 801e10e:	697b      	ldr	r3, [r7, #20]
 801e110:	891b      	ldrh	r3, [r3, #8]
 801e112:	1ad3      	subs	r3, r2, r3
 801e114:	b29a      	uxth	r2, r3
 801e116:	887b      	ldrh	r3, [r7, #2]
 801e118:	4413      	add	r3, r2
 801e11a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e11c:	697b      	ldr	r3, [r7, #20]
 801e11e:	6858      	ldr	r0, [r3, #4]
 801e120:	693b      	ldr	r3, [r7, #16]
 801e122:	685a      	ldr	r2, [r3, #4]
 801e124:	7bbb      	ldrb	r3, [r7, #14]
 801e126:	18d1      	adds	r1, r2, r3
 801e128:	897b      	ldrh	r3, [r7, #10]
 801e12a:	89ba      	ldrh	r2, [r7, #12]
 801e12c:	f7fa ff3e 	bl	8018fac <pbuf_copy_partial>
 801e130:	4603      	mov	r3, r0
 801e132:	461a      	mov	r2, r3
 801e134:	89bb      	ldrh	r3, [r7, #12]
 801e136:	4293      	cmp	r3, r2
 801e138:	f040 809f 	bne.w	801e27a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e13c:	697b      	ldr	r3, [r7, #20]
 801e13e:	68db      	ldr	r3, [r3, #12]
 801e140:	899b      	ldrh	r3, [r3, #12]
 801e142:	b29b      	uxth	r3, r3
 801e144:	4618      	mov	r0, r3
 801e146:	f7f9 f891 	bl	801726c <lwip_htons>
 801e14a:	4603      	mov	r3, r0
 801e14c:	b2db      	uxtb	r3, r3
 801e14e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e152:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801e154:	2300      	movs	r3, #0
 801e156:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801e158:	7efb      	ldrb	r3, [r7, #27]
 801e15a:	f003 0308 	and.w	r3, r3, #8
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d007      	beq.n	801e172 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801e162:	7efb      	ldrb	r3, [r7, #27]
 801e164:	f023 0308 	bic.w	r3, r3, #8
 801e168:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801e16a:	7ebb      	ldrb	r3, [r7, #26]
 801e16c:	f043 0308 	orr.w	r3, r3, #8
 801e170:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801e172:	7efb      	ldrb	r3, [r7, #27]
 801e174:	f003 0301 	and.w	r3, r3, #1
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d007      	beq.n	801e18c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801e17c:	7efb      	ldrb	r3, [r7, #27]
 801e17e:	f023 0301 	bic.w	r3, r3, #1
 801e182:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801e184:	7ebb      	ldrb	r3, [r7, #26]
 801e186:	f043 0301 	orr.w	r3, r3, #1
 801e18a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801e18c:	697b      	ldr	r3, [r7, #20]
 801e18e:	68db      	ldr	r3, [r3, #12]
 801e190:	685b      	ldr	r3, [r3, #4]
 801e192:	4618      	mov	r0, r3
 801e194:	f7f9 f87f 	bl	8017296 <lwip_htonl>
 801e198:	4602      	mov	r2, r0
 801e19a:	887b      	ldrh	r3, [r7, #2]
 801e19c:	18d1      	adds	r1, r2, r3
 801e19e:	7eba      	ldrb	r2, [r7, #26]
 801e1a0:	7bfb      	ldrb	r3, [r7, #15]
 801e1a2:	9300      	str	r3, [sp, #0]
 801e1a4:	460b      	mov	r3, r1
 801e1a6:	6939      	ldr	r1, [r7, #16]
 801e1a8:	6878      	ldr	r0, [r7, #4]
 801e1aa:	f7ff fa4f 	bl	801d64c <tcp_create_segment>
 801e1ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801e1b0:	69fb      	ldr	r3, [r7, #28]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d063      	beq.n	801e27e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e1b6:	697b      	ldr	r3, [r7, #20]
 801e1b8:	685b      	ldr	r3, [r3, #4]
 801e1ba:	4618      	mov	r0, r3
 801e1bc:	f7fa fd8e 	bl	8018cdc <pbuf_clen>
 801e1c0:	4603      	mov	r3, r0
 801e1c2:	461a      	mov	r2, r3
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e1ca:	1a9b      	subs	r3, r3, r2
 801e1cc:	b29a      	uxth	r2, r3
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e1d4:	697b      	ldr	r3, [r7, #20]
 801e1d6:	6858      	ldr	r0, [r3, #4]
 801e1d8:	697b      	ldr	r3, [r7, #20]
 801e1da:	685b      	ldr	r3, [r3, #4]
 801e1dc:	891a      	ldrh	r2, [r3, #8]
 801e1de:	89bb      	ldrh	r3, [r7, #12]
 801e1e0:	1ad3      	subs	r3, r2, r3
 801e1e2:	b29b      	uxth	r3, r3
 801e1e4:	4619      	mov	r1, r3
 801e1e6:	f7fa fb65 	bl	80188b4 <pbuf_realloc>
  useg->len -= remainder;
 801e1ea:	697b      	ldr	r3, [r7, #20]
 801e1ec:	891a      	ldrh	r2, [r3, #8]
 801e1ee:	89bb      	ldrh	r3, [r7, #12]
 801e1f0:	1ad3      	subs	r3, r2, r3
 801e1f2:	b29a      	uxth	r2, r3
 801e1f4:	697b      	ldr	r3, [r7, #20]
 801e1f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e1f8:	697b      	ldr	r3, [r7, #20]
 801e1fa:	68db      	ldr	r3, [r3, #12]
 801e1fc:	899b      	ldrh	r3, [r3, #12]
 801e1fe:	b29c      	uxth	r4, r3
 801e200:	7efb      	ldrb	r3, [r7, #27]
 801e202:	b29b      	uxth	r3, r3
 801e204:	4618      	mov	r0, r3
 801e206:	f7f9 f831 	bl	801726c <lwip_htons>
 801e20a:	4603      	mov	r3, r0
 801e20c:	461a      	mov	r2, r3
 801e20e:	697b      	ldr	r3, [r7, #20]
 801e210:	68db      	ldr	r3, [r3, #12]
 801e212:	4322      	orrs	r2, r4
 801e214:	b292      	uxth	r2, r2
 801e216:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e218:	697b      	ldr	r3, [r7, #20]
 801e21a:	685b      	ldr	r3, [r3, #4]
 801e21c:	4618      	mov	r0, r3
 801e21e:	f7fa fd5d 	bl	8018cdc <pbuf_clen>
 801e222:	4603      	mov	r3, r0
 801e224:	461a      	mov	r2, r3
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e22c:	4413      	add	r3, r2
 801e22e:	b29a      	uxth	r2, r3
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e236:	69fb      	ldr	r3, [r7, #28]
 801e238:	685b      	ldr	r3, [r3, #4]
 801e23a:	4618      	mov	r0, r3
 801e23c:	f7fa fd4e 	bl	8018cdc <pbuf_clen>
 801e240:	4603      	mov	r3, r0
 801e242:	461a      	mov	r2, r3
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e24a:	4413      	add	r3, r2
 801e24c:	b29a      	uxth	r2, r3
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801e254:	697b      	ldr	r3, [r7, #20]
 801e256:	681a      	ldr	r2, [r3, #0]
 801e258:	69fb      	ldr	r3, [r7, #28]
 801e25a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801e25c:	697b      	ldr	r3, [r7, #20]
 801e25e:	69fa      	ldr	r2, [r7, #28]
 801e260:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801e262:	69fb      	ldr	r3, [r7, #28]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	2b00      	cmp	r3, #0
 801e268:	d103      	bne.n	801e272 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	2200      	movs	r2, #0
 801e26e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801e272:	2300      	movs	r3, #0
 801e274:	e016      	b.n	801e2a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801e276:	bf00      	nop
 801e278:	e002      	b.n	801e280 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e27a:	bf00      	nop
 801e27c:	e000      	b.n	801e280 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e27e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801e280:	69fb      	ldr	r3, [r7, #28]
 801e282:	2b00      	cmp	r3, #0
 801e284:	d006      	beq.n	801e294 <tcp_split_unsent_seg+0x25c>
 801e286:	4b09      	ldr	r3, [pc, #36]	; (801e2ac <tcp_split_unsent_seg+0x274>)
 801e288:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801e28c:	490d      	ldr	r1, [pc, #52]	; (801e2c4 <tcp_split_unsent_seg+0x28c>)
 801e28e:	4809      	ldr	r0, [pc, #36]	; (801e2b4 <tcp_split_unsent_seg+0x27c>)
 801e290:	f004 fdb2 	bl	8022df8 <iprintf>
  if (p != NULL) {
 801e294:	693b      	ldr	r3, [r7, #16]
 801e296:	2b00      	cmp	r3, #0
 801e298:	d002      	beq.n	801e2a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801e29a:	6938      	ldr	r0, [r7, #16]
 801e29c:	f7fa fc90 	bl	8018bc0 <pbuf_free>
  }

  return ERR_MEM;
 801e2a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e2a4:	4618      	mov	r0, r3
 801e2a6:	3724      	adds	r7, #36	; 0x24
 801e2a8:	46bd      	mov	sp, r7
 801e2aa:	bd90      	pop	{r4, r7, pc}
 801e2ac:	08026540 	.word	0x08026540
 801e2b0:	080268d4 	.word	0x080268d4
 801e2b4:	08026594 	.word	0x08026594
 801e2b8:	080268f8 	.word	0x080268f8
 801e2bc:	0802691c 	.word	0x0802691c
 801e2c0:	0802692c 	.word	0x0802692c
 801e2c4:	0802693c 	.word	0x0802693c

0801e2c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e2c8:	b590      	push	{r4, r7, lr}
 801e2ca:	b085      	sub	sp, #20
 801e2cc:	af00      	add	r7, sp, #0
 801e2ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d106      	bne.n	801e2e4 <tcp_send_fin+0x1c>
 801e2d6:	4b21      	ldr	r3, [pc, #132]	; (801e35c <tcp_send_fin+0x94>)
 801e2d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e2dc:	4920      	ldr	r1, [pc, #128]	; (801e360 <tcp_send_fin+0x98>)
 801e2de:	4821      	ldr	r0, [pc, #132]	; (801e364 <tcp_send_fin+0x9c>)
 801e2e0:	f004 fd8a 	bl	8022df8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d02e      	beq.n	801e34a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2f0:	60fb      	str	r3, [r7, #12]
 801e2f2:	e002      	b.n	801e2fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d1f8      	bne.n	801e2f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	68db      	ldr	r3, [r3, #12]
 801e306:	899b      	ldrh	r3, [r3, #12]
 801e308:	b29b      	uxth	r3, r3
 801e30a:	4618      	mov	r0, r3
 801e30c:	f7f8 ffae 	bl	801726c <lwip_htons>
 801e310:	4603      	mov	r3, r0
 801e312:	b2db      	uxtb	r3, r3
 801e314:	f003 0307 	and.w	r3, r3, #7
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d116      	bne.n	801e34a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	68db      	ldr	r3, [r3, #12]
 801e320:	899b      	ldrh	r3, [r3, #12]
 801e322:	b29c      	uxth	r4, r3
 801e324:	2001      	movs	r0, #1
 801e326:	f7f8 ffa1 	bl	801726c <lwip_htons>
 801e32a:	4603      	mov	r3, r0
 801e32c:	461a      	mov	r2, r3
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	68db      	ldr	r3, [r3, #12]
 801e332:	4322      	orrs	r2, r4
 801e334:	b292      	uxth	r2, r2
 801e336:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	8b5b      	ldrh	r3, [r3, #26]
 801e33c:	f043 0320 	orr.w	r3, r3, #32
 801e340:	b29a      	uxth	r2, r3
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e346:	2300      	movs	r3, #0
 801e348:	e004      	b.n	801e354 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e34a:	2101      	movs	r1, #1
 801e34c:	6878      	ldr	r0, [r7, #4]
 801e34e:	f000 f80b 	bl	801e368 <tcp_enqueue_flags>
 801e352:	4603      	mov	r3, r0
}
 801e354:	4618      	mov	r0, r3
 801e356:	3714      	adds	r7, #20
 801e358:	46bd      	mov	sp, r7
 801e35a:	bd90      	pop	{r4, r7, pc}
 801e35c:	08026540 	.word	0x08026540
 801e360:	08026948 	.word	0x08026948
 801e364:	08026594 	.word	0x08026594

0801e368 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b08a      	sub	sp, #40	; 0x28
 801e36c:	af02      	add	r7, sp, #8
 801e36e:	6078      	str	r0, [r7, #4]
 801e370:	460b      	mov	r3, r1
 801e372:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e374:	2300      	movs	r3, #0
 801e376:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e378:	2300      	movs	r3, #0
 801e37a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e37c:	78fb      	ldrb	r3, [r7, #3]
 801e37e:	f003 0303 	and.w	r3, r3, #3
 801e382:	2b00      	cmp	r3, #0
 801e384:	d106      	bne.n	801e394 <tcp_enqueue_flags+0x2c>
 801e386:	4b67      	ldr	r3, [pc, #412]	; (801e524 <tcp_enqueue_flags+0x1bc>)
 801e388:	f240 4211 	movw	r2, #1041	; 0x411
 801e38c:	4966      	ldr	r1, [pc, #408]	; (801e528 <tcp_enqueue_flags+0x1c0>)
 801e38e:	4867      	ldr	r0, [pc, #412]	; (801e52c <tcp_enqueue_flags+0x1c4>)
 801e390:	f004 fd32 	bl	8022df8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	2b00      	cmp	r3, #0
 801e398:	d106      	bne.n	801e3a8 <tcp_enqueue_flags+0x40>
 801e39a:	4b62      	ldr	r3, [pc, #392]	; (801e524 <tcp_enqueue_flags+0x1bc>)
 801e39c:	f240 4213 	movw	r2, #1043	; 0x413
 801e3a0:	4963      	ldr	r1, [pc, #396]	; (801e530 <tcp_enqueue_flags+0x1c8>)
 801e3a2:	4862      	ldr	r0, [pc, #392]	; (801e52c <tcp_enqueue_flags+0x1c4>)
 801e3a4:	f004 fd28 	bl	8022df8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e3a8:	78fb      	ldrb	r3, [r7, #3]
 801e3aa:	f003 0302 	and.w	r3, r3, #2
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d001      	beq.n	801e3b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e3b2:	2301      	movs	r3, #1
 801e3b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e3b6:	7ffb      	ldrb	r3, [r7, #31]
 801e3b8:	009b      	lsls	r3, r3, #2
 801e3ba:	b2db      	uxtb	r3, r3
 801e3bc:	f003 0304 	and.w	r3, r3, #4
 801e3c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e3c2:	7dfb      	ldrb	r3, [r7, #23]
 801e3c4:	b29b      	uxth	r3, r3
 801e3c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e3ca:	4619      	mov	r1, r3
 801e3cc:	2036      	movs	r0, #54	; 0x36
 801e3ce:	f7fa f913 	bl	80185f8 <pbuf_alloc>
 801e3d2:	6138      	str	r0, [r7, #16]
 801e3d4:	693b      	ldr	r3, [r7, #16]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d109      	bne.n	801e3ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	8b5b      	ldrh	r3, [r3, #26]
 801e3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e3e2:	b29a      	uxth	r2, r3
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e3e8:	f04f 33ff 	mov.w	r3, #4294967295
 801e3ec:	e095      	b.n	801e51a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e3ee:	693b      	ldr	r3, [r7, #16]
 801e3f0:	895a      	ldrh	r2, [r3, #10]
 801e3f2:	7dfb      	ldrb	r3, [r7, #23]
 801e3f4:	b29b      	uxth	r3, r3
 801e3f6:	429a      	cmp	r2, r3
 801e3f8:	d206      	bcs.n	801e408 <tcp_enqueue_flags+0xa0>
 801e3fa:	4b4a      	ldr	r3, [pc, #296]	; (801e524 <tcp_enqueue_flags+0x1bc>)
 801e3fc:	f240 4239 	movw	r2, #1081	; 0x439
 801e400:	494c      	ldr	r1, [pc, #304]	; (801e534 <tcp_enqueue_flags+0x1cc>)
 801e402:	484a      	ldr	r0, [pc, #296]	; (801e52c <tcp_enqueue_flags+0x1c4>)
 801e404:	f004 fcf8 	bl	8022df8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e40c:	78fa      	ldrb	r2, [r7, #3]
 801e40e:	7ffb      	ldrb	r3, [r7, #31]
 801e410:	9300      	str	r3, [sp, #0]
 801e412:	460b      	mov	r3, r1
 801e414:	6939      	ldr	r1, [r7, #16]
 801e416:	6878      	ldr	r0, [r7, #4]
 801e418:	f7ff f918 	bl	801d64c <tcp_create_segment>
 801e41c:	60f8      	str	r0, [r7, #12]
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	2b00      	cmp	r3, #0
 801e422:	d109      	bne.n	801e438 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	8b5b      	ldrh	r3, [r3, #26]
 801e428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e42c:	b29a      	uxth	r2, r3
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e432:	f04f 33ff 	mov.w	r3, #4294967295
 801e436:	e070      	b.n	801e51a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	68db      	ldr	r3, [r3, #12]
 801e43c:	f003 0303 	and.w	r3, r3, #3
 801e440:	2b00      	cmp	r3, #0
 801e442:	d006      	beq.n	801e452 <tcp_enqueue_flags+0xea>
 801e444:	4b37      	ldr	r3, [pc, #220]	; (801e524 <tcp_enqueue_flags+0x1bc>)
 801e446:	f240 4242 	movw	r2, #1090	; 0x442
 801e44a:	493b      	ldr	r1, [pc, #236]	; (801e538 <tcp_enqueue_flags+0x1d0>)
 801e44c:	4837      	ldr	r0, [pc, #220]	; (801e52c <tcp_enqueue_flags+0x1c4>)
 801e44e:	f004 fcd3 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	891b      	ldrh	r3, [r3, #8]
 801e456:	2b00      	cmp	r3, #0
 801e458:	d006      	beq.n	801e468 <tcp_enqueue_flags+0x100>
 801e45a:	4b32      	ldr	r3, [pc, #200]	; (801e524 <tcp_enqueue_flags+0x1bc>)
 801e45c:	f240 4243 	movw	r2, #1091	; 0x443
 801e460:	4936      	ldr	r1, [pc, #216]	; (801e53c <tcp_enqueue_flags+0x1d4>)
 801e462:	4832      	ldr	r0, [pc, #200]	; (801e52c <tcp_enqueue_flags+0x1c4>)
 801e464:	f004 fcc8 	bl	8022df8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d103      	bne.n	801e478 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	68fa      	ldr	r2, [r7, #12]
 801e474:	66da      	str	r2, [r3, #108]	; 0x6c
 801e476:	e00d      	b.n	801e494 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e47c:	61bb      	str	r3, [r7, #24]
 801e47e:	e002      	b.n	801e486 <tcp_enqueue_flags+0x11e>
 801e480:	69bb      	ldr	r3, [r7, #24]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	61bb      	str	r3, [r7, #24]
 801e486:	69bb      	ldr	r3, [r7, #24]
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d1f8      	bne.n	801e480 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e48e:	69bb      	ldr	r3, [r7, #24]
 801e490:	68fa      	ldr	r2, [r7, #12]
 801e492:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	2200      	movs	r2, #0
 801e498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e49c:	78fb      	ldrb	r3, [r7, #3]
 801e49e:	f003 0302 	and.w	r3, r3, #2
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d104      	bne.n	801e4b0 <tcp_enqueue_flags+0x148>
 801e4a6:	78fb      	ldrb	r3, [r7, #3]
 801e4a8:	f003 0301 	and.w	r3, r3, #1
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d004      	beq.n	801e4ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e4b4:	1c5a      	adds	r2, r3, #1
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e4ba:	78fb      	ldrb	r3, [r7, #3]
 801e4bc:	f003 0301 	and.w	r3, r3, #1
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d006      	beq.n	801e4d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	8b5b      	ldrh	r3, [r3, #26]
 801e4c8:	f043 0320 	orr.w	r3, r3, #32
 801e4cc:	b29a      	uxth	r2, r3
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	685b      	ldr	r3, [r3, #4]
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f7fa fc00 	bl	8018cdc <pbuf_clen>
 801e4dc:	4603      	mov	r3, r0
 801e4de:	461a      	mov	r2, r3
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e4e6:	4413      	add	r3, r2
 801e4e8:	b29a      	uxth	r2, r3
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d00e      	beq.n	801e518 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d10a      	bne.n	801e518 <tcp_enqueue_flags+0x1b0>
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e506:	2b00      	cmp	r3, #0
 801e508:	d106      	bne.n	801e518 <tcp_enqueue_flags+0x1b0>
 801e50a:	4b06      	ldr	r3, [pc, #24]	; (801e524 <tcp_enqueue_flags+0x1bc>)
 801e50c:	f240 4265 	movw	r2, #1125	; 0x465
 801e510:	490b      	ldr	r1, [pc, #44]	; (801e540 <tcp_enqueue_flags+0x1d8>)
 801e512:	4806      	ldr	r0, [pc, #24]	; (801e52c <tcp_enqueue_flags+0x1c4>)
 801e514:	f004 fc70 	bl	8022df8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e518:	2300      	movs	r3, #0
}
 801e51a:	4618      	mov	r0, r3
 801e51c:	3720      	adds	r7, #32
 801e51e:	46bd      	mov	sp, r7
 801e520:	bd80      	pop	{r7, pc}
 801e522:	bf00      	nop
 801e524:	08026540 	.word	0x08026540
 801e528:	08026964 	.word	0x08026964
 801e52c:	08026594 	.word	0x08026594
 801e530:	080269bc 	.word	0x080269bc
 801e534:	080269dc 	.word	0x080269dc
 801e538:	08026a18 	.word	0x08026a18
 801e53c:	08026a30 	.word	0x08026a30
 801e540:	08026a5c 	.word	0x08026a5c

0801e544 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e544:	b5b0      	push	{r4, r5, r7, lr}
 801e546:	b08a      	sub	sp, #40	; 0x28
 801e548:	af00      	add	r7, sp, #0
 801e54a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	2b00      	cmp	r3, #0
 801e550:	d106      	bne.n	801e560 <tcp_output+0x1c>
 801e552:	4b8a      	ldr	r3, [pc, #552]	; (801e77c <tcp_output+0x238>)
 801e554:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e558:	4989      	ldr	r1, [pc, #548]	; (801e780 <tcp_output+0x23c>)
 801e55a:	488a      	ldr	r0, [pc, #552]	; (801e784 <tcp_output+0x240>)
 801e55c:	f004 fc4c 	bl	8022df8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	7d1b      	ldrb	r3, [r3, #20]
 801e564:	2b01      	cmp	r3, #1
 801e566:	d106      	bne.n	801e576 <tcp_output+0x32>
 801e568:	4b84      	ldr	r3, [pc, #528]	; (801e77c <tcp_output+0x238>)
 801e56a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e56e:	4986      	ldr	r1, [pc, #536]	; (801e788 <tcp_output+0x244>)
 801e570:	4884      	ldr	r0, [pc, #528]	; (801e784 <tcp_output+0x240>)
 801e572:	f004 fc41 	bl	8022df8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e576:	4b85      	ldr	r3, [pc, #532]	; (801e78c <tcp_output+0x248>)
 801e578:	681b      	ldr	r3, [r3, #0]
 801e57a:	687a      	ldr	r2, [r7, #4]
 801e57c:	429a      	cmp	r2, r3
 801e57e:	d101      	bne.n	801e584 <tcp_output+0x40>
    return ERR_OK;
 801e580:	2300      	movs	r3, #0
 801e582:	e1ce      	b.n	801e922 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e590:	4293      	cmp	r3, r2
 801e592:	bf28      	it	cs
 801e594:	4613      	movcs	r3, r2
 801e596:	b29b      	uxth	r3, r3
 801e598:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e59e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d10b      	bne.n	801e5be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	8b5b      	ldrh	r3, [r3, #26]
 801e5aa:	f003 0302 	and.w	r3, r3, #2
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	f000 81aa 	beq.w	801e908 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e5b4:	6878      	ldr	r0, [r7, #4]
 801e5b6:	f000 fdcb 	bl	801f150 <tcp_send_empty_ack>
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	e1b1      	b.n	801e922 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e5be:	6879      	ldr	r1, [r7, #4]
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	3304      	adds	r3, #4
 801e5c4:	461a      	mov	r2, r3
 801e5c6:	6878      	ldr	r0, [r7, #4]
 801e5c8:	f7ff f824 	bl	801d614 <tcp_route>
 801e5cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e5ce:	697b      	ldr	r3, [r7, #20]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d102      	bne.n	801e5da <tcp_output+0x96>
    return ERR_RTE;
 801e5d4:	f06f 0303 	mvn.w	r3, #3
 801e5d8:	e1a3      	b.n	801e922 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d003      	beq.n	801e5e8 <tcp_output+0xa4>
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	d111      	bne.n	801e60c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e5e8:	697b      	ldr	r3, [r7, #20]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d002      	beq.n	801e5f4 <tcp_output+0xb0>
 801e5ee:	697b      	ldr	r3, [r7, #20]
 801e5f0:	3304      	adds	r3, #4
 801e5f2:	e000      	b.n	801e5f6 <tcp_output+0xb2>
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e5f8:	693b      	ldr	r3, [r7, #16]
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d102      	bne.n	801e604 <tcp_output+0xc0>
      return ERR_RTE;
 801e5fe:	f06f 0303 	mvn.w	r3, #3
 801e602:	e18e      	b.n	801e922 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e604:	693b      	ldr	r3, [r7, #16]
 801e606:	681a      	ldr	r2, [r3, #0]
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e60e:	68db      	ldr	r3, [r3, #12]
 801e610:	685b      	ldr	r3, [r3, #4]
 801e612:	4618      	mov	r0, r3
 801e614:	f7f8 fe3f 	bl	8017296 <lwip_htonl>
 801e618:	4602      	mov	r2, r0
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e61e:	1ad3      	subs	r3, r2, r3
 801e620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e622:	8912      	ldrh	r2, [r2, #8]
 801e624:	4413      	add	r3, r2
 801e626:	69ba      	ldr	r2, [r7, #24]
 801e628:	429a      	cmp	r2, r3
 801e62a:	d227      	bcs.n	801e67c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e632:	461a      	mov	r2, r3
 801e634:	69bb      	ldr	r3, [r7, #24]
 801e636:	4293      	cmp	r3, r2
 801e638:	d114      	bne.n	801e664 <tcp_output+0x120>
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d110      	bne.n	801e664 <tcp_output+0x120>
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d10b      	bne.n	801e664 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	2200      	movs	r2, #0
 801e650:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	2201      	movs	r2, #1
 801e658:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	2200      	movs	r2, #0
 801e660:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	8b5b      	ldrh	r3, [r3, #26]
 801e668:	f003 0302 	and.w	r3, r3, #2
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	f000 814d 	beq.w	801e90c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e672:	6878      	ldr	r0, [r7, #4]
 801e674:	f000 fd6c 	bl	801f150 <tcp_send_empty_ack>
 801e678:	4603      	mov	r3, r0
 801e67a:	e152      	b.n	801e922 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	2200      	movs	r2, #0
 801e680:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e688:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e68a:	6a3b      	ldr	r3, [r7, #32]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	f000 811c 	beq.w	801e8ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e692:	e002      	b.n	801e69a <tcp_output+0x156>
 801e694:	6a3b      	ldr	r3, [r7, #32]
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	623b      	str	r3, [r7, #32]
 801e69a:	6a3b      	ldr	r3, [r7, #32]
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d1f8      	bne.n	801e694 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e6a2:	e112      	b.n	801e8ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6a6:	68db      	ldr	r3, [r3, #12]
 801e6a8:	899b      	ldrh	r3, [r3, #12]
 801e6aa:	b29b      	uxth	r3, r3
 801e6ac:	4618      	mov	r0, r3
 801e6ae:	f7f8 fddd 	bl	801726c <lwip_htons>
 801e6b2:	4603      	mov	r3, r0
 801e6b4:	b2db      	uxtb	r3, r3
 801e6b6:	f003 0304 	and.w	r3, r3, #4
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d006      	beq.n	801e6cc <tcp_output+0x188>
 801e6be:	4b2f      	ldr	r3, [pc, #188]	; (801e77c <tcp_output+0x238>)
 801e6c0:	f240 5236 	movw	r2, #1334	; 0x536
 801e6c4:	4932      	ldr	r1, [pc, #200]	; (801e790 <tcp_output+0x24c>)
 801e6c6:	482f      	ldr	r0, [pc, #188]	; (801e784 <tcp_output+0x240>)
 801e6c8:	f004 fb96 	bl	8022df8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d01f      	beq.n	801e714 <tcp_output+0x1d0>
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	8b5b      	ldrh	r3, [r3, #26]
 801e6d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d119      	bne.n	801e714 <tcp_output+0x1d0>
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d00b      	beq.n	801e700 <tcp_output+0x1bc>
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	d110      	bne.n	801e714 <tcp_output+0x1d0>
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6f6:	891a      	ldrh	r2, [r3, #8]
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e6fc:	429a      	cmp	r2, r3
 801e6fe:	d209      	bcs.n	801e714 <tcp_output+0x1d0>
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e706:	2b00      	cmp	r3, #0
 801e708:	d004      	beq.n	801e714 <tcp_output+0x1d0>
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e710:	2b08      	cmp	r3, #8
 801e712:	d901      	bls.n	801e718 <tcp_output+0x1d4>
 801e714:	2301      	movs	r3, #1
 801e716:	e000      	b.n	801e71a <tcp_output+0x1d6>
 801e718:	2300      	movs	r3, #0
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d106      	bne.n	801e72c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	8b5b      	ldrh	r3, [r3, #26]
 801e722:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e726:	2b00      	cmp	r3, #0
 801e728:	f000 80e4 	beq.w	801e8f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	7d1b      	ldrb	r3, [r3, #20]
 801e730:	2b02      	cmp	r3, #2
 801e732:	d00d      	beq.n	801e750 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e736:	68db      	ldr	r3, [r3, #12]
 801e738:	899b      	ldrh	r3, [r3, #12]
 801e73a:	b29c      	uxth	r4, r3
 801e73c:	2010      	movs	r0, #16
 801e73e:	f7f8 fd95 	bl	801726c <lwip_htons>
 801e742:	4603      	mov	r3, r0
 801e744:	461a      	mov	r2, r3
 801e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e748:	68db      	ldr	r3, [r3, #12]
 801e74a:	4322      	orrs	r2, r4
 801e74c:	b292      	uxth	r2, r2
 801e74e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e750:	697a      	ldr	r2, [r7, #20]
 801e752:	6879      	ldr	r1, [r7, #4]
 801e754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e756:	f000 f909 	bl	801e96c <tcp_output_segment>
 801e75a:	4603      	mov	r3, r0
 801e75c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d016      	beq.n	801e794 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	8b5b      	ldrh	r3, [r3, #26]
 801e76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e76e:	b29a      	uxth	r2, r3
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	835a      	strh	r2, [r3, #26]
      return err;
 801e774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e778:	e0d3      	b.n	801e922 <tcp_output+0x3de>
 801e77a:	bf00      	nop
 801e77c:	08026540 	.word	0x08026540
 801e780:	08026a84 	.word	0x08026a84
 801e784:	08026594 	.word	0x08026594
 801e788:	08026a9c 	.word	0x08026a9c
 801e78c:	20061ce0 	.word	0x20061ce0
 801e790:	08026ac4 	.word	0x08026ac4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e796:	681a      	ldr	r2, [r3, #0]
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	7d1b      	ldrb	r3, [r3, #20]
 801e7a0:	2b02      	cmp	r3, #2
 801e7a2:	d006      	beq.n	801e7b2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	8b5b      	ldrh	r3, [r3, #26]
 801e7a8:	f023 0303 	bic.w	r3, r3, #3
 801e7ac:	b29a      	uxth	r2, r3
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7b4:	68db      	ldr	r3, [r3, #12]
 801e7b6:	685b      	ldr	r3, [r3, #4]
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	f7f8 fd6c 	bl	8017296 <lwip_htonl>
 801e7be:	4604      	mov	r4, r0
 801e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7c2:	891b      	ldrh	r3, [r3, #8]
 801e7c4:	461d      	mov	r5, r3
 801e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7c8:	68db      	ldr	r3, [r3, #12]
 801e7ca:	899b      	ldrh	r3, [r3, #12]
 801e7cc:	b29b      	uxth	r3, r3
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	f7f8 fd4c 	bl	801726c <lwip_htons>
 801e7d4:	4603      	mov	r3, r0
 801e7d6:	b2db      	uxtb	r3, r3
 801e7d8:	f003 0303 	and.w	r3, r3, #3
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d001      	beq.n	801e7e4 <tcp_output+0x2a0>
 801e7e0:	2301      	movs	r3, #1
 801e7e2:	e000      	b.n	801e7e6 <tcp_output+0x2a2>
 801e7e4:	2300      	movs	r3, #0
 801e7e6:	442b      	add	r3, r5
 801e7e8:	4423      	add	r3, r4
 801e7ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e7f0:	68bb      	ldr	r3, [r7, #8]
 801e7f2:	1ad3      	subs	r3, r2, r3
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	da02      	bge.n	801e7fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	68ba      	ldr	r2, [r7, #8]
 801e7fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e800:	891b      	ldrh	r3, [r3, #8]
 801e802:	461c      	mov	r4, r3
 801e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e806:	68db      	ldr	r3, [r3, #12]
 801e808:	899b      	ldrh	r3, [r3, #12]
 801e80a:	b29b      	uxth	r3, r3
 801e80c:	4618      	mov	r0, r3
 801e80e:	f7f8 fd2d 	bl	801726c <lwip_htons>
 801e812:	4603      	mov	r3, r0
 801e814:	b2db      	uxtb	r3, r3
 801e816:	f003 0303 	and.w	r3, r3, #3
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	d001      	beq.n	801e822 <tcp_output+0x2de>
 801e81e:	2301      	movs	r3, #1
 801e820:	e000      	b.n	801e824 <tcp_output+0x2e0>
 801e822:	2300      	movs	r3, #0
 801e824:	4423      	add	r3, r4
 801e826:	2b00      	cmp	r3, #0
 801e828:	d049      	beq.n	801e8be <tcp_output+0x37a>
      seg->next = NULL;
 801e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e82c:	2200      	movs	r2, #0
 801e82e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e834:	2b00      	cmp	r3, #0
 801e836:	d105      	bne.n	801e844 <tcp_output+0x300>
        pcb->unacked = seg;
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e83c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e840:	623b      	str	r3, [r7, #32]
 801e842:	e03f      	b.n	801e8c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e846:	68db      	ldr	r3, [r3, #12]
 801e848:	685b      	ldr	r3, [r3, #4]
 801e84a:	4618      	mov	r0, r3
 801e84c:	f7f8 fd23 	bl	8017296 <lwip_htonl>
 801e850:	4604      	mov	r4, r0
 801e852:	6a3b      	ldr	r3, [r7, #32]
 801e854:	68db      	ldr	r3, [r3, #12]
 801e856:	685b      	ldr	r3, [r3, #4]
 801e858:	4618      	mov	r0, r3
 801e85a:	f7f8 fd1c 	bl	8017296 <lwip_htonl>
 801e85e:	4603      	mov	r3, r0
 801e860:	1ae3      	subs	r3, r4, r3
 801e862:	2b00      	cmp	r3, #0
 801e864:	da24      	bge.n	801e8b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	3370      	adds	r3, #112	; 0x70
 801e86a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e86c:	e002      	b.n	801e874 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e86e:	69fb      	ldr	r3, [r7, #28]
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e874:	69fb      	ldr	r3, [r7, #28]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d011      	beq.n	801e8a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e87c:	69fb      	ldr	r3, [r7, #28]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	68db      	ldr	r3, [r3, #12]
 801e882:	685b      	ldr	r3, [r3, #4]
 801e884:	4618      	mov	r0, r3
 801e886:	f7f8 fd06 	bl	8017296 <lwip_htonl>
 801e88a:	4604      	mov	r4, r0
 801e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e88e:	68db      	ldr	r3, [r3, #12]
 801e890:	685b      	ldr	r3, [r3, #4]
 801e892:	4618      	mov	r0, r3
 801e894:	f7f8 fcff 	bl	8017296 <lwip_htonl>
 801e898:	4603      	mov	r3, r0
 801e89a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	dbe6      	blt.n	801e86e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801e8a0:	69fb      	ldr	r3, [r7, #28]
 801e8a2:	681a      	ldr	r2, [r3, #0]
 801e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e8a8:	69fb      	ldr	r3, [r7, #28]
 801e8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8ac:	601a      	str	r2, [r3, #0]
 801e8ae:	e009      	b.n	801e8c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e8b0:	6a3b      	ldr	r3, [r7, #32]
 801e8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e8b6:	6a3b      	ldr	r3, [r7, #32]
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	623b      	str	r3, [r7, #32]
 801e8bc:	e002      	b.n	801e8c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e8be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e8c0:	f7fb ff19 	bl	801a6f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e8c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	d012      	beq.n	801e8f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8d2:	68db      	ldr	r3, [r3, #12]
 801e8d4:	685b      	ldr	r3, [r3, #4]
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	f7f8 fcdd 	bl	8017296 <lwip_htonl>
 801e8dc:	4602      	mov	r2, r0
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e8e2:	1ad3      	subs	r3, r2, r3
 801e8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8e6:	8912      	ldrh	r2, [r2, #8]
 801e8e8:	4413      	add	r3, r2
  while (seg != NULL &&
 801e8ea:	69ba      	ldr	r2, [r7, #24]
 801e8ec:	429a      	cmp	r2, r3
 801e8ee:	f4bf aed9 	bcs.w	801e6a4 <tcp_output+0x160>
 801e8f2:	e000      	b.n	801e8f6 <tcp_output+0x3b2>
      break;
 801e8f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d108      	bne.n	801e910 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	2200      	movs	r2, #0
 801e902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801e906:	e004      	b.n	801e912 <tcp_output+0x3ce>
    goto output_done;
 801e908:	bf00      	nop
 801e90a:	e002      	b.n	801e912 <tcp_output+0x3ce>
    goto output_done;
 801e90c:	bf00      	nop
 801e90e:	e000      	b.n	801e912 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e910:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	8b5b      	ldrh	r3, [r3, #26]
 801e916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e91a:	b29a      	uxth	r2, r3
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801e920:	2300      	movs	r3, #0
}
 801e922:	4618      	mov	r0, r3
 801e924:	3728      	adds	r7, #40	; 0x28
 801e926:	46bd      	mov	sp, r7
 801e928:	bdb0      	pop	{r4, r5, r7, pc}
 801e92a:	bf00      	nop

0801e92c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e92c:	b580      	push	{r7, lr}
 801e92e:	b082      	sub	sp, #8
 801e930:	af00      	add	r7, sp, #0
 801e932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	2b00      	cmp	r3, #0
 801e938:	d106      	bne.n	801e948 <tcp_output_segment_busy+0x1c>
 801e93a:	4b09      	ldr	r3, [pc, #36]	; (801e960 <tcp_output_segment_busy+0x34>)
 801e93c:	f240 529a 	movw	r2, #1434	; 0x59a
 801e940:	4908      	ldr	r1, [pc, #32]	; (801e964 <tcp_output_segment_busy+0x38>)
 801e942:	4809      	ldr	r0, [pc, #36]	; (801e968 <tcp_output_segment_busy+0x3c>)
 801e944:	f004 fa58 	bl	8022df8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	685b      	ldr	r3, [r3, #4]
 801e94c:	7b9b      	ldrb	r3, [r3, #14]
 801e94e:	2b01      	cmp	r3, #1
 801e950:	d001      	beq.n	801e956 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e952:	2301      	movs	r3, #1
 801e954:	e000      	b.n	801e958 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e956:	2300      	movs	r3, #0
}
 801e958:	4618      	mov	r0, r3
 801e95a:	3708      	adds	r7, #8
 801e95c:	46bd      	mov	sp, r7
 801e95e:	bd80      	pop	{r7, pc}
 801e960:	08026540 	.word	0x08026540
 801e964:	08026adc 	.word	0x08026adc
 801e968:	08026594 	.word	0x08026594

0801e96c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e96c:	b5b0      	push	{r4, r5, r7, lr}
 801e96e:	b08c      	sub	sp, #48	; 0x30
 801e970:	af04      	add	r7, sp, #16
 801e972:	60f8      	str	r0, [r7, #12]
 801e974:	60b9      	str	r1, [r7, #8]
 801e976:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d106      	bne.n	801e98c <tcp_output_segment+0x20>
 801e97e:	4b64      	ldr	r3, [pc, #400]	; (801eb10 <tcp_output_segment+0x1a4>)
 801e980:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e984:	4963      	ldr	r1, [pc, #396]	; (801eb14 <tcp_output_segment+0x1a8>)
 801e986:	4864      	ldr	r0, [pc, #400]	; (801eb18 <tcp_output_segment+0x1ac>)
 801e988:	f004 fa36 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e98c:	68bb      	ldr	r3, [r7, #8]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d106      	bne.n	801e9a0 <tcp_output_segment+0x34>
 801e992:	4b5f      	ldr	r3, [pc, #380]	; (801eb10 <tcp_output_segment+0x1a4>)
 801e994:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e998:	4960      	ldr	r1, [pc, #384]	; (801eb1c <tcp_output_segment+0x1b0>)
 801e99a:	485f      	ldr	r0, [pc, #380]	; (801eb18 <tcp_output_segment+0x1ac>)
 801e99c:	f004 fa2c 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d106      	bne.n	801e9b4 <tcp_output_segment+0x48>
 801e9a6:	4b5a      	ldr	r3, [pc, #360]	; (801eb10 <tcp_output_segment+0x1a4>)
 801e9a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e9ac:	495c      	ldr	r1, [pc, #368]	; (801eb20 <tcp_output_segment+0x1b4>)
 801e9ae:	485a      	ldr	r0, [pc, #360]	; (801eb18 <tcp_output_segment+0x1ac>)
 801e9b0:	f004 fa22 	bl	8022df8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e9b4:	68f8      	ldr	r0, [r7, #12]
 801e9b6:	f7ff ffb9 	bl	801e92c <tcp_output_segment_busy>
 801e9ba:	4603      	mov	r3, r0
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	d001      	beq.n	801e9c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	e0a1      	b.n	801eb08 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e9c4:	68bb      	ldr	r3, [r7, #8]
 801e9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	68dc      	ldr	r4, [r3, #12]
 801e9cc:	4610      	mov	r0, r2
 801e9ce:	f7f8 fc62 	bl	8017296 <lwip_htonl>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e9d6:	68bb      	ldr	r3, [r7, #8]
 801e9d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e9da:	68fb      	ldr	r3, [r7, #12]
 801e9dc:	68dc      	ldr	r4, [r3, #12]
 801e9de:	4610      	mov	r0, r2
 801e9e0:	f7f8 fc44 	bl	801726c <lwip_htons>
 801e9e4:	4603      	mov	r3, r0
 801e9e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e9e8:	68bb      	ldr	r3, [r7, #8]
 801e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9ec:	68ba      	ldr	r2, [r7, #8]
 801e9ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e9f0:	441a      	add	r2, r3
 801e9f2:	68bb      	ldr	r3, [r7, #8]
 801e9f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	68db      	ldr	r3, [r3, #12]
 801e9fa:	3314      	adds	r3, #20
 801e9fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	7a9b      	ldrb	r3, [r3, #10]
 801ea02:	f003 0301 	and.w	r3, r3, #1
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d015      	beq.n	801ea36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ea0a:	68bb      	ldr	r3, [r7, #8]
 801ea0c:	3304      	adds	r3, #4
 801ea0e:	461a      	mov	r2, r3
 801ea10:	6879      	ldr	r1, [r7, #4]
 801ea12:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ea16:	f7fc fa33 	bl	801ae80 <tcp_eff_send_mss_netif>
 801ea1a:	4603      	mov	r3, r0
 801ea1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ea1e:	8b7b      	ldrh	r3, [r7, #26]
 801ea20:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ea24:	4618      	mov	r0, r3
 801ea26:	f7f8 fc36 	bl	8017296 <lwip_htonl>
 801ea2a:	4602      	mov	r2, r0
 801ea2c:	69fb      	ldr	r3, [r7, #28]
 801ea2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ea30:	69fb      	ldr	r3, [r7, #28]
 801ea32:	3304      	adds	r3, #4
 801ea34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ea36:	68bb      	ldr	r3, [r7, #8]
 801ea38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	da02      	bge.n	801ea46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ea40:	68bb      	ldr	r3, [r7, #8]
 801ea42:	2200      	movs	r2, #0
 801ea44:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801ea46:	68bb      	ldr	r3, [r7, #8]
 801ea48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d10c      	bne.n	801ea68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801ea4e:	4b35      	ldr	r3, [pc, #212]	; (801eb24 <tcp_output_segment+0x1b8>)
 801ea50:	681a      	ldr	r2, [r3, #0]
 801ea52:	68bb      	ldr	r3, [r7, #8]
 801ea54:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	68db      	ldr	r3, [r3, #12]
 801ea5a:	685b      	ldr	r3, [r3, #4]
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	f7f8 fc1a 	bl	8017296 <lwip_htonl>
 801ea62:	4602      	mov	r2, r0
 801ea64:	68bb      	ldr	r3, [r7, #8]
 801ea66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	68da      	ldr	r2, [r3, #12]
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	685b      	ldr	r3, [r3, #4]
 801ea70:	685b      	ldr	r3, [r3, #4]
 801ea72:	1ad3      	subs	r3, r2, r3
 801ea74:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	685b      	ldr	r3, [r3, #4]
 801ea7a:	8959      	ldrh	r1, [r3, #10]
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	685b      	ldr	r3, [r3, #4]
 801ea80:	8b3a      	ldrh	r2, [r7, #24]
 801ea82:	1a8a      	subs	r2, r1, r2
 801ea84:	b292      	uxth	r2, r2
 801ea86:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	685b      	ldr	r3, [r3, #4]
 801ea8c:	8919      	ldrh	r1, [r3, #8]
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	685b      	ldr	r3, [r3, #4]
 801ea92:	8b3a      	ldrh	r2, [r7, #24]
 801ea94:	1a8a      	subs	r2, r1, r2
 801ea96:	b292      	uxth	r2, r2
 801ea98:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	685b      	ldr	r3, [r3, #4]
 801ea9e:	68fa      	ldr	r2, [r7, #12]
 801eaa0:	68d2      	ldr	r2, [r2, #12]
 801eaa2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801eaa4:	68fb      	ldr	r3, [r7, #12]
 801eaa6:	68db      	ldr	r3, [r3, #12]
 801eaa8:	2200      	movs	r2, #0
 801eaaa:	741a      	strb	r2, [r3, #16]
 801eaac:	2200      	movs	r2, #0
 801eaae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801eab0:	68fb      	ldr	r3, [r7, #12]
 801eab2:	68da      	ldr	r2, [r3, #12]
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	7a9b      	ldrb	r3, [r3, #10]
 801eab8:	f003 0301 	and.w	r3, r3, #1
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	d001      	beq.n	801eac4 <tcp_output_segment+0x158>
 801eac0:	2318      	movs	r3, #24
 801eac2:	e000      	b.n	801eac6 <tcp_output_segment+0x15a>
 801eac4:	2314      	movs	r3, #20
 801eac6:	4413      	add	r3, r2
 801eac8:	69fa      	ldr	r2, [r7, #28]
 801eaca:	429a      	cmp	r2, r3
 801eacc:	d006      	beq.n	801eadc <tcp_output_segment+0x170>
 801eace:	4b10      	ldr	r3, [pc, #64]	; (801eb10 <tcp_output_segment+0x1a4>)
 801ead0:	f240 621c 	movw	r2, #1564	; 0x61c
 801ead4:	4914      	ldr	r1, [pc, #80]	; (801eb28 <tcp_output_segment+0x1bc>)
 801ead6:	4810      	ldr	r0, [pc, #64]	; (801eb18 <tcp_output_segment+0x1ac>)
 801ead8:	f004 f98e 	bl	8022df8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801eadc:	68fb      	ldr	r3, [r7, #12]
 801eade:	6858      	ldr	r0, [r3, #4]
 801eae0:	68b9      	ldr	r1, [r7, #8]
 801eae2:	68bb      	ldr	r3, [r7, #8]
 801eae4:	1d1c      	adds	r4, r3, #4
 801eae6:	68bb      	ldr	r3, [r7, #8]
 801eae8:	7add      	ldrb	r5, [r3, #11]
 801eaea:	68bb      	ldr	r3, [r7, #8]
 801eaec:	7a9b      	ldrb	r3, [r3, #10]
 801eaee:	687a      	ldr	r2, [r7, #4]
 801eaf0:	9202      	str	r2, [sp, #8]
 801eaf2:	2206      	movs	r2, #6
 801eaf4:	9201      	str	r2, [sp, #4]
 801eaf6:	9300      	str	r3, [sp, #0]
 801eaf8:	462b      	mov	r3, r5
 801eafa:	4622      	mov	r2, r4
 801eafc:	f002 fc3e 	bl	802137c <ip4_output_if>
 801eb00:	4603      	mov	r3, r0
 801eb02:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801eb04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801eb08:	4618      	mov	r0, r3
 801eb0a:	3720      	adds	r7, #32
 801eb0c:	46bd      	mov	sp, r7
 801eb0e:	bdb0      	pop	{r4, r5, r7, pc}
 801eb10:	08026540 	.word	0x08026540
 801eb14:	08026b04 	.word	0x08026b04
 801eb18:	08026594 	.word	0x08026594
 801eb1c:	08026b24 	.word	0x08026b24
 801eb20:	08026b44 	.word	0x08026b44
 801eb24:	20061c94 	.word	0x20061c94
 801eb28:	08026b68 	.word	0x08026b68

0801eb2c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801eb2c:	b5b0      	push	{r4, r5, r7, lr}
 801eb2e:	b084      	sub	sp, #16
 801eb30:	af00      	add	r7, sp, #0
 801eb32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d106      	bne.n	801eb48 <tcp_rexmit_rto_prepare+0x1c>
 801eb3a:	4b31      	ldr	r3, [pc, #196]	; (801ec00 <tcp_rexmit_rto_prepare+0xd4>)
 801eb3c:	f240 6263 	movw	r2, #1635	; 0x663
 801eb40:	4930      	ldr	r1, [pc, #192]	; (801ec04 <tcp_rexmit_rto_prepare+0xd8>)
 801eb42:	4831      	ldr	r0, [pc, #196]	; (801ec08 <tcp_rexmit_rto_prepare+0xdc>)
 801eb44:	f004 f958 	bl	8022df8 <iprintf>

  if (pcb->unacked == NULL) {
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d102      	bne.n	801eb56 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801eb50:	f06f 0305 	mvn.w	r3, #5
 801eb54:	e050      	b.n	801ebf8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eb5a:	60fb      	str	r3, [r7, #12]
 801eb5c:	e00b      	b.n	801eb76 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801eb5e:	68f8      	ldr	r0, [r7, #12]
 801eb60:	f7ff fee4 	bl	801e92c <tcp_output_segment_busy>
 801eb64:	4603      	mov	r3, r0
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d002      	beq.n	801eb70 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801eb6a:	f06f 0305 	mvn.w	r3, #5
 801eb6e:	e043      	b.n	801ebf8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	60fb      	str	r3, [r7, #12]
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	681b      	ldr	r3, [r3, #0]
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d1ef      	bne.n	801eb5e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801eb7e:	68f8      	ldr	r0, [r7, #12]
 801eb80:	f7ff fed4 	bl	801e92c <tcp_output_segment_busy>
 801eb84:	4603      	mov	r3, r0
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d002      	beq.n	801eb90 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801eb8a:	f06f 0305 	mvn.w	r3, #5
 801eb8e:	e033      	b.n	801ebf8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	2200      	movs	r2, #0
 801eba4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	8b5b      	ldrh	r3, [r3, #26]
 801ebaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ebae:	b29a      	uxth	r2, r3
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	68db      	ldr	r3, [r3, #12]
 801ebb8:	685b      	ldr	r3, [r3, #4]
 801ebba:	4618      	mov	r0, r3
 801ebbc:	f7f8 fb6b 	bl	8017296 <lwip_htonl>
 801ebc0:	4604      	mov	r4, r0
 801ebc2:	68fb      	ldr	r3, [r7, #12]
 801ebc4:	891b      	ldrh	r3, [r3, #8]
 801ebc6:	461d      	mov	r5, r3
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	68db      	ldr	r3, [r3, #12]
 801ebcc:	899b      	ldrh	r3, [r3, #12]
 801ebce:	b29b      	uxth	r3, r3
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	f7f8 fb4b 	bl	801726c <lwip_htons>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	b2db      	uxtb	r3, r3
 801ebda:	f003 0303 	and.w	r3, r3, #3
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	d001      	beq.n	801ebe6 <tcp_rexmit_rto_prepare+0xba>
 801ebe2:	2301      	movs	r3, #1
 801ebe4:	e000      	b.n	801ebe8 <tcp_rexmit_rto_prepare+0xbc>
 801ebe6:	2300      	movs	r3, #0
 801ebe8:	442b      	add	r3, r5
 801ebea:	18e2      	adds	r2, r4, r3
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	2200      	movs	r2, #0
 801ebf4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801ebf6:	2300      	movs	r3, #0
}
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	3710      	adds	r7, #16
 801ebfc:	46bd      	mov	sp, r7
 801ebfe:	bdb0      	pop	{r4, r5, r7, pc}
 801ec00:	08026540 	.word	0x08026540
 801ec04:	08026b7c 	.word	0x08026b7c
 801ec08:	08026594 	.word	0x08026594

0801ec0c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ec0c:	b580      	push	{r7, lr}
 801ec0e:	b082      	sub	sp, #8
 801ec10:	af00      	add	r7, sp, #0
 801ec12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d106      	bne.n	801ec28 <tcp_rexmit_rto_commit+0x1c>
 801ec1a:	4b0d      	ldr	r3, [pc, #52]	; (801ec50 <tcp_rexmit_rto_commit+0x44>)
 801ec1c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ec20:	490c      	ldr	r1, [pc, #48]	; (801ec54 <tcp_rexmit_rto_commit+0x48>)
 801ec22:	480d      	ldr	r0, [pc, #52]	; (801ec58 <tcp_rexmit_rto_commit+0x4c>)
 801ec24:	f004 f8e8 	bl	8022df8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ec2e:	2bff      	cmp	r3, #255	; 0xff
 801ec30:	d007      	beq.n	801ec42 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ec38:	3301      	adds	r3, #1
 801ec3a:	b2da      	uxtb	r2, r3
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801ec42:	6878      	ldr	r0, [r7, #4]
 801ec44:	f7ff fc7e 	bl	801e544 <tcp_output>
}
 801ec48:	bf00      	nop
 801ec4a:	3708      	adds	r7, #8
 801ec4c:	46bd      	mov	sp, r7
 801ec4e:	bd80      	pop	{r7, pc}
 801ec50:	08026540 	.word	0x08026540
 801ec54:	08026ba0 	.word	0x08026ba0
 801ec58:	08026594 	.word	0x08026594

0801ec5c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801ec5c:	b580      	push	{r7, lr}
 801ec5e:	b082      	sub	sp, #8
 801ec60:	af00      	add	r7, sp, #0
 801ec62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d106      	bne.n	801ec78 <tcp_rexmit_rto+0x1c>
 801ec6a:	4b0a      	ldr	r3, [pc, #40]	; (801ec94 <tcp_rexmit_rto+0x38>)
 801ec6c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801ec70:	4909      	ldr	r1, [pc, #36]	; (801ec98 <tcp_rexmit_rto+0x3c>)
 801ec72:	480a      	ldr	r0, [pc, #40]	; (801ec9c <tcp_rexmit_rto+0x40>)
 801ec74:	f004 f8c0 	bl	8022df8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801ec78:	6878      	ldr	r0, [r7, #4]
 801ec7a:	f7ff ff57 	bl	801eb2c <tcp_rexmit_rto_prepare>
 801ec7e:	4603      	mov	r3, r0
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	d102      	bne.n	801ec8a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801ec84:	6878      	ldr	r0, [r7, #4]
 801ec86:	f7ff ffc1 	bl	801ec0c <tcp_rexmit_rto_commit>
  }
}
 801ec8a:	bf00      	nop
 801ec8c:	3708      	adds	r7, #8
 801ec8e:	46bd      	mov	sp, r7
 801ec90:	bd80      	pop	{r7, pc}
 801ec92:	bf00      	nop
 801ec94:	08026540 	.word	0x08026540
 801ec98:	08026bc4 	.word	0x08026bc4
 801ec9c:	08026594 	.word	0x08026594

0801eca0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801eca0:	b590      	push	{r4, r7, lr}
 801eca2:	b085      	sub	sp, #20
 801eca4:	af00      	add	r7, sp, #0
 801eca6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	d106      	bne.n	801ecbc <tcp_rexmit+0x1c>
 801ecae:	4b2f      	ldr	r3, [pc, #188]	; (801ed6c <tcp_rexmit+0xcc>)
 801ecb0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801ecb4:	492e      	ldr	r1, [pc, #184]	; (801ed70 <tcp_rexmit+0xd0>)
 801ecb6:	482f      	ldr	r0, [pc, #188]	; (801ed74 <tcp_rexmit+0xd4>)
 801ecb8:	f004 f89e 	bl	8022df8 <iprintf>

  if (pcb->unacked == NULL) {
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ecc0:	2b00      	cmp	r3, #0
 801ecc2:	d102      	bne.n	801ecca <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ecc4:	f06f 0305 	mvn.w	r3, #5
 801ecc8:	e04c      	b.n	801ed64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ecce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ecd0:	68b8      	ldr	r0, [r7, #8]
 801ecd2:	f7ff fe2b 	bl	801e92c <tcp_output_segment_busy>
 801ecd6:	4603      	mov	r3, r0
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d002      	beq.n	801ece2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ecdc:	f06f 0305 	mvn.w	r3, #5
 801ece0:	e040      	b.n	801ed64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ece2:	68bb      	ldr	r3, [r7, #8]
 801ece4:	681a      	ldr	r2, [r3, #0]
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	336c      	adds	r3, #108	; 0x6c
 801ecee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ecf0:	e002      	b.n	801ecf8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d011      	beq.n	801ed24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ed00:	68fb      	ldr	r3, [r7, #12]
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	68db      	ldr	r3, [r3, #12]
 801ed06:	685b      	ldr	r3, [r3, #4]
 801ed08:	4618      	mov	r0, r3
 801ed0a:	f7f8 fac4 	bl	8017296 <lwip_htonl>
 801ed0e:	4604      	mov	r4, r0
 801ed10:	68bb      	ldr	r3, [r7, #8]
 801ed12:	68db      	ldr	r3, [r3, #12]
 801ed14:	685b      	ldr	r3, [r3, #4]
 801ed16:	4618      	mov	r0, r3
 801ed18:	f7f8 fabd 	bl	8017296 <lwip_htonl>
 801ed1c:	4603      	mov	r3, r0
 801ed1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	dbe6      	blt.n	801ecf2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ed24:	68fb      	ldr	r3, [r7, #12]
 801ed26:	681a      	ldr	r2, [r3, #0]
 801ed28:	68bb      	ldr	r3, [r7, #8]
 801ed2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ed2c:	68fb      	ldr	r3, [r7, #12]
 801ed2e:	68ba      	ldr	r2, [r7, #8]
 801ed30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ed32:	68bb      	ldr	r3, [r7, #8]
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d103      	bne.n	801ed42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ed48:	2bff      	cmp	r3, #255	; 0xff
 801ed4a:	d007      	beq.n	801ed5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ed52:	3301      	adds	r3, #1
 801ed54:	b2da      	uxtb	r2, r3
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	2200      	movs	r2, #0
 801ed60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ed62:	2300      	movs	r3, #0
}
 801ed64:	4618      	mov	r0, r3
 801ed66:	3714      	adds	r7, #20
 801ed68:	46bd      	mov	sp, r7
 801ed6a:	bd90      	pop	{r4, r7, pc}
 801ed6c:	08026540 	.word	0x08026540
 801ed70:	08026be0 	.word	0x08026be0
 801ed74:	08026594 	.word	0x08026594

0801ed78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b082      	sub	sp, #8
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d106      	bne.n	801ed94 <tcp_rexmit_fast+0x1c>
 801ed86:	4b2a      	ldr	r3, [pc, #168]	; (801ee30 <tcp_rexmit_fast+0xb8>)
 801ed88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ed8c:	4929      	ldr	r1, [pc, #164]	; (801ee34 <tcp_rexmit_fast+0xbc>)
 801ed8e:	482a      	ldr	r0, [pc, #168]	; (801ee38 <tcp_rexmit_fast+0xc0>)
 801ed90:	f004 f832 	bl	8022df8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	d044      	beq.n	801ee26 <tcp_rexmit_fast+0xae>
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	8b5b      	ldrh	r3, [r3, #26]
 801eda0:	f003 0304 	and.w	r3, r3, #4
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d13e      	bne.n	801ee26 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801eda8:	6878      	ldr	r0, [r7, #4]
 801edaa:	f7ff ff79 	bl	801eca0 <tcp_rexmit>
 801edae:	4603      	mov	r3, r0
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d138      	bne.n	801ee26 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801edc0:	4293      	cmp	r3, r2
 801edc2:	bf28      	it	cs
 801edc4:	4613      	movcs	r3, r2
 801edc6:	b29b      	uxth	r3, r3
 801edc8:	0fda      	lsrs	r2, r3, #31
 801edca:	4413      	add	r3, r2
 801edcc:	105b      	asrs	r3, r3, #1
 801edce:	b29a      	uxth	r2, r3
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801eddc:	461a      	mov	r2, r3
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ede2:	005b      	lsls	r3, r3, #1
 801ede4:	429a      	cmp	r2, r3
 801ede6:	d206      	bcs.n	801edf6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801edec:	005b      	lsls	r3, r3, #1
 801edee:	b29a      	uxth	r2, r3
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ee00:	4619      	mov	r1, r3
 801ee02:	0049      	lsls	r1, r1, #1
 801ee04:	440b      	add	r3, r1
 801ee06:	b29b      	uxth	r3, r3
 801ee08:	4413      	add	r3, r2
 801ee0a:	b29a      	uxth	r2, r3
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	8b5b      	ldrh	r3, [r3, #26]
 801ee16:	f043 0304 	orr.w	r3, r3, #4
 801ee1a:	b29a      	uxth	r2, r3
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	2200      	movs	r2, #0
 801ee24:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ee26:	bf00      	nop
 801ee28:	3708      	adds	r7, #8
 801ee2a:	46bd      	mov	sp, r7
 801ee2c:	bd80      	pop	{r7, pc}
 801ee2e:	bf00      	nop
 801ee30:	08026540 	.word	0x08026540
 801ee34:	08026bf8 	.word	0x08026bf8
 801ee38:	08026594 	.word	0x08026594

0801ee3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ee3c:	b580      	push	{r7, lr}
 801ee3e:	b086      	sub	sp, #24
 801ee40:	af00      	add	r7, sp, #0
 801ee42:	60f8      	str	r0, [r7, #12]
 801ee44:	607b      	str	r3, [r7, #4]
 801ee46:	460b      	mov	r3, r1
 801ee48:	817b      	strh	r3, [r7, #10]
 801ee4a:	4613      	mov	r3, r2
 801ee4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ee4e:	897a      	ldrh	r2, [r7, #10]
 801ee50:	893b      	ldrh	r3, [r7, #8]
 801ee52:	4413      	add	r3, r2
 801ee54:	b29b      	uxth	r3, r3
 801ee56:	3314      	adds	r3, #20
 801ee58:	b29b      	uxth	r3, r3
 801ee5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ee5e:	4619      	mov	r1, r3
 801ee60:	2022      	movs	r0, #34	; 0x22
 801ee62:	f7f9 fbc9 	bl	80185f8 <pbuf_alloc>
 801ee66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ee68:	697b      	ldr	r3, [r7, #20]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d04d      	beq.n	801ef0a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ee6e:	897b      	ldrh	r3, [r7, #10]
 801ee70:	3313      	adds	r3, #19
 801ee72:	697a      	ldr	r2, [r7, #20]
 801ee74:	8952      	ldrh	r2, [r2, #10]
 801ee76:	4293      	cmp	r3, r2
 801ee78:	db06      	blt.n	801ee88 <tcp_output_alloc_header_common+0x4c>
 801ee7a:	4b26      	ldr	r3, [pc, #152]	; (801ef14 <tcp_output_alloc_header_common+0xd8>)
 801ee7c:	f240 7223 	movw	r2, #1827	; 0x723
 801ee80:	4925      	ldr	r1, [pc, #148]	; (801ef18 <tcp_output_alloc_header_common+0xdc>)
 801ee82:	4826      	ldr	r0, [pc, #152]	; (801ef1c <tcp_output_alloc_header_common+0xe0>)
 801ee84:	f003 ffb8 	bl	8022df8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ee88:	697b      	ldr	r3, [r7, #20]
 801ee8a:	685b      	ldr	r3, [r3, #4]
 801ee8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ee8e:	8c3b      	ldrh	r3, [r7, #32]
 801ee90:	4618      	mov	r0, r3
 801ee92:	f7f8 f9eb 	bl	801726c <lwip_htons>
 801ee96:	4603      	mov	r3, r0
 801ee98:	461a      	mov	r2, r3
 801ee9a:	693b      	ldr	r3, [r7, #16]
 801ee9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ee9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801eea0:	4618      	mov	r0, r3
 801eea2:	f7f8 f9e3 	bl	801726c <lwip_htons>
 801eea6:	4603      	mov	r3, r0
 801eea8:	461a      	mov	r2, r3
 801eeaa:	693b      	ldr	r3, [r7, #16]
 801eeac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801eeae:	693b      	ldr	r3, [r7, #16]
 801eeb0:	687a      	ldr	r2, [r7, #4]
 801eeb2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801eeb4:	68f8      	ldr	r0, [r7, #12]
 801eeb6:	f7f8 f9ee 	bl	8017296 <lwip_htonl>
 801eeba:	4602      	mov	r2, r0
 801eebc:	693b      	ldr	r3, [r7, #16]
 801eebe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801eec0:	897b      	ldrh	r3, [r7, #10]
 801eec2:	089b      	lsrs	r3, r3, #2
 801eec4:	b29b      	uxth	r3, r3
 801eec6:	3305      	adds	r3, #5
 801eec8:	b29b      	uxth	r3, r3
 801eeca:	031b      	lsls	r3, r3, #12
 801eecc:	b29a      	uxth	r2, r3
 801eece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801eed2:	b29b      	uxth	r3, r3
 801eed4:	4313      	orrs	r3, r2
 801eed6:	b29b      	uxth	r3, r3
 801eed8:	4618      	mov	r0, r3
 801eeda:	f7f8 f9c7 	bl	801726c <lwip_htons>
 801eede:	4603      	mov	r3, r0
 801eee0:	461a      	mov	r2, r3
 801eee2:	693b      	ldr	r3, [r7, #16]
 801eee4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801eee6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801eee8:	4618      	mov	r0, r3
 801eeea:	f7f8 f9bf 	bl	801726c <lwip_htons>
 801eeee:	4603      	mov	r3, r0
 801eef0:	461a      	mov	r2, r3
 801eef2:	693b      	ldr	r3, [r7, #16]
 801eef4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801eef6:	693b      	ldr	r3, [r7, #16]
 801eef8:	2200      	movs	r2, #0
 801eefa:	741a      	strb	r2, [r3, #16]
 801eefc:	2200      	movs	r2, #0
 801eefe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ef00:	693b      	ldr	r3, [r7, #16]
 801ef02:	2200      	movs	r2, #0
 801ef04:	749a      	strb	r2, [r3, #18]
 801ef06:	2200      	movs	r2, #0
 801ef08:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ef0a:	697b      	ldr	r3, [r7, #20]
}
 801ef0c:	4618      	mov	r0, r3
 801ef0e:	3718      	adds	r7, #24
 801ef10:	46bd      	mov	sp, r7
 801ef12:	bd80      	pop	{r7, pc}
 801ef14:	08026540 	.word	0x08026540
 801ef18:	08026c18 	.word	0x08026c18
 801ef1c:	08026594 	.word	0x08026594

0801ef20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ef20:	b5b0      	push	{r4, r5, r7, lr}
 801ef22:	b08a      	sub	sp, #40	; 0x28
 801ef24:	af04      	add	r7, sp, #16
 801ef26:	60f8      	str	r0, [r7, #12]
 801ef28:	607b      	str	r3, [r7, #4]
 801ef2a:	460b      	mov	r3, r1
 801ef2c:	817b      	strh	r3, [r7, #10]
 801ef2e:	4613      	mov	r3, r2
 801ef30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d106      	bne.n	801ef46 <tcp_output_alloc_header+0x26>
 801ef38:	4b15      	ldr	r3, [pc, #84]	; (801ef90 <tcp_output_alloc_header+0x70>)
 801ef3a:	f240 7242 	movw	r2, #1858	; 0x742
 801ef3e:	4915      	ldr	r1, [pc, #84]	; (801ef94 <tcp_output_alloc_header+0x74>)
 801ef40:	4815      	ldr	r0, [pc, #84]	; (801ef98 <tcp_output_alloc_header+0x78>)
 801ef42:	f003 ff59 	bl	8022df8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ef46:	68fb      	ldr	r3, [r7, #12]
 801ef48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	8adb      	ldrh	r3, [r3, #22]
 801ef4e:	68fa      	ldr	r2, [r7, #12]
 801ef50:	8b12      	ldrh	r2, [r2, #24]
 801ef52:	68f9      	ldr	r1, [r7, #12]
 801ef54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ef56:	893d      	ldrh	r5, [r7, #8]
 801ef58:	897c      	ldrh	r4, [r7, #10]
 801ef5a:	9103      	str	r1, [sp, #12]
 801ef5c:	2110      	movs	r1, #16
 801ef5e:	9102      	str	r1, [sp, #8]
 801ef60:	9201      	str	r2, [sp, #4]
 801ef62:	9300      	str	r3, [sp, #0]
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	462a      	mov	r2, r5
 801ef68:	4621      	mov	r1, r4
 801ef6a:	f7ff ff67 	bl	801ee3c <tcp_output_alloc_header_common>
 801ef6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ef70:	697b      	ldr	r3, [r7, #20]
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	d006      	beq.n	801ef84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ef76:	68fb      	ldr	r3, [r7, #12]
 801ef78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef7a:	68fa      	ldr	r2, [r7, #12]
 801ef7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ef7e:	441a      	add	r2, r3
 801ef80:	68fb      	ldr	r3, [r7, #12]
 801ef82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ef84:	697b      	ldr	r3, [r7, #20]
}
 801ef86:	4618      	mov	r0, r3
 801ef88:	3718      	adds	r7, #24
 801ef8a:	46bd      	mov	sp, r7
 801ef8c:	bdb0      	pop	{r4, r5, r7, pc}
 801ef8e:	bf00      	nop
 801ef90:	08026540 	.word	0x08026540
 801ef94:	08026c48 	.word	0x08026c48
 801ef98:	08026594 	.word	0x08026594

0801ef9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ef9c:	b580      	push	{r7, lr}
 801ef9e:	b088      	sub	sp, #32
 801efa0:	af00      	add	r7, sp, #0
 801efa2:	60f8      	str	r0, [r7, #12]
 801efa4:	60b9      	str	r1, [r7, #8]
 801efa6:	4611      	mov	r1, r2
 801efa8:	461a      	mov	r2, r3
 801efaa:	460b      	mov	r3, r1
 801efac:	71fb      	strb	r3, [r7, #7]
 801efae:	4613      	mov	r3, r2
 801efb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801efb2:	2300      	movs	r3, #0
 801efb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801efb6:	68bb      	ldr	r3, [r7, #8]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d106      	bne.n	801efca <tcp_output_fill_options+0x2e>
 801efbc:	4b12      	ldr	r3, [pc, #72]	; (801f008 <tcp_output_fill_options+0x6c>)
 801efbe:	f240 7256 	movw	r2, #1878	; 0x756
 801efc2:	4912      	ldr	r1, [pc, #72]	; (801f00c <tcp_output_fill_options+0x70>)
 801efc4:	4812      	ldr	r0, [pc, #72]	; (801f010 <tcp_output_fill_options+0x74>)
 801efc6:	f003 ff17 	bl	8022df8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801efca:	68bb      	ldr	r3, [r7, #8]
 801efcc:	685b      	ldr	r3, [r3, #4]
 801efce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801efd0:	69bb      	ldr	r3, [r7, #24]
 801efd2:	3314      	adds	r3, #20
 801efd4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801efd6:	8bfb      	ldrh	r3, [r7, #30]
 801efd8:	009b      	lsls	r3, r3, #2
 801efda:	461a      	mov	r2, r3
 801efdc:	79fb      	ldrb	r3, [r7, #7]
 801efde:	009b      	lsls	r3, r3, #2
 801efe0:	f003 0304 	and.w	r3, r3, #4
 801efe4:	4413      	add	r3, r2
 801efe6:	3314      	adds	r3, #20
 801efe8:	69ba      	ldr	r2, [r7, #24]
 801efea:	4413      	add	r3, r2
 801efec:	697a      	ldr	r2, [r7, #20]
 801efee:	429a      	cmp	r2, r3
 801eff0:	d006      	beq.n	801f000 <tcp_output_fill_options+0x64>
 801eff2:	4b05      	ldr	r3, [pc, #20]	; (801f008 <tcp_output_fill_options+0x6c>)
 801eff4:	f240 7275 	movw	r2, #1909	; 0x775
 801eff8:	4906      	ldr	r1, [pc, #24]	; (801f014 <tcp_output_fill_options+0x78>)
 801effa:	4805      	ldr	r0, [pc, #20]	; (801f010 <tcp_output_fill_options+0x74>)
 801effc:	f003 fefc 	bl	8022df8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801f000:	bf00      	nop
 801f002:	3720      	adds	r7, #32
 801f004:	46bd      	mov	sp, r7
 801f006:	bd80      	pop	{r7, pc}
 801f008:	08026540 	.word	0x08026540
 801f00c:	08026c70 	.word	0x08026c70
 801f010:	08026594 	.word	0x08026594
 801f014:	08026b68 	.word	0x08026b68

0801f018 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f018:	b580      	push	{r7, lr}
 801f01a:	b08a      	sub	sp, #40	; 0x28
 801f01c:	af04      	add	r7, sp, #16
 801f01e:	60f8      	str	r0, [r7, #12]
 801f020:	60b9      	str	r1, [r7, #8]
 801f022:	607a      	str	r2, [r7, #4]
 801f024:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f026:	68bb      	ldr	r3, [r7, #8]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d106      	bne.n	801f03a <tcp_output_control_segment+0x22>
 801f02c:	4b1c      	ldr	r3, [pc, #112]	; (801f0a0 <tcp_output_control_segment+0x88>)
 801f02e:	f240 7287 	movw	r2, #1927	; 0x787
 801f032:	491c      	ldr	r1, [pc, #112]	; (801f0a4 <tcp_output_control_segment+0x8c>)
 801f034:	481c      	ldr	r0, [pc, #112]	; (801f0a8 <tcp_output_control_segment+0x90>)
 801f036:	f003 fedf 	bl	8022df8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801f03a:	683a      	ldr	r2, [r7, #0]
 801f03c:	6879      	ldr	r1, [r7, #4]
 801f03e:	68f8      	ldr	r0, [r7, #12]
 801f040:	f7fe fae8 	bl	801d614 <tcp_route>
 801f044:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801f046:	693b      	ldr	r3, [r7, #16]
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d102      	bne.n	801f052 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801f04c:	23fc      	movs	r3, #252	; 0xfc
 801f04e:	75fb      	strb	r3, [r7, #23]
 801f050:	e01c      	b.n	801f08c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801f052:	68fb      	ldr	r3, [r7, #12]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d006      	beq.n	801f066 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	7adb      	ldrb	r3, [r3, #11]
 801f05c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	7a9b      	ldrb	r3, [r3, #10]
 801f062:	757b      	strb	r3, [r7, #21]
 801f064:	e003      	b.n	801f06e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801f066:	23ff      	movs	r3, #255	; 0xff
 801f068:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801f06a:	2300      	movs	r3, #0
 801f06c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f06e:	7dba      	ldrb	r2, [r7, #22]
 801f070:	693b      	ldr	r3, [r7, #16]
 801f072:	9302      	str	r3, [sp, #8]
 801f074:	2306      	movs	r3, #6
 801f076:	9301      	str	r3, [sp, #4]
 801f078:	7d7b      	ldrb	r3, [r7, #21]
 801f07a:	9300      	str	r3, [sp, #0]
 801f07c:	4613      	mov	r3, r2
 801f07e:	683a      	ldr	r2, [r7, #0]
 801f080:	6879      	ldr	r1, [r7, #4]
 801f082:	68b8      	ldr	r0, [r7, #8]
 801f084:	f002 f97a 	bl	802137c <ip4_output_if>
 801f088:	4603      	mov	r3, r0
 801f08a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801f08c:	68b8      	ldr	r0, [r7, #8]
 801f08e:	f7f9 fd97 	bl	8018bc0 <pbuf_free>
  return err;
 801f092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f096:	4618      	mov	r0, r3
 801f098:	3718      	adds	r7, #24
 801f09a:	46bd      	mov	sp, r7
 801f09c:	bd80      	pop	{r7, pc}
 801f09e:	bf00      	nop
 801f0a0:	08026540 	.word	0x08026540
 801f0a4:	08026c98 	.word	0x08026c98
 801f0a8:	08026594 	.word	0x08026594

0801f0ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f0ac:	b590      	push	{r4, r7, lr}
 801f0ae:	b08b      	sub	sp, #44	; 0x2c
 801f0b0:	af04      	add	r7, sp, #16
 801f0b2:	60f8      	str	r0, [r7, #12]
 801f0b4:	60b9      	str	r1, [r7, #8]
 801f0b6:	607a      	str	r2, [r7, #4]
 801f0b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f0ba:	683b      	ldr	r3, [r7, #0]
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d106      	bne.n	801f0ce <tcp_rst+0x22>
 801f0c0:	4b1f      	ldr	r3, [pc, #124]	; (801f140 <tcp_rst+0x94>)
 801f0c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f0c6:	491f      	ldr	r1, [pc, #124]	; (801f144 <tcp_rst+0x98>)
 801f0c8:	481f      	ldr	r0, [pc, #124]	; (801f148 <tcp_rst+0x9c>)
 801f0ca:	f003 fe95 	bl	8022df8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d106      	bne.n	801f0e2 <tcp_rst+0x36>
 801f0d4:	4b1a      	ldr	r3, [pc, #104]	; (801f140 <tcp_rst+0x94>)
 801f0d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f0da:	491c      	ldr	r1, [pc, #112]	; (801f14c <tcp_rst+0xa0>)
 801f0dc:	481a      	ldr	r0, [pc, #104]	; (801f148 <tcp_rst+0x9c>)
 801f0de:	f003 fe8b 	bl	8022df8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801f0e6:	f246 0308 	movw	r3, #24584	; 0x6008
 801f0ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f0ec:	7dfb      	ldrb	r3, [r7, #23]
 801f0ee:	b29c      	uxth	r4, r3
 801f0f0:	68b8      	ldr	r0, [r7, #8]
 801f0f2:	f7f8 f8d0 	bl	8017296 <lwip_htonl>
 801f0f6:	4602      	mov	r2, r0
 801f0f8:	8abb      	ldrh	r3, [r7, #20]
 801f0fa:	9303      	str	r3, [sp, #12]
 801f0fc:	2314      	movs	r3, #20
 801f0fe:	9302      	str	r3, [sp, #8]
 801f100:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801f102:	9301      	str	r3, [sp, #4]
 801f104:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f106:	9300      	str	r3, [sp, #0]
 801f108:	4613      	mov	r3, r2
 801f10a:	2200      	movs	r2, #0
 801f10c:	4621      	mov	r1, r4
 801f10e:	6878      	ldr	r0, [r7, #4]
 801f110:	f7ff fe94 	bl	801ee3c <tcp_output_alloc_header_common>
 801f114:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f116:	693b      	ldr	r3, [r7, #16]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d00c      	beq.n	801f136 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f11c:	7dfb      	ldrb	r3, [r7, #23]
 801f11e:	2200      	movs	r2, #0
 801f120:	6939      	ldr	r1, [r7, #16]
 801f122:	68f8      	ldr	r0, [r7, #12]
 801f124:	f7ff ff3a 	bl	801ef9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f12a:	683a      	ldr	r2, [r7, #0]
 801f12c:	6939      	ldr	r1, [r7, #16]
 801f12e:	68f8      	ldr	r0, [r7, #12]
 801f130:	f7ff ff72 	bl	801f018 <tcp_output_control_segment>
 801f134:	e000      	b.n	801f138 <tcp_rst+0x8c>
    return;
 801f136:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f138:	371c      	adds	r7, #28
 801f13a:	46bd      	mov	sp, r7
 801f13c:	bd90      	pop	{r4, r7, pc}
 801f13e:	bf00      	nop
 801f140:	08026540 	.word	0x08026540
 801f144:	08026cc4 	.word	0x08026cc4
 801f148:	08026594 	.word	0x08026594
 801f14c:	08026ce0 	.word	0x08026ce0

0801f150 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f150:	b590      	push	{r4, r7, lr}
 801f152:	b087      	sub	sp, #28
 801f154:	af00      	add	r7, sp, #0
 801f156:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801f158:	2300      	movs	r3, #0
 801f15a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801f15c:	2300      	movs	r3, #0
 801f15e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	2b00      	cmp	r3, #0
 801f164:	d106      	bne.n	801f174 <tcp_send_empty_ack+0x24>
 801f166:	4b28      	ldr	r3, [pc, #160]	; (801f208 <tcp_send_empty_ack+0xb8>)
 801f168:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f16c:	4927      	ldr	r1, [pc, #156]	; (801f20c <tcp_send_empty_ack+0xbc>)
 801f16e:	4828      	ldr	r0, [pc, #160]	; (801f210 <tcp_send_empty_ack+0xc0>)
 801f170:	f003 fe42 	bl	8022df8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f174:	7dfb      	ldrb	r3, [r7, #23]
 801f176:	009b      	lsls	r3, r3, #2
 801f178:	b2db      	uxtb	r3, r3
 801f17a:	f003 0304 	and.w	r3, r3, #4
 801f17e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f180:	7d7b      	ldrb	r3, [r7, #21]
 801f182:	b29c      	uxth	r4, r3
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f188:	4618      	mov	r0, r3
 801f18a:	f7f8 f884 	bl	8017296 <lwip_htonl>
 801f18e:	4603      	mov	r3, r0
 801f190:	2200      	movs	r2, #0
 801f192:	4621      	mov	r1, r4
 801f194:	6878      	ldr	r0, [r7, #4]
 801f196:	f7ff fec3 	bl	801ef20 <tcp_output_alloc_header>
 801f19a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f19c:	693b      	ldr	r3, [r7, #16]
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d109      	bne.n	801f1b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	8b5b      	ldrh	r3, [r3, #26]
 801f1a6:	f043 0303 	orr.w	r3, r3, #3
 801f1aa:	b29a      	uxth	r2, r3
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801f1b0:	f06f 0301 	mvn.w	r3, #1
 801f1b4:	e023      	b.n	801f1fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801f1b6:	7dbb      	ldrb	r3, [r7, #22]
 801f1b8:	7dfa      	ldrb	r2, [r7, #23]
 801f1ba:	6939      	ldr	r1, [r7, #16]
 801f1bc:	6878      	ldr	r0, [r7, #4]
 801f1be:	f7ff feed 	bl	801ef9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f1c2:	687a      	ldr	r2, [r7, #4]
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	3304      	adds	r3, #4
 801f1c8:	6939      	ldr	r1, [r7, #16]
 801f1ca:	6878      	ldr	r0, [r7, #4]
 801f1cc:	f7ff ff24 	bl	801f018 <tcp_output_control_segment>
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801f1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f1d8:	2b00      	cmp	r3, #0
 801f1da:	d007      	beq.n	801f1ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	8b5b      	ldrh	r3, [r3, #26]
 801f1e0:	f043 0303 	orr.w	r3, r3, #3
 801f1e4:	b29a      	uxth	r2, r3
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	835a      	strh	r2, [r3, #26]
 801f1ea:	e006      	b.n	801f1fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	8b5b      	ldrh	r3, [r3, #26]
 801f1f0:	f023 0303 	bic.w	r3, r3, #3
 801f1f4:	b29a      	uxth	r2, r3
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801f1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f1fe:	4618      	mov	r0, r3
 801f200:	371c      	adds	r7, #28
 801f202:	46bd      	mov	sp, r7
 801f204:	bd90      	pop	{r4, r7, pc}
 801f206:	bf00      	nop
 801f208:	08026540 	.word	0x08026540
 801f20c:	08026cfc 	.word	0x08026cfc
 801f210:	08026594 	.word	0x08026594

0801f214 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f214:	b590      	push	{r4, r7, lr}
 801f216:	b087      	sub	sp, #28
 801f218:	af00      	add	r7, sp, #0
 801f21a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f21c:	2300      	movs	r3, #0
 801f21e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	2b00      	cmp	r3, #0
 801f224:	d106      	bne.n	801f234 <tcp_keepalive+0x20>
 801f226:	4b18      	ldr	r3, [pc, #96]	; (801f288 <tcp_keepalive+0x74>)
 801f228:	f640 0224 	movw	r2, #2084	; 0x824
 801f22c:	4917      	ldr	r1, [pc, #92]	; (801f28c <tcp_keepalive+0x78>)
 801f22e:	4818      	ldr	r0, [pc, #96]	; (801f290 <tcp_keepalive+0x7c>)
 801f230:	f003 fde2 	bl	8022df8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f234:	7dfb      	ldrb	r3, [r7, #23]
 801f236:	b29c      	uxth	r4, r3
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f23c:	3b01      	subs	r3, #1
 801f23e:	4618      	mov	r0, r3
 801f240:	f7f8 f829 	bl	8017296 <lwip_htonl>
 801f244:	4603      	mov	r3, r0
 801f246:	2200      	movs	r2, #0
 801f248:	4621      	mov	r1, r4
 801f24a:	6878      	ldr	r0, [r7, #4]
 801f24c:	f7ff fe68 	bl	801ef20 <tcp_output_alloc_header>
 801f250:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f252:	693b      	ldr	r3, [r7, #16]
 801f254:	2b00      	cmp	r3, #0
 801f256:	d102      	bne.n	801f25e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801f258:	f04f 33ff 	mov.w	r3, #4294967295
 801f25c:	e010      	b.n	801f280 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f25e:	7dfb      	ldrb	r3, [r7, #23]
 801f260:	2200      	movs	r2, #0
 801f262:	6939      	ldr	r1, [r7, #16]
 801f264:	6878      	ldr	r0, [r7, #4]
 801f266:	f7ff fe99 	bl	801ef9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f26a:	687a      	ldr	r2, [r7, #4]
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	3304      	adds	r3, #4
 801f270:	6939      	ldr	r1, [r7, #16]
 801f272:	6878      	ldr	r0, [r7, #4]
 801f274:	f7ff fed0 	bl	801f018 <tcp_output_control_segment>
 801f278:	4603      	mov	r3, r0
 801f27a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f27c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f280:	4618      	mov	r0, r3
 801f282:	371c      	adds	r7, #28
 801f284:	46bd      	mov	sp, r7
 801f286:	bd90      	pop	{r4, r7, pc}
 801f288:	08026540 	.word	0x08026540
 801f28c:	08026d1c 	.word	0x08026d1c
 801f290:	08026594 	.word	0x08026594

0801f294 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f294:	b590      	push	{r4, r7, lr}
 801f296:	b08b      	sub	sp, #44	; 0x2c
 801f298:	af00      	add	r7, sp, #0
 801f29a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f29c:	2300      	movs	r3, #0
 801f29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d106      	bne.n	801f2b6 <tcp_zero_window_probe+0x22>
 801f2a8:	4b4c      	ldr	r3, [pc, #304]	; (801f3dc <tcp_zero_window_probe+0x148>)
 801f2aa:	f640 024f 	movw	r2, #2127	; 0x84f
 801f2ae:	494c      	ldr	r1, [pc, #304]	; (801f3e0 <tcp_zero_window_probe+0x14c>)
 801f2b0:	484c      	ldr	r0, [pc, #304]	; (801f3e4 <tcp_zero_window_probe+0x150>)
 801f2b2:	f003 fda1 	bl	8022df8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f2ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f2bc:	6a3b      	ldr	r3, [r7, #32]
 801f2be:	2b00      	cmp	r3, #0
 801f2c0:	d101      	bne.n	801f2c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	e086      	b.n	801f3d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f2cc:	2bff      	cmp	r3, #255	; 0xff
 801f2ce:	d007      	beq.n	801f2e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f2d6:	3301      	adds	r3, #1
 801f2d8:	b2da      	uxtb	r2, r3
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f2e0:	6a3b      	ldr	r3, [r7, #32]
 801f2e2:	68db      	ldr	r3, [r3, #12]
 801f2e4:	899b      	ldrh	r3, [r3, #12]
 801f2e6:	b29b      	uxth	r3, r3
 801f2e8:	4618      	mov	r0, r3
 801f2ea:	f7f7 ffbf 	bl	801726c <lwip_htons>
 801f2ee:	4603      	mov	r3, r0
 801f2f0:	b2db      	uxtb	r3, r3
 801f2f2:	f003 0301 	and.w	r3, r3, #1
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d005      	beq.n	801f306 <tcp_zero_window_probe+0x72>
 801f2fa:	6a3b      	ldr	r3, [r7, #32]
 801f2fc:	891b      	ldrh	r3, [r3, #8]
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	d101      	bne.n	801f306 <tcp_zero_window_probe+0x72>
 801f302:	2301      	movs	r3, #1
 801f304:	e000      	b.n	801f308 <tcp_zero_window_probe+0x74>
 801f306:	2300      	movs	r3, #0
 801f308:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f30a:	7ffb      	ldrb	r3, [r7, #31]
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	bf0c      	ite	eq
 801f310:	2301      	moveq	r3, #1
 801f312:	2300      	movne	r3, #0
 801f314:	b2db      	uxtb	r3, r3
 801f316:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f31c:	b299      	uxth	r1, r3
 801f31e:	6a3b      	ldr	r3, [r7, #32]
 801f320:	68db      	ldr	r3, [r3, #12]
 801f322:	685b      	ldr	r3, [r3, #4]
 801f324:	8bba      	ldrh	r2, [r7, #28]
 801f326:	6878      	ldr	r0, [r7, #4]
 801f328:	f7ff fdfa 	bl	801ef20 <tcp_output_alloc_header>
 801f32c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f32e:	69bb      	ldr	r3, [r7, #24]
 801f330:	2b00      	cmp	r3, #0
 801f332:	d102      	bne.n	801f33a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f334:	f04f 33ff 	mov.w	r3, #4294967295
 801f338:	e04c      	b.n	801f3d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f33a:	69bb      	ldr	r3, [r7, #24]
 801f33c:	685b      	ldr	r3, [r3, #4]
 801f33e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f340:	7ffb      	ldrb	r3, [r7, #31]
 801f342:	2b00      	cmp	r3, #0
 801f344:	d011      	beq.n	801f36a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f346:	697b      	ldr	r3, [r7, #20]
 801f348:	899b      	ldrh	r3, [r3, #12]
 801f34a:	b29b      	uxth	r3, r3
 801f34c:	b21b      	sxth	r3, r3
 801f34e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f352:	b21c      	sxth	r4, r3
 801f354:	2011      	movs	r0, #17
 801f356:	f7f7 ff89 	bl	801726c <lwip_htons>
 801f35a:	4603      	mov	r3, r0
 801f35c:	b21b      	sxth	r3, r3
 801f35e:	4323      	orrs	r3, r4
 801f360:	b21b      	sxth	r3, r3
 801f362:	b29a      	uxth	r2, r3
 801f364:	697b      	ldr	r3, [r7, #20]
 801f366:	819a      	strh	r2, [r3, #12]
 801f368:	e010      	b.n	801f38c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f36a:	69bb      	ldr	r3, [r7, #24]
 801f36c:	685b      	ldr	r3, [r3, #4]
 801f36e:	3314      	adds	r3, #20
 801f370:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f372:	6a3b      	ldr	r3, [r7, #32]
 801f374:	6858      	ldr	r0, [r3, #4]
 801f376:	6a3b      	ldr	r3, [r7, #32]
 801f378:	685b      	ldr	r3, [r3, #4]
 801f37a:	891a      	ldrh	r2, [r3, #8]
 801f37c:	6a3b      	ldr	r3, [r7, #32]
 801f37e:	891b      	ldrh	r3, [r3, #8]
 801f380:	1ad3      	subs	r3, r2, r3
 801f382:	b29b      	uxth	r3, r3
 801f384:	2201      	movs	r2, #1
 801f386:	6939      	ldr	r1, [r7, #16]
 801f388:	f7f9 fe10 	bl	8018fac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f38c:	6a3b      	ldr	r3, [r7, #32]
 801f38e:	68db      	ldr	r3, [r3, #12]
 801f390:	685b      	ldr	r3, [r3, #4]
 801f392:	4618      	mov	r0, r3
 801f394:	f7f7 ff7f 	bl	8017296 <lwip_htonl>
 801f398:	4603      	mov	r3, r0
 801f39a:	3301      	adds	r3, #1
 801f39c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	1ad3      	subs	r3, r2, r3
 801f3a6:	2b00      	cmp	r3, #0
 801f3a8:	da02      	bge.n	801f3b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	68fa      	ldr	r2, [r7, #12]
 801f3ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f3b4:	2200      	movs	r2, #0
 801f3b6:	69b9      	ldr	r1, [r7, #24]
 801f3b8:	6878      	ldr	r0, [r7, #4]
 801f3ba:	f7ff fdef 	bl	801ef9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f3be:	687a      	ldr	r2, [r7, #4]
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	3304      	adds	r3, #4
 801f3c4:	69b9      	ldr	r1, [r7, #24]
 801f3c6:	6878      	ldr	r0, [r7, #4]
 801f3c8:	f7ff fe26 	bl	801f018 <tcp_output_control_segment>
 801f3cc:	4603      	mov	r3, r0
 801f3ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f3d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	372c      	adds	r7, #44	; 0x2c
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd90      	pop	{r4, r7, pc}
 801f3dc:	08026540 	.word	0x08026540
 801f3e0:	08026d38 	.word	0x08026d38
 801f3e4:	08026594 	.word	0x08026594

0801f3e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f3e8:	b580      	push	{r7, lr}
 801f3ea:	b082      	sub	sp, #8
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f3f0:	f7f9 feca 	bl	8019188 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f3f4:	4b0a      	ldr	r3, [pc, #40]	; (801f420 <tcpip_tcp_timer+0x38>)
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	d103      	bne.n	801f404 <tcpip_tcp_timer+0x1c>
 801f3fc:	4b09      	ldr	r3, [pc, #36]	; (801f424 <tcpip_tcp_timer+0x3c>)
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	2b00      	cmp	r3, #0
 801f402:	d005      	beq.n	801f410 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f404:	2200      	movs	r2, #0
 801f406:	4908      	ldr	r1, [pc, #32]	; (801f428 <tcpip_tcp_timer+0x40>)
 801f408:	20fa      	movs	r0, #250	; 0xfa
 801f40a:	f000 f8f3 	bl	801f5f4 <sys_timeout>
 801f40e:	e003      	b.n	801f418 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f410:	4b06      	ldr	r3, [pc, #24]	; (801f42c <tcpip_tcp_timer+0x44>)
 801f412:	2200      	movs	r2, #0
 801f414:	601a      	str	r2, [r3, #0]
  }
}
 801f416:	bf00      	nop
 801f418:	bf00      	nop
 801f41a:	3708      	adds	r7, #8
 801f41c:	46bd      	mov	sp, r7
 801f41e:	bd80      	pop	{r7, pc}
 801f420:	20061ca0 	.word	0x20061ca0
 801f424:	20061ca4 	.word	0x20061ca4
 801f428:	0801f3e9 	.word	0x0801f3e9
 801f42c:	20061cec 	.word	0x20061cec

0801f430 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f430:	b580      	push	{r7, lr}
 801f432:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f434:	4b0a      	ldr	r3, [pc, #40]	; (801f460 <tcp_timer_needed+0x30>)
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d10f      	bne.n	801f45c <tcp_timer_needed+0x2c>
 801f43c:	4b09      	ldr	r3, [pc, #36]	; (801f464 <tcp_timer_needed+0x34>)
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	2b00      	cmp	r3, #0
 801f442:	d103      	bne.n	801f44c <tcp_timer_needed+0x1c>
 801f444:	4b08      	ldr	r3, [pc, #32]	; (801f468 <tcp_timer_needed+0x38>)
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d007      	beq.n	801f45c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f44c:	4b04      	ldr	r3, [pc, #16]	; (801f460 <tcp_timer_needed+0x30>)
 801f44e:	2201      	movs	r2, #1
 801f450:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f452:	2200      	movs	r2, #0
 801f454:	4905      	ldr	r1, [pc, #20]	; (801f46c <tcp_timer_needed+0x3c>)
 801f456:	20fa      	movs	r0, #250	; 0xfa
 801f458:	f000 f8cc 	bl	801f5f4 <sys_timeout>
  }
}
 801f45c:	bf00      	nop
 801f45e:	bd80      	pop	{r7, pc}
 801f460:	20061cec 	.word	0x20061cec
 801f464:	20061ca0 	.word	0x20061ca0
 801f468:	20061ca4 	.word	0x20061ca4
 801f46c:	0801f3e9 	.word	0x0801f3e9

0801f470 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f470:	b580      	push	{r7, lr}
 801f472:	b086      	sub	sp, #24
 801f474:	af00      	add	r7, sp, #0
 801f476:	60f8      	str	r0, [r7, #12]
 801f478:	60b9      	str	r1, [r7, #8]
 801f47a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f47c:	200a      	movs	r0, #10
 801f47e:	f7f8 fc85 	bl	8017d8c <memp_malloc>
 801f482:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f484:	693b      	ldr	r3, [r7, #16]
 801f486:	2b00      	cmp	r3, #0
 801f488:	d109      	bne.n	801f49e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f48a:	693b      	ldr	r3, [r7, #16]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d151      	bne.n	801f534 <sys_timeout_abs+0xc4>
 801f490:	4b2a      	ldr	r3, [pc, #168]	; (801f53c <sys_timeout_abs+0xcc>)
 801f492:	22be      	movs	r2, #190	; 0xbe
 801f494:	492a      	ldr	r1, [pc, #168]	; (801f540 <sys_timeout_abs+0xd0>)
 801f496:	482b      	ldr	r0, [pc, #172]	; (801f544 <sys_timeout_abs+0xd4>)
 801f498:	f003 fcae 	bl	8022df8 <iprintf>
    return;
 801f49c:	e04a      	b.n	801f534 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f49e:	693b      	ldr	r3, [r7, #16]
 801f4a0:	2200      	movs	r2, #0
 801f4a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f4a4:	693b      	ldr	r3, [r7, #16]
 801f4a6:	68ba      	ldr	r2, [r7, #8]
 801f4a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f4aa:	693b      	ldr	r3, [r7, #16]
 801f4ac:	687a      	ldr	r2, [r7, #4]
 801f4ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f4b0:	693b      	ldr	r3, [r7, #16]
 801f4b2:	68fa      	ldr	r2, [r7, #12]
 801f4b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f4b6:	4b24      	ldr	r3, [pc, #144]	; (801f548 <sys_timeout_abs+0xd8>)
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d103      	bne.n	801f4c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f4be:	4a22      	ldr	r2, [pc, #136]	; (801f548 <sys_timeout_abs+0xd8>)
 801f4c0:	693b      	ldr	r3, [r7, #16]
 801f4c2:	6013      	str	r3, [r2, #0]
    return;
 801f4c4:	e037      	b.n	801f536 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f4c6:	693b      	ldr	r3, [r7, #16]
 801f4c8:	685a      	ldr	r2, [r3, #4]
 801f4ca:	4b1f      	ldr	r3, [pc, #124]	; (801f548 <sys_timeout_abs+0xd8>)
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	685b      	ldr	r3, [r3, #4]
 801f4d0:	1ad3      	subs	r3, r2, r3
 801f4d2:	0fdb      	lsrs	r3, r3, #31
 801f4d4:	f003 0301 	and.w	r3, r3, #1
 801f4d8:	b2db      	uxtb	r3, r3
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d007      	beq.n	801f4ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f4de:	4b1a      	ldr	r3, [pc, #104]	; (801f548 <sys_timeout_abs+0xd8>)
 801f4e0:	681a      	ldr	r2, [r3, #0]
 801f4e2:	693b      	ldr	r3, [r7, #16]
 801f4e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f4e6:	4a18      	ldr	r2, [pc, #96]	; (801f548 <sys_timeout_abs+0xd8>)
 801f4e8:	693b      	ldr	r3, [r7, #16]
 801f4ea:	6013      	str	r3, [r2, #0]
 801f4ec:	e023      	b.n	801f536 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f4ee:	4b16      	ldr	r3, [pc, #88]	; (801f548 <sys_timeout_abs+0xd8>)
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	617b      	str	r3, [r7, #20]
 801f4f4:	e01a      	b.n	801f52c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f4f6:	697b      	ldr	r3, [r7, #20]
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d00b      	beq.n	801f516 <sys_timeout_abs+0xa6>
 801f4fe:	693b      	ldr	r3, [r7, #16]
 801f500:	685a      	ldr	r2, [r3, #4]
 801f502:	697b      	ldr	r3, [r7, #20]
 801f504:	681b      	ldr	r3, [r3, #0]
 801f506:	685b      	ldr	r3, [r3, #4]
 801f508:	1ad3      	subs	r3, r2, r3
 801f50a:	0fdb      	lsrs	r3, r3, #31
 801f50c:	f003 0301 	and.w	r3, r3, #1
 801f510:	b2db      	uxtb	r3, r3
 801f512:	2b00      	cmp	r3, #0
 801f514:	d007      	beq.n	801f526 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f516:	697b      	ldr	r3, [r7, #20]
 801f518:	681a      	ldr	r2, [r3, #0]
 801f51a:	693b      	ldr	r3, [r7, #16]
 801f51c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f51e:	697b      	ldr	r3, [r7, #20]
 801f520:	693a      	ldr	r2, [r7, #16]
 801f522:	601a      	str	r2, [r3, #0]
        break;
 801f524:	e007      	b.n	801f536 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f526:	697b      	ldr	r3, [r7, #20]
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	617b      	str	r3, [r7, #20]
 801f52c:	697b      	ldr	r3, [r7, #20]
 801f52e:	2b00      	cmp	r3, #0
 801f530:	d1e1      	bne.n	801f4f6 <sys_timeout_abs+0x86>
 801f532:	e000      	b.n	801f536 <sys_timeout_abs+0xc6>
    return;
 801f534:	bf00      	nop
      }
    }
  }
}
 801f536:	3718      	adds	r7, #24
 801f538:	46bd      	mov	sp, r7
 801f53a:	bd80      	pop	{r7, pc}
 801f53c:	08026d5c 	.word	0x08026d5c
 801f540:	08026d90 	.word	0x08026d90
 801f544:	08026dd0 	.word	0x08026dd0
 801f548:	20061ce4 	.word	0x20061ce4

0801f54c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f54c:	b580      	push	{r7, lr}
 801f54e:	b086      	sub	sp, #24
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f558:	697b      	ldr	r3, [r7, #20]
 801f55a:	685b      	ldr	r3, [r3, #4]
 801f55c:	4798      	blx	r3

  now = sys_now();
 801f55e:	f7e2 fbab 	bl	8001cb8 <sys_now>
 801f562:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f564:	697b      	ldr	r3, [r7, #20]
 801f566:	681a      	ldr	r2, [r3, #0]
 801f568:	4b0f      	ldr	r3, [pc, #60]	; (801f5a8 <lwip_cyclic_timer+0x5c>)
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	4413      	add	r3, r2
 801f56e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f570:	68fa      	ldr	r2, [r7, #12]
 801f572:	693b      	ldr	r3, [r7, #16]
 801f574:	1ad3      	subs	r3, r2, r3
 801f576:	0fdb      	lsrs	r3, r3, #31
 801f578:	f003 0301 	and.w	r3, r3, #1
 801f57c:	b2db      	uxtb	r3, r3
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d009      	beq.n	801f596 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f582:	697b      	ldr	r3, [r7, #20]
 801f584:	681a      	ldr	r2, [r3, #0]
 801f586:	693b      	ldr	r3, [r7, #16]
 801f588:	4413      	add	r3, r2
 801f58a:	687a      	ldr	r2, [r7, #4]
 801f58c:	4907      	ldr	r1, [pc, #28]	; (801f5ac <lwip_cyclic_timer+0x60>)
 801f58e:	4618      	mov	r0, r3
 801f590:	f7ff ff6e 	bl	801f470 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f594:	e004      	b.n	801f5a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f596:	687a      	ldr	r2, [r7, #4]
 801f598:	4904      	ldr	r1, [pc, #16]	; (801f5ac <lwip_cyclic_timer+0x60>)
 801f59a:	68f8      	ldr	r0, [r7, #12]
 801f59c:	f7ff ff68 	bl	801f470 <sys_timeout_abs>
}
 801f5a0:	bf00      	nop
 801f5a2:	3718      	adds	r7, #24
 801f5a4:	46bd      	mov	sp, r7
 801f5a6:	bd80      	pop	{r7, pc}
 801f5a8:	20061ce8 	.word	0x20061ce8
 801f5ac:	0801f54d 	.word	0x0801f54d

0801f5b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f5b0:	b580      	push	{r7, lr}
 801f5b2:	b082      	sub	sp, #8
 801f5b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f5b6:	2301      	movs	r3, #1
 801f5b8:	607b      	str	r3, [r7, #4]
 801f5ba:	e00e      	b.n	801f5da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f5bc:	4a0b      	ldr	r2, [pc, #44]	; (801f5ec <sys_timeouts_init+0x3c>)
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	00db      	lsls	r3, r3, #3
 801f5c8:	4a08      	ldr	r2, [pc, #32]	; (801f5ec <sys_timeouts_init+0x3c>)
 801f5ca:	4413      	add	r3, r2
 801f5cc:	461a      	mov	r2, r3
 801f5ce:	4908      	ldr	r1, [pc, #32]	; (801f5f0 <sys_timeouts_init+0x40>)
 801f5d0:	f000 f810 	bl	801f5f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	3301      	adds	r3, #1
 801f5d8:	607b      	str	r3, [r7, #4]
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	2b02      	cmp	r3, #2
 801f5de:	d9ed      	bls.n	801f5bc <sys_timeouts_init+0xc>
  }
}
 801f5e0:	bf00      	nop
 801f5e2:	bf00      	nop
 801f5e4:	3708      	adds	r7, #8
 801f5e6:	46bd      	mov	sp, r7
 801f5e8:	bd80      	pop	{r7, pc}
 801f5ea:	bf00      	nop
 801f5ec:	08027b98 	.word	0x08027b98
 801f5f0:	0801f54d 	.word	0x0801f54d

0801f5f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f5f4:	b580      	push	{r7, lr}
 801f5f6:	b086      	sub	sp, #24
 801f5f8:	af00      	add	r7, sp, #0
 801f5fa:	60f8      	str	r0, [r7, #12]
 801f5fc:	60b9      	str	r1, [r7, #8]
 801f5fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f600:	68fb      	ldr	r3, [r7, #12]
 801f602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f606:	d306      	bcc.n	801f616 <sys_timeout+0x22>
 801f608:	4b0a      	ldr	r3, [pc, #40]	; (801f634 <sys_timeout+0x40>)
 801f60a:	f240 1229 	movw	r2, #297	; 0x129
 801f60e:	490a      	ldr	r1, [pc, #40]	; (801f638 <sys_timeout+0x44>)
 801f610:	480a      	ldr	r0, [pc, #40]	; (801f63c <sys_timeout+0x48>)
 801f612:	f003 fbf1 	bl	8022df8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f616:	f7e2 fb4f 	bl	8001cb8 <sys_now>
 801f61a:	4602      	mov	r2, r0
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	4413      	add	r3, r2
 801f620:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f622:	687a      	ldr	r2, [r7, #4]
 801f624:	68b9      	ldr	r1, [r7, #8]
 801f626:	6978      	ldr	r0, [r7, #20]
 801f628:	f7ff ff22 	bl	801f470 <sys_timeout_abs>
#endif
}
 801f62c:	bf00      	nop
 801f62e:	3718      	adds	r7, #24
 801f630:	46bd      	mov	sp, r7
 801f632:	bd80      	pop	{r7, pc}
 801f634:	08026d5c 	.word	0x08026d5c
 801f638:	08026df8 	.word	0x08026df8
 801f63c:	08026dd0 	.word	0x08026dd0

0801f640 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f640:	b580      	push	{r7, lr}
 801f642:	b084      	sub	sp, #16
 801f644:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f646:	f7e2 fb37 	bl	8001cb8 <sys_now>
 801f64a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f64c:	4b17      	ldr	r3, [pc, #92]	; (801f6ac <sys_check_timeouts+0x6c>)
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f652:	68bb      	ldr	r3, [r7, #8]
 801f654:	2b00      	cmp	r3, #0
 801f656:	d022      	beq.n	801f69e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f658:	68bb      	ldr	r3, [r7, #8]
 801f65a:	685b      	ldr	r3, [r3, #4]
 801f65c:	68fa      	ldr	r2, [r7, #12]
 801f65e:	1ad3      	subs	r3, r2, r3
 801f660:	0fdb      	lsrs	r3, r3, #31
 801f662:	f003 0301 	and.w	r3, r3, #1
 801f666:	b2db      	uxtb	r3, r3
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d11a      	bne.n	801f6a2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f66c:	68bb      	ldr	r3, [r7, #8]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	4a0e      	ldr	r2, [pc, #56]	; (801f6ac <sys_check_timeouts+0x6c>)
 801f672:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f674:	68bb      	ldr	r3, [r7, #8]
 801f676:	689b      	ldr	r3, [r3, #8]
 801f678:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f67a:	68bb      	ldr	r3, [r7, #8]
 801f67c:	68db      	ldr	r3, [r3, #12]
 801f67e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f680:	68bb      	ldr	r3, [r7, #8]
 801f682:	685b      	ldr	r3, [r3, #4]
 801f684:	4a0a      	ldr	r2, [pc, #40]	; (801f6b0 <sys_check_timeouts+0x70>)
 801f686:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f688:	68b9      	ldr	r1, [r7, #8]
 801f68a:	200a      	movs	r0, #10
 801f68c:	f7f8 fbf4 	bl	8017e78 <memp_free>
    if (handler != NULL) {
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d0da      	beq.n	801f64c <sys_check_timeouts+0xc>
      handler(arg);
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	6838      	ldr	r0, [r7, #0]
 801f69a:	4798      	blx	r3
  do {
 801f69c:	e7d6      	b.n	801f64c <sys_check_timeouts+0xc>
      return;
 801f69e:	bf00      	nop
 801f6a0:	e000      	b.n	801f6a4 <sys_check_timeouts+0x64>
      return;
 801f6a2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f6a4:	3710      	adds	r7, #16
 801f6a6:	46bd      	mov	sp, r7
 801f6a8:	bd80      	pop	{r7, pc}
 801f6aa:	bf00      	nop
 801f6ac:	20061ce4 	.word	0x20061ce4
 801f6b0:	20061ce8 	.word	0x20061ce8

0801f6b4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f6b4:	b580      	push	{r7, lr}
 801f6b6:	b082      	sub	sp, #8
 801f6b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f6ba:	4b16      	ldr	r3, [pc, #88]	; (801f714 <sys_timeouts_sleeptime+0x60>)
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d102      	bne.n	801f6c8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f6c2:	f04f 33ff 	mov.w	r3, #4294967295
 801f6c6:	e020      	b.n	801f70a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f6c8:	f7e2 faf6 	bl	8001cb8 <sys_now>
 801f6cc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f6ce:	4b11      	ldr	r3, [pc, #68]	; (801f714 <sys_timeouts_sleeptime+0x60>)
 801f6d0:	681b      	ldr	r3, [r3, #0]
 801f6d2:	685a      	ldr	r2, [r3, #4]
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	1ad3      	subs	r3, r2, r3
 801f6d8:	0fdb      	lsrs	r3, r3, #31
 801f6da:	f003 0301 	and.w	r3, r3, #1
 801f6de:	b2db      	uxtb	r3, r3
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d001      	beq.n	801f6e8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	e010      	b.n	801f70a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f6e8:	4b0a      	ldr	r3, [pc, #40]	; (801f714 <sys_timeouts_sleeptime+0x60>)
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	685a      	ldr	r2, [r3, #4]
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	1ad3      	subs	r3, r2, r3
 801f6f2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f6f4:	683b      	ldr	r3, [r7, #0]
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	da06      	bge.n	801f708 <sys_timeouts_sleeptime+0x54>
 801f6fa:	4b07      	ldr	r3, [pc, #28]	; (801f718 <sys_timeouts_sleeptime+0x64>)
 801f6fc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f700:	4906      	ldr	r1, [pc, #24]	; (801f71c <sys_timeouts_sleeptime+0x68>)
 801f702:	4807      	ldr	r0, [pc, #28]	; (801f720 <sys_timeouts_sleeptime+0x6c>)
 801f704:	f003 fb78 	bl	8022df8 <iprintf>
    return ret;
 801f708:	683b      	ldr	r3, [r7, #0]
  }
}
 801f70a:	4618      	mov	r0, r3
 801f70c:	3708      	adds	r7, #8
 801f70e:	46bd      	mov	sp, r7
 801f710:	bd80      	pop	{r7, pc}
 801f712:	bf00      	nop
 801f714:	20061ce4 	.word	0x20061ce4
 801f718:	08026d5c 	.word	0x08026d5c
 801f71c:	08026e30 	.word	0x08026e30
 801f720:	08026dd0 	.word	0x08026dd0

0801f724 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f724:	b580      	push	{r7, lr}
 801f726:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f728:	f003 fa66 	bl	8022bf8 <rand>
 801f72c:	4603      	mov	r3, r0
 801f72e:	b29b      	uxth	r3, r3
 801f730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f734:	b29b      	uxth	r3, r3
 801f736:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f73a:	b29a      	uxth	r2, r3
 801f73c:	4b01      	ldr	r3, [pc, #4]	; (801f744 <udp_init+0x20>)
 801f73e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f740:	bf00      	nop
 801f742:	bd80      	pop	{r7, pc}
 801f744:	20050088 	.word	0x20050088

0801f748 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f748:	b480      	push	{r7}
 801f74a:	b083      	sub	sp, #12
 801f74c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f74e:	2300      	movs	r3, #0
 801f750:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f752:	4b17      	ldr	r3, [pc, #92]	; (801f7b0 <udp_new_port+0x68>)
 801f754:	881b      	ldrh	r3, [r3, #0]
 801f756:	1c5a      	adds	r2, r3, #1
 801f758:	b291      	uxth	r1, r2
 801f75a:	4a15      	ldr	r2, [pc, #84]	; (801f7b0 <udp_new_port+0x68>)
 801f75c:	8011      	strh	r1, [r2, #0]
 801f75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f762:	4293      	cmp	r3, r2
 801f764:	d103      	bne.n	801f76e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f766:	4b12      	ldr	r3, [pc, #72]	; (801f7b0 <udp_new_port+0x68>)
 801f768:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f76c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f76e:	4b11      	ldr	r3, [pc, #68]	; (801f7b4 <udp_new_port+0x6c>)
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	603b      	str	r3, [r7, #0]
 801f774:	e011      	b.n	801f79a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f776:	683b      	ldr	r3, [r7, #0]
 801f778:	8a5a      	ldrh	r2, [r3, #18]
 801f77a:	4b0d      	ldr	r3, [pc, #52]	; (801f7b0 <udp_new_port+0x68>)
 801f77c:	881b      	ldrh	r3, [r3, #0]
 801f77e:	429a      	cmp	r2, r3
 801f780:	d108      	bne.n	801f794 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f782:	88fb      	ldrh	r3, [r7, #6]
 801f784:	3301      	adds	r3, #1
 801f786:	80fb      	strh	r3, [r7, #6]
 801f788:	88fb      	ldrh	r3, [r7, #6]
 801f78a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f78e:	d3e0      	bcc.n	801f752 <udp_new_port+0xa>
        return 0;
 801f790:	2300      	movs	r3, #0
 801f792:	e007      	b.n	801f7a4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f794:	683b      	ldr	r3, [r7, #0]
 801f796:	68db      	ldr	r3, [r3, #12]
 801f798:	603b      	str	r3, [r7, #0]
 801f79a:	683b      	ldr	r3, [r7, #0]
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d1ea      	bne.n	801f776 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f7a0:	4b03      	ldr	r3, [pc, #12]	; (801f7b0 <udp_new_port+0x68>)
 801f7a2:	881b      	ldrh	r3, [r3, #0]
}
 801f7a4:	4618      	mov	r0, r3
 801f7a6:	370c      	adds	r7, #12
 801f7a8:	46bd      	mov	sp, r7
 801f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ae:	4770      	bx	lr
 801f7b0:	20050088 	.word	0x20050088
 801f7b4:	20061cf0 	.word	0x20061cf0

0801f7b8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f7b8:	b580      	push	{r7, lr}
 801f7ba:	b084      	sub	sp, #16
 801f7bc:	af00      	add	r7, sp, #0
 801f7be:	60f8      	str	r0, [r7, #12]
 801f7c0:	60b9      	str	r1, [r7, #8]
 801f7c2:	4613      	mov	r3, r2
 801f7c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f7c6:	68fb      	ldr	r3, [r7, #12]
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d105      	bne.n	801f7d8 <udp_input_local_match+0x20>
 801f7cc:	4b27      	ldr	r3, [pc, #156]	; (801f86c <udp_input_local_match+0xb4>)
 801f7ce:	2287      	movs	r2, #135	; 0x87
 801f7d0:	4927      	ldr	r1, [pc, #156]	; (801f870 <udp_input_local_match+0xb8>)
 801f7d2:	4828      	ldr	r0, [pc, #160]	; (801f874 <udp_input_local_match+0xbc>)
 801f7d4:	f003 fb10 	bl	8022df8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f7d8:	68bb      	ldr	r3, [r7, #8]
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	d105      	bne.n	801f7ea <udp_input_local_match+0x32>
 801f7de:	4b23      	ldr	r3, [pc, #140]	; (801f86c <udp_input_local_match+0xb4>)
 801f7e0:	2288      	movs	r2, #136	; 0x88
 801f7e2:	4925      	ldr	r1, [pc, #148]	; (801f878 <udp_input_local_match+0xc0>)
 801f7e4:	4823      	ldr	r0, [pc, #140]	; (801f874 <udp_input_local_match+0xbc>)
 801f7e6:	f003 fb07 	bl	8022df8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	7a1b      	ldrb	r3, [r3, #8]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d00b      	beq.n	801f80a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f7f2:	68fb      	ldr	r3, [r7, #12]
 801f7f4:	7a1a      	ldrb	r2, [r3, #8]
 801f7f6:	4b21      	ldr	r3, [pc, #132]	; (801f87c <udp_input_local_match+0xc4>)
 801f7f8:	685b      	ldr	r3, [r3, #4]
 801f7fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f7fe:	3301      	adds	r3, #1
 801f800:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f802:	429a      	cmp	r2, r3
 801f804:	d001      	beq.n	801f80a <udp_input_local_match+0x52>
    return 0;
 801f806:	2300      	movs	r3, #0
 801f808:	e02b      	b.n	801f862 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f80a:	79fb      	ldrb	r3, [r7, #7]
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d018      	beq.n	801f842 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f810:	68fb      	ldr	r3, [r7, #12]
 801f812:	2b00      	cmp	r3, #0
 801f814:	d013      	beq.n	801f83e <udp_input_local_match+0x86>
 801f816:	68fb      	ldr	r3, [r7, #12]
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	2b00      	cmp	r3, #0
 801f81c:	d00f      	beq.n	801f83e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f81e:	4b17      	ldr	r3, [pc, #92]	; (801f87c <udp_input_local_match+0xc4>)
 801f820:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f822:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f826:	d00a      	beq.n	801f83e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	681a      	ldr	r2, [r3, #0]
 801f82c:	4b13      	ldr	r3, [pc, #76]	; (801f87c <udp_input_local_match+0xc4>)
 801f82e:	695b      	ldr	r3, [r3, #20]
 801f830:	405a      	eors	r2, r3
 801f832:	68bb      	ldr	r3, [r7, #8]
 801f834:	3308      	adds	r3, #8
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d110      	bne.n	801f860 <udp_input_local_match+0xa8>
          return 1;
 801f83e:	2301      	movs	r3, #1
 801f840:	e00f      	b.n	801f862 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d009      	beq.n	801f85c <udp_input_local_match+0xa4>
 801f848:	68fb      	ldr	r3, [r7, #12]
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d005      	beq.n	801f85c <udp_input_local_match+0xa4>
 801f850:	68fb      	ldr	r3, [r7, #12]
 801f852:	681a      	ldr	r2, [r3, #0]
 801f854:	4b09      	ldr	r3, [pc, #36]	; (801f87c <udp_input_local_match+0xc4>)
 801f856:	695b      	ldr	r3, [r3, #20]
 801f858:	429a      	cmp	r2, r3
 801f85a:	d101      	bne.n	801f860 <udp_input_local_match+0xa8>
        return 1;
 801f85c:	2301      	movs	r3, #1
 801f85e:	e000      	b.n	801f862 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f860:	2300      	movs	r3, #0
}
 801f862:	4618      	mov	r0, r3
 801f864:	3710      	adds	r7, #16
 801f866:	46bd      	mov	sp, r7
 801f868:	bd80      	pop	{r7, pc}
 801f86a:	bf00      	nop
 801f86c:	08026e44 	.word	0x08026e44
 801f870:	08026e74 	.word	0x08026e74
 801f874:	08026e98 	.word	0x08026e98
 801f878:	08026ec0 	.word	0x08026ec0
 801f87c:	2005eb94 	.word	0x2005eb94

0801f880 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f880:	b590      	push	{r4, r7, lr}
 801f882:	b08d      	sub	sp, #52	; 0x34
 801f884:	af02      	add	r7, sp, #8
 801f886:	6078      	str	r0, [r7, #4]
 801f888:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f88a:	2300      	movs	r3, #0
 801f88c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f88e:	687b      	ldr	r3, [r7, #4]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d105      	bne.n	801f8a0 <udp_input+0x20>
 801f894:	4b7c      	ldr	r3, [pc, #496]	; (801fa88 <udp_input+0x208>)
 801f896:	22cf      	movs	r2, #207	; 0xcf
 801f898:	497c      	ldr	r1, [pc, #496]	; (801fa8c <udp_input+0x20c>)
 801f89a:	487d      	ldr	r0, [pc, #500]	; (801fa90 <udp_input+0x210>)
 801f89c:	f003 faac 	bl	8022df8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f8a0:	683b      	ldr	r3, [r7, #0]
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d105      	bne.n	801f8b2 <udp_input+0x32>
 801f8a6:	4b78      	ldr	r3, [pc, #480]	; (801fa88 <udp_input+0x208>)
 801f8a8:	22d0      	movs	r2, #208	; 0xd0
 801f8aa:	497a      	ldr	r1, [pc, #488]	; (801fa94 <udp_input+0x214>)
 801f8ac:	4878      	ldr	r0, [pc, #480]	; (801fa90 <udp_input+0x210>)
 801f8ae:	f003 faa3 	bl	8022df8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	895b      	ldrh	r3, [r3, #10]
 801f8b6:	2b07      	cmp	r3, #7
 801f8b8:	d803      	bhi.n	801f8c2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f8ba:	6878      	ldr	r0, [r7, #4]
 801f8bc:	f7f9 f980 	bl	8018bc0 <pbuf_free>
    goto end;
 801f8c0:	e0de      	b.n	801fa80 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	685b      	ldr	r3, [r3, #4]
 801f8c6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f8c8:	4b73      	ldr	r3, [pc, #460]	; (801fa98 <udp_input+0x218>)
 801f8ca:	695b      	ldr	r3, [r3, #20]
 801f8cc:	4a72      	ldr	r2, [pc, #456]	; (801fa98 <udp_input+0x218>)
 801f8ce:	6812      	ldr	r2, [r2, #0]
 801f8d0:	4611      	mov	r1, r2
 801f8d2:	4618      	mov	r0, r3
 801f8d4:	f001 fe2a 	bl	802152c <ip4_addr_isbroadcast_u32>
 801f8d8:	4603      	mov	r3, r0
 801f8da:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f8dc:	697b      	ldr	r3, [r7, #20]
 801f8de:	881b      	ldrh	r3, [r3, #0]
 801f8e0:	b29b      	uxth	r3, r3
 801f8e2:	4618      	mov	r0, r3
 801f8e4:	f7f7 fcc2 	bl	801726c <lwip_htons>
 801f8e8:	4603      	mov	r3, r0
 801f8ea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f8ec:	697b      	ldr	r3, [r7, #20]
 801f8ee:	885b      	ldrh	r3, [r3, #2]
 801f8f0:	b29b      	uxth	r3, r3
 801f8f2:	4618      	mov	r0, r3
 801f8f4:	f7f7 fcba 	bl	801726c <lwip_htons>
 801f8f8:	4603      	mov	r3, r0
 801f8fa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f8fc:	2300      	movs	r3, #0
 801f8fe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f900:	2300      	movs	r3, #0
 801f902:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f904:	2300      	movs	r3, #0
 801f906:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f908:	4b64      	ldr	r3, [pc, #400]	; (801fa9c <udp_input+0x21c>)
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	627b      	str	r3, [r7, #36]	; 0x24
 801f90e:	e054      	b.n	801f9ba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f912:	8a5b      	ldrh	r3, [r3, #18]
 801f914:	89fa      	ldrh	r2, [r7, #14]
 801f916:	429a      	cmp	r2, r3
 801f918:	d14a      	bne.n	801f9b0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f91a:	7cfb      	ldrb	r3, [r7, #19]
 801f91c:	461a      	mov	r2, r3
 801f91e:	6839      	ldr	r1, [r7, #0]
 801f920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f922:	f7ff ff49 	bl	801f7b8 <udp_input_local_match>
 801f926:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d041      	beq.n	801f9b0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f92e:	7c1b      	ldrb	r3, [r3, #16]
 801f930:	f003 0304 	and.w	r3, r3, #4
 801f934:	2b00      	cmp	r3, #0
 801f936:	d11d      	bne.n	801f974 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f938:	69fb      	ldr	r3, [r7, #28]
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	d102      	bne.n	801f944 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f940:	61fb      	str	r3, [r7, #28]
 801f942:	e017      	b.n	801f974 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f944:	7cfb      	ldrb	r3, [r7, #19]
 801f946:	2b00      	cmp	r3, #0
 801f948:	d014      	beq.n	801f974 <udp_input+0xf4>
 801f94a:	4b53      	ldr	r3, [pc, #332]	; (801fa98 <udp_input+0x218>)
 801f94c:	695b      	ldr	r3, [r3, #20]
 801f94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f952:	d10f      	bne.n	801f974 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f954:	69fb      	ldr	r3, [r7, #28]
 801f956:	681a      	ldr	r2, [r3, #0]
 801f958:	683b      	ldr	r3, [r7, #0]
 801f95a:	3304      	adds	r3, #4
 801f95c:	681b      	ldr	r3, [r3, #0]
 801f95e:	429a      	cmp	r2, r3
 801f960:	d008      	beq.n	801f974 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f964:	681a      	ldr	r2, [r3, #0]
 801f966:	683b      	ldr	r3, [r7, #0]
 801f968:	3304      	adds	r3, #4
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	429a      	cmp	r2, r3
 801f96e:	d101      	bne.n	801f974 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f972:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f976:	8a9b      	ldrh	r3, [r3, #20]
 801f978:	8a3a      	ldrh	r2, [r7, #16]
 801f97a:	429a      	cmp	r2, r3
 801f97c:	d118      	bne.n	801f9b0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f980:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f982:	2b00      	cmp	r3, #0
 801f984:	d005      	beq.n	801f992 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f988:	685a      	ldr	r2, [r3, #4]
 801f98a:	4b43      	ldr	r3, [pc, #268]	; (801fa98 <udp_input+0x218>)
 801f98c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f98e:	429a      	cmp	r2, r3
 801f990:	d10e      	bne.n	801f9b0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f992:	6a3b      	ldr	r3, [r7, #32]
 801f994:	2b00      	cmp	r3, #0
 801f996:	d014      	beq.n	801f9c2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f99a:	68da      	ldr	r2, [r3, #12]
 801f99c:	6a3b      	ldr	r3, [r7, #32]
 801f99e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f9a0:	4b3e      	ldr	r3, [pc, #248]	; (801fa9c <udp_input+0x21c>)
 801f9a2:	681a      	ldr	r2, [r3, #0]
 801f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9a6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f9a8:	4a3c      	ldr	r2, [pc, #240]	; (801fa9c <udp_input+0x21c>)
 801f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f9ae:	e008      	b.n	801f9c2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9b2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9b6:	68db      	ldr	r3, [r3, #12]
 801f9b8:	627b      	str	r3, [r7, #36]	; 0x24
 801f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9bc:	2b00      	cmp	r3, #0
 801f9be:	d1a7      	bne.n	801f910 <udp_input+0x90>
 801f9c0:	e000      	b.n	801f9c4 <udp_input+0x144>
        break;
 801f9c2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d101      	bne.n	801f9ce <udp_input+0x14e>
    pcb = uncon_pcb;
 801f9ca:	69fb      	ldr	r3, [r7, #28]
 801f9cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	d002      	beq.n	801f9da <udp_input+0x15a>
    for_us = 1;
 801f9d4:	2301      	movs	r3, #1
 801f9d6:	76fb      	strb	r3, [r7, #27]
 801f9d8:	e00a      	b.n	801f9f0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f9da:	683b      	ldr	r3, [r7, #0]
 801f9dc:	3304      	adds	r3, #4
 801f9de:	681a      	ldr	r2, [r3, #0]
 801f9e0:	4b2d      	ldr	r3, [pc, #180]	; (801fa98 <udp_input+0x218>)
 801f9e2:	695b      	ldr	r3, [r3, #20]
 801f9e4:	429a      	cmp	r2, r3
 801f9e6:	bf0c      	ite	eq
 801f9e8:	2301      	moveq	r3, #1
 801f9ea:	2300      	movne	r3, #0
 801f9ec:	b2db      	uxtb	r3, r3
 801f9ee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f9f0:	7efb      	ldrb	r3, [r7, #27]
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	d041      	beq.n	801fa7a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f9f6:	2108      	movs	r1, #8
 801f9f8:	6878      	ldr	r0, [r7, #4]
 801f9fa:	f7f9 f85b 	bl	8018ab4 <pbuf_remove_header>
 801f9fe:	4603      	mov	r3, r0
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d00a      	beq.n	801fa1a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801fa04:	4b20      	ldr	r3, [pc, #128]	; (801fa88 <udp_input+0x208>)
 801fa06:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801fa0a:	4925      	ldr	r1, [pc, #148]	; (801faa0 <udp_input+0x220>)
 801fa0c:	4820      	ldr	r0, [pc, #128]	; (801fa90 <udp_input+0x210>)
 801fa0e:	f003 f9f3 	bl	8022df8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801fa12:	6878      	ldr	r0, [r7, #4]
 801fa14:	f7f9 f8d4 	bl	8018bc0 <pbuf_free>
      goto end;
 801fa18:	e032      	b.n	801fa80 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d012      	beq.n	801fa46 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa22:	699b      	ldr	r3, [r3, #24]
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	d00a      	beq.n	801fa3e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa2a:	699c      	ldr	r4, [r3, #24]
 801fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa2e:	69d8      	ldr	r0, [r3, #28]
 801fa30:	8a3b      	ldrh	r3, [r7, #16]
 801fa32:	9300      	str	r3, [sp, #0]
 801fa34:	4b1b      	ldr	r3, [pc, #108]	; (801faa4 <udp_input+0x224>)
 801fa36:	687a      	ldr	r2, [r7, #4]
 801fa38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fa3a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801fa3c:	e021      	b.n	801fa82 <udp_input+0x202>
        pbuf_free(p);
 801fa3e:	6878      	ldr	r0, [r7, #4]
 801fa40:	f7f9 f8be 	bl	8018bc0 <pbuf_free>
        goto end;
 801fa44:	e01c      	b.n	801fa80 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fa46:	7cfb      	ldrb	r3, [r7, #19]
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d112      	bne.n	801fa72 <udp_input+0x1f2>
 801fa4c:	4b12      	ldr	r3, [pc, #72]	; (801fa98 <udp_input+0x218>)
 801fa4e:	695b      	ldr	r3, [r3, #20]
 801fa50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fa54:	2be0      	cmp	r3, #224	; 0xe0
 801fa56:	d00c      	beq.n	801fa72 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801fa58:	4b0f      	ldr	r3, [pc, #60]	; (801fa98 <udp_input+0x218>)
 801fa5a:	899b      	ldrh	r3, [r3, #12]
 801fa5c:	3308      	adds	r3, #8
 801fa5e:	b29b      	uxth	r3, r3
 801fa60:	b21b      	sxth	r3, r3
 801fa62:	4619      	mov	r1, r3
 801fa64:	6878      	ldr	r0, [r7, #4]
 801fa66:	f7f9 f898 	bl	8018b9a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fa6a:	2103      	movs	r1, #3
 801fa6c:	6878      	ldr	r0, [r7, #4]
 801fa6e:	f001 fa33 	bl	8020ed8 <icmp_dest_unreach>
      pbuf_free(p);
 801fa72:	6878      	ldr	r0, [r7, #4]
 801fa74:	f7f9 f8a4 	bl	8018bc0 <pbuf_free>
  return;
 801fa78:	e003      	b.n	801fa82 <udp_input+0x202>
    pbuf_free(p);
 801fa7a:	6878      	ldr	r0, [r7, #4]
 801fa7c:	f7f9 f8a0 	bl	8018bc0 <pbuf_free>
  return;
 801fa80:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fa82:	372c      	adds	r7, #44	; 0x2c
 801fa84:	46bd      	mov	sp, r7
 801fa86:	bd90      	pop	{r4, r7, pc}
 801fa88:	08026e44 	.word	0x08026e44
 801fa8c:	08026ee8 	.word	0x08026ee8
 801fa90:	08026e98 	.word	0x08026e98
 801fa94:	08026f00 	.word	0x08026f00
 801fa98:	2005eb94 	.word	0x2005eb94
 801fa9c:	20061cf0 	.word	0x20061cf0
 801faa0:	08026f1c 	.word	0x08026f1c
 801faa4:	2005eba4 	.word	0x2005eba4

0801faa8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801faa8:	b580      	push	{r7, lr}
 801faaa:	b086      	sub	sp, #24
 801faac:	af00      	add	r7, sp, #0
 801faae:	60f8      	str	r0, [r7, #12]
 801fab0:	60b9      	str	r1, [r7, #8]
 801fab2:	4613      	mov	r3, r2
 801fab4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fab6:	68bb      	ldr	r3, [r7, #8]
 801fab8:	2b00      	cmp	r3, #0
 801faba:	d101      	bne.n	801fac0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801fabc:	4b39      	ldr	r3, [pc, #228]	; (801fba4 <udp_bind+0xfc>)
 801fabe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d109      	bne.n	801fada <udp_bind+0x32>
 801fac6:	4b38      	ldr	r3, [pc, #224]	; (801fba8 <udp_bind+0x100>)
 801fac8:	f240 32b7 	movw	r2, #951	; 0x3b7
 801facc:	4937      	ldr	r1, [pc, #220]	; (801fbac <udp_bind+0x104>)
 801face:	4838      	ldr	r0, [pc, #224]	; (801fbb0 <udp_bind+0x108>)
 801fad0:	f003 f992 	bl	8022df8 <iprintf>
 801fad4:	f06f 030f 	mvn.w	r3, #15
 801fad8:	e060      	b.n	801fb9c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fada:	2300      	movs	r3, #0
 801fadc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fade:	4b35      	ldr	r3, [pc, #212]	; (801fbb4 <udp_bind+0x10c>)
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	617b      	str	r3, [r7, #20]
 801fae4:	e009      	b.n	801fafa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fae6:	68fa      	ldr	r2, [r7, #12]
 801fae8:	697b      	ldr	r3, [r7, #20]
 801faea:	429a      	cmp	r2, r3
 801faec:	d102      	bne.n	801faf4 <udp_bind+0x4c>
      rebind = 1;
 801faee:	2301      	movs	r3, #1
 801faf0:	74fb      	strb	r3, [r7, #19]
      break;
 801faf2:	e005      	b.n	801fb00 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801faf4:	697b      	ldr	r3, [r7, #20]
 801faf6:	68db      	ldr	r3, [r3, #12]
 801faf8:	617b      	str	r3, [r7, #20]
 801fafa:	697b      	ldr	r3, [r7, #20]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	d1f2      	bne.n	801fae6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fb00:	88fb      	ldrh	r3, [r7, #6]
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d109      	bne.n	801fb1a <udp_bind+0x72>
    port = udp_new_port();
 801fb06:	f7ff fe1f 	bl	801f748 <udp_new_port>
 801fb0a:	4603      	mov	r3, r0
 801fb0c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fb0e:	88fb      	ldrh	r3, [r7, #6]
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d12c      	bne.n	801fb6e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fb14:	f06f 0307 	mvn.w	r3, #7
 801fb18:	e040      	b.n	801fb9c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb1a:	4b26      	ldr	r3, [pc, #152]	; (801fbb4 <udp_bind+0x10c>)
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	617b      	str	r3, [r7, #20]
 801fb20:	e022      	b.n	801fb68 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fb22:	68fa      	ldr	r2, [r7, #12]
 801fb24:	697b      	ldr	r3, [r7, #20]
 801fb26:	429a      	cmp	r2, r3
 801fb28:	d01b      	beq.n	801fb62 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fb2a:	697b      	ldr	r3, [r7, #20]
 801fb2c:	8a5b      	ldrh	r3, [r3, #18]
 801fb2e:	88fa      	ldrh	r2, [r7, #6]
 801fb30:	429a      	cmp	r2, r3
 801fb32:	d116      	bne.n	801fb62 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb34:	697b      	ldr	r3, [r7, #20]
 801fb36:	681a      	ldr	r2, [r3, #0]
 801fb38:	68bb      	ldr	r3, [r7, #8]
 801fb3a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fb3c:	429a      	cmp	r2, r3
 801fb3e:	d00d      	beq.n	801fb5c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb40:	68bb      	ldr	r3, [r7, #8]
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d00a      	beq.n	801fb5c <udp_bind+0xb4>
 801fb46:	68bb      	ldr	r3, [r7, #8]
 801fb48:	681b      	ldr	r3, [r3, #0]
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d006      	beq.n	801fb5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb4e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	d003      	beq.n	801fb5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb54:	697b      	ldr	r3, [r7, #20]
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d102      	bne.n	801fb62 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fb5c:	f06f 0307 	mvn.w	r3, #7
 801fb60:	e01c      	b.n	801fb9c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb62:	697b      	ldr	r3, [r7, #20]
 801fb64:	68db      	ldr	r3, [r3, #12]
 801fb66:	617b      	str	r3, [r7, #20]
 801fb68:	697b      	ldr	r3, [r7, #20]
 801fb6a:	2b00      	cmp	r3, #0
 801fb6c:	d1d9      	bne.n	801fb22 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fb6e:	68bb      	ldr	r3, [r7, #8]
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d002      	beq.n	801fb7a <udp_bind+0xd2>
 801fb74:	68bb      	ldr	r3, [r7, #8]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	e000      	b.n	801fb7c <udp_bind+0xd4>
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	68fa      	ldr	r2, [r7, #12]
 801fb7e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	88fa      	ldrh	r2, [r7, #6]
 801fb84:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fb86:	7cfb      	ldrb	r3, [r7, #19]
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d106      	bne.n	801fb9a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fb8c:	4b09      	ldr	r3, [pc, #36]	; (801fbb4 <udp_bind+0x10c>)
 801fb8e:	681a      	ldr	r2, [r3, #0]
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fb94:	4a07      	ldr	r2, [pc, #28]	; (801fbb4 <udp_bind+0x10c>)
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fb9a:	2300      	movs	r3, #0
}
 801fb9c:	4618      	mov	r0, r3
 801fb9e:	3718      	adds	r7, #24
 801fba0:	46bd      	mov	sp, r7
 801fba2:	bd80      	pop	{r7, pc}
 801fba4:	08027bb0 	.word	0x08027bb0
 801fba8:	08026e44 	.word	0x08026e44
 801fbac:	0802710c 	.word	0x0802710c
 801fbb0:	08026e98 	.word	0x08026e98
 801fbb4:	20061cf0 	.word	0x20061cf0

0801fbb8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fbb8:	b580      	push	{r7, lr}
 801fbba:	b086      	sub	sp, #24
 801fbbc:	af00      	add	r7, sp, #0
 801fbbe:	60f8      	str	r0, [r7, #12]
 801fbc0:	60b9      	str	r1, [r7, #8]
 801fbc2:	4613      	mov	r3, r2
 801fbc4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	d109      	bne.n	801fbe0 <udp_connect+0x28>
 801fbcc:	4b2c      	ldr	r3, [pc, #176]	; (801fc80 <udp_connect+0xc8>)
 801fbce:	f240 4235 	movw	r2, #1077	; 0x435
 801fbd2:	492c      	ldr	r1, [pc, #176]	; (801fc84 <udp_connect+0xcc>)
 801fbd4:	482c      	ldr	r0, [pc, #176]	; (801fc88 <udp_connect+0xd0>)
 801fbd6:	f003 f90f 	bl	8022df8 <iprintf>
 801fbda:	f06f 030f 	mvn.w	r3, #15
 801fbde:	e04b      	b.n	801fc78 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fbe0:	68bb      	ldr	r3, [r7, #8]
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d109      	bne.n	801fbfa <udp_connect+0x42>
 801fbe6:	4b26      	ldr	r3, [pc, #152]	; (801fc80 <udp_connect+0xc8>)
 801fbe8:	f240 4236 	movw	r2, #1078	; 0x436
 801fbec:	4927      	ldr	r1, [pc, #156]	; (801fc8c <udp_connect+0xd4>)
 801fbee:	4826      	ldr	r0, [pc, #152]	; (801fc88 <udp_connect+0xd0>)
 801fbf0:	f003 f902 	bl	8022df8 <iprintf>
 801fbf4:	f06f 030f 	mvn.w	r3, #15
 801fbf8:	e03e      	b.n	801fc78 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801fbfa:	68fb      	ldr	r3, [r7, #12]
 801fbfc:	8a5b      	ldrh	r3, [r3, #18]
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d10f      	bne.n	801fc22 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fc02:	68f9      	ldr	r1, [r7, #12]
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	8a5b      	ldrh	r3, [r3, #18]
 801fc08:	461a      	mov	r2, r3
 801fc0a:	68f8      	ldr	r0, [r7, #12]
 801fc0c:	f7ff ff4c 	bl	801faa8 <udp_bind>
 801fc10:	4603      	mov	r3, r0
 801fc12:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801fc14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d002      	beq.n	801fc22 <udp_connect+0x6a>
      return err;
 801fc1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fc20:	e02a      	b.n	801fc78 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fc22:	68bb      	ldr	r3, [r7, #8]
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d002      	beq.n	801fc2e <udp_connect+0x76>
 801fc28:	68bb      	ldr	r3, [r7, #8]
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	e000      	b.n	801fc30 <udp_connect+0x78>
 801fc2e:	2300      	movs	r3, #0
 801fc30:	68fa      	ldr	r2, [r7, #12]
 801fc32:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	88fa      	ldrh	r2, [r7, #6]
 801fc38:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fc3a:	68fb      	ldr	r3, [r7, #12]
 801fc3c:	7c1b      	ldrb	r3, [r3, #16]
 801fc3e:	f043 0304 	orr.w	r3, r3, #4
 801fc42:	b2da      	uxtb	r2, r3
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc48:	4b11      	ldr	r3, [pc, #68]	; (801fc90 <udp_connect+0xd8>)
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	617b      	str	r3, [r7, #20]
 801fc4e:	e008      	b.n	801fc62 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801fc50:	68fa      	ldr	r2, [r7, #12]
 801fc52:	697b      	ldr	r3, [r7, #20]
 801fc54:	429a      	cmp	r2, r3
 801fc56:	d101      	bne.n	801fc5c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801fc58:	2300      	movs	r3, #0
 801fc5a:	e00d      	b.n	801fc78 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc5c:	697b      	ldr	r3, [r7, #20]
 801fc5e:	68db      	ldr	r3, [r3, #12]
 801fc60:	617b      	str	r3, [r7, #20]
 801fc62:	697b      	ldr	r3, [r7, #20]
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d1f3      	bne.n	801fc50 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801fc68:	4b09      	ldr	r3, [pc, #36]	; (801fc90 <udp_connect+0xd8>)
 801fc6a:	681a      	ldr	r2, [r3, #0]
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801fc70:	4a07      	ldr	r2, [pc, #28]	; (801fc90 <udp_connect+0xd8>)
 801fc72:	68fb      	ldr	r3, [r7, #12]
 801fc74:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801fc76:	2300      	movs	r3, #0
}
 801fc78:	4618      	mov	r0, r3
 801fc7a:	3718      	adds	r7, #24
 801fc7c:	46bd      	mov	sp, r7
 801fc7e:	bd80      	pop	{r7, pc}
 801fc80:	08026e44 	.word	0x08026e44
 801fc84:	08027124 	.word	0x08027124
 801fc88:	08026e98 	.word	0x08026e98
 801fc8c:	08027140 	.word	0x08027140
 801fc90:	20061cf0 	.word	0x20061cf0

0801fc94 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fc94:	b580      	push	{r7, lr}
 801fc96:	b084      	sub	sp, #16
 801fc98:	af00      	add	r7, sp, #0
 801fc9a:	60f8      	str	r0, [r7, #12]
 801fc9c:	60b9      	str	r1, [r7, #8]
 801fc9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fca0:	68fb      	ldr	r3, [r7, #12]
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	d107      	bne.n	801fcb6 <udp_recv+0x22>
 801fca6:	4b08      	ldr	r3, [pc, #32]	; (801fcc8 <udp_recv+0x34>)
 801fca8:	f240 428a 	movw	r2, #1162	; 0x48a
 801fcac:	4907      	ldr	r1, [pc, #28]	; (801fccc <udp_recv+0x38>)
 801fcae:	4808      	ldr	r0, [pc, #32]	; (801fcd0 <udp_recv+0x3c>)
 801fcb0:	f003 f8a2 	bl	8022df8 <iprintf>
 801fcb4:	e005      	b.n	801fcc2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fcb6:	68fb      	ldr	r3, [r7, #12]
 801fcb8:	68ba      	ldr	r2, [r7, #8]
 801fcba:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fcbc:	68fb      	ldr	r3, [r7, #12]
 801fcbe:	687a      	ldr	r2, [r7, #4]
 801fcc0:	61da      	str	r2, [r3, #28]
}
 801fcc2:	3710      	adds	r7, #16
 801fcc4:	46bd      	mov	sp, r7
 801fcc6:	bd80      	pop	{r7, pc}
 801fcc8:	08026e44 	.word	0x08026e44
 801fccc:	08027178 	.word	0x08027178
 801fcd0:	08026e98 	.word	0x08026e98

0801fcd4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801fcd4:	b580      	push	{r7, lr}
 801fcd6:	b084      	sub	sp, #16
 801fcd8:	af00      	add	r7, sp, #0
 801fcda:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d107      	bne.n	801fcf2 <udp_remove+0x1e>
 801fce2:	4b19      	ldr	r3, [pc, #100]	; (801fd48 <udp_remove+0x74>)
 801fce4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fce8:	4918      	ldr	r1, [pc, #96]	; (801fd4c <udp_remove+0x78>)
 801fcea:	4819      	ldr	r0, [pc, #100]	; (801fd50 <udp_remove+0x7c>)
 801fcec:	f003 f884 	bl	8022df8 <iprintf>
 801fcf0:	e026      	b.n	801fd40 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fcf2:	4b18      	ldr	r3, [pc, #96]	; (801fd54 <udp_remove+0x80>)
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	687a      	ldr	r2, [r7, #4]
 801fcf8:	429a      	cmp	r2, r3
 801fcfa:	d105      	bne.n	801fd08 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fcfc:	4b15      	ldr	r3, [pc, #84]	; (801fd54 <udp_remove+0x80>)
 801fcfe:	681b      	ldr	r3, [r3, #0]
 801fd00:	68db      	ldr	r3, [r3, #12]
 801fd02:	4a14      	ldr	r2, [pc, #80]	; (801fd54 <udp_remove+0x80>)
 801fd04:	6013      	str	r3, [r2, #0]
 801fd06:	e017      	b.n	801fd38 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fd08:	4b12      	ldr	r3, [pc, #72]	; (801fd54 <udp_remove+0x80>)
 801fd0a:	681b      	ldr	r3, [r3, #0]
 801fd0c:	60fb      	str	r3, [r7, #12]
 801fd0e:	e010      	b.n	801fd32 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fd10:	68fb      	ldr	r3, [r7, #12]
 801fd12:	68db      	ldr	r3, [r3, #12]
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	d009      	beq.n	801fd2c <udp_remove+0x58>
 801fd18:	68fb      	ldr	r3, [r7, #12]
 801fd1a:	68db      	ldr	r3, [r3, #12]
 801fd1c:	687a      	ldr	r2, [r7, #4]
 801fd1e:	429a      	cmp	r2, r3
 801fd20:	d104      	bne.n	801fd2c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	68da      	ldr	r2, [r3, #12]
 801fd26:	68fb      	ldr	r3, [r7, #12]
 801fd28:	60da      	str	r2, [r3, #12]
        break;
 801fd2a:	e005      	b.n	801fd38 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fd2c:	68fb      	ldr	r3, [r7, #12]
 801fd2e:	68db      	ldr	r3, [r3, #12]
 801fd30:	60fb      	str	r3, [r7, #12]
 801fd32:	68fb      	ldr	r3, [r7, #12]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d1eb      	bne.n	801fd10 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fd38:	6879      	ldr	r1, [r7, #4]
 801fd3a:	2000      	movs	r0, #0
 801fd3c:	f7f8 f89c 	bl	8017e78 <memp_free>
}
 801fd40:	3710      	adds	r7, #16
 801fd42:	46bd      	mov	sp, r7
 801fd44:	bd80      	pop	{r7, pc}
 801fd46:	bf00      	nop
 801fd48:	08026e44 	.word	0x08026e44
 801fd4c:	08027190 	.word	0x08027190
 801fd50:	08026e98 	.word	0x08026e98
 801fd54:	20061cf0 	.word	0x20061cf0

0801fd58 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fd58:	b580      	push	{r7, lr}
 801fd5a:	b082      	sub	sp, #8
 801fd5c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fd5e:	2000      	movs	r0, #0
 801fd60:	f7f8 f814 	bl	8017d8c <memp_malloc>
 801fd64:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d007      	beq.n	801fd7c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fd6c:	2220      	movs	r2, #32
 801fd6e:	2100      	movs	r1, #0
 801fd70:	6878      	ldr	r0, [r7, #4]
 801fd72:	f003 f919 	bl	8022fa8 <memset>
    pcb->ttl = UDP_TTL;
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	22ff      	movs	r2, #255	; 0xff
 801fd7a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fd7c:	687b      	ldr	r3, [r7, #4]
}
 801fd7e:	4618      	mov	r0, r3
 801fd80:	3708      	adds	r7, #8
 801fd82:	46bd      	mov	sp, r7
 801fd84:	bd80      	pop	{r7, pc}

0801fd86 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801fd86:	b580      	push	{r7, lr}
 801fd88:	b084      	sub	sp, #16
 801fd8a:	af00      	add	r7, sp, #0
 801fd8c:	4603      	mov	r3, r0
 801fd8e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801fd90:	f7ff ffe2 	bl	801fd58 <udp_new>
 801fd94:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801fd96:	68fb      	ldr	r3, [r7, #12]
}
 801fd98:	4618      	mov	r0, r3
 801fd9a:	3710      	adds	r7, #16
 801fd9c:	46bd      	mov	sp, r7
 801fd9e:	bd80      	pop	{r7, pc}

0801fda0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fda0:	b480      	push	{r7}
 801fda2:	b085      	sub	sp, #20
 801fda4:	af00      	add	r7, sp, #0
 801fda6:	6078      	str	r0, [r7, #4]
 801fda8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d01e      	beq.n	801fdee <udp_netif_ip_addr_changed+0x4e>
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	d01a      	beq.n	801fdee <udp_netif_ip_addr_changed+0x4e>
 801fdb8:	683b      	ldr	r3, [r7, #0]
 801fdba:	2b00      	cmp	r3, #0
 801fdbc:	d017      	beq.n	801fdee <udp_netif_ip_addr_changed+0x4e>
 801fdbe:	683b      	ldr	r3, [r7, #0]
 801fdc0:	681b      	ldr	r3, [r3, #0]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d013      	beq.n	801fdee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fdc6:	4b0d      	ldr	r3, [pc, #52]	; (801fdfc <udp_netif_ip_addr_changed+0x5c>)
 801fdc8:	681b      	ldr	r3, [r3, #0]
 801fdca:	60fb      	str	r3, [r7, #12]
 801fdcc:	e00c      	b.n	801fde8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fdce:	68fb      	ldr	r3, [r7, #12]
 801fdd0:	681a      	ldr	r2, [r3, #0]
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	429a      	cmp	r2, r3
 801fdd8:	d103      	bne.n	801fde2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801fdda:	683b      	ldr	r3, [r7, #0]
 801fddc:	681a      	ldr	r2, [r3, #0]
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fde2:	68fb      	ldr	r3, [r7, #12]
 801fde4:	68db      	ldr	r3, [r3, #12]
 801fde6:	60fb      	str	r3, [r7, #12]
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d1ef      	bne.n	801fdce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801fdee:	bf00      	nop
 801fdf0:	3714      	adds	r7, #20
 801fdf2:	46bd      	mov	sp, r7
 801fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdf8:	4770      	bx	lr
 801fdfa:	bf00      	nop
 801fdfc:	20061cf0 	.word	0x20061cf0

0801fe00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801fe00:	b580      	push	{r7, lr}
 801fe02:	b082      	sub	sp, #8
 801fe04:	af00      	add	r7, sp, #0
 801fe06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801fe08:	4915      	ldr	r1, [pc, #84]	; (801fe60 <etharp_free_entry+0x60>)
 801fe0a:	687a      	ldr	r2, [r7, #4]
 801fe0c:	4613      	mov	r3, r2
 801fe0e:	005b      	lsls	r3, r3, #1
 801fe10:	4413      	add	r3, r2
 801fe12:	00db      	lsls	r3, r3, #3
 801fe14:	440b      	add	r3, r1
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d013      	beq.n	801fe44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801fe1c:	4910      	ldr	r1, [pc, #64]	; (801fe60 <etharp_free_entry+0x60>)
 801fe1e:	687a      	ldr	r2, [r7, #4]
 801fe20:	4613      	mov	r3, r2
 801fe22:	005b      	lsls	r3, r3, #1
 801fe24:	4413      	add	r3, r2
 801fe26:	00db      	lsls	r3, r3, #3
 801fe28:	440b      	add	r3, r1
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	4618      	mov	r0, r3
 801fe2e:	f7f8 fec7 	bl	8018bc0 <pbuf_free>
    arp_table[i].q = NULL;
 801fe32:	490b      	ldr	r1, [pc, #44]	; (801fe60 <etharp_free_entry+0x60>)
 801fe34:	687a      	ldr	r2, [r7, #4]
 801fe36:	4613      	mov	r3, r2
 801fe38:	005b      	lsls	r3, r3, #1
 801fe3a:	4413      	add	r3, r2
 801fe3c:	00db      	lsls	r3, r3, #3
 801fe3e:	440b      	add	r3, r1
 801fe40:	2200      	movs	r2, #0
 801fe42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801fe44:	4906      	ldr	r1, [pc, #24]	; (801fe60 <etharp_free_entry+0x60>)
 801fe46:	687a      	ldr	r2, [r7, #4]
 801fe48:	4613      	mov	r3, r2
 801fe4a:	005b      	lsls	r3, r3, #1
 801fe4c:	4413      	add	r3, r2
 801fe4e:	00db      	lsls	r3, r3, #3
 801fe50:	440b      	add	r3, r1
 801fe52:	3314      	adds	r3, #20
 801fe54:	2200      	movs	r2, #0
 801fe56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801fe58:	bf00      	nop
 801fe5a:	3708      	adds	r7, #8
 801fe5c:	46bd      	mov	sp, r7
 801fe5e:	bd80      	pop	{r7, pc}
 801fe60:	20061cf4 	.word	0x20061cf4

0801fe64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801fe64:	b580      	push	{r7, lr}
 801fe66:	b082      	sub	sp, #8
 801fe68:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fe6a:	2300      	movs	r3, #0
 801fe6c:	607b      	str	r3, [r7, #4]
 801fe6e:	e096      	b.n	801ff9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801fe70:	494f      	ldr	r1, [pc, #316]	; (801ffb0 <etharp_tmr+0x14c>)
 801fe72:	687a      	ldr	r2, [r7, #4]
 801fe74:	4613      	mov	r3, r2
 801fe76:	005b      	lsls	r3, r3, #1
 801fe78:	4413      	add	r3, r2
 801fe7a:	00db      	lsls	r3, r3, #3
 801fe7c:	440b      	add	r3, r1
 801fe7e:	3314      	adds	r3, #20
 801fe80:	781b      	ldrb	r3, [r3, #0]
 801fe82:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801fe84:	78fb      	ldrb	r3, [r7, #3]
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	f000 8086 	beq.w	801ff98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801fe8c:	4948      	ldr	r1, [pc, #288]	; (801ffb0 <etharp_tmr+0x14c>)
 801fe8e:	687a      	ldr	r2, [r7, #4]
 801fe90:	4613      	mov	r3, r2
 801fe92:	005b      	lsls	r3, r3, #1
 801fe94:	4413      	add	r3, r2
 801fe96:	00db      	lsls	r3, r3, #3
 801fe98:	440b      	add	r3, r1
 801fe9a:	3312      	adds	r3, #18
 801fe9c:	881b      	ldrh	r3, [r3, #0]
 801fe9e:	3301      	adds	r3, #1
 801fea0:	b298      	uxth	r0, r3
 801fea2:	4943      	ldr	r1, [pc, #268]	; (801ffb0 <etharp_tmr+0x14c>)
 801fea4:	687a      	ldr	r2, [r7, #4]
 801fea6:	4613      	mov	r3, r2
 801fea8:	005b      	lsls	r3, r3, #1
 801feaa:	4413      	add	r3, r2
 801feac:	00db      	lsls	r3, r3, #3
 801feae:	440b      	add	r3, r1
 801feb0:	3312      	adds	r3, #18
 801feb2:	4602      	mov	r2, r0
 801feb4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801feb6:	493e      	ldr	r1, [pc, #248]	; (801ffb0 <etharp_tmr+0x14c>)
 801feb8:	687a      	ldr	r2, [r7, #4]
 801feba:	4613      	mov	r3, r2
 801febc:	005b      	lsls	r3, r3, #1
 801febe:	4413      	add	r3, r2
 801fec0:	00db      	lsls	r3, r3, #3
 801fec2:	440b      	add	r3, r1
 801fec4:	3312      	adds	r3, #18
 801fec6:	881b      	ldrh	r3, [r3, #0]
 801fec8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801fecc:	d215      	bcs.n	801fefa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fece:	4938      	ldr	r1, [pc, #224]	; (801ffb0 <etharp_tmr+0x14c>)
 801fed0:	687a      	ldr	r2, [r7, #4]
 801fed2:	4613      	mov	r3, r2
 801fed4:	005b      	lsls	r3, r3, #1
 801fed6:	4413      	add	r3, r2
 801fed8:	00db      	lsls	r3, r3, #3
 801feda:	440b      	add	r3, r1
 801fedc:	3314      	adds	r3, #20
 801fede:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fee0:	2b01      	cmp	r3, #1
 801fee2:	d10e      	bne.n	801ff02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801fee4:	4932      	ldr	r1, [pc, #200]	; (801ffb0 <etharp_tmr+0x14c>)
 801fee6:	687a      	ldr	r2, [r7, #4]
 801fee8:	4613      	mov	r3, r2
 801feea:	005b      	lsls	r3, r3, #1
 801feec:	4413      	add	r3, r2
 801feee:	00db      	lsls	r3, r3, #3
 801fef0:	440b      	add	r3, r1
 801fef2:	3312      	adds	r3, #18
 801fef4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fef6:	2b04      	cmp	r3, #4
 801fef8:	d903      	bls.n	801ff02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801fefa:	6878      	ldr	r0, [r7, #4]
 801fefc:	f7ff ff80 	bl	801fe00 <etharp_free_entry>
 801ff00:	e04a      	b.n	801ff98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ff02:	492b      	ldr	r1, [pc, #172]	; (801ffb0 <etharp_tmr+0x14c>)
 801ff04:	687a      	ldr	r2, [r7, #4]
 801ff06:	4613      	mov	r3, r2
 801ff08:	005b      	lsls	r3, r3, #1
 801ff0a:	4413      	add	r3, r2
 801ff0c:	00db      	lsls	r3, r3, #3
 801ff0e:	440b      	add	r3, r1
 801ff10:	3314      	adds	r3, #20
 801ff12:	781b      	ldrb	r3, [r3, #0]
 801ff14:	2b03      	cmp	r3, #3
 801ff16:	d10a      	bne.n	801ff2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ff18:	4925      	ldr	r1, [pc, #148]	; (801ffb0 <etharp_tmr+0x14c>)
 801ff1a:	687a      	ldr	r2, [r7, #4]
 801ff1c:	4613      	mov	r3, r2
 801ff1e:	005b      	lsls	r3, r3, #1
 801ff20:	4413      	add	r3, r2
 801ff22:	00db      	lsls	r3, r3, #3
 801ff24:	440b      	add	r3, r1
 801ff26:	3314      	adds	r3, #20
 801ff28:	2204      	movs	r2, #4
 801ff2a:	701a      	strb	r2, [r3, #0]
 801ff2c:	e034      	b.n	801ff98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ff2e:	4920      	ldr	r1, [pc, #128]	; (801ffb0 <etharp_tmr+0x14c>)
 801ff30:	687a      	ldr	r2, [r7, #4]
 801ff32:	4613      	mov	r3, r2
 801ff34:	005b      	lsls	r3, r3, #1
 801ff36:	4413      	add	r3, r2
 801ff38:	00db      	lsls	r3, r3, #3
 801ff3a:	440b      	add	r3, r1
 801ff3c:	3314      	adds	r3, #20
 801ff3e:	781b      	ldrb	r3, [r3, #0]
 801ff40:	2b04      	cmp	r3, #4
 801ff42:	d10a      	bne.n	801ff5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ff44:	491a      	ldr	r1, [pc, #104]	; (801ffb0 <etharp_tmr+0x14c>)
 801ff46:	687a      	ldr	r2, [r7, #4]
 801ff48:	4613      	mov	r3, r2
 801ff4a:	005b      	lsls	r3, r3, #1
 801ff4c:	4413      	add	r3, r2
 801ff4e:	00db      	lsls	r3, r3, #3
 801ff50:	440b      	add	r3, r1
 801ff52:	3314      	adds	r3, #20
 801ff54:	2202      	movs	r2, #2
 801ff56:	701a      	strb	r2, [r3, #0]
 801ff58:	e01e      	b.n	801ff98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ff5a:	4915      	ldr	r1, [pc, #84]	; (801ffb0 <etharp_tmr+0x14c>)
 801ff5c:	687a      	ldr	r2, [r7, #4]
 801ff5e:	4613      	mov	r3, r2
 801ff60:	005b      	lsls	r3, r3, #1
 801ff62:	4413      	add	r3, r2
 801ff64:	00db      	lsls	r3, r3, #3
 801ff66:	440b      	add	r3, r1
 801ff68:	3314      	adds	r3, #20
 801ff6a:	781b      	ldrb	r3, [r3, #0]
 801ff6c:	2b01      	cmp	r3, #1
 801ff6e:	d113      	bne.n	801ff98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ff70:	490f      	ldr	r1, [pc, #60]	; (801ffb0 <etharp_tmr+0x14c>)
 801ff72:	687a      	ldr	r2, [r7, #4]
 801ff74:	4613      	mov	r3, r2
 801ff76:	005b      	lsls	r3, r3, #1
 801ff78:	4413      	add	r3, r2
 801ff7a:	00db      	lsls	r3, r3, #3
 801ff7c:	440b      	add	r3, r1
 801ff7e:	3308      	adds	r3, #8
 801ff80:	6818      	ldr	r0, [r3, #0]
 801ff82:	687a      	ldr	r2, [r7, #4]
 801ff84:	4613      	mov	r3, r2
 801ff86:	005b      	lsls	r3, r3, #1
 801ff88:	4413      	add	r3, r2
 801ff8a:	00db      	lsls	r3, r3, #3
 801ff8c:	4a08      	ldr	r2, [pc, #32]	; (801ffb0 <etharp_tmr+0x14c>)
 801ff8e:	4413      	add	r3, r2
 801ff90:	3304      	adds	r3, #4
 801ff92:	4619      	mov	r1, r3
 801ff94:	f000 fe6e 	bl	8020c74 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	3301      	adds	r3, #1
 801ff9c:	607b      	str	r3, [r7, #4]
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	2b09      	cmp	r3, #9
 801ffa2:	f77f af65 	ble.w	801fe70 <etharp_tmr+0xc>
      }
    }
  }
}
 801ffa6:	bf00      	nop
 801ffa8:	bf00      	nop
 801ffaa:	3708      	adds	r7, #8
 801ffac:	46bd      	mov	sp, r7
 801ffae:	bd80      	pop	{r7, pc}
 801ffb0:	20061cf4 	.word	0x20061cf4

0801ffb4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ffb4:	b580      	push	{r7, lr}
 801ffb6:	b08a      	sub	sp, #40	; 0x28
 801ffb8:	af00      	add	r7, sp, #0
 801ffba:	60f8      	str	r0, [r7, #12]
 801ffbc:	460b      	mov	r3, r1
 801ffbe:	607a      	str	r2, [r7, #4]
 801ffc0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ffc2:	230a      	movs	r3, #10
 801ffc4:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ffc6:	230a      	movs	r3, #10
 801ffc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ffca:	230a      	movs	r3, #10
 801ffcc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801ffce:	2300      	movs	r3, #0
 801ffd0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ffd2:	230a      	movs	r3, #10
 801ffd4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ffd6:	2300      	movs	r3, #0
 801ffd8:	83bb      	strh	r3, [r7, #28]
 801ffda:	2300      	movs	r3, #0
 801ffdc:	837b      	strh	r3, [r7, #26]
 801ffde:	2300      	movs	r3, #0
 801ffe0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ffe2:	2300      	movs	r3, #0
 801ffe4:	843b      	strh	r3, [r7, #32]
 801ffe6:	e0ae      	b.n	8020146 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ffe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ffec:	49a6      	ldr	r1, [pc, #664]	; (8020288 <etharp_find_entry+0x2d4>)
 801ffee:	4613      	mov	r3, r2
 801fff0:	005b      	lsls	r3, r3, #1
 801fff2:	4413      	add	r3, r2
 801fff4:	00db      	lsls	r3, r3, #3
 801fff6:	440b      	add	r3, r1
 801fff8:	3314      	adds	r3, #20
 801fffa:	781b      	ldrb	r3, [r3, #0]
 801fffc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801fffe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020002:	2b0a      	cmp	r3, #10
 8020004:	d105      	bne.n	8020012 <etharp_find_entry+0x5e>
 8020006:	7dfb      	ldrb	r3, [r7, #23]
 8020008:	2b00      	cmp	r3, #0
 802000a:	d102      	bne.n	8020012 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 802000c:	8c3b      	ldrh	r3, [r7, #32]
 802000e:	847b      	strh	r3, [r7, #34]	; 0x22
 8020010:	e095      	b.n	802013e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8020012:	7dfb      	ldrb	r3, [r7, #23]
 8020014:	2b00      	cmp	r3, #0
 8020016:	f000 8092 	beq.w	802013e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802001a:	7dfb      	ldrb	r3, [r7, #23]
 802001c:	2b01      	cmp	r3, #1
 802001e:	d009      	beq.n	8020034 <etharp_find_entry+0x80>
 8020020:	7dfb      	ldrb	r3, [r7, #23]
 8020022:	2b01      	cmp	r3, #1
 8020024:	d806      	bhi.n	8020034 <etharp_find_entry+0x80>
 8020026:	4b99      	ldr	r3, [pc, #612]	; (802028c <etharp_find_entry+0x2d8>)
 8020028:	f240 1223 	movw	r2, #291	; 0x123
 802002c:	4998      	ldr	r1, [pc, #608]	; (8020290 <etharp_find_entry+0x2dc>)
 802002e:	4899      	ldr	r0, [pc, #612]	; (8020294 <etharp_find_entry+0x2e0>)
 8020030:	f002 fee2 	bl	8022df8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	2b00      	cmp	r3, #0
 8020038:	d020      	beq.n	802007c <etharp_find_entry+0xc8>
 802003a:	68fb      	ldr	r3, [r7, #12]
 802003c:	6819      	ldr	r1, [r3, #0]
 802003e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020042:	4891      	ldr	r0, [pc, #580]	; (8020288 <etharp_find_entry+0x2d4>)
 8020044:	4613      	mov	r3, r2
 8020046:	005b      	lsls	r3, r3, #1
 8020048:	4413      	add	r3, r2
 802004a:	00db      	lsls	r3, r3, #3
 802004c:	4403      	add	r3, r0
 802004e:	3304      	adds	r3, #4
 8020050:	681b      	ldr	r3, [r3, #0]
 8020052:	4299      	cmp	r1, r3
 8020054:	d112      	bne.n	802007c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	2b00      	cmp	r3, #0
 802005a:	d00c      	beq.n	8020076 <etharp_find_entry+0xc2>
 802005c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020060:	4989      	ldr	r1, [pc, #548]	; (8020288 <etharp_find_entry+0x2d4>)
 8020062:	4613      	mov	r3, r2
 8020064:	005b      	lsls	r3, r3, #1
 8020066:	4413      	add	r3, r2
 8020068:	00db      	lsls	r3, r3, #3
 802006a:	440b      	add	r3, r1
 802006c:	3308      	adds	r3, #8
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	687a      	ldr	r2, [r7, #4]
 8020072:	429a      	cmp	r2, r3
 8020074:	d102      	bne.n	802007c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8020076:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802007a:	e100      	b.n	802027e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 802007c:	7dfb      	ldrb	r3, [r7, #23]
 802007e:	2b01      	cmp	r3, #1
 8020080:	d140      	bne.n	8020104 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8020082:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020086:	4980      	ldr	r1, [pc, #512]	; (8020288 <etharp_find_entry+0x2d4>)
 8020088:	4613      	mov	r3, r2
 802008a:	005b      	lsls	r3, r3, #1
 802008c:	4413      	add	r3, r2
 802008e:	00db      	lsls	r3, r3, #3
 8020090:	440b      	add	r3, r1
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	2b00      	cmp	r3, #0
 8020096:	d01a      	beq.n	80200ce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8020098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802009c:	497a      	ldr	r1, [pc, #488]	; (8020288 <etharp_find_entry+0x2d4>)
 802009e:	4613      	mov	r3, r2
 80200a0:	005b      	lsls	r3, r3, #1
 80200a2:	4413      	add	r3, r2
 80200a4:	00db      	lsls	r3, r3, #3
 80200a6:	440b      	add	r3, r1
 80200a8:	3312      	adds	r3, #18
 80200aa:	881b      	ldrh	r3, [r3, #0]
 80200ac:	8bba      	ldrh	r2, [r7, #28]
 80200ae:	429a      	cmp	r2, r3
 80200b0:	d845      	bhi.n	802013e <etharp_find_entry+0x18a>
            old_queue = i;
 80200b2:	8c3b      	ldrh	r3, [r7, #32]
 80200b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80200b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80200ba:	4973      	ldr	r1, [pc, #460]	; (8020288 <etharp_find_entry+0x2d4>)
 80200bc:	4613      	mov	r3, r2
 80200be:	005b      	lsls	r3, r3, #1
 80200c0:	4413      	add	r3, r2
 80200c2:	00db      	lsls	r3, r3, #3
 80200c4:	440b      	add	r3, r1
 80200c6:	3312      	adds	r3, #18
 80200c8:	881b      	ldrh	r3, [r3, #0]
 80200ca:	83bb      	strh	r3, [r7, #28]
 80200cc:	e037      	b.n	802013e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80200ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80200d2:	496d      	ldr	r1, [pc, #436]	; (8020288 <etharp_find_entry+0x2d4>)
 80200d4:	4613      	mov	r3, r2
 80200d6:	005b      	lsls	r3, r3, #1
 80200d8:	4413      	add	r3, r2
 80200da:	00db      	lsls	r3, r3, #3
 80200dc:	440b      	add	r3, r1
 80200de:	3312      	adds	r3, #18
 80200e0:	881b      	ldrh	r3, [r3, #0]
 80200e2:	8b7a      	ldrh	r2, [r7, #26]
 80200e4:	429a      	cmp	r2, r3
 80200e6:	d82a      	bhi.n	802013e <etharp_find_entry+0x18a>
            old_pending = i;
 80200e8:	8c3b      	ldrh	r3, [r7, #32]
 80200ea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80200ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80200f0:	4965      	ldr	r1, [pc, #404]	; (8020288 <etharp_find_entry+0x2d4>)
 80200f2:	4613      	mov	r3, r2
 80200f4:	005b      	lsls	r3, r3, #1
 80200f6:	4413      	add	r3, r2
 80200f8:	00db      	lsls	r3, r3, #3
 80200fa:	440b      	add	r3, r1
 80200fc:	3312      	adds	r3, #18
 80200fe:	881b      	ldrh	r3, [r3, #0]
 8020100:	837b      	strh	r3, [r7, #26]
 8020102:	e01c      	b.n	802013e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8020104:	7dfb      	ldrb	r3, [r7, #23]
 8020106:	2b01      	cmp	r3, #1
 8020108:	d919      	bls.n	802013e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802010a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802010e:	495e      	ldr	r1, [pc, #376]	; (8020288 <etharp_find_entry+0x2d4>)
 8020110:	4613      	mov	r3, r2
 8020112:	005b      	lsls	r3, r3, #1
 8020114:	4413      	add	r3, r2
 8020116:	00db      	lsls	r3, r3, #3
 8020118:	440b      	add	r3, r1
 802011a:	3312      	adds	r3, #18
 802011c:	881b      	ldrh	r3, [r3, #0]
 802011e:	8b3a      	ldrh	r2, [r7, #24]
 8020120:	429a      	cmp	r2, r3
 8020122:	d80c      	bhi.n	802013e <etharp_find_entry+0x18a>
            old_stable = i;
 8020124:	8c3b      	ldrh	r3, [r7, #32]
 8020126:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8020128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802012c:	4956      	ldr	r1, [pc, #344]	; (8020288 <etharp_find_entry+0x2d4>)
 802012e:	4613      	mov	r3, r2
 8020130:	005b      	lsls	r3, r3, #1
 8020132:	4413      	add	r3, r2
 8020134:	00db      	lsls	r3, r3, #3
 8020136:	440b      	add	r3, r1
 8020138:	3312      	adds	r3, #18
 802013a:	881b      	ldrh	r3, [r3, #0]
 802013c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802013e:	8c3b      	ldrh	r3, [r7, #32]
 8020140:	3301      	adds	r3, #1
 8020142:	b29b      	uxth	r3, r3
 8020144:	843b      	strh	r3, [r7, #32]
 8020146:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802014a:	2b09      	cmp	r3, #9
 802014c:	f77f af4c 	ble.w	801ffe8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020150:	7afb      	ldrb	r3, [r7, #11]
 8020152:	f003 0302 	and.w	r3, r3, #2
 8020156:	2b00      	cmp	r3, #0
 8020158:	d108      	bne.n	802016c <etharp_find_entry+0x1b8>
 802015a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802015e:	2b0a      	cmp	r3, #10
 8020160:	d107      	bne.n	8020172 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8020162:	7afb      	ldrb	r3, [r7, #11]
 8020164:	f003 0301 	and.w	r3, r3, #1
 8020168:	2b00      	cmp	r3, #0
 802016a:	d102      	bne.n	8020172 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 802016c:	f04f 33ff 	mov.w	r3, #4294967295
 8020170:	e085      	b.n	802027e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8020172:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020176:	2b09      	cmp	r3, #9
 8020178:	dc02      	bgt.n	8020180 <etharp_find_entry+0x1cc>
    i = empty;
 802017a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802017c:	843b      	strh	r3, [r7, #32]
 802017e:	e039      	b.n	80201f4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8020180:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020184:	2b09      	cmp	r3, #9
 8020186:	dc14      	bgt.n	80201b2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8020188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802018a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802018c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020190:	493d      	ldr	r1, [pc, #244]	; (8020288 <etharp_find_entry+0x2d4>)
 8020192:	4613      	mov	r3, r2
 8020194:	005b      	lsls	r3, r3, #1
 8020196:	4413      	add	r3, r2
 8020198:	00db      	lsls	r3, r3, #3
 802019a:	440b      	add	r3, r1
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d018      	beq.n	80201d4 <etharp_find_entry+0x220>
 80201a2:	4b3a      	ldr	r3, [pc, #232]	; (802028c <etharp_find_entry+0x2d8>)
 80201a4:	f240 126d 	movw	r2, #365	; 0x16d
 80201a8:	493b      	ldr	r1, [pc, #236]	; (8020298 <etharp_find_entry+0x2e4>)
 80201aa:	483a      	ldr	r0, [pc, #232]	; (8020294 <etharp_find_entry+0x2e0>)
 80201ac:	f002 fe24 	bl	8022df8 <iprintf>
 80201b0:	e010      	b.n	80201d4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80201b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80201b6:	2b09      	cmp	r3, #9
 80201b8:	dc02      	bgt.n	80201c0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80201ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80201bc:	843b      	strh	r3, [r7, #32]
 80201be:	e009      	b.n	80201d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80201c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80201c4:	2b09      	cmp	r3, #9
 80201c6:	dc02      	bgt.n	80201ce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80201c8:	8bfb      	ldrh	r3, [r7, #30]
 80201ca:	843b      	strh	r3, [r7, #32]
 80201cc:	e002      	b.n	80201d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80201ce:	f04f 33ff 	mov.w	r3, #4294967295
 80201d2:	e054      	b.n	802027e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80201d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80201d8:	2b09      	cmp	r3, #9
 80201da:	dd06      	ble.n	80201ea <etharp_find_entry+0x236>
 80201dc:	4b2b      	ldr	r3, [pc, #172]	; (802028c <etharp_find_entry+0x2d8>)
 80201de:	f240 127f 	movw	r2, #383	; 0x17f
 80201e2:	492e      	ldr	r1, [pc, #184]	; (802029c <etharp_find_entry+0x2e8>)
 80201e4:	482b      	ldr	r0, [pc, #172]	; (8020294 <etharp_find_entry+0x2e0>)
 80201e6:	f002 fe07 	bl	8022df8 <iprintf>
    etharp_free_entry(i);
 80201ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80201ee:	4618      	mov	r0, r3
 80201f0:	f7ff fe06 	bl	801fe00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80201f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80201f8:	2b09      	cmp	r3, #9
 80201fa:	dd06      	ble.n	802020a <etharp_find_entry+0x256>
 80201fc:	4b23      	ldr	r3, [pc, #140]	; (802028c <etharp_find_entry+0x2d8>)
 80201fe:	f240 1283 	movw	r2, #387	; 0x183
 8020202:	4926      	ldr	r1, [pc, #152]	; (802029c <etharp_find_entry+0x2e8>)
 8020204:	4823      	ldr	r0, [pc, #140]	; (8020294 <etharp_find_entry+0x2e0>)
 8020206:	f002 fdf7 	bl	8022df8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802020a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802020e:	491e      	ldr	r1, [pc, #120]	; (8020288 <etharp_find_entry+0x2d4>)
 8020210:	4613      	mov	r3, r2
 8020212:	005b      	lsls	r3, r3, #1
 8020214:	4413      	add	r3, r2
 8020216:	00db      	lsls	r3, r3, #3
 8020218:	440b      	add	r3, r1
 802021a:	3314      	adds	r3, #20
 802021c:	781b      	ldrb	r3, [r3, #0]
 802021e:	2b00      	cmp	r3, #0
 8020220:	d006      	beq.n	8020230 <etharp_find_entry+0x27c>
 8020222:	4b1a      	ldr	r3, [pc, #104]	; (802028c <etharp_find_entry+0x2d8>)
 8020224:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020228:	491d      	ldr	r1, [pc, #116]	; (80202a0 <etharp_find_entry+0x2ec>)
 802022a:	481a      	ldr	r0, [pc, #104]	; (8020294 <etharp_find_entry+0x2e0>)
 802022c:	f002 fde4 	bl	8022df8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020230:	68fb      	ldr	r3, [r7, #12]
 8020232:	2b00      	cmp	r3, #0
 8020234:	d00b      	beq.n	802024e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8020236:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802023a:	68fb      	ldr	r3, [r7, #12]
 802023c:	6819      	ldr	r1, [r3, #0]
 802023e:	4812      	ldr	r0, [pc, #72]	; (8020288 <etharp_find_entry+0x2d4>)
 8020240:	4613      	mov	r3, r2
 8020242:	005b      	lsls	r3, r3, #1
 8020244:	4413      	add	r3, r2
 8020246:	00db      	lsls	r3, r3, #3
 8020248:	4403      	add	r3, r0
 802024a:	3304      	adds	r3, #4
 802024c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802024e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020252:	490d      	ldr	r1, [pc, #52]	; (8020288 <etharp_find_entry+0x2d4>)
 8020254:	4613      	mov	r3, r2
 8020256:	005b      	lsls	r3, r3, #1
 8020258:	4413      	add	r3, r2
 802025a:	00db      	lsls	r3, r3, #3
 802025c:	440b      	add	r3, r1
 802025e:	3312      	adds	r3, #18
 8020260:	2200      	movs	r2, #0
 8020262:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020264:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020268:	4907      	ldr	r1, [pc, #28]	; (8020288 <etharp_find_entry+0x2d4>)
 802026a:	4613      	mov	r3, r2
 802026c:	005b      	lsls	r3, r3, #1
 802026e:	4413      	add	r3, r2
 8020270:	00db      	lsls	r3, r3, #3
 8020272:	440b      	add	r3, r1
 8020274:	3308      	adds	r3, #8
 8020276:	687a      	ldr	r2, [r7, #4]
 8020278:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 802027a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802027e:	4618      	mov	r0, r3
 8020280:	3728      	adds	r7, #40	; 0x28
 8020282:	46bd      	mov	sp, r7
 8020284:	bd80      	pop	{r7, pc}
 8020286:	bf00      	nop
 8020288:	20061cf4 	.word	0x20061cf4
 802028c:	080271a8 	.word	0x080271a8
 8020290:	080271e0 	.word	0x080271e0
 8020294:	08027220 	.word	0x08027220
 8020298:	08027248 	.word	0x08027248
 802029c:	08027260 	.word	0x08027260
 80202a0:	08027274 	.word	0x08027274

080202a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80202a4:	b580      	push	{r7, lr}
 80202a6:	b088      	sub	sp, #32
 80202a8:	af02      	add	r7, sp, #8
 80202aa:	60f8      	str	r0, [r7, #12]
 80202ac:	60b9      	str	r1, [r7, #8]
 80202ae:	607a      	str	r2, [r7, #4]
 80202b0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80202b2:	68fb      	ldr	r3, [r7, #12]
 80202b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80202b8:	2b06      	cmp	r3, #6
 80202ba:	d006      	beq.n	80202ca <etharp_update_arp_entry+0x26>
 80202bc:	4b48      	ldr	r3, [pc, #288]	; (80203e0 <etharp_update_arp_entry+0x13c>)
 80202be:	f240 12a9 	movw	r2, #425	; 0x1a9
 80202c2:	4948      	ldr	r1, [pc, #288]	; (80203e4 <etharp_update_arp_entry+0x140>)
 80202c4:	4848      	ldr	r0, [pc, #288]	; (80203e8 <etharp_update_arp_entry+0x144>)
 80202c6:	f002 fd97 	bl	8022df8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80202ca:	68bb      	ldr	r3, [r7, #8]
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	d012      	beq.n	80202f6 <etharp_update_arp_entry+0x52>
 80202d0:	68bb      	ldr	r3, [r7, #8]
 80202d2:	681b      	ldr	r3, [r3, #0]
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	d00e      	beq.n	80202f6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80202d8:	68bb      	ldr	r3, [r7, #8]
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	68f9      	ldr	r1, [r7, #12]
 80202de:	4618      	mov	r0, r3
 80202e0:	f001 f924 	bl	802152c <ip4_addr_isbroadcast_u32>
 80202e4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	d105      	bne.n	80202f6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80202ea:	68bb      	ldr	r3, [r7, #8]
 80202ec:	681b      	ldr	r3, [r3, #0]
 80202ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80202f2:	2be0      	cmp	r3, #224	; 0xe0
 80202f4:	d102      	bne.n	80202fc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80202f6:	f06f 030f 	mvn.w	r3, #15
 80202fa:	e06c      	b.n	80203d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80202fc:	78fb      	ldrb	r3, [r7, #3]
 80202fe:	68fa      	ldr	r2, [r7, #12]
 8020300:	4619      	mov	r1, r3
 8020302:	68b8      	ldr	r0, [r7, #8]
 8020304:	f7ff fe56 	bl	801ffb4 <etharp_find_entry>
 8020308:	4603      	mov	r3, r0
 802030a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 802030c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020310:	2b00      	cmp	r3, #0
 8020312:	da02      	bge.n	802031a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8020314:	8afb      	ldrh	r3, [r7, #22]
 8020316:	b25b      	sxtb	r3, r3
 8020318:	e05d      	b.n	80203d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802031a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802031e:	4933      	ldr	r1, [pc, #204]	; (80203ec <etharp_update_arp_entry+0x148>)
 8020320:	4613      	mov	r3, r2
 8020322:	005b      	lsls	r3, r3, #1
 8020324:	4413      	add	r3, r2
 8020326:	00db      	lsls	r3, r3, #3
 8020328:	440b      	add	r3, r1
 802032a:	3314      	adds	r3, #20
 802032c:	2202      	movs	r2, #2
 802032e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020330:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020334:	492d      	ldr	r1, [pc, #180]	; (80203ec <etharp_update_arp_entry+0x148>)
 8020336:	4613      	mov	r3, r2
 8020338:	005b      	lsls	r3, r3, #1
 802033a:	4413      	add	r3, r2
 802033c:	00db      	lsls	r3, r3, #3
 802033e:	440b      	add	r3, r1
 8020340:	3308      	adds	r3, #8
 8020342:	68fa      	ldr	r2, [r7, #12]
 8020344:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8020346:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802034a:	4613      	mov	r3, r2
 802034c:	005b      	lsls	r3, r3, #1
 802034e:	4413      	add	r3, r2
 8020350:	00db      	lsls	r3, r3, #3
 8020352:	3308      	adds	r3, #8
 8020354:	4a25      	ldr	r2, [pc, #148]	; (80203ec <etharp_update_arp_entry+0x148>)
 8020356:	4413      	add	r3, r2
 8020358:	3304      	adds	r3, #4
 802035a:	2206      	movs	r2, #6
 802035c:	6879      	ldr	r1, [r7, #4]
 802035e:	4618      	mov	r0, r3
 8020360:	f002 febb 	bl	80230da <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8020364:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020368:	4920      	ldr	r1, [pc, #128]	; (80203ec <etharp_update_arp_entry+0x148>)
 802036a:	4613      	mov	r3, r2
 802036c:	005b      	lsls	r3, r3, #1
 802036e:	4413      	add	r3, r2
 8020370:	00db      	lsls	r3, r3, #3
 8020372:	440b      	add	r3, r1
 8020374:	3312      	adds	r3, #18
 8020376:	2200      	movs	r2, #0
 8020378:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 802037a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802037e:	491b      	ldr	r1, [pc, #108]	; (80203ec <etharp_update_arp_entry+0x148>)
 8020380:	4613      	mov	r3, r2
 8020382:	005b      	lsls	r3, r3, #1
 8020384:	4413      	add	r3, r2
 8020386:	00db      	lsls	r3, r3, #3
 8020388:	440b      	add	r3, r1
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	2b00      	cmp	r3, #0
 802038e:	d021      	beq.n	80203d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8020390:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020394:	4915      	ldr	r1, [pc, #84]	; (80203ec <etharp_update_arp_entry+0x148>)
 8020396:	4613      	mov	r3, r2
 8020398:	005b      	lsls	r3, r3, #1
 802039a:	4413      	add	r3, r2
 802039c:	00db      	lsls	r3, r3, #3
 802039e:	440b      	add	r3, r1
 80203a0:	681b      	ldr	r3, [r3, #0]
 80203a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80203a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80203a8:	4910      	ldr	r1, [pc, #64]	; (80203ec <etharp_update_arp_entry+0x148>)
 80203aa:	4613      	mov	r3, r2
 80203ac:	005b      	lsls	r3, r3, #1
 80203ae:	4413      	add	r3, r2
 80203b0:	00db      	lsls	r3, r3, #3
 80203b2:	440b      	add	r3, r1
 80203b4:	2200      	movs	r2, #0
 80203b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80203be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80203c2:	9300      	str	r3, [sp, #0]
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	6939      	ldr	r1, [r7, #16]
 80203c8:	68f8      	ldr	r0, [r7, #12]
 80203ca:	f001 ffbd 	bl	8022348 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80203ce:	6938      	ldr	r0, [r7, #16]
 80203d0:	f7f8 fbf6 	bl	8018bc0 <pbuf_free>
  }
  return ERR_OK;
 80203d4:	2300      	movs	r3, #0
}
 80203d6:	4618      	mov	r0, r3
 80203d8:	3718      	adds	r7, #24
 80203da:	46bd      	mov	sp, r7
 80203dc:	bd80      	pop	{r7, pc}
 80203de:	bf00      	nop
 80203e0:	080271a8 	.word	0x080271a8
 80203e4:	080272a0 	.word	0x080272a0
 80203e8:	08027220 	.word	0x08027220
 80203ec:	20061cf4 	.word	0x20061cf4

080203f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80203f0:	b580      	push	{r7, lr}
 80203f2:	b084      	sub	sp, #16
 80203f4:	af00      	add	r7, sp, #0
 80203f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80203f8:	2300      	movs	r3, #0
 80203fa:	60fb      	str	r3, [r7, #12]
 80203fc:	e01e      	b.n	802043c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80203fe:	4913      	ldr	r1, [pc, #76]	; (802044c <etharp_cleanup_netif+0x5c>)
 8020400:	68fa      	ldr	r2, [r7, #12]
 8020402:	4613      	mov	r3, r2
 8020404:	005b      	lsls	r3, r3, #1
 8020406:	4413      	add	r3, r2
 8020408:	00db      	lsls	r3, r3, #3
 802040a:	440b      	add	r3, r1
 802040c:	3314      	adds	r3, #20
 802040e:	781b      	ldrb	r3, [r3, #0]
 8020410:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8020412:	7afb      	ldrb	r3, [r7, #11]
 8020414:	2b00      	cmp	r3, #0
 8020416:	d00e      	beq.n	8020436 <etharp_cleanup_netif+0x46>
 8020418:	490c      	ldr	r1, [pc, #48]	; (802044c <etharp_cleanup_netif+0x5c>)
 802041a:	68fa      	ldr	r2, [r7, #12]
 802041c:	4613      	mov	r3, r2
 802041e:	005b      	lsls	r3, r3, #1
 8020420:	4413      	add	r3, r2
 8020422:	00db      	lsls	r3, r3, #3
 8020424:	440b      	add	r3, r1
 8020426:	3308      	adds	r3, #8
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	687a      	ldr	r2, [r7, #4]
 802042c:	429a      	cmp	r2, r3
 802042e:	d102      	bne.n	8020436 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020430:	68f8      	ldr	r0, [r7, #12]
 8020432:	f7ff fce5 	bl	801fe00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020436:	68fb      	ldr	r3, [r7, #12]
 8020438:	3301      	adds	r3, #1
 802043a:	60fb      	str	r3, [r7, #12]
 802043c:	68fb      	ldr	r3, [r7, #12]
 802043e:	2b09      	cmp	r3, #9
 8020440:	dddd      	ble.n	80203fe <etharp_cleanup_netif+0xe>
    }
  }
}
 8020442:	bf00      	nop
 8020444:	bf00      	nop
 8020446:	3710      	adds	r7, #16
 8020448:	46bd      	mov	sp, r7
 802044a:	bd80      	pop	{r7, pc}
 802044c:	20061cf4 	.word	0x20061cf4

08020450 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020450:	b5b0      	push	{r4, r5, r7, lr}
 8020452:	b08a      	sub	sp, #40	; 0x28
 8020454:	af04      	add	r7, sp, #16
 8020456:	6078      	str	r0, [r7, #4]
 8020458:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802045a:	683b      	ldr	r3, [r7, #0]
 802045c:	2b00      	cmp	r3, #0
 802045e:	d107      	bne.n	8020470 <etharp_input+0x20>
 8020460:	4b3d      	ldr	r3, [pc, #244]	; (8020558 <etharp_input+0x108>)
 8020462:	f240 228a 	movw	r2, #650	; 0x28a
 8020466:	493d      	ldr	r1, [pc, #244]	; (802055c <etharp_input+0x10c>)
 8020468:	483d      	ldr	r0, [pc, #244]	; (8020560 <etharp_input+0x110>)
 802046a:	f002 fcc5 	bl	8022df8 <iprintf>
 802046e:	e06f      	b.n	8020550 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	685b      	ldr	r3, [r3, #4]
 8020474:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020476:	693b      	ldr	r3, [r7, #16]
 8020478:	881b      	ldrh	r3, [r3, #0]
 802047a:	b29b      	uxth	r3, r3
 802047c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020480:	d10c      	bne.n	802049c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020482:	693b      	ldr	r3, [r7, #16]
 8020484:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020486:	2b06      	cmp	r3, #6
 8020488:	d108      	bne.n	802049c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802048a:	693b      	ldr	r3, [r7, #16]
 802048c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802048e:	2b04      	cmp	r3, #4
 8020490:	d104      	bne.n	802049c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8020492:	693b      	ldr	r3, [r7, #16]
 8020494:	885b      	ldrh	r3, [r3, #2]
 8020496:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020498:	2b08      	cmp	r3, #8
 802049a:	d003      	beq.n	80204a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 802049c:	6878      	ldr	r0, [r7, #4]
 802049e:	f7f8 fb8f 	bl	8018bc0 <pbuf_free>
    return;
 80204a2:	e055      	b.n	8020550 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80204a4:	693b      	ldr	r3, [r7, #16]
 80204a6:	330e      	adds	r3, #14
 80204a8:	681b      	ldr	r3, [r3, #0]
 80204aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80204ac:	693b      	ldr	r3, [r7, #16]
 80204ae:	3318      	adds	r3, #24
 80204b0:	681b      	ldr	r3, [r3, #0]
 80204b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80204b4:	683b      	ldr	r3, [r7, #0]
 80204b6:	3304      	adds	r3, #4
 80204b8:	681b      	ldr	r3, [r3, #0]
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	d102      	bne.n	80204c4 <etharp_input+0x74>
    for_us = 0;
 80204be:	2300      	movs	r3, #0
 80204c0:	75fb      	strb	r3, [r7, #23]
 80204c2:	e009      	b.n	80204d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80204c4:	68ba      	ldr	r2, [r7, #8]
 80204c6:	683b      	ldr	r3, [r7, #0]
 80204c8:	3304      	adds	r3, #4
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	429a      	cmp	r2, r3
 80204ce:	bf0c      	ite	eq
 80204d0:	2301      	moveq	r3, #1
 80204d2:	2300      	movne	r3, #0
 80204d4:	b2db      	uxtb	r3, r3
 80204d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80204d8:	693b      	ldr	r3, [r7, #16]
 80204da:	f103 0208 	add.w	r2, r3, #8
 80204de:	7dfb      	ldrb	r3, [r7, #23]
 80204e0:	2b00      	cmp	r3, #0
 80204e2:	d001      	beq.n	80204e8 <etharp_input+0x98>
 80204e4:	2301      	movs	r3, #1
 80204e6:	e000      	b.n	80204ea <etharp_input+0x9a>
 80204e8:	2302      	movs	r3, #2
 80204ea:	f107 010c 	add.w	r1, r7, #12
 80204ee:	6838      	ldr	r0, [r7, #0]
 80204f0:	f7ff fed8 	bl	80202a4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80204f4:	693b      	ldr	r3, [r7, #16]
 80204f6:	88db      	ldrh	r3, [r3, #6]
 80204f8:	b29b      	uxth	r3, r3
 80204fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80204fe:	d003      	beq.n	8020508 <etharp_input+0xb8>
 8020500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020504:	d01e      	beq.n	8020544 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8020506:	e020      	b.n	802054a <etharp_input+0xfa>
      if (for_us) {
 8020508:	7dfb      	ldrb	r3, [r7, #23]
 802050a:	2b00      	cmp	r3, #0
 802050c:	d01c      	beq.n	8020548 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802050e:	683b      	ldr	r3, [r7, #0]
 8020510:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020514:	693b      	ldr	r3, [r7, #16]
 8020516:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802051a:	683b      	ldr	r3, [r7, #0]
 802051c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8020520:	683b      	ldr	r3, [r7, #0]
 8020522:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020524:	693a      	ldr	r2, [r7, #16]
 8020526:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020528:	2102      	movs	r1, #2
 802052a:	9103      	str	r1, [sp, #12]
 802052c:	f107 010c 	add.w	r1, r7, #12
 8020530:	9102      	str	r1, [sp, #8]
 8020532:	9201      	str	r2, [sp, #4]
 8020534:	9300      	str	r3, [sp, #0]
 8020536:	462b      	mov	r3, r5
 8020538:	4622      	mov	r2, r4
 802053a:	4601      	mov	r1, r0
 802053c:	6838      	ldr	r0, [r7, #0]
 802053e:	f000 faeb 	bl	8020b18 <etharp_raw>
      break;
 8020542:	e001      	b.n	8020548 <etharp_input+0xf8>
      break;
 8020544:	bf00      	nop
 8020546:	e000      	b.n	802054a <etharp_input+0xfa>
      break;
 8020548:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802054a:	6878      	ldr	r0, [r7, #4]
 802054c:	f7f8 fb38 	bl	8018bc0 <pbuf_free>
}
 8020550:	3718      	adds	r7, #24
 8020552:	46bd      	mov	sp, r7
 8020554:	bdb0      	pop	{r4, r5, r7, pc}
 8020556:	bf00      	nop
 8020558:	080271a8 	.word	0x080271a8
 802055c:	080272f8 	.word	0x080272f8
 8020560:	08027220 	.word	0x08027220

08020564 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020564:	b580      	push	{r7, lr}
 8020566:	b086      	sub	sp, #24
 8020568:	af02      	add	r7, sp, #8
 802056a:	60f8      	str	r0, [r7, #12]
 802056c:	60b9      	str	r1, [r7, #8]
 802056e:	4613      	mov	r3, r2
 8020570:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8020572:	79fa      	ldrb	r2, [r7, #7]
 8020574:	4944      	ldr	r1, [pc, #272]	; (8020688 <etharp_output_to_arp_index+0x124>)
 8020576:	4613      	mov	r3, r2
 8020578:	005b      	lsls	r3, r3, #1
 802057a:	4413      	add	r3, r2
 802057c:	00db      	lsls	r3, r3, #3
 802057e:	440b      	add	r3, r1
 8020580:	3314      	adds	r3, #20
 8020582:	781b      	ldrb	r3, [r3, #0]
 8020584:	2b01      	cmp	r3, #1
 8020586:	d806      	bhi.n	8020596 <etharp_output_to_arp_index+0x32>
 8020588:	4b40      	ldr	r3, [pc, #256]	; (802068c <etharp_output_to_arp_index+0x128>)
 802058a:	f240 22ee 	movw	r2, #750	; 0x2ee
 802058e:	4940      	ldr	r1, [pc, #256]	; (8020690 <etharp_output_to_arp_index+0x12c>)
 8020590:	4840      	ldr	r0, [pc, #256]	; (8020694 <etharp_output_to_arp_index+0x130>)
 8020592:	f002 fc31 	bl	8022df8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8020596:	79fa      	ldrb	r2, [r7, #7]
 8020598:	493b      	ldr	r1, [pc, #236]	; (8020688 <etharp_output_to_arp_index+0x124>)
 802059a:	4613      	mov	r3, r2
 802059c:	005b      	lsls	r3, r3, #1
 802059e:	4413      	add	r3, r2
 80205a0:	00db      	lsls	r3, r3, #3
 80205a2:	440b      	add	r3, r1
 80205a4:	3314      	adds	r3, #20
 80205a6:	781b      	ldrb	r3, [r3, #0]
 80205a8:	2b02      	cmp	r3, #2
 80205aa:	d153      	bne.n	8020654 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80205ac:	79fa      	ldrb	r2, [r7, #7]
 80205ae:	4936      	ldr	r1, [pc, #216]	; (8020688 <etharp_output_to_arp_index+0x124>)
 80205b0:	4613      	mov	r3, r2
 80205b2:	005b      	lsls	r3, r3, #1
 80205b4:	4413      	add	r3, r2
 80205b6:	00db      	lsls	r3, r3, #3
 80205b8:	440b      	add	r3, r1
 80205ba:	3312      	adds	r3, #18
 80205bc:	881b      	ldrh	r3, [r3, #0]
 80205be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80205c2:	d919      	bls.n	80205f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80205c4:	79fa      	ldrb	r2, [r7, #7]
 80205c6:	4613      	mov	r3, r2
 80205c8:	005b      	lsls	r3, r3, #1
 80205ca:	4413      	add	r3, r2
 80205cc:	00db      	lsls	r3, r3, #3
 80205ce:	4a2e      	ldr	r2, [pc, #184]	; (8020688 <etharp_output_to_arp_index+0x124>)
 80205d0:	4413      	add	r3, r2
 80205d2:	3304      	adds	r3, #4
 80205d4:	4619      	mov	r1, r3
 80205d6:	68f8      	ldr	r0, [r7, #12]
 80205d8:	f000 fb4c 	bl	8020c74 <etharp_request>
 80205dc:	4603      	mov	r3, r0
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d138      	bne.n	8020654 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80205e2:	79fa      	ldrb	r2, [r7, #7]
 80205e4:	4928      	ldr	r1, [pc, #160]	; (8020688 <etharp_output_to_arp_index+0x124>)
 80205e6:	4613      	mov	r3, r2
 80205e8:	005b      	lsls	r3, r3, #1
 80205ea:	4413      	add	r3, r2
 80205ec:	00db      	lsls	r3, r3, #3
 80205ee:	440b      	add	r3, r1
 80205f0:	3314      	adds	r3, #20
 80205f2:	2203      	movs	r2, #3
 80205f4:	701a      	strb	r2, [r3, #0]
 80205f6:	e02d      	b.n	8020654 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80205f8:	79fa      	ldrb	r2, [r7, #7]
 80205fa:	4923      	ldr	r1, [pc, #140]	; (8020688 <etharp_output_to_arp_index+0x124>)
 80205fc:	4613      	mov	r3, r2
 80205fe:	005b      	lsls	r3, r3, #1
 8020600:	4413      	add	r3, r2
 8020602:	00db      	lsls	r3, r3, #3
 8020604:	440b      	add	r3, r1
 8020606:	3312      	adds	r3, #18
 8020608:	881b      	ldrh	r3, [r3, #0]
 802060a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802060e:	d321      	bcc.n	8020654 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020610:	79fa      	ldrb	r2, [r7, #7]
 8020612:	4613      	mov	r3, r2
 8020614:	005b      	lsls	r3, r3, #1
 8020616:	4413      	add	r3, r2
 8020618:	00db      	lsls	r3, r3, #3
 802061a:	4a1b      	ldr	r2, [pc, #108]	; (8020688 <etharp_output_to_arp_index+0x124>)
 802061c:	4413      	add	r3, r2
 802061e:	1d19      	adds	r1, r3, #4
 8020620:	79fa      	ldrb	r2, [r7, #7]
 8020622:	4613      	mov	r3, r2
 8020624:	005b      	lsls	r3, r3, #1
 8020626:	4413      	add	r3, r2
 8020628:	00db      	lsls	r3, r3, #3
 802062a:	3308      	adds	r3, #8
 802062c:	4a16      	ldr	r2, [pc, #88]	; (8020688 <etharp_output_to_arp_index+0x124>)
 802062e:	4413      	add	r3, r2
 8020630:	3304      	adds	r3, #4
 8020632:	461a      	mov	r2, r3
 8020634:	68f8      	ldr	r0, [r7, #12]
 8020636:	f000 fafb 	bl	8020c30 <etharp_request_dst>
 802063a:	4603      	mov	r3, r0
 802063c:	2b00      	cmp	r3, #0
 802063e:	d109      	bne.n	8020654 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020640:	79fa      	ldrb	r2, [r7, #7]
 8020642:	4911      	ldr	r1, [pc, #68]	; (8020688 <etharp_output_to_arp_index+0x124>)
 8020644:	4613      	mov	r3, r2
 8020646:	005b      	lsls	r3, r3, #1
 8020648:	4413      	add	r3, r2
 802064a:	00db      	lsls	r3, r3, #3
 802064c:	440b      	add	r3, r1
 802064e:	3314      	adds	r3, #20
 8020650:	2203      	movs	r2, #3
 8020652:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020654:	68fb      	ldr	r3, [r7, #12]
 8020656:	f103 0126 	add.w	r1, r3, #38	; 0x26
 802065a:	79fa      	ldrb	r2, [r7, #7]
 802065c:	4613      	mov	r3, r2
 802065e:	005b      	lsls	r3, r3, #1
 8020660:	4413      	add	r3, r2
 8020662:	00db      	lsls	r3, r3, #3
 8020664:	3308      	adds	r3, #8
 8020666:	4a08      	ldr	r2, [pc, #32]	; (8020688 <etharp_output_to_arp_index+0x124>)
 8020668:	4413      	add	r3, r2
 802066a:	3304      	adds	r3, #4
 802066c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020670:	9200      	str	r2, [sp, #0]
 8020672:	460a      	mov	r2, r1
 8020674:	68b9      	ldr	r1, [r7, #8]
 8020676:	68f8      	ldr	r0, [r7, #12]
 8020678:	f001 fe66 	bl	8022348 <ethernet_output>
 802067c:	4603      	mov	r3, r0
}
 802067e:	4618      	mov	r0, r3
 8020680:	3710      	adds	r7, #16
 8020682:	46bd      	mov	sp, r7
 8020684:	bd80      	pop	{r7, pc}
 8020686:	bf00      	nop
 8020688:	20061cf4 	.word	0x20061cf4
 802068c:	080271a8 	.word	0x080271a8
 8020690:	08027318 	.word	0x08027318
 8020694:	08027220 	.word	0x08027220

08020698 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8020698:	b580      	push	{r7, lr}
 802069a:	b08a      	sub	sp, #40	; 0x28
 802069c:	af02      	add	r7, sp, #8
 802069e:	60f8      	str	r0, [r7, #12]
 80206a0:	60b9      	str	r1, [r7, #8]
 80206a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80206a8:	68fb      	ldr	r3, [r7, #12]
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d106      	bne.n	80206bc <etharp_output+0x24>
 80206ae:	4b73      	ldr	r3, [pc, #460]	; (802087c <etharp_output+0x1e4>)
 80206b0:	f240 321e 	movw	r2, #798	; 0x31e
 80206b4:	4972      	ldr	r1, [pc, #456]	; (8020880 <etharp_output+0x1e8>)
 80206b6:	4873      	ldr	r0, [pc, #460]	; (8020884 <etharp_output+0x1ec>)
 80206b8:	f002 fb9e 	bl	8022df8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80206bc:	68bb      	ldr	r3, [r7, #8]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d106      	bne.n	80206d0 <etharp_output+0x38>
 80206c2:	4b6e      	ldr	r3, [pc, #440]	; (802087c <etharp_output+0x1e4>)
 80206c4:	f240 321f 	movw	r2, #799	; 0x31f
 80206c8:	496f      	ldr	r1, [pc, #444]	; (8020888 <etharp_output+0x1f0>)
 80206ca:	486e      	ldr	r0, [pc, #440]	; (8020884 <etharp_output+0x1ec>)
 80206cc:	f002 fb94 	bl	8022df8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d106      	bne.n	80206e4 <etharp_output+0x4c>
 80206d6:	4b69      	ldr	r3, [pc, #420]	; (802087c <etharp_output+0x1e4>)
 80206d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80206dc:	496b      	ldr	r1, [pc, #428]	; (802088c <etharp_output+0x1f4>)
 80206de:	4869      	ldr	r0, [pc, #420]	; (8020884 <etharp_output+0x1ec>)
 80206e0:	f002 fb8a 	bl	8022df8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	68f9      	ldr	r1, [r7, #12]
 80206ea:	4618      	mov	r0, r3
 80206ec:	f000 ff1e 	bl	802152c <ip4_addr_isbroadcast_u32>
 80206f0:	4603      	mov	r3, r0
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d002      	beq.n	80206fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80206f6:	4b66      	ldr	r3, [pc, #408]	; (8020890 <etharp_output+0x1f8>)
 80206f8:	61fb      	str	r3, [r7, #28]
 80206fa:	e0af      	b.n	802085c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020704:	2be0      	cmp	r3, #224	; 0xe0
 8020706:	d118      	bne.n	802073a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020708:	2301      	movs	r3, #1
 802070a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802070c:	2300      	movs	r3, #0
 802070e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020710:	235e      	movs	r3, #94	; 0x5e
 8020712:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	3301      	adds	r3, #1
 8020718:	781b      	ldrb	r3, [r3, #0]
 802071a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802071e:	b2db      	uxtb	r3, r3
 8020720:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	3302      	adds	r3, #2
 8020726:	781b      	ldrb	r3, [r3, #0]
 8020728:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	3303      	adds	r3, #3
 802072e:	781b      	ldrb	r3, [r3, #0]
 8020730:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020732:	f107 0310 	add.w	r3, r7, #16
 8020736:	61fb      	str	r3, [r7, #28]
 8020738:	e090      	b.n	802085c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	681a      	ldr	r2, [r3, #0]
 802073e:	68fb      	ldr	r3, [r7, #12]
 8020740:	3304      	adds	r3, #4
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	405a      	eors	r2, r3
 8020746:	68fb      	ldr	r3, [r7, #12]
 8020748:	3308      	adds	r3, #8
 802074a:	681b      	ldr	r3, [r3, #0]
 802074c:	4013      	ands	r3, r2
 802074e:	2b00      	cmp	r3, #0
 8020750:	d012      	beq.n	8020778 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020758:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 802075c:	4293      	cmp	r3, r2
 802075e:	d00b      	beq.n	8020778 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020760:	68fb      	ldr	r3, [r7, #12]
 8020762:	330c      	adds	r3, #12
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	2b00      	cmp	r3, #0
 8020768:	d003      	beq.n	8020772 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 802076a:	68fb      	ldr	r3, [r7, #12]
 802076c:	330c      	adds	r3, #12
 802076e:	61bb      	str	r3, [r7, #24]
 8020770:	e002      	b.n	8020778 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8020772:	f06f 0303 	mvn.w	r3, #3
 8020776:	e07d      	b.n	8020874 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020778:	4b46      	ldr	r3, [pc, #280]	; (8020894 <etharp_output+0x1fc>)
 802077a:	781b      	ldrb	r3, [r3, #0]
 802077c:	4619      	mov	r1, r3
 802077e:	4a46      	ldr	r2, [pc, #280]	; (8020898 <etharp_output+0x200>)
 8020780:	460b      	mov	r3, r1
 8020782:	005b      	lsls	r3, r3, #1
 8020784:	440b      	add	r3, r1
 8020786:	00db      	lsls	r3, r3, #3
 8020788:	4413      	add	r3, r2
 802078a:	3314      	adds	r3, #20
 802078c:	781b      	ldrb	r3, [r3, #0]
 802078e:	2b01      	cmp	r3, #1
 8020790:	d925      	bls.n	80207de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020792:	4b40      	ldr	r3, [pc, #256]	; (8020894 <etharp_output+0x1fc>)
 8020794:	781b      	ldrb	r3, [r3, #0]
 8020796:	4619      	mov	r1, r3
 8020798:	4a3f      	ldr	r2, [pc, #252]	; (8020898 <etharp_output+0x200>)
 802079a:	460b      	mov	r3, r1
 802079c:	005b      	lsls	r3, r3, #1
 802079e:	440b      	add	r3, r1
 80207a0:	00db      	lsls	r3, r3, #3
 80207a2:	4413      	add	r3, r2
 80207a4:	3308      	adds	r3, #8
 80207a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	429a      	cmp	r2, r3
 80207ac:	d117      	bne.n	80207de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80207ae:	69bb      	ldr	r3, [r7, #24]
 80207b0:	681a      	ldr	r2, [r3, #0]
 80207b2:	4b38      	ldr	r3, [pc, #224]	; (8020894 <etharp_output+0x1fc>)
 80207b4:	781b      	ldrb	r3, [r3, #0]
 80207b6:	4618      	mov	r0, r3
 80207b8:	4937      	ldr	r1, [pc, #220]	; (8020898 <etharp_output+0x200>)
 80207ba:	4603      	mov	r3, r0
 80207bc:	005b      	lsls	r3, r3, #1
 80207be:	4403      	add	r3, r0
 80207c0:	00db      	lsls	r3, r3, #3
 80207c2:	440b      	add	r3, r1
 80207c4:	3304      	adds	r3, #4
 80207c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80207c8:	429a      	cmp	r2, r3
 80207ca:	d108      	bne.n	80207de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80207cc:	4b31      	ldr	r3, [pc, #196]	; (8020894 <etharp_output+0x1fc>)
 80207ce:	781b      	ldrb	r3, [r3, #0]
 80207d0:	461a      	mov	r2, r3
 80207d2:	68b9      	ldr	r1, [r7, #8]
 80207d4:	68f8      	ldr	r0, [r7, #12]
 80207d6:	f7ff fec5 	bl	8020564 <etharp_output_to_arp_index>
 80207da:	4603      	mov	r3, r0
 80207dc:	e04a      	b.n	8020874 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80207de:	2300      	movs	r3, #0
 80207e0:	75fb      	strb	r3, [r7, #23]
 80207e2:	e031      	b.n	8020848 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80207e4:	7dfa      	ldrb	r2, [r7, #23]
 80207e6:	492c      	ldr	r1, [pc, #176]	; (8020898 <etharp_output+0x200>)
 80207e8:	4613      	mov	r3, r2
 80207ea:	005b      	lsls	r3, r3, #1
 80207ec:	4413      	add	r3, r2
 80207ee:	00db      	lsls	r3, r3, #3
 80207f0:	440b      	add	r3, r1
 80207f2:	3314      	adds	r3, #20
 80207f4:	781b      	ldrb	r3, [r3, #0]
 80207f6:	2b01      	cmp	r3, #1
 80207f8:	d923      	bls.n	8020842 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80207fa:	7dfa      	ldrb	r2, [r7, #23]
 80207fc:	4926      	ldr	r1, [pc, #152]	; (8020898 <etharp_output+0x200>)
 80207fe:	4613      	mov	r3, r2
 8020800:	005b      	lsls	r3, r3, #1
 8020802:	4413      	add	r3, r2
 8020804:	00db      	lsls	r3, r3, #3
 8020806:	440b      	add	r3, r1
 8020808:	3308      	adds	r3, #8
 802080a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802080c:	68fa      	ldr	r2, [r7, #12]
 802080e:	429a      	cmp	r2, r3
 8020810:	d117      	bne.n	8020842 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020812:	69bb      	ldr	r3, [r7, #24]
 8020814:	6819      	ldr	r1, [r3, #0]
 8020816:	7dfa      	ldrb	r2, [r7, #23]
 8020818:	481f      	ldr	r0, [pc, #124]	; (8020898 <etharp_output+0x200>)
 802081a:	4613      	mov	r3, r2
 802081c:	005b      	lsls	r3, r3, #1
 802081e:	4413      	add	r3, r2
 8020820:	00db      	lsls	r3, r3, #3
 8020822:	4403      	add	r3, r0
 8020824:	3304      	adds	r3, #4
 8020826:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020828:	4299      	cmp	r1, r3
 802082a:	d10a      	bne.n	8020842 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 802082c:	4a19      	ldr	r2, [pc, #100]	; (8020894 <etharp_output+0x1fc>)
 802082e:	7dfb      	ldrb	r3, [r7, #23]
 8020830:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020832:	7dfb      	ldrb	r3, [r7, #23]
 8020834:	461a      	mov	r2, r3
 8020836:	68b9      	ldr	r1, [r7, #8]
 8020838:	68f8      	ldr	r0, [r7, #12]
 802083a:	f7ff fe93 	bl	8020564 <etharp_output_to_arp_index>
 802083e:	4603      	mov	r3, r0
 8020840:	e018      	b.n	8020874 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020842:	7dfb      	ldrb	r3, [r7, #23]
 8020844:	3301      	adds	r3, #1
 8020846:	75fb      	strb	r3, [r7, #23]
 8020848:	7dfb      	ldrb	r3, [r7, #23]
 802084a:	2b09      	cmp	r3, #9
 802084c:	d9ca      	bls.n	80207e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 802084e:	68ba      	ldr	r2, [r7, #8]
 8020850:	69b9      	ldr	r1, [r7, #24]
 8020852:	68f8      	ldr	r0, [r7, #12]
 8020854:	f000 f822 	bl	802089c <etharp_query>
 8020858:	4603      	mov	r3, r0
 802085a:	e00b      	b.n	8020874 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 802085c:	68fb      	ldr	r3, [r7, #12]
 802085e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020866:	9300      	str	r3, [sp, #0]
 8020868:	69fb      	ldr	r3, [r7, #28]
 802086a:	68b9      	ldr	r1, [r7, #8]
 802086c:	68f8      	ldr	r0, [r7, #12]
 802086e:	f001 fd6b 	bl	8022348 <ethernet_output>
 8020872:	4603      	mov	r3, r0
}
 8020874:	4618      	mov	r0, r3
 8020876:	3720      	adds	r7, #32
 8020878:	46bd      	mov	sp, r7
 802087a:	bd80      	pop	{r7, pc}
 802087c:	080271a8 	.word	0x080271a8
 8020880:	080272f8 	.word	0x080272f8
 8020884:	08027220 	.word	0x08027220
 8020888:	08027348 	.word	0x08027348
 802088c:	080272e8 	.word	0x080272e8
 8020890:	08027bb4 	.word	0x08027bb4
 8020894:	20061de4 	.word	0x20061de4
 8020898:	20061cf4 	.word	0x20061cf4

0802089c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	b08c      	sub	sp, #48	; 0x30
 80208a0:	af02      	add	r7, sp, #8
 80208a2:	60f8      	str	r0, [r7, #12]
 80208a4:	60b9      	str	r1, [r7, #8]
 80208a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80208a8:	68fb      	ldr	r3, [r7, #12]
 80208aa:	3326      	adds	r3, #38	; 0x26
 80208ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80208ae:	23ff      	movs	r3, #255	; 0xff
 80208b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80208b4:	2300      	movs	r3, #0
 80208b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80208b8:	68bb      	ldr	r3, [r7, #8]
 80208ba:	681b      	ldr	r3, [r3, #0]
 80208bc:	68f9      	ldr	r1, [r7, #12]
 80208be:	4618      	mov	r0, r3
 80208c0:	f000 fe34 	bl	802152c <ip4_addr_isbroadcast_u32>
 80208c4:	4603      	mov	r3, r0
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d10c      	bne.n	80208e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80208ca:	68bb      	ldr	r3, [r7, #8]
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80208d2:	2be0      	cmp	r3, #224	; 0xe0
 80208d4:	d006      	beq.n	80208e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80208d6:	68bb      	ldr	r3, [r7, #8]
 80208d8:	2b00      	cmp	r3, #0
 80208da:	d003      	beq.n	80208e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80208dc:	68bb      	ldr	r3, [r7, #8]
 80208de:	681b      	ldr	r3, [r3, #0]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d102      	bne.n	80208ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80208e4:	f06f 030f 	mvn.w	r3, #15
 80208e8:	e101      	b.n	8020aee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80208ea:	68fa      	ldr	r2, [r7, #12]
 80208ec:	2101      	movs	r1, #1
 80208ee:	68b8      	ldr	r0, [r7, #8]
 80208f0:	f7ff fb60 	bl	801ffb4 <etharp_find_entry>
 80208f4:	4603      	mov	r3, r0
 80208f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80208f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	da02      	bge.n	8020906 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020900:	8a7b      	ldrh	r3, [r7, #18]
 8020902:	b25b      	sxtb	r3, r3
 8020904:	e0f3      	b.n	8020aee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020906:	8a7b      	ldrh	r3, [r7, #18]
 8020908:	2b7e      	cmp	r3, #126	; 0x7e
 802090a:	d906      	bls.n	802091a <etharp_query+0x7e>
 802090c:	4b7a      	ldr	r3, [pc, #488]	; (8020af8 <etharp_query+0x25c>)
 802090e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020912:	497a      	ldr	r1, [pc, #488]	; (8020afc <etharp_query+0x260>)
 8020914:	487a      	ldr	r0, [pc, #488]	; (8020b00 <etharp_query+0x264>)
 8020916:	f002 fa6f 	bl	8022df8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802091a:	8a7b      	ldrh	r3, [r7, #18]
 802091c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 802091e:	7c7a      	ldrb	r2, [r7, #17]
 8020920:	4978      	ldr	r1, [pc, #480]	; (8020b04 <etharp_query+0x268>)
 8020922:	4613      	mov	r3, r2
 8020924:	005b      	lsls	r3, r3, #1
 8020926:	4413      	add	r3, r2
 8020928:	00db      	lsls	r3, r3, #3
 802092a:	440b      	add	r3, r1
 802092c:	3314      	adds	r3, #20
 802092e:	781b      	ldrb	r3, [r3, #0]
 8020930:	2b00      	cmp	r3, #0
 8020932:	d115      	bne.n	8020960 <etharp_query+0xc4>
    is_new_entry = 1;
 8020934:	2301      	movs	r3, #1
 8020936:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020938:	7c7a      	ldrb	r2, [r7, #17]
 802093a:	4972      	ldr	r1, [pc, #456]	; (8020b04 <etharp_query+0x268>)
 802093c:	4613      	mov	r3, r2
 802093e:	005b      	lsls	r3, r3, #1
 8020940:	4413      	add	r3, r2
 8020942:	00db      	lsls	r3, r3, #3
 8020944:	440b      	add	r3, r1
 8020946:	3314      	adds	r3, #20
 8020948:	2201      	movs	r2, #1
 802094a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 802094c:	7c7a      	ldrb	r2, [r7, #17]
 802094e:	496d      	ldr	r1, [pc, #436]	; (8020b04 <etharp_query+0x268>)
 8020950:	4613      	mov	r3, r2
 8020952:	005b      	lsls	r3, r3, #1
 8020954:	4413      	add	r3, r2
 8020956:	00db      	lsls	r3, r3, #3
 8020958:	440b      	add	r3, r1
 802095a:	3308      	adds	r3, #8
 802095c:	68fa      	ldr	r2, [r7, #12]
 802095e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020960:	7c7a      	ldrb	r2, [r7, #17]
 8020962:	4968      	ldr	r1, [pc, #416]	; (8020b04 <etharp_query+0x268>)
 8020964:	4613      	mov	r3, r2
 8020966:	005b      	lsls	r3, r3, #1
 8020968:	4413      	add	r3, r2
 802096a:	00db      	lsls	r3, r3, #3
 802096c:	440b      	add	r3, r1
 802096e:	3314      	adds	r3, #20
 8020970:	781b      	ldrb	r3, [r3, #0]
 8020972:	2b01      	cmp	r3, #1
 8020974:	d011      	beq.n	802099a <etharp_query+0xfe>
 8020976:	7c7a      	ldrb	r2, [r7, #17]
 8020978:	4962      	ldr	r1, [pc, #392]	; (8020b04 <etharp_query+0x268>)
 802097a:	4613      	mov	r3, r2
 802097c:	005b      	lsls	r3, r3, #1
 802097e:	4413      	add	r3, r2
 8020980:	00db      	lsls	r3, r3, #3
 8020982:	440b      	add	r3, r1
 8020984:	3314      	adds	r3, #20
 8020986:	781b      	ldrb	r3, [r3, #0]
 8020988:	2b01      	cmp	r3, #1
 802098a:	d806      	bhi.n	802099a <etharp_query+0xfe>
 802098c:	4b5a      	ldr	r3, [pc, #360]	; (8020af8 <etharp_query+0x25c>)
 802098e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020992:	495d      	ldr	r1, [pc, #372]	; (8020b08 <etharp_query+0x26c>)
 8020994:	485a      	ldr	r0, [pc, #360]	; (8020b00 <etharp_query+0x264>)
 8020996:	f002 fa2f 	bl	8022df8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 802099a:	6a3b      	ldr	r3, [r7, #32]
 802099c:	2b00      	cmp	r3, #0
 802099e:	d102      	bne.n	80209a6 <etharp_query+0x10a>
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	d10c      	bne.n	80209c0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80209a6:	68b9      	ldr	r1, [r7, #8]
 80209a8:	68f8      	ldr	r0, [r7, #12]
 80209aa:	f000 f963 	bl	8020c74 <etharp_request>
 80209ae:	4603      	mov	r3, r0
 80209b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d102      	bne.n	80209c0 <etharp_query+0x124>
      return result;
 80209ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80209be:	e096      	b.n	8020aee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d106      	bne.n	80209d4 <etharp_query+0x138>
 80209c6:	4b4c      	ldr	r3, [pc, #304]	; (8020af8 <etharp_query+0x25c>)
 80209c8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80209cc:	494f      	ldr	r1, [pc, #316]	; (8020b0c <etharp_query+0x270>)
 80209ce:	484c      	ldr	r0, [pc, #304]	; (8020b00 <etharp_query+0x264>)
 80209d0:	f002 fa12 	bl	8022df8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80209d4:	7c7a      	ldrb	r2, [r7, #17]
 80209d6:	494b      	ldr	r1, [pc, #300]	; (8020b04 <etharp_query+0x268>)
 80209d8:	4613      	mov	r3, r2
 80209da:	005b      	lsls	r3, r3, #1
 80209dc:	4413      	add	r3, r2
 80209de:	00db      	lsls	r3, r3, #3
 80209e0:	440b      	add	r3, r1
 80209e2:	3314      	adds	r3, #20
 80209e4:	781b      	ldrb	r3, [r3, #0]
 80209e6:	2b01      	cmp	r3, #1
 80209e8:	d917      	bls.n	8020a1a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80209ea:	4a49      	ldr	r2, [pc, #292]	; (8020b10 <etharp_query+0x274>)
 80209ec:	7c7b      	ldrb	r3, [r7, #17]
 80209ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80209f0:	7c7a      	ldrb	r2, [r7, #17]
 80209f2:	4613      	mov	r3, r2
 80209f4:	005b      	lsls	r3, r3, #1
 80209f6:	4413      	add	r3, r2
 80209f8:	00db      	lsls	r3, r3, #3
 80209fa:	3308      	adds	r3, #8
 80209fc:	4a41      	ldr	r2, [pc, #260]	; (8020b04 <etharp_query+0x268>)
 80209fe:	4413      	add	r3, r2
 8020a00:	3304      	adds	r3, #4
 8020a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020a06:	9200      	str	r2, [sp, #0]
 8020a08:	697a      	ldr	r2, [r7, #20]
 8020a0a:	6879      	ldr	r1, [r7, #4]
 8020a0c:	68f8      	ldr	r0, [r7, #12]
 8020a0e:	f001 fc9b 	bl	8022348 <ethernet_output>
 8020a12:	4603      	mov	r3, r0
 8020a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020a18:	e067      	b.n	8020aea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020a1a:	7c7a      	ldrb	r2, [r7, #17]
 8020a1c:	4939      	ldr	r1, [pc, #228]	; (8020b04 <etharp_query+0x268>)
 8020a1e:	4613      	mov	r3, r2
 8020a20:	005b      	lsls	r3, r3, #1
 8020a22:	4413      	add	r3, r2
 8020a24:	00db      	lsls	r3, r3, #3
 8020a26:	440b      	add	r3, r1
 8020a28:	3314      	adds	r3, #20
 8020a2a:	781b      	ldrb	r3, [r3, #0]
 8020a2c:	2b01      	cmp	r3, #1
 8020a2e:	d15c      	bne.n	8020aea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020a30:	2300      	movs	r3, #0
 8020a32:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020a38:	e01c      	b.n	8020a74 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020a3a:	69fb      	ldr	r3, [r7, #28]
 8020a3c:	895a      	ldrh	r2, [r3, #10]
 8020a3e:	69fb      	ldr	r3, [r7, #28]
 8020a40:	891b      	ldrh	r3, [r3, #8]
 8020a42:	429a      	cmp	r2, r3
 8020a44:	d10a      	bne.n	8020a5c <etharp_query+0x1c0>
 8020a46:	69fb      	ldr	r3, [r7, #28]
 8020a48:	681b      	ldr	r3, [r3, #0]
 8020a4a:	2b00      	cmp	r3, #0
 8020a4c:	d006      	beq.n	8020a5c <etharp_query+0x1c0>
 8020a4e:	4b2a      	ldr	r3, [pc, #168]	; (8020af8 <etharp_query+0x25c>)
 8020a50:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020a54:	492f      	ldr	r1, [pc, #188]	; (8020b14 <etharp_query+0x278>)
 8020a56:	482a      	ldr	r0, [pc, #168]	; (8020b00 <etharp_query+0x264>)
 8020a58:	f002 f9ce 	bl	8022df8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020a5c:	69fb      	ldr	r3, [r7, #28]
 8020a5e:	7b1b      	ldrb	r3, [r3, #12]
 8020a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d002      	beq.n	8020a6e <etharp_query+0x1d2>
        copy_needed = 1;
 8020a68:	2301      	movs	r3, #1
 8020a6a:	61bb      	str	r3, [r7, #24]
        break;
 8020a6c:	e005      	b.n	8020a7a <etharp_query+0x1de>
      }
      p = p->next;
 8020a6e:	69fb      	ldr	r3, [r7, #28]
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020a74:	69fb      	ldr	r3, [r7, #28]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d1df      	bne.n	8020a3a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020a7a:	69bb      	ldr	r3, [r7, #24]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d007      	beq.n	8020a90 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020a80:	687a      	ldr	r2, [r7, #4]
 8020a82:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020a86:	200e      	movs	r0, #14
 8020a88:	f7f8 fb02 	bl	8019090 <pbuf_clone>
 8020a8c:	61f8      	str	r0, [r7, #28]
 8020a8e:	e004      	b.n	8020a9a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020a94:	69f8      	ldr	r0, [r7, #28]
 8020a96:	f7f8 f939 	bl	8018d0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020a9a:	69fb      	ldr	r3, [r7, #28]
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d021      	beq.n	8020ae4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020aa0:	7c7a      	ldrb	r2, [r7, #17]
 8020aa2:	4918      	ldr	r1, [pc, #96]	; (8020b04 <etharp_query+0x268>)
 8020aa4:	4613      	mov	r3, r2
 8020aa6:	005b      	lsls	r3, r3, #1
 8020aa8:	4413      	add	r3, r2
 8020aaa:	00db      	lsls	r3, r3, #3
 8020aac:	440b      	add	r3, r1
 8020aae:	681b      	ldr	r3, [r3, #0]
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	d00a      	beq.n	8020aca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020ab4:	7c7a      	ldrb	r2, [r7, #17]
 8020ab6:	4913      	ldr	r1, [pc, #76]	; (8020b04 <etharp_query+0x268>)
 8020ab8:	4613      	mov	r3, r2
 8020aba:	005b      	lsls	r3, r3, #1
 8020abc:	4413      	add	r3, r2
 8020abe:	00db      	lsls	r3, r3, #3
 8020ac0:	440b      	add	r3, r1
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	4618      	mov	r0, r3
 8020ac6:	f7f8 f87b 	bl	8018bc0 <pbuf_free>
      }
      arp_table[i].q = p;
 8020aca:	7c7a      	ldrb	r2, [r7, #17]
 8020acc:	490d      	ldr	r1, [pc, #52]	; (8020b04 <etharp_query+0x268>)
 8020ace:	4613      	mov	r3, r2
 8020ad0:	005b      	lsls	r3, r3, #1
 8020ad2:	4413      	add	r3, r2
 8020ad4:	00db      	lsls	r3, r3, #3
 8020ad6:	440b      	add	r3, r1
 8020ad8:	69fa      	ldr	r2, [r7, #28]
 8020ada:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020adc:	2300      	movs	r3, #0
 8020ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020ae2:	e002      	b.n	8020aea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020ae4:	23ff      	movs	r3, #255	; 0xff
 8020ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020aea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020aee:	4618      	mov	r0, r3
 8020af0:	3728      	adds	r7, #40	; 0x28
 8020af2:	46bd      	mov	sp, r7
 8020af4:	bd80      	pop	{r7, pc}
 8020af6:	bf00      	nop
 8020af8:	080271a8 	.word	0x080271a8
 8020afc:	08027354 	.word	0x08027354
 8020b00:	08027220 	.word	0x08027220
 8020b04:	20061cf4 	.word	0x20061cf4
 8020b08:	08027364 	.word	0x08027364
 8020b0c:	08027348 	.word	0x08027348
 8020b10:	20061de4 	.word	0x20061de4
 8020b14:	0802738c 	.word	0x0802738c

08020b18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020b18:	b580      	push	{r7, lr}
 8020b1a:	b08a      	sub	sp, #40	; 0x28
 8020b1c:	af02      	add	r7, sp, #8
 8020b1e:	60f8      	str	r0, [r7, #12]
 8020b20:	60b9      	str	r1, [r7, #8]
 8020b22:	607a      	str	r2, [r7, #4]
 8020b24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020b26:	2300      	movs	r3, #0
 8020b28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020b2a:	68fb      	ldr	r3, [r7, #12]
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	d106      	bne.n	8020b3e <etharp_raw+0x26>
 8020b30:	4b3a      	ldr	r3, [pc, #232]	; (8020c1c <etharp_raw+0x104>)
 8020b32:	f240 4257 	movw	r2, #1111	; 0x457
 8020b36:	493a      	ldr	r1, [pc, #232]	; (8020c20 <etharp_raw+0x108>)
 8020b38:	483a      	ldr	r0, [pc, #232]	; (8020c24 <etharp_raw+0x10c>)
 8020b3a:	f002 f95d 	bl	8022df8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020b3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020b42:	211c      	movs	r1, #28
 8020b44:	200e      	movs	r0, #14
 8020b46:	f7f7 fd57 	bl	80185f8 <pbuf_alloc>
 8020b4a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020b4c:	69bb      	ldr	r3, [r7, #24]
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	d102      	bne.n	8020b58 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020b52:	f04f 33ff 	mov.w	r3, #4294967295
 8020b56:	e05d      	b.n	8020c14 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020b58:	69bb      	ldr	r3, [r7, #24]
 8020b5a:	895b      	ldrh	r3, [r3, #10]
 8020b5c:	2b1b      	cmp	r3, #27
 8020b5e:	d806      	bhi.n	8020b6e <etharp_raw+0x56>
 8020b60:	4b2e      	ldr	r3, [pc, #184]	; (8020c1c <etharp_raw+0x104>)
 8020b62:	f240 4262 	movw	r2, #1122	; 0x462
 8020b66:	4930      	ldr	r1, [pc, #192]	; (8020c28 <etharp_raw+0x110>)
 8020b68:	482e      	ldr	r0, [pc, #184]	; (8020c24 <etharp_raw+0x10c>)
 8020b6a:	f002 f945 	bl	8022df8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020b6e:	69bb      	ldr	r3, [r7, #24]
 8020b70:	685b      	ldr	r3, [r3, #4]
 8020b72:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020b74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8020b76:	4618      	mov	r0, r3
 8020b78:	f7f6 fb78 	bl	801726c <lwip_htons>
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	461a      	mov	r2, r3
 8020b80:	697b      	ldr	r3, [r7, #20]
 8020b82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020b84:	68fb      	ldr	r3, [r7, #12]
 8020b86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020b8a:	2b06      	cmp	r3, #6
 8020b8c:	d006      	beq.n	8020b9c <etharp_raw+0x84>
 8020b8e:	4b23      	ldr	r3, [pc, #140]	; (8020c1c <etharp_raw+0x104>)
 8020b90:	f240 4269 	movw	r2, #1129	; 0x469
 8020b94:	4925      	ldr	r1, [pc, #148]	; (8020c2c <etharp_raw+0x114>)
 8020b96:	4823      	ldr	r0, [pc, #140]	; (8020c24 <etharp_raw+0x10c>)
 8020b98:	f002 f92e 	bl	8022df8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020b9c:	697b      	ldr	r3, [r7, #20]
 8020b9e:	3308      	adds	r3, #8
 8020ba0:	2206      	movs	r2, #6
 8020ba2:	6839      	ldr	r1, [r7, #0]
 8020ba4:	4618      	mov	r0, r3
 8020ba6:	f002 fa98 	bl	80230da <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020baa:	697b      	ldr	r3, [r7, #20]
 8020bac:	3312      	adds	r3, #18
 8020bae:	2206      	movs	r2, #6
 8020bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	f002 fa91 	bl	80230da <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020bb8:	697b      	ldr	r3, [r7, #20]
 8020bba:	330e      	adds	r3, #14
 8020bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020bbe:	6812      	ldr	r2, [r2, #0]
 8020bc0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	3318      	adds	r3, #24
 8020bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020bc8:	6812      	ldr	r2, [r2, #0]
 8020bca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020bcc:	697b      	ldr	r3, [r7, #20]
 8020bce:	2200      	movs	r2, #0
 8020bd0:	701a      	strb	r2, [r3, #0]
 8020bd2:	2200      	movs	r2, #0
 8020bd4:	f042 0201 	orr.w	r2, r2, #1
 8020bd8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020bda:	697b      	ldr	r3, [r7, #20]
 8020bdc:	2200      	movs	r2, #0
 8020bde:	f042 0208 	orr.w	r2, r2, #8
 8020be2:	709a      	strb	r2, [r3, #2]
 8020be4:	2200      	movs	r2, #0
 8020be6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020be8:	697b      	ldr	r3, [r7, #20]
 8020bea:	2206      	movs	r2, #6
 8020bec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020bee:	697b      	ldr	r3, [r7, #20]
 8020bf0:	2204      	movs	r2, #4
 8020bf2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020bf4:	f640 0306 	movw	r3, #2054	; 0x806
 8020bf8:	9300      	str	r3, [sp, #0]
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	68ba      	ldr	r2, [r7, #8]
 8020bfe:	69b9      	ldr	r1, [r7, #24]
 8020c00:	68f8      	ldr	r0, [r7, #12]
 8020c02:	f001 fba1 	bl	8022348 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020c06:	69b8      	ldr	r0, [r7, #24]
 8020c08:	f7f7 ffda 	bl	8018bc0 <pbuf_free>
  p = NULL;
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020c14:	4618      	mov	r0, r3
 8020c16:	3720      	adds	r7, #32
 8020c18:	46bd      	mov	sp, r7
 8020c1a:	bd80      	pop	{r7, pc}
 8020c1c:	080271a8 	.word	0x080271a8
 8020c20:	080272f8 	.word	0x080272f8
 8020c24:	08027220 	.word	0x08027220
 8020c28:	080273a8 	.word	0x080273a8
 8020c2c:	080273dc 	.word	0x080273dc

08020c30 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020c30:	b580      	push	{r7, lr}
 8020c32:	b088      	sub	sp, #32
 8020c34:	af04      	add	r7, sp, #16
 8020c36:	60f8      	str	r0, [r7, #12]
 8020c38:	60b9      	str	r1, [r7, #8]
 8020c3a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020c4c:	2201      	movs	r2, #1
 8020c4e:	9203      	str	r2, [sp, #12]
 8020c50:	68ba      	ldr	r2, [r7, #8]
 8020c52:	9202      	str	r2, [sp, #8]
 8020c54:	4a06      	ldr	r2, [pc, #24]	; (8020c70 <etharp_request_dst+0x40>)
 8020c56:	9201      	str	r2, [sp, #4]
 8020c58:	9300      	str	r3, [sp, #0]
 8020c5a:	4603      	mov	r3, r0
 8020c5c:	687a      	ldr	r2, [r7, #4]
 8020c5e:	68f8      	ldr	r0, [r7, #12]
 8020c60:	f7ff ff5a 	bl	8020b18 <etharp_raw>
 8020c64:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020c66:	4618      	mov	r0, r3
 8020c68:	3710      	adds	r7, #16
 8020c6a:	46bd      	mov	sp, r7
 8020c6c:	bd80      	pop	{r7, pc}
 8020c6e:	bf00      	nop
 8020c70:	08027bbc 	.word	0x08027bbc

08020c74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020c74:	b580      	push	{r7, lr}
 8020c76:	b082      	sub	sp, #8
 8020c78:	af00      	add	r7, sp, #0
 8020c7a:	6078      	str	r0, [r7, #4]
 8020c7c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020c7e:	4a05      	ldr	r2, [pc, #20]	; (8020c94 <etharp_request+0x20>)
 8020c80:	6839      	ldr	r1, [r7, #0]
 8020c82:	6878      	ldr	r0, [r7, #4]
 8020c84:	f7ff ffd4 	bl	8020c30 <etharp_request_dst>
 8020c88:	4603      	mov	r3, r0
}
 8020c8a:	4618      	mov	r0, r3
 8020c8c:	3708      	adds	r7, #8
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	bd80      	pop	{r7, pc}
 8020c92:	bf00      	nop
 8020c94:	08027bb4 	.word	0x08027bb4

08020c98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020c98:	b580      	push	{r7, lr}
 8020c9a:	b08e      	sub	sp, #56	; 0x38
 8020c9c:	af04      	add	r7, sp, #16
 8020c9e:	6078      	str	r0, [r7, #4]
 8020ca0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020ca2:	4b87      	ldr	r3, [pc, #540]	; (8020ec0 <icmp_input+0x228>)
 8020ca4:	689b      	ldr	r3, [r3, #8]
 8020ca6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020caa:	781b      	ldrb	r3, [r3, #0]
 8020cac:	f003 030f 	and.w	r3, r3, #15
 8020cb0:	b2db      	uxtb	r3, r3
 8020cb2:	009b      	lsls	r3, r3, #2
 8020cb4:	b2db      	uxtb	r3, r3
 8020cb6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020cb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020cba:	2b13      	cmp	r3, #19
 8020cbc:	f240 80e8 	bls.w	8020e90 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	895b      	ldrh	r3, [r3, #10]
 8020cc4:	2b03      	cmp	r3, #3
 8020cc6:	f240 80e5 	bls.w	8020e94 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	685b      	ldr	r3, [r3, #4]
 8020cce:	781b      	ldrb	r3, [r3, #0]
 8020cd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020cd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	f000 80d2 	beq.w	8020e82 <icmp_input+0x1ea>
 8020cde:	2b08      	cmp	r3, #8
 8020ce0:	f040 80d2 	bne.w	8020e88 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020ce4:	4b77      	ldr	r3, [pc, #476]	; (8020ec4 <icmp_input+0x22c>)
 8020ce6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020ce8:	4b75      	ldr	r3, [pc, #468]	; (8020ec0 <icmp_input+0x228>)
 8020cea:	695b      	ldr	r3, [r3, #20]
 8020cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020cf0:	2be0      	cmp	r3, #224	; 0xe0
 8020cf2:	f000 80d6 	beq.w	8020ea2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020cf6:	4b72      	ldr	r3, [pc, #456]	; (8020ec0 <icmp_input+0x228>)
 8020cf8:	695b      	ldr	r3, [r3, #20]
 8020cfa:	4a71      	ldr	r2, [pc, #452]	; (8020ec0 <icmp_input+0x228>)
 8020cfc:	6812      	ldr	r2, [r2, #0]
 8020cfe:	4611      	mov	r1, r2
 8020d00:	4618      	mov	r0, r3
 8020d02:	f000 fc13 	bl	802152c <ip4_addr_isbroadcast_u32>
 8020d06:	4603      	mov	r3, r0
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	f040 80cc 	bne.w	8020ea6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	891b      	ldrh	r3, [r3, #8]
 8020d12:	2b07      	cmp	r3, #7
 8020d14:	f240 80c0 	bls.w	8020e98 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8020d18:	6878      	ldr	r0, [r7, #4]
 8020d1a:	f7f6 fb44 	bl	80173a6 <inet_chksum_pbuf>
 8020d1e:	4603      	mov	r3, r0
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	d003      	beq.n	8020d2c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8020d24:	6878      	ldr	r0, [r7, #4]
 8020d26:	f7f7 ff4b 	bl	8018bc0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8020d2a:	e0c5      	b.n	8020eb8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020d2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020d2e:	330e      	adds	r3, #14
 8020d30:	4619      	mov	r1, r3
 8020d32:	6878      	ldr	r0, [r7, #4]
 8020d34:	f7f7 feae 	bl	8018a94 <pbuf_add_header>
 8020d38:	4603      	mov	r3, r0
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	d04b      	beq.n	8020dd6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	891a      	ldrh	r2, [r3, #8]
 8020d42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020d44:	4413      	add	r3, r2
 8020d46:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	891b      	ldrh	r3, [r3, #8]
 8020d4c:	8b7a      	ldrh	r2, [r7, #26]
 8020d4e:	429a      	cmp	r2, r3
 8020d50:	f0c0 80ab 	bcc.w	8020eaa <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020d54:	8b7b      	ldrh	r3, [r7, #26]
 8020d56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020d5a:	4619      	mov	r1, r3
 8020d5c:	200e      	movs	r0, #14
 8020d5e:	f7f7 fc4b 	bl	80185f8 <pbuf_alloc>
 8020d62:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020d64:	697b      	ldr	r3, [r7, #20]
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	f000 80a1 	beq.w	8020eae <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020d6c:	697b      	ldr	r3, [r7, #20]
 8020d6e:	895b      	ldrh	r3, [r3, #10]
 8020d70:	461a      	mov	r2, r3
 8020d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020d74:	3308      	adds	r3, #8
 8020d76:	429a      	cmp	r2, r3
 8020d78:	d203      	bcs.n	8020d82 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8020d7a:	6978      	ldr	r0, [r7, #20]
 8020d7c:	f7f7 ff20 	bl	8018bc0 <pbuf_free>
          goto icmperr;
 8020d80:	e096      	b.n	8020eb0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020d82:	697b      	ldr	r3, [r7, #20]
 8020d84:	685b      	ldr	r3, [r3, #4]
 8020d86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020d8a:	4618      	mov	r0, r3
 8020d8c:	f002 f9a5 	bl	80230da <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020d92:	4619      	mov	r1, r3
 8020d94:	6978      	ldr	r0, [r7, #20]
 8020d96:	f7f7 fe8d 	bl	8018ab4 <pbuf_remove_header>
 8020d9a:	4603      	mov	r3, r0
 8020d9c:	2b00      	cmp	r3, #0
 8020d9e:	d009      	beq.n	8020db4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020da0:	4b49      	ldr	r3, [pc, #292]	; (8020ec8 <icmp_input+0x230>)
 8020da2:	22b6      	movs	r2, #182	; 0xb6
 8020da4:	4949      	ldr	r1, [pc, #292]	; (8020ecc <icmp_input+0x234>)
 8020da6:	484a      	ldr	r0, [pc, #296]	; (8020ed0 <icmp_input+0x238>)
 8020da8:	f002 f826 	bl	8022df8 <iprintf>
          pbuf_free(r);
 8020dac:	6978      	ldr	r0, [r7, #20]
 8020dae:	f7f7 ff07 	bl	8018bc0 <pbuf_free>
          goto icmperr;
 8020db2:	e07d      	b.n	8020eb0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020db4:	6879      	ldr	r1, [r7, #4]
 8020db6:	6978      	ldr	r0, [r7, #20]
 8020db8:	f7f8 f826 	bl	8018e08 <pbuf_copy>
 8020dbc:	4603      	mov	r3, r0
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	d003      	beq.n	8020dca <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020dc2:	6978      	ldr	r0, [r7, #20]
 8020dc4:	f7f7 fefc 	bl	8018bc0 <pbuf_free>
          goto icmperr;
 8020dc8:	e072      	b.n	8020eb0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8020dca:	6878      	ldr	r0, [r7, #4]
 8020dcc:	f7f7 fef8 	bl	8018bc0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020dd0:	697b      	ldr	r3, [r7, #20]
 8020dd2:	607b      	str	r3, [r7, #4]
 8020dd4:	e00f      	b.n	8020df6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020dd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020dd8:	330e      	adds	r3, #14
 8020dda:	4619      	mov	r1, r3
 8020ddc:	6878      	ldr	r0, [r7, #4]
 8020dde:	f7f7 fe69 	bl	8018ab4 <pbuf_remove_header>
 8020de2:	4603      	mov	r3, r0
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d006      	beq.n	8020df6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020de8:	4b37      	ldr	r3, [pc, #220]	; (8020ec8 <icmp_input+0x230>)
 8020dea:	22c7      	movs	r2, #199	; 0xc7
 8020dec:	4939      	ldr	r1, [pc, #228]	; (8020ed4 <icmp_input+0x23c>)
 8020dee:	4838      	ldr	r0, [pc, #224]	; (8020ed0 <icmp_input+0x238>)
 8020df0:	f002 f802 	bl	8022df8 <iprintf>
          goto icmperr;
 8020df4:	e05c      	b.n	8020eb0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	685b      	ldr	r3, [r3, #4]
 8020dfa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020dfe:	4619      	mov	r1, r3
 8020e00:	6878      	ldr	r0, [r7, #4]
 8020e02:	f7f7 fe47 	bl	8018a94 <pbuf_add_header>
 8020e06:	4603      	mov	r3, r0
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d13c      	bne.n	8020e86 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020e0c:	687b      	ldr	r3, [r7, #4]
 8020e0e:	685b      	ldr	r3, [r3, #4]
 8020e10:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8020e12:	69fb      	ldr	r3, [r7, #28]
 8020e14:	681a      	ldr	r2, [r3, #0]
 8020e16:	68fb      	ldr	r3, [r7, #12]
 8020e18:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020e1a:	4b29      	ldr	r3, [pc, #164]	; (8020ec0 <icmp_input+0x228>)
 8020e1c:	691a      	ldr	r2, [r3, #16]
 8020e1e:	68fb      	ldr	r3, [r7, #12]
 8020e20:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8020e22:	693b      	ldr	r3, [r7, #16]
 8020e24:	2200      	movs	r2, #0
 8020e26:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8020e28:	693b      	ldr	r3, [r7, #16]
 8020e2a:	885b      	ldrh	r3, [r3, #2]
 8020e2c:	b29b      	uxth	r3, r3
 8020e2e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8020e32:	4293      	cmp	r3, r2
 8020e34:	d907      	bls.n	8020e46 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8020e36:	693b      	ldr	r3, [r7, #16]
 8020e38:	885b      	ldrh	r3, [r3, #2]
 8020e3a:	b29b      	uxth	r3, r3
 8020e3c:	3309      	adds	r3, #9
 8020e3e:	b29a      	uxth	r2, r3
 8020e40:	693b      	ldr	r3, [r7, #16]
 8020e42:	805a      	strh	r2, [r3, #2]
 8020e44:	e006      	b.n	8020e54 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8020e46:	693b      	ldr	r3, [r7, #16]
 8020e48:	885b      	ldrh	r3, [r3, #2]
 8020e4a:	b29b      	uxth	r3, r3
 8020e4c:	3308      	adds	r3, #8
 8020e4e:	b29a      	uxth	r2, r3
 8020e50:	693b      	ldr	r3, [r7, #16]
 8020e52:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	22ff      	movs	r2, #255	; 0xff
 8020e58:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8020e5a:	68fb      	ldr	r3, [r7, #12]
 8020e5c:	2200      	movs	r2, #0
 8020e5e:	729a      	strb	r2, [r3, #10]
 8020e60:	2200      	movs	r2, #0
 8020e62:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020e64:	683b      	ldr	r3, [r7, #0]
 8020e66:	9302      	str	r3, [sp, #8]
 8020e68:	2301      	movs	r3, #1
 8020e6a:	9301      	str	r3, [sp, #4]
 8020e6c:	2300      	movs	r3, #0
 8020e6e:	9300      	str	r3, [sp, #0]
 8020e70:	23ff      	movs	r3, #255	; 0xff
 8020e72:	2200      	movs	r2, #0
 8020e74:	69f9      	ldr	r1, [r7, #28]
 8020e76:	6878      	ldr	r0, [r7, #4]
 8020e78:	f000 fa80 	bl	802137c <ip4_output_if>
 8020e7c:	4603      	mov	r3, r0
 8020e7e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8020e80:	e001      	b.n	8020e86 <icmp_input+0x1ee>
      break;
 8020e82:	bf00      	nop
 8020e84:	e000      	b.n	8020e88 <icmp_input+0x1f0>
      break;
 8020e86:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8020e88:	6878      	ldr	r0, [r7, #4]
 8020e8a:	f7f7 fe99 	bl	8018bc0 <pbuf_free>
  return;
 8020e8e:	e013      	b.n	8020eb8 <icmp_input+0x220>
    goto lenerr;
 8020e90:	bf00      	nop
 8020e92:	e002      	b.n	8020e9a <icmp_input+0x202>
    goto lenerr;
 8020e94:	bf00      	nop
 8020e96:	e000      	b.n	8020e9a <icmp_input+0x202>
        goto lenerr;
 8020e98:	bf00      	nop
lenerr:
  pbuf_free(p);
 8020e9a:	6878      	ldr	r0, [r7, #4]
 8020e9c:	f7f7 fe90 	bl	8018bc0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020ea0:	e00a      	b.n	8020eb8 <icmp_input+0x220>
        goto icmperr;
 8020ea2:	bf00      	nop
 8020ea4:	e004      	b.n	8020eb0 <icmp_input+0x218>
        goto icmperr;
 8020ea6:	bf00      	nop
 8020ea8:	e002      	b.n	8020eb0 <icmp_input+0x218>
          goto icmperr;
 8020eaa:	bf00      	nop
 8020eac:	e000      	b.n	8020eb0 <icmp_input+0x218>
          goto icmperr;
 8020eae:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8020eb0:	6878      	ldr	r0, [r7, #4]
 8020eb2:	f7f7 fe85 	bl	8018bc0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020eb6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8020eb8:	3728      	adds	r7, #40	; 0x28
 8020eba:	46bd      	mov	sp, r7
 8020ebc:	bd80      	pop	{r7, pc}
 8020ebe:	bf00      	nop
 8020ec0:	2005eb94 	.word	0x2005eb94
 8020ec4:	2005eba8 	.word	0x2005eba8
 8020ec8:	08027420 	.word	0x08027420
 8020ecc:	08027458 	.word	0x08027458
 8020ed0:	08027490 	.word	0x08027490
 8020ed4:	080274b8 	.word	0x080274b8

08020ed8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020ed8:	b580      	push	{r7, lr}
 8020eda:	b082      	sub	sp, #8
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	6078      	str	r0, [r7, #4]
 8020ee0:	460b      	mov	r3, r1
 8020ee2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020ee4:	78fb      	ldrb	r3, [r7, #3]
 8020ee6:	461a      	mov	r2, r3
 8020ee8:	2103      	movs	r1, #3
 8020eea:	6878      	ldr	r0, [r7, #4]
 8020eec:	f000 f814 	bl	8020f18 <icmp_send_response>
}
 8020ef0:	bf00      	nop
 8020ef2:	3708      	adds	r7, #8
 8020ef4:	46bd      	mov	sp, r7
 8020ef6:	bd80      	pop	{r7, pc}

08020ef8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020ef8:	b580      	push	{r7, lr}
 8020efa:	b082      	sub	sp, #8
 8020efc:	af00      	add	r7, sp, #0
 8020efe:	6078      	str	r0, [r7, #4]
 8020f00:	460b      	mov	r3, r1
 8020f02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8020f04:	78fb      	ldrb	r3, [r7, #3]
 8020f06:	461a      	mov	r2, r3
 8020f08:	210b      	movs	r1, #11
 8020f0a:	6878      	ldr	r0, [r7, #4]
 8020f0c:	f000 f804 	bl	8020f18 <icmp_send_response>
}
 8020f10:	bf00      	nop
 8020f12:	3708      	adds	r7, #8
 8020f14:	46bd      	mov	sp, r7
 8020f16:	bd80      	pop	{r7, pc}

08020f18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020f18:	b580      	push	{r7, lr}
 8020f1a:	b08c      	sub	sp, #48	; 0x30
 8020f1c:	af04      	add	r7, sp, #16
 8020f1e:	6078      	str	r0, [r7, #4]
 8020f20:	460b      	mov	r3, r1
 8020f22:	70fb      	strb	r3, [r7, #3]
 8020f24:	4613      	mov	r3, r2
 8020f26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020f28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020f2c:	2124      	movs	r1, #36	; 0x24
 8020f2e:	2022      	movs	r0, #34	; 0x22
 8020f30:	f7f7 fb62 	bl	80185f8 <pbuf_alloc>
 8020f34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8020f36:	69fb      	ldr	r3, [r7, #28]
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d056      	beq.n	8020fea <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020f3c:	69fb      	ldr	r3, [r7, #28]
 8020f3e:	895b      	ldrh	r3, [r3, #10]
 8020f40:	2b23      	cmp	r3, #35	; 0x23
 8020f42:	d806      	bhi.n	8020f52 <icmp_send_response+0x3a>
 8020f44:	4b2b      	ldr	r3, [pc, #172]	; (8020ff4 <icmp_send_response+0xdc>)
 8020f46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020f4a:	492b      	ldr	r1, [pc, #172]	; (8020ff8 <icmp_send_response+0xe0>)
 8020f4c:	482b      	ldr	r0, [pc, #172]	; (8020ffc <icmp_send_response+0xe4>)
 8020f4e:	f001 ff53 	bl	8022df8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	685b      	ldr	r3, [r3, #4]
 8020f56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8020f58:	69fb      	ldr	r3, [r7, #28]
 8020f5a:	685b      	ldr	r3, [r3, #4]
 8020f5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8020f5e:	697b      	ldr	r3, [r7, #20]
 8020f60:	78fa      	ldrb	r2, [r7, #3]
 8020f62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8020f64:	697b      	ldr	r3, [r7, #20]
 8020f66:	78ba      	ldrb	r2, [r7, #2]
 8020f68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8020f6a:	697b      	ldr	r3, [r7, #20]
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	711a      	strb	r2, [r3, #4]
 8020f70:	2200      	movs	r2, #0
 8020f72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8020f74:	697b      	ldr	r3, [r7, #20]
 8020f76:	2200      	movs	r2, #0
 8020f78:	719a      	strb	r2, [r3, #6]
 8020f7a:	2200      	movs	r2, #0
 8020f7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8020f7e:	69fb      	ldr	r3, [r7, #28]
 8020f80:	685b      	ldr	r3, [r3, #4]
 8020f82:	f103 0008 	add.w	r0, r3, #8
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	685b      	ldr	r3, [r3, #4]
 8020f8a:	221c      	movs	r2, #28
 8020f8c:	4619      	mov	r1, r3
 8020f8e:	f002 f8a4 	bl	80230da <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8020f92:	69bb      	ldr	r3, [r7, #24]
 8020f94:	68db      	ldr	r3, [r3, #12]
 8020f96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8020f98:	f107 030c 	add.w	r3, r7, #12
 8020f9c:	4618      	mov	r0, r3
 8020f9e:	f000 f82f 	bl	8021000 <ip4_route>
 8020fa2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8020fa4:	693b      	ldr	r3, [r7, #16]
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	d01b      	beq.n	8020fe2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8020faa:	697b      	ldr	r3, [r7, #20]
 8020fac:	2200      	movs	r2, #0
 8020fae:	709a      	strb	r2, [r3, #2]
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8020fb4:	69fb      	ldr	r3, [r7, #28]
 8020fb6:	895b      	ldrh	r3, [r3, #10]
 8020fb8:	4619      	mov	r1, r3
 8020fba:	6978      	ldr	r0, [r7, #20]
 8020fbc:	f7f6 f9e1 	bl	8017382 <inet_chksum>
 8020fc0:	4603      	mov	r3, r0
 8020fc2:	461a      	mov	r2, r3
 8020fc4:	697b      	ldr	r3, [r7, #20]
 8020fc6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8020fc8:	f107 020c 	add.w	r2, r7, #12
 8020fcc:	693b      	ldr	r3, [r7, #16]
 8020fce:	9302      	str	r3, [sp, #8]
 8020fd0:	2301      	movs	r3, #1
 8020fd2:	9301      	str	r3, [sp, #4]
 8020fd4:	2300      	movs	r3, #0
 8020fd6:	9300      	str	r3, [sp, #0]
 8020fd8:	23ff      	movs	r3, #255	; 0xff
 8020fda:	2100      	movs	r1, #0
 8020fdc:	69f8      	ldr	r0, [r7, #28]
 8020fde:	f000 f9cd 	bl	802137c <ip4_output_if>
  }
  pbuf_free(q);
 8020fe2:	69f8      	ldr	r0, [r7, #28]
 8020fe4:	f7f7 fdec 	bl	8018bc0 <pbuf_free>
 8020fe8:	e000      	b.n	8020fec <icmp_send_response+0xd4>
    return;
 8020fea:	bf00      	nop
}
 8020fec:	3720      	adds	r7, #32
 8020fee:	46bd      	mov	sp, r7
 8020ff0:	bd80      	pop	{r7, pc}
 8020ff2:	bf00      	nop
 8020ff4:	08027420 	.word	0x08027420
 8020ff8:	080274ec 	.word	0x080274ec
 8020ffc:	08027490 	.word	0x08027490

08021000 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021000:	b480      	push	{r7}
 8021002:	b085      	sub	sp, #20
 8021004:	af00      	add	r7, sp, #0
 8021006:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021008:	4b33      	ldr	r3, [pc, #204]	; (80210d8 <ip4_route+0xd8>)
 802100a:	681b      	ldr	r3, [r3, #0]
 802100c:	60fb      	str	r3, [r7, #12]
 802100e:	e036      	b.n	802107e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021010:	68fb      	ldr	r3, [r7, #12]
 8021012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021016:	f003 0301 	and.w	r3, r3, #1
 802101a:	b2db      	uxtb	r3, r3
 802101c:	2b00      	cmp	r3, #0
 802101e:	d02b      	beq.n	8021078 <ip4_route+0x78>
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021026:	089b      	lsrs	r3, r3, #2
 8021028:	f003 0301 	and.w	r3, r3, #1
 802102c:	b2db      	uxtb	r3, r3
 802102e:	2b00      	cmp	r3, #0
 8021030:	d022      	beq.n	8021078 <ip4_route+0x78>
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	3304      	adds	r3, #4
 8021036:	681b      	ldr	r3, [r3, #0]
 8021038:	2b00      	cmp	r3, #0
 802103a:	d01d      	beq.n	8021078 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	681a      	ldr	r2, [r3, #0]
 8021040:	68fb      	ldr	r3, [r7, #12]
 8021042:	3304      	adds	r3, #4
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	405a      	eors	r2, r3
 8021048:	68fb      	ldr	r3, [r7, #12]
 802104a:	3308      	adds	r3, #8
 802104c:	681b      	ldr	r3, [r3, #0]
 802104e:	4013      	ands	r3, r2
 8021050:	2b00      	cmp	r3, #0
 8021052:	d101      	bne.n	8021058 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	e038      	b.n	80210ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8021058:	68fb      	ldr	r3, [r7, #12]
 802105a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802105e:	f003 0302 	and.w	r3, r3, #2
 8021062:	2b00      	cmp	r3, #0
 8021064:	d108      	bne.n	8021078 <ip4_route+0x78>
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	681a      	ldr	r2, [r3, #0]
 802106a:	68fb      	ldr	r3, [r7, #12]
 802106c:	330c      	adds	r3, #12
 802106e:	681b      	ldr	r3, [r3, #0]
 8021070:	429a      	cmp	r2, r3
 8021072:	d101      	bne.n	8021078 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	e028      	b.n	80210ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	60fb      	str	r3, [r7, #12]
 802107e:	68fb      	ldr	r3, [r7, #12]
 8021080:	2b00      	cmp	r3, #0
 8021082:	d1c5      	bne.n	8021010 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021084:	4b15      	ldr	r3, [pc, #84]	; (80210dc <ip4_route+0xdc>)
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	2b00      	cmp	r3, #0
 802108a:	d01a      	beq.n	80210c2 <ip4_route+0xc2>
 802108c:	4b13      	ldr	r3, [pc, #76]	; (80210dc <ip4_route+0xdc>)
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021094:	f003 0301 	and.w	r3, r3, #1
 8021098:	2b00      	cmp	r3, #0
 802109a:	d012      	beq.n	80210c2 <ip4_route+0xc2>
 802109c:	4b0f      	ldr	r3, [pc, #60]	; (80210dc <ip4_route+0xdc>)
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80210a4:	f003 0304 	and.w	r3, r3, #4
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d00a      	beq.n	80210c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80210ac:	4b0b      	ldr	r3, [pc, #44]	; (80210dc <ip4_route+0xdc>)
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	3304      	adds	r3, #4
 80210b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d004      	beq.n	80210c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	b2db      	uxtb	r3, r3
 80210be:	2b7f      	cmp	r3, #127	; 0x7f
 80210c0:	d101      	bne.n	80210c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80210c2:	2300      	movs	r3, #0
 80210c4:	e001      	b.n	80210ca <ip4_route+0xca>
  }

  return netif_default;
 80210c6:	4b05      	ldr	r3, [pc, #20]	; (80210dc <ip4_route+0xdc>)
 80210c8:	681b      	ldr	r3, [r3, #0]
}
 80210ca:	4618      	mov	r0, r3
 80210cc:	3714      	adds	r7, #20
 80210ce:	46bd      	mov	sp, r7
 80210d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d4:	4770      	bx	lr
 80210d6:	bf00      	nop
 80210d8:	20061c88 	.word	0x20061c88
 80210dc:	20061c8c 	.word	0x20061c8c

080210e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80210e0:	b580      	push	{r7, lr}
 80210e2:	b082      	sub	sp, #8
 80210e4:	af00      	add	r7, sp, #0
 80210e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80210ee:	f003 0301 	and.w	r3, r3, #1
 80210f2:	b2db      	uxtb	r3, r3
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	d016      	beq.n	8021126 <ip4_input_accept+0x46>
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	3304      	adds	r3, #4
 80210fc:	681b      	ldr	r3, [r3, #0]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d011      	beq.n	8021126 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021102:	4b0b      	ldr	r3, [pc, #44]	; (8021130 <ip4_input_accept+0x50>)
 8021104:	695a      	ldr	r2, [r3, #20]
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	3304      	adds	r3, #4
 802110a:	681b      	ldr	r3, [r3, #0]
 802110c:	429a      	cmp	r2, r3
 802110e:	d008      	beq.n	8021122 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021110:	4b07      	ldr	r3, [pc, #28]	; (8021130 <ip4_input_accept+0x50>)
 8021112:	695b      	ldr	r3, [r3, #20]
 8021114:	6879      	ldr	r1, [r7, #4]
 8021116:	4618      	mov	r0, r3
 8021118:	f000 fa08 	bl	802152c <ip4_addr_isbroadcast_u32>
 802111c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802111e:	2b00      	cmp	r3, #0
 8021120:	d001      	beq.n	8021126 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8021122:	2301      	movs	r3, #1
 8021124:	e000      	b.n	8021128 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8021126:	2300      	movs	r3, #0
}
 8021128:	4618      	mov	r0, r3
 802112a:	3708      	adds	r7, #8
 802112c:	46bd      	mov	sp, r7
 802112e:	bd80      	pop	{r7, pc}
 8021130:	2005eb94 	.word	0x2005eb94

08021134 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8021134:	b580      	push	{r7, lr}
 8021136:	b086      	sub	sp, #24
 8021138:	af00      	add	r7, sp, #0
 802113a:	6078      	str	r0, [r7, #4]
 802113c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	685b      	ldr	r3, [r3, #4]
 8021142:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8021144:	697b      	ldr	r3, [r7, #20]
 8021146:	781b      	ldrb	r3, [r3, #0]
 8021148:	091b      	lsrs	r3, r3, #4
 802114a:	b2db      	uxtb	r3, r3
 802114c:	2b04      	cmp	r3, #4
 802114e:	d004      	beq.n	802115a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8021150:	6878      	ldr	r0, [r7, #4]
 8021152:	f7f7 fd35 	bl	8018bc0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8021156:	2300      	movs	r3, #0
 8021158:	e107      	b.n	802136a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802115a:	697b      	ldr	r3, [r7, #20]
 802115c:	781b      	ldrb	r3, [r3, #0]
 802115e:	f003 030f 	and.w	r3, r3, #15
 8021162:	b2db      	uxtb	r3, r3
 8021164:	009b      	lsls	r3, r3, #2
 8021166:	b2db      	uxtb	r3, r3
 8021168:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802116a:	697b      	ldr	r3, [r7, #20]
 802116c:	885b      	ldrh	r3, [r3, #2]
 802116e:	b29b      	uxth	r3, r3
 8021170:	4618      	mov	r0, r3
 8021172:	f7f6 f87b 	bl	801726c <lwip_htons>
 8021176:	4603      	mov	r3, r0
 8021178:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	891b      	ldrh	r3, [r3, #8]
 802117e:	89ba      	ldrh	r2, [r7, #12]
 8021180:	429a      	cmp	r2, r3
 8021182:	d204      	bcs.n	802118e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8021184:	89bb      	ldrh	r3, [r7, #12]
 8021186:	4619      	mov	r1, r3
 8021188:	6878      	ldr	r0, [r7, #4]
 802118a:	f7f7 fb93 	bl	80188b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	895b      	ldrh	r3, [r3, #10]
 8021192:	89fa      	ldrh	r2, [r7, #14]
 8021194:	429a      	cmp	r2, r3
 8021196:	d807      	bhi.n	80211a8 <ip4_input+0x74>
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	891b      	ldrh	r3, [r3, #8]
 802119c:	89ba      	ldrh	r2, [r7, #12]
 802119e:	429a      	cmp	r2, r3
 80211a0:	d802      	bhi.n	80211a8 <ip4_input+0x74>
 80211a2:	89fb      	ldrh	r3, [r7, #14]
 80211a4:	2b13      	cmp	r3, #19
 80211a6:	d804      	bhi.n	80211b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80211a8:	6878      	ldr	r0, [r7, #4]
 80211aa:	f7f7 fd09 	bl	8018bc0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80211ae:	2300      	movs	r3, #0
 80211b0:	e0db      	b.n	802136a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80211b2:	697b      	ldr	r3, [r7, #20]
 80211b4:	691b      	ldr	r3, [r3, #16]
 80211b6:	4a6f      	ldr	r2, [pc, #444]	; (8021374 <ip4_input+0x240>)
 80211b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80211ba:	697b      	ldr	r3, [r7, #20]
 80211bc:	68db      	ldr	r3, [r3, #12]
 80211be:	4a6d      	ldr	r2, [pc, #436]	; (8021374 <ip4_input+0x240>)
 80211c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80211c2:	4b6c      	ldr	r3, [pc, #432]	; (8021374 <ip4_input+0x240>)
 80211c4:	695b      	ldr	r3, [r3, #20]
 80211c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80211ca:	2be0      	cmp	r3, #224	; 0xe0
 80211cc:	d112      	bne.n	80211f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80211d4:	f003 0301 	and.w	r3, r3, #1
 80211d8:	b2db      	uxtb	r3, r3
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d007      	beq.n	80211ee <ip4_input+0xba>
 80211de:	683b      	ldr	r3, [r7, #0]
 80211e0:	3304      	adds	r3, #4
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d002      	beq.n	80211ee <ip4_input+0xba>
      netif = inp;
 80211e8:	683b      	ldr	r3, [r7, #0]
 80211ea:	613b      	str	r3, [r7, #16]
 80211ec:	e02a      	b.n	8021244 <ip4_input+0x110>
    } else {
      netif = NULL;
 80211ee:	2300      	movs	r3, #0
 80211f0:	613b      	str	r3, [r7, #16]
 80211f2:	e027      	b.n	8021244 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80211f4:	6838      	ldr	r0, [r7, #0]
 80211f6:	f7ff ff73 	bl	80210e0 <ip4_input_accept>
 80211fa:	4603      	mov	r3, r0
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d002      	beq.n	8021206 <ip4_input+0xd2>
      netif = inp;
 8021200:	683b      	ldr	r3, [r7, #0]
 8021202:	613b      	str	r3, [r7, #16]
 8021204:	e01e      	b.n	8021244 <ip4_input+0x110>
    } else {
      netif = NULL;
 8021206:	2300      	movs	r3, #0
 8021208:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802120a:	4b5a      	ldr	r3, [pc, #360]	; (8021374 <ip4_input+0x240>)
 802120c:	695b      	ldr	r3, [r3, #20]
 802120e:	b2db      	uxtb	r3, r3
 8021210:	2b7f      	cmp	r3, #127	; 0x7f
 8021212:	d017      	beq.n	8021244 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8021214:	4b58      	ldr	r3, [pc, #352]	; (8021378 <ip4_input+0x244>)
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	613b      	str	r3, [r7, #16]
 802121a:	e00e      	b.n	802123a <ip4_input+0x106>
          if (netif == inp) {
 802121c:	693a      	ldr	r2, [r7, #16]
 802121e:	683b      	ldr	r3, [r7, #0]
 8021220:	429a      	cmp	r2, r3
 8021222:	d006      	beq.n	8021232 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8021224:	6938      	ldr	r0, [r7, #16]
 8021226:	f7ff ff5b 	bl	80210e0 <ip4_input_accept>
 802122a:	4603      	mov	r3, r0
 802122c:	2b00      	cmp	r3, #0
 802122e:	d108      	bne.n	8021242 <ip4_input+0x10e>
 8021230:	e000      	b.n	8021234 <ip4_input+0x100>
            continue;
 8021232:	bf00      	nop
        NETIF_FOREACH(netif) {
 8021234:	693b      	ldr	r3, [r7, #16]
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	613b      	str	r3, [r7, #16]
 802123a:	693b      	ldr	r3, [r7, #16]
 802123c:	2b00      	cmp	r3, #0
 802123e:	d1ed      	bne.n	802121c <ip4_input+0xe8>
 8021240:	e000      	b.n	8021244 <ip4_input+0x110>
            break;
 8021242:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021244:	4b4b      	ldr	r3, [pc, #300]	; (8021374 <ip4_input+0x240>)
 8021246:	691b      	ldr	r3, [r3, #16]
 8021248:	6839      	ldr	r1, [r7, #0]
 802124a:	4618      	mov	r0, r3
 802124c:	f000 f96e 	bl	802152c <ip4_addr_isbroadcast_u32>
 8021250:	4603      	mov	r3, r0
 8021252:	2b00      	cmp	r3, #0
 8021254:	d105      	bne.n	8021262 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8021256:	4b47      	ldr	r3, [pc, #284]	; (8021374 <ip4_input+0x240>)
 8021258:	691b      	ldr	r3, [r3, #16]
 802125a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802125e:	2be0      	cmp	r3, #224	; 0xe0
 8021260:	d104      	bne.n	802126c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8021262:	6878      	ldr	r0, [r7, #4]
 8021264:	f7f7 fcac 	bl	8018bc0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8021268:	2300      	movs	r3, #0
 802126a:	e07e      	b.n	802136a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 802126c:	693b      	ldr	r3, [r7, #16]
 802126e:	2b00      	cmp	r3, #0
 8021270:	d104      	bne.n	802127c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8021272:	6878      	ldr	r0, [r7, #4]
 8021274:	f7f7 fca4 	bl	8018bc0 <pbuf_free>
    return ERR_OK;
 8021278:	2300      	movs	r3, #0
 802127a:	e076      	b.n	802136a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 802127c:	697b      	ldr	r3, [r7, #20]
 802127e:	88db      	ldrh	r3, [r3, #6]
 8021280:	b29b      	uxth	r3, r3
 8021282:	461a      	mov	r2, r3
 8021284:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021288:	4013      	ands	r3, r2
 802128a:	2b00      	cmp	r3, #0
 802128c:	d00b      	beq.n	80212a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802128e:	6878      	ldr	r0, [r7, #4]
 8021290:	f000 fc92 	bl	8021bb8 <ip4_reass>
 8021294:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	2b00      	cmp	r3, #0
 802129a:	d101      	bne.n	80212a0 <ip4_input+0x16c>
      return ERR_OK;
 802129c:	2300      	movs	r3, #0
 802129e:	e064      	b.n	802136a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	685b      	ldr	r3, [r3, #4]
 80212a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80212a6:	4a33      	ldr	r2, [pc, #204]	; (8021374 <ip4_input+0x240>)
 80212a8:	693b      	ldr	r3, [r7, #16]
 80212aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80212ac:	4a31      	ldr	r2, [pc, #196]	; (8021374 <ip4_input+0x240>)
 80212ae:	683b      	ldr	r3, [r7, #0]
 80212b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80212b2:	4a30      	ldr	r2, [pc, #192]	; (8021374 <ip4_input+0x240>)
 80212b4:	697b      	ldr	r3, [r7, #20]
 80212b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80212b8:	697b      	ldr	r3, [r7, #20]
 80212ba:	781b      	ldrb	r3, [r3, #0]
 80212bc:	f003 030f 	and.w	r3, r3, #15
 80212c0:	b2db      	uxtb	r3, r3
 80212c2:	009b      	lsls	r3, r3, #2
 80212c4:	b2db      	uxtb	r3, r3
 80212c6:	b29a      	uxth	r2, r3
 80212c8:	4b2a      	ldr	r3, [pc, #168]	; (8021374 <ip4_input+0x240>)
 80212ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80212cc:	89fb      	ldrh	r3, [r7, #14]
 80212ce:	4619      	mov	r1, r3
 80212d0:	6878      	ldr	r0, [r7, #4]
 80212d2:	f7f7 fbef 	bl	8018ab4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80212d6:	697b      	ldr	r3, [r7, #20]
 80212d8:	7a5b      	ldrb	r3, [r3, #9]
 80212da:	2b11      	cmp	r3, #17
 80212dc:	d006      	beq.n	80212ec <ip4_input+0x1b8>
 80212de:	2b11      	cmp	r3, #17
 80212e0:	dc13      	bgt.n	802130a <ip4_input+0x1d6>
 80212e2:	2b01      	cmp	r3, #1
 80212e4:	d00c      	beq.n	8021300 <ip4_input+0x1cc>
 80212e6:	2b06      	cmp	r3, #6
 80212e8:	d005      	beq.n	80212f6 <ip4_input+0x1c2>
 80212ea:	e00e      	b.n	802130a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80212ec:	6839      	ldr	r1, [r7, #0]
 80212ee:	6878      	ldr	r0, [r7, #4]
 80212f0:	f7fe fac6 	bl	801f880 <udp_input>
        break;
 80212f4:	e026      	b.n	8021344 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80212f6:	6839      	ldr	r1, [r7, #0]
 80212f8:	6878      	ldr	r0, [r7, #4]
 80212fa:	f7f9 fe7f 	bl	801affc <tcp_input>
        break;
 80212fe:	e021      	b.n	8021344 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8021300:	6839      	ldr	r1, [r7, #0]
 8021302:	6878      	ldr	r0, [r7, #4]
 8021304:	f7ff fcc8 	bl	8020c98 <icmp_input>
        break;
 8021308:	e01c      	b.n	8021344 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802130a:	4b1a      	ldr	r3, [pc, #104]	; (8021374 <ip4_input+0x240>)
 802130c:	695b      	ldr	r3, [r3, #20]
 802130e:	6939      	ldr	r1, [r7, #16]
 8021310:	4618      	mov	r0, r3
 8021312:	f000 f90b 	bl	802152c <ip4_addr_isbroadcast_u32>
 8021316:	4603      	mov	r3, r0
 8021318:	2b00      	cmp	r3, #0
 802131a:	d10f      	bne.n	802133c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802131c:	4b15      	ldr	r3, [pc, #84]	; (8021374 <ip4_input+0x240>)
 802131e:	695b      	ldr	r3, [r3, #20]
 8021320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021324:	2be0      	cmp	r3, #224	; 0xe0
 8021326:	d009      	beq.n	802133c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802132c:	4619      	mov	r1, r3
 802132e:	6878      	ldr	r0, [r7, #4]
 8021330:	f7f7 fc33 	bl	8018b9a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8021334:	2102      	movs	r1, #2
 8021336:	6878      	ldr	r0, [r7, #4]
 8021338:	f7ff fdce 	bl	8020ed8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 802133c:	6878      	ldr	r0, [r7, #4]
 802133e:	f7f7 fc3f 	bl	8018bc0 <pbuf_free>
        break;
 8021342:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8021344:	4b0b      	ldr	r3, [pc, #44]	; (8021374 <ip4_input+0x240>)
 8021346:	2200      	movs	r2, #0
 8021348:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802134a:	4b0a      	ldr	r3, [pc, #40]	; (8021374 <ip4_input+0x240>)
 802134c:	2200      	movs	r2, #0
 802134e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021350:	4b08      	ldr	r3, [pc, #32]	; (8021374 <ip4_input+0x240>)
 8021352:	2200      	movs	r2, #0
 8021354:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8021356:	4b07      	ldr	r3, [pc, #28]	; (8021374 <ip4_input+0x240>)
 8021358:	2200      	movs	r2, #0
 802135a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 802135c:	4b05      	ldr	r3, [pc, #20]	; (8021374 <ip4_input+0x240>)
 802135e:	2200      	movs	r2, #0
 8021360:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8021362:	4b04      	ldr	r3, [pc, #16]	; (8021374 <ip4_input+0x240>)
 8021364:	2200      	movs	r2, #0
 8021366:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8021368:	2300      	movs	r3, #0
}
 802136a:	4618      	mov	r0, r3
 802136c:	3718      	adds	r7, #24
 802136e:	46bd      	mov	sp, r7
 8021370:	bd80      	pop	{r7, pc}
 8021372:	bf00      	nop
 8021374:	2005eb94 	.word	0x2005eb94
 8021378:	20061c88 	.word	0x20061c88

0802137c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 802137c:	b580      	push	{r7, lr}
 802137e:	b08a      	sub	sp, #40	; 0x28
 8021380:	af04      	add	r7, sp, #16
 8021382:	60f8      	str	r0, [r7, #12]
 8021384:	60b9      	str	r1, [r7, #8]
 8021386:	607a      	str	r2, [r7, #4]
 8021388:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802138a:	68bb      	ldr	r3, [r7, #8]
 802138c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	2b00      	cmp	r3, #0
 8021392:	d009      	beq.n	80213a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8021394:	68bb      	ldr	r3, [r7, #8]
 8021396:	2b00      	cmp	r3, #0
 8021398:	d003      	beq.n	80213a2 <ip4_output_if+0x26>
 802139a:	68bb      	ldr	r3, [r7, #8]
 802139c:	681b      	ldr	r3, [r3, #0]
 802139e:	2b00      	cmp	r3, #0
 80213a0:	d102      	bne.n	80213a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80213a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213a4:	3304      	adds	r3, #4
 80213a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80213a8:	78fa      	ldrb	r2, [r7, #3]
 80213aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213ac:	9302      	str	r3, [sp, #8]
 80213ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80213b2:	9301      	str	r3, [sp, #4]
 80213b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80213b8:	9300      	str	r3, [sp, #0]
 80213ba:	4613      	mov	r3, r2
 80213bc:	687a      	ldr	r2, [r7, #4]
 80213be:	6979      	ldr	r1, [r7, #20]
 80213c0:	68f8      	ldr	r0, [r7, #12]
 80213c2:	f000 f805 	bl	80213d0 <ip4_output_if_src>
 80213c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80213c8:	4618      	mov	r0, r3
 80213ca:	3718      	adds	r7, #24
 80213cc:	46bd      	mov	sp, r7
 80213ce:	bd80      	pop	{r7, pc}

080213d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80213d0:	b580      	push	{r7, lr}
 80213d2:	b088      	sub	sp, #32
 80213d4:	af00      	add	r7, sp, #0
 80213d6:	60f8      	str	r0, [r7, #12]
 80213d8:	60b9      	str	r1, [r7, #8]
 80213da:	607a      	str	r2, [r7, #4]
 80213dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80213de:	68fb      	ldr	r3, [r7, #12]
 80213e0:	7b9b      	ldrb	r3, [r3, #14]
 80213e2:	2b01      	cmp	r3, #1
 80213e4:	d006      	beq.n	80213f4 <ip4_output_if_src+0x24>
 80213e6:	4b4b      	ldr	r3, [pc, #300]	; (8021514 <ip4_output_if_src+0x144>)
 80213e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80213ec:	494a      	ldr	r1, [pc, #296]	; (8021518 <ip4_output_if_src+0x148>)
 80213ee:	484b      	ldr	r0, [pc, #300]	; (802151c <ip4_output_if_src+0x14c>)
 80213f0:	f001 fd02 	bl	8022df8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d060      	beq.n	80214bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80213fa:	2314      	movs	r3, #20
 80213fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80213fe:	2114      	movs	r1, #20
 8021400:	68f8      	ldr	r0, [r7, #12]
 8021402:	f7f7 fb47 	bl	8018a94 <pbuf_add_header>
 8021406:	4603      	mov	r3, r0
 8021408:	2b00      	cmp	r3, #0
 802140a:	d002      	beq.n	8021412 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802140c:	f06f 0301 	mvn.w	r3, #1
 8021410:	e07c      	b.n	802150c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8021412:	68fb      	ldr	r3, [r7, #12]
 8021414:	685b      	ldr	r3, [r3, #4]
 8021416:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021418:	68fb      	ldr	r3, [r7, #12]
 802141a:	895b      	ldrh	r3, [r3, #10]
 802141c:	2b13      	cmp	r3, #19
 802141e:	d806      	bhi.n	802142e <ip4_output_if_src+0x5e>
 8021420:	4b3c      	ldr	r3, [pc, #240]	; (8021514 <ip4_output_if_src+0x144>)
 8021422:	f44f 7262 	mov.w	r2, #904	; 0x388
 8021426:	493e      	ldr	r1, [pc, #248]	; (8021520 <ip4_output_if_src+0x150>)
 8021428:	483c      	ldr	r0, [pc, #240]	; (802151c <ip4_output_if_src+0x14c>)
 802142a:	f001 fce5 	bl	8022df8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802142e:	69fb      	ldr	r3, [r7, #28]
 8021430:	78fa      	ldrb	r2, [r7, #3]
 8021432:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8021434:	69fb      	ldr	r3, [r7, #28]
 8021436:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802143a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	681a      	ldr	r2, [r3, #0]
 8021440:	69fb      	ldr	r3, [r7, #28]
 8021442:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021444:	8b7b      	ldrh	r3, [r7, #26]
 8021446:	089b      	lsrs	r3, r3, #2
 8021448:	b29b      	uxth	r3, r3
 802144a:	b2db      	uxtb	r3, r3
 802144c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021450:	b2da      	uxtb	r2, r3
 8021452:	69fb      	ldr	r3, [r7, #28]
 8021454:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8021456:	69fb      	ldr	r3, [r7, #28]
 8021458:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802145c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802145e:	68fb      	ldr	r3, [r7, #12]
 8021460:	891b      	ldrh	r3, [r3, #8]
 8021462:	4618      	mov	r0, r3
 8021464:	f7f5 ff02 	bl	801726c <lwip_htons>
 8021468:	4603      	mov	r3, r0
 802146a:	461a      	mov	r2, r3
 802146c:	69fb      	ldr	r3, [r7, #28]
 802146e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021470:	69fb      	ldr	r3, [r7, #28]
 8021472:	2200      	movs	r2, #0
 8021474:	719a      	strb	r2, [r3, #6]
 8021476:	2200      	movs	r2, #0
 8021478:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802147a:	4b2a      	ldr	r3, [pc, #168]	; (8021524 <ip4_output_if_src+0x154>)
 802147c:	881b      	ldrh	r3, [r3, #0]
 802147e:	4618      	mov	r0, r3
 8021480:	f7f5 fef4 	bl	801726c <lwip_htons>
 8021484:	4603      	mov	r3, r0
 8021486:	461a      	mov	r2, r3
 8021488:	69fb      	ldr	r3, [r7, #28]
 802148a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 802148c:	4b25      	ldr	r3, [pc, #148]	; (8021524 <ip4_output_if_src+0x154>)
 802148e:	881b      	ldrh	r3, [r3, #0]
 8021490:	3301      	adds	r3, #1
 8021492:	b29a      	uxth	r2, r3
 8021494:	4b23      	ldr	r3, [pc, #140]	; (8021524 <ip4_output_if_src+0x154>)
 8021496:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021498:	68bb      	ldr	r3, [r7, #8]
 802149a:	2b00      	cmp	r3, #0
 802149c:	d104      	bne.n	80214a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802149e:	4b22      	ldr	r3, [pc, #136]	; (8021528 <ip4_output_if_src+0x158>)
 80214a0:	681a      	ldr	r2, [r3, #0]
 80214a2:	69fb      	ldr	r3, [r7, #28]
 80214a4:	60da      	str	r2, [r3, #12]
 80214a6:	e003      	b.n	80214b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80214a8:	68bb      	ldr	r3, [r7, #8]
 80214aa:	681a      	ldr	r2, [r3, #0]
 80214ac:	69fb      	ldr	r3, [r7, #28]
 80214ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80214b0:	69fb      	ldr	r3, [r7, #28]
 80214b2:	2200      	movs	r2, #0
 80214b4:	729a      	strb	r2, [r3, #10]
 80214b6:	2200      	movs	r2, #0
 80214b8:	72da      	strb	r2, [r3, #11]
 80214ba:	e00f      	b.n	80214dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80214bc:	68fb      	ldr	r3, [r7, #12]
 80214be:	895b      	ldrh	r3, [r3, #10]
 80214c0:	2b13      	cmp	r3, #19
 80214c2:	d802      	bhi.n	80214ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80214c4:	f06f 0301 	mvn.w	r3, #1
 80214c8:	e020      	b.n	802150c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80214ca:	68fb      	ldr	r3, [r7, #12]
 80214cc:	685b      	ldr	r3, [r3, #4]
 80214ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80214d0:	69fb      	ldr	r3, [r7, #28]
 80214d2:	691b      	ldr	r3, [r3, #16]
 80214d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80214d6:	f107 0314 	add.w	r3, r7, #20
 80214da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80214dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	d00c      	beq.n	80214fe <ip4_output_if_src+0x12e>
 80214e4:	68fb      	ldr	r3, [r7, #12]
 80214e6:	891a      	ldrh	r2, [r3, #8]
 80214e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80214ec:	429a      	cmp	r2, r3
 80214ee:	d906      	bls.n	80214fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80214f0:	687a      	ldr	r2, [r7, #4]
 80214f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80214f4:	68f8      	ldr	r0, [r7, #12]
 80214f6:	f000 fd53 	bl	8021fa0 <ip4_frag>
 80214fa:	4603      	mov	r3, r0
 80214fc:	e006      	b.n	802150c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80214fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021500:	695b      	ldr	r3, [r3, #20]
 8021502:	687a      	ldr	r2, [r7, #4]
 8021504:	68f9      	ldr	r1, [r7, #12]
 8021506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021508:	4798      	blx	r3
 802150a:	4603      	mov	r3, r0
}
 802150c:	4618      	mov	r0, r3
 802150e:	3720      	adds	r7, #32
 8021510:	46bd      	mov	sp, r7
 8021512:	bd80      	pop	{r7, pc}
 8021514:	08027518 	.word	0x08027518
 8021518:	0802754c 	.word	0x0802754c
 802151c:	08027558 	.word	0x08027558
 8021520:	08027580 	.word	0x08027580
 8021524:	20061de6 	.word	0x20061de6
 8021528:	08027bb0 	.word	0x08027bb0

0802152c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 802152c:	b480      	push	{r7}
 802152e:	b085      	sub	sp, #20
 8021530:	af00      	add	r7, sp, #0
 8021532:	6078      	str	r0, [r7, #4]
 8021534:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8021536:	687b      	ldr	r3, [r7, #4]
 8021538:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021540:	d002      	beq.n	8021548 <ip4_addr_isbroadcast_u32+0x1c>
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	2b00      	cmp	r3, #0
 8021546:	d101      	bne.n	802154c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8021548:	2301      	movs	r3, #1
 802154a:	e02a      	b.n	80215a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 802154c:	683b      	ldr	r3, [r7, #0]
 802154e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021552:	f003 0302 	and.w	r3, r3, #2
 8021556:	2b00      	cmp	r3, #0
 8021558:	d101      	bne.n	802155e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802155a:	2300      	movs	r3, #0
 802155c:	e021      	b.n	80215a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802155e:	683b      	ldr	r3, [r7, #0]
 8021560:	3304      	adds	r3, #4
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	687a      	ldr	r2, [r7, #4]
 8021566:	429a      	cmp	r2, r3
 8021568:	d101      	bne.n	802156e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802156a:	2300      	movs	r3, #0
 802156c:	e019      	b.n	80215a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802156e:	68fa      	ldr	r2, [r7, #12]
 8021570:	683b      	ldr	r3, [r7, #0]
 8021572:	3304      	adds	r3, #4
 8021574:	681b      	ldr	r3, [r3, #0]
 8021576:	405a      	eors	r2, r3
 8021578:	683b      	ldr	r3, [r7, #0]
 802157a:	3308      	adds	r3, #8
 802157c:	681b      	ldr	r3, [r3, #0]
 802157e:	4013      	ands	r3, r2
 8021580:	2b00      	cmp	r3, #0
 8021582:	d10d      	bne.n	80215a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021584:	683b      	ldr	r3, [r7, #0]
 8021586:	3308      	adds	r3, #8
 8021588:	681b      	ldr	r3, [r3, #0]
 802158a:	43da      	mvns	r2, r3
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021590:	683b      	ldr	r3, [r7, #0]
 8021592:	3308      	adds	r3, #8
 8021594:	681b      	ldr	r3, [r3, #0]
 8021596:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021598:	429a      	cmp	r2, r3
 802159a:	d101      	bne.n	80215a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 802159c:	2301      	movs	r3, #1
 802159e:	e000      	b.n	80215a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80215a0:	2300      	movs	r3, #0
  }
}
 80215a2:	4618      	mov	r0, r3
 80215a4:	3714      	adds	r7, #20
 80215a6:	46bd      	mov	sp, r7
 80215a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ac:	4770      	bx	lr
	...

080215b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80215b0:	b580      	push	{r7, lr}
 80215b2:	b084      	sub	sp, #16
 80215b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80215b6:	2300      	movs	r3, #0
 80215b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80215ba:	4b12      	ldr	r3, [pc, #72]	; (8021604 <ip_reass_tmr+0x54>)
 80215bc:	681b      	ldr	r3, [r3, #0]
 80215be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80215c0:	e018      	b.n	80215f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80215c2:	68fb      	ldr	r3, [r7, #12]
 80215c4:	7fdb      	ldrb	r3, [r3, #31]
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d00b      	beq.n	80215e2 <ip_reass_tmr+0x32>
      r->timer--;
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	7fdb      	ldrb	r3, [r3, #31]
 80215ce:	3b01      	subs	r3, #1
 80215d0:	b2da      	uxtb	r2, r3
 80215d2:	68fb      	ldr	r3, [r7, #12]
 80215d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80215d6:	68fb      	ldr	r3, [r7, #12]
 80215d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80215da:	68fb      	ldr	r3, [r7, #12]
 80215dc:	681b      	ldr	r3, [r3, #0]
 80215de:	60fb      	str	r3, [r7, #12]
 80215e0:	e008      	b.n	80215f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80215e2:	68fb      	ldr	r3, [r7, #12]
 80215e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80215e6:	68fb      	ldr	r3, [r7, #12]
 80215e8:	681b      	ldr	r3, [r3, #0]
 80215ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80215ec:	68b9      	ldr	r1, [r7, #8]
 80215ee:	6878      	ldr	r0, [r7, #4]
 80215f0:	f000 f80a 	bl	8021608 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80215f4:	68fb      	ldr	r3, [r7, #12]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d1e3      	bne.n	80215c2 <ip_reass_tmr+0x12>
    }
  }
}
 80215fa:	bf00      	nop
 80215fc:	bf00      	nop
 80215fe:	3710      	adds	r7, #16
 8021600:	46bd      	mov	sp, r7
 8021602:	bd80      	pop	{r7, pc}
 8021604:	20061de8 	.word	0x20061de8

08021608 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021608:	b580      	push	{r7, lr}
 802160a:	b088      	sub	sp, #32
 802160c:	af00      	add	r7, sp, #0
 802160e:	6078      	str	r0, [r7, #4]
 8021610:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021612:	2300      	movs	r3, #0
 8021614:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021616:	683a      	ldr	r2, [r7, #0]
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	429a      	cmp	r2, r3
 802161c:	d105      	bne.n	802162a <ip_reass_free_complete_datagram+0x22>
 802161e:	4b45      	ldr	r3, [pc, #276]	; (8021734 <ip_reass_free_complete_datagram+0x12c>)
 8021620:	22ab      	movs	r2, #171	; 0xab
 8021622:	4945      	ldr	r1, [pc, #276]	; (8021738 <ip_reass_free_complete_datagram+0x130>)
 8021624:	4845      	ldr	r0, [pc, #276]	; (802173c <ip_reass_free_complete_datagram+0x134>)
 8021626:	f001 fbe7 	bl	8022df8 <iprintf>
  if (prev != NULL) {
 802162a:	683b      	ldr	r3, [r7, #0]
 802162c:	2b00      	cmp	r3, #0
 802162e:	d00a      	beq.n	8021646 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021630:	683b      	ldr	r3, [r7, #0]
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	687a      	ldr	r2, [r7, #4]
 8021636:	429a      	cmp	r2, r3
 8021638:	d005      	beq.n	8021646 <ip_reass_free_complete_datagram+0x3e>
 802163a:	4b3e      	ldr	r3, [pc, #248]	; (8021734 <ip_reass_free_complete_datagram+0x12c>)
 802163c:	22ad      	movs	r2, #173	; 0xad
 802163e:	4940      	ldr	r1, [pc, #256]	; (8021740 <ip_reass_free_complete_datagram+0x138>)
 8021640:	483e      	ldr	r0, [pc, #248]	; (802173c <ip_reass_free_complete_datagram+0x134>)
 8021642:	f001 fbd9 	bl	8022df8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	685b      	ldr	r3, [r3, #4]
 802164a:	685b      	ldr	r3, [r3, #4]
 802164c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802164e:	697b      	ldr	r3, [r7, #20]
 8021650:	889b      	ldrh	r3, [r3, #4]
 8021652:	b29b      	uxth	r3, r3
 8021654:	2b00      	cmp	r3, #0
 8021656:	d12a      	bne.n	80216ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	685b      	ldr	r3, [r3, #4]
 802165c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802165e:	697b      	ldr	r3, [r7, #20]
 8021660:	681a      	ldr	r2, [r3, #0]
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021666:	69bb      	ldr	r3, [r7, #24]
 8021668:	6858      	ldr	r0, [r3, #4]
 802166a:	687b      	ldr	r3, [r7, #4]
 802166c:	3308      	adds	r3, #8
 802166e:	2214      	movs	r2, #20
 8021670:	4619      	mov	r1, r3
 8021672:	f001 fd32 	bl	80230da <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021676:	2101      	movs	r1, #1
 8021678:	69b8      	ldr	r0, [r7, #24]
 802167a:	f7ff fc3d 	bl	8020ef8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802167e:	69b8      	ldr	r0, [r7, #24]
 8021680:	f7f7 fb2c 	bl	8018cdc <pbuf_clen>
 8021684:	4603      	mov	r3, r0
 8021686:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021688:	8bfa      	ldrh	r2, [r7, #30]
 802168a:	8a7b      	ldrh	r3, [r7, #18]
 802168c:	4413      	add	r3, r2
 802168e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021692:	db05      	blt.n	80216a0 <ip_reass_free_complete_datagram+0x98>
 8021694:	4b27      	ldr	r3, [pc, #156]	; (8021734 <ip_reass_free_complete_datagram+0x12c>)
 8021696:	22bc      	movs	r2, #188	; 0xbc
 8021698:	492a      	ldr	r1, [pc, #168]	; (8021744 <ip_reass_free_complete_datagram+0x13c>)
 802169a:	4828      	ldr	r0, [pc, #160]	; (802173c <ip_reass_free_complete_datagram+0x134>)
 802169c:	f001 fbac 	bl	8022df8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80216a0:	8bfa      	ldrh	r2, [r7, #30]
 80216a2:	8a7b      	ldrh	r3, [r7, #18]
 80216a4:	4413      	add	r3, r2
 80216a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80216a8:	69b8      	ldr	r0, [r7, #24]
 80216aa:	f7f7 fa89 	bl	8018bc0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	685b      	ldr	r3, [r3, #4]
 80216b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80216b4:	e01f      	b.n	80216f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80216b6:	69bb      	ldr	r3, [r7, #24]
 80216b8:	685b      	ldr	r3, [r3, #4]
 80216ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 80216bc:	69bb      	ldr	r3, [r7, #24]
 80216be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80216c0:	697b      	ldr	r3, [r7, #20]
 80216c2:	681b      	ldr	r3, [r3, #0]
 80216c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80216c6:	68f8      	ldr	r0, [r7, #12]
 80216c8:	f7f7 fb08 	bl	8018cdc <pbuf_clen>
 80216cc:	4603      	mov	r3, r0
 80216ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80216d0:	8bfa      	ldrh	r2, [r7, #30]
 80216d2:	8a7b      	ldrh	r3, [r7, #18]
 80216d4:	4413      	add	r3, r2
 80216d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80216da:	db05      	blt.n	80216e8 <ip_reass_free_complete_datagram+0xe0>
 80216dc:	4b15      	ldr	r3, [pc, #84]	; (8021734 <ip_reass_free_complete_datagram+0x12c>)
 80216de:	22cc      	movs	r2, #204	; 0xcc
 80216e0:	4918      	ldr	r1, [pc, #96]	; (8021744 <ip_reass_free_complete_datagram+0x13c>)
 80216e2:	4816      	ldr	r0, [pc, #88]	; (802173c <ip_reass_free_complete_datagram+0x134>)
 80216e4:	f001 fb88 	bl	8022df8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80216e8:	8bfa      	ldrh	r2, [r7, #30]
 80216ea:	8a7b      	ldrh	r3, [r7, #18]
 80216ec:	4413      	add	r3, r2
 80216ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80216f0:	68f8      	ldr	r0, [r7, #12]
 80216f2:	f7f7 fa65 	bl	8018bc0 <pbuf_free>
  while (p != NULL) {
 80216f6:	69bb      	ldr	r3, [r7, #24]
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d1dc      	bne.n	80216b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80216fc:	6839      	ldr	r1, [r7, #0]
 80216fe:	6878      	ldr	r0, [r7, #4]
 8021700:	f000 f8c2 	bl	8021888 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021704:	4b10      	ldr	r3, [pc, #64]	; (8021748 <ip_reass_free_complete_datagram+0x140>)
 8021706:	881b      	ldrh	r3, [r3, #0]
 8021708:	8bfa      	ldrh	r2, [r7, #30]
 802170a:	429a      	cmp	r2, r3
 802170c:	d905      	bls.n	802171a <ip_reass_free_complete_datagram+0x112>
 802170e:	4b09      	ldr	r3, [pc, #36]	; (8021734 <ip_reass_free_complete_datagram+0x12c>)
 8021710:	22d2      	movs	r2, #210	; 0xd2
 8021712:	490e      	ldr	r1, [pc, #56]	; (802174c <ip_reass_free_complete_datagram+0x144>)
 8021714:	4809      	ldr	r0, [pc, #36]	; (802173c <ip_reass_free_complete_datagram+0x134>)
 8021716:	f001 fb6f 	bl	8022df8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802171a:	4b0b      	ldr	r3, [pc, #44]	; (8021748 <ip_reass_free_complete_datagram+0x140>)
 802171c:	881a      	ldrh	r2, [r3, #0]
 802171e:	8bfb      	ldrh	r3, [r7, #30]
 8021720:	1ad3      	subs	r3, r2, r3
 8021722:	b29a      	uxth	r2, r3
 8021724:	4b08      	ldr	r3, [pc, #32]	; (8021748 <ip_reass_free_complete_datagram+0x140>)
 8021726:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021728:	8bfb      	ldrh	r3, [r7, #30]
}
 802172a:	4618      	mov	r0, r3
 802172c:	3720      	adds	r7, #32
 802172e:	46bd      	mov	sp, r7
 8021730:	bd80      	pop	{r7, pc}
 8021732:	bf00      	nop
 8021734:	080275b0 	.word	0x080275b0
 8021738:	080275ec 	.word	0x080275ec
 802173c:	080275f8 	.word	0x080275f8
 8021740:	08027620 	.word	0x08027620
 8021744:	08027634 	.word	0x08027634
 8021748:	20061dec 	.word	0x20061dec
 802174c:	08027654 	.word	0x08027654

08021750 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021750:	b580      	push	{r7, lr}
 8021752:	b08a      	sub	sp, #40	; 0x28
 8021754:	af00      	add	r7, sp, #0
 8021756:	6078      	str	r0, [r7, #4]
 8021758:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802175a:	2300      	movs	r3, #0
 802175c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802175e:	2300      	movs	r3, #0
 8021760:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021762:	2300      	movs	r3, #0
 8021764:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021766:	2300      	movs	r3, #0
 8021768:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802176a:	2300      	movs	r3, #0
 802176c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802176e:	4b28      	ldr	r3, [pc, #160]	; (8021810 <ip_reass_remove_oldest_datagram+0xc0>)
 8021770:	681b      	ldr	r3, [r3, #0]
 8021772:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021774:	e030      	b.n	80217d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8021776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021778:	695a      	ldr	r2, [r3, #20]
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	68db      	ldr	r3, [r3, #12]
 802177e:	429a      	cmp	r2, r3
 8021780:	d10c      	bne.n	802179c <ip_reass_remove_oldest_datagram+0x4c>
 8021782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021784:	699a      	ldr	r2, [r3, #24]
 8021786:	687b      	ldr	r3, [r7, #4]
 8021788:	691b      	ldr	r3, [r3, #16]
 802178a:	429a      	cmp	r2, r3
 802178c:	d106      	bne.n	802179c <ip_reass_remove_oldest_datagram+0x4c>
 802178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021790:	899a      	ldrh	r2, [r3, #12]
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	889b      	ldrh	r3, [r3, #4]
 8021796:	b29b      	uxth	r3, r3
 8021798:	429a      	cmp	r2, r3
 802179a:	d014      	beq.n	80217c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 802179c:	693b      	ldr	r3, [r7, #16]
 802179e:	3301      	adds	r3, #1
 80217a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80217a2:	6a3b      	ldr	r3, [r7, #32]
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	d104      	bne.n	80217b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80217a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80217ac:	69fb      	ldr	r3, [r7, #28]
 80217ae:	61bb      	str	r3, [r7, #24]
 80217b0:	e009      	b.n	80217c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80217b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217b4:	7fda      	ldrb	r2, [r3, #31]
 80217b6:	6a3b      	ldr	r3, [r7, #32]
 80217b8:	7fdb      	ldrb	r3, [r3, #31]
 80217ba:	429a      	cmp	r2, r3
 80217bc:	d803      	bhi.n	80217c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80217be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80217c2:	69fb      	ldr	r3, [r7, #28]
 80217c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80217c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217c8:	681b      	ldr	r3, [r3, #0]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d001      	beq.n	80217d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80217ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80217d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217d4:	681b      	ldr	r3, [r3, #0]
 80217d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80217d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217da:	2b00      	cmp	r3, #0
 80217dc:	d1cb      	bne.n	8021776 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80217de:	6a3b      	ldr	r3, [r7, #32]
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	d008      	beq.n	80217f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80217e4:	69b9      	ldr	r1, [r7, #24]
 80217e6:	6a38      	ldr	r0, [r7, #32]
 80217e8:	f7ff ff0e 	bl	8021608 <ip_reass_free_complete_datagram>
 80217ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80217ee:	697a      	ldr	r2, [r7, #20]
 80217f0:	68fb      	ldr	r3, [r7, #12]
 80217f2:	4413      	add	r3, r2
 80217f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80217f6:	697a      	ldr	r2, [r7, #20]
 80217f8:	683b      	ldr	r3, [r7, #0]
 80217fa:	429a      	cmp	r2, r3
 80217fc:	da02      	bge.n	8021804 <ip_reass_remove_oldest_datagram+0xb4>
 80217fe:	693b      	ldr	r3, [r7, #16]
 8021800:	2b01      	cmp	r3, #1
 8021802:	dcac      	bgt.n	802175e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021804:	697b      	ldr	r3, [r7, #20]
}
 8021806:	4618      	mov	r0, r3
 8021808:	3728      	adds	r7, #40	; 0x28
 802180a:	46bd      	mov	sp, r7
 802180c:	bd80      	pop	{r7, pc}
 802180e:	bf00      	nop
 8021810:	20061de8 	.word	0x20061de8

08021814 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021814:	b580      	push	{r7, lr}
 8021816:	b084      	sub	sp, #16
 8021818:	af00      	add	r7, sp, #0
 802181a:	6078      	str	r0, [r7, #4]
 802181c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802181e:	2004      	movs	r0, #4
 8021820:	f7f6 fab4 	bl	8017d8c <memp_malloc>
 8021824:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	2b00      	cmp	r3, #0
 802182a:	d110      	bne.n	802184e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802182c:	6839      	ldr	r1, [r7, #0]
 802182e:	6878      	ldr	r0, [r7, #4]
 8021830:	f7ff ff8e 	bl	8021750 <ip_reass_remove_oldest_datagram>
 8021834:	4602      	mov	r2, r0
 8021836:	683b      	ldr	r3, [r7, #0]
 8021838:	4293      	cmp	r3, r2
 802183a:	dc03      	bgt.n	8021844 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802183c:	2004      	movs	r0, #4
 802183e:	f7f6 faa5 	bl	8017d8c <memp_malloc>
 8021842:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021844:	68fb      	ldr	r3, [r7, #12]
 8021846:	2b00      	cmp	r3, #0
 8021848:	d101      	bne.n	802184e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802184a:	2300      	movs	r3, #0
 802184c:	e016      	b.n	802187c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802184e:	2220      	movs	r2, #32
 8021850:	2100      	movs	r1, #0
 8021852:	68f8      	ldr	r0, [r7, #12]
 8021854:	f001 fba8 	bl	8022fa8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021858:	68fb      	ldr	r3, [r7, #12]
 802185a:	220f      	movs	r2, #15
 802185c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802185e:	4b09      	ldr	r3, [pc, #36]	; (8021884 <ip_reass_enqueue_new_datagram+0x70>)
 8021860:	681a      	ldr	r2, [r3, #0]
 8021862:	68fb      	ldr	r3, [r7, #12]
 8021864:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021866:	4a07      	ldr	r2, [pc, #28]	; (8021884 <ip_reass_enqueue_new_datagram+0x70>)
 8021868:	68fb      	ldr	r3, [r7, #12]
 802186a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802186c:	68fb      	ldr	r3, [r7, #12]
 802186e:	3308      	adds	r3, #8
 8021870:	2214      	movs	r2, #20
 8021872:	6879      	ldr	r1, [r7, #4]
 8021874:	4618      	mov	r0, r3
 8021876:	f001 fc30 	bl	80230da <memcpy>
  return ipr;
 802187a:	68fb      	ldr	r3, [r7, #12]
}
 802187c:	4618      	mov	r0, r3
 802187e:	3710      	adds	r7, #16
 8021880:	46bd      	mov	sp, r7
 8021882:	bd80      	pop	{r7, pc}
 8021884:	20061de8 	.word	0x20061de8

08021888 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021888:	b580      	push	{r7, lr}
 802188a:	b082      	sub	sp, #8
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
 8021890:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021892:	4b10      	ldr	r3, [pc, #64]	; (80218d4 <ip_reass_dequeue_datagram+0x4c>)
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	687a      	ldr	r2, [r7, #4]
 8021898:	429a      	cmp	r2, r3
 802189a:	d104      	bne.n	80218a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 802189c:	687b      	ldr	r3, [r7, #4]
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	4a0c      	ldr	r2, [pc, #48]	; (80218d4 <ip_reass_dequeue_datagram+0x4c>)
 80218a2:	6013      	str	r3, [r2, #0]
 80218a4:	e00d      	b.n	80218c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80218a6:	683b      	ldr	r3, [r7, #0]
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d106      	bne.n	80218ba <ip_reass_dequeue_datagram+0x32>
 80218ac:	4b0a      	ldr	r3, [pc, #40]	; (80218d8 <ip_reass_dequeue_datagram+0x50>)
 80218ae:	f240 1245 	movw	r2, #325	; 0x145
 80218b2:	490a      	ldr	r1, [pc, #40]	; (80218dc <ip_reass_dequeue_datagram+0x54>)
 80218b4:	480a      	ldr	r0, [pc, #40]	; (80218e0 <ip_reass_dequeue_datagram+0x58>)
 80218b6:	f001 fa9f 	bl	8022df8 <iprintf>
    prev->next = ipr->next;
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	681a      	ldr	r2, [r3, #0]
 80218be:	683b      	ldr	r3, [r7, #0]
 80218c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80218c2:	6879      	ldr	r1, [r7, #4]
 80218c4:	2004      	movs	r0, #4
 80218c6:	f7f6 fad7 	bl	8017e78 <memp_free>
}
 80218ca:	bf00      	nop
 80218cc:	3708      	adds	r7, #8
 80218ce:	46bd      	mov	sp, r7
 80218d0:	bd80      	pop	{r7, pc}
 80218d2:	bf00      	nop
 80218d4:	20061de8 	.word	0x20061de8
 80218d8:	080275b0 	.word	0x080275b0
 80218dc:	08027678 	.word	0x08027678
 80218e0:	080275f8 	.word	0x080275f8

080218e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80218e4:	b580      	push	{r7, lr}
 80218e6:	b08c      	sub	sp, #48	; 0x30
 80218e8:	af00      	add	r7, sp, #0
 80218ea:	60f8      	str	r0, [r7, #12]
 80218ec:	60b9      	str	r1, [r7, #8]
 80218ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80218f0:	2300      	movs	r3, #0
 80218f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80218f4:	2301      	movs	r3, #1
 80218f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80218f8:	68bb      	ldr	r3, [r7, #8]
 80218fa:	685b      	ldr	r3, [r3, #4]
 80218fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80218fe:	69fb      	ldr	r3, [r7, #28]
 8021900:	885b      	ldrh	r3, [r3, #2]
 8021902:	b29b      	uxth	r3, r3
 8021904:	4618      	mov	r0, r3
 8021906:	f7f5 fcb1 	bl	801726c <lwip_htons>
 802190a:	4603      	mov	r3, r0
 802190c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802190e:	69fb      	ldr	r3, [r7, #28]
 8021910:	781b      	ldrb	r3, [r3, #0]
 8021912:	f003 030f 	and.w	r3, r3, #15
 8021916:	b2db      	uxtb	r3, r3
 8021918:	009b      	lsls	r3, r3, #2
 802191a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 802191c:	7e7b      	ldrb	r3, [r7, #25]
 802191e:	b29b      	uxth	r3, r3
 8021920:	8b7a      	ldrh	r2, [r7, #26]
 8021922:	429a      	cmp	r2, r3
 8021924:	d202      	bcs.n	802192c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021926:	f04f 33ff 	mov.w	r3, #4294967295
 802192a:	e135      	b.n	8021b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 802192c:	7e7b      	ldrb	r3, [r7, #25]
 802192e:	b29b      	uxth	r3, r3
 8021930:	8b7a      	ldrh	r2, [r7, #26]
 8021932:	1ad3      	subs	r3, r2, r3
 8021934:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021936:	69fb      	ldr	r3, [r7, #28]
 8021938:	88db      	ldrh	r3, [r3, #6]
 802193a:	b29b      	uxth	r3, r3
 802193c:	4618      	mov	r0, r3
 802193e:	f7f5 fc95 	bl	801726c <lwip_htons>
 8021942:	4603      	mov	r3, r0
 8021944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021948:	b29b      	uxth	r3, r3
 802194a:	00db      	lsls	r3, r3, #3
 802194c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802194e:	68bb      	ldr	r3, [r7, #8]
 8021950:	685b      	ldr	r3, [r3, #4]
 8021952:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021956:	2200      	movs	r2, #0
 8021958:	701a      	strb	r2, [r3, #0]
 802195a:	2200      	movs	r2, #0
 802195c:	705a      	strb	r2, [r3, #1]
 802195e:	2200      	movs	r2, #0
 8021960:	709a      	strb	r2, [r3, #2]
 8021962:	2200      	movs	r2, #0
 8021964:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021968:	8afa      	ldrh	r2, [r7, #22]
 802196a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 802196c:	8afa      	ldrh	r2, [r7, #22]
 802196e:	8b7b      	ldrh	r3, [r7, #26]
 8021970:	4413      	add	r3, r2
 8021972:	b29a      	uxth	r2, r3
 8021974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021976:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802197a:	88db      	ldrh	r3, [r3, #6]
 802197c:	b29b      	uxth	r3, r3
 802197e:	8afa      	ldrh	r2, [r7, #22]
 8021980:	429a      	cmp	r2, r3
 8021982:	d902      	bls.n	802198a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021984:	f04f 33ff 	mov.w	r3, #4294967295
 8021988:	e106      	b.n	8021b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802198a:	68fb      	ldr	r3, [r7, #12]
 802198c:	685b      	ldr	r3, [r3, #4]
 802198e:	627b      	str	r3, [r7, #36]	; 0x24
 8021990:	e068      	b.n	8021a64 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021994:	685b      	ldr	r3, [r3, #4]
 8021996:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802199a:	889b      	ldrh	r3, [r3, #4]
 802199c:	b29a      	uxth	r2, r3
 802199e:	693b      	ldr	r3, [r7, #16]
 80219a0:	889b      	ldrh	r3, [r3, #4]
 80219a2:	b29b      	uxth	r3, r3
 80219a4:	429a      	cmp	r2, r3
 80219a6:	d235      	bcs.n	8021a14 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80219a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80219ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80219ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d020      	beq.n	80219f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80219b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219b6:	889b      	ldrh	r3, [r3, #4]
 80219b8:	b29a      	uxth	r2, r3
 80219ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219bc:	88db      	ldrh	r3, [r3, #6]
 80219be:	b29b      	uxth	r3, r3
 80219c0:	429a      	cmp	r2, r3
 80219c2:	d307      	bcc.n	80219d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80219c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219c6:	88db      	ldrh	r3, [r3, #6]
 80219c8:	b29a      	uxth	r2, r3
 80219ca:	693b      	ldr	r3, [r7, #16]
 80219cc:	889b      	ldrh	r3, [r3, #4]
 80219ce:	b29b      	uxth	r3, r3
 80219d0:	429a      	cmp	r2, r3
 80219d2:	d902      	bls.n	80219da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80219d4:	f04f 33ff 	mov.w	r3, #4294967295
 80219d8:	e0de      	b.n	8021b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80219da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219dc:	68ba      	ldr	r2, [r7, #8]
 80219de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80219e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219e2:	88db      	ldrh	r3, [r3, #6]
 80219e4:	b29a      	uxth	r2, r3
 80219e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219e8:	889b      	ldrh	r3, [r3, #4]
 80219ea:	b29b      	uxth	r3, r3
 80219ec:	429a      	cmp	r2, r3
 80219ee:	d03d      	beq.n	8021a6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80219f0:	2300      	movs	r3, #0
 80219f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80219f4:	e03a      	b.n	8021a6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80219f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219f8:	88db      	ldrh	r3, [r3, #6]
 80219fa:	b29a      	uxth	r2, r3
 80219fc:	693b      	ldr	r3, [r7, #16]
 80219fe:	889b      	ldrh	r3, [r3, #4]
 8021a00:	b29b      	uxth	r3, r3
 8021a02:	429a      	cmp	r2, r3
 8021a04:	d902      	bls.n	8021a0c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021a06:	f04f 33ff 	mov.w	r3, #4294967295
 8021a0a:	e0c5      	b.n	8021b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021a0c:	68fb      	ldr	r3, [r7, #12]
 8021a0e:	68ba      	ldr	r2, [r7, #8]
 8021a10:	605a      	str	r2, [r3, #4]
      break;
 8021a12:	e02b      	b.n	8021a6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a16:	889b      	ldrh	r3, [r3, #4]
 8021a18:	b29a      	uxth	r2, r3
 8021a1a:	693b      	ldr	r3, [r7, #16]
 8021a1c:	889b      	ldrh	r3, [r3, #4]
 8021a1e:	b29b      	uxth	r3, r3
 8021a20:	429a      	cmp	r2, r3
 8021a22:	d102      	bne.n	8021a2a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021a24:	f04f 33ff 	mov.w	r3, #4294967295
 8021a28:	e0b6      	b.n	8021b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a2c:	889b      	ldrh	r3, [r3, #4]
 8021a2e:	b29a      	uxth	r2, r3
 8021a30:	693b      	ldr	r3, [r7, #16]
 8021a32:	88db      	ldrh	r3, [r3, #6]
 8021a34:	b29b      	uxth	r3, r3
 8021a36:	429a      	cmp	r2, r3
 8021a38:	d202      	bcs.n	8021a40 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8021a3e:	e0ab      	b.n	8021b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d009      	beq.n	8021a5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a48:	88db      	ldrh	r3, [r3, #6]
 8021a4a:	b29a      	uxth	r2, r3
 8021a4c:	693b      	ldr	r3, [r7, #16]
 8021a4e:	889b      	ldrh	r3, [r3, #4]
 8021a50:	b29b      	uxth	r3, r3
 8021a52:	429a      	cmp	r2, r3
 8021a54:	d001      	beq.n	8021a5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021a56:	2300      	movs	r3, #0
 8021a58:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021a5a:	693b      	ldr	r3, [r7, #16]
 8021a5c:	681b      	ldr	r3, [r3, #0]
 8021a5e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021a60:	693b      	ldr	r3, [r7, #16]
 8021a62:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d193      	bne.n	8021992 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021a6a:	e000      	b.n	8021a6e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021a6c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d12d      	bne.n	8021ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d01c      	beq.n	8021ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a7c:	88db      	ldrh	r3, [r3, #6]
 8021a7e:	b29a      	uxth	r2, r3
 8021a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a82:	889b      	ldrh	r3, [r3, #4]
 8021a84:	b29b      	uxth	r3, r3
 8021a86:	429a      	cmp	r2, r3
 8021a88:	d906      	bls.n	8021a98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021a8a:	4b45      	ldr	r3, [pc, #276]	; (8021ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021a8c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021a90:	4944      	ldr	r1, [pc, #272]	; (8021ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021a92:	4845      	ldr	r0, [pc, #276]	; (8021ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021a94:	f001 f9b0 	bl	8022df8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a9a:	68ba      	ldr	r2, [r7, #8]
 8021a9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021aa0:	88db      	ldrh	r3, [r3, #6]
 8021aa2:	b29a      	uxth	r2, r3
 8021aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aa6:	889b      	ldrh	r3, [r3, #4]
 8021aa8:	b29b      	uxth	r3, r3
 8021aaa:	429a      	cmp	r2, r3
 8021aac:	d010      	beq.n	8021ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021aae:	2300      	movs	r3, #0
 8021ab0:	623b      	str	r3, [r7, #32]
 8021ab2:	e00d      	b.n	8021ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021ab4:	68fb      	ldr	r3, [r7, #12]
 8021ab6:	685b      	ldr	r3, [r3, #4]
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d006      	beq.n	8021aca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021abc:	4b38      	ldr	r3, [pc, #224]	; (8021ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021abe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8021ac2:	493a      	ldr	r1, [pc, #232]	; (8021bac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021ac4:	4838      	ldr	r0, [pc, #224]	; (8021ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021ac6:	f001 f997 	bl	8022df8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021aca:	68fb      	ldr	r3, [r7, #12]
 8021acc:	68ba      	ldr	r2, [r7, #8]
 8021ace:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d105      	bne.n	8021ae2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021ad6:	68fb      	ldr	r3, [r7, #12]
 8021ad8:	7f9b      	ldrb	r3, [r3, #30]
 8021ada:	f003 0301 	and.w	r3, r3, #1
 8021ade:	2b00      	cmp	r3, #0
 8021ae0:	d059      	beq.n	8021b96 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021ae2:	6a3b      	ldr	r3, [r7, #32]
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d04f      	beq.n	8021b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	685b      	ldr	r3, [r3, #4]
 8021aec:	2b00      	cmp	r3, #0
 8021aee:	d006      	beq.n	8021afe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021af0:	68fb      	ldr	r3, [r7, #12]
 8021af2:	685b      	ldr	r3, [r3, #4]
 8021af4:	685b      	ldr	r3, [r3, #4]
 8021af6:	889b      	ldrh	r3, [r3, #4]
 8021af8:	b29b      	uxth	r3, r3
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d002      	beq.n	8021b04 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021afe:	2300      	movs	r3, #0
 8021b00:	623b      	str	r3, [r7, #32]
 8021b02:	e041      	b.n	8021b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b06:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021b0e:	e012      	b.n	8021b36 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b12:	685b      	ldr	r3, [r3, #4]
 8021b14:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b18:	88db      	ldrh	r3, [r3, #6]
 8021b1a:	b29a      	uxth	r2, r3
 8021b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b1e:	889b      	ldrh	r3, [r3, #4]
 8021b20:	b29b      	uxth	r3, r3
 8021b22:	429a      	cmp	r2, r3
 8021b24:	d002      	beq.n	8021b2c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021b26:	2300      	movs	r3, #0
 8021b28:	623b      	str	r3, [r7, #32]
            break;
 8021b2a:	e007      	b.n	8021b3c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b2e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b32:	681b      	ldr	r3, [r3, #0]
 8021b34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d1e9      	bne.n	8021b10 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021b3c:	6a3b      	ldr	r3, [r7, #32]
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d022      	beq.n	8021b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021b42:	68fb      	ldr	r3, [r7, #12]
 8021b44:	685b      	ldr	r3, [r3, #4]
 8021b46:	2b00      	cmp	r3, #0
 8021b48:	d106      	bne.n	8021b58 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021b4a:	4b15      	ldr	r3, [pc, #84]	; (8021ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021b4c:	f240 12df 	movw	r2, #479	; 0x1df
 8021b50:	4917      	ldr	r1, [pc, #92]	; (8021bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021b52:	4815      	ldr	r0, [pc, #84]	; (8021ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021b54:	f001 f950 	bl	8022df8 <iprintf>
          LWIP_ASSERT("sanity check",
 8021b58:	68fb      	ldr	r3, [r7, #12]
 8021b5a:	685b      	ldr	r3, [r3, #4]
 8021b5c:	685b      	ldr	r3, [r3, #4]
 8021b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021b60:	429a      	cmp	r2, r3
 8021b62:	d106      	bne.n	8021b72 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021b64:	4b0e      	ldr	r3, [pc, #56]	; (8021ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021b66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021b6a:	4911      	ldr	r1, [pc, #68]	; (8021bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021b6c:	480e      	ldr	r0, [pc, #56]	; (8021ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021b6e:	f001 f943 	bl	8022df8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d006      	beq.n	8021b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021b7a:	4b09      	ldr	r3, [pc, #36]	; (8021ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021b7c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021b80:	490c      	ldr	r1, [pc, #48]	; (8021bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021b82:	4809      	ldr	r0, [pc, #36]	; (8021ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021b84:	f001 f938 	bl	8022df8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021b88:	6a3b      	ldr	r3, [r7, #32]
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	bf14      	ite	ne
 8021b8e:	2301      	movne	r3, #1
 8021b90:	2300      	moveq	r3, #0
 8021b92:	b2db      	uxtb	r3, r3
 8021b94:	e000      	b.n	8021b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021b96:	2300      	movs	r3, #0
}
 8021b98:	4618      	mov	r0, r3
 8021b9a:	3730      	adds	r7, #48	; 0x30
 8021b9c:	46bd      	mov	sp, r7
 8021b9e:	bd80      	pop	{r7, pc}
 8021ba0:	080275b0 	.word	0x080275b0
 8021ba4:	08027694 	.word	0x08027694
 8021ba8:	080275f8 	.word	0x080275f8
 8021bac:	080276b4 	.word	0x080276b4
 8021bb0:	080276ec 	.word	0x080276ec
 8021bb4:	080276fc 	.word	0x080276fc

08021bb8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021bb8:	b580      	push	{r7, lr}
 8021bba:	b08e      	sub	sp, #56	; 0x38
 8021bbc:	af00      	add	r7, sp, #0
 8021bbe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	685b      	ldr	r3, [r3, #4]
 8021bc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8021bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bc8:	781b      	ldrb	r3, [r3, #0]
 8021bca:	f003 030f 	and.w	r3, r3, #15
 8021bce:	b2db      	uxtb	r3, r3
 8021bd0:	009b      	lsls	r3, r3, #2
 8021bd2:	b2db      	uxtb	r3, r3
 8021bd4:	2b14      	cmp	r3, #20
 8021bd6:	f040 8171 	bne.w	8021ebc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bdc:	88db      	ldrh	r3, [r3, #6]
 8021bde:	b29b      	uxth	r3, r3
 8021be0:	4618      	mov	r0, r3
 8021be2:	f7f5 fb43 	bl	801726c <lwip_htons>
 8021be6:	4603      	mov	r3, r0
 8021be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021bec:	b29b      	uxth	r3, r3
 8021bee:	00db      	lsls	r3, r3, #3
 8021bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bf4:	885b      	ldrh	r3, [r3, #2]
 8021bf6:	b29b      	uxth	r3, r3
 8021bf8:	4618      	mov	r0, r3
 8021bfa:	f7f5 fb37 	bl	801726c <lwip_htons>
 8021bfe:	4603      	mov	r3, r0
 8021c00:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c04:	781b      	ldrb	r3, [r3, #0]
 8021c06:	f003 030f 	and.w	r3, r3, #15
 8021c0a:	b2db      	uxtb	r3, r3
 8021c0c:	009b      	lsls	r3, r3, #2
 8021c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021c16:	b29b      	uxth	r3, r3
 8021c18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021c1a:	429a      	cmp	r2, r3
 8021c1c:	f0c0 8150 	bcc.w	8021ec0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021c24:	b29b      	uxth	r3, r3
 8021c26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021c28:	1ad3      	subs	r3, r2, r3
 8021c2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021c2c:	6878      	ldr	r0, [r7, #4]
 8021c2e:	f7f7 f855 	bl	8018cdc <pbuf_clen>
 8021c32:	4603      	mov	r3, r0
 8021c34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021c36:	4b8c      	ldr	r3, [pc, #560]	; (8021e68 <ip4_reass+0x2b0>)
 8021c38:	881b      	ldrh	r3, [r3, #0]
 8021c3a:	461a      	mov	r2, r3
 8021c3c:	8c3b      	ldrh	r3, [r7, #32]
 8021c3e:	4413      	add	r3, r2
 8021c40:	2b0a      	cmp	r3, #10
 8021c42:	dd10      	ble.n	8021c66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021c44:	8c3b      	ldrh	r3, [r7, #32]
 8021c46:	4619      	mov	r1, r3
 8021c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021c4a:	f7ff fd81 	bl	8021750 <ip_reass_remove_oldest_datagram>
 8021c4e:	4603      	mov	r3, r0
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	f000 8137 	beq.w	8021ec4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021c56:	4b84      	ldr	r3, [pc, #528]	; (8021e68 <ip4_reass+0x2b0>)
 8021c58:	881b      	ldrh	r3, [r3, #0]
 8021c5a:	461a      	mov	r2, r3
 8021c5c:	8c3b      	ldrh	r3, [r7, #32]
 8021c5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021c60:	2b0a      	cmp	r3, #10
 8021c62:	f300 812f 	bgt.w	8021ec4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021c66:	4b81      	ldr	r3, [pc, #516]	; (8021e6c <ip4_reass+0x2b4>)
 8021c68:	681b      	ldr	r3, [r3, #0]
 8021c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8021c6c:	e015      	b.n	8021c9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c70:	695a      	ldr	r2, [r3, #20]
 8021c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c74:	68db      	ldr	r3, [r3, #12]
 8021c76:	429a      	cmp	r2, r3
 8021c78:	d10c      	bne.n	8021c94 <ip4_reass+0xdc>
 8021c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c7c:	699a      	ldr	r2, [r3, #24]
 8021c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c80:	691b      	ldr	r3, [r3, #16]
 8021c82:	429a      	cmp	r2, r3
 8021c84:	d106      	bne.n	8021c94 <ip4_reass+0xdc>
 8021c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c88:	899a      	ldrh	r2, [r3, #12]
 8021c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c8c:	889b      	ldrh	r3, [r3, #4]
 8021c8e:	b29b      	uxth	r3, r3
 8021c90:	429a      	cmp	r2, r3
 8021c92:	d006      	beq.n	8021ca2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c96:	681b      	ldr	r3, [r3, #0]
 8021c98:	633b      	str	r3, [r7, #48]	; 0x30
 8021c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d1e6      	bne.n	8021c6e <ip4_reass+0xb6>
 8021ca0:	e000      	b.n	8021ca4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021ca2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	d109      	bne.n	8021cbe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021caa:	8c3b      	ldrh	r3, [r7, #32]
 8021cac:	4619      	mov	r1, r3
 8021cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021cb0:	f7ff fdb0 	bl	8021814 <ip_reass_enqueue_new_datagram>
 8021cb4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8021cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d11c      	bne.n	8021cf6 <ip4_reass+0x13e>
      goto nullreturn;
 8021cbc:	e105      	b.n	8021eca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cc0:	88db      	ldrh	r3, [r3, #6]
 8021cc2:	b29b      	uxth	r3, r3
 8021cc4:	4618      	mov	r0, r3
 8021cc6:	f7f5 fad1 	bl	801726c <lwip_htons>
 8021cca:	4603      	mov	r3, r0
 8021ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d110      	bne.n	8021cf6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cd6:	89db      	ldrh	r3, [r3, #14]
 8021cd8:	4618      	mov	r0, r3
 8021cda:	f7f5 fac7 	bl	801726c <lwip_htons>
 8021cde:	4603      	mov	r3, r0
 8021ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	d006      	beq.n	8021cf6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cea:	3308      	adds	r3, #8
 8021cec:	2214      	movs	r2, #20
 8021cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021cf0:	4618      	mov	r0, r3
 8021cf2:	f001 f9f2 	bl	80230da <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cf8:	88db      	ldrh	r3, [r3, #6]
 8021cfa:	b29b      	uxth	r3, r3
 8021cfc:	f003 0320 	and.w	r3, r3, #32
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	bf0c      	ite	eq
 8021d04:	2301      	moveq	r3, #1
 8021d06:	2300      	movne	r3, #0
 8021d08:	b2db      	uxtb	r3, r3
 8021d0a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021d0c:	69fb      	ldr	r3, [r7, #28]
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d00e      	beq.n	8021d30 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8021d12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021d16:	4413      	add	r3, r2
 8021d18:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021d1a:	8b7a      	ldrh	r2, [r7, #26]
 8021d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021d1e:	429a      	cmp	r2, r3
 8021d20:	f0c0 80a0 	bcc.w	8021e64 <ip4_reass+0x2ac>
 8021d24:	8b7b      	ldrh	r3, [r7, #26]
 8021d26:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021d2a:	4293      	cmp	r3, r2
 8021d2c:	f200 809a 	bhi.w	8021e64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021d30:	69fa      	ldr	r2, [r7, #28]
 8021d32:	6879      	ldr	r1, [r7, #4]
 8021d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021d36:	f7ff fdd5 	bl	80218e4 <ip_reass_chain_frag_into_datagram_and_validate>
 8021d3a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021d3c:	697b      	ldr	r3, [r7, #20]
 8021d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021d42:	f000 809b 	beq.w	8021e7c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021d46:	4b48      	ldr	r3, [pc, #288]	; (8021e68 <ip4_reass+0x2b0>)
 8021d48:	881a      	ldrh	r2, [r3, #0]
 8021d4a:	8c3b      	ldrh	r3, [r7, #32]
 8021d4c:	4413      	add	r3, r2
 8021d4e:	b29a      	uxth	r2, r3
 8021d50:	4b45      	ldr	r3, [pc, #276]	; (8021e68 <ip4_reass+0x2b0>)
 8021d52:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021d54:	69fb      	ldr	r3, [r7, #28]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d00d      	beq.n	8021d76 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8021d5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021d5e:	4413      	add	r3, r2
 8021d60:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d64:	8a7a      	ldrh	r2, [r7, #18]
 8021d66:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d6a:	7f9b      	ldrb	r3, [r3, #30]
 8021d6c:	f043 0301 	orr.w	r3, r3, #1
 8021d70:	b2da      	uxtb	r2, r3
 8021d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d74:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8021d76:	697b      	ldr	r3, [r7, #20]
 8021d78:	2b01      	cmp	r3, #1
 8021d7a:	d171      	bne.n	8021e60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d7e:	8b9b      	ldrh	r3, [r3, #28]
 8021d80:	3314      	adds	r3, #20
 8021d82:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d86:	685b      	ldr	r3, [r3, #4]
 8021d88:	685b      	ldr	r3, [r3, #4]
 8021d8a:	681b      	ldr	r3, [r3, #0]
 8021d8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8021d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d90:	685b      	ldr	r3, [r3, #4]
 8021d92:	685b      	ldr	r3, [r3, #4]
 8021d94:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d98:	3308      	adds	r3, #8
 8021d9a:	2214      	movs	r2, #20
 8021d9c:	4619      	mov	r1, r3
 8021d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021da0:	f001 f99b 	bl	80230da <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021da4:	8a3b      	ldrh	r3, [r7, #16]
 8021da6:	4618      	mov	r0, r3
 8021da8:	f7f5 fa60 	bl	801726c <lwip_htons>
 8021dac:	4603      	mov	r3, r0
 8021dae:	461a      	mov	r2, r3
 8021db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021db2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021db6:	2200      	movs	r2, #0
 8021db8:	719a      	strb	r2, [r3, #6]
 8021dba:	2200      	movs	r2, #0
 8021dbc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	729a      	strb	r2, [r3, #10]
 8021dc4:	2200      	movs	r2, #0
 8021dc6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dca:	685b      	ldr	r3, [r3, #4]
 8021dcc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021dce:	e00d      	b.n	8021dec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021dd2:	685b      	ldr	r3, [r3, #4]
 8021dd4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8021dd6:	2114      	movs	r1, #20
 8021dd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021dda:	f7f6 fe6b 	bl	8018ab4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021dde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021de0:	6878      	ldr	r0, [r7, #4]
 8021de2:	f7f6 ffbb 	bl	8018d5c <pbuf_cat>
      r = iprh->next_pbuf;
 8021de6:	68fb      	ldr	r3, [r7, #12]
 8021de8:	681b      	ldr	r3, [r3, #0]
 8021dea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d1ee      	bne.n	8021dd0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021df2:	4b1e      	ldr	r3, [pc, #120]	; (8021e6c <ip4_reass+0x2b4>)
 8021df4:	681b      	ldr	r3, [r3, #0]
 8021df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021df8:	429a      	cmp	r2, r3
 8021dfa:	d102      	bne.n	8021e02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021dfc:	2300      	movs	r3, #0
 8021dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021e00:	e010      	b.n	8021e24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021e02:	4b1a      	ldr	r3, [pc, #104]	; (8021e6c <ip4_reass+0x2b4>)
 8021e04:	681b      	ldr	r3, [r3, #0]
 8021e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021e08:	e007      	b.n	8021e1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021e10:	429a      	cmp	r2, r3
 8021e12:	d006      	beq.n	8021e22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e16:	681b      	ldr	r3, [r3, #0]
 8021e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e1c:	2b00      	cmp	r3, #0
 8021e1e:	d1f4      	bne.n	8021e0a <ip4_reass+0x252>
 8021e20:	e000      	b.n	8021e24 <ip4_reass+0x26c>
          break;
 8021e22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8021e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021e28:	f7ff fd2e 	bl	8021888 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021e2c:	6878      	ldr	r0, [r7, #4]
 8021e2e:	f7f6 ff55 	bl	8018cdc <pbuf_clen>
 8021e32:	4603      	mov	r3, r0
 8021e34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8021e36:	4b0c      	ldr	r3, [pc, #48]	; (8021e68 <ip4_reass+0x2b0>)
 8021e38:	881b      	ldrh	r3, [r3, #0]
 8021e3a:	8c3a      	ldrh	r2, [r7, #32]
 8021e3c:	429a      	cmp	r2, r3
 8021e3e:	d906      	bls.n	8021e4e <ip4_reass+0x296>
 8021e40:	4b0b      	ldr	r3, [pc, #44]	; (8021e70 <ip4_reass+0x2b8>)
 8021e42:	f240 229b 	movw	r2, #667	; 0x29b
 8021e46:	490b      	ldr	r1, [pc, #44]	; (8021e74 <ip4_reass+0x2bc>)
 8021e48:	480b      	ldr	r0, [pc, #44]	; (8021e78 <ip4_reass+0x2c0>)
 8021e4a:	f000 ffd5 	bl	8022df8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021e4e:	4b06      	ldr	r3, [pc, #24]	; (8021e68 <ip4_reass+0x2b0>)
 8021e50:	881a      	ldrh	r2, [r3, #0]
 8021e52:	8c3b      	ldrh	r3, [r7, #32]
 8021e54:	1ad3      	subs	r3, r2, r3
 8021e56:	b29a      	uxth	r2, r3
 8021e58:	4b03      	ldr	r3, [pc, #12]	; (8021e68 <ip4_reass+0x2b0>)
 8021e5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	e038      	b.n	8021ed2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8021e60:	2300      	movs	r3, #0
 8021e62:	e036      	b.n	8021ed2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8021e64:	bf00      	nop
 8021e66:	e00a      	b.n	8021e7e <ip4_reass+0x2c6>
 8021e68:	20061dec 	.word	0x20061dec
 8021e6c:	20061de8 	.word	0x20061de8
 8021e70:	080275b0 	.word	0x080275b0
 8021e74:	08027720 	.word	0x08027720
 8021e78:	080275f8 	.word	0x080275f8
    goto nullreturn_ipr;
 8021e7c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8021e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d106      	bne.n	8021e92 <ip4_reass+0x2da>
 8021e84:	4b15      	ldr	r3, [pc, #84]	; (8021edc <ip4_reass+0x324>)
 8021e86:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8021e8a:	4915      	ldr	r1, [pc, #84]	; (8021ee0 <ip4_reass+0x328>)
 8021e8c:	4815      	ldr	r0, [pc, #84]	; (8021ee4 <ip4_reass+0x32c>)
 8021e8e:	f000 ffb3 	bl	8022df8 <iprintf>
  if (ipr->p == NULL) {
 8021e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e94:	685b      	ldr	r3, [r3, #4]
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d116      	bne.n	8021ec8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8021e9a:	4b13      	ldr	r3, [pc, #76]	; (8021ee8 <ip4_reass+0x330>)
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021ea0:	429a      	cmp	r2, r3
 8021ea2:	d006      	beq.n	8021eb2 <ip4_reass+0x2fa>
 8021ea4:	4b0d      	ldr	r3, [pc, #52]	; (8021edc <ip4_reass+0x324>)
 8021ea6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8021eaa:	4910      	ldr	r1, [pc, #64]	; (8021eec <ip4_reass+0x334>)
 8021eac:	480d      	ldr	r0, [pc, #52]	; (8021ee4 <ip4_reass+0x32c>)
 8021eae:	f000 ffa3 	bl	8022df8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8021eb2:	2100      	movs	r1, #0
 8021eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021eb6:	f7ff fce7 	bl	8021888 <ip_reass_dequeue_datagram>
 8021eba:	e006      	b.n	8021eca <ip4_reass+0x312>
    goto nullreturn;
 8021ebc:	bf00      	nop
 8021ebe:	e004      	b.n	8021eca <ip4_reass+0x312>
    goto nullreturn;
 8021ec0:	bf00      	nop
 8021ec2:	e002      	b.n	8021eca <ip4_reass+0x312>
      goto nullreturn;
 8021ec4:	bf00      	nop
 8021ec6:	e000      	b.n	8021eca <ip4_reass+0x312>
  }

nullreturn:
 8021ec8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021eca:	6878      	ldr	r0, [r7, #4]
 8021ecc:	f7f6 fe78 	bl	8018bc0 <pbuf_free>
  return NULL;
 8021ed0:	2300      	movs	r3, #0
}
 8021ed2:	4618      	mov	r0, r3
 8021ed4:	3738      	adds	r7, #56	; 0x38
 8021ed6:	46bd      	mov	sp, r7
 8021ed8:	bd80      	pop	{r7, pc}
 8021eda:	bf00      	nop
 8021edc:	080275b0 	.word	0x080275b0
 8021ee0:	0802773c 	.word	0x0802773c
 8021ee4:	080275f8 	.word	0x080275f8
 8021ee8:	20061de8 	.word	0x20061de8
 8021eec:	08027748 	.word	0x08027748

08021ef0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021ef0:	b580      	push	{r7, lr}
 8021ef2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8021ef4:	2005      	movs	r0, #5
 8021ef6:	f7f5 ff49 	bl	8017d8c <memp_malloc>
 8021efa:	4603      	mov	r3, r0
}
 8021efc:	4618      	mov	r0, r3
 8021efe:	bd80      	pop	{r7, pc}

08021f00 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021f00:	b580      	push	{r7, lr}
 8021f02:	b082      	sub	sp, #8
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	d106      	bne.n	8021f1c <ip_frag_free_pbuf_custom_ref+0x1c>
 8021f0e:	4b07      	ldr	r3, [pc, #28]	; (8021f2c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021f10:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8021f14:	4906      	ldr	r1, [pc, #24]	; (8021f30 <ip_frag_free_pbuf_custom_ref+0x30>)
 8021f16:	4807      	ldr	r0, [pc, #28]	; (8021f34 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021f18:	f000 ff6e 	bl	8022df8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021f1c:	6879      	ldr	r1, [r7, #4]
 8021f1e:	2005      	movs	r0, #5
 8021f20:	f7f5 ffaa 	bl	8017e78 <memp_free>
}
 8021f24:	bf00      	nop
 8021f26:	3708      	adds	r7, #8
 8021f28:	46bd      	mov	sp, r7
 8021f2a:	bd80      	pop	{r7, pc}
 8021f2c:	080275b0 	.word	0x080275b0
 8021f30:	08027768 	.word	0x08027768
 8021f34:	080275f8 	.word	0x080275f8

08021f38 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021f38:	b580      	push	{r7, lr}
 8021f3a:	b084      	sub	sp, #16
 8021f3c:	af00      	add	r7, sp, #0
 8021f3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021f44:	68fb      	ldr	r3, [r7, #12]
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d106      	bne.n	8021f58 <ipfrag_free_pbuf_custom+0x20>
 8021f4a:	4b11      	ldr	r3, [pc, #68]	; (8021f90 <ipfrag_free_pbuf_custom+0x58>)
 8021f4c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021f50:	4910      	ldr	r1, [pc, #64]	; (8021f94 <ipfrag_free_pbuf_custom+0x5c>)
 8021f52:	4811      	ldr	r0, [pc, #68]	; (8021f98 <ipfrag_free_pbuf_custom+0x60>)
 8021f54:	f000 ff50 	bl	8022df8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8021f58:	68fa      	ldr	r2, [r7, #12]
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	429a      	cmp	r2, r3
 8021f5e:	d006      	beq.n	8021f6e <ipfrag_free_pbuf_custom+0x36>
 8021f60:	4b0b      	ldr	r3, [pc, #44]	; (8021f90 <ipfrag_free_pbuf_custom+0x58>)
 8021f62:	f240 22cf 	movw	r2, #719	; 0x2cf
 8021f66:	490d      	ldr	r1, [pc, #52]	; (8021f9c <ipfrag_free_pbuf_custom+0x64>)
 8021f68:	480b      	ldr	r0, [pc, #44]	; (8021f98 <ipfrag_free_pbuf_custom+0x60>)
 8021f6a:	f000 ff45 	bl	8022df8 <iprintf>
  if (pcr->original != NULL) {
 8021f6e:	68fb      	ldr	r3, [r7, #12]
 8021f70:	695b      	ldr	r3, [r3, #20]
 8021f72:	2b00      	cmp	r3, #0
 8021f74:	d004      	beq.n	8021f80 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8021f76:	68fb      	ldr	r3, [r7, #12]
 8021f78:	695b      	ldr	r3, [r3, #20]
 8021f7a:	4618      	mov	r0, r3
 8021f7c:	f7f6 fe20 	bl	8018bc0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8021f80:	68f8      	ldr	r0, [r7, #12]
 8021f82:	f7ff ffbd 	bl	8021f00 <ip_frag_free_pbuf_custom_ref>
}
 8021f86:	bf00      	nop
 8021f88:	3710      	adds	r7, #16
 8021f8a:	46bd      	mov	sp, r7
 8021f8c:	bd80      	pop	{r7, pc}
 8021f8e:	bf00      	nop
 8021f90:	080275b0 	.word	0x080275b0
 8021f94:	08027774 	.word	0x08027774
 8021f98:	080275f8 	.word	0x080275f8
 8021f9c:	08027780 	.word	0x08027780

08021fa0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8021fa0:	b580      	push	{r7, lr}
 8021fa2:	b094      	sub	sp, #80	; 0x50
 8021fa4:	af02      	add	r7, sp, #8
 8021fa6:	60f8      	str	r0, [r7, #12]
 8021fa8:	60b9      	str	r1, [r7, #8]
 8021faa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8021fac:	2300      	movs	r3, #0
 8021fae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021fb2:	68bb      	ldr	r3, [r7, #8]
 8021fb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021fb6:	3b14      	subs	r3, #20
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	da00      	bge.n	8021fbe <ip4_frag+0x1e>
 8021fbc:	3307      	adds	r3, #7
 8021fbe:	10db      	asrs	r3, r3, #3
 8021fc0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8021fc2:	2314      	movs	r3, #20
 8021fc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8021fc6:	68fb      	ldr	r3, [r7, #12]
 8021fc8:	685b      	ldr	r3, [r3, #4]
 8021fca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8021fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021fce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fd2:	781b      	ldrb	r3, [r3, #0]
 8021fd4:	f003 030f 	and.w	r3, r3, #15
 8021fd8:	b2db      	uxtb	r3, r3
 8021fda:	009b      	lsls	r3, r3, #2
 8021fdc:	b2db      	uxtb	r3, r3
 8021fde:	2b14      	cmp	r3, #20
 8021fe0:	d002      	beq.n	8021fe8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8021fe2:	f06f 0305 	mvn.w	r3, #5
 8021fe6:	e110      	b.n	802220a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021fe8:	68fb      	ldr	r3, [r7, #12]
 8021fea:	895b      	ldrh	r3, [r3, #10]
 8021fec:	2b13      	cmp	r3, #19
 8021fee:	d809      	bhi.n	8022004 <ip4_frag+0x64>
 8021ff0:	4b88      	ldr	r3, [pc, #544]	; (8022214 <ip4_frag+0x274>)
 8021ff2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8021ff6:	4988      	ldr	r1, [pc, #544]	; (8022218 <ip4_frag+0x278>)
 8021ff8:	4888      	ldr	r0, [pc, #544]	; (802221c <ip4_frag+0x27c>)
 8021ffa:	f000 fefd 	bl	8022df8 <iprintf>
 8021ffe:	f06f 0305 	mvn.w	r3, #5
 8022002:	e102      	b.n	802220a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8022004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022006:	88db      	ldrh	r3, [r3, #6]
 8022008:	b29b      	uxth	r3, r3
 802200a:	4618      	mov	r0, r3
 802200c:	f7f5 f92e 	bl	801726c <lwip_htons>
 8022010:	4603      	mov	r3, r0
 8022012:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8022014:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022016:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802201a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802201e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022024:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8022026:	68fb      	ldr	r3, [r7, #12]
 8022028:	891b      	ldrh	r3, [r3, #8]
 802202a:	3b14      	subs	r3, #20
 802202c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8022030:	e0e1      	b.n	80221f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022032:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022034:	00db      	lsls	r3, r3, #3
 8022036:	b29b      	uxth	r3, r3
 8022038:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802203c:	4293      	cmp	r3, r2
 802203e:	bf28      	it	cs
 8022040:	4613      	movcs	r3, r2
 8022042:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8022044:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022048:	2114      	movs	r1, #20
 802204a:	200e      	movs	r0, #14
 802204c:	f7f6 fad4 	bl	80185f8 <pbuf_alloc>
 8022050:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8022052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022054:	2b00      	cmp	r3, #0
 8022056:	f000 80d5 	beq.w	8022204 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802205c:	895b      	ldrh	r3, [r3, #10]
 802205e:	2b13      	cmp	r3, #19
 8022060:	d806      	bhi.n	8022070 <ip4_frag+0xd0>
 8022062:	4b6c      	ldr	r3, [pc, #432]	; (8022214 <ip4_frag+0x274>)
 8022064:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022068:	496d      	ldr	r1, [pc, #436]	; (8022220 <ip4_frag+0x280>)
 802206a:	486c      	ldr	r0, [pc, #432]	; (802221c <ip4_frag+0x27c>)
 802206c:	f000 fec4 	bl	8022df8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8022070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022072:	685b      	ldr	r3, [r3, #4]
 8022074:	2214      	movs	r2, #20
 8022076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022078:	4618      	mov	r0, r3
 802207a:	f001 f82e 	bl	80230da <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022080:	685b      	ldr	r3, [r3, #4]
 8022082:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8022084:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022086:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802208a:	e064      	b.n	8022156 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 802208c:	68fb      	ldr	r3, [r7, #12]
 802208e:	895a      	ldrh	r2, [r3, #10]
 8022090:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8022092:	1ad3      	subs	r3, r2, r3
 8022094:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022096:	68fb      	ldr	r3, [r7, #12]
 8022098:	895b      	ldrh	r3, [r3, #10]
 802209a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802209c:	429a      	cmp	r2, r3
 802209e:	d906      	bls.n	80220ae <ip4_frag+0x10e>
 80220a0:	4b5c      	ldr	r3, [pc, #368]	; (8022214 <ip4_frag+0x274>)
 80220a2:	f240 322d 	movw	r2, #813	; 0x32d
 80220a6:	495f      	ldr	r1, [pc, #380]	; (8022224 <ip4_frag+0x284>)
 80220a8:	485c      	ldr	r0, [pc, #368]	; (802221c <ip4_frag+0x27c>)
 80220aa:	f000 fea5 	bl	8022df8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80220ae:	8bfa      	ldrh	r2, [r7, #30]
 80220b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80220b4:	4293      	cmp	r3, r2
 80220b6:	bf28      	it	cs
 80220b8:	4613      	movcs	r3, r2
 80220ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80220be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d105      	bne.n	80220d2 <ip4_frag+0x132>
        poff = 0;
 80220c6:	2300      	movs	r3, #0
 80220c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	60fb      	str	r3, [r7, #12]
        continue;
 80220d0:	e041      	b.n	8022156 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80220d2:	f7ff ff0d 	bl	8021ef0 <ip_frag_alloc_pbuf_custom_ref>
 80220d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80220d8:	69bb      	ldr	r3, [r7, #24]
 80220da:	2b00      	cmp	r3, #0
 80220dc:	d103      	bne.n	80220e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80220de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80220e0:	f7f6 fd6e 	bl	8018bc0 <pbuf_free>
        goto memerr;
 80220e4:	e08f      	b.n	8022206 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80220e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80220e8:	68fb      	ldr	r3, [r7, #12]
 80220ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80220ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80220ee:	4413      	add	r3, r2
 80220f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80220f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80220f8:	9201      	str	r2, [sp, #4]
 80220fa:	9300      	str	r3, [sp, #0]
 80220fc:	4603      	mov	r3, r0
 80220fe:	2241      	movs	r2, #65	; 0x41
 8022100:	2000      	movs	r0, #0
 8022102:	f7f6 fba3 	bl	801884c <pbuf_alloced_custom>
 8022106:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8022108:	697b      	ldr	r3, [r7, #20]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d106      	bne.n	802211c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802210e:	69b8      	ldr	r0, [r7, #24]
 8022110:	f7ff fef6 	bl	8021f00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8022114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022116:	f7f6 fd53 	bl	8018bc0 <pbuf_free>
        goto memerr;
 802211a:	e074      	b.n	8022206 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 802211c:	68f8      	ldr	r0, [r7, #12]
 802211e:	f7f6 fdf5 	bl	8018d0c <pbuf_ref>
      pcr->original = p;
 8022122:	69bb      	ldr	r3, [r7, #24]
 8022124:	68fa      	ldr	r2, [r7, #12]
 8022126:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022128:	69bb      	ldr	r3, [r7, #24]
 802212a:	4a3f      	ldr	r2, [pc, #252]	; (8022228 <ip4_frag+0x288>)
 802212c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802212e:	6979      	ldr	r1, [r7, #20]
 8022130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022132:	f7f6 fe13 	bl	8018d5c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022136:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802213a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802213e:	1ad3      	subs	r3, r2, r3
 8022140:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8022144:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022148:	2b00      	cmp	r3, #0
 802214a:	d004      	beq.n	8022156 <ip4_frag+0x1b6>
        poff = 0;
 802214c:	2300      	movs	r3, #0
 802214e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8022156:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802215a:	2b00      	cmp	r3, #0
 802215c:	d196      	bne.n	802208c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802215e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022160:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022164:	4413      	add	r3, r2
 8022166:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8022168:	68bb      	ldr	r3, [r7, #8]
 802216a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 802216c:	f1a3 0213 	sub.w	r2, r3, #19
 8022170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022174:	429a      	cmp	r2, r3
 8022176:	bfcc      	ite	gt
 8022178:	2301      	movgt	r3, #1
 802217a:	2300      	movle	r3, #0
 802217c:	b2db      	uxtb	r3, r3
 802217e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022180:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8022184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022188:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802218a:	6a3b      	ldr	r3, [r7, #32]
 802218c:	2b00      	cmp	r3, #0
 802218e:	d002      	beq.n	8022196 <ip4_frag+0x1f6>
 8022190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022192:	2b00      	cmp	r3, #0
 8022194:	d003      	beq.n	802219e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8022196:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802219c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802219e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80221a0:	4618      	mov	r0, r3
 80221a2:	f7f5 f863 	bl	801726c <lwip_htons>
 80221a6:	4603      	mov	r3, r0
 80221a8:	461a      	mov	r2, r3
 80221aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80221ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80221b0:	3314      	adds	r3, #20
 80221b2:	b29b      	uxth	r3, r3
 80221b4:	4618      	mov	r0, r3
 80221b6:	f7f5 f859 	bl	801726c <lwip_htons>
 80221ba:	4603      	mov	r3, r0
 80221bc:	461a      	mov	r2, r3
 80221be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80221c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221c4:	2200      	movs	r2, #0
 80221c6:	729a      	strb	r2, [r3, #10]
 80221c8:	2200      	movs	r2, #0
 80221ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80221cc:	68bb      	ldr	r3, [r7, #8]
 80221ce:	695b      	ldr	r3, [r3, #20]
 80221d0:	687a      	ldr	r2, [r7, #4]
 80221d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80221d4:	68b8      	ldr	r0, [r7, #8]
 80221d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80221d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80221da:	f7f6 fcf1 	bl	8018bc0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80221de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80221e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80221e4:	1ad3      	subs	r3, r2, r3
 80221e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80221ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80221ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80221f0:	4413      	add	r3, r2
 80221f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80221f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	f47f af19 	bne.w	8022032 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022200:	2300      	movs	r3, #0
 8022202:	e002      	b.n	802220a <ip4_frag+0x26a>
      goto memerr;
 8022204:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8022206:	f04f 33ff 	mov.w	r3, #4294967295
}
 802220a:	4618      	mov	r0, r3
 802220c:	3748      	adds	r7, #72	; 0x48
 802220e:	46bd      	mov	sp, r7
 8022210:	bd80      	pop	{r7, pc}
 8022212:	bf00      	nop
 8022214:	080275b0 	.word	0x080275b0
 8022218:	0802778c 	.word	0x0802778c
 802221c:	080275f8 	.word	0x080275f8
 8022220:	080277a8 	.word	0x080277a8
 8022224:	080277c8 	.word	0x080277c8
 8022228:	08021f39 	.word	0x08021f39

0802222c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 802222c:	b580      	push	{r7, lr}
 802222e:	b086      	sub	sp, #24
 8022230:	af00      	add	r7, sp, #0
 8022232:	6078      	str	r0, [r7, #4]
 8022234:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8022236:	230e      	movs	r3, #14
 8022238:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	895b      	ldrh	r3, [r3, #10]
 802223e:	2b0e      	cmp	r3, #14
 8022240:	d96e      	bls.n	8022320 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	7bdb      	ldrb	r3, [r3, #15]
 8022246:	2b00      	cmp	r3, #0
 8022248:	d106      	bne.n	8022258 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802224a:	683b      	ldr	r3, [r7, #0]
 802224c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022250:	3301      	adds	r3, #1
 8022252:	b2da      	uxtb	r2, r3
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	685b      	ldr	r3, [r3, #4]
 802225c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802225e:	693b      	ldr	r3, [r7, #16]
 8022260:	7b1a      	ldrb	r2, [r3, #12]
 8022262:	7b5b      	ldrb	r3, [r3, #13]
 8022264:	021b      	lsls	r3, r3, #8
 8022266:	4313      	orrs	r3, r2
 8022268:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802226a:	693b      	ldr	r3, [r7, #16]
 802226c:	781b      	ldrb	r3, [r3, #0]
 802226e:	f003 0301 	and.w	r3, r3, #1
 8022272:	2b00      	cmp	r3, #0
 8022274:	d023      	beq.n	80222be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8022276:	693b      	ldr	r3, [r7, #16]
 8022278:	781b      	ldrb	r3, [r3, #0]
 802227a:	2b01      	cmp	r3, #1
 802227c:	d10f      	bne.n	802229e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802227e:	693b      	ldr	r3, [r7, #16]
 8022280:	785b      	ldrb	r3, [r3, #1]
 8022282:	2b00      	cmp	r3, #0
 8022284:	d11b      	bne.n	80222be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8022286:	693b      	ldr	r3, [r7, #16]
 8022288:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802228a:	2b5e      	cmp	r3, #94	; 0x5e
 802228c:	d117      	bne.n	80222be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	7b5b      	ldrb	r3, [r3, #13]
 8022292:	f043 0310 	orr.w	r3, r3, #16
 8022296:	b2da      	uxtb	r2, r3
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	735a      	strb	r2, [r3, #13]
 802229c:	e00f      	b.n	80222be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802229e:	693b      	ldr	r3, [r7, #16]
 80222a0:	2206      	movs	r2, #6
 80222a2:	4928      	ldr	r1, [pc, #160]	; (8022344 <ethernet_input+0x118>)
 80222a4:	4618      	mov	r0, r3
 80222a6:	f000 fe55 	bl	8022f54 <memcmp>
 80222aa:	4603      	mov	r3, r0
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d106      	bne.n	80222be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80222b0:	687b      	ldr	r3, [r7, #4]
 80222b2:	7b5b      	ldrb	r3, [r3, #13]
 80222b4:	f043 0308 	orr.w	r3, r3, #8
 80222b8:	b2da      	uxtb	r2, r3
 80222ba:	687b      	ldr	r3, [r7, #4]
 80222bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80222be:	89fb      	ldrh	r3, [r7, #14]
 80222c0:	2b08      	cmp	r3, #8
 80222c2:	d003      	beq.n	80222cc <ethernet_input+0xa0>
 80222c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80222c8:	d014      	beq.n	80222f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80222ca:	e032      	b.n	8022332 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80222cc:	683b      	ldr	r3, [r7, #0]
 80222ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80222d2:	f003 0308 	and.w	r3, r3, #8
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d024      	beq.n	8022324 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80222da:	8afb      	ldrh	r3, [r7, #22]
 80222dc:	4619      	mov	r1, r3
 80222de:	6878      	ldr	r0, [r7, #4]
 80222e0:	f7f6 fbe8 	bl	8018ab4 <pbuf_remove_header>
 80222e4:	4603      	mov	r3, r0
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	d11e      	bne.n	8022328 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80222ea:	6839      	ldr	r1, [r7, #0]
 80222ec:	6878      	ldr	r0, [r7, #4]
 80222ee:	f7fe ff21 	bl	8021134 <ip4_input>
      break;
 80222f2:	e013      	b.n	802231c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80222f4:	683b      	ldr	r3, [r7, #0]
 80222f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80222fa:	f003 0308 	and.w	r3, r3, #8
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d014      	beq.n	802232c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022302:	8afb      	ldrh	r3, [r7, #22]
 8022304:	4619      	mov	r1, r3
 8022306:	6878      	ldr	r0, [r7, #4]
 8022308:	f7f6 fbd4 	bl	8018ab4 <pbuf_remove_header>
 802230c:	4603      	mov	r3, r0
 802230e:	2b00      	cmp	r3, #0
 8022310:	d10e      	bne.n	8022330 <ethernet_input+0x104>
        etharp_input(p, netif);
 8022312:	6839      	ldr	r1, [r7, #0]
 8022314:	6878      	ldr	r0, [r7, #4]
 8022316:	f7fe f89b 	bl	8020450 <etharp_input>
      break;
 802231a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 802231c:	2300      	movs	r3, #0
 802231e:	e00c      	b.n	802233a <ethernet_input+0x10e>
    goto free_and_return;
 8022320:	bf00      	nop
 8022322:	e006      	b.n	8022332 <ethernet_input+0x106>
        goto free_and_return;
 8022324:	bf00      	nop
 8022326:	e004      	b.n	8022332 <ethernet_input+0x106>
        goto free_and_return;
 8022328:	bf00      	nop
 802232a:	e002      	b.n	8022332 <ethernet_input+0x106>
        goto free_and_return;
 802232c:	bf00      	nop
 802232e:	e000      	b.n	8022332 <ethernet_input+0x106>
        goto free_and_return;
 8022330:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022332:	6878      	ldr	r0, [r7, #4]
 8022334:	f7f6 fc44 	bl	8018bc0 <pbuf_free>
  return ERR_OK;
 8022338:	2300      	movs	r3, #0
}
 802233a:	4618      	mov	r0, r3
 802233c:	3718      	adds	r7, #24
 802233e:	46bd      	mov	sp, r7
 8022340:	bd80      	pop	{r7, pc}
 8022342:	bf00      	nop
 8022344:	08027bb4 	.word	0x08027bb4

08022348 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022348:	b580      	push	{r7, lr}
 802234a:	b086      	sub	sp, #24
 802234c:	af00      	add	r7, sp, #0
 802234e:	60f8      	str	r0, [r7, #12]
 8022350:	60b9      	str	r1, [r7, #8]
 8022352:	607a      	str	r2, [r7, #4]
 8022354:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022356:	8c3b      	ldrh	r3, [r7, #32]
 8022358:	4618      	mov	r0, r3
 802235a:	f7f4 ff87 	bl	801726c <lwip_htons>
 802235e:	4603      	mov	r3, r0
 8022360:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022362:	210e      	movs	r1, #14
 8022364:	68b8      	ldr	r0, [r7, #8]
 8022366:	f7f6 fb95 	bl	8018a94 <pbuf_add_header>
 802236a:	4603      	mov	r3, r0
 802236c:	2b00      	cmp	r3, #0
 802236e:	d125      	bne.n	80223bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022370:	68bb      	ldr	r3, [r7, #8]
 8022372:	685b      	ldr	r3, [r3, #4]
 8022374:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8022376:	693b      	ldr	r3, [r7, #16]
 8022378:	8afa      	ldrh	r2, [r7, #22]
 802237a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 802237c:	693b      	ldr	r3, [r7, #16]
 802237e:	2206      	movs	r2, #6
 8022380:	6839      	ldr	r1, [r7, #0]
 8022382:	4618      	mov	r0, r3
 8022384:	f000 fea9 	bl	80230da <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022388:	693b      	ldr	r3, [r7, #16]
 802238a:	3306      	adds	r3, #6
 802238c:	2206      	movs	r2, #6
 802238e:	6879      	ldr	r1, [r7, #4]
 8022390:	4618      	mov	r0, r3
 8022392:	f000 fea2 	bl	80230da <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022396:	68fb      	ldr	r3, [r7, #12]
 8022398:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802239c:	2b06      	cmp	r3, #6
 802239e:	d006      	beq.n	80223ae <ethernet_output+0x66>
 80223a0:	4b0a      	ldr	r3, [pc, #40]	; (80223cc <ethernet_output+0x84>)
 80223a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80223a6:	490a      	ldr	r1, [pc, #40]	; (80223d0 <ethernet_output+0x88>)
 80223a8:	480a      	ldr	r0, [pc, #40]	; (80223d4 <ethernet_output+0x8c>)
 80223aa:	f000 fd25 	bl	8022df8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80223ae:	68fb      	ldr	r3, [r7, #12]
 80223b0:	699b      	ldr	r3, [r3, #24]
 80223b2:	68b9      	ldr	r1, [r7, #8]
 80223b4:	68f8      	ldr	r0, [r7, #12]
 80223b6:	4798      	blx	r3
 80223b8:	4603      	mov	r3, r0
 80223ba:	e002      	b.n	80223c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80223bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80223be:	f06f 0301 	mvn.w	r3, #1
}
 80223c2:	4618      	mov	r0, r3
 80223c4:	3718      	adds	r7, #24
 80223c6:	46bd      	mov	sp, r7
 80223c8:	bd80      	pop	{r7, pc}
 80223ca:	bf00      	nop
 80223cc:	080277d8 	.word	0x080277d8
 80223d0:	08027810 	.word	0x08027810
 80223d4:	08027844 	.word	0x08027844

080223d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80223d8:	b580      	push	{r7, lr}
 80223da:	b082      	sub	sp, #8
 80223dc:	af00      	add	r7, sp, #0
 80223de:	6078      	str	r0, [r7, #4]
 80223e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80223e2:	683b      	ldr	r3, [r7, #0]
 80223e4:	2200      	movs	r2, #0
 80223e6:	2104      	movs	r1, #4
 80223e8:	4618      	mov	r0, r3
 80223ea:	f7ef f8e6 	bl	80115ba <osMessageQueueNew>
 80223ee:	4602      	mov	r2, r0
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	2b00      	cmp	r3, #0
 80223fa:	d102      	bne.n	8022402 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80223fc:	f04f 33ff 	mov.w	r3, #4294967295
 8022400:	e000      	b.n	8022404 <sys_mbox_new+0x2c>

  return ERR_OK;
 8022402:	2300      	movs	r3, #0
}
 8022404:	4618      	mov	r0, r3
 8022406:	3708      	adds	r7, #8
 8022408:	46bd      	mov	sp, r7
 802240a:	bd80      	pop	{r7, pc}

0802240c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 802240c:	b580      	push	{r7, lr}
 802240e:	b082      	sub	sp, #8
 8022410:	af00      	add	r7, sp, #0
 8022412:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	681b      	ldr	r3, [r3, #0]
 8022418:	4618      	mov	r0, r3
 802241a:	f7ef f9f3 	bl	8011804 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	4618      	mov	r0, r3
 8022424:	f7ef fa0d 	bl	8011842 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022428:	bf00      	nop
 802242a:	3708      	adds	r7, #8
 802242c:	46bd      	mov	sp, r7
 802242e:	bd80      	pop	{r7, pc}

08022430 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022430:	b580      	push	{r7, lr}
 8022432:	b084      	sub	sp, #16
 8022434:	af00      	add	r7, sp, #0
 8022436:	6078      	str	r0, [r7, #4]
 8022438:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	6818      	ldr	r0, [r3, #0]
 802243e:	4639      	mov	r1, r7
 8022440:	2300      	movs	r3, #0
 8022442:	2200      	movs	r2, #0
 8022444:	f7ef f92c 	bl	80116a0 <osMessageQueuePut>
 8022448:	4603      	mov	r3, r0
 802244a:	2b00      	cmp	r3, #0
 802244c:	d102      	bne.n	8022454 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 802244e:	2300      	movs	r3, #0
 8022450:	73fb      	strb	r3, [r7, #15]
 8022452:	e001      	b.n	8022458 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8022454:	23ff      	movs	r3, #255	; 0xff
 8022456:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8022458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802245c:	4618      	mov	r0, r3
 802245e:	3710      	adds	r7, #16
 8022460:	46bd      	mov	sp, r7
 8022462:	bd80      	pop	{r7, pc}

08022464 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8022464:	b580      	push	{r7, lr}
 8022466:	b086      	sub	sp, #24
 8022468:	af00      	add	r7, sp, #0
 802246a:	60f8      	str	r0, [r7, #12]
 802246c:	60b9      	str	r1, [r7, #8]
 802246e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8022470:	f7ee fda2 	bl	8010fb8 <osKernelGetTickCount>
 8022474:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	2b00      	cmp	r3, #0
 802247a:	d013      	beq.n	80224a4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 802247c:	68fb      	ldr	r3, [r7, #12]
 802247e:	6818      	ldr	r0, [r3, #0]
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	2200      	movs	r2, #0
 8022484:	68b9      	ldr	r1, [r7, #8]
 8022486:	f7ef f965 	bl	8011754 <osMessageQueueGet>
 802248a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 802248c:	693b      	ldr	r3, [r7, #16]
 802248e:	2b00      	cmp	r3, #0
 8022490:	d105      	bne.n	802249e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8022492:	f7ee fd91 	bl	8010fb8 <osKernelGetTickCount>
 8022496:	4602      	mov	r2, r0
 8022498:	697b      	ldr	r3, [r7, #20]
 802249a:	1ad3      	subs	r3, r2, r3
 802249c:	e00f      	b.n	80224be <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802249e:	f04f 33ff 	mov.w	r3, #4294967295
 80224a2:	e00c      	b.n	80224be <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80224a4:	68fb      	ldr	r3, [r7, #12]
 80224a6:	6818      	ldr	r0, [r3, #0]
 80224a8:	f04f 33ff 	mov.w	r3, #4294967295
 80224ac:	2200      	movs	r2, #0
 80224ae:	68b9      	ldr	r1, [r7, #8]
 80224b0:	f7ef f950 	bl	8011754 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80224b4:	f7ee fd80 	bl	8010fb8 <osKernelGetTickCount>
 80224b8:	4602      	mov	r2, r0
 80224ba:	697b      	ldr	r3, [r7, #20]
 80224bc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80224be:	4618      	mov	r0, r3
 80224c0:	3718      	adds	r7, #24
 80224c2:	46bd      	mov	sp, r7
 80224c4:	bd80      	pop	{r7, pc}

080224c6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80224c6:	b580      	push	{r7, lr}
 80224c8:	b082      	sub	sp, #8
 80224ca:	af00      	add	r7, sp, #0
 80224cc:	6078      	str	r0, [r7, #4]
 80224ce:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	6818      	ldr	r0, [r3, #0]
 80224d4:	2300      	movs	r3, #0
 80224d6:	2200      	movs	r2, #0
 80224d8:	6839      	ldr	r1, [r7, #0]
 80224da:	f7ef f93b 	bl	8011754 <osMessageQueueGet>
 80224de:	4603      	mov	r3, r0
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	d101      	bne.n	80224e8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80224e4:	2300      	movs	r3, #0
 80224e6:	e001      	b.n	80224ec <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80224e8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80224ec:	4618      	mov	r0, r3
 80224ee:	3708      	adds	r7, #8
 80224f0:	46bd      	mov	sp, r7
 80224f2:	bd80      	pop	{r7, pc}

080224f4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80224f4:	b480      	push	{r7}
 80224f6:	b083      	sub	sp, #12
 80224f8:	af00      	add	r7, sp, #0
 80224fa:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	2b00      	cmp	r3, #0
 8022502:	d101      	bne.n	8022508 <sys_mbox_valid+0x14>
    return 0;
 8022504:	2300      	movs	r3, #0
 8022506:	e000      	b.n	802250a <sys_mbox_valid+0x16>
  else
    return 1;
 8022508:	2301      	movs	r3, #1
}
 802250a:	4618      	mov	r0, r3
 802250c:	370c      	adds	r7, #12
 802250e:	46bd      	mov	sp, r7
 8022510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022514:	4770      	bx	lr

08022516 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8022516:	b480      	push	{r7}
 8022518:	b083      	sub	sp, #12
 802251a:	af00      	add	r7, sp, #0
 802251c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 802251e:	687b      	ldr	r3, [r7, #4]
 8022520:	2200      	movs	r2, #0
 8022522:	601a      	str	r2, [r3, #0]
}
 8022524:	bf00      	nop
 8022526:	370c      	adds	r7, #12
 8022528:	46bd      	mov	sp, r7
 802252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802252e:	4770      	bx	lr

08022530 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022530:	b580      	push	{r7, lr}
 8022532:	b082      	sub	sp, #8
 8022534:	af00      	add	r7, sp, #0
 8022536:	6078      	str	r0, [r7, #4]
 8022538:	460b      	mov	r3, r1
 802253a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 802253c:	78fb      	ldrb	r3, [r7, #3]
 802253e:	2200      	movs	r2, #0
 8022540:	4619      	mov	r1, r3
 8022542:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8022546:	f7ee ff02 	bl	801134e <osSemaphoreNew>
 802254a:	4602      	mov	r2, r0
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	681b      	ldr	r3, [r3, #0]
 8022554:	2b00      	cmp	r3, #0
 8022556:	d102      	bne.n	802255e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022558:	f04f 33ff 	mov.w	r3, #4294967295
 802255c:	e009      	b.n	8022572 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 802255e:	78fb      	ldrb	r3, [r7, #3]
 8022560:	2b00      	cmp	r3, #0
 8022562:	d105      	bne.n	8022570 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	681b      	ldr	r3, [r3, #0]
 8022568:	2100      	movs	r1, #0
 802256a:	4618      	mov	r0, r3
 802256c:	f7ee ff78 	bl	8011460 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8022570:	2300      	movs	r3, #0
}
 8022572:	4618      	mov	r0, r3
 8022574:	3708      	adds	r7, #8
 8022576:	46bd      	mov	sp, r7
 8022578:	bd80      	pop	{r7, pc}

0802257a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 802257a:	b580      	push	{r7, lr}
 802257c:	b084      	sub	sp, #16
 802257e:	af00      	add	r7, sp, #0
 8022580:	6078      	str	r0, [r7, #4]
 8022582:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8022584:	f7ee fd18 	bl	8010fb8 <osKernelGetTickCount>
 8022588:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 802258a:	683b      	ldr	r3, [r7, #0]
 802258c:	2b00      	cmp	r3, #0
 802258e:	d011      	beq.n	80225b4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	6839      	ldr	r1, [r7, #0]
 8022596:	4618      	mov	r0, r3
 8022598:	f7ee ff62 	bl	8011460 <osSemaphoreAcquire>
 802259c:	4603      	mov	r3, r0
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d105      	bne.n	80225ae <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80225a2:	f7ee fd09 	bl	8010fb8 <osKernelGetTickCount>
 80225a6:	4602      	mov	r2, r0
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	1ad3      	subs	r3, r2, r3
 80225ac:	e012      	b.n	80225d4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80225ae:	f04f 33ff 	mov.w	r3, #4294967295
 80225b2:	e00f      	b.n	80225d4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80225b4:	bf00      	nop
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	681b      	ldr	r3, [r3, #0]
 80225ba:	f04f 31ff 	mov.w	r1, #4294967295
 80225be:	4618      	mov	r0, r3
 80225c0:	f7ee ff4e 	bl	8011460 <osSemaphoreAcquire>
 80225c4:	4603      	mov	r3, r0
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d1f5      	bne.n	80225b6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80225ca:	f7ee fcf5 	bl	8010fb8 <osKernelGetTickCount>
 80225ce:	4602      	mov	r2, r0
 80225d0:	68fb      	ldr	r3, [r7, #12]
 80225d2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80225d4:	4618      	mov	r0, r3
 80225d6:	3710      	adds	r7, #16
 80225d8:	46bd      	mov	sp, r7
 80225da:	bd80      	pop	{r7, pc}

080225dc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80225dc:	b580      	push	{r7, lr}
 80225de:	b082      	sub	sp, #8
 80225e0:	af00      	add	r7, sp, #0
 80225e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	681b      	ldr	r3, [r3, #0]
 80225e8:	4618      	mov	r0, r3
 80225ea:	f7ee ff85 	bl	80114f8 <osSemaphoreRelease>
}
 80225ee:	bf00      	nop
 80225f0:	3708      	adds	r7, #8
 80225f2:	46bd      	mov	sp, r7
 80225f4:	bd80      	pop	{r7, pc}

080225f6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80225f6:	b580      	push	{r7, lr}
 80225f8:	b082      	sub	sp, #8
 80225fa:	af00      	add	r7, sp, #0
 80225fc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	4618      	mov	r0, r3
 8022604:	f7ee ffb6 	bl	8011574 <osSemaphoreDelete>
}
 8022608:	bf00      	nop
 802260a:	3708      	adds	r7, #8
 802260c:	46bd      	mov	sp, r7
 802260e:	bd80      	pop	{r7, pc}

08022610 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022610:	b480      	push	{r7}
 8022612:	b083      	sub	sp, #12
 8022614:	af00      	add	r7, sp, #0
 8022616:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	681b      	ldr	r3, [r3, #0]
 802261c:	2b00      	cmp	r3, #0
 802261e:	d101      	bne.n	8022624 <sys_sem_valid+0x14>
    return 0;
 8022620:	2300      	movs	r3, #0
 8022622:	e000      	b.n	8022626 <sys_sem_valid+0x16>
  else
    return 1;
 8022624:	2301      	movs	r3, #1
}
 8022626:	4618      	mov	r0, r3
 8022628:	370c      	adds	r7, #12
 802262a:	46bd      	mov	sp, r7
 802262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022630:	4770      	bx	lr

08022632 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8022632:	b480      	push	{r7}
 8022634:	b083      	sub	sp, #12
 8022636:	af00      	add	r7, sp, #0
 8022638:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	2200      	movs	r2, #0
 802263e:	601a      	str	r2, [r3, #0]
}
 8022640:	bf00      	nop
 8022642:	370c      	adds	r7, #12
 8022644:	46bd      	mov	sp, r7
 8022646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802264a:	4770      	bx	lr

0802264c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 802264c:	b580      	push	{r7, lr}
 802264e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8022650:	2000      	movs	r0, #0
 8022652:	f7ee fd71 	bl	8011138 <osMutexNew>
 8022656:	4603      	mov	r3, r0
 8022658:	4a01      	ldr	r2, [pc, #4]	; (8022660 <sys_init+0x14>)
 802265a:	6013      	str	r3, [r2, #0]
#endif
}
 802265c:	bf00      	nop
 802265e:	bd80      	pop	{r7, pc}
 8022660:	20061df0 	.word	0x20061df0

08022664 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022664:	b580      	push	{r7, lr}
 8022666:	b082      	sub	sp, #8
 8022668:	af00      	add	r7, sp, #0
 802266a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 802266c:	2000      	movs	r0, #0
 802266e:	f7ee fd63 	bl	8011138 <osMutexNew>
 8022672:	4602      	mov	r2, r0
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	681b      	ldr	r3, [r3, #0]
 802267c:	2b00      	cmp	r3, #0
 802267e:	d102      	bne.n	8022686 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022680:	f04f 33ff 	mov.w	r3, #4294967295
 8022684:	e000      	b.n	8022688 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022686:	2300      	movs	r3, #0
}
 8022688:	4618      	mov	r0, r3
 802268a:	3708      	adds	r7, #8
 802268c:	46bd      	mov	sp, r7
 802268e:	bd80      	pop	{r7, pc}

08022690 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b082      	sub	sp, #8
 8022694:	af00      	add	r7, sp, #0
 8022696:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	681b      	ldr	r3, [r3, #0]
 802269c:	f04f 31ff 	mov.w	r1, #4294967295
 80226a0:	4618      	mov	r0, r3
 80226a2:	f7ee fdce 	bl	8011242 <osMutexAcquire>
#endif
}
 80226a6:	bf00      	nop
 80226a8:	3708      	adds	r7, #8
 80226aa:	46bd      	mov	sp, r7
 80226ac:	bd80      	pop	{r7, pc}

080226ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80226ae:	b580      	push	{r7, lr}
 80226b0:	b082      	sub	sp, #8
 80226b2:	af00      	add	r7, sp, #0
 80226b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	4618      	mov	r0, r3
 80226bc:	f7ee fe0b 	bl	80112d6 <osMutexRelease>
}
 80226c0:	bf00      	nop
 80226c2:	3708      	adds	r7, #8
 80226c4:	46bd      	mov	sp, r7
 80226c6:	bd80      	pop	{r7, pc}

080226c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80226c8:	b580      	push	{r7, lr}
 80226ca:	b08e      	sub	sp, #56	; 0x38
 80226cc:	af00      	add	r7, sp, #0
 80226ce:	60f8      	str	r0, [r7, #12]
 80226d0:	60b9      	str	r1, [r7, #8]
 80226d2:	607a      	str	r2, [r7, #4]
 80226d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80226d6:	f107 0314 	add.w	r3, r7, #20
 80226da:	2224      	movs	r2, #36	; 0x24
 80226dc:	2100      	movs	r1, #0
 80226de:	4618      	mov	r0, r3
 80226e0:	f000 fc62 	bl	8022fa8 <memset>
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	617b      	str	r3, [r7, #20]
 80226e8:	683b      	ldr	r3, [r7, #0]
 80226ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80226ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80226ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80226f0:	f107 0314 	add.w	r3, r7, #20
 80226f4:	461a      	mov	r2, r3
 80226f6:	6879      	ldr	r1, [r7, #4]
 80226f8:	68b8      	ldr	r0, [r7, #8]
 80226fa:	f7ee fc71 	bl	8010fe0 <osThreadNew>
 80226fe:	4603      	mov	r3, r0
#endif
}
 8022700:	4618      	mov	r0, r3
 8022702:	3738      	adds	r7, #56	; 0x38
 8022704:	46bd      	mov	sp, r7
 8022706:	bd80      	pop	{r7, pc}

08022708 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022708:	b580      	push	{r7, lr}
 802270a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 802270c:	4b04      	ldr	r3, [pc, #16]	; (8022720 <sys_arch_protect+0x18>)
 802270e:	681b      	ldr	r3, [r3, #0]
 8022710:	f04f 31ff 	mov.w	r1, #4294967295
 8022714:	4618      	mov	r0, r3
 8022716:	f7ee fd94 	bl	8011242 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 802271a:	2301      	movs	r3, #1
}
 802271c:	4618      	mov	r0, r3
 802271e:	bd80      	pop	{r7, pc}
 8022720:	20061df0 	.word	0x20061df0

08022724 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022724:	b580      	push	{r7, lr}
 8022726:	b082      	sub	sp, #8
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 802272c:	4b04      	ldr	r3, [pc, #16]	; (8022740 <sys_arch_unprotect+0x1c>)
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	4618      	mov	r0, r3
 8022732:	f7ee fdd0 	bl	80112d6 <osMutexRelease>
}
 8022736:	bf00      	nop
 8022738:	3708      	adds	r7, #8
 802273a:	46bd      	mov	sp, r7
 802273c:	bd80      	pop	{r7, pc}
 802273e:	bf00      	nop
 8022740:	20061df0 	.word	0x20061df0

08022744 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 8022744:	b580      	push	{r7, lr}
 8022746:	b084      	sub	sp, #16
 8022748:	af00      	add	r7, sp, #0
 802274a:	60f8      	str	r0, [r7, #12]
 802274c:	60b9      	str	r1, [r7, #8]
 802274e:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8022750:	68fb      	ldr	r3, [r7, #12]
 8022752:	2b00      	cmp	r3, #0
 8022754:	d005      	beq.n	8022762 <lwrb_init+0x1e>
 8022756:	68bb      	ldr	r3, [r7, #8]
 8022758:	2b00      	cmp	r3, #0
 802275a:	d002      	beq.n	8022762 <lwrb_init+0x1e>
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	2b00      	cmp	r3, #0
 8022760:	d101      	bne.n	8022766 <lwrb_init+0x22>
        return 0;
 8022762:	2300      	movs	r3, #0
 8022764:	e00b      	b.n	802277e <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8022766:	2214      	movs	r2, #20
 8022768:	2100      	movs	r1, #0
 802276a:	68f8      	ldr	r0, [r7, #12]
 802276c:	f000 fc1c 	bl	8022fa8 <memset>

    buff->size = size;
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	687a      	ldr	r2, [r7, #4]
 8022774:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8022776:	68fb      	ldr	r3, [r7, #12]
 8022778:	68ba      	ldr	r2, [r7, #8]
 802277a:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 802277c:	2301      	movs	r3, #1
}
 802277e:	4618      	mov	r0, r3
 8022780:	3710      	adds	r7, #16
 8022782:	46bd      	mov	sp, r7
 8022784:	bd80      	pop	{r7, pc}

08022786 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 8022786:	b480      	push	{r7}
 8022788:	b083      	sub	sp, #12
 802278a:	af00      	add	r7, sp, #0
 802278c:	6078      	str	r0, [r7, #4]
 802278e:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	2b00      	cmp	r3, #0
 8022794:	d00a      	beq.n	80227ac <lwrb_set_evt_fn+0x26>
 8022796:	687b      	ldr	r3, [r7, #4]
 8022798:	681b      	ldr	r3, [r3, #0]
 802279a:	2b00      	cmp	r3, #0
 802279c:	d006      	beq.n	80227ac <lwrb_set_evt_fn+0x26>
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	685b      	ldr	r3, [r3, #4]
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d002      	beq.n	80227ac <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	683a      	ldr	r2, [r7, #0]
 80227aa:	611a      	str	r2, [r3, #16]
    }
}
 80227ac:	bf00      	nop
 80227ae:	370c      	adds	r7, #12
 80227b0:	46bd      	mov	sp, r7
 80227b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b6:	4770      	bx	lr

080227b8 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 80227b8:	b580      	push	{r7, lr}
 80227ba:	b088      	sub	sp, #32
 80227bc:	af00      	add	r7, sp, #0
 80227be:	60f8      	str	r0, [r7, #12]
 80227c0:	60b9      	str	r1, [r7, #8]
 80227c2:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 80227c4:	68bb      	ldr	r3, [r7, #8]
 80227c6:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 80227c8:	68fb      	ldr	r3, [r7, #12]
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	d00d      	beq.n	80227ea <lwrb_write+0x32>
 80227ce:	68fb      	ldr	r3, [r7, #12]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	d009      	beq.n	80227ea <lwrb_write+0x32>
 80227d6:	68fb      	ldr	r3, [r7, #12]
 80227d8:	685b      	ldr	r3, [r3, #4]
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d005      	beq.n	80227ea <lwrb_write+0x32>
 80227de:	68bb      	ldr	r3, [r7, #8]
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	d002      	beq.n	80227ea <lwrb_write+0x32>
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	2b00      	cmp	r3, #0
 80227e8:	d101      	bne.n	80227ee <lwrb_write+0x36>
        return 0;
 80227ea:	2300      	movs	r3, #0
 80227ec:	e059      	b.n	80228a2 <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80227ee:	68f8      	ldr	r0, [r7, #12]
 80227f0:	f000 f85b 	bl	80228aa <lwrb_get_free>
 80227f4:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 80227f6:	69fa      	ldr	r2, [r7, #28]
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	429a      	cmp	r2, r3
 80227fc:	d20d      	bcs.n	802281a <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 80227fe:	68fb      	ldr	r3, [r7, #12]
 8022800:	691b      	ldr	r3, [r3, #16]
 8022802:	2b00      	cmp	r3, #0
 8022804:	d005      	beq.n	8022812 <lwrb_write+0x5a>
 8022806:	68fb      	ldr	r3, [r7, #12]
 8022808:	691b      	ldr	r3, [r3, #16]
 802280a:	69fa      	ldr	r2, [r7, #28]
 802280c:	2102      	movs	r1, #2
 802280e:	68f8      	ldr	r0, [r7, #12]
 8022810:	4798      	blx	r3
			free = lwrb_get_free(buff);
 8022812:	68f8      	ldr	r0, [r7, #12]
 8022814:	f000 f849 	bl	80228aa <lwrb_get_free>
 8022818:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 802281a:	687a      	ldr	r2, [r7, #4]
 802281c:	69fb      	ldr	r3, [r7, #28]
 802281e:	4293      	cmp	r3, r2
 8022820:	bf28      	it	cs
 8022822:	4613      	movcs	r3, r2
 8022824:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8022826:	687b      	ldr	r3, [r7, #4]
 8022828:	2b00      	cmp	r3, #0
 802282a:	d101      	bne.n	8022830 <lwrb_write+0x78>
        return 0;
 802282c:	2300      	movs	r3, #0
 802282e:	e038      	b.n	80228a2 <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	685a      	ldr	r2, [r3, #4]
 8022834:	68fb      	ldr	r3, [r7, #12]
 8022836:	68db      	ldr	r3, [r3, #12]
 8022838:	1ad3      	subs	r3, r2, r3
 802283a:	687a      	ldr	r2, [r7, #4]
 802283c:	4293      	cmp	r3, r2
 802283e:	bf28      	it	cs
 8022840:	4613      	movcs	r3, r2
 8022842:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8022844:	68fb      	ldr	r3, [r7, #12]
 8022846:	681a      	ldr	r2, [r3, #0]
 8022848:	68fb      	ldr	r3, [r7, #12]
 802284a:	68db      	ldr	r3, [r3, #12]
 802284c:	4413      	add	r3, r2
 802284e:	697a      	ldr	r2, [r7, #20]
 8022850:	69b9      	ldr	r1, [r7, #24]
 8022852:	4618      	mov	r0, r3
 8022854:	f000 fc41 	bl	80230da <memcpy>
    buff->w += tocopy;
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	68da      	ldr	r2, [r3, #12]
 802285c:	697b      	ldr	r3, [r7, #20]
 802285e:	441a      	add	r2, r3
 8022860:	68fb      	ldr	r3, [r7, #12]
 8022862:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8022864:	687a      	ldr	r2, [r7, #4]
 8022866:	697b      	ldr	r3, [r7, #20]
 8022868:	1ad3      	subs	r3, r2, r3
 802286a:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	2b00      	cmp	r3, #0
 8022870:	d00b      	beq.n	802288a <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8022872:	68fb      	ldr	r3, [r7, #12]
 8022874:	6818      	ldr	r0, [r3, #0]
 8022876:	69ba      	ldr	r2, [r7, #24]
 8022878:	697b      	ldr	r3, [r7, #20]
 802287a:	4413      	add	r3, r2
 802287c:	687a      	ldr	r2, [r7, #4]
 802287e:	4619      	mov	r1, r3
 8022880:	f000 fc2b 	bl	80230da <memcpy>
        buff->w = btw;
 8022884:	68fb      	ldr	r3, [r7, #12]
 8022886:	687a      	ldr	r2, [r7, #4]
 8022888:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 802288a:	68fb      	ldr	r3, [r7, #12]
 802288c:	68da      	ldr	r2, [r3, #12]
 802288e:	68fb      	ldr	r3, [r7, #12]
 8022890:	685b      	ldr	r3, [r3, #4]
 8022892:	429a      	cmp	r2, r3
 8022894:	d302      	bcc.n	802289c <lwrb_write+0xe4>
        buff->w = 0;
 8022896:	68fb      	ldr	r3, [r7, #12]
 8022898:	2200      	movs	r2, #0
 802289a:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 802289c:	697a      	ldr	r2, [r7, #20]
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	4413      	add	r3, r2
}
 80228a2:	4618      	mov	r0, r3
 80228a4:	3720      	adds	r7, #32
 80228a6:	46bd      	mov	sp, r7
 80228a8:	bd80      	pop	{r7, pc}

080228aa <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 80228aa:	b480      	push	{r7}
 80228ac:	b087      	sub	sp, #28
 80228ae:	af00      	add	r7, sp, #0
 80228b0:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 80228b2:	687b      	ldr	r3, [r7, #4]
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d007      	beq.n	80228c8 <lwrb_get_free+0x1e>
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	681b      	ldr	r3, [r3, #0]
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d003      	beq.n	80228c8 <lwrb_get_free+0x1e>
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	685b      	ldr	r3, [r3, #4]
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	d101      	bne.n	80228cc <lwrb_get_free+0x22>
        return 0;
 80228c8:	2300      	movs	r3, #0
 80228ca:	e01f      	b.n	802290c <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80228cc:	687b      	ldr	r3, [r7, #4]
 80228ce:	68db      	ldr	r3, [r3, #12]
 80228d0:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80228d2:	687b      	ldr	r3, [r7, #4]
 80228d4:	689b      	ldr	r3, [r3, #8]
 80228d6:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80228d8:	693a      	ldr	r2, [r7, #16]
 80228da:	68fb      	ldr	r3, [r7, #12]
 80228dc:	429a      	cmp	r2, r3
 80228de:	d103      	bne.n	80228e8 <lwrb_get_free+0x3e>
        size = buff->size;
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	685b      	ldr	r3, [r3, #4]
 80228e4:	617b      	str	r3, [r7, #20]
 80228e6:	e00f      	b.n	8022908 <lwrb_get_free+0x5e>
    } else if (r > w) {
 80228e8:	68fa      	ldr	r2, [r7, #12]
 80228ea:	693b      	ldr	r3, [r7, #16]
 80228ec:	429a      	cmp	r2, r3
 80228ee:	d904      	bls.n	80228fa <lwrb_get_free+0x50>
        size = r - w;
 80228f0:	68fa      	ldr	r2, [r7, #12]
 80228f2:	693b      	ldr	r3, [r7, #16]
 80228f4:	1ad3      	subs	r3, r2, r3
 80228f6:	617b      	str	r3, [r7, #20]
 80228f8:	e006      	b.n	8022908 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	685a      	ldr	r2, [r3, #4]
 80228fe:	68f9      	ldr	r1, [r7, #12]
 8022900:	693b      	ldr	r3, [r7, #16]
 8022902:	1acb      	subs	r3, r1, r3
 8022904:	4413      	add	r3, r2
 8022906:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8022908:	697b      	ldr	r3, [r7, #20]
 802290a:	3b01      	subs	r3, #1
}
 802290c:	4618      	mov	r0, r3
 802290e:	371c      	adds	r7, #28
 8022910:	46bd      	mov	sp, r7
 8022912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022916:	4770      	bx	lr

08022918 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 8022918:	b480      	push	{r7}
 802291a:	b087      	sub	sp, #28
 802291c:	af00      	add	r7, sp, #0
 802291e:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	2b00      	cmp	r3, #0
 8022924:	d007      	beq.n	8022936 <lwrb_get_full+0x1e>
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	681b      	ldr	r3, [r3, #0]
 802292a:	2b00      	cmp	r3, #0
 802292c:	d003      	beq.n	8022936 <lwrb_get_full+0x1e>
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	685b      	ldr	r3, [r3, #4]
 8022932:	2b00      	cmp	r3, #0
 8022934:	d101      	bne.n	802293a <lwrb_get_full+0x22>
        return 0;
 8022936:	2300      	movs	r3, #0
 8022938:	e01d      	b.n	8022976 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	68db      	ldr	r3, [r3, #12]
 802293e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	689b      	ldr	r3, [r3, #8]
 8022944:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8022946:	693a      	ldr	r2, [r7, #16]
 8022948:	68fb      	ldr	r3, [r7, #12]
 802294a:	429a      	cmp	r2, r3
 802294c:	d102      	bne.n	8022954 <lwrb_get_full+0x3c>
        size = 0;
 802294e:	2300      	movs	r3, #0
 8022950:	617b      	str	r3, [r7, #20]
 8022952:	e00f      	b.n	8022974 <lwrb_get_full+0x5c>
    } else if (w > r) {
 8022954:	693a      	ldr	r2, [r7, #16]
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	429a      	cmp	r2, r3
 802295a:	d904      	bls.n	8022966 <lwrb_get_full+0x4e>
        size = w - r;
 802295c:	693a      	ldr	r2, [r7, #16]
 802295e:	68fb      	ldr	r3, [r7, #12]
 8022960:	1ad3      	subs	r3, r2, r3
 8022962:	617b      	str	r3, [r7, #20]
 8022964:	e006      	b.n	8022974 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8022966:	687b      	ldr	r3, [r7, #4]
 8022968:	685a      	ldr	r2, [r3, #4]
 802296a:	6939      	ldr	r1, [r7, #16]
 802296c:	68fb      	ldr	r3, [r7, #12]
 802296e:	1acb      	subs	r3, r1, r3
 8022970:	4413      	add	r3, r2
 8022972:	617b      	str	r3, [r7, #20]
    }
    return size;
 8022974:	697b      	ldr	r3, [r7, #20]
}
 8022976:	4618      	mov	r0, r3
 8022978:	371c      	adds	r7, #28
 802297a:	46bd      	mov	sp, r7
 802297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022980:	4770      	bx	lr

08022982 <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 8022982:	b480      	push	{r7}
 8022984:	b083      	sub	sp, #12
 8022986:	af00      	add	r7, sp, #0
 8022988:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d007      	beq.n	80229a0 <lwrb_get_linear_block_read_address+0x1e>
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	681b      	ldr	r3, [r3, #0]
 8022994:	2b00      	cmp	r3, #0
 8022996:	d003      	beq.n	80229a0 <lwrb_get_linear_block_read_address+0x1e>
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	685b      	ldr	r3, [r3, #4]
 802299c:	2b00      	cmp	r3, #0
 802299e:	d101      	bne.n	80229a4 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 80229a0:	2300      	movs	r3, #0
 80229a2:	e004      	b.n	80229ae <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	681a      	ldr	r2, [r3, #0]
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	689b      	ldr	r3, [r3, #8]
 80229ac:	4413      	add	r3, r2
}
 80229ae:	4618      	mov	r0, r3
 80229b0:	370c      	adds	r7, #12
 80229b2:	46bd      	mov	sp, r7
 80229b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229b8:	4770      	bx	lr

080229ba <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 80229ba:	b480      	push	{r7}
 80229bc:	b087      	sub	sp, #28
 80229be:	af00      	add	r7, sp, #0
 80229c0:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	d007      	beq.n	80229d8 <lwrb_get_linear_block_read_length+0x1e>
 80229c8:	687b      	ldr	r3, [r7, #4]
 80229ca:	681b      	ldr	r3, [r3, #0]
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d003      	beq.n	80229d8 <lwrb_get_linear_block_read_length+0x1e>
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	685b      	ldr	r3, [r3, #4]
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	d101      	bne.n	80229dc <lwrb_get_linear_block_read_length+0x22>
        return 0;
 80229d8:	2300      	movs	r3, #0
 80229da:	e01b      	b.n	8022a14 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	68db      	ldr	r3, [r3, #12]
 80229e0:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	689b      	ldr	r3, [r3, #8]
 80229e6:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 80229e8:	693a      	ldr	r2, [r7, #16]
 80229ea:	68fb      	ldr	r3, [r7, #12]
 80229ec:	429a      	cmp	r2, r3
 80229ee:	d904      	bls.n	80229fa <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 80229f0:	693a      	ldr	r2, [r7, #16]
 80229f2:	68fb      	ldr	r3, [r7, #12]
 80229f4:	1ad3      	subs	r3, r2, r3
 80229f6:	617b      	str	r3, [r7, #20]
 80229f8:	e00b      	b.n	8022a12 <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 80229fa:	68fa      	ldr	r2, [r7, #12]
 80229fc:	693b      	ldr	r3, [r7, #16]
 80229fe:	429a      	cmp	r2, r3
 8022a00:	d905      	bls.n	8022a0e <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	685a      	ldr	r2, [r3, #4]
 8022a06:	68fb      	ldr	r3, [r7, #12]
 8022a08:	1ad3      	subs	r3, r2, r3
 8022a0a:	617b      	str	r3, [r7, #20]
 8022a0c:	e001      	b.n	8022a12 <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 8022a0e:	2300      	movs	r3, #0
 8022a10:	617b      	str	r3, [r7, #20]
    }
    return len;
 8022a12:	697b      	ldr	r3, [r7, #20]
}
 8022a14:	4618      	mov	r0, r3
 8022a16:	371c      	adds	r7, #28
 8022a18:	46bd      	mov	sp, r7
 8022a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a1e:	4770      	bx	lr

08022a20 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 8022a20:	b580      	push	{r7, lr}
 8022a22:	b084      	sub	sp, #16
 8022a24:	af00      	add	r7, sp, #0
 8022a26:	6078      	str	r0, [r7, #4]
 8022a28:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8022a2a:	687b      	ldr	r3, [r7, #4]
 8022a2c:	2b00      	cmp	r3, #0
 8022a2e:	d00a      	beq.n	8022a46 <lwrb_skip+0x26>
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d006      	beq.n	8022a46 <lwrb_skip+0x26>
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	685b      	ldr	r3, [r3, #4]
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	d002      	beq.n	8022a46 <lwrb_skip+0x26>
 8022a40:	683b      	ldr	r3, [r7, #0]
 8022a42:	2b00      	cmp	r3, #0
 8022a44:	d101      	bne.n	8022a4a <lwrb_skip+0x2a>
        return 0;
 8022a46:	2300      	movs	r3, #0
 8022a48:	e01d      	b.n	8022a86 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 8022a4a:	6878      	ldr	r0, [r7, #4]
 8022a4c:	f7ff ff64 	bl	8022918 <lwrb_get_full>
 8022a50:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 8022a52:	683a      	ldr	r2, [r7, #0]
 8022a54:	68fb      	ldr	r3, [r7, #12]
 8022a56:	4293      	cmp	r3, r2
 8022a58:	bf28      	it	cs
 8022a5a:	4613      	movcs	r3, r2
 8022a5c:	603b      	str	r3, [r7, #0]
    buff->r += len;
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	689a      	ldr	r2, [r3, #8]
 8022a62:	683b      	ldr	r3, [r7, #0]
 8022a64:	441a      	add	r2, r3
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	689a      	ldr	r2, [r3, #8]
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	685b      	ldr	r3, [r3, #4]
 8022a72:	429a      	cmp	r2, r3
 8022a74:	d306      	bcc.n	8022a84 <lwrb_skip+0x64>
        buff->r -= buff->size;
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	689a      	ldr	r2, [r3, #8]
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	685b      	ldr	r3, [r3, #4]
 8022a7e:	1ad2      	subs	r2, r2, r3
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 8022a84:	683b      	ldr	r3, [r7, #0]
}
 8022a86:	4618      	mov	r0, r3
 8022a88:	3710      	adds	r7, #16
 8022a8a:	46bd      	mov	sp, r7
 8022a8c:	bd80      	pop	{r7, pc}
	...

08022a90 <malloc>:
 8022a90:	4b02      	ldr	r3, [pc, #8]	; (8022a9c <malloc+0xc>)
 8022a92:	4601      	mov	r1, r0
 8022a94:	6818      	ldr	r0, [r3, #0]
 8022a96:	f000 b823 	b.w	8022ae0 <_malloc_r>
 8022a9a:	bf00      	nop
 8022a9c:	200500e4 	.word	0x200500e4

08022aa0 <sbrk_aligned>:
 8022aa0:	b570      	push	{r4, r5, r6, lr}
 8022aa2:	4e0e      	ldr	r6, [pc, #56]	; (8022adc <sbrk_aligned+0x3c>)
 8022aa4:	460c      	mov	r4, r1
 8022aa6:	4605      	mov	r5, r0
 8022aa8:	6831      	ldr	r1, [r6, #0]
 8022aaa:	b911      	cbnz	r1, 8022ab2 <sbrk_aligned+0x12>
 8022aac:	f000 facc 	bl	8023048 <_sbrk_r>
 8022ab0:	6030      	str	r0, [r6, #0]
 8022ab2:	4621      	mov	r1, r4
 8022ab4:	4628      	mov	r0, r5
 8022ab6:	f000 fac7 	bl	8023048 <_sbrk_r>
 8022aba:	1c43      	adds	r3, r0, #1
 8022abc:	d00a      	beq.n	8022ad4 <sbrk_aligned+0x34>
 8022abe:	1cc4      	adds	r4, r0, #3
 8022ac0:	f024 0403 	bic.w	r4, r4, #3
 8022ac4:	42a0      	cmp	r0, r4
 8022ac6:	d007      	beq.n	8022ad8 <sbrk_aligned+0x38>
 8022ac8:	1a21      	subs	r1, r4, r0
 8022aca:	4628      	mov	r0, r5
 8022acc:	f000 fabc 	bl	8023048 <_sbrk_r>
 8022ad0:	3001      	adds	r0, #1
 8022ad2:	d101      	bne.n	8022ad8 <sbrk_aligned+0x38>
 8022ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8022ad8:	4620      	mov	r0, r4
 8022ada:	bd70      	pop	{r4, r5, r6, pc}
 8022adc:	20061df8 	.word	0x20061df8

08022ae0 <_malloc_r>:
 8022ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ae4:	1ccd      	adds	r5, r1, #3
 8022ae6:	4607      	mov	r7, r0
 8022ae8:	f025 0503 	bic.w	r5, r5, #3
 8022aec:	3508      	adds	r5, #8
 8022aee:	2d0c      	cmp	r5, #12
 8022af0:	bf38      	it	cc
 8022af2:	250c      	movcc	r5, #12
 8022af4:	2d00      	cmp	r5, #0
 8022af6:	db01      	blt.n	8022afc <_malloc_r+0x1c>
 8022af8:	42a9      	cmp	r1, r5
 8022afa:	d905      	bls.n	8022b08 <_malloc_r+0x28>
 8022afc:	230c      	movs	r3, #12
 8022afe:	2600      	movs	r6, #0
 8022b00:	603b      	str	r3, [r7, #0]
 8022b02:	4630      	mov	r0, r6
 8022b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8022bdc <_malloc_r+0xfc>
 8022b0c:	f000 f868 	bl	8022be0 <__malloc_lock>
 8022b10:	f8d8 3000 	ldr.w	r3, [r8]
 8022b14:	461c      	mov	r4, r3
 8022b16:	bb5c      	cbnz	r4, 8022b70 <_malloc_r+0x90>
 8022b18:	4629      	mov	r1, r5
 8022b1a:	4638      	mov	r0, r7
 8022b1c:	f7ff ffc0 	bl	8022aa0 <sbrk_aligned>
 8022b20:	1c43      	adds	r3, r0, #1
 8022b22:	4604      	mov	r4, r0
 8022b24:	d155      	bne.n	8022bd2 <_malloc_r+0xf2>
 8022b26:	f8d8 4000 	ldr.w	r4, [r8]
 8022b2a:	4626      	mov	r6, r4
 8022b2c:	2e00      	cmp	r6, #0
 8022b2e:	d145      	bne.n	8022bbc <_malloc_r+0xdc>
 8022b30:	2c00      	cmp	r4, #0
 8022b32:	d048      	beq.n	8022bc6 <_malloc_r+0xe6>
 8022b34:	6823      	ldr	r3, [r4, #0]
 8022b36:	4631      	mov	r1, r6
 8022b38:	4638      	mov	r0, r7
 8022b3a:	eb04 0903 	add.w	r9, r4, r3
 8022b3e:	f000 fa83 	bl	8023048 <_sbrk_r>
 8022b42:	4581      	cmp	r9, r0
 8022b44:	d13f      	bne.n	8022bc6 <_malloc_r+0xe6>
 8022b46:	6821      	ldr	r1, [r4, #0]
 8022b48:	4638      	mov	r0, r7
 8022b4a:	1a6d      	subs	r5, r5, r1
 8022b4c:	4629      	mov	r1, r5
 8022b4e:	f7ff ffa7 	bl	8022aa0 <sbrk_aligned>
 8022b52:	3001      	adds	r0, #1
 8022b54:	d037      	beq.n	8022bc6 <_malloc_r+0xe6>
 8022b56:	6823      	ldr	r3, [r4, #0]
 8022b58:	442b      	add	r3, r5
 8022b5a:	6023      	str	r3, [r4, #0]
 8022b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	d038      	beq.n	8022bd6 <_malloc_r+0xf6>
 8022b64:	685a      	ldr	r2, [r3, #4]
 8022b66:	42a2      	cmp	r2, r4
 8022b68:	d12b      	bne.n	8022bc2 <_malloc_r+0xe2>
 8022b6a:	2200      	movs	r2, #0
 8022b6c:	605a      	str	r2, [r3, #4]
 8022b6e:	e00f      	b.n	8022b90 <_malloc_r+0xb0>
 8022b70:	6822      	ldr	r2, [r4, #0]
 8022b72:	1b52      	subs	r2, r2, r5
 8022b74:	d41f      	bmi.n	8022bb6 <_malloc_r+0xd6>
 8022b76:	2a0b      	cmp	r2, #11
 8022b78:	d917      	bls.n	8022baa <_malloc_r+0xca>
 8022b7a:	1961      	adds	r1, r4, r5
 8022b7c:	42a3      	cmp	r3, r4
 8022b7e:	6025      	str	r5, [r4, #0]
 8022b80:	bf18      	it	ne
 8022b82:	6059      	strne	r1, [r3, #4]
 8022b84:	6863      	ldr	r3, [r4, #4]
 8022b86:	bf08      	it	eq
 8022b88:	f8c8 1000 	streq.w	r1, [r8]
 8022b8c:	5162      	str	r2, [r4, r5]
 8022b8e:	604b      	str	r3, [r1, #4]
 8022b90:	f104 060b 	add.w	r6, r4, #11
 8022b94:	4638      	mov	r0, r7
 8022b96:	f000 f829 	bl	8022bec <__malloc_unlock>
 8022b9a:	1d23      	adds	r3, r4, #4
 8022b9c:	f026 0607 	bic.w	r6, r6, #7
 8022ba0:	1af2      	subs	r2, r6, r3
 8022ba2:	d0ae      	beq.n	8022b02 <_malloc_r+0x22>
 8022ba4:	1b9b      	subs	r3, r3, r6
 8022ba6:	50a3      	str	r3, [r4, r2]
 8022ba8:	e7ab      	b.n	8022b02 <_malloc_r+0x22>
 8022baa:	42a3      	cmp	r3, r4
 8022bac:	6862      	ldr	r2, [r4, #4]
 8022bae:	d1dd      	bne.n	8022b6c <_malloc_r+0x8c>
 8022bb0:	f8c8 2000 	str.w	r2, [r8]
 8022bb4:	e7ec      	b.n	8022b90 <_malloc_r+0xb0>
 8022bb6:	4623      	mov	r3, r4
 8022bb8:	6864      	ldr	r4, [r4, #4]
 8022bba:	e7ac      	b.n	8022b16 <_malloc_r+0x36>
 8022bbc:	4634      	mov	r4, r6
 8022bbe:	6876      	ldr	r6, [r6, #4]
 8022bc0:	e7b4      	b.n	8022b2c <_malloc_r+0x4c>
 8022bc2:	4613      	mov	r3, r2
 8022bc4:	e7cc      	b.n	8022b60 <_malloc_r+0x80>
 8022bc6:	230c      	movs	r3, #12
 8022bc8:	4638      	mov	r0, r7
 8022bca:	603b      	str	r3, [r7, #0]
 8022bcc:	f000 f80e 	bl	8022bec <__malloc_unlock>
 8022bd0:	e797      	b.n	8022b02 <_malloc_r+0x22>
 8022bd2:	6025      	str	r5, [r4, #0]
 8022bd4:	e7dc      	b.n	8022b90 <_malloc_r+0xb0>
 8022bd6:	605b      	str	r3, [r3, #4]
 8022bd8:	deff      	udf	#255	; 0xff
 8022bda:	bf00      	nop
 8022bdc:	20061df4 	.word	0x20061df4

08022be0 <__malloc_lock>:
 8022be0:	4801      	ldr	r0, [pc, #4]	; (8022be8 <__malloc_lock+0x8>)
 8022be2:	f000 ba78 	b.w	80230d6 <__retarget_lock_acquire_recursive>
 8022be6:	bf00      	nop
 8022be8:	20061f3c 	.word	0x20061f3c

08022bec <__malloc_unlock>:
 8022bec:	4801      	ldr	r0, [pc, #4]	; (8022bf4 <__malloc_unlock+0x8>)
 8022bee:	f000 ba73 	b.w	80230d8 <__retarget_lock_release_recursive>
 8022bf2:	bf00      	nop
 8022bf4:	20061f3c 	.word	0x20061f3c

08022bf8 <rand>:
 8022bf8:	4b16      	ldr	r3, [pc, #88]	; (8022c54 <rand+0x5c>)
 8022bfa:	b510      	push	{r4, lr}
 8022bfc:	681c      	ldr	r4, [r3, #0]
 8022bfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022c00:	b9b3      	cbnz	r3, 8022c30 <rand+0x38>
 8022c02:	2018      	movs	r0, #24
 8022c04:	f7ff ff44 	bl	8022a90 <malloc>
 8022c08:	4602      	mov	r2, r0
 8022c0a:	6320      	str	r0, [r4, #48]	; 0x30
 8022c0c:	b920      	cbnz	r0, 8022c18 <rand+0x20>
 8022c0e:	4b12      	ldr	r3, [pc, #72]	; (8022c58 <rand+0x60>)
 8022c10:	2152      	movs	r1, #82	; 0x52
 8022c12:	4812      	ldr	r0, [pc, #72]	; (8022c5c <rand+0x64>)
 8022c14:	f000 fa6e 	bl	80230f4 <__assert_func>
 8022c18:	4911      	ldr	r1, [pc, #68]	; (8022c60 <rand+0x68>)
 8022c1a:	4b12      	ldr	r3, [pc, #72]	; (8022c64 <rand+0x6c>)
 8022c1c:	e9c0 1300 	strd	r1, r3, [r0]
 8022c20:	4b11      	ldr	r3, [pc, #68]	; (8022c68 <rand+0x70>)
 8022c22:	2100      	movs	r1, #0
 8022c24:	6083      	str	r3, [r0, #8]
 8022c26:	230b      	movs	r3, #11
 8022c28:	8183      	strh	r3, [r0, #12]
 8022c2a:	2001      	movs	r0, #1
 8022c2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022c30:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8022c32:	480e      	ldr	r0, [pc, #56]	; (8022c6c <rand+0x74>)
 8022c34:	690b      	ldr	r3, [r1, #16]
 8022c36:	694c      	ldr	r4, [r1, #20]
 8022c38:	4a0d      	ldr	r2, [pc, #52]	; (8022c70 <rand+0x78>)
 8022c3a:	4358      	muls	r0, r3
 8022c3c:	fb02 0004 	mla	r0, r2, r4, r0
 8022c40:	fba3 3202 	umull	r3, r2, r3, r2
 8022c44:	3301      	adds	r3, #1
 8022c46:	eb40 0002 	adc.w	r0, r0, r2
 8022c4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8022c4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022c52:	bd10      	pop	{r4, pc}
 8022c54:	200500e4 	.word	0x200500e4
 8022c58:	08027bc2 	.word	0x08027bc2
 8022c5c:	08027bd9 	.word	0x08027bd9
 8022c60:	abcd330e 	.word	0xabcd330e
 8022c64:	e66d1234 	.word	0xe66d1234
 8022c68:	0005deec 	.word	0x0005deec
 8022c6c:	5851f42d 	.word	0x5851f42d
 8022c70:	4c957f2d 	.word	0x4c957f2d

08022c74 <std>:
 8022c74:	2300      	movs	r3, #0
 8022c76:	b510      	push	{r4, lr}
 8022c78:	4604      	mov	r4, r0
 8022c7a:	6083      	str	r3, [r0, #8]
 8022c7c:	8181      	strh	r1, [r0, #12]
 8022c7e:	4619      	mov	r1, r3
 8022c80:	6643      	str	r3, [r0, #100]	; 0x64
 8022c82:	81c2      	strh	r2, [r0, #14]
 8022c84:	2208      	movs	r2, #8
 8022c86:	6183      	str	r3, [r0, #24]
 8022c88:	e9c0 3300 	strd	r3, r3, [r0]
 8022c8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022c90:	305c      	adds	r0, #92	; 0x5c
 8022c92:	f000 f989 	bl	8022fa8 <memset>
 8022c96:	4b0d      	ldr	r3, [pc, #52]	; (8022ccc <std+0x58>)
 8022c98:	6224      	str	r4, [r4, #32]
 8022c9a:	6263      	str	r3, [r4, #36]	; 0x24
 8022c9c:	4b0c      	ldr	r3, [pc, #48]	; (8022cd0 <std+0x5c>)
 8022c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8022ca0:	4b0c      	ldr	r3, [pc, #48]	; (8022cd4 <std+0x60>)
 8022ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022ca4:	4b0c      	ldr	r3, [pc, #48]	; (8022cd8 <std+0x64>)
 8022ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8022ca8:	4b0c      	ldr	r3, [pc, #48]	; (8022cdc <std+0x68>)
 8022caa:	429c      	cmp	r4, r3
 8022cac:	d006      	beq.n	8022cbc <std+0x48>
 8022cae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8022cb2:	4294      	cmp	r4, r2
 8022cb4:	d002      	beq.n	8022cbc <std+0x48>
 8022cb6:	33d0      	adds	r3, #208	; 0xd0
 8022cb8:	429c      	cmp	r4, r3
 8022cba:	d105      	bne.n	8022cc8 <std+0x54>
 8022cbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022cc4:	f000 ba06 	b.w	80230d4 <__retarget_lock_init_recursive>
 8022cc8:	bd10      	pop	{r4, pc}
 8022cca:	bf00      	nop
 8022ccc:	08022e1d 	.word	0x08022e1d
 8022cd0:	08022e3f 	.word	0x08022e3f
 8022cd4:	08022e77 	.word	0x08022e77
 8022cd8:	08022e9b 	.word	0x08022e9b
 8022cdc:	20061dfc 	.word	0x20061dfc

08022ce0 <stdio_exit_handler>:
 8022ce0:	4a02      	ldr	r2, [pc, #8]	; (8022cec <stdio_exit_handler+0xc>)
 8022ce2:	4903      	ldr	r1, [pc, #12]	; (8022cf0 <stdio_exit_handler+0x10>)
 8022ce4:	4803      	ldr	r0, [pc, #12]	; (8022cf4 <stdio_exit_handler+0x14>)
 8022ce6:	f000 b869 	b.w	8022dbc <_fwalk_sglue>
 8022cea:	bf00      	nop
 8022cec:	2005008c 	.word	0x2005008c
 8022cf0:	08023b2d 	.word	0x08023b2d
 8022cf4:	20050098 	.word	0x20050098

08022cf8 <cleanup_stdio>:
 8022cf8:	6841      	ldr	r1, [r0, #4]
 8022cfa:	4b0c      	ldr	r3, [pc, #48]	; (8022d2c <cleanup_stdio+0x34>)
 8022cfc:	4299      	cmp	r1, r3
 8022cfe:	b510      	push	{r4, lr}
 8022d00:	4604      	mov	r4, r0
 8022d02:	d001      	beq.n	8022d08 <cleanup_stdio+0x10>
 8022d04:	f000 ff12 	bl	8023b2c <_fflush_r>
 8022d08:	68a1      	ldr	r1, [r4, #8]
 8022d0a:	4b09      	ldr	r3, [pc, #36]	; (8022d30 <cleanup_stdio+0x38>)
 8022d0c:	4299      	cmp	r1, r3
 8022d0e:	d002      	beq.n	8022d16 <cleanup_stdio+0x1e>
 8022d10:	4620      	mov	r0, r4
 8022d12:	f000 ff0b 	bl	8023b2c <_fflush_r>
 8022d16:	68e1      	ldr	r1, [r4, #12]
 8022d18:	4b06      	ldr	r3, [pc, #24]	; (8022d34 <cleanup_stdio+0x3c>)
 8022d1a:	4299      	cmp	r1, r3
 8022d1c:	d004      	beq.n	8022d28 <cleanup_stdio+0x30>
 8022d1e:	4620      	mov	r0, r4
 8022d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d24:	f000 bf02 	b.w	8023b2c <_fflush_r>
 8022d28:	bd10      	pop	{r4, pc}
 8022d2a:	bf00      	nop
 8022d2c:	20061dfc 	.word	0x20061dfc
 8022d30:	20061e64 	.word	0x20061e64
 8022d34:	20061ecc 	.word	0x20061ecc

08022d38 <global_stdio_init.part.0>:
 8022d38:	b510      	push	{r4, lr}
 8022d3a:	4b0b      	ldr	r3, [pc, #44]	; (8022d68 <global_stdio_init.part.0+0x30>)
 8022d3c:	2104      	movs	r1, #4
 8022d3e:	4c0b      	ldr	r4, [pc, #44]	; (8022d6c <global_stdio_init.part.0+0x34>)
 8022d40:	4a0b      	ldr	r2, [pc, #44]	; (8022d70 <global_stdio_init.part.0+0x38>)
 8022d42:	4620      	mov	r0, r4
 8022d44:	601a      	str	r2, [r3, #0]
 8022d46:	2200      	movs	r2, #0
 8022d48:	f7ff ff94 	bl	8022c74 <std>
 8022d4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8022d50:	2201      	movs	r2, #1
 8022d52:	2109      	movs	r1, #9
 8022d54:	f7ff ff8e 	bl	8022c74 <std>
 8022d58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8022d5c:	2202      	movs	r2, #2
 8022d5e:	2112      	movs	r1, #18
 8022d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d64:	f7ff bf86 	b.w	8022c74 <std>
 8022d68:	20061f34 	.word	0x20061f34
 8022d6c:	20061dfc 	.word	0x20061dfc
 8022d70:	08022ce1 	.word	0x08022ce1

08022d74 <__sfp_lock_acquire>:
 8022d74:	4801      	ldr	r0, [pc, #4]	; (8022d7c <__sfp_lock_acquire+0x8>)
 8022d76:	f000 b9ae 	b.w	80230d6 <__retarget_lock_acquire_recursive>
 8022d7a:	bf00      	nop
 8022d7c:	20061f3d 	.word	0x20061f3d

08022d80 <__sfp_lock_release>:
 8022d80:	4801      	ldr	r0, [pc, #4]	; (8022d88 <__sfp_lock_release+0x8>)
 8022d82:	f000 b9a9 	b.w	80230d8 <__retarget_lock_release_recursive>
 8022d86:	bf00      	nop
 8022d88:	20061f3d 	.word	0x20061f3d

08022d8c <__sinit>:
 8022d8c:	b510      	push	{r4, lr}
 8022d8e:	4604      	mov	r4, r0
 8022d90:	f7ff fff0 	bl	8022d74 <__sfp_lock_acquire>
 8022d94:	6a23      	ldr	r3, [r4, #32]
 8022d96:	b11b      	cbz	r3, 8022da0 <__sinit+0x14>
 8022d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d9c:	f7ff bff0 	b.w	8022d80 <__sfp_lock_release>
 8022da0:	4b04      	ldr	r3, [pc, #16]	; (8022db4 <__sinit+0x28>)
 8022da2:	6223      	str	r3, [r4, #32]
 8022da4:	4b04      	ldr	r3, [pc, #16]	; (8022db8 <__sinit+0x2c>)
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	d1f5      	bne.n	8022d98 <__sinit+0xc>
 8022dac:	f7ff ffc4 	bl	8022d38 <global_stdio_init.part.0>
 8022db0:	e7f2      	b.n	8022d98 <__sinit+0xc>
 8022db2:	bf00      	nop
 8022db4:	08022cf9 	.word	0x08022cf9
 8022db8:	20061f34 	.word	0x20061f34

08022dbc <_fwalk_sglue>:
 8022dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022dc0:	4607      	mov	r7, r0
 8022dc2:	4688      	mov	r8, r1
 8022dc4:	4614      	mov	r4, r2
 8022dc6:	2600      	movs	r6, #0
 8022dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8022dd0:	d505      	bpl.n	8022dde <_fwalk_sglue+0x22>
 8022dd2:	6824      	ldr	r4, [r4, #0]
 8022dd4:	2c00      	cmp	r4, #0
 8022dd6:	d1f7      	bne.n	8022dc8 <_fwalk_sglue+0xc>
 8022dd8:	4630      	mov	r0, r6
 8022dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022dde:	89ab      	ldrh	r3, [r5, #12]
 8022de0:	2b01      	cmp	r3, #1
 8022de2:	d907      	bls.n	8022df4 <_fwalk_sglue+0x38>
 8022de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022de8:	3301      	adds	r3, #1
 8022dea:	d003      	beq.n	8022df4 <_fwalk_sglue+0x38>
 8022dec:	4629      	mov	r1, r5
 8022dee:	4638      	mov	r0, r7
 8022df0:	47c0      	blx	r8
 8022df2:	4306      	orrs	r6, r0
 8022df4:	3568      	adds	r5, #104	; 0x68
 8022df6:	e7e9      	b.n	8022dcc <_fwalk_sglue+0x10>

08022df8 <iprintf>:
 8022df8:	b40f      	push	{r0, r1, r2, r3}
 8022dfa:	b507      	push	{r0, r1, r2, lr}
 8022dfc:	4906      	ldr	r1, [pc, #24]	; (8022e18 <iprintf+0x20>)
 8022dfe:	ab04      	add	r3, sp, #16
 8022e00:	6808      	ldr	r0, [r1, #0]
 8022e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e06:	6881      	ldr	r1, [r0, #8]
 8022e08:	9301      	str	r3, [sp, #4]
 8022e0a:	f000 fb5f 	bl	80234cc <_vfiprintf_r>
 8022e0e:	b003      	add	sp, #12
 8022e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e14:	b004      	add	sp, #16
 8022e16:	4770      	bx	lr
 8022e18:	200500e4 	.word	0x200500e4

08022e1c <__sread>:
 8022e1c:	b510      	push	{r4, lr}
 8022e1e:	460c      	mov	r4, r1
 8022e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e24:	f000 f8fe 	bl	8023024 <_read_r>
 8022e28:	2800      	cmp	r0, #0
 8022e2a:	bfab      	itete	ge
 8022e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8022e30:	181b      	addge	r3, r3, r0
 8022e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022e36:	bfac      	ite	ge
 8022e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8022e3a:	81a3      	strhlt	r3, [r4, #12]
 8022e3c:	bd10      	pop	{r4, pc}

08022e3e <__swrite>:
 8022e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e42:	461f      	mov	r7, r3
 8022e44:	898b      	ldrh	r3, [r1, #12]
 8022e46:	4605      	mov	r5, r0
 8022e48:	460c      	mov	r4, r1
 8022e4a:	05db      	lsls	r3, r3, #23
 8022e4c:	4616      	mov	r6, r2
 8022e4e:	d505      	bpl.n	8022e5c <__swrite+0x1e>
 8022e50:	2302      	movs	r3, #2
 8022e52:	2200      	movs	r2, #0
 8022e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e58:	f000 f8d2 	bl	8023000 <_lseek_r>
 8022e5c:	89a3      	ldrh	r3, [r4, #12]
 8022e5e:	4632      	mov	r2, r6
 8022e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e64:	4628      	mov	r0, r5
 8022e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022e6a:	81a3      	strh	r3, [r4, #12]
 8022e6c:	463b      	mov	r3, r7
 8022e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022e72:	f000 b8f9 	b.w	8023068 <_write_r>

08022e76 <__sseek>:
 8022e76:	b510      	push	{r4, lr}
 8022e78:	460c      	mov	r4, r1
 8022e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e7e:	f000 f8bf 	bl	8023000 <_lseek_r>
 8022e82:	1c43      	adds	r3, r0, #1
 8022e84:	89a3      	ldrh	r3, [r4, #12]
 8022e86:	bf15      	itete	ne
 8022e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8022e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022e92:	81a3      	strheq	r3, [r4, #12]
 8022e94:	bf18      	it	ne
 8022e96:	81a3      	strhne	r3, [r4, #12]
 8022e98:	bd10      	pop	{r4, pc}

08022e9a <__sclose>:
 8022e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e9e:	f000 b89f 	b.w	8022fe0 <_close_r>

08022ea2 <_vsniprintf_r>:
 8022ea2:	b530      	push	{r4, r5, lr}
 8022ea4:	4614      	mov	r4, r2
 8022ea6:	b09b      	sub	sp, #108	; 0x6c
 8022ea8:	4605      	mov	r5, r0
 8022eaa:	461a      	mov	r2, r3
 8022eac:	2c00      	cmp	r4, #0
 8022eae:	da05      	bge.n	8022ebc <_vsniprintf_r+0x1a>
 8022eb0:	238b      	movs	r3, #139	; 0x8b
 8022eb2:	6003      	str	r3, [r0, #0]
 8022eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8022eb8:	b01b      	add	sp, #108	; 0x6c
 8022eba:	bd30      	pop	{r4, r5, pc}
 8022ebc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022ec0:	9100      	str	r1, [sp, #0]
 8022ec2:	9104      	str	r1, [sp, #16]
 8022ec4:	4669      	mov	r1, sp
 8022ec6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022eca:	bf14      	ite	ne
 8022ecc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022ed0:	4623      	moveq	r3, r4
 8022ed2:	9302      	str	r3, [sp, #8]
 8022ed4:	9305      	str	r3, [sp, #20]
 8022ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022eda:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022ede:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022ee0:	f000 f9cc 	bl	802327c <_svfiprintf_r>
 8022ee4:	1c43      	adds	r3, r0, #1
 8022ee6:	bfbc      	itt	lt
 8022ee8:	238b      	movlt	r3, #139	; 0x8b
 8022eea:	602b      	strlt	r3, [r5, #0]
 8022eec:	2c00      	cmp	r4, #0
 8022eee:	d0e3      	beq.n	8022eb8 <_vsniprintf_r+0x16>
 8022ef0:	9b00      	ldr	r3, [sp, #0]
 8022ef2:	2200      	movs	r2, #0
 8022ef4:	701a      	strb	r2, [r3, #0]
 8022ef6:	e7df      	b.n	8022eb8 <_vsniprintf_r+0x16>

08022ef8 <vsniprintf>:
 8022ef8:	b507      	push	{r0, r1, r2, lr}
 8022efa:	9300      	str	r3, [sp, #0]
 8022efc:	4613      	mov	r3, r2
 8022efe:	460a      	mov	r2, r1
 8022f00:	4601      	mov	r1, r0
 8022f02:	4803      	ldr	r0, [pc, #12]	; (8022f10 <vsniprintf+0x18>)
 8022f04:	6800      	ldr	r0, [r0, #0]
 8022f06:	f7ff ffcc 	bl	8022ea2 <_vsniprintf_r>
 8022f0a:	b003      	add	sp, #12
 8022f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022f10:	200500e4 	.word	0x200500e4

08022f14 <_vsiprintf_r>:
 8022f14:	b500      	push	{lr}
 8022f16:	b09b      	sub	sp, #108	; 0x6c
 8022f18:	9100      	str	r1, [sp, #0]
 8022f1a:	9104      	str	r1, [sp, #16]
 8022f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022f20:	9105      	str	r1, [sp, #20]
 8022f22:	9102      	str	r1, [sp, #8]
 8022f24:	4905      	ldr	r1, [pc, #20]	; (8022f3c <_vsiprintf_r+0x28>)
 8022f26:	9103      	str	r1, [sp, #12]
 8022f28:	4669      	mov	r1, sp
 8022f2a:	f000 f9a7 	bl	802327c <_svfiprintf_r>
 8022f2e:	9b00      	ldr	r3, [sp, #0]
 8022f30:	2200      	movs	r2, #0
 8022f32:	701a      	strb	r2, [r3, #0]
 8022f34:	b01b      	add	sp, #108	; 0x6c
 8022f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8022f3a:	bf00      	nop
 8022f3c:	ffff0208 	.word	0xffff0208

08022f40 <vsiprintf>:
 8022f40:	4613      	mov	r3, r2
 8022f42:	460a      	mov	r2, r1
 8022f44:	4601      	mov	r1, r0
 8022f46:	4802      	ldr	r0, [pc, #8]	; (8022f50 <vsiprintf+0x10>)
 8022f48:	6800      	ldr	r0, [r0, #0]
 8022f4a:	f7ff bfe3 	b.w	8022f14 <_vsiprintf_r>
 8022f4e:	bf00      	nop
 8022f50:	200500e4 	.word	0x200500e4

08022f54 <memcmp>:
 8022f54:	3901      	subs	r1, #1
 8022f56:	4402      	add	r2, r0
 8022f58:	b510      	push	{r4, lr}
 8022f5a:	4290      	cmp	r0, r2
 8022f5c:	d101      	bne.n	8022f62 <memcmp+0xe>
 8022f5e:	2000      	movs	r0, #0
 8022f60:	e005      	b.n	8022f6e <memcmp+0x1a>
 8022f62:	7803      	ldrb	r3, [r0, #0]
 8022f64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022f68:	42a3      	cmp	r3, r4
 8022f6a:	d001      	beq.n	8022f70 <memcmp+0x1c>
 8022f6c:	1b18      	subs	r0, r3, r4
 8022f6e:	bd10      	pop	{r4, pc}
 8022f70:	3001      	adds	r0, #1
 8022f72:	e7f2      	b.n	8022f5a <memcmp+0x6>

08022f74 <memmove>:
 8022f74:	4288      	cmp	r0, r1
 8022f76:	b510      	push	{r4, lr}
 8022f78:	eb01 0402 	add.w	r4, r1, r2
 8022f7c:	d902      	bls.n	8022f84 <memmove+0x10>
 8022f7e:	4284      	cmp	r4, r0
 8022f80:	4623      	mov	r3, r4
 8022f82:	d807      	bhi.n	8022f94 <memmove+0x20>
 8022f84:	1e43      	subs	r3, r0, #1
 8022f86:	42a1      	cmp	r1, r4
 8022f88:	d008      	beq.n	8022f9c <memmove+0x28>
 8022f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022f92:	e7f8      	b.n	8022f86 <memmove+0x12>
 8022f94:	4402      	add	r2, r0
 8022f96:	4601      	mov	r1, r0
 8022f98:	428a      	cmp	r2, r1
 8022f9a:	d100      	bne.n	8022f9e <memmove+0x2a>
 8022f9c:	bd10      	pop	{r4, pc}
 8022f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022fa6:	e7f7      	b.n	8022f98 <memmove+0x24>

08022fa8 <memset>:
 8022fa8:	4402      	add	r2, r0
 8022faa:	4603      	mov	r3, r0
 8022fac:	4293      	cmp	r3, r2
 8022fae:	d100      	bne.n	8022fb2 <memset+0xa>
 8022fb0:	4770      	bx	lr
 8022fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8022fb6:	e7f9      	b.n	8022fac <memset+0x4>

08022fb8 <strncpy>:
 8022fb8:	3901      	subs	r1, #1
 8022fba:	4603      	mov	r3, r0
 8022fbc:	b510      	push	{r4, lr}
 8022fbe:	b132      	cbz	r2, 8022fce <strncpy+0x16>
 8022fc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022fc4:	3a01      	subs	r2, #1
 8022fc6:	f803 4b01 	strb.w	r4, [r3], #1
 8022fca:	2c00      	cmp	r4, #0
 8022fcc:	d1f7      	bne.n	8022fbe <strncpy+0x6>
 8022fce:	441a      	add	r2, r3
 8022fd0:	2100      	movs	r1, #0
 8022fd2:	4293      	cmp	r3, r2
 8022fd4:	d100      	bne.n	8022fd8 <strncpy+0x20>
 8022fd6:	bd10      	pop	{r4, pc}
 8022fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8022fdc:	e7f9      	b.n	8022fd2 <strncpy+0x1a>
	...

08022fe0 <_close_r>:
 8022fe0:	b538      	push	{r3, r4, r5, lr}
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	4d05      	ldr	r5, [pc, #20]	; (8022ffc <_close_r+0x1c>)
 8022fe6:	4604      	mov	r4, r0
 8022fe8:	4608      	mov	r0, r1
 8022fea:	602b      	str	r3, [r5, #0]
 8022fec:	f7de f963 	bl	80012b6 <_close>
 8022ff0:	1c43      	adds	r3, r0, #1
 8022ff2:	d102      	bne.n	8022ffa <_close_r+0x1a>
 8022ff4:	682b      	ldr	r3, [r5, #0]
 8022ff6:	b103      	cbz	r3, 8022ffa <_close_r+0x1a>
 8022ff8:	6023      	str	r3, [r4, #0]
 8022ffa:	bd38      	pop	{r3, r4, r5, pc}
 8022ffc:	20061f38 	.word	0x20061f38

08023000 <_lseek_r>:
 8023000:	b538      	push	{r3, r4, r5, lr}
 8023002:	4604      	mov	r4, r0
 8023004:	4d06      	ldr	r5, [pc, #24]	; (8023020 <_lseek_r+0x20>)
 8023006:	4608      	mov	r0, r1
 8023008:	4611      	mov	r1, r2
 802300a:	2200      	movs	r2, #0
 802300c:	602a      	str	r2, [r5, #0]
 802300e:	461a      	mov	r2, r3
 8023010:	f7de f978 	bl	8001304 <_lseek>
 8023014:	1c43      	adds	r3, r0, #1
 8023016:	d102      	bne.n	802301e <_lseek_r+0x1e>
 8023018:	682b      	ldr	r3, [r5, #0]
 802301a:	b103      	cbz	r3, 802301e <_lseek_r+0x1e>
 802301c:	6023      	str	r3, [r4, #0]
 802301e:	bd38      	pop	{r3, r4, r5, pc}
 8023020:	20061f38 	.word	0x20061f38

08023024 <_read_r>:
 8023024:	b538      	push	{r3, r4, r5, lr}
 8023026:	4604      	mov	r4, r0
 8023028:	4d06      	ldr	r5, [pc, #24]	; (8023044 <_read_r+0x20>)
 802302a:	4608      	mov	r0, r1
 802302c:	4611      	mov	r1, r2
 802302e:	2200      	movs	r2, #0
 8023030:	602a      	str	r2, [r5, #0]
 8023032:	461a      	mov	r2, r3
 8023034:	f7de f906 	bl	8001244 <_read>
 8023038:	1c43      	adds	r3, r0, #1
 802303a:	d102      	bne.n	8023042 <_read_r+0x1e>
 802303c:	682b      	ldr	r3, [r5, #0]
 802303e:	b103      	cbz	r3, 8023042 <_read_r+0x1e>
 8023040:	6023      	str	r3, [r4, #0]
 8023042:	bd38      	pop	{r3, r4, r5, pc}
 8023044:	20061f38 	.word	0x20061f38

08023048 <_sbrk_r>:
 8023048:	b538      	push	{r3, r4, r5, lr}
 802304a:	2300      	movs	r3, #0
 802304c:	4d05      	ldr	r5, [pc, #20]	; (8023064 <_sbrk_r+0x1c>)
 802304e:	4604      	mov	r4, r0
 8023050:	4608      	mov	r0, r1
 8023052:	602b      	str	r3, [r5, #0]
 8023054:	f7de f964 	bl	8001320 <_sbrk>
 8023058:	1c43      	adds	r3, r0, #1
 802305a:	d102      	bne.n	8023062 <_sbrk_r+0x1a>
 802305c:	682b      	ldr	r3, [r5, #0]
 802305e:	b103      	cbz	r3, 8023062 <_sbrk_r+0x1a>
 8023060:	6023      	str	r3, [r4, #0]
 8023062:	bd38      	pop	{r3, r4, r5, pc}
 8023064:	20061f38 	.word	0x20061f38

08023068 <_write_r>:
 8023068:	b538      	push	{r3, r4, r5, lr}
 802306a:	4604      	mov	r4, r0
 802306c:	4d06      	ldr	r5, [pc, #24]	; (8023088 <_write_r+0x20>)
 802306e:	4608      	mov	r0, r1
 8023070:	4611      	mov	r1, r2
 8023072:	2200      	movs	r2, #0
 8023074:	602a      	str	r2, [r5, #0]
 8023076:	461a      	mov	r2, r3
 8023078:	f7de f901 	bl	800127e <_write>
 802307c:	1c43      	adds	r3, r0, #1
 802307e:	d102      	bne.n	8023086 <_write_r+0x1e>
 8023080:	682b      	ldr	r3, [r5, #0]
 8023082:	b103      	cbz	r3, 8023086 <_write_r+0x1e>
 8023084:	6023      	str	r3, [r4, #0]
 8023086:	bd38      	pop	{r3, r4, r5, pc}
 8023088:	20061f38 	.word	0x20061f38

0802308c <__libc_init_array>:
 802308c:	b570      	push	{r4, r5, r6, lr}
 802308e:	4d0d      	ldr	r5, [pc, #52]	; (80230c4 <__libc_init_array+0x38>)
 8023090:	2600      	movs	r6, #0
 8023092:	4c0d      	ldr	r4, [pc, #52]	; (80230c8 <__libc_init_array+0x3c>)
 8023094:	1b64      	subs	r4, r4, r5
 8023096:	10a4      	asrs	r4, r4, #2
 8023098:	42a6      	cmp	r6, r4
 802309a:	d109      	bne.n	80230b0 <__libc_init_array+0x24>
 802309c:	4d0b      	ldr	r5, [pc, #44]	; (80230cc <__libc_init_array+0x40>)
 802309e:	2600      	movs	r6, #0
 80230a0:	4c0b      	ldr	r4, [pc, #44]	; (80230d0 <__libc_init_array+0x44>)
 80230a2:	f000 ff27 	bl	8023ef4 <_init>
 80230a6:	1b64      	subs	r4, r4, r5
 80230a8:	10a4      	asrs	r4, r4, #2
 80230aa:	42a6      	cmp	r6, r4
 80230ac:	d105      	bne.n	80230ba <__libc_init_array+0x2e>
 80230ae:	bd70      	pop	{r4, r5, r6, pc}
 80230b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80230b4:	3601      	adds	r6, #1
 80230b6:	4798      	blx	r3
 80230b8:	e7ee      	b.n	8023098 <__libc_init_array+0xc>
 80230ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80230be:	3601      	adds	r6, #1
 80230c0:	4798      	blx	r3
 80230c2:	e7f2      	b.n	80230aa <__libc_init_array+0x1e>
 80230c4:	08027ca8 	.word	0x08027ca8
 80230c8:	08027ca8 	.word	0x08027ca8
 80230cc:	08027ca8 	.word	0x08027ca8
 80230d0:	08027cac 	.word	0x08027cac

080230d4 <__retarget_lock_init_recursive>:
 80230d4:	4770      	bx	lr

080230d6 <__retarget_lock_acquire_recursive>:
 80230d6:	4770      	bx	lr

080230d8 <__retarget_lock_release_recursive>:
 80230d8:	4770      	bx	lr

080230da <memcpy>:
 80230da:	440a      	add	r2, r1
 80230dc:	1e43      	subs	r3, r0, #1
 80230de:	4291      	cmp	r1, r2
 80230e0:	d100      	bne.n	80230e4 <memcpy+0xa>
 80230e2:	4770      	bx	lr
 80230e4:	b510      	push	{r4, lr}
 80230e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80230ea:	4291      	cmp	r1, r2
 80230ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80230f0:	d1f9      	bne.n	80230e6 <memcpy+0xc>
 80230f2:	bd10      	pop	{r4, pc}

080230f4 <__assert_func>:
 80230f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80230f6:	4614      	mov	r4, r2
 80230f8:	461a      	mov	r2, r3
 80230fa:	4b09      	ldr	r3, [pc, #36]	; (8023120 <__assert_func+0x2c>)
 80230fc:	4605      	mov	r5, r0
 80230fe:	681b      	ldr	r3, [r3, #0]
 8023100:	68d8      	ldr	r0, [r3, #12]
 8023102:	b14c      	cbz	r4, 8023118 <__assert_func+0x24>
 8023104:	4b07      	ldr	r3, [pc, #28]	; (8023124 <__assert_func+0x30>)
 8023106:	9100      	str	r1, [sp, #0]
 8023108:	4907      	ldr	r1, [pc, #28]	; (8023128 <__assert_func+0x34>)
 802310a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802310e:	462b      	mov	r3, r5
 8023110:	f000 fd34 	bl	8023b7c <fiprintf>
 8023114:	f000 fde8 	bl	8023ce8 <abort>
 8023118:	4b04      	ldr	r3, [pc, #16]	; (802312c <__assert_func+0x38>)
 802311a:	461c      	mov	r4, r3
 802311c:	e7f3      	b.n	8023106 <__assert_func+0x12>
 802311e:	bf00      	nop
 8023120:	200500e4 	.word	0x200500e4
 8023124:	08027c31 	.word	0x08027c31
 8023128:	08027c3e 	.word	0x08027c3e
 802312c:	08027c6c 	.word	0x08027c6c

08023130 <_free_r>:
 8023130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023132:	2900      	cmp	r1, #0
 8023134:	d043      	beq.n	80231be <_free_r+0x8e>
 8023136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802313a:	1f0c      	subs	r4, r1, #4
 802313c:	9001      	str	r0, [sp, #4]
 802313e:	2b00      	cmp	r3, #0
 8023140:	bfb8      	it	lt
 8023142:	18e4      	addlt	r4, r4, r3
 8023144:	f7ff fd4c 	bl	8022be0 <__malloc_lock>
 8023148:	4a1e      	ldr	r2, [pc, #120]	; (80231c4 <_free_r+0x94>)
 802314a:	9801      	ldr	r0, [sp, #4]
 802314c:	6813      	ldr	r3, [r2, #0]
 802314e:	b933      	cbnz	r3, 802315e <_free_r+0x2e>
 8023150:	6063      	str	r3, [r4, #4]
 8023152:	6014      	str	r4, [r2, #0]
 8023154:	b003      	add	sp, #12
 8023156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802315a:	f7ff bd47 	b.w	8022bec <__malloc_unlock>
 802315e:	42a3      	cmp	r3, r4
 8023160:	d908      	bls.n	8023174 <_free_r+0x44>
 8023162:	6825      	ldr	r5, [r4, #0]
 8023164:	1961      	adds	r1, r4, r5
 8023166:	428b      	cmp	r3, r1
 8023168:	bf01      	itttt	eq
 802316a:	6819      	ldreq	r1, [r3, #0]
 802316c:	685b      	ldreq	r3, [r3, #4]
 802316e:	1949      	addeq	r1, r1, r5
 8023170:	6021      	streq	r1, [r4, #0]
 8023172:	e7ed      	b.n	8023150 <_free_r+0x20>
 8023174:	461a      	mov	r2, r3
 8023176:	685b      	ldr	r3, [r3, #4]
 8023178:	b10b      	cbz	r3, 802317e <_free_r+0x4e>
 802317a:	42a3      	cmp	r3, r4
 802317c:	d9fa      	bls.n	8023174 <_free_r+0x44>
 802317e:	6811      	ldr	r1, [r2, #0]
 8023180:	1855      	adds	r5, r2, r1
 8023182:	42a5      	cmp	r5, r4
 8023184:	d10b      	bne.n	802319e <_free_r+0x6e>
 8023186:	6824      	ldr	r4, [r4, #0]
 8023188:	4421      	add	r1, r4
 802318a:	1854      	adds	r4, r2, r1
 802318c:	6011      	str	r1, [r2, #0]
 802318e:	42a3      	cmp	r3, r4
 8023190:	d1e0      	bne.n	8023154 <_free_r+0x24>
 8023192:	681c      	ldr	r4, [r3, #0]
 8023194:	685b      	ldr	r3, [r3, #4]
 8023196:	440c      	add	r4, r1
 8023198:	6053      	str	r3, [r2, #4]
 802319a:	6014      	str	r4, [r2, #0]
 802319c:	e7da      	b.n	8023154 <_free_r+0x24>
 802319e:	d902      	bls.n	80231a6 <_free_r+0x76>
 80231a0:	230c      	movs	r3, #12
 80231a2:	6003      	str	r3, [r0, #0]
 80231a4:	e7d6      	b.n	8023154 <_free_r+0x24>
 80231a6:	6825      	ldr	r5, [r4, #0]
 80231a8:	1961      	adds	r1, r4, r5
 80231aa:	428b      	cmp	r3, r1
 80231ac:	bf02      	ittt	eq
 80231ae:	6819      	ldreq	r1, [r3, #0]
 80231b0:	685b      	ldreq	r3, [r3, #4]
 80231b2:	1949      	addeq	r1, r1, r5
 80231b4:	6063      	str	r3, [r4, #4]
 80231b6:	bf08      	it	eq
 80231b8:	6021      	streq	r1, [r4, #0]
 80231ba:	6054      	str	r4, [r2, #4]
 80231bc:	e7ca      	b.n	8023154 <_free_r+0x24>
 80231be:	b003      	add	sp, #12
 80231c0:	bd30      	pop	{r4, r5, pc}
 80231c2:	bf00      	nop
 80231c4:	20061df4 	.word	0x20061df4

080231c8 <__ssputs_r>:
 80231c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231cc:	461f      	mov	r7, r3
 80231ce:	688e      	ldr	r6, [r1, #8]
 80231d0:	4682      	mov	sl, r0
 80231d2:	460c      	mov	r4, r1
 80231d4:	42be      	cmp	r6, r7
 80231d6:	4690      	mov	r8, r2
 80231d8:	680b      	ldr	r3, [r1, #0]
 80231da:	d82c      	bhi.n	8023236 <__ssputs_r+0x6e>
 80231dc:	898a      	ldrh	r2, [r1, #12]
 80231de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80231e2:	d026      	beq.n	8023232 <__ssputs_r+0x6a>
 80231e4:	6965      	ldr	r5, [r4, #20]
 80231e6:	6909      	ldr	r1, [r1, #16]
 80231e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80231ec:	eba3 0901 	sub.w	r9, r3, r1
 80231f0:	1c7b      	adds	r3, r7, #1
 80231f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80231f6:	444b      	add	r3, r9
 80231f8:	106d      	asrs	r5, r5, #1
 80231fa:	429d      	cmp	r5, r3
 80231fc:	bf38      	it	cc
 80231fe:	461d      	movcc	r5, r3
 8023200:	0553      	lsls	r3, r2, #21
 8023202:	d527      	bpl.n	8023254 <__ssputs_r+0x8c>
 8023204:	4629      	mov	r1, r5
 8023206:	f7ff fc6b 	bl	8022ae0 <_malloc_r>
 802320a:	4606      	mov	r6, r0
 802320c:	b360      	cbz	r0, 8023268 <__ssputs_r+0xa0>
 802320e:	464a      	mov	r2, r9
 8023210:	6921      	ldr	r1, [r4, #16]
 8023212:	f7ff ff62 	bl	80230da <memcpy>
 8023216:	89a3      	ldrh	r3, [r4, #12]
 8023218:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023220:	81a3      	strh	r3, [r4, #12]
 8023222:	6126      	str	r6, [r4, #16]
 8023224:	444e      	add	r6, r9
 8023226:	6165      	str	r5, [r4, #20]
 8023228:	eba5 0509 	sub.w	r5, r5, r9
 802322c:	6026      	str	r6, [r4, #0]
 802322e:	463e      	mov	r6, r7
 8023230:	60a5      	str	r5, [r4, #8]
 8023232:	42be      	cmp	r6, r7
 8023234:	d900      	bls.n	8023238 <__ssputs_r+0x70>
 8023236:	463e      	mov	r6, r7
 8023238:	4632      	mov	r2, r6
 802323a:	4641      	mov	r1, r8
 802323c:	6820      	ldr	r0, [r4, #0]
 802323e:	f7ff fe99 	bl	8022f74 <memmove>
 8023242:	68a3      	ldr	r3, [r4, #8]
 8023244:	2000      	movs	r0, #0
 8023246:	1b9b      	subs	r3, r3, r6
 8023248:	60a3      	str	r3, [r4, #8]
 802324a:	6823      	ldr	r3, [r4, #0]
 802324c:	4433      	add	r3, r6
 802324e:	6023      	str	r3, [r4, #0]
 8023250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023254:	462a      	mov	r2, r5
 8023256:	f000 fd4e 	bl	8023cf6 <_realloc_r>
 802325a:	4606      	mov	r6, r0
 802325c:	2800      	cmp	r0, #0
 802325e:	d1e0      	bne.n	8023222 <__ssputs_r+0x5a>
 8023260:	6921      	ldr	r1, [r4, #16]
 8023262:	4650      	mov	r0, sl
 8023264:	f7ff ff64 	bl	8023130 <_free_r>
 8023268:	230c      	movs	r3, #12
 802326a:	f04f 30ff 	mov.w	r0, #4294967295
 802326e:	f8ca 3000 	str.w	r3, [sl]
 8023272:	89a3      	ldrh	r3, [r4, #12]
 8023274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023278:	81a3      	strh	r3, [r4, #12]
 802327a:	e7e9      	b.n	8023250 <__ssputs_r+0x88>

0802327c <_svfiprintf_r>:
 802327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023280:	4698      	mov	r8, r3
 8023282:	898b      	ldrh	r3, [r1, #12]
 8023284:	b09d      	sub	sp, #116	; 0x74
 8023286:	4607      	mov	r7, r0
 8023288:	061b      	lsls	r3, r3, #24
 802328a:	460d      	mov	r5, r1
 802328c:	4614      	mov	r4, r2
 802328e:	d50e      	bpl.n	80232ae <_svfiprintf_r+0x32>
 8023290:	690b      	ldr	r3, [r1, #16]
 8023292:	b963      	cbnz	r3, 80232ae <_svfiprintf_r+0x32>
 8023294:	2140      	movs	r1, #64	; 0x40
 8023296:	f7ff fc23 	bl	8022ae0 <_malloc_r>
 802329a:	6028      	str	r0, [r5, #0]
 802329c:	6128      	str	r0, [r5, #16]
 802329e:	b920      	cbnz	r0, 80232aa <_svfiprintf_r+0x2e>
 80232a0:	230c      	movs	r3, #12
 80232a2:	603b      	str	r3, [r7, #0]
 80232a4:	f04f 30ff 	mov.w	r0, #4294967295
 80232a8:	e0d0      	b.n	802344c <_svfiprintf_r+0x1d0>
 80232aa:	2340      	movs	r3, #64	; 0x40
 80232ac:	616b      	str	r3, [r5, #20]
 80232ae:	2300      	movs	r3, #0
 80232b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80232b4:	f04f 0901 	mov.w	r9, #1
 80232b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023464 <_svfiprintf_r+0x1e8>
 80232bc:	9309      	str	r3, [sp, #36]	; 0x24
 80232be:	2320      	movs	r3, #32
 80232c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232c4:	2330      	movs	r3, #48	; 0x30
 80232c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80232ca:	4623      	mov	r3, r4
 80232cc:	469a      	mov	sl, r3
 80232ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80232d2:	b10a      	cbz	r2, 80232d8 <_svfiprintf_r+0x5c>
 80232d4:	2a25      	cmp	r2, #37	; 0x25
 80232d6:	d1f9      	bne.n	80232cc <_svfiprintf_r+0x50>
 80232d8:	ebba 0b04 	subs.w	fp, sl, r4
 80232dc:	d00b      	beq.n	80232f6 <_svfiprintf_r+0x7a>
 80232de:	465b      	mov	r3, fp
 80232e0:	4622      	mov	r2, r4
 80232e2:	4629      	mov	r1, r5
 80232e4:	4638      	mov	r0, r7
 80232e6:	f7ff ff6f 	bl	80231c8 <__ssputs_r>
 80232ea:	3001      	adds	r0, #1
 80232ec:	f000 80a9 	beq.w	8023442 <_svfiprintf_r+0x1c6>
 80232f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232f2:	445a      	add	r2, fp
 80232f4:	9209      	str	r2, [sp, #36]	; 0x24
 80232f6:	f89a 3000 	ldrb.w	r3, [sl]
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	f000 80a1 	beq.w	8023442 <_svfiprintf_r+0x1c6>
 8023300:	2300      	movs	r3, #0
 8023302:	f04f 32ff 	mov.w	r2, #4294967295
 8023306:	f10a 0a01 	add.w	sl, sl, #1
 802330a:	9304      	str	r3, [sp, #16]
 802330c:	9307      	str	r3, [sp, #28]
 802330e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023312:	931a      	str	r3, [sp, #104]	; 0x68
 8023314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023318:	4654      	mov	r4, sl
 802331a:	2205      	movs	r2, #5
 802331c:	4851      	ldr	r0, [pc, #324]	; (8023464 <_svfiprintf_r+0x1e8>)
 802331e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023322:	f000 fcd3 	bl	8023ccc <memchr>
 8023326:	9a04      	ldr	r2, [sp, #16]
 8023328:	b9d8      	cbnz	r0, 8023362 <_svfiprintf_r+0xe6>
 802332a:	06d0      	lsls	r0, r2, #27
 802332c:	bf44      	itt	mi
 802332e:	2320      	movmi	r3, #32
 8023330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023334:	0711      	lsls	r1, r2, #28
 8023336:	bf44      	itt	mi
 8023338:	232b      	movmi	r3, #43	; 0x2b
 802333a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802333e:	f89a 3000 	ldrb.w	r3, [sl]
 8023342:	2b2a      	cmp	r3, #42	; 0x2a
 8023344:	d015      	beq.n	8023372 <_svfiprintf_r+0xf6>
 8023346:	9a07      	ldr	r2, [sp, #28]
 8023348:	4654      	mov	r4, sl
 802334a:	2000      	movs	r0, #0
 802334c:	f04f 0c0a 	mov.w	ip, #10
 8023350:	4621      	mov	r1, r4
 8023352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023356:	3b30      	subs	r3, #48	; 0x30
 8023358:	2b09      	cmp	r3, #9
 802335a:	d94d      	bls.n	80233f8 <_svfiprintf_r+0x17c>
 802335c:	b1b0      	cbz	r0, 802338c <_svfiprintf_r+0x110>
 802335e:	9207      	str	r2, [sp, #28]
 8023360:	e014      	b.n	802338c <_svfiprintf_r+0x110>
 8023362:	eba0 0308 	sub.w	r3, r0, r8
 8023366:	46a2      	mov	sl, r4
 8023368:	fa09 f303 	lsl.w	r3, r9, r3
 802336c:	4313      	orrs	r3, r2
 802336e:	9304      	str	r3, [sp, #16]
 8023370:	e7d2      	b.n	8023318 <_svfiprintf_r+0x9c>
 8023372:	9b03      	ldr	r3, [sp, #12]
 8023374:	1d19      	adds	r1, r3, #4
 8023376:	681b      	ldr	r3, [r3, #0]
 8023378:	2b00      	cmp	r3, #0
 802337a:	9103      	str	r1, [sp, #12]
 802337c:	bfbb      	ittet	lt
 802337e:	425b      	neglt	r3, r3
 8023380:	f042 0202 	orrlt.w	r2, r2, #2
 8023384:	9307      	strge	r3, [sp, #28]
 8023386:	9307      	strlt	r3, [sp, #28]
 8023388:	bfb8      	it	lt
 802338a:	9204      	strlt	r2, [sp, #16]
 802338c:	7823      	ldrb	r3, [r4, #0]
 802338e:	2b2e      	cmp	r3, #46	; 0x2e
 8023390:	d10c      	bne.n	80233ac <_svfiprintf_r+0x130>
 8023392:	7863      	ldrb	r3, [r4, #1]
 8023394:	2b2a      	cmp	r3, #42	; 0x2a
 8023396:	d134      	bne.n	8023402 <_svfiprintf_r+0x186>
 8023398:	9b03      	ldr	r3, [sp, #12]
 802339a:	3402      	adds	r4, #2
 802339c:	1d1a      	adds	r2, r3, #4
 802339e:	681b      	ldr	r3, [r3, #0]
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	9203      	str	r2, [sp, #12]
 80233a4:	bfb8      	it	lt
 80233a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80233aa:	9305      	str	r3, [sp, #20]
 80233ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8023474 <_svfiprintf_r+0x1f8>
 80233b0:	2203      	movs	r2, #3
 80233b2:	7821      	ldrb	r1, [r4, #0]
 80233b4:	4650      	mov	r0, sl
 80233b6:	f000 fc89 	bl	8023ccc <memchr>
 80233ba:	b138      	cbz	r0, 80233cc <_svfiprintf_r+0x150>
 80233bc:	eba0 000a 	sub.w	r0, r0, sl
 80233c0:	2240      	movs	r2, #64	; 0x40
 80233c2:	9b04      	ldr	r3, [sp, #16]
 80233c4:	3401      	adds	r4, #1
 80233c6:	4082      	lsls	r2, r0
 80233c8:	4313      	orrs	r3, r2
 80233ca:	9304      	str	r3, [sp, #16]
 80233cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233d0:	2206      	movs	r2, #6
 80233d2:	4825      	ldr	r0, [pc, #148]	; (8023468 <_svfiprintf_r+0x1ec>)
 80233d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80233d8:	f000 fc78 	bl	8023ccc <memchr>
 80233dc:	2800      	cmp	r0, #0
 80233de:	d038      	beq.n	8023452 <_svfiprintf_r+0x1d6>
 80233e0:	4b22      	ldr	r3, [pc, #136]	; (802346c <_svfiprintf_r+0x1f0>)
 80233e2:	bb1b      	cbnz	r3, 802342c <_svfiprintf_r+0x1b0>
 80233e4:	9b03      	ldr	r3, [sp, #12]
 80233e6:	3307      	adds	r3, #7
 80233e8:	f023 0307 	bic.w	r3, r3, #7
 80233ec:	3308      	adds	r3, #8
 80233ee:	9303      	str	r3, [sp, #12]
 80233f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233f2:	4433      	add	r3, r6
 80233f4:	9309      	str	r3, [sp, #36]	; 0x24
 80233f6:	e768      	b.n	80232ca <_svfiprintf_r+0x4e>
 80233f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80233fc:	460c      	mov	r4, r1
 80233fe:	2001      	movs	r0, #1
 8023400:	e7a6      	b.n	8023350 <_svfiprintf_r+0xd4>
 8023402:	2300      	movs	r3, #0
 8023404:	3401      	adds	r4, #1
 8023406:	f04f 0c0a 	mov.w	ip, #10
 802340a:	4619      	mov	r1, r3
 802340c:	9305      	str	r3, [sp, #20]
 802340e:	4620      	mov	r0, r4
 8023410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023414:	3a30      	subs	r2, #48	; 0x30
 8023416:	2a09      	cmp	r2, #9
 8023418:	d903      	bls.n	8023422 <_svfiprintf_r+0x1a6>
 802341a:	2b00      	cmp	r3, #0
 802341c:	d0c6      	beq.n	80233ac <_svfiprintf_r+0x130>
 802341e:	9105      	str	r1, [sp, #20]
 8023420:	e7c4      	b.n	80233ac <_svfiprintf_r+0x130>
 8023422:	fb0c 2101 	mla	r1, ip, r1, r2
 8023426:	4604      	mov	r4, r0
 8023428:	2301      	movs	r3, #1
 802342a:	e7f0      	b.n	802340e <_svfiprintf_r+0x192>
 802342c:	ab03      	add	r3, sp, #12
 802342e:	462a      	mov	r2, r5
 8023430:	a904      	add	r1, sp, #16
 8023432:	4638      	mov	r0, r7
 8023434:	9300      	str	r3, [sp, #0]
 8023436:	4b0e      	ldr	r3, [pc, #56]	; (8023470 <_svfiprintf_r+0x1f4>)
 8023438:	f3af 8000 	nop.w
 802343c:	1c42      	adds	r2, r0, #1
 802343e:	4606      	mov	r6, r0
 8023440:	d1d6      	bne.n	80233f0 <_svfiprintf_r+0x174>
 8023442:	89ab      	ldrh	r3, [r5, #12]
 8023444:	065b      	lsls	r3, r3, #25
 8023446:	f53f af2d 	bmi.w	80232a4 <_svfiprintf_r+0x28>
 802344a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802344c:	b01d      	add	sp, #116	; 0x74
 802344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023452:	ab03      	add	r3, sp, #12
 8023454:	462a      	mov	r2, r5
 8023456:	a904      	add	r1, sp, #16
 8023458:	4638      	mov	r0, r7
 802345a:	9300      	str	r3, [sp, #0]
 802345c:	4b04      	ldr	r3, [pc, #16]	; (8023470 <_svfiprintf_r+0x1f4>)
 802345e:	f000 f9c1 	bl	80237e4 <_printf_i>
 8023462:	e7eb      	b.n	802343c <_svfiprintf_r+0x1c0>
 8023464:	08027c6d 	.word	0x08027c6d
 8023468:	08027c77 	.word	0x08027c77
 802346c:	00000000 	.word	0x00000000
 8023470:	080231c9 	.word	0x080231c9
 8023474:	08027c73 	.word	0x08027c73

08023478 <__sfputc_r>:
 8023478:	6893      	ldr	r3, [r2, #8]
 802347a:	3b01      	subs	r3, #1
 802347c:	2b00      	cmp	r3, #0
 802347e:	6093      	str	r3, [r2, #8]
 8023480:	b410      	push	{r4}
 8023482:	da08      	bge.n	8023496 <__sfputc_r+0x1e>
 8023484:	6994      	ldr	r4, [r2, #24]
 8023486:	42a3      	cmp	r3, r4
 8023488:	db01      	blt.n	802348e <__sfputc_r+0x16>
 802348a:	290a      	cmp	r1, #10
 802348c:	d103      	bne.n	8023496 <__sfputc_r+0x1e>
 802348e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023492:	f000 bb85 	b.w	8023ba0 <__swbuf_r>
 8023496:	6813      	ldr	r3, [r2, #0]
 8023498:	1c58      	adds	r0, r3, #1
 802349a:	6010      	str	r0, [r2, #0]
 802349c:	4608      	mov	r0, r1
 802349e:	7019      	strb	r1, [r3, #0]
 80234a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234a4:	4770      	bx	lr

080234a6 <__sfputs_r>:
 80234a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234a8:	4606      	mov	r6, r0
 80234aa:	460f      	mov	r7, r1
 80234ac:	4614      	mov	r4, r2
 80234ae:	18d5      	adds	r5, r2, r3
 80234b0:	42ac      	cmp	r4, r5
 80234b2:	d101      	bne.n	80234b8 <__sfputs_r+0x12>
 80234b4:	2000      	movs	r0, #0
 80234b6:	e007      	b.n	80234c8 <__sfputs_r+0x22>
 80234b8:	463a      	mov	r2, r7
 80234ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234be:	4630      	mov	r0, r6
 80234c0:	f7ff ffda 	bl	8023478 <__sfputc_r>
 80234c4:	1c43      	adds	r3, r0, #1
 80234c6:	d1f3      	bne.n	80234b0 <__sfputs_r+0xa>
 80234c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080234cc <_vfiprintf_r>:
 80234cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234d0:	460d      	mov	r5, r1
 80234d2:	b09d      	sub	sp, #116	; 0x74
 80234d4:	4614      	mov	r4, r2
 80234d6:	4698      	mov	r8, r3
 80234d8:	4606      	mov	r6, r0
 80234da:	b118      	cbz	r0, 80234e4 <_vfiprintf_r+0x18>
 80234dc:	6a03      	ldr	r3, [r0, #32]
 80234de:	b90b      	cbnz	r3, 80234e4 <_vfiprintf_r+0x18>
 80234e0:	f7ff fc54 	bl	8022d8c <__sinit>
 80234e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234e6:	07d9      	lsls	r1, r3, #31
 80234e8:	d405      	bmi.n	80234f6 <_vfiprintf_r+0x2a>
 80234ea:	89ab      	ldrh	r3, [r5, #12]
 80234ec:	059a      	lsls	r2, r3, #22
 80234ee:	d402      	bmi.n	80234f6 <_vfiprintf_r+0x2a>
 80234f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234f2:	f7ff fdf0 	bl	80230d6 <__retarget_lock_acquire_recursive>
 80234f6:	89ab      	ldrh	r3, [r5, #12]
 80234f8:	071b      	lsls	r3, r3, #28
 80234fa:	d501      	bpl.n	8023500 <_vfiprintf_r+0x34>
 80234fc:	692b      	ldr	r3, [r5, #16]
 80234fe:	b99b      	cbnz	r3, 8023528 <_vfiprintf_r+0x5c>
 8023500:	4629      	mov	r1, r5
 8023502:	4630      	mov	r0, r6
 8023504:	f000 fb8a 	bl	8023c1c <__swsetup_r>
 8023508:	b170      	cbz	r0, 8023528 <_vfiprintf_r+0x5c>
 802350a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802350c:	07dc      	lsls	r4, r3, #31
 802350e:	d504      	bpl.n	802351a <_vfiprintf_r+0x4e>
 8023510:	f04f 30ff 	mov.w	r0, #4294967295
 8023514:	b01d      	add	sp, #116	; 0x74
 8023516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802351a:	89ab      	ldrh	r3, [r5, #12]
 802351c:	0598      	lsls	r0, r3, #22
 802351e:	d4f7      	bmi.n	8023510 <_vfiprintf_r+0x44>
 8023520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023522:	f7ff fdd9 	bl	80230d8 <__retarget_lock_release_recursive>
 8023526:	e7f3      	b.n	8023510 <_vfiprintf_r+0x44>
 8023528:	2300      	movs	r3, #0
 802352a:	f8cd 800c 	str.w	r8, [sp, #12]
 802352e:	f04f 0901 	mov.w	r9, #1
 8023532:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80236ec <_vfiprintf_r+0x220>
 8023536:	9309      	str	r3, [sp, #36]	; 0x24
 8023538:	2320      	movs	r3, #32
 802353a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802353e:	2330      	movs	r3, #48	; 0x30
 8023540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023544:	4623      	mov	r3, r4
 8023546:	469a      	mov	sl, r3
 8023548:	f813 2b01 	ldrb.w	r2, [r3], #1
 802354c:	b10a      	cbz	r2, 8023552 <_vfiprintf_r+0x86>
 802354e:	2a25      	cmp	r2, #37	; 0x25
 8023550:	d1f9      	bne.n	8023546 <_vfiprintf_r+0x7a>
 8023552:	ebba 0b04 	subs.w	fp, sl, r4
 8023556:	d00b      	beq.n	8023570 <_vfiprintf_r+0xa4>
 8023558:	465b      	mov	r3, fp
 802355a:	4622      	mov	r2, r4
 802355c:	4629      	mov	r1, r5
 802355e:	4630      	mov	r0, r6
 8023560:	f7ff ffa1 	bl	80234a6 <__sfputs_r>
 8023564:	3001      	adds	r0, #1
 8023566:	f000 80a9 	beq.w	80236bc <_vfiprintf_r+0x1f0>
 802356a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802356c:	445a      	add	r2, fp
 802356e:	9209      	str	r2, [sp, #36]	; 0x24
 8023570:	f89a 3000 	ldrb.w	r3, [sl]
 8023574:	2b00      	cmp	r3, #0
 8023576:	f000 80a1 	beq.w	80236bc <_vfiprintf_r+0x1f0>
 802357a:	2300      	movs	r3, #0
 802357c:	f04f 32ff 	mov.w	r2, #4294967295
 8023580:	f10a 0a01 	add.w	sl, sl, #1
 8023584:	9304      	str	r3, [sp, #16]
 8023586:	9307      	str	r3, [sp, #28]
 8023588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802358c:	931a      	str	r3, [sp, #104]	; 0x68
 802358e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023592:	4654      	mov	r4, sl
 8023594:	2205      	movs	r2, #5
 8023596:	4855      	ldr	r0, [pc, #340]	; (80236ec <_vfiprintf_r+0x220>)
 8023598:	f814 1b01 	ldrb.w	r1, [r4], #1
 802359c:	f000 fb96 	bl	8023ccc <memchr>
 80235a0:	9a04      	ldr	r2, [sp, #16]
 80235a2:	b9d8      	cbnz	r0, 80235dc <_vfiprintf_r+0x110>
 80235a4:	06d1      	lsls	r1, r2, #27
 80235a6:	bf44      	itt	mi
 80235a8:	2320      	movmi	r3, #32
 80235aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235ae:	0713      	lsls	r3, r2, #28
 80235b0:	bf44      	itt	mi
 80235b2:	232b      	movmi	r3, #43	; 0x2b
 80235b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235b8:	f89a 3000 	ldrb.w	r3, [sl]
 80235bc:	2b2a      	cmp	r3, #42	; 0x2a
 80235be:	d015      	beq.n	80235ec <_vfiprintf_r+0x120>
 80235c0:	9a07      	ldr	r2, [sp, #28]
 80235c2:	4654      	mov	r4, sl
 80235c4:	2000      	movs	r0, #0
 80235c6:	f04f 0c0a 	mov.w	ip, #10
 80235ca:	4621      	mov	r1, r4
 80235cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80235d0:	3b30      	subs	r3, #48	; 0x30
 80235d2:	2b09      	cmp	r3, #9
 80235d4:	d94d      	bls.n	8023672 <_vfiprintf_r+0x1a6>
 80235d6:	b1b0      	cbz	r0, 8023606 <_vfiprintf_r+0x13a>
 80235d8:	9207      	str	r2, [sp, #28]
 80235da:	e014      	b.n	8023606 <_vfiprintf_r+0x13a>
 80235dc:	eba0 0308 	sub.w	r3, r0, r8
 80235e0:	46a2      	mov	sl, r4
 80235e2:	fa09 f303 	lsl.w	r3, r9, r3
 80235e6:	4313      	orrs	r3, r2
 80235e8:	9304      	str	r3, [sp, #16]
 80235ea:	e7d2      	b.n	8023592 <_vfiprintf_r+0xc6>
 80235ec:	9b03      	ldr	r3, [sp, #12]
 80235ee:	1d19      	adds	r1, r3, #4
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	9103      	str	r1, [sp, #12]
 80235f6:	bfbb      	ittet	lt
 80235f8:	425b      	neglt	r3, r3
 80235fa:	f042 0202 	orrlt.w	r2, r2, #2
 80235fe:	9307      	strge	r3, [sp, #28]
 8023600:	9307      	strlt	r3, [sp, #28]
 8023602:	bfb8      	it	lt
 8023604:	9204      	strlt	r2, [sp, #16]
 8023606:	7823      	ldrb	r3, [r4, #0]
 8023608:	2b2e      	cmp	r3, #46	; 0x2e
 802360a:	d10c      	bne.n	8023626 <_vfiprintf_r+0x15a>
 802360c:	7863      	ldrb	r3, [r4, #1]
 802360e:	2b2a      	cmp	r3, #42	; 0x2a
 8023610:	d134      	bne.n	802367c <_vfiprintf_r+0x1b0>
 8023612:	9b03      	ldr	r3, [sp, #12]
 8023614:	3402      	adds	r4, #2
 8023616:	1d1a      	adds	r2, r3, #4
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	2b00      	cmp	r3, #0
 802361c:	9203      	str	r2, [sp, #12]
 802361e:	bfb8      	it	lt
 8023620:	f04f 33ff 	movlt.w	r3, #4294967295
 8023624:	9305      	str	r3, [sp, #20]
 8023626:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80236fc <_vfiprintf_r+0x230>
 802362a:	2203      	movs	r2, #3
 802362c:	7821      	ldrb	r1, [r4, #0]
 802362e:	4650      	mov	r0, sl
 8023630:	f000 fb4c 	bl	8023ccc <memchr>
 8023634:	b138      	cbz	r0, 8023646 <_vfiprintf_r+0x17a>
 8023636:	eba0 000a 	sub.w	r0, r0, sl
 802363a:	2240      	movs	r2, #64	; 0x40
 802363c:	9b04      	ldr	r3, [sp, #16]
 802363e:	3401      	adds	r4, #1
 8023640:	4082      	lsls	r2, r0
 8023642:	4313      	orrs	r3, r2
 8023644:	9304      	str	r3, [sp, #16]
 8023646:	f814 1b01 	ldrb.w	r1, [r4], #1
 802364a:	2206      	movs	r2, #6
 802364c:	4828      	ldr	r0, [pc, #160]	; (80236f0 <_vfiprintf_r+0x224>)
 802364e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023652:	f000 fb3b 	bl	8023ccc <memchr>
 8023656:	2800      	cmp	r0, #0
 8023658:	d03f      	beq.n	80236da <_vfiprintf_r+0x20e>
 802365a:	4b26      	ldr	r3, [pc, #152]	; (80236f4 <_vfiprintf_r+0x228>)
 802365c:	bb1b      	cbnz	r3, 80236a6 <_vfiprintf_r+0x1da>
 802365e:	9b03      	ldr	r3, [sp, #12]
 8023660:	3307      	adds	r3, #7
 8023662:	f023 0307 	bic.w	r3, r3, #7
 8023666:	3308      	adds	r3, #8
 8023668:	9303      	str	r3, [sp, #12]
 802366a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802366c:	443b      	add	r3, r7
 802366e:	9309      	str	r3, [sp, #36]	; 0x24
 8023670:	e768      	b.n	8023544 <_vfiprintf_r+0x78>
 8023672:	fb0c 3202 	mla	r2, ip, r2, r3
 8023676:	460c      	mov	r4, r1
 8023678:	2001      	movs	r0, #1
 802367a:	e7a6      	b.n	80235ca <_vfiprintf_r+0xfe>
 802367c:	2300      	movs	r3, #0
 802367e:	3401      	adds	r4, #1
 8023680:	f04f 0c0a 	mov.w	ip, #10
 8023684:	4619      	mov	r1, r3
 8023686:	9305      	str	r3, [sp, #20]
 8023688:	4620      	mov	r0, r4
 802368a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802368e:	3a30      	subs	r2, #48	; 0x30
 8023690:	2a09      	cmp	r2, #9
 8023692:	d903      	bls.n	802369c <_vfiprintf_r+0x1d0>
 8023694:	2b00      	cmp	r3, #0
 8023696:	d0c6      	beq.n	8023626 <_vfiprintf_r+0x15a>
 8023698:	9105      	str	r1, [sp, #20]
 802369a:	e7c4      	b.n	8023626 <_vfiprintf_r+0x15a>
 802369c:	fb0c 2101 	mla	r1, ip, r1, r2
 80236a0:	4604      	mov	r4, r0
 80236a2:	2301      	movs	r3, #1
 80236a4:	e7f0      	b.n	8023688 <_vfiprintf_r+0x1bc>
 80236a6:	ab03      	add	r3, sp, #12
 80236a8:	462a      	mov	r2, r5
 80236aa:	a904      	add	r1, sp, #16
 80236ac:	4630      	mov	r0, r6
 80236ae:	9300      	str	r3, [sp, #0]
 80236b0:	4b11      	ldr	r3, [pc, #68]	; (80236f8 <_vfiprintf_r+0x22c>)
 80236b2:	f3af 8000 	nop.w
 80236b6:	4607      	mov	r7, r0
 80236b8:	1c78      	adds	r0, r7, #1
 80236ba:	d1d6      	bne.n	802366a <_vfiprintf_r+0x19e>
 80236bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236be:	07d9      	lsls	r1, r3, #31
 80236c0:	d405      	bmi.n	80236ce <_vfiprintf_r+0x202>
 80236c2:	89ab      	ldrh	r3, [r5, #12]
 80236c4:	059a      	lsls	r2, r3, #22
 80236c6:	d402      	bmi.n	80236ce <_vfiprintf_r+0x202>
 80236c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80236ca:	f7ff fd05 	bl	80230d8 <__retarget_lock_release_recursive>
 80236ce:	89ab      	ldrh	r3, [r5, #12]
 80236d0:	065b      	lsls	r3, r3, #25
 80236d2:	f53f af1d 	bmi.w	8023510 <_vfiprintf_r+0x44>
 80236d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236d8:	e71c      	b.n	8023514 <_vfiprintf_r+0x48>
 80236da:	ab03      	add	r3, sp, #12
 80236dc:	462a      	mov	r2, r5
 80236de:	a904      	add	r1, sp, #16
 80236e0:	4630      	mov	r0, r6
 80236e2:	9300      	str	r3, [sp, #0]
 80236e4:	4b04      	ldr	r3, [pc, #16]	; (80236f8 <_vfiprintf_r+0x22c>)
 80236e6:	f000 f87d 	bl	80237e4 <_printf_i>
 80236ea:	e7e4      	b.n	80236b6 <_vfiprintf_r+0x1ea>
 80236ec:	08027c6d 	.word	0x08027c6d
 80236f0:	08027c77 	.word	0x08027c77
 80236f4:	00000000 	.word	0x00000000
 80236f8:	080234a7 	.word	0x080234a7
 80236fc:	08027c73 	.word	0x08027c73

08023700 <_printf_common>:
 8023700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023704:	4616      	mov	r6, r2
 8023706:	4699      	mov	r9, r3
 8023708:	688a      	ldr	r2, [r1, #8]
 802370a:	4607      	mov	r7, r0
 802370c:	690b      	ldr	r3, [r1, #16]
 802370e:	460c      	mov	r4, r1
 8023710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023714:	4293      	cmp	r3, r2
 8023716:	bfb8      	it	lt
 8023718:	4613      	movlt	r3, r2
 802371a:	6033      	str	r3, [r6, #0]
 802371c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023720:	b10a      	cbz	r2, 8023726 <_printf_common+0x26>
 8023722:	3301      	adds	r3, #1
 8023724:	6033      	str	r3, [r6, #0]
 8023726:	6823      	ldr	r3, [r4, #0]
 8023728:	0699      	lsls	r1, r3, #26
 802372a:	bf42      	ittt	mi
 802372c:	6833      	ldrmi	r3, [r6, #0]
 802372e:	3302      	addmi	r3, #2
 8023730:	6033      	strmi	r3, [r6, #0]
 8023732:	6825      	ldr	r5, [r4, #0]
 8023734:	f015 0506 	ands.w	r5, r5, #6
 8023738:	d106      	bne.n	8023748 <_printf_common+0x48>
 802373a:	f104 0a19 	add.w	sl, r4, #25
 802373e:	68e3      	ldr	r3, [r4, #12]
 8023740:	6832      	ldr	r2, [r6, #0]
 8023742:	1a9b      	subs	r3, r3, r2
 8023744:	42ab      	cmp	r3, r5
 8023746:	dc2b      	bgt.n	80237a0 <_printf_common+0xa0>
 8023748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802374c:	1e13      	subs	r3, r2, #0
 802374e:	6822      	ldr	r2, [r4, #0]
 8023750:	bf18      	it	ne
 8023752:	2301      	movne	r3, #1
 8023754:	0692      	lsls	r2, r2, #26
 8023756:	d430      	bmi.n	80237ba <_printf_common+0xba>
 8023758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802375c:	4649      	mov	r1, r9
 802375e:	4638      	mov	r0, r7
 8023760:	47c0      	blx	r8
 8023762:	3001      	adds	r0, #1
 8023764:	d023      	beq.n	80237ae <_printf_common+0xae>
 8023766:	6823      	ldr	r3, [r4, #0]
 8023768:	341a      	adds	r4, #26
 802376a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802376e:	f003 0306 	and.w	r3, r3, #6
 8023772:	2b04      	cmp	r3, #4
 8023774:	bf0a      	itet	eq
 8023776:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802377a:	2500      	movne	r5, #0
 802377c:	6833      	ldreq	r3, [r6, #0]
 802377e:	f04f 0600 	mov.w	r6, #0
 8023782:	bf08      	it	eq
 8023784:	1aed      	subeq	r5, r5, r3
 8023786:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802378a:	bf08      	it	eq
 802378c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023790:	4293      	cmp	r3, r2
 8023792:	bfc4      	itt	gt
 8023794:	1a9b      	subgt	r3, r3, r2
 8023796:	18ed      	addgt	r5, r5, r3
 8023798:	42b5      	cmp	r5, r6
 802379a:	d11a      	bne.n	80237d2 <_printf_common+0xd2>
 802379c:	2000      	movs	r0, #0
 802379e:	e008      	b.n	80237b2 <_printf_common+0xb2>
 80237a0:	2301      	movs	r3, #1
 80237a2:	4652      	mov	r2, sl
 80237a4:	4649      	mov	r1, r9
 80237a6:	4638      	mov	r0, r7
 80237a8:	47c0      	blx	r8
 80237aa:	3001      	adds	r0, #1
 80237ac:	d103      	bne.n	80237b6 <_printf_common+0xb6>
 80237ae:	f04f 30ff 	mov.w	r0, #4294967295
 80237b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237b6:	3501      	adds	r5, #1
 80237b8:	e7c1      	b.n	802373e <_printf_common+0x3e>
 80237ba:	18e1      	adds	r1, r4, r3
 80237bc:	1c5a      	adds	r2, r3, #1
 80237be:	2030      	movs	r0, #48	; 0x30
 80237c0:	3302      	adds	r3, #2
 80237c2:	4422      	add	r2, r4
 80237c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80237c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80237cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80237d0:	e7c2      	b.n	8023758 <_printf_common+0x58>
 80237d2:	2301      	movs	r3, #1
 80237d4:	4622      	mov	r2, r4
 80237d6:	4649      	mov	r1, r9
 80237d8:	4638      	mov	r0, r7
 80237da:	47c0      	blx	r8
 80237dc:	3001      	adds	r0, #1
 80237de:	d0e6      	beq.n	80237ae <_printf_common+0xae>
 80237e0:	3601      	adds	r6, #1
 80237e2:	e7d9      	b.n	8023798 <_printf_common+0x98>

080237e4 <_printf_i>:
 80237e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80237e8:	7e0f      	ldrb	r7, [r1, #24]
 80237ea:	4691      	mov	r9, r2
 80237ec:	4680      	mov	r8, r0
 80237ee:	460c      	mov	r4, r1
 80237f0:	2f78      	cmp	r7, #120	; 0x78
 80237f2:	469a      	mov	sl, r3
 80237f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80237f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80237fa:	d807      	bhi.n	802380c <_printf_i+0x28>
 80237fc:	2f62      	cmp	r7, #98	; 0x62
 80237fe:	d80a      	bhi.n	8023816 <_printf_i+0x32>
 8023800:	2f00      	cmp	r7, #0
 8023802:	f000 80d3 	beq.w	80239ac <_printf_i+0x1c8>
 8023806:	2f58      	cmp	r7, #88	; 0x58
 8023808:	f000 80bf 	beq.w	802398a <_printf_i+0x1a6>
 802380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023814:	e03a      	b.n	802388c <_printf_i+0xa8>
 8023816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802381a:	2b15      	cmp	r3, #21
 802381c:	d8f6      	bhi.n	802380c <_printf_i+0x28>
 802381e:	a101      	add	r1, pc, #4	; (adr r1, 8023824 <_printf_i+0x40>)
 8023820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023824:	0802387d 	.word	0x0802387d
 8023828:	08023891 	.word	0x08023891
 802382c:	0802380d 	.word	0x0802380d
 8023830:	0802380d 	.word	0x0802380d
 8023834:	0802380d 	.word	0x0802380d
 8023838:	0802380d 	.word	0x0802380d
 802383c:	08023891 	.word	0x08023891
 8023840:	0802380d 	.word	0x0802380d
 8023844:	0802380d 	.word	0x0802380d
 8023848:	0802380d 	.word	0x0802380d
 802384c:	0802380d 	.word	0x0802380d
 8023850:	08023993 	.word	0x08023993
 8023854:	080238bd 	.word	0x080238bd
 8023858:	0802394f 	.word	0x0802394f
 802385c:	0802380d 	.word	0x0802380d
 8023860:	0802380d 	.word	0x0802380d
 8023864:	080239b5 	.word	0x080239b5
 8023868:	0802380d 	.word	0x0802380d
 802386c:	080238bd 	.word	0x080238bd
 8023870:	0802380d 	.word	0x0802380d
 8023874:	0802380d 	.word	0x0802380d
 8023878:	08023957 	.word	0x08023957
 802387c:	682b      	ldr	r3, [r5, #0]
 802387e:	1d1a      	adds	r2, r3, #4
 8023880:	681b      	ldr	r3, [r3, #0]
 8023882:	602a      	str	r2, [r5, #0]
 8023884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802388c:	2301      	movs	r3, #1
 802388e:	e09e      	b.n	80239ce <_printf_i+0x1ea>
 8023890:	6820      	ldr	r0, [r4, #0]
 8023892:	682b      	ldr	r3, [r5, #0]
 8023894:	0607      	lsls	r7, r0, #24
 8023896:	f103 0104 	add.w	r1, r3, #4
 802389a:	6029      	str	r1, [r5, #0]
 802389c:	d501      	bpl.n	80238a2 <_printf_i+0xbe>
 802389e:	681e      	ldr	r6, [r3, #0]
 80238a0:	e003      	b.n	80238aa <_printf_i+0xc6>
 80238a2:	0646      	lsls	r6, r0, #25
 80238a4:	d5fb      	bpl.n	802389e <_printf_i+0xba>
 80238a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80238aa:	2e00      	cmp	r6, #0
 80238ac:	da03      	bge.n	80238b6 <_printf_i+0xd2>
 80238ae:	232d      	movs	r3, #45	; 0x2d
 80238b0:	4276      	negs	r6, r6
 80238b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80238b6:	4859      	ldr	r0, [pc, #356]	; (8023a1c <_printf_i+0x238>)
 80238b8:	230a      	movs	r3, #10
 80238ba:	e012      	b.n	80238e2 <_printf_i+0xfe>
 80238bc:	682b      	ldr	r3, [r5, #0]
 80238be:	6820      	ldr	r0, [r4, #0]
 80238c0:	1d19      	adds	r1, r3, #4
 80238c2:	6029      	str	r1, [r5, #0]
 80238c4:	0605      	lsls	r5, r0, #24
 80238c6:	d501      	bpl.n	80238cc <_printf_i+0xe8>
 80238c8:	681e      	ldr	r6, [r3, #0]
 80238ca:	e002      	b.n	80238d2 <_printf_i+0xee>
 80238cc:	0641      	lsls	r1, r0, #25
 80238ce:	d5fb      	bpl.n	80238c8 <_printf_i+0xe4>
 80238d0:	881e      	ldrh	r6, [r3, #0]
 80238d2:	2f6f      	cmp	r7, #111	; 0x6f
 80238d4:	4851      	ldr	r0, [pc, #324]	; (8023a1c <_printf_i+0x238>)
 80238d6:	bf0c      	ite	eq
 80238d8:	2308      	moveq	r3, #8
 80238da:	230a      	movne	r3, #10
 80238dc:	2100      	movs	r1, #0
 80238de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80238e2:	6865      	ldr	r5, [r4, #4]
 80238e4:	2d00      	cmp	r5, #0
 80238e6:	60a5      	str	r5, [r4, #8]
 80238e8:	bfa2      	ittt	ge
 80238ea:	6821      	ldrge	r1, [r4, #0]
 80238ec:	f021 0104 	bicge.w	r1, r1, #4
 80238f0:	6021      	strge	r1, [r4, #0]
 80238f2:	b90e      	cbnz	r6, 80238f8 <_printf_i+0x114>
 80238f4:	2d00      	cmp	r5, #0
 80238f6:	d04a      	beq.n	802398e <_printf_i+0x1aa>
 80238f8:	4615      	mov	r5, r2
 80238fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80238fe:	fb03 6711 	mls	r7, r3, r1, r6
 8023902:	5dc7      	ldrb	r7, [r0, r7]
 8023904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023908:	4637      	mov	r7, r6
 802390a:	460e      	mov	r6, r1
 802390c:	42bb      	cmp	r3, r7
 802390e:	d9f4      	bls.n	80238fa <_printf_i+0x116>
 8023910:	2b08      	cmp	r3, #8
 8023912:	d10b      	bne.n	802392c <_printf_i+0x148>
 8023914:	6823      	ldr	r3, [r4, #0]
 8023916:	07de      	lsls	r6, r3, #31
 8023918:	d508      	bpl.n	802392c <_printf_i+0x148>
 802391a:	6923      	ldr	r3, [r4, #16]
 802391c:	6861      	ldr	r1, [r4, #4]
 802391e:	4299      	cmp	r1, r3
 8023920:	bfde      	ittt	le
 8023922:	2330      	movle	r3, #48	; 0x30
 8023924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023928:	f105 35ff 	addle.w	r5, r5, #4294967295
 802392c:	1b52      	subs	r2, r2, r5
 802392e:	6122      	str	r2, [r4, #16]
 8023930:	464b      	mov	r3, r9
 8023932:	aa03      	add	r2, sp, #12
 8023934:	4621      	mov	r1, r4
 8023936:	4640      	mov	r0, r8
 8023938:	f8cd a000 	str.w	sl, [sp]
 802393c:	f7ff fee0 	bl	8023700 <_printf_common>
 8023940:	3001      	adds	r0, #1
 8023942:	d149      	bne.n	80239d8 <_printf_i+0x1f4>
 8023944:	f04f 30ff 	mov.w	r0, #4294967295
 8023948:	b004      	add	sp, #16
 802394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802394e:	6823      	ldr	r3, [r4, #0]
 8023950:	f043 0320 	orr.w	r3, r3, #32
 8023954:	6023      	str	r3, [r4, #0]
 8023956:	2778      	movs	r7, #120	; 0x78
 8023958:	4831      	ldr	r0, [pc, #196]	; (8023a20 <_printf_i+0x23c>)
 802395a:	6823      	ldr	r3, [r4, #0]
 802395c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023960:	061f      	lsls	r7, r3, #24
 8023962:	6829      	ldr	r1, [r5, #0]
 8023964:	f851 6b04 	ldr.w	r6, [r1], #4
 8023968:	d402      	bmi.n	8023970 <_printf_i+0x18c>
 802396a:	065f      	lsls	r7, r3, #25
 802396c:	bf48      	it	mi
 802396e:	b2b6      	uxthmi	r6, r6
 8023970:	07df      	lsls	r7, r3, #31
 8023972:	6029      	str	r1, [r5, #0]
 8023974:	bf44      	itt	mi
 8023976:	f043 0320 	orrmi.w	r3, r3, #32
 802397a:	6023      	strmi	r3, [r4, #0]
 802397c:	b91e      	cbnz	r6, 8023986 <_printf_i+0x1a2>
 802397e:	6823      	ldr	r3, [r4, #0]
 8023980:	f023 0320 	bic.w	r3, r3, #32
 8023984:	6023      	str	r3, [r4, #0]
 8023986:	2310      	movs	r3, #16
 8023988:	e7a8      	b.n	80238dc <_printf_i+0xf8>
 802398a:	4824      	ldr	r0, [pc, #144]	; (8023a1c <_printf_i+0x238>)
 802398c:	e7e5      	b.n	802395a <_printf_i+0x176>
 802398e:	4615      	mov	r5, r2
 8023990:	e7be      	b.n	8023910 <_printf_i+0x12c>
 8023992:	682b      	ldr	r3, [r5, #0]
 8023994:	6826      	ldr	r6, [r4, #0]
 8023996:	1d18      	adds	r0, r3, #4
 8023998:	6961      	ldr	r1, [r4, #20]
 802399a:	6028      	str	r0, [r5, #0]
 802399c:	0635      	lsls	r5, r6, #24
 802399e:	681b      	ldr	r3, [r3, #0]
 80239a0:	d501      	bpl.n	80239a6 <_printf_i+0x1c2>
 80239a2:	6019      	str	r1, [r3, #0]
 80239a4:	e002      	b.n	80239ac <_printf_i+0x1c8>
 80239a6:	0670      	lsls	r0, r6, #25
 80239a8:	d5fb      	bpl.n	80239a2 <_printf_i+0x1be>
 80239aa:	8019      	strh	r1, [r3, #0]
 80239ac:	2300      	movs	r3, #0
 80239ae:	4615      	mov	r5, r2
 80239b0:	6123      	str	r3, [r4, #16]
 80239b2:	e7bd      	b.n	8023930 <_printf_i+0x14c>
 80239b4:	682b      	ldr	r3, [r5, #0]
 80239b6:	2100      	movs	r1, #0
 80239b8:	1d1a      	adds	r2, r3, #4
 80239ba:	602a      	str	r2, [r5, #0]
 80239bc:	681d      	ldr	r5, [r3, #0]
 80239be:	6862      	ldr	r2, [r4, #4]
 80239c0:	4628      	mov	r0, r5
 80239c2:	f000 f983 	bl	8023ccc <memchr>
 80239c6:	b108      	cbz	r0, 80239cc <_printf_i+0x1e8>
 80239c8:	1b40      	subs	r0, r0, r5
 80239ca:	6060      	str	r0, [r4, #4]
 80239cc:	6863      	ldr	r3, [r4, #4]
 80239ce:	6123      	str	r3, [r4, #16]
 80239d0:	2300      	movs	r3, #0
 80239d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80239d6:	e7ab      	b.n	8023930 <_printf_i+0x14c>
 80239d8:	6923      	ldr	r3, [r4, #16]
 80239da:	462a      	mov	r2, r5
 80239dc:	4649      	mov	r1, r9
 80239de:	4640      	mov	r0, r8
 80239e0:	47d0      	blx	sl
 80239e2:	3001      	adds	r0, #1
 80239e4:	d0ae      	beq.n	8023944 <_printf_i+0x160>
 80239e6:	6823      	ldr	r3, [r4, #0]
 80239e8:	079b      	lsls	r3, r3, #30
 80239ea:	d413      	bmi.n	8023a14 <_printf_i+0x230>
 80239ec:	68e0      	ldr	r0, [r4, #12]
 80239ee:	9b03      	ldr	r3, [sp, #12]
 80239f0:	4298      	cmp	r0, r3
 80239f2:	bfb8      	it	lt
 80239f4:	4618      	movlt	r0, r3
 80239f6:	e7a7      	b.n	8023948 <_printf_i+0x164>
 80239f8:	2301      	movs	r3, #1
 80239fa:	4632      	mov	r2, r6
 80239fc:	4649      	mov	r1, r9
 80239fe:	4640      	mov	r0, r8
 8023a00:	47d0      	blx	sl
 8023a02:	3001      	adds	r0, #1
 8023a04:	d09e      	beq.n	8023944 <_printf_i+0x160>
 8023a06:	3501      	adds	r5, #1
 8023a08:	68e3      	ldr	r3, [r4, #12]
 8023a0a:	9903      	ldr	r1, [sp, #12]
 8023a0c:	1a5b      	subs	r3, r3, r1
 8023a0e:	42ab      	cmp	r3, r5
 8023a10:	dcf2      	bgt.n	80239f8 <_printf_i+0x214>
 8023a12:	e7eb      	b.n	80239ec <_printf_i+0x208>
 8023a14:	2500      	movs	r5, #0
 8023a16:	f104 0619 	add.w	r6, r4, #25
 8023a1a:	e7f5      	b.n	8023a08 <_printf_i+0x224>
 8023a1c:	08027c7e 	.word	0x08027c7e
 8023a20:	08027c8f 	.word	0x08027c8f

08023a24 <__sflush_r>:
 8023a24:	898a      	ldrh	r2, [r1, #12]
 8023a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a2a:	4605      	mov	r5, r0
 8023a2c:	0710      	lsls	r0, r2, #28
 8023a2e:	460c      	mov	r4, r1
 8023a30:	d458      	bmi.n	8023ae4 <__sflush_r+0xc0>
 8023a32:	684b      	ldr	r3, [r1, #4]
 8023a34:	2b00      	cmp	r3, #0
 8023a36:	dc05      	bgt.n	8023a44 <__sflush_r+0x20>
 8023a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	dc02      	bgt.n	8023a44 <__sflush_r+0x20>
 8023a3e:	2000      	movs	r0, #0
 8023a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023a46:	2e00      	cmp	r6, #0
 8023a48:	d0f9      	beq.n	8023a3e <__sflush_r+0x1a>
 8023a4a:	2300      	movs	r3, #0
 8023a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023a50:	682f      	ldr	r7, [r5, #0]
 8023a52:	6a21      	ldr	r1, [r4, #32]
 8023a54:	602b      	str	r3, [r5, #0]
 8023a56:	d032      	beq.n	8023abe <__sflush_r+0x9a>
 8023a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023a5a:	89a3      	ldrh	r3, [r4, #12]
 8023a5c:	075a      	lsls	r2, r3, #29
 8023a5e:	d505      	bpl.n	8023a6c <__sflush_r+0x48>
 8023a60:	6863      	ldr	r3, [r4, #4]
 8023a62:	1ac0      	subs	r0, r0, r3
 8023a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023a66:	b10b      	cbz	r3, 8023a6c <__sflush_r+0x48>
 8023a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023a6a:	1ac0      	subs	r0, r0, r3
 8023a6c:	2300      	movs	r3, #0
 8023a6e:	4602      	mov	r2, r0
 8023a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023a72:	4628      	mov	r0, r5
 8023a74:	6a21      	ldr	r1, [r4, #32]
 8023a76:	47b0      	blx	r6
 8023a78:	1c43      	adds	r3, r0, #1
 8023a7a:	89a3      	ldrh	r3, [r4, #12]
 8023a7c:	d106      	bne.n	8023a8c <__sflush_r+0x68>
 8023a7e:	6829      	ldr	r1, [r5, #0]
 8023a80:	291d      	cmp	r1, #29
 8023a82:	d82b      	bhi.n	8023adc <__sflush_r+0xb8>
 8023a84:	4a28      	ldr	r2, [pc, #160]	; (8023b28 <__sflush_r+0x104>)
 8023a86:	410a      	asrs	r2, r1
 8023a88:	07d6      	lsls	r6, r2, #31
 8023a8a:	d427      	bmi.n	8023adc <__sflush_r+0xb8>
 8023a8c:	2200      	movs	r2, #0
 8023a8e:	04d9      	lsls	r1, r3, #19
 8023a90:	6062      	str	r2, [r4, #4]
 8023a92:	6922      	ldr	r2, [r4, #16]
 8023a94:	6022      	str	r2, [r4, #0]
 8023a96:	d504      	bpl.n	8023aa2 <__sflush_r+0x7e>
 8023a98:	1c42      	adds	r2, r0, #1
 8023a9a:	d101      	bne.n	8023aa0 <__sflush_r+0x7c>
 8023a9c:	682b      	ldr	r3, [r5, #0]
 8023a9e:	b903      	cbnz	r3, 8023aa2 <__sflush_r+0x7e>
 8023aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8023aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023aa4:	602f      	str	r7, [r5, #0]
 8023aa6:	2900      	cmp	r1, #0
 8023aa8:	d0c9      	beq.n	8023a3e <__sflush_r+0x1a>
 8023aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023aae:	4299      	cmp	r1, r3
 8023ab0:	d002      	beq.n	8023ab8 <__sflush_r+0x94>
 8023ab2:	4628      	mov	r0, r5
 8023ab4:	f7ff fb3c 	bl	8023130 <_free_r>
 8023ab8:	2000      	movs	r0, #0
 8023aba:	6360      	str	r0, [r4, #52]	; 0x34
 8023abc:	e7c0      	b.n	8023a40 <__sflush_r+0x1c>
 8023abe:	2301      	movs	r3, #1
 8023ac0:	4628      	mov	r0, r5
 8023ac2:	47b0      	blx	r6
 8023ac4:	1c41      	adds	r1, r0, #1
 8023ac6:	d1c8      	bne.n	8023a5a <__sflush_r+0x36>
 8023ac8:	682b      	ldr	r3, [r5, #0]
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	d0c5      	beq.n	8023a5a <__sflush_r+0x36>
 8023ace:	2b1d      	cmp	r3, #29
 8023ad0:	d001      	beq.n	8023ad6 <__sflush_r+0xb2>
 8023ad2:	2b16      	cmp	r3, #22
 8023ad4:	d101      	bne.n	8023ada <__sflush_r+0xb6>
 8023ad6:	602f      	str	r7, [r5, #0]
 8023ad8:	e7b1      	b.n	8023a3e <__sflush_r+0x1a>
 8023ada:	89a3      	ldrh	r3, [r4, #12]
 8023adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023ae0:	81a3      	strh	r3, [r4, #12]
 8023ae2:	e7ad      	b.n	8023a40 <__sflush_r+0x1c>
 8023ae4:	690f      	ldr	r7, [r1, #16]
 8023ae6:	2f00      	cmp	r7, #0
 8023ae8:	d0a9      	beq.n	8023a3e <__sflush_r+0x1a>
 8023aea:	0793      	lsls	r3, r2, #30
 8023aec:	680e      	ldr	r6, [r1, #0]
 8023aee:	600f      	str	r7, [r1, #0]
 8023af0:	bf0c      	ite	eq
 8023af2:	694b      	ldreq	r3, [r1, #20]
 8023af4:	2300      	movne	r3, #0
 8023af6:	eba6 0807 	sub.w	r8, r6, r7
 8023afa:	608b      	str	r3, [r1, #8]
 8023afc:	f1b8 0f00 	cmp.w	r8, #0
 8023b00:	dd9d      	ble.n	8023a3e <__sflush_r+0x1a>
 8023b02:	4643      	mov	r3, r8
 8023b04:	463a      	mov	r2, r7
 8023b06:	6a21      	ldr	r1, [r4, #32]
 8023b08:	4628      	mov	r0, r5
 8023b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023b0c:	47b0      	blx	r6
 8023b0e:	2800      	cmp	r0, #0
 8023b10:	dc06      	bgt.n	8023b20 <__sflush_r+0xfc>
 8023b12:	89a3      	ldrh	r3, [r4, #12]
 8023b14:	f04f 30ff 	mov.w	r0, #4294967295
 8023b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b1c:	81a3      	strh	r3, [r4, #12]
 8023b1e:	e78f      	b.n	8023a40 <__sflush_r+0x1c>
 8023b20:	4407      	add	r7, r0
 8023b22:	eba8 0800 	sub.w	r8, r8, r0
 8023b26:	e7e9      	b.n	8023afc <__sflush_r+0xd8>
 8023b28:	dfbffffe 	.word	0xdfbffffe

08023b2c <_fflush_r>:
 8023b2c:	b538      	push	{r3, r4, r5, lr}
 8023b2e:	690b      	ldr	r3, [r1, #16]
 8023b30:	4605      	mov	r5, r0
 8023b32:	460c      	mov	r4, r1
 8023b34:	b913      	cbnz	r3, 8023b3c <_fflush_r+0x10>
 8023b36:	2500      	movs	r5, #0
 8023b38:	4628      	mov	r0, r5
 8023b3a:	bd38      	pop	{r3, r4, r5, pc}
 8023b3c:	b118      	cbz	r0, 8023b46 <_fflush_r+0x1a>
 8023b3e:	6a03      	ldr	r3, [r0, #32]
 8023b40:	b90b      	cbnz	r3, 8023b46 <_fflush_r+0x1a>
 8023b42:	f7ff f923 	bl	8022d8c <__sinit>
 8023b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	d0f3      	beq.n	8023b36 <_fflush_r+0xa>
 8023b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023b50:	07d0      	lsls	r0, r2, #31
 8023b52:	d404      	bmi.n	8023b5e <_fflush_r+0x32>
 8023b54:	0599      	lsls	r1, r3, #22
 8023b56:	d402      	bmi.n	8023b5e <_fflush_r+0x32>
 8023b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023b5a:	f7ff fabc 	bl	80230d6 <__retarget_lock_acquire_recursive>
 8023b5e:	4628      	mov	r0, r5
 8023b60:	4621      	mov	r1, r4
 8023b62:	f7ff ff5f 	bl	8023a24 <__sflush_r>
 8023b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023b68:	4605      	mov	r5, r0
 8023b6a:	07da      	lsls	r2, r3, #31
 8023b6c:	d4e4      	bmi.n	8023b38 <_fflush_r+0xc>
 8023b6e:	89a3      	ldrh	r3, [r4, #12]
 8023b70:	059b      	lsls	r3, r3, #22
 8023b72:	d4e1      	bmi.n	8023b38 <_fflush_r+0xc>
 8023b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023b76:	f7ff faaf 	bl	80230d8 <__retarget_lock_release_recursive>
 8023b7a:	e7dd      	b.n	8023b38 <_fflush_r+0xc>

08023b7c <fiprintf>:
 8023b7c:	b40e      	push	{r1, r2, r3}
 8023b7e:	b503      	push	{r0, r1, lr}
 8023b80:	ab03      	add	r3, sp, #12
 8023b82:	4601      	mov	r1, r0
 8023b84:	4805      	ldr	r0, [pc, #20]	; (8023b9c <fiprintf+0x20>)
 8023b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8023b8a:	6800      	ldr	r0, [r0, #0]
 8023b8c:	9301      	str	r3, [sp, #4]
 8023b8e:	f7ff fc9d 	bl	80234cc <_vfiprintf_r>
 8023b92:	b002      	add	sp, #8
 8023b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8023b98:	b003      	add	sp, #12
 8023b9a:	4770      	bx	lr
 8023b9c:	200500e4 	.word	0x200500e4

08023ba0 <__swbuf_r>:
 8023ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ba2:	460e      	mov	r6, r1
 8023ba4:	4614      	mov	r4, r2
 8023ba6:	4605      	mov	r5, r0
 8023ba8:	b118      	cbz	r0, 8023bb2 <__swbuf_r+0x12>
 8023baa:	6a03      	ldr	r3, [r0, #32]
 8023bac:	b90b      	cbnz	r3, 8023bb2 <__swbuf_r+0x12>
 8023bae:	f7ff f8ed 	bl	8022d8c <__sinit>
 8023bb2:	69a3      	ldr	r3, [r4, #24]
 8023bb4:	60a3      	str	r3, [r4, #8]
 8023bb6:	89a3      	ldrh	r3, [r4, #12]
 8023bb8:	071a      	lsls	r2, r3, #28
 8023bba:	d525      	bpl.n	8023c08 <__swbuf_r+0x68>
 8023bbc:	6923      	ldr	r3, [r4, #16]
 8023bbe:	b31b      	cbz	r3, 8023c08 <__swbuf_r+0x68>
 8023bc0:	6823      	ldr	r3, [r4, #0]
 8023bc2:	b2f6      	uxtb	r6, r6
 8023bc4:	6922      	ldr	r2, [r4, #16]
 8023bc6:	4637      	mov	r7, r6
 8023bc8:	1a98      	subs	r0, r3, r2
 8023bca:	6963      	ldr	r3, [r4, #20]
 8023bcc:	4283      	cmp	r3, r0
 8023bce:	dc04      	bgt.n	8023bda <__swbuf_r+0x3a>
 8023bd0:	4621      	mov	r1, r4
 8023bd2:	4628      	mov	r0, r5
 8023bd4:	f7ff ffaa 	bl	8023b2c <_fflush_r>
 8023bd8:	b9e0      	cbnz	r0, 8023c14 <__swbuf_r+0x74>
 8023bda:	68a3      	ldr	r3, [r4, #8]
 8023bdc:	3b01      	subs	r3, #1
 8023bde:	60a3      	str	r3, [r4, #8]
 8023be0:	6823      	ldr	r3, [r4, #0]
 8023be2:	1c5a      	adds	r2, r3, #1
 8023be4:	6022      	str	r2, [r4, #0]
 8023be6:	701e      	strb	r6, [r3, #0]
 8023be8:	1c43      	adds	r3, r0, #1
 8023bea:	6962      	ldr	r2, [r4, #20]
 8023bec:	429a      	cmp	r2, r3
 8023bee:	d004      	beq.n	8023bfa <__swbuf_r+0x5a>
 8023bf0:	89a3      	ldrh	r3, [r4, #12]
 8023bf2:	07db      	lsls	r3, r3, #31
 8023bf4:	d506      	bpl.n	8023c04 <__swbuf_r+0x64>
 8023bf6:	2e0a      	cmp	r6, #10
 8023bf8:	d104      	bne.n	8023c04 <__swbuf_r+0x64>
 8023bfa:	4621      	mov	r1, r4
 8023bfc:	4628      	mov	r0, r5
 8023bfe:	f7ff ff95 	bl	8023b2c <_fflush_r>
 8023c02:	b938      	cbnz	r0, 8023c14 <__swbuf_r+0x74>
 8023c04:	4638      	mov	r0, r7
 8023c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023c08:	4621      	mov	r1, r4
 8023c0a:	4628      	mov	r0, r5
 8023c0c:	f000 f806 	bl	8023c1c <__swsetup_r>
 8023c10:	2800      	cmp	r0, #0
 8023c12:	d0d5      	beq.n	8023bc0 <__swbuf_r+0x20>
 8023c14:	f04f 37ff 	mov.w	r7, #4294967295
 8023c18:	e7f4      	b.n	8023c04 <__swbuf_r+0x64>
	...

08023c1c <__swsetup_r>:
 8023c1c:	b538      	push	{r3, r4, r5, lr}
 8023c1e:	4b2a      	ldr	r3, [pc, #168]	; (8023cc8 <__swsetup_r+0xac>)
 8023c20:	4605      	mov	r5, r0
 8023c22:	460c      	mov	r4, r1
 8023c24:	6818      	ldr	r0, [r3, #0]
 8023c26:	b118      	cbz	r0, 8023c30 <__swsetup_r+0x14>
 8023c28:	6a03      	ldr	r3, [r0, #32]
 8023c2a:	b90b      	cbnz	r3, 8023c30 <__swsetup_r+0x14>
 8023c2c:	f7ff f8ae 	bl	8022d8c <__sinit>
 8023c30:	89a3      	ldrh	r3, [r4, #12]
 8023c32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023c36:	0718      	lsls	r0, r3, #28
 8023c38:	d422      	bmi.n	8023c80 <__swsetup_r+0x64>
 8023c3a:	06d9      	lsls	r1, r3, #27
 8023c3c:	d407      	bmi.n	8023c4e <__swsetup_r+0x32>
 8023c3e:	2309      	movs	r3, #9
 8023c40:	602b      	str	r3, [r5, #0]
 8023c42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023c46:	f04f 30ff 	mov.w	r0, #4294967295
 8023c4a:	81a3      	strh	r3, [r4, #12]
 8023c4c:	e034      	b.n	8023cb8 <__swsetup_r+0x9c>
 8023c4e:	0758      	lsls	r0, r3, #29
 8023c50:	d512      	bpl.n	8023c78 <__swsetup_r+0x5c>
 8023c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023c54:	b141      	cbz	r1, 8023c68 <__swsetup_r+0x4c>
 8023c56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023c5a:	4299      	cmp	r1, r3
 8023c5c:	d002      	beq.n	8023c64 <__swsetup_r+0x48>
 8023c5e:	4628      	mov	r0, r5
 8023c60:	f7ff fa66 	bl	8023130 <_free_r>
 8023c64:	2300      	movs	r3, #0
 8023c66:	6363      	str	r3, [r4, #52]	; 0x34
 8023c68:	89a3      	ldrh	r3, [r4, #12]
 8023c6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023c6e:	81a3      	strh	r3, [r4, #12]
 8023c70:	2300      	movs	r3, #0
 8023c72:	6063      	str	r3, [r4, #4]
 8023c74:	6923      	ldr	r3, [r4, #16]
 8023c76:	6023      	str	r3, [r4, #0]
 8023c78:	89a3      	ldrh	r3, [r4, #12]
 8023c7a:	f043 0308 	orr.w	r3, r3, #8
 8023c7e:	81a3      	strh	r3, [r4, #12]
 8023c80:	6923      	ldr	r3, [r4, #16]
 8023c82:	b94b      	cbnz	r3, 8023c98 <__swsetup_r+0x7c>
 8023c84:	89a3      	ldrh	r3, [r4, #12]
 8023c86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023c8e:	d003      	beq.n	8023c98 <__swsetup_r+0x7c>
 8023c90:	4621      	mov	r1, r4
 8023c92:	4628      	mov	r0, r5
 8023c94:	f000 f883 	bl	8023d9e <__smakebuf_r>
 8023c98:	89a0      	ldrh	r0, [r4, #12]
 8023c9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023c9e:	f010 0301 	ands.w	r3, r0, #1
 8023ca2:	d00a      	beq.n	8023cba <__swsetup_r+0x9e>
 8023ca4:	2300      	movs	r3, #0
 8023ca6:	60a3      	str	r3, [r4, #8]
 8023ca8:	6963      	ldr	r3, [r4, #20]
 8023caa:	425b      	negs	r3, r3
 8023cac:	61a3      	str	r3, [r4, #24]
 8023cae:	6923      	ldr	r3, [r4, #16]
 8023cb0:	b943      	cbnz	r3, 8023cc4 <__swsetup_r+0xa8>
 8023cb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023cb6:	d1c4      	bne.n	8023c42 <__swsetup_r+0x26>
 8023cb8:	bd38      	pop	{r3, r4, r5, pc}
 8023cba:	0781      	lsls	r1, r0, #30
 8023cbc:	bf58      	it	pl
 8023cbe:	6963      	ldrpl	r3, [r4, #20]
 8023cc0:	60a3      	str	r3, [r4, #8]
 8023cc2:	e7f4      	b.n	8023cae <__swsetup_r+0x92>
 8023cc4:	2000      	movs	r0, #0
 8023cc6:	e7f7      	b.n	8023cb8 <__swsetup_r+0x9c>
 8023cc8:	200500e4 	.word	0x200500e4

08023ccc <memchr>:
 8023ccc:	b2c9      	uxtb	r1, r1
 8023cce:	4402      	add	r2, r0
 8023cd0:	b510      	push	{r4, lr}
 8023cd2:	4290      	cmp	r0, r2
 8023cd4:	4603      	mov	r3, r0
 8023cd6:	d101      	bne.n	8023cdc <memchr+0x10>
 8023cd8:	2300      	movs	r3, #0
 8023cda:	e003      	b.n	8023ce4 <memchr+0x18>
 8023cdc:	781c      	ldrb	r4, [r3, #0]
 8023cde:	3001      	adds	r0, #1
 8023ce0:	428c      	cmp	r4, r1
 8023ce2:	d1f6      	bne.n	8023cd2 <memchr+0x6>
 8023ce4:	4618      	mov	r0, r3
 8023ce6:	bd10      	pop	{r4, pc}

08023ce8 <abort>:
 8023ce8:	2006      	movs	r0, #6
 8023cea:	b508      	push	{r3, lr}
 8023cec:	f000 f8bc 	bl	8023e68 <raise>
 8023cf0:	2001      	movs	r0, #1
 8023cf2:	f7dd fa9d 	bl	8001230 <_exit>

08023cf6 <_realloc_r>:
 8023cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023cfa:	4680      	mov	r8, r0
 8023cfc:	4614      	mov	r4, r2
 8023cfe:	460e      	mov	r6, r1
 8023d00:	b921      	cbnz	r1, 8023d0c <_realloc_r+0x16>
 8023d02:	4611      	mov	r1, r2
 8023d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023d08:	f7fe beea 	b.w	8022ae0 <_malloc_r>
 8023d0c:	b92a      	cbnz	r2, 8023d1a <_realloc_r+0x24>
 8023d0e:	4625      	mov	r5, r4
 8023d10:	f7ff fa0e 	bl	8023130 <_free_r>
 8023d14:	4628      	mov	r0, r5
 8023d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d1a:	f000 f8e3 	bl	8023ee4 <_malloc_usable_size_r>
 8023d1e:	4284      	cmp	r4, r0
 8023d20:	4607      	mov	r7, r0
 8023d22:	d802      	bhi.n	8023d2a <_realloc_r+0x34>
 8023d24:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023d28:	d812      	bhi.n	8023d50 <_realloc_r+0x5a>
 8023d2a:	4621      	mov	r1, r4
 8023d2c:	4640      	mov	r0, r8
 8023d2e:	f7fe fed7 	bl	8022ae0 <_malloc_r>
 8023d32:	4605      	mov	r5, r0
 8023d34:	2800      	cmp	r0, #0
 8023d36:	d0ed      	beq.n	8023d14 <_realloc_r+0x1e>
 8023d38:	42bc      	cmp	r4, r7
 8023d3a:	4622      	mov	r2, r4
 8023d3c:	4631      	mov	r1, r6
 8023d3e:	bf28      	it	cs
 8023d40:	463a      	movcs	r2, r7
 8023d42:	f7ff f9ca 	bl	80230da <memcpy>
 8023d46:	4631      	mov	r1, r6
 8023d48:	4640      	mov	r0, r8
 8023d4a:	f7ff f9f1 	bl	8023130 <_free_r>
 8023d4e:	e7e1      	b.n	8023d14 <_realloc_r+0x1e>
 8023d50:	4635      	mov	r5, r6
 8023d52:	e7df      	b.n	8023d14 <_realloc_r+0x1e>

08023d54 <__swhatbuf_r>:
 8023d54:	b570      	push	{r4, r5, r6, lr}
 8023d56:	460c      	mov	r4, r1
 8023d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023d5c:	b096      	sub	sp, #88	; 0x58
 8023d5e:	4615      	mov	r5, r2
 8023d60:	2900      	cmp	r1, #0
 8023d62:	461e      	mov	r6, r3
 8023d64:	da0c      	bge.n	8023d80 <__swhatbuf_r+0x2c>
 8023d66:	89a3      	ldrh	r3, [r4, #12]
 8023d68:	2100      	movs	r1, #0
 8023d6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023d6e:	bf0c      	ite	eq
 8023d70:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8023d74:	2340      	movne	r3, #64	; 0x40
 8023d76:	2000      	movs	r0, #0
 8023d78:	6031      	str	r1, [r6, #0]
 8023d7a:	602b      	str	r3, [r5, #0]
 8023d7c:	b016      	add	sp, #88	; 0x58
 8023d7e:	bd70      	pop	{r4, r5, r6, pc}
 8023d80:	466a      	mov	r2, sp
 8023d82:	f000 f879 	bl	8023e78 <_fstat_r>
 8023d86:	2800      	cmp	r0, #0
 8023d88:	dbed      	blt.n	8023d66 <__swhatbuf_r+0x12>
 8023d8a:	9901      	ldr	r1, [sp, #4]
 8023d8c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023d90:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8023d94:	4259      	negs	r1, r3
 8023d96:	4159      	adcs	r1, r3
 8023d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023d9c:	e7eb      	b.n	8023d76 <__swhatbuf_r+0x22>

08023d9e <__smakebuf_r>:
 8023d9e:	898b      	ldrh	r3, [r1, #12]
 8023da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023da2:	079d      	lsls	r5, r3, #30
 8023da4:	4606      	mov	r6, r0
 8023da6:	460c      	mov	r4, r1
 8023da8:	d507      	bpl.n	8023dba <__smakebuf_r+0x1c>
 8023daa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023dae:	6023      	str	r3, [r4, #0]
 8023db0:	6123      	str	r3, [r4, #16]
 8023db2:	2301      	movs	r3, #1
 8023db4:	6163      	str	r3, [r4, #20]
 8023db6:	b002      	add	sp, #8
 8023db8:	bd70      	pop	{r4, r5, r6, pc}
 8023dba:	ab01      	add	r3, sp, #4
 8023dbc:	466a      	mov	r2, sp
 8023dbe:	f7ff ffc9 	bl	8023d54 <__swhatbuf_r>
 8023dc2:	9900      	ldr	r1, [sp, #0]
 8023dc4:	4605      	mov	r5, r0
 8023dc6:	4630      	mov	r0, r6
 8023dc8:	f7fe fe8a 	bl	8022ae0 <_malloc_r>
 8023dcc:	b948      	cbnz	r0, 8023de2 <__smakebuf_r+0x44>
 8023dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023dd2:	059a      	lsls	r2, r3, #22
 8023dd4:	d4ef      	bmi.n	8023db6 <__smakebuf_r+0x18>
 8023dd6:	f023 0303 	bic.w	r3, r3, #3
 8023dda:	f043 0302 	orr.w	r3, r3, #2
 8023dde:	81a3      	strh	r3, [r4, #12]
 8023de0:	e7e3      	b.n	8023daa <__smakebuf_r+0xc>
 8023de2:	89a3      	ldrh	r3, [r4, #12]
 8023de4:	6020      	str	r0, [r4, #0]
 8023de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023dea:	6120      	str	r0, [r4, #16]
 8023dec:	81a3      	strh	r3, [r4, #12]
 8023dee:	9b00      	ldr	r3, [sp, #0]
 8023df0:	6163      	str	r3, [r4, #20]
 8023df2:	9b01      	ldr	r3, [sp, #4]
 8023df4:	b15b      	cbz	r3, 8023e0e <__smakebuf_r+0x70>
 8023df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023dfa:	4630      	mov	r0, r6
 8023dfc:	f000 f84e 	bl	8023e9c <_isatty_r>
 8023e00:	b128      	cbz	r0, 8023e0e <__smakebuf_r+0x70>
 8023e02:	89a3      	ldrh	r3, [r4, #12]
 8023e04:	f023 0303 	bic.w	r3, r3, #3
 8023e08:	f043 0301 	orr.w	r3, r3, #1
 8023e0c:	81a3      	strh	r3, [r4, #12]
 8023e0e:	89a3      	ldrh	r3, [r4, #12]
 8023e10:	431d      	orrs	r5, r3
 8023e12:	81a5      	strh	r5, [r4, #12]
 8023e14:	e7cf      	b.n	8023db6 <__smakebuf_r+0x18>

08023e16 <_raise_r>:
 8023e16:	291f      	cmp	r1, #31
 8023e18:	b538      	push	{r3, r4, r5, lr}
 8023e1a:	4604      	mov	r4, r0
 8023e1c:	460d      	mov	r5, r1
 8023e1e:	d904      	bls.n	8023e2a <_raise_r+0x14>
 8023e20:	2316      	movs	r3, #22
 8023e22:	6003      	str	r3, [r0, #0]
 8023e24:	f04f 30ff 	mov.w	r0, #4294967295
 8023e28:	bd38      	pop	{r3, r4, r5, pc}
 8023e2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8023e2c:	b112      	cbz	r2, 8023e34 <_raise_r+0x1e>
 8023e2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e32:	b94b      	cbnz	r3, 8023e48 <_raise_r+0x32>
 8023e34:	4620      	mov	r0, r4
 8023e36:	f000 f853 	bl	8023ee0 <_getpid_r>
 8023e3a:	462a      	mov	r2, r5
 8023e3c:	4601      	mov	r1, r0
 8023e3e:	4620      	mov	r0, r4
 8023e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e44:	f000 b83a 	b.w	8023ebc <_kill_r>
 8023e48:	2b01      	cmp	r3, #1
 8023e4a:	d00a      	beq.n	8023e62 <_raise_r+0x4c>
 8023e4c:	1c59      	adds	r1, r3, #1
 8023e4e:	d103      	bne.n	8023e58 <_raise_r+0x42>
 8023e50:	2316      	movs	r3, #22
 8023e52:	6003      	str	r3, [r0, #0]
 8023e54:	2001      	movs	r0, #1
 8023e56:	e7e7      	b.n	8023e28 <_raise_r+0x12>
 8023e58:	2400      	movs	r4, #0
 8023e5a:	4628      	mov	r0, r5
 8023e5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023e60:	4798      	blx	r3
 8023e62:	2000      	movs	r0, #0
 8023e64:	e7e0      	b.n	8023e28 <_raise_r+0x12>
	...

08023e68 <raise>:
 8023e68:	4b02      	ldr	r3, [pc, #8]	; (8023e74 <raise+0xc>)
 8023e6a:	4601      	mov	r1, r0
 8023e6c:	6818      	ldr	r0, [r3, #0]
 8023e6e:	f7ff bfd2 	b.w	8023e16 <_raise_r>
 8023e72:	bf00      	nop
 8023e74:	200500e4 	.word	0x200500e4

08023e78 <_fstat_r>:
 8023e78:	b538      	push	{r3, r4, r5, lr}
 8023e7a:	2300      	movs	r3, #0
 8023e7c:	4d06      	ldr	r5, [pc, #24]	; (8023e98 <_fstat_r+0x20>)
 8023e7e:	4604      	mov	r4, r0
 8023e80:	4608      	mov	r0, r1
 8023e82:	4611      	mov	r1, r2
 8023e84:	602b      	str	r3, [r5, #0]
 8023e86:	f7dd fa22 	bl	80012ce <_fstat>
 8023e8a:	1c43      	adds	r3, r0, #1
 8023e8c:	d102      	bne.n	8023e94 <_fstat_r+0x1c>
 8023e8e:	682b      	ldr	r3, [r5, #0]
 8023e90:	b103      	cbz	r3, 8023e94 <_fstat_r+0x1c>
 8023e92:	6023      	str	r3, [r4, #0]
 8023e94:	bd38      	pop	{r3, r4, r5, pc}
 8023e96:	bf00      	nop
 8023e98:	20061f38 	.word	0x20061f38

08023e9c <_isatty_r>:
 8023e9c:	b538      	push	{r3, r4, r5, lr}
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	4d05      	ldr	r5, [pc, #20]	; (8023eb8 <_isatty_r+0x1c>)
 8023ea2:	4604      	mov	r4, r0
 8023ea4:	4608      	mov	r0, r1
 8023ea6:	602b      	str	r3, [r5, #0]
 8023ea8:	f7dd fa21 	bl	80012ee <_isatty>
 8023eac:	1c43      	adds	r3, r0, #1
 8023eae:	d102      	bne.n	8023eb6 <_isatty_r+0x1a>
 8023eb0:	682b      	ldr	r3, [r5, #0]
 8023eb2:	b103      	cbz	r3, 8023eb6 <_isatty_r+0x1a>
 8023eb4:	6023      	str	r3, [r4, #0]
 8023eb6:	bd38      	pop	{r3, r4, r5, pc}
 8023eb8:	20061f38 	.word	0x20061f38

08023ebc <_kill_r>:
 8023ebc:	b538      	push	{r3, r4, r5, lr}
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	4d06      	ldr	r5, [pc, #24]	; (8023edc <_kill_r+0x20>)
 8023ec2:	4604      	mov	r4, r0
 8023ec4:	4608      	mov	r0, r1
 8023ec6:	4611      	mov	r1, r2
 8023ec8:	602b      	str	r3, [r5, #0]
 8023eca:	f7dd f99f 	bl	800120c <_kill>
 8023ece:	1c43      	adds	r3, r0, #1
 8023ed0:	d102      	bne.n	8023ed8 <_kill_r+0x1c>
 8023ed2:	682b      	ldr	r3, [r5, #0]
 8023ed4:	b103      	cbz	r3, 8023ed8 <_kill_r+0x1c>
 8023ed6:	6023      	str	r3, [r4, #0]
 8023ed8:	bd38      	pop	{r3, r4, r5, pc}
 8023eda:	bf00      	nop
 8023edc:	20061f38 	.word	0x20061f38

08023ee0 <_getpid_r>:
 8023ee0:	f7dd b98c 	b.w	80011fc <_getpid>

08023ee4 <_malloc_usable_size_r>:
 8023ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ee8:	1f18      	subs	r0, r3, #4
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	bfbc      	itt	lt
 8023eee:	580b      	ldrlt	r3, [r1, r0]
 8023ef0:	18c0      	addlt	r0, r0, r3
 8023ef2:	4770      	bx	lr

08023ef4 <_init>:
 8023ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ef6:	bf00      	nop
 8023ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023efa:	bc08      	pop	{r3}
 8023efc:	469e      	mov	lr, r3
 8023efe:	4770      	bx	lr

08023f00 <_fini>:
 8023f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f02:	bf00      	nop
 8023f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f06:	bc08      	pop	{r3}
 8023f08:	469e      	mov	lr, r3
 8023f0a:	4770      	bx	lr
