
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cb68  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  0801cdb8  0801cdb8  0002cdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       00003190  0801cde8  0801cde8  0002cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801ff78  0801ff78  000300e0  2**0
                  CONTENTS
  5 .ARM          00000008  0801ff78  0801ff78  0002ff78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801ff80  0801ff80  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801ff80  0801ff80  0002ff80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801ff84  0801ff84  0002ff84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  20000000  0801ff88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b618  200000e0  08020068  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000b6f8  08020068  0003b6f8  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030116  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e02a  00000000  00000000  00030159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000094ee  00000000  00000000  0006e183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003020  00000000  00000000  00077678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025e2  00000000  00000000  0007a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000426af  00000000  00000000  0007cc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044c9b  00000000  00000000  000bf329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00172785  00000000  00000000  00103fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d42c  00000000  00000000  0027674c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00283b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200000e0 	.word	0x200000e0
 800026c:	00000000 	.word	0x00000000
 8000270:	0801cda0 	.word	0x0801cda0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200000e4 	.word	0x200000e4
 800028c:	0801cda0 	.word	0x0801cda0

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <Netif_Config>:
  * @brief  Setup the network interface
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af04      	add	r7, sp, #16
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else

  /* IP address default setting */
  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <Netif_Config+0x48>)
 80005dc:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 80005de:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80005e2:	60bb      	str	r3, [r7, #8]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <Netif_Config+0x4c>)
 80005e6:	607b      	str	r3, [r7, #4]

#endif

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <Netif_Config+0x50>)
 80005f4:	9002      	str	r0, [sp, #8]
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <Netif_Config+0x54>)
 80005f8:	9001      	str	r0, [sp, #4]
 80005fa:	2000      	movs	r0, #0
 80005fc:	9000      	str	r0, [sp, #0]
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <Netif_Config+0x58>)
 8000600:	f011 f8d6 	bl	80117b0 <netif_add>

  /*  Registers the default network interface */
  netif_set_default(&gnetif);
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <Netif_Config+0x58>)
 8000606:	f011 fa85 	bl	8011b14 <netif_set_default>


#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800060a:	4909      	ldr	r1, [pc, #36]	; (8000630 <Netif_Config+0x5c>)
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <Netif_Config+0x58>)
 800060e:	f011 fb93 	bl	8011d38 <netif_set_link_callback>

#endif
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	78dba8c0 	.word	0x78dba8c0
 8000620:	01dba8c0 	.word	0x01dba8c0
 8000624:	0801b445 	.word	0x0801b445
 8000628:	08001945 	.word	0x08001945
 800062c:	200000fc 	.word	0x200000fc
 8000630:	0800125f 	.word	0x0800125f

08000634 <AppMain>:

void AppMain()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800063a:	b662      	cpsie	i
}
 800063c:	bf00      	nop
  __enable_irq();

  RESET_Init();
 800063e:	f003 f8b5 	bl	80037ac <RESET_Init>
  LED_Init();
 8000642:	f003 f803 	bl	800364c <LED_Init>
  LED_SimpleAnimation();
 8000646:	f003 f85b 	bl	8003700 <LED_SimpleAnimation>

  svDebugInit();
 800064a:	f003 fac5 	bl	8003bd8 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 800064e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000652:	2000      	movs	r0, #0
 8000654:	f003 f912 	bl	800387c <UART_Init>

  CAN_Init();
 8000658:	f001 fd46 	bl	80020e8 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 800065c:	2305      	movs	r3, #5
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2304      	movs	r3, #4
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f001 fdc2 	bl	80021f0 <CAN_Open>


  lwip_init();
 800066c:	f010 fbb9 	bl	8010de2 <lwip_init>
  Netif_Config();
 8000670:	f7ff ffb0 	bl	80005d4 <Netif_Config>
  tcp_echoserver_init();
 8000674:	f000 fe30 	bl	80012d8 <tcp_echoserver_init>

  // Chk Reset Count
  uint32_t pre_time = HAL_GetTick();
 8000678:	f003 fb52 	bl	8003d20 <HAL_GetTick>
 800067c:	6078      	str	r0, [r7, #4]
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <AppMain+0x70>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d902      	bls.n	800068c <AppMain+0x58>
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <AppMain+0x74>)
 8000688:	f003 fada 	bl	8003c40 <svDebugMessage>
  //osKernelStart();
  while(1)
  {
    /* Read a received packet from the Ethernet buffers and send it
       to the lwIP for handling */
    ethernetif_input(&gnetif);
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <AppMain+0x78>)
 800068e:	f001 f939 	bl	8001904 <ethernetif_input>

    /* Handle timeouts */
    sys_check_timeouts();
 8000692:	f018 facf 	bl	8018c34 <sys_check_timeouts>

#if LWIP_NETIF_LINK_CALLBACK
    Ethernet_Link_Periodic_Handle(&gnetif);
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <AppMain+0x78>)
 8000698:	f000 fe04 	bl	80012a4 <Ethernet_Link_Periodic_Handle>
#endif

#if LWIP_DHCP
    DHCP_Periodic_Handle(&gnetif);
#endif
    svDebugProcess();
 800069c:	f003 fa44 	bl	8003b28 <svDebugProcess>
    ethernetif_input(&gnetif);
 80006a0:	e7f4      	b.n	800068c <AppMain+0x58>
 80006a2:	bf00      	nop
 80006a4:	2000003c 	.word	0x2000003c
 80006a8:	0801cde8 	.word	0x0801cde8
 80006ac:	200000fc 	.word	0x200000fc

080006b0 <HAL_GPIO_EXTI_Rising_Callback>:
    */
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c0:	d103      	bne.n	80006ca <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80006c2:	2101      	movs	r1, #1
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 80006c6:	f006 fcad 	bl	8007024 <HAL_GPIO_TogglePin>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	42020400 	.word	0x42020400

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f003 fae6 	bl	8003cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f80e 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 f92a 	bl	800093c <MX_GPIO_Init>
  MX_FLASH_Init();
 80006e8:	f000 f874 	bl	80007d4 <MX_FLASH_Init>
  MX_ICACHE_Init();
 80006ec:	f000 f884 	bl	80007f8 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 80006f0:	f000 f88e 	bl	8000810 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80006f4:	f000 f8d6 	bl	80008a4 <MX_USART3_UART_Init>
  //MX_FDCAN1_Init();
  //MX_ETH_Init();
  /* USER CODE BEGIN 2 */

  AppMain();
 80006f8:	f7ff ff9c 	bl	8000634 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x24>
	...

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	; 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2250      	movs	r2, #80	; 0x50
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f01b fba0 	bl	801be54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xd0>)
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <SystemClock_Config+0xd0>)
 800072c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000730:	6113      	str	r3, [r2, #16]
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <SystemClock_Config+0xd0>)
 8000734:	691b      	ldr	r3, [r3, #16]
 8000736:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073e:	bf00      	nop
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd0>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	2b08      	cmp	r3, #8
 800074a:	d1f9      	bne.n	8000740 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800074c:	2309      	movs	r3, #9
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000750:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000756:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000760:	2303      	movs	r3, #3
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000768:	2314      	movs	r3, #20
 800076a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000778:	230c      	movs	r3, #12
 800077a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800077c:	2300      	movs	r3, #0
 800077e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f006 fca7 	bl	80070dc <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000794:	f000 f9d2 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	231f      	movs	r3, #31
 800079a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2303      	movs	r3, #3
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 f8c8 	bl	800794c <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007c2:	f000 f9bb 	bl	8000b3c <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3770      	adds	r7, #112	; 0x70
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	44020800 	.word	0x44020800

080007d4 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80007d8:	f006 f884 	bl	80068e4 <HAL_FLASH_Unlock>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80007e2:	f000 f9ab 	bl	8000b3c <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80007e6:	f006 f8a3 	bl	8006930 <HAL_FLASH_Lock>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80007f0:	f000 f9a4 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007fc:	f006 fc5e 	bl	80070bc <HAL_ICACHE_Enable>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000806:	f000 f999 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <MX_LPUART1_UART_Init+0x8c>)
 8000818:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 800081c:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800081e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000834:	220c      	movs	r2, #12
 8000836:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 800084c:	2200      	movs	r2, #0
 800084e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000852:	f00d f85b 	bl	800d90c <HAL_UART_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800085c:	f000 f96e 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000864:	f00e ff91 	bl	800f78a <HAL_UARTEx_SetTxFifoThreshold>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800086e:	f000 f965 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000876:	f00e ffc6 	bl	800f806 <HAL_UARTEx_SetRxFifoThreshold>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000880:	f000 f95c 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_LPUART1_UART_Init+0x88>)
 8000886:	f00e ff47 	bl	800f718 <HAL_UARTEx_DisableFifoMode>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000890:	f000 f954 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000130 	.word	0x20000130
 800089c:	44002400 	.word	0x44002400
 80008a0:	00033324 	.word	0x00033324

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_USART3_UART_Init+0x94>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_USART3_UART_Init+0x90>)
 80008ee:	f00d f80d 	bl	800d90c <HAL_UART_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008f8:	f000 f920 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_USART3_UART_Init+0x90>)
 8000900:	f00e ff43 	bl	800f78a <HAL_UARTEx_SetTxFifoThreshold>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800090a:	f000 f917 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <MX_USART3_UART_Init+0x90>)
 8000912:	f00e ff78 	bl	800f806 <HAL_UARTEx_SetRxFifoThreshold>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f90e 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_USART3_UART_Init+0x90>)
 8000922:	f00e fef9 	bl	800f718 <HAL_UARTEx_DisableFifoMode>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800092c:	f000 f906 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001c4 	.word	0x200001c4
 8000938:	40004800 	.word	0x40004800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	4b6b      	ldr	r3, [pc, #428]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000958:	4a69      	ldr	r2, [pc, #420]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000962:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	623b      	str	r3, [r7, #32]
 800096e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000970:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000976:	4a62      	ldr	r2, [pc, #392]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000980:	4b5f      	ldr	r3, [pc, #380]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	4a5a      	ldr	r2, [pc, #360]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000996:	f043 0320 	orr.w	r3, r3, #32
 800099a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800099e:	4b58      	ldr	r3, [pc, #352]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a4:	f003 0320 	and.w	r3, r3, #32
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ac:	4b54      	ldr	r3, [pc, #336]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	4a53      	ldr	r2, [pc, #332]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009bc:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d0:	4a4b      	ldr	r2, [pc, #300]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ee:	4a44      	ldr	r2, [pc, #272]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009f8:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 80009fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b3e      	ldr	r3, [pc, #248]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	4a3c      	ldr	r2, [pc, #240]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a24:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2a:	4a35      	ldr	r2, [pc, #212]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a34:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2110      	movs	r1, #16
 8000a46:	482f      	ldr	r0, [pc, #188]	; (8000b04 <MX_GPIO_Init+0x1c8>)
 8000a48:	f006 fad4 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	482d      	ldr	r0, [pc, #180]	; (8000b08 <MX_GPIO_Init+0x1cc>)
 8000a52:	f006 facf 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2110      	movs	r1, #16
 8000a5a:	482c      	ldr	r0, [pc, #176]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000a5c:	f006 faca 	bl	8006ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <MX_GPIO_Init+0x1d4>)
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4827      	ldr	r0, [pc, #156]	; (8000b14 <MX_GPIO_Init+0x1d8>)
 8000a76:	f006 f96b 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481c      	ldr	r0, [pc, #112]	; (8000b04 <MX_GPIO_Init+0x1c8>)
 8000a92:	f006 f95d 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000a96:	2301      	movs	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4816      	ldr	r0, [pc, #88]	; (8000b08 <MX_GPIO_Init+0x1cc>)
 8000aae:	f006 f94f 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4810      	ldr	r0, [pc, #64]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000aca:	f006 f941 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_GPIO_Init+0x1d4>)
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480a      	ldr	r0, [pc, #40]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000ae2:	f006 f935 	bl	8006d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2018      	movs	r0, #24
 8000aec:	f003 fa16 	bl	8003f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000af0:	2018      	movs	r0, #24
 8000af2:	f003 fa2d 	bl	8003f50 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3738      	adds	r7, #56	; 0x38
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	44020c00 	.word	0x44020c00
 8000b04:	42021400 	.word	0x42021400
 8000b08:	42020400 	.word	0x42020400
 8000b0c:	42021800 	.word	0x42021800
 8000b10:	10110000 	.word	0x10110000
 8000b14:	42020800 	.word	0x42020800

08000b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2a:	f003 f8e5 	bl	8003cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40001000 	.word	0x40001000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>

08000b46 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	f06f 0001 	mvn.w	r0, #1
 8000b52:	f003 f9e3 	bl	8003f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0d0      	sub	sp, #320	; 0x140
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b6a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b84:	4618      	mov	r0, r3
 8000b86:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f01b f961 	bl	801be54 <memset>
  if(huart->Instance==LPUART1)
 8000b92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b96:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a9e      	ldr	r2, [pc, #632]	; (8000e18 <HAL_UART_MspInit+0x2bc>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d15e      	bne.n	8000c62 <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ba4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ba8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000bb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bbc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f007 fa38 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000bd6:	f7ff ffb1 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bda:	4b90      	ldr	r3, [pc, #576]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000be0:	4a8e      	ldr	r2, [pc, #568]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000bea:	4b8c      	ldr	r3, [pc, #560]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000bec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bf0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000bf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bf8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c02:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c06:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b84      	ldr	r3, [pc, #528]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c0e:	4a83      	ldr	r2, [pc, #524]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c18:	4b80      	ldr	r3, [pc, #512]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c1e:	f003 0202 	and.w	r2, r3, #2
 8000c22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c34:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c36:	23c0      	movs	r3, #192	; 0xc0
 8000c38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4871      	ldr	r0, [pc, #452]	; (8000e20 <HAL_UART_MspInit+0x2c4>)
 8000c5c:	f006 f878 	bl	8006d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c60:	e0d5      	b.n	8000e0e <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000c62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6d      	ldr	r2, [pc, #436]	; (8000e24 <HAL_UART_MspInit+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d165      	bne.n	8000d40 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c78:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000c7c:	f04f 0202 	mov.w	r2, #2
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c90:	2200      	movs	r2, #0
 8000c92:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f007 f9d1 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000ca4:	f7ff ff4a 	bl	8000b3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca8:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cae:	4a5b      	ldr	r2, [pc, #364]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000cb8:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cbe:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000cc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cd4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cdc:	4a4f      	ldr	r2, [pc, #316]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ce6:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cec:	f003 0208 	and.w	r2, r3, #8
 8000cf0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d02:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d04:	2360      	movs	r3, #96	; 0x60
 8000d06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d26:	4619      	mov	r1, r3
 8000d28:	483f      	ldr	r0, [pc, #252]	; (8000e28 <HAL_UART_MspInit+0x2cc>)
 8000d2a:	f006 f811 	bl	8006d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2105      	movs	r1, #5
 8000d32:	203b      	movs	r0, #59	; 0x3b
 8000d34:	f003 f8f2 	bl	8003f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d38:	203b      	movs	r0, #59	; 0x3b
 8000d3a:	f003 f909 	bl	8003f50 <HAL_NVIC_EnableIRQ>
}
 8000d3e:	e066      	b.n	8000e0e <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000d40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a37      	ldr	r2, [pc, #220]	; (8000e2c <HAL_UART_MspInit+0x2d0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d15d      	bne.n	8000e0e <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d56:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d5a:	f04f 0204 	mov.w	r2, #4
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d6e:	2200      	movs	r2, #0
 8000d70:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4618      	mov	r0, r3
 8000d78:	f007 f962 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000d82:	f7ff fedb 	bl	8000b3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d8c:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d9c:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000da0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000da4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000db2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_UART_MspInit+0x2c0>)
 8000dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dca:	f003 0208 	and.w	r2, r3, #8
 8000dce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ddc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000de0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <HAL_UART_MspInit+0x2cc>)
 8000e0a:	f005 ffa1 	bl	8006d50 <HAL_GPIO_Init>
}
 8000e0e:	bf00      	nop
 8000e10:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	44002400 	.word	0x44002400
 8000e1c:	44020c00 	.word	0x44020c00
 8000e20:	42020400 	.word	0x42020400
 8000e24:	40004400 	.word	0x40004400
 8000e28:	42020c00 	.word	0x42020c00
 8000e2c:	40004800 	.word	0x40004800

08000e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_InitTick+0xd8>)
 8000e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e3e:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_InitTick+0xd8>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e48:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_InitTick+0xd8>)
 8000e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e56:	f107 020c 	add.w	r2, r7, #12
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 f8b5 	bl	8007fd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e70:	f007 f86c 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 8000e74:	6378      	str	r0, [r7, #52]	; 0x34
 8000e76:	e004      	b.n	8000e82 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e78:	f007 f868 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e84:	095b      	lsrs	r3, r3, #5
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_InitTick+0xdc>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	09db      	lsrs	r3, r3, #7
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_InitTick+0xe0>)
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <HAL_InitTick+0xe4>)
 8000e96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_InitTick+0xe0>)
 8000e9a:	2263      	movs	r2, #99	; 0x63
 8000e9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_InitTick+0xe0>)
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_InitTick+0xe0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_InitTick+0xe0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000eb0:	4817      	ldr	r0, [pc, #92]	; (8000f10 <HAL_InitTick+0xe0>)
 8000eb2:	f00c f945 	bl	800d140 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d118      	bne.n	8000ef6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <HAL_InitTick+0xe0>)
 8000ec6:	f00c f99d 	bl	800d204 <HAL_TIM_Base_Start_IT>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ed0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10e      	bne.n	8000ef6 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d808      	bhi.n	8000ef0 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	2031      	movs	r0, #49	; 0x31
 8000ee4:	f003 f81a 	bl	8003f1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_InitTick+0xe8>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e002      	b.n	8000ef6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000ef6:	2031      	movs	r0, #49	; 0x31
 8000ef8:	f003 f82a 	bl	8003f50 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000efc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3738      	adds	r7, #56	; 0x38
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	44020c00 	.word	0x44020c00
 8000f0c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000f10:	20000258 	.word	0x20000258
 8000f14:	40001000 	.word	0x40001000
 8000f18:	20000040 	.word	0x20000040

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000f4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f50:	f006 f882 	bl	8007058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <TIM6_IRQHandler+0x10>)
 8000f5e:	f00c f9ff 	bl	800d360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000258 	.word	0x20000258

08000f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USART2_IRQHandler+0x10>)
 8000f72:	f00c fe1b 	bl	800dbac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20003bb8 	.word	0x20003bb8

08000f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return 1;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_kill>:

int _kill(int pid, int sig)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <_kill+0x20>)
 8000f9c:	2216      	movs	r2, #22
 8000f9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	2000b6f0 	.word	0x2000b6f0

08000fb4 <_exit>:

void _exit (int status)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffe5 	bl	8000f90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fc6:	e7fe      	b.n	8000fc6 <_exit+0x12>

08000fc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e00a      	b.n	8000ff0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fda:	f3af 8000 	nop.w
 8000fde:	4601      	mov	r1, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf0      	blt.n	8000fda <_read+0x12>
  }

  return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e009      	b.n	8001028 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf1      	blt.n	8001014 <_write+0x12>
  }
  return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_close>:

int _close(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001062:	605a      	str	r2, [r3, #4]
  return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_isatty>:

int _isatty(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d205      	bcs.n	80010e0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <_sbrk+0x6c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e009      	b.n	80010f4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	200a0000 	.word	0x200a0000
 8001104:	00000400 	.word	0x00000400
 8001108:	200002a4 	.word	0x200002a4
 800110c:	2000b6f8 	.word	0x2000b6f8
 8001110:	2000b6f0 	.word	0x2000b6f0

08001114 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <SystemInit+0xdc>)
 800111c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001120:	4a33      	ldr	r2, [pc, #204]	; (80011f0 <SystemInit+0xdc>)
 8001122:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001126:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <SystemInit+0xe0>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <SystemInit+0xe0>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <SystemInit+0xe0>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <SystemInit+0xe0>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	492c      	ldr	r1, [pc, #176]	; (80011f4 <SystemInit+0xe0>)
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <SystemInit+0xe4>)
 8001144:	4013      	ands	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <SystemInit+0xe0>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <SystemInit+0xe0>)
 8001150:	2200      	movs	r2, #0
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <SystemInit+0xe0>)
 8001156:	2200      	movs	r2, #0
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <SystemInit+0xe0>)
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <SystemInit+0xe8>)
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <SystemInit+0xe0>)
 8001162:	2200      	movs	r2, #0
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <SystemInit+0xe0>)
 8001168:	4a24      	ldr	r2, [pc, #144]	; (80011fc <SystemInit+0xe8>)
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <SystemInit+0xe0>)
 800116e:	2200      	movs	r2, #0
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <SystemInit+0xe0>)
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <SystemInit+0xe8>)
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <SystemInit+0xe0>)
 800117a:	2200      	movs	r2, #0
 800117c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <SystemInit+0xe0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <SystemInit+0xe0>)
 8001184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <SystemInit+0xe0>)
 800118c:	2200      	movs	r2, #0
 800118e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <SystemInit+0xdc>)
 8001192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001196:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <SystemInit+0xec>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011a0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80011a8:	d003      	beq.n	80011b2 <SystemInit+0x9e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80011b0:	d117      	bne.n	80011e2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <SystemInit+0xec>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <SystemInit+0xec>)
 80011c0:	4a10      	ldr	r2, [pc, #64]	; (8001204 <SystemInit+0xf0>)
 80011c2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <SystemInit+0xec>)
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <SystemInit+0xf4>)
 80011c8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <SystemInit+0xec>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <SystemInit+0xec>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <SystemInit+0xec>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <SystemInit+0xec>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	61d3      	str	r3, [r2, #28]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	44020c00 	.word	0x44020c00
 80011f8:	eae2eae3 	.word	0xeae2eae3
 80011fc:	01010280 	.word	0x01010280
 8001200:	40022000 	.word	0x40022000
 8001204:	08192a3b 	.word	0x08192a3b
 8001208:	4c5d6e7f 	.word	0x4c5d6e7f

0800120c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001210:	f7ff ff80 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800123a:	f01a fe7d 	bl	801bf38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff fa4b 	bl	80006d8 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001250:	0801ff88 	.word	0x0801ff88
  ldr r2, =_sbss
 8001254:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001258:	2000b6f8 	.word	0x2000b6f8

0800125c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_IRQHandler>

0800125e <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  if (netif_is_link_up(netif))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <ethernet_link_status_updated+0x2c>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    LED_OnOff(LED2_YELLOW, TRUE);
 8001278:	2101      	movs	r1, #1
 800127a:	2002      	movs	r0, #2
 800127c:	f002 f9f8 	bl	8003670 <LED_OnOff>
    LED_OnOff(LED3_RED, FALSE);
 8001280:	2100      	movs	r1, #0
 8001282:	2003      	movs	r0, #3
 8001284:	f002 f9f4 	bl	8003670 <LED_OnOff>
#else
    LED_OnOff(LED2_YELLOW, FALSE);
    LED_OnOff(LED3_RED, TRUE);
#endif /* LWIP_DHCP */
  }
}
 8001288:	e007      	b.n	800129a <ethernet_link_status_updated+0x3c>
    LED_OnOff(LED2_YELLOW, FALSE);
 800128a:	2100      	movs	r1, #0
 800128c:	2002      	movs	r0, #2
 800128e:	f002 f9ef 	bl	8003670 <LED_OnOff>
    LED_OnOff(LED3_RED, TRUE);
 8001292:	2101      	movs	r1, #1
 8001294:	2003      	movs	r0, #3
 8001296:	f002 f9eb 	bl	8003670 <LED_OnOff>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80012ac:	f002 fd38 	bl	8003d20 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <Ethernet_Link_Periodic_Handle+0x30>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b63      	cmp	r3, #99	; 0x63
 80012ba:	d907      	bls.n	80012cc <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80012bc:	f002 fd30 	bl	8003d20 <HAL_GetTick>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <Ethernet_Link_Periodic_Handle+0x30>)
 80012c4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fcb0 	bl	8001c2c <ethernet_link_check_state>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200002a8 	.word	0x200002a8

080012d8 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 80012de:	f012 fef7 	bl	80140d0 <tcp_new>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a16      	ldr	r2, [pc, #88]	; (8001340 <tcp_echoserver_init+0x68>)
 80012e6:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <tcp_echoserver_init+0x68>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d022      	beq.n	8001336 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <tcp_echoserver_init+0x68>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2207      	movs	r2, #7
 80012f6:	4913      	ldr	r1, [pc, #76]	; (8001344 <tcp_echoserver_init+0x6c>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f011 fe41 	bl	8012f80 <tcp_bind>
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <tcp_echoserver_init+0x68>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	21ff      	movs	r1, #255	; 0xff
 8001310:	4618      	mov	r0, r3
 8001312:	f011 feed 	bl	80130f0 <tcp_listen_with_backlog>
 8001316:	4603      	mov	r3, r0
 8001318:	4a09      	ldr	r2, [pc, #36]	; (8001340 <tcp_echoserver_init+0x68>)
 800131a:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <tcp_echoserver_init+0x68>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4909      	ldr	r1, [pc, #36]	; (8001348 <tcp_echoserver_init+0x70>)
 8001322:	4618      	mov	r0, r3
 8001324:	f012 ff54 	bl	80141d0 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8001328:	e005      	b.n	8001336 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <tcp_echoserver_init+0x68>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	2001      	movs	r0, #1
 8001332:	f010 fa0b 	bl	801174c <memp_free>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002ac 	.word	0x200002ac
 8001344:	0801fe88 	.word	0x0801fe88
 8001348:	0800134d 	.word	0x0800134d

0800134c <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800135a:	2101      	movs	r1, #1
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f012 fcc5 	bl	8013cec <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8001362:	200c      	movs	r0, #12
 8001364:	f00f fff2 	bl	801134c <mem_malloc>
 8001368:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01f      	beq.n	80013b0 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2200      	movs	r2, #0
 8001380:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001388:	6939      	ldr	r1, [r7, #16]
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f012 fea8 	bl	80140e0 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8001390:	490d      	ldr	r1, [pc, #52]	; (80013c8 <tcp_echoserver_accept+0x7c>)
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f012 feb6 	bl	8014104 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <tcp_echoserver_accept+0x80>)
 800139a:	68b8      	ldr	r0, [r7, #8]
 800139c:	f012 fef6 	bl	801418c <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	490b      	ldr	r1, [pc, #44]	; (80013d0 <tcp_echoserver_accept+0x84>)
 80013a4:	68b8      	ldr	r0, [r7, #8]
 80013a6:	f012 ff2b 	bl	8014200 <tcp_poll>
    
    ret_err = ERR_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
 80013ae:	e005      	b.n	80013bc <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	68b8      	ldr	r0, [r7, #8]
 80013b4:	f000 f965 	bl	8001682 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80013b8:	23ff      	movs	r3, #255	; 0xff
 80013ba:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 80013bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	080013d5 	.word	0x080013d5
 80013cc:	08001509 	.word	0x08001509
 80013d0:	0800152d 	.word	0x0800152d

080013d4 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <tcp_echoserver_recv+0x20>
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <tcp_echoserver_recv+0x124>)
 80013ea:	22ad      	movs	r2, #173	; 0xad
 80013ec:	4943      	ldr	r1, [pc, #268]	; (80014fc <tcp_echoserver_recv+0x128>)
 80013ee:	4844      	ldr	r0, [pc, #272]	; (8001500 <tcp_echoserver_recv+0x12c>)
 80013f0:	f01a fc58 	bl	801bca4 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2203      	movs	r2, #3
 8001402:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 800140c:	69b9      	ldr	r1, [r7, #24]
 800140e:	68b8      	ldr	r0, [r7, #8]
 8001410:	f000 f937 	bl	8001682 <tcp_echoserver_connection_close>
 8001414:	e007      	b.n	8001426 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8001416:	493b      	ldr	r1, [pc, #236]	; (8001504 <tcp_echoserver_recv+0x130>)
 8001418:	68b8      	ldr	r0, [r7, #8]
 800141a:	f012 fe95 	bl	8014148 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f000 f8db 	bl	80015dc <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	77fb      	strb	r3, [r7, #31]
 800142a:	e05f      	b.n	80014ec <tcp_echoserver_recv+0x118>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 800142c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00b      	beq.n	800144c <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f010 fff9 	bl	8012438 <pbuf_free>
    }
    ret_err = err;
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	77fb      	strb	r3, [r7, #31]
 800144a:	e04f      	b.n	80014ec <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d110      	bne.n	8001476 <tcp_echoserver_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2202      	movs	r2, #2
 8001458:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001460:	4928      	ldr	r1, [pc, #160]	; (8001504 <tcp_echoserver_recv+0x130>)
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f012 fe70 	bl	8014148 <tcp_sent>
    
    /* send back the received data (echo) */
    tcp_echoserver_send(tpcb, es);
 8001468:	69b9      	ldr	r1, [r7, #24]
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f000 f8b6 	bl	80015dc <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
 8001474:	e03a      	b.n	80014ec <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d115      	bne.n	80014aa <tcp_echoserver_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      tcp_echoserver_send(tpcb, es);
 800148c:	69b9      	ldr	r1, [r7, #24]
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f000 f8a4 	bl	80015dc <tcp_echoserver_send>
 8001494:	e006      	b.n	80014a4 <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f011 f8e2 	bl	8012668 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	77fb      	strb	r3, [r7, #31]
 80014a8:	e020      	b.n	80014ec <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d10e      	bne.n	80014d0 <tcp_echoserver_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	891b      	ldrh	r3, [r3, #8]
 80014b6:	4619      	mov	r1, r3
 80014b8:	68b8      	ldr	r0, [r7, #8]
 80014ba:	f011 ff2f 	bl	801331c <tcp_recved>
    es->p = NULL;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f010 ffb7 	bl	8012438 <pbuf_free>
    ret_err = ERR_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	77fb      	strb	r3, [r7, #31]
 80014ce:	e00d      	b.n	80014ec <tcp_echoserver_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	891b      	ldrh	r3, [r3, #8]
 80014d4:	4619      	mov	r1, r3
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f011 ff20 	bl	801331c <tcp_recved>
    es->p = NULL;
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f010 ffa8 	bl	8012438 <pbuf_free>
    ret_err = ERR_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80014ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	0801ce00 	.word	0x0801ce00
 80014fc:	0801ce30 	.word	0x0801ce30
 8001500:	0801ce3c 	.word	0x0801ce3c
 8001504:	0800158d 	.word	0x0800158d

08001508 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f00f fdae 	bl	8011080 <mem_free>
  }
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d017      	beq.n	8001570 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8001548:	490f      	ldr	r1, [pc, #60]	; (8001588 <tcp_echoserver_poll+0x5c>)
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f012 fdfc 	bl	8014148 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f000 f842 	bl	80015dc <tcp_echoserver_send>
 8001558:	e007      	b.n	800156a <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d103      	bne.n	800156a <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f000 f88c 	bl	8001682 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e004      	b.n	800157a <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f011 fcf9 	bl	8012f68 <tcp_abort>
    ret_err = ERR_ABRT;
 8001576:	23f3      	movs	r3, #243	; 0xf3
 8001578:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800158d 	.word	0x0800158d

0800158c <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2200      	movs	r2, #0
 80015a2:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 80015ac:	490a      	ldr	r1, [pc, #40]	; (80015d8 <tcp_echoserver_sent+0x4c>)
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f012 fdca 	bl	8014148 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 80015b4:	6979      	ldr	r1, [r7, #20]
 80015b6:	68b8      	ldr	r0, [r7, #8]
 80015b8:	f000 f810 	bl	80015dc <tcp_echoserver_send>
 80015bc:	e007      	b.n	80015ce <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d103      	bne.n	80015ce <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 80015c6:	6979      	ldr	r1, [r7, #20]
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f000 f85a 	bl	8001682 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	0800158d 	.word	0x0800158d

080015dc <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 80015ea:	e036      	b.n	800165a <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	895a      	ldrh	r2, [r3, #10]
 80015fa:	2301      	movs	r3, #1
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f015 fcb1 	bl	8016f64 <tcp_write>
 8001602:	4603      	mov	r3, r0
 8001604:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8001606:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11d      	bne.n	800164a <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4618      	mov	r0, r3
 800162a:	f010 ffa5 	bl	8012578 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800162e:	6938      	ldr	r0, [r7, #16]
 8001630:	f010 ff02 	bl	8012438 <pbuf_free>
 8001634:	4603      	mov	r3, r0
 8001636:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f7      	beq.n	800162e <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f011 fe6a 	bl	801331c <tcp_recved>
 8001648:	e007      	b.n	800165a <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 800164a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001652:	d102      	bne.n	800165a <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]
         (es->p != NULL) && 
 800165a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10b      	bne.n	800167a <tcp_echoserver_send+0x9e>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	895a      	ldrh	r2, [r3, #10]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8001676:	429a      	cmp	r2, r3
 8001678:	d9b8      	bls.n	80015ec <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800168c:	2100      	movs	r1, #0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f012 fd26 	bl	80140e0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001694:	2100      	movs	r1, #0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f012 fd56 	bl	8014148 <tcp_sent>
  tcp_recv(tpcb, NULL);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f012 fd30 	bl	8014104 <tcp_recv>
  tcp_err(tpcb, NULL);
 80016a4:	2100      	movs	r1, #0
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f012 fd70 	bl	801418c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f012 fda5 	bl	8014200 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f00f fcdf 	bl	8011080 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f011 fb66 	bl	8012d94 <tcp_close>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80016d8:	4a33      	ldr	r2, [pc, #204]	; (80017a8 <low_level_init+0xd8>)
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016e2:	6018      	str	r0, [r3, #0]
 80016e4:	3304      	adds	r3, #4
 80016e6:	8019      	strh	r1, [r3, #0]

  EthHandle.Instance = ETH;
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <low_level_init+0xdc>)
 80016ea:	4a31      	ldr	r2, [pc, #196]	; (80017b0 <low_level_init+0xe0>)
 80016ec:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 80016ee:	4a2f      	ldr	r2, [pc, #188]	; (80017ac <low_level_init+0xdc>)
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <low_level_init+0xdc>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <low_level_init+0xdc>)
 80016fe:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <low_level_init+0xe4>)
 8001700:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <low_level_init+0xdc>)
 8001704:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <low_level_init+0xe8>)
 8001706:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <low_level_init+0xdc>)
 800170a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170e:	615a      	str	r2, [r3, #20]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8001710:	4826      	ldr	r0, [pc, #152]	; (80017ac <low_level_init+0xdc>)
 8001712:	f002 fcd1 	bl	80040b8 <HAL_ETH_Init>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2206      	movs	r2, #6
 800171a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001754:	849a      	strh	r2, [r3, #36]	; 0x24

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800175c:	f043 030a 	orr.w	r3, r3, #10
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8001768:	4814      	ldr	r0, [pc, #80]	; (80017bc <low_level_init+0xec>)
 800176a:	f00f fee9 	bl	8011540 <memp_init_pool>

  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800176e:	2238      	movs	r2, #56	; 0x38
 8001770:	2100      	movs	r1, #0
 8001772:	4813      	ldr	r0, [pc, #76]	; (80017c0 <low_level_init+0xf0>)
 8001774:	f01a fb6e 	bl	801be54 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <low_level_init+0xf0>)
 800177a:	2221      	movs	r2, #33	; 0x21
 800177c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <low_level_init+0xf0>)
 8001780:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001784:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <low_level_init+0xf0>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800178c:	490d      	ldr	r1, [pc, #52]	; (80017c4 <low_level_init+0xf4>)
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <low_level_init+0xf8>)
 8001790:	f000 fb48 	bl	8001e24 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <low_level_init+0xf8>)
 8001796:	f000 fb77 	bl	8001e88 <LAN8742_Init>

  ethernet_link_check_state(netif);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fa46 	bl	8001c2c <ethernet_link_check_state>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0801ce64 	.word	0x0801ce64
 80017ac:	200034fc 	.word	0x200034fc
 80017b0:	40028000 	.word	0x40028000
 80017b4:	200002b0 	.word	0x200002b0
 80017b8:	20000310 	.word	0x20000310
 80017bc:	0801fc0c 	.word	0x0801fc0c
 80017c0:	200035ac 	.word	0x200035ac
 80017c4:	20000004 	.word	0x20000004
 80017c8:	200035e4 	.word	0x200035e4

080017cc <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b092      	sub	sp, #72	; 0x48
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2230      	movs	r2, #48	; 0x30
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f01a fb31 	bl	801be54 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2230      	movs	r2, #48	; 0x30
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f01a fb2a 	bl	801be54 <memset>

  for(q = p; q != NULL; q = q->next)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	643b      	str	r3, [r7, #64]	; 0x40
 8001804:	e045      	b.n	8001892 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8001806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001808:	2b03      	cmp	r3, #3
 800180a:	d902      	bls.n	8001812 <low_level_output+0x46>
      return ERR_IF;
 800180c:	f06f 030b 	mvn.w	r3, #11
 8001810:	e055      	b.n	80018be <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8001812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001814:	6859      	ldr	r1, [r3, #4]
 8001816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	3348      	adds	r3, #72	; 0x48
 8001822:	443b      	add	r3, r7
 8001824:	3b3c      	subs	r3, #60	; 0x3c
 8001826:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8001828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182a:	895b      	ldrh	r3, [r3, #10]
 800182c:	4619      	mov	r1, r3
 800182e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	3348      	adds	r3, #72	; 0x48
 800183a:	443b      	add	r3, r7
 800183c:	3b38      	subs	r3, #56	; 0x38
 800183e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001842:	2b00      	cmp	r3, #0
 8001844:	d011      	beq.n	800186a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8001846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	f107 000c 	add.w	r0, r7, #12
 800184e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001850:	460b      	mov	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	440b      	add	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	18c1      	adds	r1, r0, r3
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	3348      	adds	r3, #72	; 0x48
 8001864:	443b      	add	r3, r7
 8001866:	3b34      	subs	r3, #52	; 0x34
 8001868:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800186a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8001872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	3348      	adds	r3, #72	; 0x48
 800187e:	443b      	add	r3, r7
 8001880:	3b34      	subs	r3, #52	; 0x34
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001888:	3301      	adds	r3, #1
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800188c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	643b      	str	r3, [r7, #64]	; 0x40
 8001892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1b6      	bne.n	8001806 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	891b      	ldrh	r3, [r3, #8]
 800189c:	461a      	mov	r2, r3
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <low_level_output+0xfc>)
 80018a0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <low_level_output+0xfc>)
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <low_level_output+0xfc>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80018b0:	2214      	movs	r2, #20
 80018b2:	4905      	ldr	r1, [pc, #20]	; (80018c8 <low_level_output+0xfc>)
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <low_level_output+0x100>)
 80018b6:	f002 fd97 	bl	80043e8 <HAL_ETH_Transmit>

  return errval;
 80018ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3748      	adds	r7, #72	; 0x48
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200035ac 	.word	0x200035ac
 80018cc:	200034fc 	.word	0x200034fc

080018d0 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <low_level_input+0x2c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <low_level_input+0x30>)
 80018ec:	f002 fe13 	bl	8004516 <HAL_ETH_ReadData>
  }
  return p;
 80018f0:	68fb      	ldr	r3, [r7, #12]

}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200034f8 	.word	0x200034f8
 8001900:	200034fc 	.word	0x200034fc

08001904 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input(struct netif *netif)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]

    do
    {
      p = low_level_input( netif );
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffdd 	bl	80018d0 <low_level_input>
 8001916:	60f8      	str	r0, [r7, #12]
      if (p != NULL)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <ethernetif_input+0x30>
      {
        if (netif->input( p, netif) != ERR_OK )
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	4798      	blx	r3
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <ethernetif_input+0x30>
        {
          pbuf_free(p);
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f010 fd82 	bl	8012438 <pbuf_free>
        }
      }

    } while(p!=NULL);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ea      	bne.n	8001910 <ethernetif_input+0xc>

}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <ethernetif_init+0x1c>
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <ethernetif_init+0x48>)
 8001954:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001958:	490d      	ldr	r1, [pc, #52]	; (8001990 <ethernetif_init+0x4c>)
 800195a:	480e      	ldr	r0, [pc, #56]	; (8001994 <ethernetif_init+0x50>)
 800195c:	f01a f9a2 	bl	801bca4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2273      	movs	r2, #115	; 0x73
 8001964:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2274      	movs	r2, #116	; 0x74
 800196c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <ethernetif_init+0x54>)
 8001974:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <ethernetif_init+0x58>)
 800197a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fea7 	bl	80016d0 <low_level_init>

  return ERR_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	0801ce6c 	.word	0x0801ce6c
 8001990:	0801ce98 	.word	0x0801ce98
 8001994:	0801cea8 	.word	0x0801cea8
 8001998:	080198c5 	.word	0x080198c5
 800199c:	080017cd 	.word	0x080017cd

080019a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <pbuf_free_custom+0x2c>)
 80019b0:	f00f fea8 	bl	8011704 <memp_free_pool>
   /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */
  if (RxAllocStatus == RX_ALLOC_ERROR)
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <pbuf_free_custom+0x30>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d102      	bne.n	80019c2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <pbuf_free_custom+0x30>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
  }
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	0801fc0c 	.word	0x0801fc0c
 80019d0:	200034f8 	.word	0x200034f8

080019d4 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80019d8:	f002 f9a2 	bl	8003d20 <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
	  if(heth->Instance==ETH)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5d      	ldr	r2, [pc, #372]	; (8001b78 <HAL_ETH_MspInit+0x194>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	f040 80b3 	bne.w	8001b6e <HAL_ETH_MspInit+0x18a>
	  {
	  /* USER CODE BEGIN ETH_MspInit 0 */

	  /* USER CODE END ETH_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_ETH_CLK_ENABLE();
 8001a08:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a18:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
	    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001a26:	4b55      	ldr	r3, [pc, #340]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2c:	4a53      	ldr	r2, [pc, #332]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a36:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]
	    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001a44:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a4c      	ldr	r2, [pc, #304]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a54:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a68:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a72:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697b      	ldr	r3, [r7, #20]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a86:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa4:	4a35      	ldr	r2, [pc, #212]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_ETH_MspInit+0x198>)
 8001ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
	    PC5     ------> ETH_RXD1
	    PB15     ------> ETH_TXD1
	    PG11     ------> ETH_TX_EN
	    PG13     ------> ETH_TXD0
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ada:	2332      	movs	r3, #50	; 0x32
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aea:	230b      	movs	r3, #11
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4822      	ldr	r0, [pc, #136]	; (8001b80 <HAL_ETH_MspInit+0x19c>)
 8001af6:	f005 f92b 	bl	8006d50 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001afa:	2386      	movs	r3, #134	; 0x86
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b0a:	230b      	movs	r3, #11
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <HAL_ETH_MspInit+0x1a0>)
 8001b16:	f005 f91b 	bl	8006d50 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b2c:	230b      	movs	r3, #11
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4814      	ldr	r0, [pc, #80]	; (8001b88 <HAL_ETH_MspInit+0x1a4>)
 8001b38:	f005 f90a 	bl	8006d50 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001b3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b4e:	230b      	movs	r3, #11
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <HAL_ETH_MspInit+0x1a8>)
 8001b5a:	f005 f8f9 	bl	8006d50 <HAL_GPIO_Init>

	    /* ETH interrupt Init */
	    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2107      	movs	r1, #7
 8001b62:	206a      	movs	r0, #106	; 0x6a
 8001b64:	f002 f9da 	bl	8003f1c <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001b68:	206a      	movs	r0, #106	; 0x6a
 8001b6a:	f002 f9f1 	bl	8003f50 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN ETH_MspInit 1 */

	  /* USER CODE END ETH_MspInit 1 */
	  }
}
 8001b6e:	bf00      	nop
 8001b70:	3738      	adds	r7, #56	; 0x38
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40028000 	.word	0x40028000
 8001b7c:	44020c00 	.word	0x44020c00
 8001b80:	42020800 	.word	0x42020800
 8001b84:	42020000 	.word	0x42020000
 8001b88:	42020400 	.word	0x42020400
 8001b8c:	42021800 	.word	0x42021800

08001b90 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <ETH_PHY_IO_Init+0x10>)
 8001b96:	f003 f883 	bl	8004ca0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200034fc 	.word	0x200034fc

08001ba4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <ETH_PHY_IO_ReadReg+0x30>)
 8001bc8:	f002 fdd3 	bl	8004772 <HAL_ETH_ReadPHYRegister>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	e000      	b.n	8001bda <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200034fc 	.word	0x200034fc

08001be8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <ETH_PHY_IO_WriteReg+0x30>)
 8001bfc:	f002 fe0e 	bl	800481c <HAL_ETH_WritePHYRegister>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e000      	b.n	8001c0e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200034fc 	.word	0x200034fc

08001c1c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c20:	f002 f87e 	bl	8003d20 <HAL_GetTick>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <ethernet_link_check_state>:
/**
  * @brief
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0a0      	sub	sp, #128	; 0x80
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2264      	movs	r2, #100	; 0x64
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f01a f909 	bl	801be54 <memset>
  int32_t PHYLinkState = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex =0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c4e:	2300      	movs	r3, #0
 8001c50:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001c52:	483a      	ldr	r0, [pc, #232]	; (8001d3c <ethernet_link_check_state+0x110>)
 8001c54:	f000 f9c0 	bl	8001fd8 <LAN8742_GetLinkState>
 8001c58:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00c      	beq.n	8001c86 <ethernet_link_check_state+0x5a>
 8001c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	dc09      	bgt.n	8001c86 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&EthHandle);
 8001c72:	4833      	ldr	r0, [pc, #204]	; (8001d40 <ethernet_link_check_state+0x114>)
 8001c74:	f002 fb68 	bl	8004348 <HAL_ETH_Stop>
    netif_set_down(netif);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f00f ffc7 	bl	8011c0c <netif_set_down>
    netif_set_link_down(netif);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f010 f82a 	bl	8011cd8 <netif_set_link_down>
      HAL_ETH_Start(&EthHandle);
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }
}
 8001c84:	e055      	b.n	8001d32 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d14e      	bne.n	8001d32 <ethernet_link_check_state+0x106>
 8001c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	dd4b      	ble.n	8001d32 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8001c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9c:	3b02      	subs	r3, #2
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d82a      	bhi.n	8001cf8 <ethernet_link_check_state+0xcc>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <ethernet_link_check_state+0x7c>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001ccb 	.word	0x08001ccb
 8001cb0:	08001cdb 	.word	0x08001cdb
 8001cb4:	08001ceb 	.word	0x08001ceb
      duplex = ETH_FULLDUPLEX_MODE;
 8001cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cbc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001cc8:	e017      	b.n	8001cfa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001cd8:	e00f      	b.n	8001cfa <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8001cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cde:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001ce8:	e007      	b.n	8001cfa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001cf6:	e000      	b.n	8001cfa <ethernet_link_check_state+0xce>
      break;
 8001cf8:	bf00      	nop
    if(linkchanged)
 8001cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d018      	beq.n	8001d32 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	480e      	ldr	r0, [pc, #56]	; (8001d40 <ethernet_link_check_state+0x114>)
 8001d08:	f002 fddc 	bl	80048c4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8001d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8001d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d12:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4809      	ldr	r0, [pc, #36]	; (8001d40 <ethernet_link_check_state+0x114>)
 8001d1c:	f002 ffa6 	bl	8004c6c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&EthHandle);
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <ethernet_link_check_state+0x114>)
 8001d22:	f002 faaf 	bl	8004284 <HAL_ETH_Start>
      netif_set_up(netif);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f00f ff04 	bl	8011b34 <netif_set_up>
      netif_set_link_up(netif);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f00f ff9f 	bl	8011c70 <netif_set_link_up>
}
 8001d32:	bf00      	nop
 8001d34:	3780      	adds	r7, #128	; 0x80
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200035e4 	.word	0x200035e4
 8001d40:	200034fc 	.word	0x200034fc

08001d44 <HAL_ETH_RxAllocateCallback>:
void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001d4c:	4812      	ldr	r0, [pc, #72]	; (8001d98 <HAL_ETH_RxAllocateCallback+0x54>)
 8001d4e:	f00f fc6b 	bl	8011628 <memp_malloc_pool>
 8001d52:	60f8      	str	r0, [r7, #12]
  if (p)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d014      	beq.n	8001d84 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f103 0220 	add.w	r2, r3, #32
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_ETH_RxAllocateCallback+0x58>)
 8001d68:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d72:	9201      	str	r2, [sp, #4]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2241      	movs	r2, #65	; 0x41
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f010 f9a1 	bl	80120c4 <pbuf_alloced_custom>
  else
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 8001d82:	e005      	b.n	8001d90 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	0801fc0c 	.word	0x0801fc0c
 8001d9c:	080019a1 	.word	0x080019a1
 8001da0:	200034f8 	.word	0x200034f8

08001da4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3b20      	subs	r3, #32
 8001dc2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e003      	b.n	8001dee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e009      	b.n	8001e10 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	891a      	ldrh	r2, [r3, #8]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f2      	bne.n	8001dfc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3724      	adds	r7, #36	; 0x24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <LAN8742_RegisterBusIO+0x28>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <LAN8742_RegisterBusIO+0x28>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <LAN8742_RegisterBusIO+0x28>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	e014      	b.n	8001e7c <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d17c      	bne.n	8001fa2 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e01c      	b.n	8001efc <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f107 0208 	add.w	r2, r7, #8
 8001eca:	2112      	movs	r1, #18
 8001ecc:	6978      	ldr	r0, [r7, #20]
 8001ece:	4798      	blx	r3
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da03      	bge.n	8001ede <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001ed6:	f06f 0304 	mvn.w	r3, #4
 8001eda:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001edc:	e00b      	b.n	8001ef6 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d105      	bne.n	8001ef6 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
         break;
 8001ef4:	e005      	b.n	8001f02 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b1f      	cmp	r3, #31
 8001f00:	d9df      	bls.n	8001ec2 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b1f      	cmp	r3, #31
 8001f08:	d902      	bls.n	8001f10 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001f0a:	f06f 0302 	mvn.w	r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d145      	bne.n	8001fa2 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6810      	ldr	r0, [r2, #0]
 8001f1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f22:	2100      	movs	r1, #0
 8001f24:	4798      	blx	r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db37      	blt.n	8001f9c <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6810      	ldr	r0, [r2, #0]
 8001f34:	f107 0208 	add.w	r2, r7, #8
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4798      	blx	r3
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db28      	blt.n	8001f94 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	4798      	blx	r3
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f4c:	e01c      	b.n	8001f88 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4798      	blx	r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f60:	d80e      	bhi.n	8001f80 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6810      	ldr	r0, [r2, #0]
 8001f6a:	f107 0208 	add.w	r2, r7, #8
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4798      	blx	r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da07      	bge.n	8001f88 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001f78:	f06f 0304 	mvn.w	r3, #4
 8001f7c:	613b      	str	r3, [r7, #16]
                 break;
 8001f7e:	e010      	b.n	8001fa2 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001f80:	f06f 0301 	mvn.w	r3, #1
 8001f84:	613b      	str	r3, [r7, #16]
               break;
 8001f86:	e00c      	b.n	8001fa2 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1dd      	bne.n	8001f4e <LAN8742_Init+0xc6>
 8001f92:	e006      	b.n	8001fa2 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001f94:	f06f 0304 	mvn.w	r3, #4
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e002      	b.n	8001fa2 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001f9c:	f06f 0303 	mvn.w	r3, #3
 8001fa0:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d112      	bne.n	8001fce <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4798      	blx	r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001fb2:	bf00      	nop
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4798      	blx	r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fc6:	d9f5      	bls.n	8001fb4 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001fce:	693b      	ldr	r3, [r7, #16]
 }
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6810      	ldr	r0, [r2, #0]
 8001fec:	f107 020c 	add.w	r2, r7, #12
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4798      	blx	r3
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da02      	bge.n	8002000 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ffa:	f06f 0304 	mvn.w	r3, #4
 8001ffe:	e06e      	b.n	80020de <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6810      	ldr	r0, [r2, #0]
 8002008:	f107 020c 	add.w	r2, r7, #12
 800200c:	2101      	movs	r1, #1
 800200e:	4798      	blx	r3
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	da02      	bge.n	800201c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002016:	f06f 0304 	mvn.w	r3, #4
 800201a:	e060      	b.n	80020de <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002026:	2301      	movs	r3, #1
 8002028:	e059      	b.n	80020de <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6810      	ldr	r0, [r2, #0]
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	2100      	movs	r1, #0
 8002038:	4798      	blx	r3
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	da02      	bge.n	8002046 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002040:	f06f 0304 	mvn.w	r3, #4
 8002044:	e04b      	b.n	80020de <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11b      	bne.n	8002088 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <LAN8742_GetLinkState+0x90>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002064:	2302      	movs	r3, #2
 8002066:	e03a      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002072:	2303      	movs	r3, #3
 8002074:	e033      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002080:	2304      	movs	r3, #4
 8002082:	e02c      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002084:	2305      	movs	r3, #5
 8002086:	e02a      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6810      	ldr	r0, [r2, #0]
 8002090:	f107 020c 	add.w	r2, r7, #12
 8002094:	211f      	movs	r1, #31
 8002096:	4798      	blx	r3
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	da02      	bge.n	80020a4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800209e:	f06f 0304 	mvn.w	r3, #4
 80020a2:	e01c      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80020ae:	2306      	movs	r3, #6
 80020b0:	e015      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 031c 	and.w	r3, r3, #28
 80020b8:	2b18      	cmp	r3, #24
 80020ba:	d101      	bne.n	80020c0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80020bc:	2302      	movs	r3, #2
 80020be:	e00e      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 031c 	and.w	r3, r3, #28
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d101      	bne.n	80020ce <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e007      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 031c 	and.w	r3, r3, #28
 80020d4:	2b14      	cmp	r3, #20
 80020d6:	d101      	bne.n	80020dc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80020d8:	2304      	movs	r3, #4
 80020da:	e000      	b.n	80020de <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80020dc:	2305      	movs	r3, #5
    }
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80020ee:	2301      	movs	r3, #1
 80020f0:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	e070      	b.n	80021da <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 80020f8:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <CAN_Init+0x104>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f240 516c 	movw	r1, #1388	; 0x56c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 800210a:	4a38      	ldr	r2, [pc, #224]	; (80021ec <CAN_Init+0x104>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 800211e:	4a33      	ldr	r2, [pc, #204]	; (80021ec <CAN_Init+0x104>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f240 516c 	movw	r1, #1388	; 0x56c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3308      	adds	r3, #8
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 8002132:	4a2e      	ldr	r2, [pc, #184]	; (80021ec <CAN_Init+0x104>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f240 516c 	movw	r1, #1388	; 0x56c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	330c      	adds	r3, #12
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 8002146:	4a29      	ldr	r2, [pc, #164]	; (80021ec <CAN_Init+0x104>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f240 516c 	movw	r1, #1388	; 0x56c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3310      	adds	r3, #16
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 800215a:	4a24      	ldr	r2, [pc, #144]	; (80021ec <CAN_Init+0x104>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3314      	adds	r3, #20
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 800216e:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <CAN_Init+0x104>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f240 516c 	movw	r1, #1388	; 0x56c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3318      	adds	r3, #24
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 8002182:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <CAN_Init+0x104>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f240 516c 	movw	r1, #1388	; 0x56c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	331c      	adds	r3, #28
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <CAN_Init+0x104>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f240 516c 	movw	r1, #1388	; 0x56c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3320      	adds	r3, #32
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f240 526c 	movw	r2, #1388	; 0x56c
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	3398      	adds	r3, #152	; 0x98
 80021b6:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <CAN_Init+0x104>)
 80021b8:	1898      	adds	r0, r3, r2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f240 526c 	movw	r2, #1388	; 0x56c
 80021c0:	fb02 f303 	mul.w	r3, r2, r3
 80021c4:	33a8      	adds	r3, #168	; 0xa8
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <CAN_Init+0x104>)
 80021c8:	4413      	add	r3, r2
 80021ca:	1d19      	adds	r1, r3, #4
 80021cc:	2310      	movs	r3, #16
 80021ce:	224c      	movs	r2, #76	; 0x4c
 80021d0:	f00d fba6 	bl	800f920 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3301      	adds	r3, #1
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	dd8b      	ble.n	80020f8 <CAN_Init+0x10>

  }
  return ret;
 80021e0:	683b      	ldr	r3, [r7, #0]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20003604 	.word	0x20003604

080021f0 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	4604      	mov	r4, r0
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	4603      	mov	r3, r0
 8002204:	71bb      	strb	r3, [r7, #6]
 8002206:	460b      	mov	r3, r1
 8002208:	717b      	strb	r3, [r7, #5]
 800220a:	4613      	mov	r3, r2
 800220c:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f240 526c 	movw	r2, #1388	; 0x56c
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	3330      	adds	r3, #48	; 0x30
 800221e:	4a90      	ldr	r2, [pc, #576]	; (8002460 <CAN_Open+0x270>)
 8002220:	4413      	add	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <CAN_Open+0x3e>
 800222a:	2300      	movs	r3, #0
 800222c:	e114      	b.n	8002458 <CAN_Open+0x268>

  switch(ch)
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 80a8 	bne.w	8002386 <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <CAN_Open+0x274>)
 800223a:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 8002242:	797b      	ldrb	r3, [r7, #5]
 8002244:	4a88      	ldr	r2, [pc, #544]	; (8002468 <CAN_Open+0x278>)
 8002246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	4a86      	ldr	r2, [pc, #536]	; (800246c <CAN_Open+0x27c>)
 8002252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2201      	movs	r2, #1
 800225e:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2201      	movs	r2, #1
 8002264:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2201      	movs	r2, #1
 800226a:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 800226c:	4b80      	ldr	r3, [pc, #512]	; (8002470 <CAN_Open+0x280>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	793b      	ldrb	r3, [r7, #4]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4413      	add	r3, r2
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 800227c:	4b7c      	ldr	r3, [pc, #496]	; (8002470 <CAN_Open+0x280>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	793b      	ldrb	r3, [r7, #4]
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 800228c:	4b78      	ldr	r3, [pc, #480]	; (8002470 <CAN_Open+0x280>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	793b      	ldrb	r3, [r7, #4]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4413      	add	r3, r2
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <CAN_Open+0x280>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	793b      	ldrb	r3, [r7, #4]
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	4413      	add	r3, r2
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 80022ac:	4b71      	ldr	r3, [pc, #452]	; (8002474 <CAN_Open+0x284>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	4413      	add	r3, r2
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 80022be:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <CAN_Open+0x284>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4413      	add	r3, r2
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <CAN_Open+0x284>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 80022e2:	4b64      	ldr	r3, [pc, #400]	; (8002474 <CAN_Open+0x284>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	221c      	movs	r2, #28
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2208      	movs	r2, #8
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2200      	movs	r2, #0
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	4a55      	ldr	r2, [pc, #340]	; (8002460 <CAN_Open+0x270>)
 800230a:	f240 516c 	movw	r1, #1388	; 0x56c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	332c      	adds	r3, #44	; 0x2c
 8002316:	79ba      	ldrb	r2, [r7, #6]
 8002318:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	4a50      	ldr	r2, [pc, #320]	; (8002460 <CAN_Open+0x270>)
 800231e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	332d      	adds	r3, #45	; 0x2d
 800232a:	797a      	ldrb	r2, [r7, #5]
 800232c:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <CAN_Open+0x270>)
 8002332:	f240 516c 	movw	r1, #1388	; 0x56c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	332e      	adds	r3, #46	; 0x2e
 800233e:	793a      	ldrb	r2, [r7, #4]
 8002340:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4a46      	ldr	r2, [pc, #280]	; (8002460 <CAN_Open+0x270>)
 8002346:	f240 516c 	movw	r1, #1388	; 0x56c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	332f      	adds	r3, #47	; 0x2f
 8002352:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002356:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	4a41      	ldr	r2, [pc, #260]	; (8002460 <CAN_Open+0x270>)
 800235c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3324      	adds	r3, #36	; 0x24
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4a3c      	ldr	r2, [pc, #240]	; (8002460 <CAN_Open+0x270>)
 8002370:	f240 516c 	movw	r1, #1388	; 0x56c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3328      	adds	r3, #40	; 0x28
 800237c:	4a3e      	ldr	r2, [pc, #248]	; (8002478 <CAN_Open+0x288>)
 800237e:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 8002380:	2301      	movs	r3, #1
 8002382:	617b      	str	r3, [r7, #20]

      break;
 8002384:	bf00      	nop
  }

  if(ret != TRUE)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d001      	beq.n	8002390 <CAN_Open+0x1a0>
  {
    return FALSE;
 800238c:	2300      	movs	r3, #0
 800238e:	e063      	b.n	8002458 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 8002390:	6938      	ldr	r0, [r7, #16]
 8002392:	f003 fa5f 	bl	8005854 <HAL_FDCAN_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <CAN_Open+0x1b0>
  {
    return FALSE;
 800239c:	2300      	movs	r3, #0
 800239e:	e05b      	b.n	8002458 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 80023a0:	79f8      	ldrb	r0, [r7, #7]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2300      	movs	r3, #0
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	f000 f866 	bl	800247c <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 80023b0:	79f8      	ldrb	r0, [r7, #7]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	2201      	movs	r2, #1
 80023ba:	2100      	movs	r1, #0
 80023bc:	f000 f85e 	bl	800247c <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80023c0:	2300      	movs	r3, #0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	2202      	movs	r2, #2
 80023c8:	2102      	movs	r1, #2
 80023ca:	6938      	ldr	r0, [r7, #16]
 80023cc:	f003 fbf6 	bl	8005bbc <HAL_FDCAN_ConfigGlobalFilter>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <CAN_Open+0x1ea>
  {
    return FALSE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e03e      	b.n	8002458 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4a20      	ldr	r2, [pc, #128]	; (8002460 <CAN_Open+0x270>)
 80023de:	f240 516c 	movw	r1, #1388	; 0x56c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3328      	adds	r3, #40	; 0x28
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	4619      	mov	r1, r3
 80023f0:	6938      	ldr	r0, [r7, #16]
 80023f2:	f003 fec2 	bl	800617a <HAL_FDCAN_ActivateNotification>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <CAN_Open+0x210>
  {
    return FALSE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e02b      	b.n	8002458 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 800240e:	2200      	movs	r2, #0
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	6938      	ldr	r0, [r7, #16]
 8002414:	f003 fc03 	bl	8005c1e <HAL_FDCAN_ConfigTxDelayCompensation>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <CAN_Open+0x232>
 800241e:	2300      	movs	r3, #0
 8002420:	e01a      	b.n	8002458 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 8002422:	6938      	ldr	r0, [r7, #16]
 8002424:	f003 fc1d 	bl	8005c62 <HAL_FDCAN_EnableTxDelayCompensation>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <CAN_Open+0x242>
 800242e:	2300      	movs	r3, #0
 8002430:	e012      	b.n	8002458 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 8002432:	6938      	ldr	r0, [r7, #16]
 8002434:	f003 fc36 	bl	8005ca4 <HAL_FDCAN_Start>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <CAN_Open+0x252>
  {
    return FALSE;
 800243e:	2300      	movs	r3, #0
 8002440:	e00a      	b.n	8002458 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <CAN_Open+0x270>)
 8002446:	f240 516c 	movw	r1, #1388	; 0x56c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

  return ret;
 8002456:	697b      	ldr	r3, [r7, #20]
}
 8002458:	4618      	mov	r0, r3
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	20003604 	.word	0x20003604
 8002464:	4000a400 	.word	0x4000a400
 8002468:	0801fd68 	.word	0x0801fd68
 800246c:	0801fd74 	.word	0x0801fd74
 8002470:	20000018 	.word	0x20000018
 8002474:	2000001c 	.word	0x2000001c
 8002478:	000e0007 	.word	0x000e0007

0800247c <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
 8002488:	460b      	mov	r3, r1
 800248a:	71bb      	strb	r3, [r7, #6]
 800248c:	4613      	mov	r3, r2
 800248e:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <CAN_ConfigFilter+0x22>
 800249a:	2300      	movs	r3, #0
 800249c:	e034      	b.n	8002508 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 800249e:	797b      	ldrb	r3, [r7, #5]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e002      	b.n	80024b0 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80024aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ae:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <CAN_ConfigFilter+0x94>)
 80024b4:	f240 516c 	movw	r1, #1388	; 0x56c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3324      	adds	r3, #36	; 0x24
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	d102      	bne.n	80024cc <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	e001      	b.n	80024d0 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 80024d4:	2302      	movs	r3, #2
 80024d6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f240 526c 	movw	r2, #1388	; 0x56c
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	3330      	adds	r3, #48	; 0x30
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <CAN_ConfigFilter+0x94>)
 80024ee:	4413      	add	r3, r2
 80024f0:	f107 020c 	add.w	r2, r7, #12
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fb06 	bl	8005b08 <HAL_FDCAN_ConfigFilter>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002508:	4618      	mov	r0, r3
 800250a:	3728      	adds	r7, #40	; 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20003604 	.word	0x20003604

08002514 <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d901      	bls.n	8002528 <CAN_MsgAvailable+0x14>
 8002524:	2300      	movs	r3, #0
 8002526:	e00b      	b.n	8002540 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f240 526c 	movw	r2, #1388	; 0x56c
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	3398      	adds	r3, #152	; 0x98
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <CAN_MsgAvailable+0x34>)
 8002536:	4413      	add	r3, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f00d fad4 	bl	800fae6 <qbufferAvailable>
 800253e:	4603      	mov	r3, r0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20003604 	.word	0x20003604

0800254c <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b090      	sub	sp, #64	; 0x40
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 800255a:	2301      	movs	r3, #1
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d901      	bls.n	8002568 <CAN_MsgWrite+0x1c>
 8002564:	2300      	movs	r3, #0
 8002566:	e083      	b.n	8002670 <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	4a43      	ldr	r2, [pc, #268]	; (8002678 <CAN_MsgWrite+0x12c>)
 800256c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3308      	adds	r3, #8
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <CAN_MsgWrite+0x3a>
 8002582:	2300      	movs	r3, #0
 8002584:	e074      	b.n	8002670 <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	f240 526c 	movw	r2, #1388	; 0x56c
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	3330      	adds	r3, #48	; 0x30
 8002592:	4a39      	ldr	r2, [pc, #228]	; (8002678 <CAN_MsgWrite+0x12c>)
 8002594:	4413      	add	r3, r2
 8002596:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <CAN_MsgWrite+0x5c>
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d003      	beq.n	80025ae <CAN_MsgWrite+0x62>
 80025a6:	e006      	b.n	80025b6 <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
        break;
 80025ac:	e003      	b.n	80025b6 <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 80025ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b2:	617b      	str	r3, [r7, #20]
        break;
 80025b4:	bf00      	nop
    }

    switch(p_msg->frame)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d011      	beq.n	80025e4 <CAN_MsgWrite+0x98>
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	dc16      	bgt.n	80025f2 <CAN_MsgWrite+0xa6>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <CAN_MsgWrite+0x82>
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d005      	beq.n	80025d8 <CAN_MsgWrite+0x8c>
 80025cc:	e011      	b.n	80025f2 <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025d6:	e00c      	b.n	80025f2 <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80025d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025e2:	e006      	b.n	80025f2 <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80025e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80025ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025f0:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800260e:	461a      	mov	r2, r3
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <CAN_MsgWrite+0x130>)
 8002612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002616:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800261a:	f003 fd9c 	bl	8006156 <HAL_FDCAN_GetTxFifoFreeLevel>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 8002624:	2300      	movs	r3, #0
 8002626:	e023      	b.n	8002670 <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 8002628:	f001 fb7a 	bl	8003d20 <HAL_GetTick>
 800262c:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1d9a      	adds	r2, r3, #6
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	4619      	mov	r1, r3
 8002638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800263a:	f003 fbcb 	bl	8005dd4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d112      	bne.n	800266a <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002644:	e00a      	b.n	800265c <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 8002646:	f001 fb6b 	bl	8003d20 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d802      	bhi.n	800265c <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 8002656:	2300      	movs	r3, #0
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800265a:	e008      	b.n	800266e <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 800265c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800265e:	f003 fd7a 	bl	8006156 <HAL_FDCAN_GetTxFifoFreeLevel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ee      	beq.n	8002646 <CAN_MsgWrite+0xfa>
 8002668:	e001      	b.n	800266e <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 800266a:	2300      	movs	r3, #0
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	3740      	adds	r7, #64	; 0x40
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20003604 	.word	0x20003604
 800267c:	0801fd28 	.word	0x0801fd28

08002680 <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 800268c:	2301      	movs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d901      	bls.n	800269a <CAN_MsgRead+0x1a>
 8002696:	2300      	movs	r3, #0
 8002698:	e00e      	b.n	80026b8 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f240 526c 	movw	r2, #1388	; 0x56c
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
 80026a4:	3398      	adds	r3, #152	; 0x98
 80026a6:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <CAN_MsgRead+0x40>)
 80026a8:	4413      	add	r3, r2
 80026aa:	2201      	movs	r2, #1
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f00d f9ae 	bl	800fa10 <qbufferRead>
 80026b4:	60f8      	str	r0, [r7, #12]

  return ret;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20003604 	.word	0x20003604

080026c4 <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d901      	bls.n	80026dc <CAN_GetRxErrCount+0x18>
 80026d8:	2300      	movs	r3, #0
 80026da:	e015      	b.n	8002708 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f240 526c 	movw	r2, #1388	; 0x56c
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	3330      	adds	r3, #48	; 0x30
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <CAN_GetRxErrCount+0x4c>)
 80026ea:	4413      	add	r3, r2
 80026ec:	f107 020c 	add.w	r2, r7, #12
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 fd0a 	bl	800610c <HAL_FDCAN_GetErrorCounters>
 80026f8:	4603      	mov	r3, r0
 80026fa:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 80026fc:	7f7b      	ldrb	r3, [r7, #29]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002706:	8bfb      	ldrh	r3, [r7, #30]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20003604 	.word	0x20003604

08002714 <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d901      	bls.n	800272c <CAN_GetTxErrCount+0x18>
 8002728:	2300      	movs	r3, #0
 800272a:	e015      	b.n	8002758 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	3330      	adds	r3, #48	; 0x30
 8002738:	4a09      	ldr	r2, [pc, #36]	; (8002760 <CAN_GetTxErrCount+0x4c>)
 800273a:	4413      	add	r3, r2
 800273c:	f107 020c 	add.w	r2, r7, #12
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fce2 	bl	800610c <HAL_FDCAN_GetErrorCounters>
 8002748:	4603      	mov	r3, r0
 800274a:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 800274c:	7f7b      	ldrb	r3, [r7, #29]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002756:	8bfb      	ldrh	r3, [r7, #30]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20003604 	.word	0x20003604

08002764 <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f240 526c 	movw	r2, #1388	; 0x56c
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	3398      	adds	r3, #152	; 0x98
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <CAN_RxFifoCallback+0x148>)
 800277e:	4413      	add	r3, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f00d f99d 	bl	800fac0 <qbufferPeekWrite>
 8002786:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	4a48      	ldr	r2, [pc, #288]	; (80028ac <CAN_RxFifoCallback+0x148>)
 800278c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279c:	3306      	adds	r3, #6
 800279e:	f107 020c 	add.w	r2, r7, #12
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f003 fb5a 	bl	8005e5c <HAL_FDCAN_GetRxMessage>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d179      	bne.n	80028a2 <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80027c2:	e006      	b.n	80027d2 <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c8:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	4a35      	ldr	r2, [pc, #212]	; (80028b0 <CAN_RxFifoCallback+0x14c>)
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ec:	d10d      	bne.n	800280a <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f4:	d104      	bne.n	8002800 <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80027fe:	e008      	b.n	8002812 <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002808:	e003      	b.n	8002812 <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f240 526c 	movw	r2, #1388	; 0x56c
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	3398      	adds	r3, #152	; 0x98
 800281e:	4a23      	ldr	r2, [pc, #140]	; (80028ac <CAN_RxFifoCallback+0x148>)
 8002820:	4413      	add	r3, r2
 8002822:	2201      	movs	r2, #1
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f00d f899 	bl	800f95e <qbufferWrite>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	d011      	beq.n	8002856 <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	491d      	ldr	r1, [pc, #116]	; (80028ac <CAN_RxFifoCallback+0x148>)
 8002836:	f240 526c 	movw	r2, #1388	; 0x56c
 800283a:	fb03 f202 	mul.w	r2, r3, r2
 800283e:	440a      	add	r2, r1
 8002840:	3214      	adds	r2, #20
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	3201      	adds	r2, #1
 8002846:	4919      	ldr	r1, [pc, #100]	; (80028ac <CAN_RxFifoCallback+0x148>)
 8002848:	f240 506c 	movw	r0, #1388	; 0x56c
 800284c:	fb00 f303 	mul.w	r3, r0, r3
 8002850:	440b      	add	r3, r1
 8002852:	3314      	adds	r3, #20
 8002854:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <CAN_RxFifoCallback+0x148>)
 800285a:	f240 516c 	movw	r1, #1388	; 0x56c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3394      	adds	r3, #148	; 0x94
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01a      	beq.n	80028a2 <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <CAN_RxFifoCallback+0x148>)
 8002870:	f240 516c 	movw	r1, #1388	; 0x56c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3394      	adds	r3, #148	; 0x94
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002880:	4798      	blx	r3
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10c      	bne.n	80028a2 <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f240 526c 	movw	r2, #1388	; 0x56c
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	3398      	adds	r3, #152	; 0x98
 8002894:	4a05      	ldr	r2, [pc, #20]	; (80028ac <CAN_RxFifoCallback+0x148>)
 8002896:	4413      	add	r3, r2
 8002898:	2201      	movs	r2, #1
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f00d f8b7 	bl	800fa10 <qbufferRead>
      }
    }
  }
}
 80028a2:	bf00      	nop
 80028a4:	3738      	adds	r7, #56	; 0x38
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20003604 	.word	0x20003604
 80028b0:	0801fce8 	.word	0x0801fce8

080028b4 <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d828      	bhi.n	8002916 <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f240 526c 	movw	r2, #1388	; 0x56c
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	3330      	adds	r3, #48	; 0x30
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <CAN_Recovery+0x6c>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 fa0d 	bl	8005cf4 <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f240 526c 	movw	r2, #1388	; 0x56c
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	3330      	adds	r3, #48	; 0x30
 80028e6:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <CAN_Recovery+0x6c>)
 80028e8:	4413      	add	r3, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 f9da 	bl	8005ca4 <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	490b      	ldr	r1, [pc, #44]	; (8002920 <CAN_Recovery+0x6c>)
 80028f4:	f240 526c 	movw	r2, #1388	; 0x56c
 80028f8:	fb03 f202 	mul.w	r2, r3, r2
 80028fc:	440a      	add	r2, r1
 80028fe:	3210      	adds	r2, #16
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	3201      	adds	r2, #1
 8002904:	4906      	ldr	r1, [pc, #24]	; (8002920 <CAN_Recovery+0x6c>)
 8002906:	f240 506c 	movw	r0, #1388	; 0x56c
 800290a:	fb00 f303 	mul.w	r3, r0, r3
 800290e:	440b      	add	r3, r1
 8002910:	3310      	adds	r3, #16
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e000      	b.n	8002918 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 8002916:	bf00      	nop
}
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20003604 	.word	0x20003604

08002924 <CAN_Update>:

BOOL     CAN_Update(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	e02f      	b.n	8002994 <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f240 526c 	movw	r2, #1388	; 0x56c
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <CAN_Update+0x80>)
 8002940:	4413      	add	r3, r2
 8002942:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7b1b      	ldrb	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <CAN_Update+0x2e>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d011      	beq.n	8002974 <CAN_Update+0x50>
 8002950:	e01d      	b.n	800298e <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d014      	beq.n	8002988 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ffa6 	bl	80028b4 <CAN_Recovery>
          p_can->state = 1;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 800296e:	2301      	movs	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002972:	e009      	b.n	8002988 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <CAN_Update+0x68>
        {
          p_can->state = 0;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	731a      	strb	r2, [r3, #12]
        }
        break;
 8002986:	e001      	b.n	800298c <CAN_Update+0x68>
        break;
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <CAN_Update+0x6a>
        break;
 800298c:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3301      	adds	r3, #1
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	ddcc      	ble.n	8002934 <CAN_Update+0x10>
    }
  }

  return ret;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20003604 	.word	0x20003604

080029a8 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d822      	bhi.n	80029fe <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <CAN_ErrPrint+0x60>)
 80029bc:	f240 516c 	movw	r1, #1388	; 0x56c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3308      	adds	r3, #8
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <CAN_ErrPrint+0x34>
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <CAN_ErrPrint+0x64>)
 80029d8:	f001 f81c 	bl	8003a14 <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <CAN_ErrPrint+0x44>
 80029e6:	480a      	ldr	r0, [pc, #40]	; (8002a10 <CAN_ErrPrint+0x68>)
 80029e8:	f001 f814 	bl	8003a14 <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <CAN_ErrPrint+0x58>
 80029f6:	4807      	ldr	r0, [pc, #28]	; (8002a14 <CAN_ErrPrint+0x6c>)
 80029f8:	f001 f80c 	bl	8003a14 <UART_Printf>
 80029fc:	e000      	b.n	8002a00 <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 80029fe:	bf00      	nop
}
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20003604 	.word	0x20003604
 8002a0c:	0801ced0 	.word	0x0801ced0
 8002a10:	0801ceec 	.word	0x0801ceec
 8002a14:	0801cf08 	.word	0x0801cf08

08002a18 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	f240 526c 	movw	r2, #1388	; 0x56c
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	3330      	adds	r3, #48	; 0x30
 8002a2e:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002a30:	4413      	add	r3, r2
 8002a32:	f107 020c 	add.w	r2, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fb17 	bl	800606c <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	4a42      	ldr	r2, [pc, #264]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002a48:	f240 516c 	movw	r1, #1388	; 0x56c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3308      	adds	r3, #8
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	493c      	ldr	r1, [pc, #240]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002a5e:	f240 506c 	movw	r0, #1388	; 0x56c
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	440b      	add	r3, r1
 8002a68:	3308      	adds	r3, #8
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e013      	b.n	8002a96 <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4a37      	ldr	r2, [pc, #220]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002a72:	f240 516c 	movw	r1, #1388	; 0x56c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	4932      	ldr	r1, [pc, #200]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002a88:	f240 506c 	movw	r0, #1388	; 0x56c
 8002a8c:	fb00 f303 	mul.w	r3, r0, r3
 8002a90:	440b      	add	r3, r1
 8002a92:	3308      	adds	r3, #8
 8002a94:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d014      	beq.n	8002ac6 <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	4a2c      	ldr	r2, [pc, #176]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002aa0:	f240 516c 	movw	r1, #1388	; 0x56c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3308      	adds	r3, #8
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	f042 0202 	orr.w	r2, r2, #2
 8002ab4:	4926      	ldr	r1, [pc, #152]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002ab6:	f240 506c 	movw	r0, #1388	; 0x56c
 8002aba:	fb00 f303 	mul.w	r3, r0, r3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e013      	b.n	8002aee <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002aca:	f240 516c 	movw	r1, #1388	; 0x56c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f022 0202 	bic.w	r2, r2, #2
 8002ade:	491c      	ldr	r1, [pc, #112]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002ae0:	f240 506c 	movw	r0, #1388	; 0x56c
 8002ae4:	fb00 f303 	mul.w	r3, r0, r3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3308      	adds	r3, #8
 8002aec:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d014      	beq.n	8002b1e <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002af8:	f240 516c 	movw	r1, #1388	; 0x56c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3308      	adds	r3, #8
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f042 0204 	orr.w	r2, r2, #4
 8002b0c:	4910      	ldr	r1, [pc, #64]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002b0e:	f240 506c 	movw	r0, #1388	; 0x56c
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	440b      	add	r3, r1
 8002b18:	3308      	adds	r3, #8
 8002b1a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8002b1c:	e013      	b.n	8002b46 <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002b22:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	4906      	ldr	r1, [pc, #24]	; (8002b50 <CAN_ErrUpdate+0x138>)
 8002b38:	f240 506c 	movw	r0, #1388	; 0x56c
 8002b3c:	fb00 f303 	mul.w	r3, r0, r3
 8002b40:	440b      	add	r3, r1
 8002b42:	3308      	adds	r3, #8
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	3738      	adds	r7, #56	; 0x38
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20003604 	.word	0x20003604

08002b54 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff57 	bl	8002a18 <CAN_ErrUpdate>
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_FDCAN_ErrorCallback+0x54>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_FDCAN_ErrorCallback+0x54>)
 8002b88:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d013      	beq.n	8002bba <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <HAL_FDCAN_ErrorCallback+0x58>)
 8002b96:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	f042 0210 	orr.w	r2, r2, #16
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <HAL_FDCAN_ErrorCallback+0x58>)
 8002bac:	f240 506c 	movw	r0, #1388	; 0x56c
 8002bb0:	fb00 f303 	mul.w	r3, r0, r3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3308      	adds	r3, #8
 8002bb8:	601a      	str	r2, [r3, #0]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20003b70 	.word	0x20003b70
 8002bcc:	20003604 	.word	0x20003604

08002bd0 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <FDCAN1_IT0_IRQHandler+0x10>)
 8002bd6:	f003 fbb6 	bl	8006346 <HAL_FDCAN_IRQHandler>
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20003634 	.word	0x20003634

08002be4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7ff fdb2 	bl	8002764 <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c12:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	3301      	adds	r3, #1
 8002c24:	4a02      	ldr	r2, [pc, #8]	; (8002c30 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002c26:	6213      	str	r3, [r2, #32]
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20003604 	.word	0x20003604

08002c34 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0cc      	sub	sp, #304	; 0x130
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c42:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002c62:	461a      	mov	r2, r3
 8002c64:	2100      	movs	r1, #0
 8002c66:	f019 f8f5 	bl	801be54 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <HAL_FDCAN_MspInit+0x120>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d166      	bne.n	8002d4a <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c80:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0304 	mov.w	r3, #4
 8002c8c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f005 f9cc 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8002cae:	f7fd ff45 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_FDCAN_MspInit+0x124>)
 8002cb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cb8:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <HAL_FDCAN_MspInit+0x124>)
 8002cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cbe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_FDCAN_MspInit+0x124>)
 8002cc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cc8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cda:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cde:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_FDCAN_MspInit+0x124>)
 8002ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <HAL_FDCAN_MspInit+0x124>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_FDCAN_MspInit+0x124>)
 8002cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf6:	f003 0201 	and.w	r2, r3, #1
 8002cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d0c:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002d28:	2309      	movs	r3, #9
 8002d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002d32:	4619      	mov	r1, r3
 8002d34:	4809      	ldr	r0, [pc, #36]	; (8002d5c <HAL_FDCAN_MspInit+0x128>)
 8002d36:	f004 f80b 	bl	8006d50 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2105      	movs	r1, #5
 8002d3e:	2027      	movs	r0, #39	; 0x27
 8002d40:	f001 f8ec 	bl	8003f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002d44:	2027      	movs	r0, #39	; 0x27
 8002d46:	f001 f903 	bl	8003f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002d4a:	bf00      	nop
 8002d4c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	4000a400 	.word	0x4000a400
 8002d58:	44020c00 	.word	0x44020c00
 8002d5c:	42020000 	.word	0x42020000

08002d60 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b0a1      	sub	sp, #132	; 0x84
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f040 822b 	bne.w	80031d0 <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	f000 80d3 	beq.w	8002f28 <CLI_FDCANTest+0x1c8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	f200 8223 	bhi.w	80031d0 <CLI_FDCANTest+0x470>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d003      	beq.n	8002d98 <CLI_FDCANTest+0x38>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d062      	beq.n	8002e5c <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 8002d96:	e21b      	b.n	80031d0 <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d9c:	e057      	b.n	8002e4e <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 8002d9e:	4b94      	ldr	r3, [pc, #592]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <CLI_FDCANTest+0x60>
 8002da6:	4a93      	ldr	r2, [pc, #588]	; (8002ff4 <CLI_FDCANTest+0x294>)
 8002da8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002daa:	f240 516c 	movw	r1, #1388	; 0x56c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	488f      	ldr	r0, [pc, #572]	; (8002ff8 <CLI_FDCANTest+0x298>)
 8002dbc:	f000 ff40 	bl	8003c40 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8002dc0:	4b8b      	ldr	r3, [pc, #556]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00c      	beq.n	8002de2 <CLI_FDCANTest+0x82>
 8002dc8:	4a8a      	ldr	r2, [pc, #552]	; (8002ff4 <CLI_FDCANTest+0x294>)
 8002dca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dcc:	f240 516c 	movw	r1, #1388	; 0x56c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4887      	ldr	r0, [pc, #540]	; (8002ffc <CLI_FDCANTest+0x29c>)
 8002dde:	f000 ff2f 	bl	8003c40 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 8002de2:	4b83      	ldr	r3, [pc, #524]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00c      	beq.n	8002e04 <CLI_FDCANTest+0xa4>
 8002dea:	4a82      	ldr	r2, [pc, #520]	; (8002ff4 <CLI_FDCANTest+0x294>)
 8002dec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dee:	f240 516c 	movw	r1, #1388	; 0x56c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3318      	adds	r3, #24
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4880      	ldr	r0, [pc, #512]	; (8003000 <CLI_FDCANTest+0x2a0>)
 8002e00:	f000 ff1e 	bl	8003c40 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8002e04:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00c      	beq.n	8002e26 <CLI_FDCANTest+0xc6>
 8002e0c:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <CLI_FDCANTest+0x294>)
 8002e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e10:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	331c      	adds	r3, #28
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4878      	ldr	r0, [pc, #480]	; (8003004 <CLI_FDCANTest+0x2a4>)
 8002e22:	f000 ff0d 	bl	8003c40 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <CLI_FDCANTest+0xe8>
 8002e2e:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <CLI_FDCANTest+0x294>)
 8002e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e32:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3320      	adds	r3, #32
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4619      	mov	r1, r3
 8002e42:	4871      	ldr	r0, [pc, #452]	; (8003008 <CLI_FDCANTest+0x2a8>)
 8002e44:	f000 fefc 	bl	8003c40 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8002e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	dda4      	ble.n	8002d9e <CLI_FDCANTest+0x3e>
        ret = TRUE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8002e58:	bf00      	nop
}
 8002e5a:	e1b9      	b.n	80031d0 <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 8002e60:	e05d      	b.n	8002f1e <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7ff fb56 	bl	8002514 <CAN_MsgAvailable>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d057      	beq.n	8002f1e <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8002e6e:	f107 0310 	add.w	r3, r7, #16
 8002e72:	4619      	mov	r1, r3
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7ff fc03 	bl	8002680 <CAN_MsgRead>
            index %= 1000;
 8002e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e7c:	4a63      	ldr	r2, [pc, #396]	; (800300c <CLI_FDCANTest+0x2ac>)
 8002e7e:	fba2 1203 	umull	r1, r2, r2, r3
 8002e82:	0992      	lsrs	r2, r2, #6
 8002e84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e88:	fb01 f202 	mul.w	r2, r1, r2
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 8002e90:	4b57      	ldr	r3, [pc, #348]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <CLI_FDCANTest+0x146>
 8002e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	67ba      	str	r2, [r7, #120]	; 0x78
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	485b      	ldr	r0, [pc, #364]	; (8003010 <CLI_FDCANTest+0x2b0>)
 8002ea2:	f000 fecd 	bl	8003c40 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8002ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 8002eae:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <CLI_FDCANTest+0x16c>
 8002eb6:	4857      	ldr	r0, [pc, #348]	; (8003014 <CLI_FDCANTest+0x2b4>)
 8002eb8:	f000 fec2 	bl	8003c40 <svDebugMessage>
 8002ebc:	e006      	b.n	8002ecc <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 8002ebe:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <CLI_FDCANTest+0x16c>
 8002ec6:	4854      	ldr	r0, [pc, #336]	; (8003018 <CLI_FDCANTest+0x2b8>)
 8002ec8:	f000 feba 	bl	8003c40 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8002ecc:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <CLI_FDCANTest+0x180>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	8aba      	ldrh	r2, [r7, #20]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4850      	ldr	r0, [pc, #320]	; (800301c <CLI_FDCANTest+0x2bc>)
 8002edc:	f000 feb0 	bl	8003c40 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ee4:	e00f      	b.n	8002f06 <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8002ee6:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <CLI_FDCANTest+0x1a0>
 8002eee:	f107 0216 	add.w	r2, r7, #22
 8002ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4849      	ldr	r0, [pc, #292]	; (8003020 <CLI_FDCANTest+0x2c0>)
 8002efc:	f000 fea0 	bl	8003c40 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8002f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f02:	3301      	adds	r3, #1
 8002f04:	677b      	str	r3, [r7, #116]	; 0x74
 8002f06:	8abb      	ldrh	r3, [r7, #20]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	dbea      	blt.n	8002ee6 <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8002f10:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <CLI_FDCANTest+0x1be>
 8002f18:	4842      	ldr	r0, [pc, #264]	; (8003024 <CLI_FDCANTest+0x2c4>)
 8002f1a:	f000 fe91 	bl	8003c40 <svDebugMessage>
        while(svCLI_KeepLoop())
 8002f1e:	f00c fee9 	bl	800fcf4 <svCLI_KeepLoop>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d19c      	bne.n	8002e62 <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <CLI_FDCANTest+0x294>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 8002f32:	e145      	b.n	80031c0 <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 8002f34:	f000 fef4 	bl	8003d20 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f42:	f0c0 80be 	bcc.w	80030c2 <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 8002f46:	f000 feeb 	bl	8003d20 <HAL_GetTick>
 8002f4a:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 8002f62:	2302      	movs	r3, #2
 8002f64:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 8002f6e:	f107 0310 	add.w	r3, r7, #16
 8002f72:	220a      	movs	r2, #10
 8002f74:	4619      	mov	r1, r3
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7ff fae8 	bl	800254c <CAN_MsgWrite>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d070      	beq.n	8003064 <CLI_FDCANTest+0x304>
              index %= 1000;
 8002f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f84:	4a21      	ldr	r2, [pc, #132]	; (800300c <CLI_FDCANTest+0x2ac>)
 8002f86:	fba2 1203 	umull	r1, r2, r2, r3
 8002f8a:	0992      	lsrs	r2, r2, #6
 8002f8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f90:	fb01 f202 	mul.w	r2, r1, r2
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <CLI_FDCANTest+0x24e>
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	481f      	ldr	r0, [pc, #124]	; (8003028 <CLI_FDCANTest+0x2c8>)
 8002faa:	f000 fe49 	bl	8003c40 <svDebugMessage>
              if (msg.id_type == CAN_STD)
 8002fae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <CLI_FDCANTest+0x274>
 8002fbe:	4815      	ldr	r0, [pc, #84]	; (8003014 <CLI_FDCANTest+0x2b4>)
 8002fc0:	f000 fe3e 	bl	8003c40 <svDebugMessage>
 8002fc4:	e006      	b.n	8002fd4 <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <CLI_FDCANTest+0x274>
 8002fce:	4812      	ldr	r0, [pc, #72]	; (8003018 <CLI_FDCANTest+0x2b8>)
 8002fd0:	f000 fe36 	bl	8003c40 <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <CLI_FDCANTest+0x290>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <CLI_FDCANTest+0x288>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	8aba      	ldrh	r2, [r7, #20]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480e      	ldr	r0, [pc, #56]	; (800301c <CLI_FDCANTest+0x2bc>)
 8002fe4:	f000 fe2c 	bl	8003c40 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
 8002fec:	e02e      	b.n	800304c <CLI_FDCANTest+0x2ec>
 8002fee:	bf00      	nop
 8002ff0:	2000003c 	.word	0x2000003c
 8002ff4:	20003604 	.word	0x20003604
 8002ff8:	0801cf50 	.word	0x0801cf50
 8002ffc:	0801cf64 	.word	0x0801cf64
 8003000:	0801cf78 	.word	0x0801cf78
 8003004:	0801cf8c 	.word	0x0801cf8c
 8003008:	0801cfa0 	.word	0x0801cfa0
 800300c:	10624dd3 	.word	0x10624dd3
 8003010:	0801cfb4 	.word	0x0801cfb4
 8003014:	0801cfc4 	.word	0x0801cfc4
 8003018:	0801cfcc 	.word	0x0801cfcc
 800301c:	0801cfd4 	.word	0x0801cfd4
 8003020:	0801cfe8 	.word	0x0801cfe8
 8003024:	0801cff0 	.word	0x0801cff0
 8003028:	0801cff4 	.word	0x0801cff4
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 800302c:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <CLI_FDCANTest+0x478>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <CLI_FDCANTest+0x2e6>
 8003034:	f107 0216 	add.w	r2, r7, #22
 8003038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4619      	mov	r1, r3
 8003040:	4866      	ldr	r0, [pc, #408]	; (80031dc <CLI_FDCANTest+0x47c>)
 8003042:	f000 fdfd 	bl	8003c40 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8003046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003048:	3301      	adds	r3, #1
 800304a:	667b      	str	r3, [r7, #100]	; 0x64
 800304c:	8abb      	ldrh	r3, [r7, #20]
 800304e:	461a      	mov	r2, r3
 8003050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003052:	4293      	cmp	r3, r2
 8003054:	dbea      	blt.n	800302c <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 8003056:	4b60      	ldr	r3, [pc, #384]	; (80031d8 <CLI_FDCANTest+0x478>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <CLI_FDCANTest+0x304>
 800305e:	4860      	ldr	r0, [pc, #384]	; (80031e0 <CLI_FDCANTest+0x480>)
 8003060:	f000 fdee 	bl	8003c40 <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff fb2d 	bl	80026c4 <CAN_GetRxErrCount>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <CLI_FDCANTest+0x31c>
 8003070:	2000      	movs	r0, #0
 8003072:	f7ff fb4f 	bl	8002714 <CAN_GetTxErrCount>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d011      	beq.n	80030a0 <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 800307c:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <CLI_FDCANTest+0x478>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <CLI_FDCANTest+0x340>
 8003084:	2000      	movs	r0, #0
 8003086:	f7ff fb1d 	bl	80026c4 <CAN_GetRxErrCount>
 800308a:	4603      	mov	r3, r0
 800308c:	461c      	mov	r4, r3
 800308e:	2000      	movs	r0, #0
 8003090:	f7ff fb40 	bl	8002714 <CAN_GetTxErrCount>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4621      	mov	r1, r4
 800309a:	4852      	ldr	r0, [pc, #328]	; (80031e4 <CLI_FDCANTest+0x484>)
 800309c:	f000 fdd0 	bl	8003c40 <svDebugMessage>
            if (err_int_cnt > 0)
 80030a0:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <CLI_FDCANTest+0x488>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00c      	beq.n	80030c2 <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <CLI_FDCANTest+0x478>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <CLI_FDCANTest+0x35c>
 80030b0:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <CLI_FDCANTest+0x488>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	484d      	ldr	r0, [pc, #308]	; (80031ec <CLI_FDCANTest+0x48c>)
 80030b8:	f000 fdc2 	bl	8003c40 <svDebugMessage>
              err_int_cnt = 0;
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <CLI_FDCANTest+0x488>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 80030c2:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <CLI_FDCANTest+0x490>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d00f      	beq.n	80030ec <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <CLI_FDCANTest+0x478>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <CLI_FDCANTest+0x380>
 80030d4:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <CLI_FDCANTest+0x490>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4619      	mov	r1, r3
 80030da:	4846      	ldr	r0, [pc, #280]	; (80031f4 <CLI_FDCANTest+0x494>)
 80030dc:	f000 fdb0 	bl	8003c40 <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7ff fc61 	bl	80029a8 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 80030e6:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <CLI_FDCANTest+0x490>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 80030ec:	f7ff fc1a 	bl	8002924 <CAN_Update>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 80030f6:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <CLI_FDCANTest+0x478>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <CLI_FDCANTest+0x3a4>
 80030fe:	483e      	ldr	r0, [pc, #248]	; (80031f8 <CLI_FDCANTest+0x498>)
 8003100:	f000 fd9e 	bl	8003c40 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8003104:	2000      	movs	r0, #0
 8003106:	f7ff fa05 	bl	8002514 <CAN_MsgAvailable>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d057      	beq.n	80031c0 <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	4619      	mov	r1, r3
 8003116:	2000      	movs	r0, #0
 8003118:	f7ff fab2 	bl	8002680 <CAN_MsgRead>
            index %= 1000;
 800311c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311e:	4a37      	ldr	r2, [pc, #220]	; (80031fc <CLI_FDCANTest+0x49c>)
 8003120:	fba2 1203 	umull	r1, r2, r2, r3
 8003124:	0992      	lsrs	r2, r2, #6
 8003126:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800312a:	fb01 f202 	mul.w	r2, r1, r2
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <CLI_FDCANTest+0x478>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <CLI_FDCANTest+0x3e8>
 800313a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003140:	4619      	mov	r1, r3
 8003142:	482f      	ldr	r0, [pc, #188]	; (8003200 <CLI_FDCANTest+0x4a0>)
 8003144:	f000 fd7c 	bl	8003c40 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8003148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <CLI_FDCANTest+0x478>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <CLI_FDCANTest+0x40e>
 8003158:	482a      	ldr	r0, [pc, #168]	; (8003204 <CLI_FDCANTest+0x4a4>)
 800315a:	f000 fd71 	bl	8003c40 <svDebugMessage>
 800315e:	e006      	b.n	800316e <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <CLI_FDCANTest+0x478>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <CLI_FDCANTest+0x40e>
 8003168:	4827      	ldr	r0, [pc, #156]	; (8003208 <CLI_FDCANTest+0x4a8>)
 800316a:	f000 fd69 	bl	8003c40 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <CLI_FDCANTest+0x478>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <CLI_FDCANTest+0x422>
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	8aba      	ldrh	r2, [r7, #20]
 800317a:	4619      	mov	r1, r3
 800317c:	4823      	ldr	r0, [pc, #140]	; (800320c <CLI_FDCANTest+0x4ac>)
 800317e:	f000 fd5f 	bl	8003c40 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	663b      	str	r3, [r7, #96]	; 0x60
 8003186:	e00f      	b.n	80031a8 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <CLI_FDCANTest+0x478>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <CLI_FDCANTest+0x442>
 8003190:	f107 0216 	add.w	r2, r7, #22
 8003194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	480f      	ldr	r0, [pc, #60]	; (80031dc <CLI_FDCANTest+0x47c>)
 800319e:	f000 fd4f 	bl	8003c40 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80031a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a4:	3301      	adds	r3, #1
 80031a6:	663b      	str	r3, [r7, #96]	; 0x60
 80031a8:	8abb      	ldrh	r3, [r7, #20]
 80031aa:	461a      	mov	r2, r3
 80031ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ae:	4293      	cmp	r3, r2
 80031b0:	dbea      	blt.n	8003188 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <CLI_FDCANTest+0x478>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <CLI_FDCANTest+0x460>
 80031ba:	4809      	ldr	r0, [pc, #36]	; (80031e0 <CLI_FDCANTest+0x480>)
 80031bc:	f000 fd40 	bl	8003c40 <svDebugMessage>
        while(svCLI_KeepLoop())
 80031c0:	f00c fd98 	bl	800fcf4 <svCLI_KeepLoop>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f47f aeb4 	bne.w	8002f34 <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 80031d0:	bf00      	nop
 80031d2:	3784      	adds	r7, #132	; 0x84
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd90      	pop	{r4, r7, pc}
 80031d8:	2000003c 	.word	0x2000003c
 80031dc:	0801cfe8 	.word	0x0801cfe8
 80031e0:	0801cff0 	.word	0x0801cff0
 80031e4:	0801d004 	.word	0x0801d004
 80031e8:	20003b70 	.word	0x20003b70
 80031ec:	0801d018 	.word	0x0801d018
 80031f0:	20003604 	.word	0x20003604
 80031f4:	0801d024 	.word	0x0801d024
 80031f8:	0801d034 	.word	0x0801d034
 80031fc:	10624dd3 	.word	0x10624dd3
 8003200:	0801cfb4 	.word	0x0801cfb4
 8003204:	0801cfc4 	.word	0x0801cfc4
 8003208:	0801cfcc 	.word	0x0801cfcc
 800320c:	0801cfd4 	.word	0x0801cfd4

08003210 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	; 0x30
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 800322a:	f003 fb5b 	bl	80068e4 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <Flash_Erase+0xb0>)
 8003230:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003234:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	e013      	b.n	8003270 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	b29b      	uxth	r3, r3
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f837 	bl	80032c4 <Flash_InSector>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d106      	bne.n	800326a <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	2b00      	cmp	r3, #0
 8003260:	da01      	bge.n	8003266 <Flash_Erase+0x56>
      {
        start_sector = i;
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	3301      	adds	r3, #1
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b7f      	cmp	r3, #127	; 0x7f
 8003274:	dde8      	ble.n	8003248 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	2b00      	cmp	r3, #0
 800327a:	db19      	blt.n	80032b0 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800327c:	2304      	movs	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8003280:	2303      	movs	r3, #3
 8003282:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8003288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	3301      	adds	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8003292:	f107 0208 	add.w	r2, r7, #8
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fc53 	bl	8006b48 <HAL_FLASHEx_Erase>
 80032a2:	4603      	mov	r3, r0
 80032a4:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 80032a6:	7ffb      	ldrb	r3, [r7, #31]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 80032b0:	f003 fb3e 	bl	8006930 <HAL_FLASH_Lock>
  return ret;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3730      	adds	r7, #48	; 0x30
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40022000 	.word	0x40022000

080032c4 <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b08b      	sub	sp, #44	; 0x2c
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80032dc:	035b      	lsls	r3, r3, #13
 80032de:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80032e6:	331f      	adds	r3, #31
 80032e8:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	3b01      	subs	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80032f8:	6a3a      	ldr	r2, [r7, #32]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d305      	bcc.n	800330c <Flash_InSector+0x48>
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	d801      	bhi.n	800330c <Flash_InSector+0x48>
  {
    ret = TRUE;
 8003308:	2301      	movs	r3, #1
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	429a      	cmp	r2, r3
 8003312:	d305      	bcc.n	8003320 <Flash_InSector+0x5c>
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	429a      	cmp	r2, r3
 800331a:	d801      	bhi.n	8003320 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 800331c:	2301      	movs	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	429a      	cmp	r2, r3
 8003326:	d305      	bcc.n	8003334 <Flash_InSector+0x70>
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	429a      	cmp	r2, r3
 800332e:	d801      	bhi.n	8003334 <Flash_InSector+0x70>
  {
    ret = TRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	429a      	cmp	r2, r3
 800333a:	d305      	bcc.n	8003348 <Flash_InSector+0x84>
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	429a      	cmp	r2, r3
 8003342:	d801      	bhi.n	8003348 <Flash_InSector+0x84>
  {
    ret = TRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800334a:	4618      	mov	r0, r3
 800334c:	372c      	adds	r7, #44	; 0x2c
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b092      	sub	sp, #72	; 0x48
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 8003366:	f003 fabd 	bl	80068e4 <HAL_FLASH_Unlock>

  index = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <Flash_Write+0x2e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	f200 808e 	bhi.w	80034a0 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 800338c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	2210      	movs	r2, #16
 8003394:	4618      	mov	r0, r3
 8003396:	f018 fdf6 	bl	801bf86 <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 800339a:	f107 0210 	add.w	r2, r7, #16
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a0:	18d0      	adds	r0, r2, r3
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	f1c3 0210 	rsb	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4293      	cmp	r3, r2
 80033ac:	bf28      	it	cs
 80033ae:	4613      	movcs	r3, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	f018 fde7 	bl	801bf86 <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80033b8:	f107 0310 	add.w	r3, r7, #16
 80033bc:	461a      	mov	r2, r3
 80033be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033c0:	2002      	movs	r0, #2
 80033c2:	f003 fa17 	bl	80067f4 <HAL_FLASH_Program>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 80033cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <Flash_Write+0x82>
    {
      return FALSE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e06c      	b.n	80034b2 <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 80033d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <Flash_Write+0x98>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d804      	bhi.n	80033ee <Flash_Write+0x98>
    {
      index += length;
 80033e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
 80033ec:	e004      	b.n	80033f8 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 80033ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	3310      	adds	r3, #16
 80033f6:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 80033f8:	e052      	b.n	80034a0 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b10      	cmp	r3, #16
 8003402:	bf28      	it	cs
 8003404:	2310      	movcs	r3, #16
 8003406:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	2b10      	cmp	r3, #16
 800340c:	d117      	bne.n	800343e <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003412:	18d1      	adds	r1, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003418:	4413      	add	r3, r2
 800341a:	461a      	mov	r2, r3
 800341c:	2002      	movs	r0, #2
 800341e:	f003 f9e9 	bl	80067f4 <HAL_FLASH_Program>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8003428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <Flash_Write+0xe0>
      {
        ret = FALSE;
 8003430:	2300      	movs	r3, #0
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003434:	e03a      	b.n	80034ac <Flash_Write+0x156>
      }
      index += write_length;
 8003436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	4413      	add	r3, r2
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003442:	429a      	cmp	r2, r3
 8003444:	d02c      	beq.n	80034a0 <Flash_Write+0x14a>
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b0f      	cmp	r3, #15
 800344e:	d827      	bhi.n	80034a0 <Flash_Write+0x14a>
    {
      offset = length - index;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345c:	4413      	add	r3, r2
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003462:	f107 0310 	add.w	r3, r7, #16
 8003466:	2210      	movs	r2, #16
 8003468:	4618      	mov	r0, r3
 800346a:	f018 fd8c 	bl	801bf86 <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003472:	18d1      	adds	r1, r2, r3
 8003474:	f107 0310 	add.w	r3, r7, #16
 8003478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800347a:	4618      	mov	r0, r3
 800347c:	f018 fd83 	bl	801bf86 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	461a      	mov	r2, r3
 8003486:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003488:	2002      	movs	r0, #2
 800348a:	f003 f9b3 	bl	80067f4 <HAL_FLASH_Program>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8003494:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003498:	2b00      	cmp	r3, #0
 800349a:	d006      	beq.n	80034aa <Flash_Write+0x154>
      {
        return FALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	e008      	b.n	80034b2 <Flash_Write+0x15c>
  while(index < length)
 80034a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d3a8      	bcc.n	80033fa <Flash_Write+0xa4>
 80034a8:	e000      	b.n	80034ac <Flash_Write+0x156>
      }
      break;
 80034aa:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 80034ac:	f003 fa40 	bl	8006930 <HAL_FLASH_Lock>
  return ret;
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3748      	adds	r7, #72	; 0x48
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b089      	sub	sp, #36	; 0x24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e00c      	b.n	80034ee <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4413      	add	r3, r2
 80034da:	7819      	ldrb	r1, [r3, #0]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4413      	add	r3, r2
 80034e4:	460a      	mov	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	3301      	adds	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d8ee      	bhi.n	80034d4 <Flash_Read+0x1a>
  }



  return ret;
 80034f6:	69bb      	ldr	r3, [r7, #24]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3724      	adds	r7, #36	; 0x24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b09a      	sub	sp, #104	; 0x68
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b02      	cmp	r3, #2
 8003516:	f040 8085 	bne.w	8003624 <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d049      	beq.n	80035b4 <CLI_FlashTest+0xb0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d871      	bhi.n	800360a <CLI_FlashTest+0x106>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d003      	beq.n	8003534 <CLI_FlashTest+0x30>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d029      	beq.n	8003586 <CLI_FlashTest+0x82>
 8003532:	e06a      	b.n	800360a <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 8003534:	4b3d      	ldr	r3, [pc, #244]	; (800362c <CLI_FlashTest+0x128>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <CLI_FlashTest+0x3e>
 800353c:	483c      	ldr	r0, [pc, #240]	; (8003630 <CLI_FlashTest+0x12c>)
 800353e:	f000 fb7f 	bl	8003c40 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	2210      	movs	r2, #16
 8003548:	4619      	mov	r1, r3
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	f7ff ffb5 	bl	80034ba <Flash_Read>
        for(int i=0; i<16; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	667b      	str	r3, [r7, #100]	; 0x64
 8003554:	e013      	b.n	800357e <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 8003556:	4b35      	ldr	r3, [pc, #212]	; (800362c <CLI_FlashTest+0x128>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00c      	beq.n	8003578 <CLI_FlashTest+0x74>
 800355e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	18d1      	adds	r1, r2, r3
 8003564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	3368      	adds	r3, #104	; 0x68
 800356a:	443b      	add	r3, r7
 800356c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003570:	461a      	mov	r2, r3
 8003572:	4830      	ldr	r0, [pc, #192]	; (8003634 <CLI_FlashTest+0x130>)
 8003574:	f000 fb64 	bl	8003c40 <svDebugMessage>
        for(int i=0; i<16; i++)
 8003578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357a:	3301      	adds	r3, #1
 800357c:	667b      	str	r3, [r7, #100]	; 0x64
 800357e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003580:	2b0f      	cmp	r3, #15
 8003582:	dde8      	ble.n	8003556 <CLI_FlashTest+0x52>
        }
        break;
 8003584:	e04e      	b.n	8003624 <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 8003586:	2110      	movs	r1, #16
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	f7ff fe41 	bl	8003210 <Flash_Erase>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <CLI_FlashTest+0x128>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03e      	beq.n	800361a <CLI_FlashTest+0x116>
 800359c:	4826      	ldr	r0, [pc, #152]	; (8003638 <CLI_FlashTest+0x134>)
 800359e:	f000 fb4f 	bl	8003c40 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 80035a2:	e03a      	b.n	800361a <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <CLI_FlashTest+0x128>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d036      	beq.n	800361a <CLI_FlashTest+0x116>
 80035ac:	4823      	ldr	r0, [pc, #140]	; (800363c <CLI_FlashTest+0x138>)
 80035ae:	f000 fb47 	bl	8003c40 <svDebugMessage>
        break;
 80035b2:	e032      	b.n	800361a <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	663b      	str	r3, [r7, #96]	; 0x60
 80035b8:	e00a      	b.n	80035d0 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 80035ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035bc:	b2d9      	uxtb	r1, r3
 80035be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80035c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035c4:	4413      	add	r3, r2
 80035c6:	460a      	mov	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 80035ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035cc:	3301      	adds	r3, #1
 80035ce:	663b      	str	r3, [r7, #96]	; 0x60
 80035d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	ddf1      	ble.n	80035ba <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 80035d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035da:	2210      	movs	r2, #16
 80035dc:	4619      	mov	r1, r3
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	f7ff feb9 	bl	8003356 <Flash_Write>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <CLI_FlashTest+0x128>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <CLI_FlashTest+0x11a>
 80035f2:	4813      	ldr	r0, [pc, #76]	; (8003640 <CLI_FlashTest+0x13c>)
 80035f4:	f000 fb24 	bl	8003c40 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 80035f8:	e011      	b.n	800361e <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <CLI_FlashTest+0x128>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <CLI_FlashTest+0x11a>
 8003602:	4810      	ldr	r0, [pc, #64]	; (8003644 <CLI_FlashTest+0x140>)
 8003604:	f000 fb1c 	bl	8003c40 <svDebugMessage>
        break;
 8003608:	e009      	b.n	800361e <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <CLI_FlashTest+0x128>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <CLI_FlashTest+0x11e>
 8003612:	480d      	ldr	r0, [pc, #52]	; (8003648 <CLI_FlashTest+0x144>)
 8003614:	f000 fb14 	bl	8003c40 <svDebugMessage>
        break;
 8003618:	e003      	b.n	8003622 <CLI_FlashTest+0x11e>
        break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <CLI_FlashTest+0x120>
        break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <CLI_FlashTest+0x120>
        break;
 8003622:	bf00      	nop
    }
  }
}
 8003624:	bf00      	nop
 8003626:	3768      	adds	r7, #104	; 0x68
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	2000003c 	.word	0x2000003c
 8003630:	0801d08c 	.word	0x0801d08c
 8003634:	0801d0bc 	.word	0x0801d0bc
 8003638:	0801d0cc 	.word	0x0801d0cc
 800363c:	0801d0d8 	.word	0x0801d0d8
 8003640:	0801d0e4 	.word	0x0801d0e4
 8003644:	0801d0f0 	.word	0x0801d0f0
 8003648:	0801d0fc 	.word	0x0801d0fc

0800364c <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <LED_Init+0x1c>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <LED_Init+0x20>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20003b74 	.word	0x20003b74
 800366c:	20003b78 	.word	0x20003b78

08003670 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <LED_OnOff+0x7c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02d      	beq.n	80036e0 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <LED_OnOff+0x80>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02c      	beq.n	80036e6 <LED_OnOff+0x76>
  {
    switch(eLED){
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d010      	beq.n	80036b4 <LED_OnOff+0x44>
 8003692:	2b03      	cmp	r3, #3
 8003694:	dc26      	bgt.n	80036e4 <LED_OnOff+0x74>
 8003696:	2b01      	cmp	r3, #1
 8003698:	d002      	beq.n	80036a0 <LED_OnOff+0x30>
 800369a:	2b02      	cmp	r3, #2
 800369c:	d005      	beq.n	80036aa <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 800369e:	e021      	b.n	80036e4 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <LED_OnOff+0x84>)
 80036a2:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 80036a4:	2301      	movs	r3, #1
 80036a6:	817b      	strh	r3, [r7, #10]
        break;
 80036a8:	e009      	b.n	80036be <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <LED_OnOff+0x88>)
 80036ac:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 80036ae:	2310      	movs	r3, #16
 80036b0:	817b      	strh	r3, [r7, #10]
        break;
 80036b2:	e004      	b.n	80036be <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <LED_OnOff+0x8c>)
 80036b6:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 80036b8:	2310      	movs	r3, #16
 80036ba:	817b      	strh	r3, [r7, #10]
        break;
 80036bc:	bf00      	nop
        break;
    }
    if(bOn)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 80036c4:	897b      	ldrh	r3, [r7, #10]
 80036c6:	2201      	movs	r2, #1
 80036c8:	4619      	mov	r1, r3
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f003 fc92 	bl	8006ff4 <HAL_GPIO_WritePin>
 80036d0:	e009      	b.n	80036e6 <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 80036d2:	897b      	ldrh	r3, [r7, #10]
 80036d4:	2200      	movs	r2, #0
 80036d6:	4619      	mov	r1, r3
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f003 fc8b 	bl	8006ff4 <HAL_GPIO_WritePin>
 80036de:	e002      	b.n	80036e6 <LED_OnOff+0x76>
    return;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <LED_OnOff+0x76>
        return;
 80036e4:	bf00      	nop
    }
  }
}
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20003b78 	.word	0x20003b78
 80036f0:	20003b74 	.word	0x20003b74
 80036f4:	42020400 	.word	0x42020400
 80036f8:	42021400 	.word	0x42021400
 80036fc:	42021800 	.word	0x42021800

08003700 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	e02c      	b.n	8003766 <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 800370c:	2101      	movs	r1, #1
 800370e:	2001      	movs	r0, #1
 8003710:	f7ff ffae 	bl	8003670 <LED_OnOff>
    HAL_Delay(50);
 8003714:	2032      	movs	r0, #50	; 0x32
 8003716:	f000 fb0f 	bl	8003d38 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 800371a:	2100      	movs	r1, #0
 800371c:	2001      	movs	r0, #1
 800371e:	f7ff ffa7 	bl	8003670 <LED_OnOff>
    HAL_Delay(50);
 8003722:	2032      	movs	r0, #50	; 0x32
 8003724:	f000 fb08 	bl	8003d38 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8003728:	2101      	movs	r1, #1
 800372a:	2002      	movs	r0, #2
 800372c:	f7ff ffa0 	bl	8003670 <LED_OnOff>
    HAL_Delay(50);
 8003730:	2032      	movs	r0, #50	; 0x32
 8003732:	f000 fb01 	bl	8003d38 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 8003736:	2100      	movs	r1, #0
 8003738:	2002      	movs	r0, #2
 800373a:	f7ff ff99 	bl	8003670 <LED_OnOff>
    HAL_Delay(50);
 800373e:	2032      	movs	r0, #50	; 0x32
 8003740:	f000 fafa 	bl	8003d38 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 8003744:	2101      	movs	r1, #1
 8003746:	2003      	movs	r0, #3
 8003748:	f7ff ff92 	bl	8003670 <LED_OnOff>
    HAL_Delay(50);
 800374c:	2032      	movs	r0, #50	; 0x32
 800374e:	f000 faf3 	bl	8003d38 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 8003752:	2100      	movs	r1, #0
 8003754:	2003      	movs	r0, #3
 8003756:	f7ff ff8b 	bl	8003670 <LED_OnOff>
    HAL_Delay(50);
 800375a:	2032      	movs	r0, #50	; 0x32
 800375c:	f000 faec 	bl	8003d38 <HAL_Delay>
  for(int i =0; i<3; i++)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3301      	adds	r3, #1
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b02      	cmp	r3, #2
 800376a:	ddcf      	ble.n	800370c <LED_SimpleAnimation+0xc>
  }
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d10b      	bne.n	80037a2 <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f7ff ff67 	bl	8003670 <LED_OnOff>
  }
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <RESET_Init+0x80>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 80037c6:	2301      	movs	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 80037ca:	4919      	ldr	r1, [pc, #100]	; (8003830 <RESET_Init+0x84>)
 80037cc:	2002      	movs	r0, #2
 80037ce:	f000 f845 	bl	800385c <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <RESET_Init+0x88>)
 80037d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01c      	beq.n	800381a <RESET_Init+0x6e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d019      	beq.n	800381a <RESET_Init+0x6e>
 80037e6:	2002      	movs	r0, #2
 80037e8:	f000 f828 	bl	800383c <RTC_ReadBackupReg>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4a10      	ldr	r2, [pc, #64]	; (8003830 <RESET_Init+0x84>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d112      	bne.n	800381a <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 80037f4:	2001      	movs	r0, #1
 80037f6:	f000 f821 	bl	800383c <RTC_ReadBackupReg>
 80037fa:	4603      	mov	r3, r0
 80037fc:	3301      	adds	r3, #1
 80037fe:	4619      	mov	r1, r3
 8003800:	2001      	movs	r0, #1
 8003802:	f000 f82b 	bl	800385c <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 8003806:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800380a:	f000 fa95 	bl	8003d38 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 800380e:	2001      	movs	r0, #1
 8003810:	f000 f814 	bl	800383c <RTC_ReadBackupReg>
 8003814:	4603      	mov	r3, r0
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <RESET_Init+0x8c>)
 8003818:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 800381a:	2100      	movs	r1, #0
 800381c:	2001      	movs	r0, #1
 800381e:	f000 f81d 	bl	800385c <RTC_WriteBackupReg>

  return ret;
 8003822:	683b      	ldr	r3, [r7, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	e000edf0 	.word	0xe000edf0
 8003830:	20240215 	.word	0x20240215
 8003834:	44020c00 	.word	0x44020c00
 8003838:	20003b7c 	.word	0x20003b7c

0800383c <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4804      	ldr	r0, [pc, #16]	; (8003858 <RTC_ReadBackupReg+0x1c>)
 8003848:	f009 fc64 	bl	800d114 <HAL_RTCEx_BKUPRead>
 800384c:	4603      	mov	r3, r0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20003b80 	.word	0x20003b80

0800385c <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4803      	ldr	r0, [pc, #12]	; (8003878 <RTC_WriteBackupReg+0x1c>)
 800386c:	f009 fc3a 	bl	800d0e4 <HAL_RTCEx_BKUPWrite>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20003b80 	.word	0x20003b80

0800387c <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d177      	bne.n	800397e <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <UART_Init+0x10c>)
 8003890:	4a3e      	ldr	r2, [pc, #248]	; (800398c <UART_Init+0x110>)
 8003892:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 8003894:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <UART_Init+0x10c>)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800389a:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <UART_Init+0x10c>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <UART_Init+0x10c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 80038a6:	4b38      	ldr	r3, [pc, #224]	; (8003988 <UART_Init+0x10c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 80038ac:	4b36      	ldr	r3, [pc, #216]	; (8003988 <UART_Init+0x10c>)
 80038ae:	220c      	movs	r2, #12
 80038b0:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b2:	4b35      	ldr	r3, [pc, #212]	; (8003988 <UART_Init+0x10c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b8:	4b33      	ldr	r3, [pc, #204]	; (8003988 <UART_Init+0x10c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038be:	4b32      	ldr	r3, [pc, #200]	; (8003988 <UART_Init+0x10c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038c4:	4b30      	ldr	r3, [pc, #192]	; (8003988 <UART_Init+0x10c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ca:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <UART_Init+0x10c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 80038d0:	482d      	ldr	r0, [pc, #180]	; (8003988 <UART_Init+0x10c>)
 80038d2:	f00a f81b 	bl	800d90c <HAL_UART_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <UART_Init+0x72>
      {
        Error_Handler();
 80038dc:	f7fd f92e 	bl	8000b3c <Error_Handler>
        s_bUARTConnected = FALSE;
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <UART_Init+0x114>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80038e6:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <UART_Init+0x118>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e031      	b.n	8003952 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ee:	2100      	movs	r1, #0
 80038f0:	4825      	ldr	r0, [pc, #148]	; (8003988 <UART_Init+0x10c>)
 80038f2:	f00b ff4a 	bl	800f78a <HAL_UARTEx_SetTxFifoThreshold>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <UART_Init+0x92>
      {
        Error_Handler();
 80038fc:	f7fd f91e 	bl	8000b3c <Error_Handler>
        s_bUARTConnected = FALSE;
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <UART_Init+0x114>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <UART_Init+0x118>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e021      	b.n	8003952 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800390e:	2100      	movs	r1, #0
 8003910:	481d      	ldr	r0, [pc, #116]	; (8003988 <UART_Init+0x10c>)
 8003912:	f00b ff78 	bl	800f806 <HAL_UARTEx_SetRxFifoThreshold>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <UART_Init+0xb2>
      {
        Error_Handler();
 800391c:	f7fd f90e 	bl	8000b3c <Error_Handler>
        s_bUARTConnected = FALSE;
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <UART_Init+0x114>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <UART_Init+0x118>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e011      	b.n	8003952 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800392e:	4816      	ldr	r0, [pc, #88]	; (8003988 <UART_Init+0x10c>)
 8003930:	f00b fef2 	bl	800f718 <HAL_UARTEx_DisableFifoMode>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <UART_Init+0xd0>
      {
        Error_Handler();
 800393a:	f7fd f8ff 	bl	8000b3c <Error_Handler>
        s_bUARTConnected = FALSE;
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <UART_Init+0x114>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <UART_Init+0x118>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e002      	b.n	8003952 <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 800394c:	4812      	ldr	r0, [pc, #72]	; (8003998 <UART_Init+0x11c>)
 800394e:	f00c fee4 	bl	801071a <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 8003952:	2201      	movs	r2, #1
 8003954:	4911      	ldr	r1, [pc, #68]	; (800399c <UART_Init+0x120>)
 8003956:	480c      	ldr	r0, [pc, #48]	; (8003988 <UART_Init+0x10c>)
 8003958:	f00a f8c6 	bl	800dae8 <HAL_UART_Receive_IT>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <UART_Init+0x114>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <UART_Init+0x118>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 800396e:	e007      	b.n	8003980 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <UART_Init+0x114>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <UART_Init+0x118>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]
      break;
 800397c:	e000      	b.n	8003980 <UART_Init+0x104>
    default:
      break;
 800397e:	bf00      	nop
  }
  return;
 8003980:	bf00      	nop
}
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20003bb8 	.word	0x20003bb8
 800398c:	40004400 	.word	0x40004400
 8003990:	20003bb4 	.word	0x20003bb4
 8003994:	20003ccc 	.word	0x20003ccc
 8003998:	20000020 	.word	0x20000020
 800399c:	20003bb0 	.word	0x20003bb0

080039a0 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <IsUartConnected+0x1c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20003bb4 	.word	0x20003bb4

080039c0 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	71fb      	strb	r3, [r7, #7]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d110      	bne.n	80039fc <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 80039da:	88ba      	ldrh	r2, [r7, #4]
 80039dc:	2364      	movs	r3, #100	; 0x64
 80039de:	6839      	ldr	r1, [r7, #0]
 80039e0:	480a      	ldr	r0, [pc, #40]	; (8003a0c <UART_Write+0x4c>)
 80039e2:	f009 ffe3 	bl	800d9ac <HAL_UART_Transmit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 80039ea:	7afb      	ldrb	r3, [r7, #11]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <UART_Write+0x40>
      {
        ret = Len;
 80039f0:	88bb      	ldrh	r3, [r7, #4]
 80039f2:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <UART_Write+0x50>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
      }
      break;
 80039fa:	e001      	b.n	8003a00 <UART_Write+0x40>
    default:
      break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <UART_Write+0x42>
      break;
 8003a00:	bf00      	nop
  }
  return ret;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20003bb8 	.word	0x20003bb8
 8003a10:	20003ccc 	.word	0x20003ccc

08003a14 <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 8003a14:	b40e      	push	{r1, r2, r3}
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b0c7      	sub	sp, #284	; 0x11c
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a22:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003a26:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003a28:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003a2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a34:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8003a36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a3e:	f107 0010 	add.w	r0, r7, #16
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a4c:	f018 f9aa 	bl	801bda4 <vsniprintf>
 8003a50:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	f107 0110 	add.w	r1, r7, #16
 8003a5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003a62:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ffa9 	bl	80039c0 <UART_Write>
 8003a6e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8003a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a82:	b003      	add	sp, #12
 8003a84:	4770      	bx	lr
	...

08003a88 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8003a9c:	4804      	ldr	r0, [pc, #16]	; (8003ab0 <Uart_Available+0x28>)
 8003a9e:	f00c fe1a 	bl	80106d6 <svRingBuffer_GetCount>
 8003aa2:	60f8      	str	r0, [r7, #12]
      break;
 8003aa4:	bf00      	nop
  }

  return ret;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000020 	.word	0x20000020

08003ab4 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_UART_RxCpltCallback+0x40>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d112      	bne.n	8003aec <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_UART_RxCpltCallback+0x44>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <HAL_UART_RxCpltCallback+0x48>)
 8003ace:	f00c fe3c 	bl	801074a <svRingBuffer_Push>
 8003ad2:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f113 0f02 	cmn.w	r3, #2
 8003ada:	d102      	bne.n	8003ae2 <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8003adc:	4807      	ldr	r0, [pc, #28]	; (8003afc <HAL_UART_RxCpltCallback+0x48>)
 8003ade:	f00c fe1c 	bl	801071a <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4904      	ldr	r1, [pc, #16]	; (8003af8 <HAL_UART_RxCpltCallback+0x44>)
 8003ae6:	4806      	ldr	r0, [pc, #24]	; (8003b00 <HAL_UART_RxCpltCallback+0x4c>)
 8003ae8:	f009 fffe 	bl	800dae8 <HAL_UART_Receive_IT>
  }
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40004400 	.word	0x40004400
 8003af8:	20003bb0 	.word	0x20003bb0
 8003afc:	20000020 	.word	0x20000020
 8003b00:	20003bb8 	.word	0x20003bb8

08003b04 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8003b08:	4806      	ldr	r0, [pc, #24]	; (8003b24 <svDebugRxChar+0x20>)
 8003b0a:	f00c fde4 	bl	80106d6 <svRingBuffer_GetCount>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8003b14:	4803      	ldr	r0, [pc, #12]	; (8003b24 <svDebugRxChar+0x20>)
 8003b16:	f00c fe4c 	bl	80107b2 <svRingBuffer_Pop>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	e000      	b.n	8003b20 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8003b1e:	2300      	movs	r3, #0
	}
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000020 	.word	0x20000020

08003b28 <svDebugProcess>:

void svDebugProcess(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7ff ff36 	bl	80039a0 <IsUartConnected>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01a      	beq.n	8003b70 <svDebugProcess+0x48>
	  svCLI_Handler();
 8003b3a:	f00c fc79 	bl	8010430 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <svDebugProcess+0x50>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d114      	bne.n	8003b70 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8003b46:	480d      	ldr	r0, [pc, #52]	; (8003b7c <svDebugProcess+0x54>)
 8003b48:	f017 fe8d 	bl	801b866 <lwrb_get_linear_block_read_length>
 8003b4c:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8003b54:	4809      	ldr	r0, [pc, #36]	; (8003b7c <svDebugProcess+0x54>)
 8003b56:	f017 fe6a 	bl	801b82e <lwrb_get_linear_block_read_address>
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	2000      	movs	r0, #0
 8003b64:	f7ff ff2c 	bl	80039c0 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4804      	ldr	r0, [pc, #16]	; (8003b7c <svDebugProcess+0x54>)
 8003b6c:	f017 feae 	bl	801b8cc <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20003ccc 	.word	0x20003ccc
 8003b7c:	20003cd0 	.word	0x20003cd0

08003b80 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d11a      	bne.n	8003bca <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7ff ff03 	bl	80039a0 <IsUartConnected>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d014      	beq.n	8003bca <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8003ba0:	f000 f8be 	bl	8003d20 <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8003ba6:	e003      	b.n	8003bb0 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <svDebugCallback+0x54>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d006      	beq.n	8003bbe <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8003bb0:	6978      	ldr	r0, [r7, #20]
 8003bb2:	f000 f863 	bl	8003c7c <GetElapsedTime>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b63      	cmp	r3, #99	; 0x63
 8003bba:	d9f5      	bls.n	8003ba8 <svDebugCallback+0x28>
 8003bbc:	e000      	b.n	8003bc0 <svDebugCallback+0x40>
					break;
 8003bbe:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <svDebugCallback+0x54>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8003bc6:	f7ff ffaf 	bl	8003b28 <svDebugProcess>
		}
	}
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20003ccc 	.word	0x20003ccc

08003bd8 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8003bdc:	4809      	ldr	r0, [pc, #36]	; (8003c04 <svDebugInit+0x2c>)
 8003bde:	f00c fd9c 	bl	801071a <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8003be2:	2200      	movs	r2, #0
 8003be4:	4908      	ldr	r1, [pc, #32]	; (8003c08 <svDebugInit+0x30>)
 8003be6:	4809      	ldr	r0, [pc, #36]	; (8003c0c <svDebugInit+0x34>)
 8003be8:	f00b ff96 	bl	800fb18 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8003bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf0:	4907      	ldr	r1, [pc, #28]	; (8003c10 <svDebugInit+0x38>)
 8003bf2:	4808      	ldr	r0, [pc, #32]	; (8003c14 <svDebugInit+0x3c>)
 8003bf4:	f017 fcfc 	bl	801b5f0 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8003bf8:	4907      	ldr	r1, [pc, #28]	; (8003c18 <svDebugInit+0x40>)
 8003bfa:	4806      	ldr	r0, [pc, #24]	; (8003c14 <svDebugInit+0x3c>)
 8003bfc:	f017 fd19 	bl	801b632 <lwrb_set_evt_fn>
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000020 	.word	0x20000020
 8003c08:	08003c1d 	.word	0x08003c1d
 8003c0c:	08003b05 	.word	0x08003b05
 8003c10:	20003ce4 	.word	0x20003ce4
 8003c14:	20003cd0 	.word	0x20003cd0
 8003c18:	08003b81 	.word	0x08003b81

08003c1c <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8003c26:	1dfb      	adds	r3, r7, #7
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4803      	ldr	r0, [pc, #12]	; (8003c3c <svDebugPutChar+0x20>)
 8003c2e:	f017 fd19 	bl	801b664 <lwrb_write>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20003cd0 	.word	0x20003cd0

08003c40 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8003c40:	b40f      	push	{r0, r1, r2, r3}
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	6939      	ldr	r1, [r7, #16]
 8003c52:	4808      	ldr	r0, [pc, #32]	; (8003c74 <svDebugMessage+0x34>)
 8003c54:	f018 f8ca 	bl	801bdec <vsiprintf>
 8003c58:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4905      	ldr	r1, [pc, #20]	; (8003c74 <svDebugMessage+0x34>)
 8003c60:	4805      	ldr	r0, [pc, #20]	; (8003c78 <svDebugMessage+0x38>)
 8003c62:	f017 fcff 	bl	801b664 <lwrb_write>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c70:	b004      	add	sp, #16
 8003c72:	4770      	bx	lr
 8003c74:	20003ee8 	.word	0x20003ee8
 8003c78:	20003cd0 	.word	0x20003cd0

08003c7c <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8003c84:	f000 f84c 	bl	8003d20 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d204      	bcs.n	8003c9c <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	e002      	b.n	8003ca2 <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	1ad3      	subs	r3, r2, r3
	}
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	f000 f928 	bl	8003f06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003cb6:	f004 f801 	bl	8007cbc <HAL_RCC_GetSysClockFreq>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_Init+0x40>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	490a      	ldr	r1, [pc, #40]	; (8003cf0 <HAL_Init+0x44>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <HAL_Init+0x48>)
 8003cce:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cd0:	200f      	movs	r0, #15
 8003cd2:	f7fd f8ad 	bl	8000e30 <HAL_InitTick>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e002      	b.n	8003ce6 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ce0:	f7fc ff31 	bl	8000b46 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	44020c00 	.word	0x44020c00
 8003cf0:	0801fbf4 	.word	0x0801fbf4
 8003cf4:	20000000 	.word	0x20000000

08003cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_IncTick+0x20>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_IncTick+0x24>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <HAL_IncTick+0x24>)
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000044 	.word	0x20000044
 8003d1c:	20003f68 	.word	0x20003f68

08003d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return uwTick;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_GetTick+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20003f68 	.word	0x20003f68

08003d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7ff ffee 	bl	8003d20 <HAL_GetTick>
 8003d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d005      	beq.n	8003d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_Delay+0x44>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5e:	bf00      	nop
 8003d60:	f7ff ffde 	bl	8003d20 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d8f7      	bhi.n	8003d60 <HAL_Delay+0x28>
  {
  }
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000044 	.word	0x20000044

08003d80 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8003d8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d8e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d92:	4905      	ldr	r1, [pc, #20]	; (8003da8 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	44000400 	.word	0x44000400

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4907      	ldr	r1, [pc, #28]	; (8003e48 <__NVIC_EnableIRQ+0x38>)
 8003e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100

08003e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0a      	blt.n	8003e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	490c      	ldr	r1, [pc, #48]	; (8003e98 <__NVIC_SetPriority+0x4c>)
 8003e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e74:	e00a      	b.n	8003e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4908      	ldr	r1, [pc, #32]	; (8003e9c <__NVIC_SetPriority+0x50>)
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3b04      	subs	r3, #4
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	440b      	add	r3, r1
 8003e8a:	761a      	strb	r2, [r3, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f1c3 0307 	rsb	r3, r3, #7
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf28      	it	cs
 8003ebe:	2304      	movcs	r3, #4
 8003ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <NVIC_EncodePriority+0x30>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b03      	subs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <NVIC_EncodePriority+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43d9      	mvns	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	4313      	orrs	r3, r2
         );
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	; 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff ff4c 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2a:	f7ff ff63 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f7ff ffb3 	bl	8003ea0 <NVIC_EncodePriority>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff82 	bl	8003e4c <__NVIC_SetPriority>
}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ff56 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003f74:	f7ff fed4 	bl	8003d20 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e06b      	b.n	800405c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d008      	beq.n	8003fa2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e05c      	b.n	800405c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0204 	orr.w	r2, r2, #4
 8003fb0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2205      	movs	r2, #5
 8003fb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003fba:	e020      	b.n	8003ffe <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003fbc:	f7ff feb0 	bl	8003d20 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b05      	cmp	r3, #5
 8003fc8:	d919      	bls.n	8003ffe <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	f043 0210 	orr.w	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2203      	movs	r2, #3
 8003fda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	2201      	movs	r2, #1
 8003ff0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e02e      	b.n	800405c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0d7      	beq.n	8003fbc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0202 	orr.w	r2, r2, #2
 800401a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2204      	movs	r2, #4
 8004020:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800402c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	2201      	movs	r2, #1
 8004048:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e019      	b.n	80040aa <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d004      	beq.n	800408c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e00e      	b.n	80040aa <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2204      	movs	r2, #4
 8004090:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e0d2      	b.n	8004270 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2223      	movs	r2, #35	; 0x23
 80040d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fd fc81 	bl	80019e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_ETH_Init+0x1c0>)
 80040e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040e8:	4a63      	ldr	r2, [pc, #396]	; (8004278 <HAL_ETH_Init+0x1c0>)
 80040ea:	f043 0302 	orr.w	r3, r3, #2
 80040ee:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80040f2:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_ETH_Init+0x1c0>)
 80040f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7a1b      	ldrb	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d103      	bne.n	8004110 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8004108:	2000      	movs	r0, #0
 800410a:	f7ff fe39 	bl	8003d80 <HAL_SBS_ETHInterfaceSelect>
 800410e:	e003      	b.n	8004118 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8004110:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004114:	f7ff fe34 	bl	8003d80 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8004118:	4b58      	ldr	r3, [pc, #352]	; (800427c <HAL_ETH_Init+0x1c4>)
 800411a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004134:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004136:	f7ff fdf3 	bl	8003d20 <HAL_GetTick>
 800413a:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800413c:	e011      	b.n	8004162 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800413e:	f7ff fdef 	bl	8003d20 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800414c:	d909      	bls.n	8004162 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2204      	movs	r2, #4
 8004152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	22e0      	movs	r2, #224	; 0xe0
 800415a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e086      	b.n	8004270 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e4      	bne.n	800413e <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fd93 	bl	8004ca0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800417a:	f003 fecb 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 800417e:	4603      	mov	r3, r0
 8004180:	4a3f      	ldr	r2, [pc, #252]	; (8004280 <HAL_ETH_Init+0x1c8>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0c9a      	lsrs	r2, r3, #18
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3a01      	subs	r2, #1
 800418e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 ff8e 	bl	80050b4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041a4:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	22e0      	movs	r2, #224	; 0xe0
 80041d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e04b      	b.n	8004270 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041e4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041e8:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6952      	ldr	r2, [r2, #20]
 80041f0:	0051      	lsls	r1, r2, #1
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	430b      	orrs	r3, r1
 80041f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041fc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fff4 	bl	80051ee <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 f83a 	bl	8005280 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	3305      	adds	r3, #5
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	3303      	adds	r3, #3
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	061a      	lsls	r2, r3, #24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	3302      	adds	r3, #2
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	3301      	adds	r3, #1
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800424a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004258:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800425a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2210      	movs	r2, #16
 800426a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	44020c00 	.word	0x44020c00
 800427c:	44000400 	.word	0x44000400
 8004280:	431bde83 	.word	0x431bde83

08004284 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004292:	2b10      	cmp	r3, #16
 8004294:	d153      	bne.n	800433e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2223      	movs	r2, #35	; 0x23
 800429a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2204      	movs	r2, #4
 80042a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f9f6 	bl	8004696 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0202 	orr.w	r2, r2, #2
 80042b8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004312:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800432a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800432e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2223      	movs	r2, #35	; 0x23
 8004336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004356:	2b23      	cmp	r3, #35	; 0x23
 8004358:	d13f      	bne.n	80043da <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2223      	movs	r2, #35	; 0x23
 800435e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800437a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004386:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004396:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0202 	bic.w	r2, r2, #2
 80043cc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2210      	movs	r2, #16
 80043d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e07f      	b.n	800450e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004414:	2b23      	cmp	r3, #35	; 0x23
 8004416:	d179      	bne.n	800450c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004418:	2200      	movs	r2, #0
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 ff8c 	bl	800533a <ETH_Prepare_Tx_Descriptors>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f043 0202 	orr.w	r2, r3, #2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e068      	b.n	800450e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 800443c:	f3bf 8f4f 	dsb	sy
}
 8004440:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3206      	adds	r2, #6
 800444a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	629a      	str	r2, [r3, #40]	; 0x28
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b03      	cmp	r3, #3
 8004460:	d904      	bls.n	800446c <HAL_ETH_Transmit+0x84>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	1f1a      	subs	r2, r3, #4
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3106      	adds	r1, #6
 8004478:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800447c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004480:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8004484:	f7ff fc4c 	bl	8003d20 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800448a:	e039      	b.n	8004500 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004494:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d012      	beq.n	80044c6 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f043 0208 	orr.w	r2, r3, #8
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e023      	b.n	800450e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d018      	beq.n	8004500 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044ce:	f7ff fc27 	bl	8003d20 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d302      	bcc.n	80044e4 <HAL_ETH_Transmit+0xfc>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10d      	bne.n	8004500 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f043 0204 	orr.w	r2, r3, #4
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80044fa:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e006      	b.n	800450e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	dbc1      	blt.n	800448c <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0a5      	b.n	800468e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004548:	2b23      	cmp	r3, #35	; 0x23
 800454a:	d001      	beq.n	8004550 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e09e      	b.n	800468e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	3212      	adds	r2, #18
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004566:	f1c3 0304 	rsb	r3, r3, #4
 800456a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800456c:	e067      	b.n	800463e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <HAL_ETH_ReadData+0x88>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d03d      	beq.n	800461a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80045f4:	461a      	mov	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f7fd fbd3 	bl	8001da4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2200      	movs	r2, #0
 8004618:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3301      	adds	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d902      	bls.n	800462c <HAL_ETH_ReadData+0x116>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3b04      	subs	r3, #4
 800462a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	3212      	adds	r2, #18
 8004632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004636:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004642:	2b00      	cmp	r3, #0
 8004644:	db06      	blt.n	8004654 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	d202      	bcs.n	8004654 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d08c      	beq.n	800456e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	441a      	add	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f814 	bl	8004696 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d108      	bne.n	800468c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b088      	sub	sp, #32
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80046a2:	2301      	movs	r3, #1
 80046a4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	3212      	adds	r2, #18
 80046b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046bc:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80046be:	e03b      	b.n	8004738 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d112      	bne.n	80046ee <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80046c8:	f107 030c 	add.w	r3, r7, #12
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fd fb39 	bl	8001d44 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	74fb      	strb	r3, [r7, #19]
 80046dc:	e007      	b.n	80046ee <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	461a      	mov	r2, r3
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	461a      	mov	r2, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d021      	beq.n	8004738 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80046f4:	f3bf 8f5f 	dmb	sy
}
 80046f8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e003      	b.n	8004714 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8004712:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3301      	adds	r3, #1
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d902      	bls.n	8004726 <ETH_UpdateDescriptor+0x90>
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	3b04      	subs	r3, #4
 8004724:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	3212      	adds	r2, #18
 800472c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004730:	617b      	str	r3, [r7, #20]
      desccount--;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3b01      	subs	r3, #1
 8004736:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <ETH_UpdateDescriptor+0xae>
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1bd      	bne.n	80046c0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	429a      	cmp	r2, r3
 800474c:	d00d      	beq.n	800476a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	461a      	mov	r2, r3
 8004758:	2300      	movs	r3, #0
 800475a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800476a:	bf00      	nop
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e03e      	b.n	8004812 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800479c:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	055b      	lsls	r3, r3, #21
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f043 030c 	orr.w	r3, r3, #12
 80047c0:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80047d4:	f7ff faa4 	bl	8003d20 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80047da:	e009      	b.n	80047f0 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80047dc:	f7ff faa0 	bl	8003d20 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ea:	d901      	bls.n	80047f0 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e010      	b.n	8004812 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ed      	bne.n	80047dc <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004808:	b29b      	uxth	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e03c      	b.n	80048b8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004846:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	055b      	lsls	r3, r3, #21
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 030c 	bic.w	r3, r3, #12
 800486a:	f043 0304 	orr.w	r3, r3, #4
 800486e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b29a      	uxth	r2, r3
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_ETH_WritePHYRegister+0xa4>)
 800487e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004882:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <HAL_ETH_WritePHYRegister+0xa4>)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800488a:	f7ff fa49 	bl	8003d20 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004890:	e009      	b.n	80048a6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004892:	f7ff fa45 	bl	8003d20 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a0:	d901      	bls.n	80048a6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e008      	b.n	80048b8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ed      	bne.n	8004892 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40028000 	.word	0x40028000

080048c4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e1c3      	b.n	8004c60 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 020c 	and.w	r2, r3, #12
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bf14      	ite	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	2300      	moveq	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf14      	ite	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	2300      	moveq	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0e5b      	lsrs	r3, r3, #25
 8004b22:	f003 021f 	and.w	r2, r3, #31
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2301      	moveq	r3, #1
 8004b80:	2300      	movne	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004bec:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004bfc:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e00b      	b.n	8004c98 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d105      	bne.n	8004c96 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f86f 	bl	8004d70 <ETH_SetMACConfig>

    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004cba:	f003 f92b 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8004cbe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d908      	bls.n	8004cda <HAL_ETH_SetMDIOClockRange+0x3a>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4a24      	ldr	r2, [pc, #144]	; (8004d5c <HAL_ETH_SetMDIOClockRange+0xbc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d804      	bhi.n	8004cda <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e034      	b.n	8004d44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HAL_ETH_SetMDIOClockRange+0xbc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d908      	bls.n	8004cf4 <HAL_ETH_SetMDIOClockRange+0x54>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d204      	bcs.n	8004cf4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e027      	b.n	8004d44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d303      	bcc.n	8004d04 <HAL_ETH_SetMDIOClockRange+0x64>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d91e      	bls.n	8004d42 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d908      	bls.n	8004d1e <HAL_ETH_SetMDIOClockRange+0x7e>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d804      	bhi.n	8004d1e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e012      	b.n	8004d44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4a11      	ldr	r2, [pc, #68]	; (8004d68 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d908      	bls.n	8004d38 <HAL_ETH_SetMDIOClockRange+0x98>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4a10      	ldr	r2, [pc, #64]	; (8004d6c <HAL_ETH_SetMDIOClockRange+0xcc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d804      	bhi.n	8004d38 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e005      	b.n	8004d44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e000      	b.n	8004d44 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004d42:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	01312cff 	.word	0x01312cff
 8004d5c:	02160ebf 	.word	0x02160ebf
 8004d60:	03938700 	.word	0x03938700
 8004d64:	05f5e0ff 	.word	0x05f5e0ff
 8004d68:	08f0d17f 	.word	0x08f0d17f
 8004d6c:	0ee6b280 	.word	0x0ee6b280

08004d70 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004d82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	791b      	ldrb	r3, [r3, #4]
 8004d88:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004d8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	7b1b      	ldrb	r3, [r3, #12]
 8004d90:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	7b5b      	ldrb	r3, [r3, #13]
 8004d98:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	7b9b      	ldrb	r3, [r3, #14]
 8004da0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004da2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	7bdb      	ldrb	r3, [r3, #15]
 8004da8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004daa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	7c12      	ldrb	r2, [r2, #16]
 8004db0:	2a00      	cmp	r2, #0
 8004db2:	d102      	bne.n	8004dba <ETH_SetMACConfig+0x4a>
 8004db4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004db8:	e000      	b.n	8004dbc <ETH_SetMACConfig+0x4c>
 8004dba:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004dbc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	7c52      	ldrb	r2, [r2, #17]
 8004dc2:	2a00      	cmp	r2, #0
 8004dc4:	d102      	bne.n	8004dcc <ETH_SetMACConfig+0x5c>
 8004dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dca:	e000      	b.n	8004dce <ETH_SetMACConfig+0x5e>
 8004dcc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004dce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	7c9b      	ldrb	r3, [r3, #18]
 8004dd4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004dd6:	431a      	orrs	r2, r3
               macconf->Speed |
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004ddc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004de2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	7f1b      	ldrb	r3, [r3, #28]
 8004de8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004dea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	7f5b      	ldrb	r3, [r3, #29]
 8004df0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004df2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	7f92      	ldrb	r2, [r2, #30]
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d102      	bne.n	8004e02 <ETH_SetMACConfig+0x92>
 8004dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e00:	e000      	b.n	8004e04 <ETH_SetMACConfig+0x94>
 8004e02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004e04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	7fdb      	ldrb	r3, [r3, #31]
 8004e0a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004e0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e14:	2a00      	cmp	r2, #0
 8004e16:	d102      	bne.n	8004e1e <ETH_SetMACConfig+0xae>
 8004e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e1c:	e000      	b.n	8004e20 <ETH_SetMACConfig+0xb0>
 8004e1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004e20:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004e26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004e30:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <ETH_SetMACConfig+0x230>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	68f9      	ldr	r1, [r7, #12]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e5a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e64:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e6e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004e78:	2a00      	cmp	r2, #0
 8004e7a:	d102      	bne.n	8004e82 <ETH_SetMACConfig+0x112>
 8004e7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e80:	e000      	b.n	8004e84 <ETH_SetMACConfig+0x114>
 8004e82:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e84:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <ETH_SetMACConfig+0x234>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ea8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	68f9      	ldr	r1, [r7, #12]
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ed0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ed6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d101      	bne.n	8004ee6 <ETH_SetMACConfig+0x176>
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	e000      	b.n	8004ee8 <ETH_SetMACConfig+0x178>
 8004ee6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004ee8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004efa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004efe:	4013      	ands	r3, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	430b      	orrs	r3, r1
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004f10:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004f18:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	f023 0103 	bic.w	r1, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f3e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	d101      	bne.n	8004f62 <ETH_SetMACConfig+0x1f2>
 8004f5e:	2240      	movs	r2, #64	; 0x40
 8004f60:	e000      	b.n	8004f64 <ETH_SetMACConfig+0x1f4>
 8004f62:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004f64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004f6c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004f76:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f84:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	00048083 	.word	0x00048083
 8004fa4:	c0f88000 	.word	0xc0f88000

08004fa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004fc0:	f023 0302 	bic.w	r3, r3, #2
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	6811      	ldr	r1, [r2, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fd2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	791b      	ldrb	r3, [r3, #4]
 8004fd8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	7b1b      	ldrb	r3, [r3, #12]
 8004fe4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	430b      	orrs	r3, r1
 8005004:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005008:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	7b5b      	ldrb	r3, [r3, #13]
 800500e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005020:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005024:	4b21      	ldr	r3, [pc, #132]	; (80050ac <ETH_SetDMAConfig+0x104>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	68f9      	ldr	r1, [r7, #12]
 800502e:	430b      	orrs	r3, r1
 8005030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005034:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	7d1b      	ldrb	r3, [r3, #20]
 8005040:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005042:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	7f5b      	ldrb	r3, [r3, #29]
 8005048:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005056:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <ETH_SetDMAConfig+0x108>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	430b      	orrs	r3, r1
 8005066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800506a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	7f1b      	ldrb	r3, [r3, #28]
 8005072:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005084:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800508c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	430b      	orrs	r3, r1
 8005098:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800509c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	fffec000 	.word	0xfffec000
 80050b0:	ffc0efef 	.word	0xffc0efef

080050b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b0a4      	sub	sp, #144	; 0x90
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050c2:	2300      	movs	r3, #0
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050f4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005106:	2300      	movs	r3, #0
 8005108:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800510c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005110:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005118:	2300      	movs	r3, #0
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005122:	2300      	movs	r3, #0
 8005124:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800512e:	2300      	movs	r3, #0
 8005130:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005132:	2300      	movs	r3, #0
 8005134:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005136:	2300      	movs	r3, #0
 8005138:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800513a:	2300      	movs	r3, #0
 800513c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005140:	2300      	movs	r3, #0
 8005142:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800514c:	2320      	movs	r3, #32
 800514e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800515e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005168:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005170:	2302      	movs	r3, #2
 8005172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005176:	2300      	movs	r3, #0
 8005178:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005182:	2300      	movs	r3, #0
 8005184:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800518e:	2300      	movs	r3, #0
 8005190:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fde6 	bl	8004d70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80051a8:	2301      	movs	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80051be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80051d4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fee1 	bl	8004fa8 <ETH_SetDMAConfig>
}
 80051e6:	bf00      	nop
 80051e8:	3790      	adds	r7, #144	; 0x90
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e01d      	b.n	8005238 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68d9      	ldr	r1, [r3, #12]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	440b      	add	r3, r1
 800520c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2200      	movs	r2, #0
 800521e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	3206      	adds	r2, #6
 800522e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d9de      	bls.n	80051fc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524c:	461a      	mov	r2, r3
 800524e:	2303      	movs	r3, #3
 8005250:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005260:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e023      	b.n	80052d6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6919      	ldr	r1, [r3, #16]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4613      	mov	r3, r2
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	4413      	add	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	440b      	add	r3, r1
 800529e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2200      	movs	r2, #0
 80052b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2200      	movs	r2, #0
 80052b6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2200      	movs	r2, #0
 80052bc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2200      	movs	r2, #0
 80052c2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	3212      	adds	r2, #18
 80052cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3301      	adds	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d9d8      	bls.n	800528e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005302:	461a      	mov	r2, r3
 8005304:	2303      	movs	r3, #3
 8005306:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005316:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800533a:	b480      	push	{r7}
 800533c:	b08d      	sub	sp, #52	; 0x34
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3318      	adds	r3, #24
 800534a:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005364:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537c:	d007      	beq.n	800538e <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	3304      	adds	r3, #4
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800538e:	2302      	movs	r3, #2
 8005390:	e25a      	b.n	8005848 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	d044      	beq.n	8005428 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053aa:	431a      	orrs	r2, r3
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d027      	beq.n	8005428 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	431a      	orrs	r2, r3
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	431a      	orrs	r2, r3
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005416:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005426:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800543c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	6992      	ldr	r2, [r2, #24]
 8005444:	431a      	orrs	r2, r3
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d036      	beq.n	80054dc <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800547a:	f3bf 8f5f 	dmb	sy
}
 800547e:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	3301      	adds	r3, #1
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	2b03      	cmp	r3, #3
 8005496:	d902      	bls.n	800549e <ETH_Prepare_Tx_Descriptors+0x164>
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	3b04      	subs	r3, #4
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	3301      	adds	r3, #1
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ba:	d10f      	bne.n	80054dc <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80054c6:	f3bf 8f5f 	dmb	sy
}
 80054ca:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80054d8:	2302      	movs	r3, #2
 80054da:	e1b5      	b.n	8005848 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	3301      	adds	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80054f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005522:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	6852      	ldr	r2, [r2, #4]
 800552a:	0412      	lsls	r2, r2, #16
 800552c:	431a      	orrs	r2, r3
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	609a      	str	r2, [r3, #8]
 8005532:	e00a      	b.n	800554a <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2200      	movs	r2, #0
 8005538:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005542:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d019      	beq.n	800558a <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	04db      	lsls	r3, r3, #19
 8005564:	431a      	orrs	r2, r3
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	0c9b      	lsrs	r3, r3, #18
 8005570:	049b      	lsls	r3, r3, #18
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	69d2      	ldr	r2, [r2, #28]
 8005576:	431a      	orrs	r2, r3
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	60da      	str	r2, [r3, #12]
 8005588:	e028      	b.n	80055dc <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005592:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	6852      	ldr	r2, [r2, #4]
 800559a:	431a      	orrs	r2, r3
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	431a      	orrs	r2, r3
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005612:	f3bf 8f5f 	dmb	sy
}
 8005616:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80d9 	beq.w	80057e4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	431a      	orrs	r2, r3
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005644:	e0ce      	b.n	80057e4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	3301      	adds	r3, #1
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	2b03      	cmp	r3, #3
 800565c:	d902      	bls.n	8005664 <ETH_Prepare_Tx_Descriptors+0x32a>
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	3b04      	subs	r3, #4
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005686:	d007      	beq.n	8005698 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	3304      	adds	r3, #4
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d029      	beq.n	80056ec <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056aa:	e019      	b.n	80056e0 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 80056ac:	f3bf 8f5f 	dmb	sy
}
 80056b0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	3301      	adds	r3, #1
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d902      	bls.n	80056d0 <ETH_Prepare_Tx_Descriptors+0x396>
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	3b04      	subs	r3, #4
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	3301      	adds	r3, #1
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d3e1      	bcc.n	80056ac <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 80056e8:	2302      	movs	r3, #2
 80056ea:	e0ad      	b.n	8005848 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	3301      	adds	r3, #1
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800570a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	6852      	ldr	r2, [r2, #4]
 8005712:	431a      	orrs	r2, r3
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d014      	beq.n	800574a <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005738:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	6852      	ldr	r2, [r2, #4]
 8005740:	0412      	lsls	r2, r2, #16
 8005742:	431a      	orrs	r2, r3
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	e00a      	b.n	8005760 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	2200      	movs	r2, #0
 800574e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005758:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00f      	beq.n	800578c <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	0c9b      	lsrs	r3, r3, #18
 8005772:	049b      	lsls	r3, r3, #18
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	69d2      	ldr	r2, [r2, #28]
 8005778:	431a      	orrs	r2, r3
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	60da      	str	r2, [r3, #12]
 800578a:	e019      	b.n	80057c0 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	6852      	ldr	r2, [r2, #4]
 800579c:	431a      	orrs	r2, r3
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80057c6:	f3bf 8f5f 	dmb	sy
}
 80057ca:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f47f af2c 	bne.w	8005646 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	e005      	b.n	800580e <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	3304      	adds	r3, #4
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005830:	b672      	cpsid	i
}
 8005832:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	4413      	add	r3, r2
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005842:	b662      	cpsie	i
}
 8005844:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3734      	adds	r7, #52	; 0x34
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e147      	b.n	8005af6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fd f9da 	bl	8002c34 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0210 	bic.w	r2, r2, #16
 800588e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005890:	f7fe fa46 	bl	8003d20 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005896:	e012      	b.n	80058be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005898:	f7fe fa42 	bl	8003d20 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b0a      	cmp	r3, #10
 80058a4:	d90b      	bls.n	80058be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2203      	movs	r2, #3
 80058b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e11b      	b.n	8005af6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d0e5      	beq.n	8005898 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058dc:	f7fe fa20 	bl	8003d20 <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058e2:	e012      	b.n	800590a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058e4:	f7fe fa1c 	bl	8003d20 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b0a      	cmp	r3, #10
 80058f0:	d90b      	bls.n	800590a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2203      	movs	r2, #3
 8005902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e0f5      	b.n	8005af6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0e5      	beq.n	80058e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0202 	orr.w	r2, r2, #2
 8005926:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a74      	ldr	r2, [pc, #464]	; (8005b00 <HAL_FDCAN_Init+0x2ac>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d103      	bne.n	800593a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005932:	4a74      	ldr	r2, [pc, #464]	; (8005b04 <HAL_FDCAN_Init+0x2b0>)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	7c1b      	ldrb	r3, [r3, #16]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d108      	bne.n	8005954 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005950:	619a      	str	r2, [r3, #24]
 8005952:	e007      	b.n	8005964 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005962:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7c5b      	ldrb	r3, [r3, #17]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d108      	bne.n	800597e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800597a:	619a      	str	r2, [r3, #24]
 800597c:	e007      	b.n	800598e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800598c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7c9b      	ldrb	r3, [r3, #18]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d108      	bne.n	80059a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059a4:	619a      	str	r2, [r3, #24]
 80059a6:	e007      	b.n	80059b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80059dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0210 	bic.w	r2, r2, #16
 80059ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d108      	bne.n	8005a08 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699a      	ldr	r2, [r3, #24]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0204 	orr.w	r2, r2, #4
 8005a04:	619a      	str	r2, [r3, #24]
 8005a06:	e02c      	b.n	8005a62 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d028      	beq.n	8005a62 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d01c      	beq.n	8005a52 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a26:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0210 	orr.w	r2, r2, #16
 8005a36:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d110      	bne.n	8005a62 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0220 	orr.w	r2, r2, #32
 8005a4e:	619a      	str	r2, [r3, #24]
 8005a50:	e007      	b.n	8005a62 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0220 	orr.w	r2, r2, #32
 8005a60:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a72:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a7a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a8a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a8c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a96:	d115      	bne.n	8005ac4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005aa6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	3b01      	subs	r3, #1
 8005aae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ab0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ac0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ac2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fdac 	bl	8006638 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	4000a400 	.word	0x4000a400
 8005b04:	4000a500 	.word	0x4000a500

08005b08 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b18:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d002      	beq.n	8005b26 <HAL_FDCAN_ConfigFilter+0x1e>
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d13d      	bne.n	8005ba2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d119      	bne.n	8005b62 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005b3a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005b42:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e01d      	b.n	8005b9e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	075a      	lsls	r2, r3, #29
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	079a      	lsls	r2, r3, #30
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3304      	adds	r3, #4
 8005b96:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e006      	b.n	8005bb0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba6:	f043 0202 	orr.w	r2, r3, #2
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
  }
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d116      	bne.n	8005c04 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bde:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	431a      	orrs	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e006      	b.n	8005c12 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d108      	bne.n	8005c48 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	0219      	lsls	r1, r3, #8
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e006      	b.n	8005c56 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	f043 0204 	orr.w	r2, r3, #4
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d109      	bne.n	8005c8a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c84:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e006      	b.n	8005c98 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8e:	f043 0204 	orr.w	r2, r3, #4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d110      	bne.n	8005cda <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e006      	b.n	8005ce8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	f043 0204 	orr.w	r2, r3, #4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
  }
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d156      	bne.n	8005dba <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d1c:	e011      	b.n	8005d42 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b0a      	cmp	r3, #10
 8005d22:	d90b      	bls.n	8005d3c <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d28:	f043 0201 	orr.w	r2, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2203      	movs	r2, #3
 8005d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e045      	b.n	8005dc8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0e6      	beq.n	8005d1e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0210 	bic.w	r2, r2, #16
 8005d62:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d64:	e011      	b.n	8005d8a <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b0a      	cmp	r3, #10
 8005d6a:	d90b      	bls.n	8005d84 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d70:	f043 0201 	orr.w	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e021      	b.n	8005dc8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d0e6      	beq.n	8005d66 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0202 	orr.w	r2, r2, #2
 8005da6:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e006      	b.n	8005dc8 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbe:	f043 0208 	orr.w	r2, r3, #8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d12c      	bne.n	8005e46 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e023      	b.n	8005e54 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005e14:	0c1b      	lsrs	r3, r3, #16
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fc6a 	bl	80066fc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	fa01 f202 	lsl.w	r2, r1, r2
 8005e34:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005e38:	2201      	movs	r2, #1
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	409a      	lsls	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e006      	b.n	8005e54 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
  }
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b08b      	sub	sp, #44	; 0x2c
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e74:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005e76:	7efb      	ldrb	r3, [r7, #27]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	f040 80e8 	bne.w	800604e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d137      	bne.n	8005ef4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0db      	b.n	800605c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eac:	0e1b      	lsrs	r3, r3, #24
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10a      	bne.n	8005ecc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ebe:	0a5b      	lsrs	r3, r3, #9
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	440b      	add	r3, r1
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	e036      	b.n	8005f62 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d107      	bne.n	8005f14 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0a3      	b.n	800605c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1c:	0e1b      	lsrs	r3, r3, #24
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10a      	bne.n	8005f3c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	440b      	add	r3, r1
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d107      	bne.n	8005f86 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	0c9b      	lsrs	r3, r3, #18
 8005f7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e005      	b.n	8005f92 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	3304      	adds	r3, #4
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	0c1b      	lsrs	r3, r3, #16
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	0e1b      	lsrs	r3, r3, #24
 8005fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	0fda      	lsrs	r2, r3, #31
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006002:	2300      	movs	r3, #0
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	e00a      	b.n	800601e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	441a      	add	r2, r3
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	440b      	add	r3, r1
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	3301      	adds	r3, #1
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	4a11      	ldr	r2, [pc, #68]	; (8006068 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006024:	5cd3      	ldrb	r3, [r2, r3]
 8006026:	461a      	mov	r2, r3
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	4293      	cmp	r3, r2
 800602c:	d3ec      	bcc.n	8006008 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d105      	bne.n	8006040 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800603e:	e004      	b.n	800604a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e006      	b.n	800605c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006052:	f043 0208 	orr.w	r2, r3, #8
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
  }
}
 800605c:	4618      	mov	r0, r3
 800605e:	372c      	adds	r7, #44	; 0x2c
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	0801fd80 	.word	0x0801fd80

0800606c <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0207 	and.w	r2, r3, #7
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 0207 	and.w	r2, r3, #7
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0218 	and.w	r2, r3, #24
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	f003 0201 	and.w	r2, r3, #1
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	f003 0201 	and.w	r2, r3, #1
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	09db      	lsrs	r3, r3, #7
 80060ba:	f003 0201 	and.w	r2, r3, #1
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	0adb      	lsrs	r3, r3, #11
 80060c6:	f003 0201 	and.w	r2, r3, #1
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	0b1b      	lsrs	r3, r3, #12
 80060d2:	f003 0201 	and.w	r2, r3, #1
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	0b5b      	lsrs	r3, r3, #13
 80060de:	f003 0201 	and.w	r2, r3, #1
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	0b9b      	lsrs	r3, r3, #14
 80060ea:	f003 0201 	and.w	r2, r3, #1
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	0bdb      	lsrs	r3, r3, #15
 8006136:	f003 0201 	and.w	r2, r3, #1
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	b2da      	uxtb	r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800616c:	68fb      	ldr	r3, [r7, #12]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800618c:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d003      	beq.n	800619c <HAL_FDCAN_ActivateNotification+0x22>
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	2b02      	cmp	r3, #2
 8006198:	f040 80c8 	bne.w	800632c <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a2:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d03b      	beq.n	8006230 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d031      	beq.n	8006230 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d027      	beq.n	8006230 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01d      	beq.n	8006230 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	d013      	beq.n	8006230 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d107      	bne.n	8006240 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d13b      	bne.n	80062cc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d131      	bne.n	80062cc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d127      	bne.n	80062cc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d11d      	bne.n	80062cc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d113      	bne.n	80062cc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0202 	orr.w	r2, r2, #2
 80062da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	430a      	orrs	r2, r1
 8006314:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	430a      	orrs	r2, r1
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e006      	b.n	800633a <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	f043 0202 	orr.w	r2, r3, #2
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b08c      	sub	sp, #48	; 0x30
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006354:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006362:	4013      	ands	r3, r2
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637a:	4013      	ands	r3, r2
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006392:	4013      	ands	r3, r2
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639c:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80063a0:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	6a3a      	ldr	r2, [r7, #32]
 80063aa:	4013      	ands	r3, r2
 80063ac:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80063b8:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	4013      	ands	r3, r2
 80063c4:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063cc:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d4:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d006      	beq.n	80063f8 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2240      	movs	r2, #64	; 0x40
 80063f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f916 	bl	8006624 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d019      	beq.n	8006436 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d014      	beq.n	8006436 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006414:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4013      	ands	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800642c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800642e:	6939      	ldr	r1, [r7, #16]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f8d8 	bl	80065e6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006442:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f8a2 	bl	8006590 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006458:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800645a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7fc fbc1 	bl	8002be4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f897 	bl	80065a6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006494:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f890 	bl	80065bc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d018      	beq.n	80064d8 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d013      	beq.n	80064d8 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80064b8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2280      	movs	r2, #128	; 0x80
 80064ce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80064d0:	68f9      	ldr	r1, [r7, #12]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f87c 	bl	80065d0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00c      	beq.n	80064fc <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064f4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f880 	bl	80065fc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d007      	beq.n	8006520 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006518:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f878 	bl	8006610 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00f      	beq.n	800654a <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800653c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006558:	69f9      	ldr	r1, [r7, #28]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fc fafa 	bl	8002b54 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fc faf6 	bl	8002b74 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006588:	bf00      	nop
 800658a:	3730      	adds	r7, #48	; 0x30
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006640:	4b2c      	ldr	r3, [pc, #176]	; (80066f4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8006642:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d103      	bne.n	8006656 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006654:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006664:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	041a      	lsls	r2, r3, #16
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	061a      	lsls	r2, r3, #24
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	e005      	b.n	80066d8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3304      	adds	r3, #4
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d3f3      	bcc.n	80066cc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	4000ac00 	.word	0x4000ac00
 80066f8:	4000a800 	.word	0x4000a800

080066fc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b089      	sub	sp, #36	; 0x24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800671a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006722:	4313      	orrs	r3, r2
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	e00a      	b.n	800673e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006730:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006736:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800673c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006748:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800674e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006754:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	4413      	add	r3, r2
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	440b      	add	r3, r1
 8006770:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	3304      	adds	r3, #4
 800677c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	3304      	adds	r3, #4
 8006788:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e020      	b.n	80067d2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	3303      	adds	r3, #3
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	4413      	add	r3, r2
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3302      	adds	r3, #2
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	440b      	add	r3, r1
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80067a8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	3301      	adds	r3, #1
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	440b      	add	r3, r1
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80067b6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	440a      	add	r2, r1
 80067be:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80067c0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	3304      	adds	r3, #4
 80067ca:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3304      	adds	r3, #4
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	4a06      	ldr	r2, [pc, #24]	; (80067f0 <FDCAN_CopyMessageToRAM+0xf4>)
 80067d8:	5cd3      	ldrb	r3, [r2, r3]
 80067da:	461a      	mov	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d3d6      	bcc.n	8006790 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	3724      	adds	r7, #36	; 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	0801fd80 	.word	0x0801fd80

080067f4 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006800:	4b32      	ldr	r3, [pc, #200]	; (80068cc <HAL_FLASH_Program+0xd8>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_FLASH_Program+0x18>
 8006808:	2302      	movs	r3, #2
 800680a:	e05a      	b.n	80068c2 <HAL_FLASH_Program+0xce>
 800680c:	4b2f      	ldr	r3, [pc, #188]	; (80068cc <HAL_FLASH_Program+0xd8>)
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006812:	4b2e      	ldr	r3, [pc, #184]	; (80068cc <HAL_FLASH_Program+0xd8>)
 8006814:	2200      	movs	r2, #0
 8006816:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800681c:	f000 f8a4 	bl	8006968 <FLASH_WaitForLastOperation>
 8006820:	4603      	mov	r3, r0
 8006822:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8006824:	7ffb      	ldrb	r3, [r7, #31]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d147      	bne.n	80068ba <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 800682a:	4a28      	ldr	r2, [pc, #160]	; (80068cc <HAL_FLASH_Program+0xd8>)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006830:	4b27      	ldr	r3, [pc, #156]	; (80068d0 <HAL_FLASH_Program+0xdc>)
 8006832:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800683a:	2b02      	cmp	r3, #2
 800683c:	d104      	bne.n	8006848 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	68b8      	ldr	r0, [r7, #8]
 8006842:	f000 f8df 	bl	8006a04 <FLASH_Program_QuadWord>
 8006846:	e01b      	b.n	8006880 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_FLASH_Program+0xe0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <HAL_FLASH_Program+0x64>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_FLASH_Program+0xe4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d104      	bne.n	8006862 <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	68b8      	ldr	r0, [r7, #8]
 800685c:	f000 f90e 	bl	8006a7c <FLASH_Program_QuadWord_OBK>
 8006860:	e00e      	b.n	8006880 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006868:	4a1c      	ldr	r2, [pc, #112]	; (80068dc <HAL_FLASH_Program+0xe8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d104      	bne.n	8006878 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	68b8      	ldr	r0, [r7, #8]
 8006872:	f000 f94f 	bl	8006b14 <FLASH_Program_HalfWord>
 8006876:	e003      	b.n	8006880 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f000 f94a 	bl	8006b14 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006884:	f000 f870 	bl	8006968 <FLASH_WaitForLastOperation>
 8006888:	4603      	mov	r3, r0
 800688a:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8006896:	f023 0304 	bic.w	r3, r3, #4
 800689a:	43db      	mvns	r3, r3
 800689c:	401a      	ands	r2, r3
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <HAL_FLASH_Program+0xe4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d107      	bne.n	80068ba <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <HAL_FLASH_Program+0xec>)
 80068ac:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 0204 	bic.w	r2, r3, #4
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068ba:	4b04      	ldr	r3, [pc, #16]	; (80068cc <HAL_FLASH_Program+0xd8>)
 80068bc:	2200      	movs	r2, #0
 80068be:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80068c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000048 	.word	0x20000048
 80068d0:	40022028 	.word	0x40022028
 80068d4:	10000002 	.word	0x10000002
 80068d8:	10000006 	.word	0x10000006
 80068dc:	40000002 	.word	0x40000002
 80068e0:	40022040 	.word	0x40022040

080068e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <HAL_FLASH_Unlock+0x40>)
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00d      	beq.n	8006916 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80068fa:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <HAL_FLASH_Unlock+0x40>)
 80068fc:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <HAL_FLASH_Unlock+0x44>)
 80068fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8006900:	4b08      	ldr	r3, [pc, #32]	; (8006924 <HAL_FLASH_Unlock+0x40>)
 8006902:	4a0a      	ldr	r2, [pc, #40]	; (800692c <HAL_FLASH_Unlock+0x48>)
 8006904:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006906:	4b07      	ldr	r3, [pc, #28]	; (8006924 <HAL_FLASH_Unlock+0x40>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006916:	79fb      	ldrb	r3, [r7, #7]
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40022000 	.word	0x40022000
 8006928:	45670123 	.word	0x45670123
 800692c:	cdef89ab 	.word	0xcdef89ab

08006930 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <HAL_FLASH_Lock+0x34>)
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <HAL_FLASH_Lock+0x34>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <HAL_FLASH_Lock+0x34>)
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006956:	79fb      	ldrb	r3, [r7, #7]
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	40022000 	.word	0x40022000

08006968 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8006970:	f7fd f9d6 	bl	8003d20 <HAL_GetTick>
 8006974:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8006976:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <FLASH_WaitForLastOperation+0x90>)
 8006978:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800697a:	e010      	b.n	800699e <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d00c      	beq.n	800699e <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006984:	f7fd f9cc 	bl	8003d20 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d302      	bcc.n	800699a <FLASH_WaitForLastOperation+0x32>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e027      	b.n	80069ee <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 030b 	and.w	r3, r3, #11
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e8      	bne.n	800697c <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 80069aa:	4b14      	ldr	r3, [pc, #80]	; (80069fc <FLASH_WaitForLastOperation+0x94>)
 80069ac:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 80069b6:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00c      	beq.n	80069d8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80069be:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <FLASH_WaitForLastOperation+0x98>)
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	4a0e      	ldr	r2, [pc, #56]	; (8006a00 <FLASH_WaitForLastOperation+0x98>)
 80069c8:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e00a      	b.n	80069ee <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069ea:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40022020 	.word	0x40022020
 80069fc:	40022030 	.word	0x40022030
 8006a00:	20000048 	.word	0x20000048

08006a04 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b08b      	sub	sp, #44	; 0x2c
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006a0e:	2304      	movs	r3, #4
 8006a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006a1c:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <FLASH_Program_QuadWord+0x74>)
 8006a1e:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f043 0202 	orr.w	r2, r3, #2
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a30:	613b      	str	r3, [r7, #16]
  return(result);
 8006a32:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006a34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a36:	b672      	cpsid	i
}
 8006a38:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3304      	adds	r3, #4
 8006a46:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	61fb      	str	r3, [r7, #28]
    index--;
 8006a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a52:	3b01      	subs	r3, #1
 8006a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ec      	bne.n	8006a3a <FLASH_Program_QuadWord+0x36>
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f383 8810 	msr	PRIMASK, r3
}
 8006a6a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006a6c:	bf00      	nop
 8006a6e:	372c      	adds	r7, #44	; 0x2c
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40022028 	.word	0x40022028

08006a7c <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b08b      	sub	sp, #44	; 0x2c
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006a86:	2304      	movs	r3, #4
 8006a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006a94:	4b1c      	ldr	r3, [pc, #112]	; (8006b08 <FLASH_Program_QuadWord_OBK+0x8c>)
 8006a96:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006a98:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <FLASH_Program_QuadWord_OBK+0x90>)
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f043 0202 	orr.w	r2, r3, #2
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <FLASH_Program_QuadWord_OBK+0x94>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006aba:	f3ef 8310 	mrs	r3, PRIMASK
 8006abe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ac0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ac4:	b672      	cpsid	i
}
 8006ac6:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	61fb      	str	r3, [r7, #28]
    index--;
 8006adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1ec      	bne.n	8006ac8 <FLASH_Program_QuadWord_OBK+0x4c>
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f383 8810 	msr	PRIMASK, r3
}
 8006af8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006afa:	bf00      	nop
 8006afc:	372c      	adds	r7, #44	; 0x2c
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40022028 	.word	0x40022028
 8006b0c:	40022040 	.word	0x40022040
 8006b10:	20000048 	.word	0x20000048

08006b14 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <FLASH_Program_HalfWord+0x30>)
 8006b20:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f043 0202 	orr.w	r2, r3, #2
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8812      	ldrh	r2, [r2, #0]
 8006b34:	b292      	uxth	r2, r2
 8006b36:	801a      	strh	r2, [r3, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40022028 	.word	0x40022028

08006b48 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b52:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <HAL_FLASHEx_Erase+0xf4>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_FLASHEx_Erase+0x16>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e06a      	b.n	8006c34 <HAL_FLASHEx_Erase+0xec>
 8006b5e:	4b37      	ldr	r3, [pc, #220]	; (8006c3c <HAL_FLASHEx_Erase+0xf4>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b64:	4b35      	ldr	r3, [pc, #212]	; (8006c3c <HAL_FLASHEx_Erase+0xf4>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b6e:	f7ff fefb 	bl	8006968 <FLASH_WaitForLastOperation>
 8006b72:	4603      	mov	r3, r0
 8006b74:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d157      	bne.n	8006c2c <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2e      	ldr	r2, [pc, #184]	; (8006c3c <HAL_FLASHEx_Erase+0xf4>)
 8006b82:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006b84:	4b2e      	ldr	r3, [pc, #184]	; (8006c40 <HAL_FLASHEx_Erase+0xf8>)
 8006b86:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b90:	f248 0208 	movw	r2, #32776	; 0x8008
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10b      	bne.n	8006bb0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f853 	bl	8006c48 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ba6:	f7ff fedf 	bl	8006968 <FLASH_WaitForLastOperation>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75fb      	strb	r3, [r7, #23]
 8006bae:	e033      	b.n	8006c18 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <HAL_FLASHEx_Erase+0xfc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d108      	bne.n	8006bcc <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8006bba:	f000 f8b5 	bl	8006d28 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bc2:	f7ff fed1 	bl	8006968 <FLASH_WaitForLastOperation>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	75fb      	strb	r3, [r7, #23]
 8006bca:	e025      	b.n	8006c18 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	e015      	b.n	8006c08 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6938      	ldr	r0, [r7, #16]
 8006be4:	f000 f868 	bl	8006cb8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bec:	f7ff febc 	bl	8006968 <FLASH_WaitForLastOperation>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	601a      	str	r2, [r3, #0]
          break;
 8006c00:	e00a      	b.n	8006c18 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3301      	adds	r3, #1
 8006c06:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d3e1      	bcc.n	8006bdc <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c24:	43db      	mvns	r3, r3
 8006c26:	401a      	ands	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c2c:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <HAL_FLASHEx_Erase+0xf4>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]

  return status;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000048 	.word	0x20000048
 8006c40:	40022028 	.word	0x40022028
 8006c44:	80000008 	.word	0x80000008

08006c48 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006c50:	4b18      	ldr	r3, [pc, #96]	; (8006cb4 <FLASH_MassErase+0x6c>)
 8006c52:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d108      	bne.n	8006c70 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c66:	f043 0320 	orr.w	r3, r3, #32
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8006c6e:	e01b      	b.n	8006ca8 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006c86:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	6013      	str	r3, [r2, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40022028 	.word	0x40022028

08006cb8 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006cc2:	4b18      	ldr	r3, [pc, #96]	; (8006d24 <FLASH_Erase_Sector+0x6c>)
 8006cc4:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d011      	beq.n	8006cf4 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd8:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	019b      	lsls	r3, r3, #6
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8006cf2:	e010      	b.n	8006d16 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	019b      	lsls	r3, r3, #6
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d0e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	6013      	str	r3, [r2, #0]
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40022028 	.word	0x40022028

08006d28 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006d2e:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <FLASH_OBKErase+0x24>)
 8006d30:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f043 0208 	orr.w	r2, r3, #8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40022040 	.word	0x40022040

08006d50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006d5e:	e136      	b.n	8006fce <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	2101      	movs	r1, #1
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8128 	beq.w	8006fc8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d003      	beq.n	8006d88 <HAL_GPIO_Init+0x38>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b12      	cmp	r3, #18
 8006d86:	d125      	bne.n	8006dd4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	08da      	lsrs	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3208      	adds	r2, #8
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	220f      	movs	r2, #15
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	43db      	mvns	r3, r3
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4013      	ands	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	08da      	lsrs	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3208      	adds	r2, #8
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	2203      	movs	r2, #3
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	43db      	mvns	r3, r3
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4013      	ands	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0203 	and.w	r2, r3, #3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d00b      	beq.n	8006e28 <HAL_GPIO_Init+0xd8>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d007      	beq.n	8006e28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e1c:	2b11      	cmp	r3, #17
 8006e1e:	d003      	beq.n	8006e28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b12      	cmp	r3, #18
 8006e26:	d130      	bne.n	8006e8a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	2203      	movs	r2, #3
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e5e:	2201      	movs	r2, #1
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	43db      	mvns	r3, r3
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	091b      	lsrs	r3, r3, #4
 8006e74:	f003 0201 	and.w	r2, r3, #1
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d017      	beq.n	8006ec2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d07c      	beq.n	8006fc8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006ece:	4a47      	ldr	r2, [pc, #284]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	089b      	lsrs	r3, r3, #2
 8006ed4:	3318      	adds	r3, #24
 8006ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eda:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	220f      	movs	r2, #15
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	0a9a      	lsrs	r2, r3, #10
 8006ef6:	4b3e      	ldr	r3, [pc, #248]	; (8006ff0 <HAL_GPIO_Init+0x2a0>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	f002 0203 	and.w	r2, r2, #3
 8006f00:	00d2      	lsls	r2, r2, #3
 8006f02:	4093      	lsls	r3, r2
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006f0a:	4938      	ldr	r1, [pc, #224]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	089b      	lsrs	r3, r3, #2
 8006f10:	3318      	adds	r3, #24
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006f18:	4b34      	ldr	r3, [pc, #208]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4013      	ands	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8006f3c:	4a2b      	ldr	r2, [pc, #172]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006f42:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8006f66:	4a21      	ldr	r2, [pc, #132]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006f6c:	4b1f      	ldr	r3, [pc, #124]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f72:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	43db      	mvns	r3, r3
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8006f9a:	4b14      	ldr	r3, [pc, #80]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <HAL_GPIO_Init+0x29c>)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f aec1 	bne.w	8006d60 <HAL_GPIO_Init+0x10>
  }
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	44022000 	.word	0x44022000
 8006ff0:	002f7f7f 	.word	0x002f7f7f

08006ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	807b      	strh	r3, [r7, #2]
 8007000:	4613      	mov	r3, r2
 8007002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007004:	787b      	ldrb	r3, [r7, #1]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007010:	e002      	b.n	8007018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007012:	887a      	ldrh	r2, [r7, #2]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007036:	887a      	ldrh	r2, [r7, #2]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4013      	ands	r3, r2
 800703c:	041a      	lsls	r2, r3, #16
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	43d9      	mvns	r1, r3
 8007042:	887b      	ldrh	r3, [r7, #2]
 8007044:	400b      	ands	r3, r1
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	619a      	str	r2, [r3, #24]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007062:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d006      	beq.n	800707c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800706e:	4a0c      	ldr	r2, [pc, #48]	; (80070a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007074:	88fb      	ldrh	r3, [r7, #6]
 8007076:	4618      	mov	r0, r3
 8007078:	f7f9 fb1a 	bl	80006b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800707c:	4b08      	ldr	r3, [pc, #32]	; (80070a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d006      	beq.n	8007096 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007088:	4a05      	ldr	r2, [pc, #20]	; (80070a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	4618      	mov	r0, r3
 8007092:	f000 f807 	bl	80070a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	44022000 	.word	0x44022000

080070a4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_ICACHE_Enable+0x1c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <HAL_ICACHE_Enable+0x1c>)
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40030400 	.word	0x40030400

080070dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f000 bc28 	b.w	8007940 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070f0:	4b94      	ldr	r3, [pc, #592]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	f003 0318 	and.w	r3, r3, #24
 80070f8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80070fa:	4b92      	ldr	r3, [pc, #584]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	d05b      	beq.n	80071c8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	2b08      	cmp	r3, #8
 8007114:	d005      	beq.n	8007122 <HAL_RCC_OscConfig+0x46>
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b18      	cmp	r3, #24
 800711a:	d114      	bne.n	8007146 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d111      	bne.n	8007146 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	f000 bc08 	b.w	8007940 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007130:	4b84      	ldr	r3, [pc, #528]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	4981      	ldr	r1, [pc, #516]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007140:	4313      	orrs	r3, r2
 8007142:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007144:	e040      	b.n	80071c8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d023      	beq.n	8007196 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800714e:	4b7d      	ldr	r3, [pc, #500]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a7c      	ldr	r2, [pc, #496]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715a:	f7fc fde1 	bl	8003d20 <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007160:	e008      	b.n	8007174 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007162:	f7fc fddd 	bl	8003d20 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e3e5      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007174:	4b73      	ldr	r3, [pc, #460]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f0      	beq.n	8007162 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007180:	4b70      	ldr	r3, [pc, #448]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	041b      	lsls	r3, r3, #16
 800718e:	496d      	ldr	r1, [pc, #436]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007190:	4313      	orrs	r3, r2
 8007192:	618b      	str	r3, [r1, #24]
 8007194:	e018      	b.n	80071c8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007196:	4b6b      	ldr	r3, [pc, #428]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a6a      	ldr	r2, [pc, #424]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 800719c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fc fdbd 	bl	8003d20 <HAL_GetTick>
 80071a6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80071aa:	f7fc fdb9 	bl	8003d20 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e3c1      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80071bc:	4b61      	ldr	r3, [pc, #388]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f0      	bne.n	80071aa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a0 	beq.w	8007316 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d005      	beq.n	80071e8 <HAL_RCC_OscConfig+0x10c>
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b18      	cmp	r3, #24
 80071e0:	d109      	bne.n	80071f6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d106      	bne.n	80071f6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8092 	bne.w	8007316 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e3a4      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fe:	d106      	bne.n	800720e <HAL_RCC_OscConfig+0x132>
 8007200:	4b50      	ldr	r3, [pc, #320]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a4f      	ldr	r2, [pc, #316]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e058      	b.n	80072c0 <HAL_RCC_OscConfig+0x1e4>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d112      	bne.n	800723c <HAL_RCC_OscConfig+0x160>
 8007216:	4b4b      	ldr	r3, [pc, #300]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a4a      	ldr	r2, [pc, #296]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 800721c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	4b48      	ldr	r3, [pc, #288]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a47      	ldr	r2, [pc, #284]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007228:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	4b45      	ldr	r3, [pc, #276]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a44      	ldr	r2, [pc, #272]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	e041      	b.n	80072c0 <HAL_RCC_OscConfig+0x1e4>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007244:	d112      	bne.n	800726c <HAL_RCC_OscConfig+0x190>
 8007246:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a3e      	ldr	r2, [pc, #248]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 800724c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	4b3c      	ldr	r3, [pc, #240]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a3b      	ldr	r2, [pc, #236]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007258:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	4b39      	ldr	r3, [pc, #228]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a38      	ldr	r2, [pc, #224]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	e029      	b.n	80072c0 <HAL_RCC_OscConfig+0x1e4>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007274:	d112      	bne.n	800729c <HAL_RCC_OscConfig+0x1c0>
 8007276:	4b33      	ldr	r3, [pc, #204]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a32      	ldr	r2, [pc, #200]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 800727c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	4b30      	ldr	r3, [pc, #192]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a2f      	ldr	r2, [pc, #188]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	4b2d      	ldr	r3, [pc, #180]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a2c      	ldr	r2, [pc, #176]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 8007294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	e011      	b.n	80072c0 <HAL_RCC_OscConfig+0x1e4>
 800729c:	4b29      	ldr	r3, [pc, #164]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a28      	ldr	r2, [pc, #160]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80072a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	4b26      	ldr	r3, [pc, #152]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a25      	ldr	r2, [pc, #148]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80072ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	4b23      	ldr	r3, [pc, #140]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a22      	ldr	r2, [pc, #136]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80072ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d013      	beq.n	80072f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fc fd2a 	bl	8003d20 <HAL_GetTick>
 80072cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80072d0:	f7fc fd26 	bl	8003d20 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b64      	cmp	r3, #100	; 0x64
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e32e      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072e2:	4b18      	ldr	r3, [pc, #96]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x1f4>
 80072ee:	e012      	b.n	8007316 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7fc fd16 	bl	8003d20 <HAL_GetTick>
 80072f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80072f8:	f7fc fd12 	bl	8003d20 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b64      	cmp	r3, #100	; 0x64
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e31a      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800730a:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <HAL_RCC_OscConfig+0x268>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f0      	bne.n	80072f8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 809a 	beq.w	8007458 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <HAL_RCC_OscConfig+0x25a>
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2b18      	cmp	r3, #24
 800732e:	d149      	bne.n	80073c4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d146      	bne.n	80073c4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e2fe      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
 8007342:	bf00      	nop
 8007344:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11c      	bne.n	8007388 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800734e:	4b9a      	ldr	r3, [pc, #616]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0218 	and.w	r2, r3, #24
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	429a      	cmp	r2, r3
 800735c:	d014      	beq.n	8007388 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800735e:	4b96      	ldr	r3, [pc, #600]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f023 0218 	bic.w	r2, r3, #24
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	4993      	ldr	r1, [pc, #588]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800736c:	4313      	orrs	r3, r2
 800736e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8007370:	f000 fdd0 	bl	8007f14 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007374:	4b91      	ldr	r3, [pc, #580]	; (80075bc <HAL_RCC_OscConfig+0x4e0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7f9 fd59 	bl	8000e30 <HAL_InitTick>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e2db      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fc fcca 	bl	8003d20 <HAL_GetTick>
 800738c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007390:	f7fc fcc6 	bl	8003d20 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e2ce      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073a2:	4b85      	ldr	r3, [pc, #532]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80073ae:	4b82      	ldr	r3, [pc, #520]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	497e      	ldr	r1, [pc, #504]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80073c2:	e049      	b.n	8007458 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d02c      	beq.n	8007426 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80073cc:	4b7a      	ldr	r3, [pc, #488]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f023 0218 	bic.w	r2, r3, #24
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	4977      	ldr	r1, [pc, #476]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80073de:	4b76      	ldr	r3, [pc, #472]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a75      	ldr	r2, [pc, #468]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80073e4:	f043 0301 	orr.w	r3, r3, #1
 80073e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ea:	f7fc fc99 	bl	8003d20 <HAL_GetTick>
 80073ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80073f2:	f7fc fc95 	bl	8003d20 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e29d      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007404:	4b6c      	ldr	r3, [pc, #432]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0f0      	beq.n	80073f2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007410:	4b69      	ldr	r3, [pc, #420]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	041b      	lsls	r3, r3, #16
 800741e:	4966      	ldr	r1, [pc, #408]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007420:	4313      	orrs	r3, r2
 8007422:	610b      	str	r3, [r1, #16]
 8007424:	e018      	b.n	8007458 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007426:	4b64      	ldr	r3, [pc, #400]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a63      	ldr	r2, [pc, #396]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800742c:	f023 0301 	bic.w	r3, r3, #1
 8007430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007432:	f7fc fc75 	bl	8003d20 <HAL_GetTick>
 8007436:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007438:	e008      	b.n	800744c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800743a:	f7fc fc71 	bl	8003d20 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e279      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800744c:	4b5a      	ldr	r3, [pc, #360]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f0      	bne.n	800743a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	2b00      	cmp	r3, #0
 8007462:	d03c      	beq.n	80074de <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01c      	beq.n	80074a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800746c:	4b52      	ldr	r3, [pc, #328]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800746e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007472:	4a51      	ldr	r2, [pc, #324]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007478:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747c:	f7fc fc50 	bl	8003d20 <HAL_GetTick>
 8007480:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007484:	f7fc fc4c 	bl	8003d20 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e254      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007496:	4b48      	ldr	r3, [pc, #288]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800749c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0ef      	beq.n	8007484 <HAL_RCC_OscConfig+0x3a8>
 80074a4:	e01b      	b.n	80074de <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074a6:	4b44      	ldr	r3, [pc, #272]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80074a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074ac:	4a42      	ldr	r2, [pc, #264]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80074ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b6:	f7fc fc33 	bl	8003d20 <HAL_GetTick>
 80074ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074bc:	e008      	b.n	80074d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80074be:	f7fc fc2f 	bl	8003d20 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e237      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074d0:	4b39      	ldr	r3, [pc, #228]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80074d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1ef      	bne.n	80074be <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80d2 	beq.w	8007690 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80074ec:	4b34      	ldr	r3, [pc, #208]	; (80075c0 <HAL_RCC_OscConfig+0x4e4>)
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d118      	bne.n	800752a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80074f8:	4b31      	ldr	r3, [pc, #196]	; (80075c0 <HAL_RCC_OscConfig+0x4e4>)
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	4a30      	ldr	r2, [pc, #192]	; (80075c0 <HAL_RCC_OscConfig+0x4e4>)
 80074fe:	f043 0301 	orr.w	r3, r3, #1
 8007502:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007504:	f7fc fc0c 	bl	8003d20 <HAL_GetTick>
 8007508:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800750c:	f7fc fc08 	bl	8003d20 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e210      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800751e:	4b28      	ldr	r3, [pc, #160]	; (80075c0 <HAL_RCC_OscConfig+0x4e4>)
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0f0      	beq.n	800750c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d108      	bne.n	8007544 <HAL_RCC_OscConfig+0x468>
 8007532:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007538:	4a1f      	ldr	r2, [pc, #124]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007542:	e074      	b.n	800762e <HAL_RCC_OscConfig+0x552>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d118      	bne.n	800757e <HAL_RCC_OscConfig+0x4a2>
 800754c:	4b1a      	ldr	r3, [pc, #104]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800754e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007552:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800755c:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800755e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007562:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007568:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800756c:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800756e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007572:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007574:	f023 0304 	bic.w	r3, r3, #4
 8007578:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800757c:	e057      	b.n	800762e <HAL_RCC_OscConfig+0x552>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b05      	cmp	r3, #5
 8007584:	d11e      	bne.n	80075c4 <HAL_RCC_OscConfig+0x4e8>
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800758c:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800758e:	f043 0304 	orr.w	r3, r3, #4
 8007592:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007596:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 8007598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800759c:	4a06      	ldr	r2, [pc, #24]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 800759e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075a6:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80075a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ac:	4a02      	ldr	r2, [pc, #8]	; (80075b8 <HAL_RCC_OscConfig+0x4dc>)
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075b6:	e03a      	b.n	800762e <HAL_RCC_OscConfig+0x552>
 80075b8:	44020c00 	.word	0x44020c00
 80075bc:	20000040 	.word	0x20000040
 80075c0:	44020800 	.word	0x44020800
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b85      	cmp	r3, #133	; 0x85
 80075ca:	d118      	bne.n	80075fe <HAL_RCC_OscConfig+0x522>
 80075cc:	4ba2      	ldr	r3, [pc, #648]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80075ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d2:	4aa1      	ldr	r2, [pc, #644]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80075d4:	f043 0304 	orr.w	r3, r3, #4
 80075d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075dc:	4b9e      	ldr	r3, [pc, #632]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80075de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e2:	4a9d      	ldr	r2, [pc, #628]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075ec:	4b9a      	ldr	r3, [pc, #616]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80075ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f2:	4a99      	ldr	r2, [pc, #612]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075fc:	e017      	b.n	800762e <HAL_RCC_OscConfig+0x552>
 80075fe:	4b96      	ldr	r3, [pc, #600]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007604:	4a94      	ldr	r2, [pc, #592]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800760e:	4b92      	ldr	r3, [pc, #584]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007614:	4a90      	ldr	r2, [pc, #576]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007616:	f023 0304 	bic.w	r3, r3, #4
 800761a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800761e:	4b8e      	ldr	r3, [pc, #568]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007624:	4a8c      	ldr	r2, [pc, #560]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d016      	beq.n	8007664 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007636:	f7fc fb73 	bl	8003d20 <HAL_GetTick>
 800763a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800763c:	e00a      	b.n	8007654 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800763e:	f7fc fb6f 	bl	8003d20 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	f241 3288 	movw	r2, #5000	; 0x1388
 800764c:	4293      	cmp	r3, r2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e175      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007654:	4b80      	ldr	r3, [pc, #512]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0ed      	beq.n	800763e <HAL_RCC_OscConfig+0x562>
 8007662:	e015      	b.n	8007690 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007664:	f7fc fb5c 	bl	8003d20 <HAL_GetTick>
 8007668:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800766a:	e00a      	b.n	8007682 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766c:	f7fc fb58 	bl	8003d20 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f241 3288 	movw	r2, #5000	; 0x1388
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e15e      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007682:	4b75      	ldr	r3, [pc, #468]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1ed      	bne.n	800766c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d036      	beq.n	800770a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d019      	beq.n	80076d8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076a4:	4b6c      	ldr	r3, [pc, #432]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a6b      	ldr	r2, [pc, #428]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80076aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b0:	f7fc fb36 	bl	8003d20 <HAL_GetTick>
 80076b4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80076b8:	f7fc fb32 	bl	8003d20 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e13a      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076ca:	4b63      	ldr	r3, [pc, #396]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f0      	beq.n	80076b8 <HAL_RCC_OscConfig+0x5dc>
 80076d6:	e018      	b.n	800770a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076d8:	4b5f      	ldr	r3, [pc, #380]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a5e      	ldr	r2, [pc, #376]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80076de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e4:	f7fc fb1c 	bl	8003d20 <HAL_GetTick>
 80076e8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80076ec:	f7fc fb18 	bl	8003d20 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e120      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076fe:	4b56      	ldr	r3, [pc, #344]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 8115 	beq.w	800793e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b18      	cmp	r3, #24
 8007718:	f000 80af 	beq.w	800787a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	2b02      	cmp	r3, #2
 8007722:	f040 8086 	bne.w	8007832 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007726:	4b4c      	ldr	r3, [pc, #304]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a4b      	ldr	r2, [pc, #300]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 800772c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007732:	f7fc faf5 	bl	8003d20 <HAL_GetTick>
 8007736:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007738:	e008      	b.n	800774c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800773a:	f7fc faf1 	bl	8003d20 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e0f9      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800774c:	4b42      	ldr	r3, [pc, #264]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f0      	bne.n	800773a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007758:	4b3f      	ldr	r3, [pc, #252]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007760:	f023 0303 	bic.w	r3, r3, #3
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800776c:	0212      	lsls	r2, r2, #8
 800776e:	430a      	orrs	r2, r1
 8007770:	4939      	ldr	r1, [pc, #228]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007772:	4313      	orrs	r3, r2
 8007774:	628b      	str	r3, [r1, #40]	; 0x28
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777a:	3b01      	subs	r3, #1
 800777c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	3b01      	subs	r3, #1
 8007786:	025b      	lsls	r3, r3, #9
 8007788:	b29b      	uxth	r3, r3
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007790:	3b01      	subs	r3, #1
 8007792:	041b      	lsls	r3, r3, #16
 8007794:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	3b01      	subs	r3, #1
 80077a0:	061b      	lsls	r3, r3, #24
 80077a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077a6:	492c      	ldr	r1, [pc, #176]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80077ac:	4b2a      	ldr	r3, [pc, #168]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	4a29      	ldr	r2, [pc, #164]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077b2:	f023 0310 	bic.w	r3, r3, #16
 80077b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077bc:	4a26      	ldr	r2, [pc, #152]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80077c2:	4b25      	ldr	r3, [pc, #148]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	4a24      	ldr	r2, [pc, #144]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077c8:	f043 0310 	orr.w	r3, r3, #16
 80077cc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80077ce:	4b22      	ldr	r3, [pc, #136]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	f023 020c 	bic.w	r2, r3, #12
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	491f      	ldr	r1, [pc, #124]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80077e0:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	f023 0220 	bic.w	r2, r3, #32
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ec:	491a      	ldr	r1, [pc, #104]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077f2:	4b19      	ldr	r3, [pc, #100]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	4a18      	ldr	r2, [pc, #96]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 80077f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077fc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80077fe:	4b16      	ldr	r3, [pc, #88]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a15      	ldr	r2, [pc, #84]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780a:	f7fc fa89 	bl	8003d20 <HAL_GetTick>
 800780e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007812:	f7fc fa85 	bl	8003d20 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e08d      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007824:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0f0      	beq.n	8007812 <HAL_RCC_OscConfig+0x736>
 8007830:	e085      	b.n	800793e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <HAL_RCC_OscConfig+0x77c>)
 8007838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800783c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fc fa6f 	bl	8003d20 <HAL_GetTick>
 8007842:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007844:	e00a      	b.n	800785c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007846:	f7fc fa6b 	bl	8003d20 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d903      	bls.n	800785c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e073      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
 8007858:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800785c:	4b3a      	ldr	r3, [pc, #232]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1ee      	bne.n	8007846 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007868:	4b37      	ldr	r3, [pc, #220]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	4a36      	ldr	r2, [pc, #216]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 800786e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007872:	f023 0303 	bic.w	r3, r3, #3
 8007876:	6293      	str	r3, [r2, #40]	; 0x28
 8007878:	e061      	b.n	800793e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800787a:	4b33      	ldr	r3, [pc, #204]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007880:	4b31      	ldr	r3, [pc, #196]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 8007882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007884:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	2b01      	cmp	r3, #1
 800788c:	d031      	beq.n	80078f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f003 0203 	and.w	r2, r3, #3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007898:	429a      	cmp	r2, r3
 800789a:	d12a      	bne.n	80078f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d122      	bne.n	80078f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d11a      	bne.n	80078f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	0a5b      	lsrs	r3, r3, #9
 80078c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d111      	bne.n	80078f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	0c1b      	lsrs	r3, r3, #16
 80078d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078da:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80078dc:	429a      	cmp	r2, r3
 80078de:	d108      	bne.n	80078f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	0e1b      	lsrs	r3, r3, #24
 80078e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d001      	beq.n	80078f6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e024      	b.n	8007940 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80078f6:	4b14      	ldr	r3, [pc, #80]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 80078f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fa:	08db      	lsrs	r3, r3, #3
 80078fc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007904:	429a      	cmp	r2, r3
 8007906:	d01a      	beq.n	800793e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	4a0e      	ldr	r2, [pc, #56]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 800790e:	f023 0310 	bic.w	r3, r3, #16
 8007912:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007914:	f7fc fa04 	bl	8003d20 <HAL_GetTick>
 8007918:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800791a:	bf00      	nop
 800791c:	f7fc fa00 	bl	8003d20 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	4293      	cmp	r3, r2
 8007926:	d0f9      	beq.n	800791c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792c:	4a06      	ldr	r2, [pc, #24]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	4a04      	ldr	r2, [pc, #16]	; (8007948 <HAL_RCC_OscConfig+0x86c>)
 8007938:	f043 0310 	orr.w	r3, r3, #16
 800793c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	44020c00 	.word	0x44020c00

0800794c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e19e      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007960:	4b83      	ldr	r3, [pc, #524]	; (8007b70 <HAL_RCC_ClockConfig+0x224>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d910      	bls.n	8007990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796e:	4b80      	ldr	r3, [pc, #512]	; (8007b70 <HAL_RCC_ClockConfig+0x224>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f023 020f 	bic.w	r2, r3, #15
 8007976:	497e      	ldr	r1, [pc, #504]	; (8007b70 <HAL_RCC_ClockConfig+0x224>)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	4313      	orrs	r3, r2
 800797c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800797e:	4b7c      	ldr	r3, [pc, #496]	; (8007b70 <HAL_RCC_ClockConfig+0x224>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d001      	beq.n	8007990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e186      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	2b00      	cmp	r3, #0
 800799a:	d012      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	695a      	ldr	r2, [r3, #20]
 80079a0:	4b74      	ldr	r3, [pc, #464]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	0a1b      	lsrs	r3, r3, #8
 80079a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d909      	bls.n	80079c2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80079ae:	4b71      	ldr	r3, [pc, #452]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	496d      	ldr	r1, [pc, #436]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d012      	beq.n	80079f4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	4b68      	ldr	r3, [pc, #416]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079dc:	429a      	cmp	r2, r3
 80079de:	d909      	bls.n	80079f4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80079e0:	4b64      	ldr	r3, [pc, #400]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	4961      	ldr	r1, [pc, #388]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d010      	beq.n	8007a22 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	4b5b      	ldr	r3, [pc, #364]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d908      	bls.n	8007a22 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007a10:	4b58      	ldr	r3, [pc, #352]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	4955      	ldr	r1, [pc, #340]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d010      	beq.n	8007a50 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	4b50      	ldr	r3, [pc, #320]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d908      	bls.n	8007a50 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007a3e:	4b4d      	ldr	r3, [pc, #308]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f023 020f 	bic.w	r2, r3, #15
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	494a      	ldr	r1, [pc, #296]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 8093 	beq.w	8007b84 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d107      	bne.n	8007a76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007a66:	4b43      	ldr	r3, [pc, #268]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d121      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e113      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a7e:	4b3d      	ldr	r3, [pc, #244]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d115      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e107      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d107      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007a96:	4b37      	ldr	r3, [pc, #220]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e0fb      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007aa6:	4b33      	ldr	r3, [pc, #204]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e0f3      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007ab6:	4b2f      	ldr	r3, [pc, #188]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f023 0203 	bic.w	r2, r3, #3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	492c      	ldr	r1, [pc, #176]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac8:	f7fc f92a 	bl	8003d20 <HAL_GetTick>
 8007acc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d112      	bne.n	8007afc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ad6:	e00a      	b.n	8007aee <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007ad8:	f7fc f922 	bl	8003d20 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e0d7      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f003 0318 	and.w	r3, r3, #24
 8007af6:	2b18      	cmp	r3, #24
 8007af8:	d1ee      	bne.n	8007ad8 <HAL_RCC_ClockConfig+0x18c>
 8007afa:	e043      	b.n	8007b84 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d112      	bne.n	8007b2a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b04:	e00a      	b.n	8007b1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b06:	f7fc f90b 	bl	8003d20 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e0c0      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f003 0318 	and.w	r3, r3, #24
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d1ee      	bne.n	8007b06 <HAL_RCC_ClockConfig+0x1ba>
 8007b28:	e02c      	b.n	8007b84 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d122      	bne.n	8007b78 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007b32:	e00a      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b34:	f7fc f8f4 	bl	8003d20 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e0a9      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <HAL_RCC_ClockConfig+0x228>)
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f003 0318 	and.w	r3, r3, #24
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d1ee      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x1e8>
 8007b56:	e015      	b.n	8007b84 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007b58:	f7fc f8e2 	bl	8003d20 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d906      	bls.n	8007b78 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e097      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
 8007b6e:	bf00      	nop
 8007b70:	40022000 	.word	0x40022000
 8007b74:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b78:	4b4b      	ldr	r3, [pc, #300]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f003 0318 	and.w	r3, r3, #24
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e9      	bne.n	8007b58 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d010      	beq.n	8007bb2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	4b44      	ldr	r3, [pc, #272]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d208      	bcs.n	8007bb2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007ba0:	4b41      	ldr	r3, [pc, #260]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f023 020f 	bic.w	r2, r3, #15
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	493e      	ldr	r1, [pc, #248]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bb2:	4b3e      	ldr	r3, [pc, #248]	; (8007cac <HAL_RCC_ClockConfig+0x360>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d210      	bcs.n	8007be2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc0:	4b3a      	ldr	r3, [pc, #232]	; (8007cac <HAL_RCC_ClockConfig+0x360>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f023 020f 	bic.w	r2, r3, #15
 8007bc8:	4938      	ldr	r1, [pc, #224]	; (8007cac <HAL_RCC_ClockConfig+0x360>)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bd0:	4b36      	ldr	r3, [pc, #216]	; (8007cac <HAL_RCC_ClockConfig+0x360>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d001      	beq.n	8007be2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e05d      	b.n	8007c9e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d010      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	4b2d      	ldr	r3, [pc, #180]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d208      	bcs.n	8007c10 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007bfe:	4b2a      	ldr	r3, [pc, #168]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4927      	ldr	r1, [pc, #156]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	4b21      	ldr	r3, [pc, #132]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	091b      	lsrs	r3, r3, #4
 8007c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d209      	bcs.n	8007c42 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007c2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	491a      	ldr	r1, [pc, #104]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d012      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	695a      	ldr	r2, [r3, #20]
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d209      	bcs.n	8007c74 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	490e      	ldr	r1, [pc, #56]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007c74:	f000 f822 	bl	8007cbc <HAL_RCC_GetSysClockFreq>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <HAL_RCC_ClockConfig+0x35c>)
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	490b      	ldr	r1, [pc, #44]	; (8007cb0 <HAL_RCC_ClockConfig+0x364>)
 8007c84:	5ccb      	ldrb	r3, [r1, r3]
 8007c86:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8a:	4a0a      	ldr	r2, [pc, #40]	; (8007cb4 <HAL_RCC_ClockConfig+0x368>)
 8007c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <HAL_RCC_ClockConfig+0x36c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7f9 f8cc 	bl	8000e30 <HAL_InitTick>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	44020c00 	.word	0x44020c00
 8007cac:	40022000 	.word	0x40022000
 8007cb0:	0801fbf4 	.word	0x0801fbf4
 8007cb4:	20000000 	.word	0x20000000
 8007cb8:	20000040 	.word	0x20000040

08007cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b089      	sub	sp, #36	; 0x24
 8007cc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007cc2:	4b8c      	ldr	r3, [pc, #560]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f003 0318 	and.w	r3, r3, #24
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d102      	bne.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007cce:	4b8a      	ldr	r3, [pc, #552]	; (8007ef8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	e107      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cd4:	4b87      	ldr	r3, [pc, #540]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f003 0318 	and.w	r3, r3, #24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d112      	bne.n	8007d06 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007ce0:	4b84      	ldr	r3, [pc, #528]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d009      	beq.n	8007d00 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cec:	4b81      	ldr	r3, [pc, #516]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	08db      	lsrs	r3, r3, #3
 8007cf2:	f003 0303 	and.w	r3, r3, #3
 8007cf6:	4a81      	ldr	r2, [pc, #516]	; (8007efc <HAL_RCC_GetSysClockFreq+0x240>)
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	e0f1      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007d00:	4b7e      	ldr	r3, [pc, #504]	; (8007efc <HAL_RCC_GetSysClockFreq+0x240>)
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e0ee      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d06:	4b7b      	ldr	r3, [pc, #492]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0318 	and.w	r3, r3, #24
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d102      	bne.n	8007d18 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d12:	4b7b      	ldr	r3, [pc, #492]	; (8007f00 <HAL_RCC_GetSysClockFreq+0x244>)
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	e0e5      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d18:	4b76      	ldr	r3, [pc, #472]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f003 0318 	and.w	r3, r3, #24
 8007d20:	2b18      	cmp	r3, #24
 8007d22:	f040 80dd 	bne.w	8007ee0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007d26:	4b73      	ldr	r3, [pc, #460]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007d30:	4b70      	ldr	r3, [pc, #448]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	0a1b      	lsrs	r3, r3, #8
 8007d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007d3c:	4b6d      	ldr	r3, [pc, #436]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	091b      	lsrs	r3, r3, #4
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007d48:	4b6a      	ldr	r3, [pc, #424]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007d4c:	08db      	lsrs	r3, r3, #3
 8007d4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	fb02 f303 	mul.w	r3, r2, r3
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d60:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 80b7 	beq.w	8007eda <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d003      	beq.n	8007d7a <HAL_RCC_GetSysClockFreq+0xbe>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d056      	beq.n	8007e26 <HAL_RCC_GetSysClockFreq+0x16a>
 8007d78:	e077      	b.n	8007e6a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007d7a:	4b5e      	ldr	r3, [pc, #376]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d02d      	beq.n	8007de2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d86:	4b5b      	ldr	r3, [pc, #364]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	08db      	lsrs	r3, r3, #3
 8007d8c:	f003 0303 	and.w	r3, r3, #3
 8007d90:	4a5a      	ldr	r2, [pc, #360]	; (8007efc <HAL_RCC_GetSysClockFreq+0x240>)
 8007d92:	fa22 f303 	lsr.w	r3, r2, r3
 8007d96:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db0:	4b50      	ldr	r3, [pc, #320]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dc4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007f04 <HAL_RCC_GetSysClockFreq+0x248>
 8007dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ddc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007de0:	e065      	b.n	8007eae <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dec:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007f08 <HAL_RCC_GetSysClockFreq+0x24c>
 8007df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df4:	4b3f      	ldr	r3, [pc, #252]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e04:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e08:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007f04 <HAL_RCC_GetSysClockFreq+0x248>
 8007e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007e24:	e043      	b.n	8007eae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007f0c <HAL_RCC_GetSysClockFreq+0x250>
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b2e      	ldr	r3, [pc, #184]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e48:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e4c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007f04 <HAL_RCC_GetSysClockFreq+0x248>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8007e68:	e021      	b.n	8007eae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007f10 <HAL_RCC_GetSysClockFreq+0x254>
 8007e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e90:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007f04 <HAL_RCC_GetSysClockFreq+0x248>
 8007e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007eac:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8007eae:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x238>)
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb2:	0a5b      	lsrs	r3, r3, #9
 8007eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb8:	3301      	adds	r3, #1
 8007eba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ec6:	edd7 6a06 	vldr	s13, [r7, #24]
 8007eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed2:	ee17 3a90 	vmov	r3, s15
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	e004      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	e001      	b.n	8007ee4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <HAL_RCC_GetSysClockFreq+0x240>)
 8007ee2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3724      	adds	r7, #36	; 0x24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	44020c00 	.word	0x44020c00
 8007ef8:	003d0900 	.word	0x003d0900
 8007efc:	03d09000 	.word	0x03d09000
 8007f00:	007a1200 	.word	0x007a1200
 8007f04:	46000000 	.word	0x46000000
 8007f08:	4c742400 	.word	0x4c742400
 8007f0c:	4af42400 	.word	0x4af42400
 8007f10:	4a742400 	.word	0x4a742400

08007f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f18:	f7ff fed0 	bl	8007cbc <HAL_RCC_GetSysClockFreq>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007f20:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007f22:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f26:	4907      	ldr	r1, [pc, #28]	; (8007f44 <HAL_RCC_GetHCLKFreq+0x30>)
 8007f28:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007f2a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f32:	4a05      	ldr	r2, [pc, #20]	; (8007f48 <HAL_RCC_GetHCLKFreq+0x34>)
 8007f34:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007f36:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <HAL_RCC_GetHCLKFreq+0x34>)
 8007f38:	681b      	ldr	r3, [r3, #0]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	44020c00 	.word	0x44020c00
 8007f44:	0801fbf4 	.word	0x0801fbf4
 8007f48:	20000000 	.word	0x20000000

08007f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8007f50:	f7ff ffe0 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8007f54:	4602      	mov	r2, r0
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	4904      	ldr	r1, [pc, #16]	; (8007f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f62:	5ccb      	ldrb	r3, [r1, r3]
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	44020c00 	.word	0x44020c00
 8007f74:	0801fc04 	.word	0x0801fc04

08007f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8007f7c:	f7ff ffca 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8007f80:	4602      	mov	r2, r0
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	4904      	ldr	r1, [pc, #16]	; (8007fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f8e:	5ccb      	ldrb	r3, [r1, r3]
 8007f90:	f003 031f 	and.w	r3, r3, #31
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	44020c00 	.word	0x44020c00
 8007fa0:	0801fc04 	.word	0x0801fc04

08007fa4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007fa8:	f7ff ffb4 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 8007fac:	4602      	mov	r2, r0
 8007fae:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	0b1b      	lsrs	r3, r3, #12
 8007fb4:	f003 0307 	and.w	r3, r3, #7
 8007fb8:	4904      	ldr	r1, [pc, #16]	; (8007fcc <HAL_RCC_GetPCLK3Freq+0x28>)
 8007fba:	5ccb      	ldrb	r3, [r1, r3]
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	44020c00 	.word	0x44020c00
 8007fcc:	0801fc04 	.word	0x0801fc04

08007fd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	221f      	movs	r2, #31
 8007fde:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007fe0:	4b15      	ldr	r3, [pc, #84]	; (8008038 <HAL_RCC_GetClockConfig+0x68>)
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	f003 0203 	and.w	r2, r3, #3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8007fec:	4b12      	ldr	r3, [pc, #72]	; (8008038 <HAL_RCC_GetClockConfig+0x68>)
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 020f 	and.w	r2, r3, #15
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	091b      	lsrs	r3, r3, #4
 800800a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800801e:	4b07      	ldr	r3, [pc, #28]	; (800803c <HAL_RCC_GetClockConfig+0x6c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 020f 	and.w	r2, r3, #15
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]
}
 800802a:	bf00      	nop
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	44020c00 	.word	0x44020c00
 800803c:	40022000 	.word	0x40022000

08008040 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008044:	b0d8      	sub	sp, #352	; 0x160
 8008046:	af00      	add	r7, sp, #0
 8008048:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800804c:	2300      	movs	r3, #0
 800804e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008052:	2300      	movs	r3, #0
 8008054:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8008064:	2500      	movs	r5, #0
 8008066:	ea54 0305 	orrs.w	r3, r4, r5
 800806a:	d00b      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800806c:	4bcd      	ldr	r3, [pc, #820]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800806e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008072:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8008076:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800807a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807c:	4ac9      	ldr	r2, [pc, #804]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800807e:	430b      	orrs	r3, r1
 8008080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008084:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f002 0801 	and.w	r8, r2, #1
 8008090:	f04f 0900 	mov.w	r9, #0
 8008094:	ea58 0309 	orrs.w	r3, r8, r9
 8008098:	d042      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800809a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800809e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d823      	bhi.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xac>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080f5 	.word	0x080080f5
 80080b0:	080080c5 	.word	0x080080c5
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080f5 	.word	0x080080f5
 80080bc:	080080f5 	.word	0x080080f5
 80080c0:	080080f5 	.word	0x080080f5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80080c8:	3308      	adds	r3, #8
 80080ca:	4618      	mov	r0, r3
 80080cc:	f004 feda 	bl	800ce84 <RCCEx_PLL2_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80080d6:	e00e      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80080dc:	3330      	adds	r3, #48	; 0x30
 80080de:	4618      	mov	r0, r3
 80080e0:	f004 ff68 	bl	800cfb4 <RCCEx_PLL3_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80080ea:	e004      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80080f2:	e000      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80080f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10c      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80080fe:	4ba9      	ldr	r3, [pc, #676]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008104:	f023 0107 	bic.w	r1, r3, #7
 8008108:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800810c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810e:	4aa5      	ldr	r2, [pc, #660]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008110:	430b      	orrs	r3, r1
 8008112:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008116:	e003      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800811c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008120:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f002 0a02 	and.w	sl, r2, #2
 800812c:	f04f 0b00 	mov.w	fp, #0
 8008130:	ea5a 030b 	orrs.w	r3, sl, fp
 8008134:	f000 8088 	beq.w	8008248 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8008138:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800813c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813e:	2b28      	cmp	r3, #40	; 0x28
 8008140:	d868      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	0800821d 	.word	0x0800821d
 800814c:	08008215 	.word	0x08008215
 8008150:	08008215 	.word	0x08008215
 8008154:	08008215 	.word	0x08008215
 8008158:	08008215 	.word	0x08008215
 800815c:	08008215 	.word	0x08008215
 8008160:	08008215 	.word	0x08008215
 8008164:	08008215 	.word	0x08008215
 8008168:	080081ed 	.word	0x080081ed
 800816c:	08008215 	.word	0x08008215
 8008170:	08008215 	.word	0x08008215
 8008174:	08008215 	.word	0x08008215
 8008178:	08008215 	.word	0x08008215
 800817c:	08008215 	.word	0x08008215
 8008180:	08008215 	.word	0x08008215
 8008184:	08008215 	.word	0x08008215
 8008188:	08008201 	.word	0x08008201
 800818c:	08008215 	.word	0x08008215
 8008190:	08008215 	.word	0x08008215
 8008194:	08008215 	.word	0x08008215
 8008198:	08008215 	.word	0x08008215
 800819c:	08008215 	.word	0x08008215
 80081a0:	08008215 	.word	0x08008215
 80081a4:	08008215 	.word	0x08008215
 80081a8:	0800821d 	.word	0x0800821d
 80081ac:	08008215 	.word	0x08008215
 80081b0:	08008215 	.word	0x08008215
 80081b4:	08008215 	.word	0x08008215
 80081b8:	08008215 	.word	0x08008215
 80081bc:	08008215 	.word	0x08008215
 80081c0:	08008215 	.word	0x08008215
 80081c4:	08008215 	.word	0x08008215
 80081c8:	0800821d 	.word	0x0800821d
 80081cc:	08008215 	.word	0x08008215
 80081d0:	08008215 	.word	0x08008215
 80081d4:	08008215 	.word	0x08008215
 80081d8:	08008215 	.word	0x08008215
 80081dc:	08008215 	.word	0x08008215
 80081e0:	08008215 	.word	0x08008215
 80081e4:	08008215 	.word	0x08008215
 80081e8:	0800821d 	.word	0x0800821d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80081f0:	3308      	adds	r3, #8
 80081f2:	4618      	mov	r0, r3
 80081f4:	f004 fe46 	bl	800ce84 <RCCEx_PLL2_Config>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80081fe:	e00e      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008204:	3330      	adds	r3, #48	; 0x30
 8008206:	4618      	mov	r0, r3
 8008208:	f004 fed4 	bl	800cfb4 <RCCEx_PLL3_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8008212:	e004      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800821a:	e000      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800821c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800821e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008226:	4b5f      	ldr	r3, [pc, #380]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800822c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008230:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	4a5b      	ldr	r2, [pc, #364]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008238:	430b      	orrs	r3, r1
 800823a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800823e:	e003      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008244:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008248:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f002 0304 	and.w	r3, r2, #4
 8008254:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800825e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8008262:	460b      	mov	r3, r1
 8008264:	4313      	orrs	r3, r2
 8008266:	d04e      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8008268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800826c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800826e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008272:	d02c      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8008274:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008278:	d825      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800827a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800827e:	d028      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008284:	d81f      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008286:	2bc0      	cmp	r3, #192	; 0xc0
 8008288:	d025      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800828a:	2bc0      	cmp	r3, #192	; 0xc0
 800828c:	d81b      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d00f      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d817      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01f      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d113      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800829e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082a2:	3308      	adds	r3, #8
 80082a4:	4618      	mov	r0, r3
 80082a6:	f004 fded 	bl	800ce84 <RCCEx_PLL2_Config>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80082b0:	e014      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80082b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082b6:	3330      	adds	r3, #48	; 0x30
 80082b8:	4618      	mov	r0, r3
 80082ba:	f004 fe7b 	bl	800cfb4 <RCCEx_PLL3_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80082c4:	e00a      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80082cc:	e006      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082ce:	bf00      	nop
 80082d0:	e004      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082d2:	bf00      	nop
 80082d4:	e002      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082d6:	bf00      	nop
 80082d8:	e000      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80082da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10c      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80082e4:	4b2f      	ldr	r3, [pc, #188]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80082e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80082ea:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80082ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f4:	4a2b      	ldr	r2, [pc, #172]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80082f6:	430b      	orrs	r3, r1
 80082f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80082fc:	e003      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008302:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f002 0308 	and.w	r3, r2, #8
 8008312:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008316:	2300      	movs	r3, #0
 8008318:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800831c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8008320:	460b      	mov	r3, r1
 8008322:	4313      	orrs	r3, r2
 8008324:	d056      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8008326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800832a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800832c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008330:	d031      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8008332:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008336:	d82a      	bhi.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800833c:	d02d      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008342:	d824      	bhi.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008344:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008348:	d029      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800834a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800834e:	d81e      	bhi.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008354:	d011      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8008356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800835a:	d818      	bhi.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d023      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008364:	d113      	bne.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008366:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800836a:	3308      	adds	r3, #8
 800836c:	4618      	mov	r0, r3
 800836e:	f004 fd89 	bl	800ce84 <RCCEx_PLL2_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8008378:	e017      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800837a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800837e:	3330      	adds	r3, #48	; 0x30
 8008380:	4618      	mov	r0, r3
 8008382:	f004 fe17 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800838c:	e00d      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008394:	e009      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8008396:	bf00      	nop
 8008398:	e007      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800839a:	bf00      	nop
 800839c:	e005      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800839e:	bf00      	nop
 80083a0:	e003      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80083a2:	bf00      	nop
 80083a4:	44020c00 	.word	0x44020c00
        break;
 80083a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10c      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80083b2:	4bbb      	ldr	r3, [pc, #748]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80083b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80083b8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80083bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083c2:	4ab7      	ldr	r2, [pc, #732]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80083c4:	430b      	orrs	r3, r1
 80083c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80083ca:	e003      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80083d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f002 0310 	and.w	r3, r2, #16
 80083e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80083e4:	2300      	movs	r3, #0
 80083e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80083ea:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80083ee:	460b      	mov	r3, r1
 80083f0:	4313      	orrs	r3, r2
 80083f2:	d053      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80083f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80083fe:	d031      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8008400:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008404:	d82a      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800840a:	d02d      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800840c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008410:	d824      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008412:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008416:	d029      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8008418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800841c:	d81e      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800841e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008422:	d011      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008428:	d818      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800842e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008432:	d113      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008434:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008438:	3308      	adds	r3, #8
 800843a:	4618      	mov	r0, r3
 800843c:	f004 fd22 	bl	800ce84 <RCCEx_PLL2_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008446:	e014      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800844c:	3330      	adds	r3, #48	; 0x30
 800844e:	4618      	mov	r0, r3
 8008450:	f004 fdb0 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800845a:	e00a      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008462:	e006      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008464:	bf00      	nop
 8008466:	e004      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008468:	bf00      	nop
 800846a:	e002      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008472:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10c      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800847a:	4b89      	ldr	r3, [pc, #548]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800847c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008480:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008484:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848a:	4a85      	ldr	r2, [pc, #532]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800848c:	430b      	orrs	r3, r1
 800848e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008492:	e003      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008494:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008498:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800849c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f002 0320 	and.w	r3, r2, #32
 80084a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80084ac:	2300      	movs	r3, #0
 80084ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80084b2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80084b6:	460b      	mov	r3, r1
 80084b8:	4313      	orrs	r3, r2
 80084ba:	d053      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80084bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80084c6:	d031      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80084c8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80084cc:	d82a      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d2:	d02d      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80084d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d8:	d824      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084da:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80084de:	d029      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80084e0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80084e4:	d81e      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ea:	d011      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80084ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f0:	d818      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d020      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80084f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084fa:	d113      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008500:	3308      	adds	r3, #8
 8008502:	4618      	mov	r0, r3
 8008504:	f004 fcbe 	bl	800ce84 <RCCEx_PLL2_Config>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800850e:	e014      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008514:	3330      	adds	r3, #48	; 0x30
 8008516:	4618      	mov	r0, r3
 8008518:	f004 fd4c 	bl	800cfb4 <RCCEx_PLL3_Config>
 800851c:	4603      	mov	r3, r0
 800851e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8008522:	e00a      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800852a:	e006      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800852c:	bf00      	nop
 800852e:	e004      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008530:	bf00      	nop
 8008532:	e002      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008534:	bf00      	nop
 8008536:	e000      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10c      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008542:	4b57      	ldr	r3, [pc, #348]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008548:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800854c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	4a53      	ldr	r2, [pc, #332]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008554:	430b      	orrs	r3, r1
 8008556:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800855a:	e003      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008560:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008564:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008570:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008574:	2300      	movs	r3, #0
 8008576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800857a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800857e:	460b      	mov	r3, r1
 8008580:	4313      	orrs	r3, r2
 8008582:	d053      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8008584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800858a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800858e:	d031      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008590:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008594:	d82a      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800859a:	d02d      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800859c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a0:	d824      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80085a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085a6:	d029      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80085a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085ac:	d81e      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80085ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085b2:	d011      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80085b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085b8:	d818      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d020      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80085be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085c2:	d113      	bne.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80085c8:	3308      	adds	r3, #8
 80085ca:	4618      	mov	r0, r3
 80085cc:	f004 fc5a 	bl	800ce84 <RCCEx_PLL2_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80085d6:	e014      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80085dc:	3330      	adds	r3, #48	; 0x30
 80085de:	4618      	mov	r0, r3
 80085e0:	f004 fce8 	bl	800cfb4 <RCCEx_PLL3_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80085ea:	e00a      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80085f2:	e006      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80085f4:	bf00      	nop
 80085f6:	e004      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80085f8:	bf00      	nop
 80085fa:	e002      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80085fc:	bf00      	nop
 80085fe:	e000      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008602:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10c      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800860a:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800860c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008610:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8008614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800861a:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800861c:	430b      	orrs	r3, r1
 800861e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008622:	e003      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008624:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008628:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800862c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008638:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800863c:	2300      	movs	r3, #0
 800863e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008642:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8008646:	460b      	mov	r3, r1
 8008648:	4313      	orrs	r3, r2
 800864a:	d055      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800864c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008652:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008656:	d033      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008658:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800865c:	d82c      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800865e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008662:	d02f      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008668:	d826      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800866a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800866e:	d02b      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008670:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008674:	d820      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800867a:	d013      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800867c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008680:	d81a      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d022      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800868a:	d115      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800868c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008690:	3308      	adds	r3, #8
 8008692:	4618      	mov	r0, r3
 8008694:	f004 fbf6 	bl	800ce84 <RCCEx_PLL2_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800869e:	e016      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80086a0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086a8:	3330      	adds	r3, #48	; 0x30
 80086aa:	4618      	mov	r0, r3
 80086ac:	f004 fc82 	bl	800cfb4 <RCCEx_PLL3_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80086b6:	e00a      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80086be:	e006      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086c0:	bf00      	nop
 80086c2:	e004      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086c4:	bf00      	nop
 80086c6:	e002      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086c8:	bf00      	nop
 80086ca:	e000      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80086cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10c      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80086d6:	4bbb      	ldr	r3, [pc, #748]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80086d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086dc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80086e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086e6:	4ab7      	ldr	r2, [pc, #732]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80086e8:	430b      	orrs	r3, r1
 80086ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80086ee:	e003      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80086f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80086f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008704:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008708:	2300      	movs	r3, #0
 800870a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800870e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8008712:	460b      	mov	r3, r1
 8008714:	4313      	orrs	r3, r2
 8008716:	d053      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8008718:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800871c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800871e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008722:	d031      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008724:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008728:	d82a      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800872a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800872e:	d02d      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008734:	d824      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008736:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800873a:	d029      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800873c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008740:	d81e      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008746:	d011      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800874c:	d818      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d020      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008756:	d113      	bne.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800875c:	3308      	adds	r3, #8
 800875e:	4618      	mov	r0, r3
 8008760:	f004 fb90 	bl	800ce84 <RCCEx_PLL2_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800876a:	e014      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800876c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008770:	3330      	adds	r3, #48	; 0x30
 8008772:	4618      	mov	r0, r3
 8008774:	f004 fc1e 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008778:	4603      	mov	r3, r0
 800877a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800877e:	e00a      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008786:	e006      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008788:	bf00      	nop
 800878a:	e004      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800878c:	bf00      	nop
 800878e:	e002      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008790:	bf00      	nop
 8008792:	e000      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008796:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10c      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800879e:	4b89      	ldr	r3, [pc, #548]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80087a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80087a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ae:	4a85      	ldr	r2, [pc, #532]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80087b0:	430b      	orrs	r3, r1
 80087b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80087b6:	e003      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80087bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80087c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80087cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80087d0:	2300      	movs	r3, #0
 80087d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80087d6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80087da:	460b      	mov	r3, r1
 80087dc:	4313      	orrs	r3, r2
 80087de:	d055      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80087e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087e8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80087ec:	d031      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80087ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80087f2:	d82a      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80087f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f8:	d02d      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80087fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087fe:	d824      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008800:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008804:	d029      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008806:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800880a:	d81e      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800880c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008810:	d011      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8008812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008816:	d818      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008818:	2b00      	cmp	r3, #0
 800881a:	d020      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800881c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008820:	d113      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008822:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008826:	3308      	adds	r3, #8
 8008828:	4618      	mov	r0, r3
 800882a:	f004 fb2b 	bl	800ce84 <RCCEx_PLL2_Config>
 800882e:	4603      	mov	r3, r0
 8008830:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008834:	e014      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800883a:	3330      	adds	r3, #48	; 0x30
 800883c:	4618      	mov	r0, r3
 800883e:	f004 fbb9 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008842:	4603      	mov	r3, r0
 8008844:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008848:	e00a      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008850:	e006      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008852:	bf00      	nop
 8008854:	e004      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008856:	bf00      	nop
 8008858:	e002      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800885a:	bf00      	nop
 800885c:	e000      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800885e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008860:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10d      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008868:	4b56      	ldr	r3, [pc, #344]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800886a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800886e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8008872:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800887a:	4a52      	ldr	r2, [pc, #328]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800887c:	430b      	orrs	r3, r1
 800887e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008882:	e003      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008884:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008888:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800888c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008898:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800889c:	2300      	movs	r3, #0
 800889e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80088a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80088a6:	460b      	mov	r3, r1
 80088a8:	4313      	orrs	r3, r2
 80088aa:	d044      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80088ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b4:	2b05      	cmp	r3, #5
 80088b6:	d823      	bhi.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	08008909 	.word	0x08008909
 80088c4:	080088d9 	.word	0x080088d9
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	08008909 	.word	0x08008909
 80088d0:	08008909 	.word	0x08008909
 80088d4:	08008909 	.word	0x08008909
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088dc:	3308      	adds	r3, #8
 80088de:	4618      	mov	r0, r3
 80088e0:	f004 fad0 	bl	800ce84 <RCCEx_PLL2_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80088ea:	e00e      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088f0:	3330      	adds	r3, #48	; 0x30
 80088f2:	4618      	mov	r0, r3
 80088f4:	f004 fb5e 	bl	800cfb4 <RCCEx_PLL3_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80088fe:	e004      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008906:	e000      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8008908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800890a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10d      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8008912:	4b2c      	ldr	r3, [pc, #176]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008914:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008918:	f023 0107 	bic.w	r1, r3, #7
 800891c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008924:	4a27      	ldr	r2, [pc, #156]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008926:	430b      	orrs	r3, r1
 8008928:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800892c:	e003      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008932:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008936:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008942:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008946:	2300      	movs	r3, #0
 8008948:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800894c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008950:	460b      	mov	r3, r1
 8008952:	4313      	orrs	r3, r2
 8008954:	d04f      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8008956:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895e:	2b50      	cmp	r3, #80	; 0x50
 8008960:	d029      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008962:	2b50      	cmp	r3, #80	; 0x50
 8008964:	d823      	bhi.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d027      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d81f      	bhi.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800896e:	2b30      	cmp	r3, #48	; 0x30
 8008970:	d025      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008972:	2b30      	cmp	r3, #48	; 0x30
 8008974:	d81b      	bhi.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008976:	2b20      	cmp	r3, #32
 8008978:	d00f      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800897a:	2b20      	cmp	r3, #32
 800897c:	d817      	bhi.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d022      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008982:	2b10      	cmp	r3, #16
 8008984:	d113      	bne.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008986:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800898a:	3308      	adds	r3, #8
 800898c:	4618      	mov	r0, r3
 800898e:	f004 fa79 	bl	800ce84 <RCCEx_PLL2_Config>
 8008992:	4603      	mov	r3, r0
 8008994:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008998:	e017      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800899a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800899e:	3330      	adds	r3, #48	; 0x30
 80089a0:	4618      	mov	r0, r3
 80089a2:	f004 fb07 	bl	800cfb4 <RCCEx_PLL3_Config>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80089ac:	e00d      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80089b4:	e009      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80089b6:	bf00      	nop
 80089b8:	e007      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80089ba:	bf00      	nop
 80089bc:	e005      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80089be:	bf00      	nop
 80089c0:	e003      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80089c2:	bf00      	nop
 80089c4:	44020c00 	.word	0x44020c00
        break;
 80089c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80089d2:	4baf      	ldr	r3, [pc, #700]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80089d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80089d8:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80089dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e4:	4aaa      	ldr	r2, [pc, #680]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80089e6:	430b      	orrs	r3, r1
 80089e8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80089ec:	e003      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80089f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008a02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a06:	2300      	movs	r3, #0
 8008a08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4313      	orrs	r3, r2
 8008a14:	d055      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8008a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a1e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a22:	d031      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8008a24:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a28:	d82a      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a2e:	d02d      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8008a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a34:	d824      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a3a:	d029      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008a3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a40:	d81e      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a46:	d011      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8008a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a4c:	d818      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d020      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8008a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a56:	d113      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f004 fa10 	bl	800ce84 <RCCEx_PLL2_Config>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008a6a:	e014      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a70:	3330      	adds	r3, #48	; 0x30
 8008a72:	4618      	mov	r0, r3
 8008a74:	f004 fa9e 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008a7e:	e00a      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008a86:	e006      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a88:	bf00      	nop
 8008a8a:	e004      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10d      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008a9e:	4b7c      	ldr	r3, [pc, #496]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aa4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab0:	4a77      	ldr	r2, [pc, #476]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ab8:	e003      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008abe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ad8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008adc:	460b      	mov	r3, r1
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	d03d      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8008ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008aee:	d01b      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8008af0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008af4:	d814      	bhi.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008afa:	d017      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8008afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b00:	d80e      	bhi.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d014      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8008b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b0a:	d109      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b10:	3330      	adds	r3, #48	; 0x30
 8008b12:	4618      	mov	r0, r3
 8008b14:	f004 fa4e 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8008b1e:	e008      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008b26:	e004      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008b28:	bf00      	nop
 8008b2a:	e002      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008b2c:	bf00      	nop
 8008b2e:	e000      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10d      	bne.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008b3a:	4b55      	ldr	r3, [pc, #340]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008b3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b40:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4c:	4a50      	ldr	r2, [pc, #320]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008b54:	e003      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b5a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008b6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b74:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	d03d      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8008b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b8a:	d01b      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8008b8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b90:	d814      	bhi.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008b92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b96:	d017      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8008b98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b9c:	d80e      	bhi.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d014      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8008ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ba6:	d109      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bac:	3330      	adds	r3, #48	; 0x30
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f004 fa00 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8008bba:	e008      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008bc2:	e004      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10d      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008bd6:	4b2e      	ldr	r3, [pc, #184]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008bd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bdc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008be8:	4a29      	ldr	r2, [pc, #164]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008bea:	430b      	orrs	r3, r1
 8008bec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008bf0:	e003      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008bf6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c10:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c14:	460b      	mov	r3, r1
 8008c16:	4313      	orrs	r3, r2
 8008c18:	d040      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8008c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c26:	d01b      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8008c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c2c:	d814      	bhi.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c32:	d017      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c38:	d80e      	bhi.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d014      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c42:	d109      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c48:	3330      	adds	r3, #48	; 0x30
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f004 f9b2 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8008c56:	e008      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008c5e:	e004      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008c60:	bf00      	nop
 8008c62:	e002      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008c64:	bf00      	nop
 8008c66:	e000      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d110      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008c72:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008c74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c78:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c84:	4a02      	ldr	r2, [pc, #8]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008c86:	430b      	orrs	r3, r1
 8008c88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008c8c:	e006      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8008c8e:	bf00      	nop
 8008c90:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c94:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c98:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008cb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	d03d      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8008cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008cc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cc8:	d01b      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008cca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cce:	d814      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8008cd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cd4:	d017      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8008cd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cda:	d80e      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d014      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8008ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ce4:	d109      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cea:	3330      	adds	r3, #48	; 0x30
 8008cec:	4618      	mov	r0, r3
 8008cee:	f004 f961 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8008cf8:	e008      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008d00:	e004      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008d02:	bf00      	nop
 8008d04:	e002      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10d      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008d14:	4bbe      	ldr	r3, [pc, #760]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008d16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d1a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d26:	4aba      	ldr	r2, [pc, #744]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008d2e:	e003      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008d44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008d52:	460b      	mov	r3, r1
 8008d54:	4313      	orrs	r3, r2
 8008d56:	d035      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d64:	d015      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8008d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d6a:	d80e      	bhi.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d012      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8008d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d74:	d109      	bne.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d7a:	3330      	adds	r3, #48	; 0x30
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f004 f919 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8008d88:	e006      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008d90:	e002      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008d92:	bf00      	nop
 8008d94:	e000      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10d      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8008da0:	4b9b      	ldr	r3, [pc, #620]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008da2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008da6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008db2:	4a97      	ldr	r2, [pc, #604]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008db4:	430b      	orrs	r3, r1
 8008db6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008dba:	e003      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008dc0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	2100      	movs	r1, #0
 8008dce:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4313      	orrs	r3, r2
 8008de2:	d00e      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8008de4:	4b8a      	ldr	r3, [pc, #552]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	4a89      	ldr	r2, [pc, #548]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008dea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dee:	61d3      	str	r3, [r2, #28]
 8008df0:	4b87      	ldr	r3, [pc, #540]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008df2:	69d9      	ldr	r1, [r3, #28]
 8008df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008df8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008dfc:	4a84      	ldr	r2, [pc, #528]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e12:	2300      	movs	r3, #0
 8008e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e18:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	d055      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8008e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008e2e:	d031      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8008e30:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008e34:	d82a      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e3a:	d02d      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8008e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e40:	d824      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e46:	d029      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8008e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e4c:	d81e      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e52:	d011      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8008e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e58:	d818      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d020      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8008e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e62:	d113      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e68:	3308      	adds	r3, #8
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f004 f80a 	bl	800ce84 <RCCEx_PLL2_Config>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008e76:	e014      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e7c:	3330      	adds	r3, #48	; 0x30
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f004 f898 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008e8a:	e00a      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008e92:	e006      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008e94:	bf00      	nop
 8008e96:	e004      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008e98:	bf00      	nop
 8008e9a:	e002      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008e9c:	bf00      	nop
 8008e9e:	e000      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10d      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008eaa:	4b59      	ldr	r3, [pc, #356]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008eac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008eb0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ebc:	4a54      	ldr	r2, [pc, #336]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008ebe:	430b      	orrs	r3, r1
 8008ec0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008ec4:	e003      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008eca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ee4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4313      	orrs	r3, r2
 8008eec:	d055      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8008eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ef6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008efa:	d031      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8008efc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008f00:	d82a      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f06:	d02d      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8008f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f0c:	d824      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f12:	d029      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8008f14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f18:	d81e      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f1e:	d011      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8008f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f24:	d818      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d020      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	d113      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f34:	3308      	adds	r3, #8
 8008f36:	4618      	mov	r0, r3
 8008f38:	f003 ffa4 	bl	800ce84 <RCCEx_PLL2_Config>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008f42:	e014      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f48:	3330      	adds	r3, #48	; 0x30
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f004 f832 	bl	800cfb4 <RCCEx_PLL3_Config>
 8008f50:	4603      	mov	r3, r0
 8008f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008f56:	e00a      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008f5e:	e006      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f60:	bf00      	nop
 8008f62:	e004      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f64:	bf00      	nop
 8008f66:	e002      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f68:	bf00      	nop
 8008f6a:	e000      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10d      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008f76:	4b26      	ldr	r3, [pc, #152]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008f78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008f7c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f88:	4a21      	ldr	r2, [pc, #132]	; (8009010 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008f90:	e003      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8008f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	d057      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8008fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fc6:	d033      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8008fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fcc:	d82c      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008fce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fd2:	d02f      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8008fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fd8:	d826      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008fda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fde:	d02b      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8008fe0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fe4:	d820      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fea:	d013      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff0:	d81a      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d022      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8008ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ffa:	d115      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009000:	3308      	adds	r3, #8
 8009002:	4618      	mov	r0, r3
 8009004:	f003 ff3e 	bl	800ce84 <RCCEx_PLL2_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800900e:	e016      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8009010:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009014:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009018:	3330      	adds	r3, #48	; 0x30
 800901a:	4618      	mov	r0, r3
 800901c:	f003 ffca 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009026:	e00a      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800902e:	e006      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009030:	bf00      	nop
 8009032:	e004      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800903c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800903e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10d      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8009046:	4bbb      	ldr	r3, [pc, #748]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009048:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800904c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009054:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009058:	4ab6      	ldr	r2, [pc, #728]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800905a:	430b      	orrs	r3, r1
 800905c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009060:	e003      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009062:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009066:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800906a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	2100      	movs	r1, #0
 8009074:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009080:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009084:	460b      	mov	r3, r1
 8009086:	4313      	orrs	r3, r2
 8009088:	d055      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800908a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800908e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009092:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009096:	d031      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8009098:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800909c:	d82a      	bhi.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800909e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a2:	d02d      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80090a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a8:	d824      	bhi.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80090aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090ae:	d029      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80090b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090b4:	d81e      	bhi.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80090b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090ba:	d011      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80090bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090c0:	d818      	bhi.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d020      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80090c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ca:	d113      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090d0:	3308      	adds	r3, #8
 80090d2:	4618      	mov	r0, r3
 80090d4:	f003 fed6 	bl	800ce84 <RCCEx_PLL2_Config>
 80090d8:	4603      	mov	r3, r0
 80090da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80090de:	e014      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090e4:	3330      	adds	r3, #48	; 0x30
 80090e6:	4618      	mov	r0, r3
 80090e8:	f003 ff64 	bl	800cfb4 <RCCEx_PLL3_Config>
 80090ec:	4603      	mov	r3, r0
 80090ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80090f2:	e00a      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80090fa:	e006      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80090fc:	bf00      	nop
 80090fe:	e004      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009100:	bf00      	nop
 8009102:	e002      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009104:	bf00      	nop
 8009106:	e000      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10d      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8009112:	4b88      	ldr	r3, [pc, #544]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009114:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009118:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 800911c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009124:	4a83      	ldr	r2, [pc, #524]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009126:	430b      	orrs	r3, r1
 8009128:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800912c:	e003      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009132:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8009136:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	2100      	movs	r1, #0
 8009140:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800914c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009150:	460b      	mov	r3, r1
 8009152:	4313      	orrs	r3, r2
 8009154:	d055      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8009156:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800915a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800915e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009162:	d031      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8009164:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009168:	d82a      	bhi.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800916a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800916e:	d02d      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8009170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009174:	d824      	bhi.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009176:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800917a:	d029      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800917c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009180:	d81e      	bhi.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009186:	d011      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8009188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800918c:	d818      	bhi.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d020      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8009192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009196:	d113      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009198:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800919c:	3308      	adds	r3, #8
 800919e:	4618      	mov	r0, r3
 80091a0:	f003 fe70 	bl	800ce84 <RCCEx_PLL2_Config>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80091aa:	e014      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091b0:	3330      	adds	r3, #48	; 0x30
 80091b2:	4618      	mov	r0, r3
 80091b4:	f003 fefe 	bl	800cfb4 <RCCEx_PLL3_Config>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80091be:	e00a      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80091c6:	e006      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091c8:	bf00      	nop
 80091ca:	e004      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091cc:	bf00      	nop
 80091ce:	e002      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091d0:	bf00      	nop
 80091d2:	e000      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80091d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10d      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80091de:	4b55      	ldr	r3, [pc, #340]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80091e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80091e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80091e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091f0:	4a50      	ldr	r2, [pc, #320]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80091f2:	430b      	orrs	r3, r1
 80091f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80091f8:	e003      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8009202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	2100      	movs	r1, #0
 800920c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8009210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009218:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800921c:	460b      	mov	r3, r1
 800921e:	4313      	orrs	r3, r2
 8009220:	d055      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8009222:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009226:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800922a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800922e:	d031      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8009230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009234:	d82a      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923a:	d02d      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800923c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009240:	d824      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009246:	d029      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8009248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800924c:	d81e      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800924e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009252:	d011      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8009254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009258:	d818      	bhi.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d020      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800925e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009262:	d113      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009264:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009268:	3308      	adds	r3, #8
 800926a:	4618      	mov	r0, r3
 800926c:	f003 fe0a 	bl	800ce84 <RCCEx_PLL2_Config>
 8009270:	4603      	mov	r3, r0
 8009272:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8009276:	e014      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009278:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800927c:	3330      	adds	r3, #48	; 0x30
 800927e:	4618      	mov	r0, r3
 8009280:	f003 fe98 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009284:	4603      	mov	r3, r0
 8009286:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800928a:	e00a      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009292:	e006      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009294:	bf00      	nop
 8009296:	e004      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009298:	bf00      	nop
 800929a:	e002      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800929c:	bf00      	nop
 800929e:	e000      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80092a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10d      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80092aa:	4b22      	ldr	r3, [pc, #136]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80092ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80092b0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80092b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092bc:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80092be:	430b      	orrs	r3, r1
 80092c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80092c4:	e003      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80092ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80092da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092de:	2300      	movs	r3, #0
 80092e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80092e8:	460b      	mov	r3, r1
 80092ea:	4313      	orrs	r3, r2
 80092ec:	d055      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80092ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80092f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092fa:	d035      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80092fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009300:	d82e      	bhi.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009302:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009306:	d031      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8009308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800930c:	d828      	bhi.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800930e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009312:	d01b      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8009314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009318:	d822      	bhi.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800931e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009322:	d009      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8009324:	e01c      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009326:	4b03      	ldr	r3, [pc, #12]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	4a02      	ldr	r2, [pc, #8]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800932c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009330:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009332:	e01c      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8009334:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009338:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800933c:	3308      	adds	r3, #8
 800933e:	4618      	mov	r0, r3
 8009340:	f003 fda0 	bl	800ce84 <RCCEx_PLL2_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800934a:	e010      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800934c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009350:	3330      	adds	r3, #48	; 0x30
 8009352:	4618      	mov	r0, r3
 8009354:	f003 fe2e 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800935e:	e006      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009366:	e002      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8009368:	bf00      	nop
 800936a:	e000      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800936c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800936e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10d      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009376:	4bc3      	ldr	r3, [pc, #780]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800937c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009380:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009384:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009388:	4abe      	ldr	r2, [pc, #760]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800938a:	430b      	orrs	r3, r1
 800938c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009390:	e003      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009392:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009396:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800939a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80093a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093aa:	2300      	movs	r3, #0
 80093ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80093b4:	460b      	mov	r3, r1
 80093b6:	4313      	orrs	r3, r2
 80093b8:	d051      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80093ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80093c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093c6:	d033      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80093c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093cc:	d82c      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80093ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80093d2:	d02d      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80093d4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80093d8:	d826      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80093da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093de:	d019      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80093e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e4:	d820      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80093ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093ee:	d007      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80093f0:	e01a      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093f2:	4ba4      	ldr	r3, [pc, #656]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80093f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f6:	4aa3      	ldr	r2, [pc, #652]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80093f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093fc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80093fe:	e018      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009400:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009404:	3308      	adds	r3, #8
 8009406:	4618      	mov	r0, r3
 8009408:	f003 fd3c 	bl	800ce84 <RCCEx_PLL2_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009412:	e00e      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009418:	3330      	adds	r3, #48	; 0x30
 800941a:	4618      	mov	r0, r3
 800941c:	f003 fdca 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009420:	4603      	mov	r3, r0
 8009422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009426:	e004      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800942e:	e000      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8009430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009432:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10d      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800943a:	4b92      	ldr	r3, [pc, #584]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800943c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009440:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8009444:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009448:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800944c:	4a8d      	ldr	r2, [pc, #564]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800944e:	430b      	orrs	r3, r1
 8009450:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009454:	e003      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009456:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800945a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800945e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800946a:	67bb      	str	r3, [r7, #120]	; 0x78
 800946c:	2300      	movs	r3, #0
 800946e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009470:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009474:	460b      	mov	r3, r1
 8009476:	4313      	orrs	r3, r2
 8009478:	d032      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800947a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800947e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009482:	2b05      	cmp	r3, #5
 8009484:	d80f      	bhi.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8009486:	2b03      	cmp	r3, #3
 8009488:	d211      	bcs.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800948a:	2b01      	cmp	r3, #1
 800948c:	d911      	bls.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800948e:	2b02      	cmp	r3, #2
 8009490:	d109      	bne.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009492:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009496:	3308      	adds	r3, #8
 8009498:	4618      	mov	r0, r3
 800949a:	f003 fcf3 	bl	800ce84 <RCCEx_PLL2_Config>
 800949e:	4603      	mov	r3, r0
 80094a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80094a4:	e006      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80094ac:	e002      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80094ae:	bf00      	nop
 80094b0:	e000      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80094b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10d      	bne.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80094bc:	4b71      	ldr	r3, [pc, #452]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80094be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094c2:	f023 0107 	bic.w	r1, r3, #7
 80094c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80094ce:	4a6d      	ldr	r2, [pc, #436]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80094d0:	430b      	orrs	r3, r1
 80094d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80094d6:	e003      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80094e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	2100      	movs	r1, #0
 80094ea:	6739      	str	r1, [r7, #112]	; 0x70
 80094ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f0:	677b      	str	r3, [r7, #116]	; 0x74
 80094f2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80094f6:	460b      	mov	r3, r1
 80094f8:	4313      	orrs	r3, r2
 80094fa:	d024      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80094fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009504:	2b00      	cmp	r3, #0
 8009506:	d005      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8009508:	2b08      	cmp	r3, #8
 800950a:	d005      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009512:	e002      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8009514:	bf00      	nop
 8009516:	e000      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8009518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10d      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8009522:	4b58      	ldr	r3, [pc, #352]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009528:	f023 0108 	bic.w	r1, r3, #8
 800952c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009530:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009534:	4a53      	ldr	r2, [pc, #332]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009536:	430b      	orrs	r3, r1
 8009538:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800953c:	e003      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009542:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009546:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009552:	66bb      	str	r3, [r7, #104]	; 0x68
 8009554:	2300      	movs	r3, #0
 8009556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009558:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800955c:	460b      	mov	r3, r1
 800955e:	4313      	orrs	r3, r2
 8009560:	f000 80b9 	beq.w	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009564:	4b48      	ldr	r3, [pc, #288]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	4a47      	ldr	r2, [pc, #284]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800956a:	f043 0301 	orr.w	r3, r3, #1
 800956e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009570:	f7fa fbd6 	bl	8003d20 <HAL_GetTick>
 8009574:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009578:	e00b      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800957a:	f7fa fbd1 	bl	8003d20 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d903      	bls.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009590:	e005      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009592:	4b3d      	ldr	r3, [pc, #244]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0ed      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800959e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 8093 	bne.w	80096ce <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095a8:	4b36      	ldr	r3, [pc, #216]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80095b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d023      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80095be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095c2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80095c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d01b      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095ce:	4b2d      	ldr	r3, [pc, #180]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095dc:	4b29      	ldr	r3, [pc, #164]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095e2:	4a28      	ldr	r2, [pc, #160]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095ec:	4b25      	ldr	r3, [pc, #148]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095f2:	4a24      	ldr	r2, [pc, #144]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80095fc:	4a21      	ldr	r2, [pc, #132]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009602:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009606:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d019      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009612:	f7fa fb85 	bl	8003d20 <HAL_GetTick>
 8009616:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800961a:	e00d      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800961c:	f7fa fb80 	bl	8003d20 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	f241 3388 	movw	r3, #5000	; 0x1388
 800962c:	429a      	cmp	r2, r3
 800962e:	d903      	bls.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8009636:	e006      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009638:	4b12      	ldr	r3, [pc, #72]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800963a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0ea      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8009646:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800964a:	2b00      	cmp	r3, #0
 800964c:	d13a      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800964e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009652:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800965a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800965e:	d115      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8009660:	4b08      	ldr	r3, [pc, #32]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009668:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800966c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009670:	091b      	lsrs	r3, r3, #4
 8009672:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009676:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800967a:	4a02      	ldr	r2, [pc, #8]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800967c:	430b      	orrs	r3, r1
 800967e:	61d3      	str	r3, [r2, #28]
 8009680:	e00a      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8009682:	bf00      	nop
 8009684:	44020c00 	.word	0x44020c00
 8009688:	44020800 	.word	0x44020800
 800968c:	4b9f      	ldr	r3, [pc, #636]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	4a9e      	ldr	r2, [pc, #632]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009692:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009696:	61d3      	str	r3, [r2, #28]
 8009698:	4b9c      	ldr	r3, [pc, #624]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800969a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800969e:	4a9b      	ldr	r2, [pc, #620]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80096a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80096a8:	4b98      	ldr	r3, [pc, #608]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80096aa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80096ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80096b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096ba:	4a94      	ldr	r2, [pc, #592]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80096bc:	430b      	orrs	r3, r1
 80096be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80096c2:	e008      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80096cc:	e003      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096d2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80096d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80096e2:	663b      	str	r3, [r7, #96]	; 0x60
 80096e4:	2300      	movs	r3, #0
 80096e6:	667b      	str	r3, [r7, #100]	; 0x64
 80096e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80096ec:	460b      	mov	r3, r1
 80096ee:	4313      	orrs	r3, r2
 80096f0:	d035      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80096f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80096fa:	2b30      	cmp	r3, #48	; 0x30
 80096fc:	d014      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80096fe:	2b30      	cmp	r3, #48	; 0x30
 8009700:	d80e      	bhi.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8009702:	2b20      	cmp	r3, #32
 8009704:	d012      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8009706:	2b20      	cmp	r3, #32
 8009708:	d80a      	bhi.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d010      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800970e:	2b10      	cmp	r3, #16
 8009710:	d106      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009712:	4b7e      	ldr	r3, [pc, #504]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009716:	4a7d      	ldr	r2, [pc, #500]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800971c:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800971e:	e008      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009726:	e004      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009728:	bf00      	nop
 800972a:	e002      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800972c:	bf00      	nop
 800972e:	e000      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009732:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10d      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800973a:	4b74      	ldr	r3, [pc, #464]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800973c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009740:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009744:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009748:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800974c:	4a6f      	ldr	r2, [pc, #444]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800974e:	430b      	orrs	r3, r1
 8009750:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009754:	e003      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009756:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800975a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800975e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800976a:	65bb      	str	r3, [r7, #88]	; 0x58
 800976c:	2300      	movs	r3, #0
 800976e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009770:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009774:	460b      	mov	r3, r1
 8009776:	4313      	orrs	r3, r2
 8009778:	d033      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800977a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800977e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8009786:	2b40      	cmp	r3, #64	; 0x40
 8009788:	d007      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800978a:	e010      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800978c:	4b5f      	ldr	r3, [pc, #380]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	4a5e      	ldr	r2, [pc, #376]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009796:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009798:	e00d      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800979a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800979e:	3308      	adds	r3, #8
 80097a0:	4618      	mov	r0, r3
 80097a2:	f003 fb6f 	bl	800ce84 <RCCEx_PLL2_Config>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80097b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10d      	bne.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80097be:	4b53      	ldr	r3, [pc, #332]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80097c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097c4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80097c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80097d0:	4a4e      	ldr	r2, [pc, #312]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80097d2:	430b      	orrs	r3, r1
 80097d4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80097d8:	e003      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80097de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80097e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80097ee:	653b      	str	r3, [r7, #80]	; 0x50
 80097f0:	2300      	movs	r3, #0
 80097f2:	657b      	str	r3, [r7, #84]	; 0x54
 80097f4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80097f8:	460b      	mov	r3, r1
 80097fa:	4313      	orrs	r3, r2
 80097fc:	d033      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80097fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009802:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800980a:	2b80      	cmp	r3, #128	; 0x80
 800980c:	d007      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800980e:	e010      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009810:	4b3e      	ldr	r3, [pc, #248]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009814:	4a3d      	ldr	r2, [pc, #244]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800981a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800981c:	e00d      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800981e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009822:	3308      	adds	r3, #8
 8009824:	4618      	mov	r0, r3
 8009826:	f003 fb2d 	bl	800ce84 <RCCEx_PLL2_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009830:	e003      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10d      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8009842:	4b32      	ldr	r3, [pc, #200]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009844:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009848:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800984c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009850:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009854:	4a2d      	ldr	r2, [pc, #180]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009856:	430b      	orrs	r3, r1
 8009858:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800985c:	e003      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009862:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
 8009874:	2300      	movs	r3, #0
 8009876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009878:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800987c:	460b      	mov	r3, r1
 800987e:	4313      	orrs	r3, r2
 8009880:	d04a      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8009882:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800988a:	2b04      	cmp	r3, #4
 800988c:	d827      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098a9 	.word	0x080098a9
 8009898:	080098b7 	.word	0x080098b7
 800989c:	080098cb 	.word	0x080098cb
 80098a0:	080098e7 	.word	0x080098e7
 80098a4:	080098e7 	.word	0x080098e7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a8:	4b18      	ldr	r3, [pc, #96]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ac:	4a17      	ldr	r2, [pc, #92]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80098b4:	e018      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098ba:	3308      	adds	r3, #8
 80098bc:	4618      	mov	r0, r3
 80098be:	f003 fae1 	bl	800ce84 <RCCEx_PLL2_Config>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80098c8:	e00e      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80098ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098ce:	3330      	adds	r3, #48	; 0x30
 80098d0:	4618      	mov	r0, r3
 80098d2:	f003 fb6f 	bl	800cfb4 <RCCEx_PLL3_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80098dc:	e004      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80098e4:	e000      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80098e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10f      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80098f0:	4b06      	ldr	r3, [pc, #24]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098f6:	f023 0107 	bic.w	r1, r3, #7
 80098fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009902:	4a02      	ldr	r2, [pc, #8]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009904:	430b      	orrs	r3, r1
 8009906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800990a:	e005      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800990c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009910:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009914:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009918:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009924:	643b      	str	r3, [r7, #64]	; 0x40
 8009926:	2300      	movs	r3, #0
 8009928:	647b      	str	r3, [r7, #68]	; 0x44
 800992a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800992e:	460b      	mov	r3, r1
 8009930:	4313      	orrs	r3, r2
 8009932:	f000 8081 	beq.w	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8009936:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800993a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800993e:	2b20      	cmp	r3, #32
 8009940:	d85f      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	080099cd 	.word	0x080099cd
 800994c:	08009a03 	.word	0x08009a03
 8009950:	08009a03 	.word	0x08009a03
 8009954:	08009a03 	.word	0x08009a03
 8009958:	08009a03 	.word	0x08009a03
 800995c:	08009a03 	.word	0x08009a03
 8009960:	08009a03 	.word	0x08009a03
 8009964:	08009a03 	.word	0x08009a03
 8009968:	080099db 	.word	0x080099db
 800996c:	08009a03 	.word	0x08009a03
 8009970:	08009a03 	.word	0x08009a03
 8009974:	08009a03 	.word	0x08009a03
 8009978:	08009a03 	.word	0x08009a03
 800997c:	08009a03 	.word	0x08009a03
 8009980:	08009a03 	.word	0x08009a03
 8009984:	08009a03 	.word	0x08009a03
 8009988:	080099ef 	.word	0x080099ef
 800998c:	08009a03 	.word	0x08009a03
 8009990:	08009a03 	.word	0x08009a03
 8009994:	08009a03 	.word	0x08009a03
 8009998:	08009a03 	.word	0x08009a03
 800999c:	08009a03 	.word	0x08009a03
 80099a0:	08009a03 	.word	0x08009a03
 80099a4:	08009a03 	.word	0x08009a03
 80099a8:	08009a0b 	.word	0x08009a0b
 80099ac:	08009a03 	.word	0x08009a03
 80099b0:	08009a03 	.word	0x08009a03
 80099b4:	08009a03 	.word	0x08009a03
 80099b8:	08009a03 	.word	0x08009a03
 80099bc:	08009a03 	.word	0x08009a03
 80099c0:	08009a03 	.word	0x08009a03
 80099c4:	08009a03 	.word	0x08009a03
 80099c8:	08009a0b 	.word	0x08009a0b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099cc:	4bab      	ldr	r3, [pc, #684]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	4aaa      	ldr	r2, [pc, #680]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80099d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80099d8:	e018      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80099da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099de:	3308      	adds	r3, #8
 80099e0:	4618      	mov	r0, r3
 80099e2:	f003 fa4f 	bl	800ce84 <RCCEx_PLL2_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80099ec:	e00e      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80099ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099f2:	3330      	adds	r3, #48	; 0x30
 80099f4:	4618      	mov	r0, r3
 80099f6:	f003 fadd 	bl	800cfb4 <RCCEx_PLL3_Config>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009a00:	e004      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009a08:	e000      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8009a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10d      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009a14:	4b99      	ldr	r3, [pc, #612]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a1a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a26:	4a95      	ldr	r2, [pc, #596]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a2e:	e003      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a46:	2300      	movs	r3, #0
 8009a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d04e      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8009a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a60:	d02e      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8009a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a66:	d827      	bhi.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009a68:	2bc0      	cmp	r3, #192	; 0xc0
 8009a6a:	d02b      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8009a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8009a6e:	d823      	bhi.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009a70:	2b80      	cmp	r3, #128	; 0x80
 8009a72:	d017      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8009a74:	2b80      	cmp	r3, #128	; 0x80
 8009a76:	d81f      	bhi.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8009a7c:	2b40      	cmp	r3, #64	; 0x40
 8009a7e:	d007      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8009a80:	e01a      	b.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a82:	4b7e      	ldr	r3, [pc, #504]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a86:	4a7d      	ldr	r2, [pc, #500]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a8c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009a8e:	e01a      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a94:	3308      	adds	r3, #8
 8009a96:	4618      	mov	r0, r3
 8009a98:	f003 f9f4 	bl	800ce84 <RCCEx_PLL2_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009aa2:	e010      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aa8:	3330      	adds	r3, #48	; 0x30
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f003 fa82 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009ab6:	e006      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009abe:	e002      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009ac0:	bf00      	nop
 8009ac2:	e000      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10d      	bne.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009ace:	4b6b      	ldr	r3, [pc, #428]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ad4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ae0:	4a66      	ldr	r2, [pc, #408]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ae8:	e003      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009aee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8009af2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009afe:	633b      	str	r3, [r7, #48]	; 0x30
 8009b00:	2300      	movs	r3, #0
 8009b02:	637b      	str	r3, [r7, #52]	; 0x34
 8009b04:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	d055      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8009b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009b16:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009b1a:	d031      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8009b1c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009b20:	d82a      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b26:	d02d      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8009b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b2c:	d824      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b32:	d029      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8009b34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b38:	d81e      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b3e:	d011      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8009b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b44:	d818      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d020      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8009b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b4e:	d113      	bne.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b54:	3308      	adds	r3, #8
 8009b56:	4618      	mov	r0, r3
 8009b58:	f003 f994 	bl	800ce84 <RCCEx_PLL2_Config>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009b62:	e014      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b68:	3330      	adds	r3, #48	; 0x30
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f003 fa22 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009b76:	e00a      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009b7e:	e006      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b80:	bf00      	nop
 8009b82:	e004      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b84:	bf00      	nop
 8009b86:	e002      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b88:	bf00      	nop
 8009b8a:	e000      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10d      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8009b96:	4b39      	ldr	r3, [pc, #228]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b9c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8009ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ba4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009ba8:	4a34      	ldr	r2, [pc, #208]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009baa:	430b      	orrs	r3, r1
 8009bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009bb0:	e003      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bb6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8009bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bc8:	2300      	movs	r3, #0
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	d058      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8009bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009bde:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009be2:	d031      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8009be4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009be8:	d82a      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bee:	d02d      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8009bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bf4:	d824      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009bf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bfa:	d029      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8009bfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c00:	d81e      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c06:	d011      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8009c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c0c:	d818      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d020      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c16:	d113      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f003 f930 	bl	800ce84 <RCCEx_PLL2_Config>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8009c2a:	e014      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c30:	3330      	adds	r3, #48	; 0x30
 8009c32:	4618      	mov	r0, r3
 8009c34:	f003 f9be 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8009c3e:	e00a      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009c46:	e006      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c48:	bf00      	nop
 8009c4a:	e004      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c4c:	bf00      	nop
 8009c4e:	e002      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c50:	bf00      	nop
 8009c52:	e000      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d110      	bne.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8009c5e:	4b07      	ldr	r3, [pc, #28]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c70:	4902      	ldr	r1, [pc, #8]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009c78:	e006      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8009c7a:	bf00      	nop
 8009c7c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c84:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	2100      	movs	r1, #0
 8009c92:	6239      	str	r1, [r7, #32]
 8009c94:	f003 0301 	and.w	r3, r3, #1
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
 8009c9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	d055      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8009ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cac:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009cb0:	d031      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8009cb2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009cb6:	d82a      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cbc:	d02d      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8009cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc2:	d824      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009cc4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009cc8:	d029      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8009cca:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009cce:	d81e      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd4:	d011      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8009cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cda:	d818      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d020      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8009ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce4:	d113      	bne.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cea:	3308      	adds	r3, #8
 8009cec:	4618      	mov	r0, r3
 8009cee:	f003 f8c9 	bl	800ce84 <RCCEx_PLL2_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cf8:	e014      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cfe:	3330      	adds	r3, #48	; 0x30
 8009d00:	4618      	mov	r0, r3
 8009d02:	f003 f957 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d0c:	e00a      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009d14:	e006      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009d16:	bf00      	nop
 8009d18:	e004      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009d1a:	bf00      	nop
 8009d1c:	e002      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009d1e:	bf00      	nop
 8009d20:	e000      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d24:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10d      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8009d2c:	4b88      	ldr	r3, [pc, #544]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d32:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8009d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d3e:	4984      	ldr	r1, [pc, #528]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009d46:	e003      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	61b9      	str	r1, [r7, #24]
 8009d5c:	f003 0302 	and.w	r3, r3, #2
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d66:	460b      	mov	r3, r1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	d03d      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8009d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d81c      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8009d78:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8009d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7e:	bf00      	nop
 8009d80:	08009dbb 	.word	0x08009dbb
 8009d84:	08009d91 	.word	0x08009d91
 8009d88:	08009d9f 	.word	0x08009d9f
 8009d8c:	08009dbb 	.word	0x08009dbb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d90:	4b6f      	ldr	r3, [pc, #444]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	4a6e      	ldr	r2, [pc, #440]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d9a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009d9c:	e00e      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009da2:	3308      	adds	r3, #8
 8009da4:	4618      	mov	r0, r3
 8009da6:	f003 f86d 	bl	800ce84 <RCCEx_PLL2_Config>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8009db0:	e004      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009db8:	e000      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8009dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10d      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009dc4:	4b62      	ldr	r3, [pc, #392]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009dca:	f023 0203 	bic.w	r2, r3, #3
 8009dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dd2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009dd6:	495e      	ldr	r1, [pc, #376]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009dde:	e003      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009de4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	2100      	movs	r1, #0
 8009df2:	6139      	str	r1, [r7, #16]
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	617b      	str	r3, [r7, #20]
 8009dfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4313      	orrs	r3, r2
 8009e02:	d03a      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8009e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e10:	d00e      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8009e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e16:	d815      	bhi.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d017      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8009e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e20:	d110      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e22:	4b4b      	ldr	r3, [pc, #300]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e26:	4a4a      	ldr	r2, [pc, #296]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e2c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009e2e:	e00e      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e34:	3308      	adds	r3, #8
 8009e36:	4618      	mov	r0, r3
 8009e38:	f003 f824 	bl	800ce84 <RCCEx_PLL2_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009e42:	e004      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009e4a:	e000      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8009e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10d      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8009e56:	4b3e      	ldr	r3, [pc, #248]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009e68:	4939      	ldr	r1, [pc, #228]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8009e70:	e003      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	2100      	movs	r1, #0
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e90:	460b      	mov	r3, r1
 8009e92:	4313      	orrs	r3, r2
 8009e94:	d038      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8009e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009e9e:	2b30      	cmp	r3, #48	; 0x30
 8009ea0:	d01b      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8009ea2:	2b30      	cmp	r3, #48	; 0x30
 8009ea4:	d815      	bhi.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8009ea6:	2b10      	cmp	r3, #16
 8009ea8:	d002      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8009eaa:	2b20      	cmp	r3, #32
 8009eac:	d007      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8009eae:	e010      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb0:	4b27      	ldr	r3, [pc, #156]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	4a26      	ldr	r2, [pc, #152]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eba:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ebc:	e00e      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009ebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ec2:	3330      	adds	r3, #48	; 0x30
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f003 f875 	bl	800cfb4 <RCCEx_PLL3_Config>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8009ed0:	e004      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009ed8:	e000      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8009eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009edc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10d      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009ee6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009eea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ef2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009ef6:	4916      	ldr	r1, [pc, #88]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009efe:	e003      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	2100      	movs	r1, #0
 8009f12:	6039      	str	r1, [r7, #0]
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	607b      	str	r3, [r7, #4]
 8009f1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4313      	orrs	r3, r2
 8009f22:	d00c      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009f36:	4906      	ldr	r1, [pc, #24]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8009f3e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f4e:	bf00      	nop
 8009f50:	44020c00 	.word	0x44020c00

08009f54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b08b      	sub	sp, #44	; 0x2c
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009f5c:	4bad      	ldr	r3, [pc, #692]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f64:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009f66:	4bab      	ldr	r3, [pc, #684]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8009f70:	4ba8      	ldr	r3, [pc, #672]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f74:	0a1b      	lsrs	r3, r3, #8
 8009f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f7a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8009f7c:	4ba5      	ldr	r3, [pc, #660]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f86:	4ba3      	ldr	r3, [pc, #652]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8a:	08db      	lsrs	r3, r3, #3
 8009f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	fb02 f303 	mul.w	r3, r2, r3
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 8126 	beq.w	800a1f6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d053      	beq.n	800a058 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d86f      	bhi.n	800a096 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d003      	beq.n	8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d02b      	beq.n	800a01a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8009fc2:	e068      	b.n	800a096 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fc4:	4b93      	ldr	r3, [pc, #588]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	08db      	lsrs	r3, r3, #3
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	4a92      	ldr	r2, [pc, #584]	; (800a218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff8:	ed97 6a04 	vldr	s12, [r7, #16]
 8009ffc:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a21c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a014:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a018:	e068      	b.n	800a0ec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a024:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	ed97 6a04 	vldr	s12, [r7, #16]
 800a03a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a21c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a056:	e049      	b.n	800a0ec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a224 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800a066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	ee07 3a90 	vmov	s15, r3
 800a070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a074:	ed97 6a04 	vldr	s12, [r7, #16]
 800a078:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a21c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a07c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a090:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a094:	e02a      	b.n	800a0ec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a096:	4b5f      	ldr	r3, [pc, #380]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	08db      	lsrs	r3, r3, #3
 800a09c:	f003 0303 	and.w	r3, r3, #3
 800a0a0:	4a5d      	ldr	r2, [pc, #372]	; (800a218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	ee07 3a90 	vmov	s15, r3
 800a0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ca:	ed97 6a04 	vldr	s12, [r7, #16]
 800a0ce:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a21c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a0ea:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0ec:	4b49      	ldr	r3, [pc, #292]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0f8:	d121      	bne.n	800a13e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a0fa:	4b46      	ldr	r3, [pc, #280]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d017      	beq.n	800a136 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a106:	4b43      	ldr	r3, [pc, #268]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10a:	0a5b      	lsrs	r3, r3, #9
 800a10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800a118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a11c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a120:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e006      	b.n	800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	e002      	b.n	800a144 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a144:	4b33      	ldr	r3, [pc, #204]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a14c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a150:	d121      	bne.n	800a196 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a152:	4b30      	ldr	r3, [pc, #192]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d017      	beq.n	800a18e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a15e:	4b2d      	ldr	r3, [pc, #180]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a162:	0c1b      	lsrs	r3, r3, #16
 800a164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a174:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a178:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a17c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a184:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	605a      	str	r2, [r3, #4]
 800a18c:	e006      	b.n	800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
 800a194:	e002      	b.n	800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a19c:	4b1d      	ldr	r3, [pc, #116]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1a8:	d121      	bne.n	800a1ee <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a1aa:	4b1a      	ldr	r3, [pc, #104]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d017      	beq.n	800a1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a1b6:	4b17      	ldr	r3, [pc, #92]	; (800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ba:	0e1b      	lsrs	r3, r3, #24
 800a1bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1c0:	ee07 3a90 	vmov	s15, r3
 800a1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800a1c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a1d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a1d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1dc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1e4:	e010      	b.n	800a208 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	609a      	str	r2, [r3, #8]
}
 800a1ec:	e00c      	b.n	800a208 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	609a      	str	r2, [r3, #8]
}
 800a1f4:	e008      	b.n	800a208 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	609a      	str	r2, [r3, #8]
}
 800a208:	bf00      	nop
 800a20a:	372c      	adds	r7, #44	; 0x2c
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	44020c00 	.word	0x44020c00
 800a218:	03d09000 	.word	0x03d09000
 800a21c:	46000000 	.word	0x46000000
 800a220:	4a742400 	.word	0x4a742400
 800a224:	4af42400 	.word	0x4af42400

0800a228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800a228:	b480      	push	{r7}
 800a22a:	b08b      	sub	sp, #44	; 0x2c
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a230:	4bad      	ldr	r3, [pc, #692]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a238:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a23a:	4bab      	ldr	r3, [pc, #684]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23e:	f003 0303 	and.w	r3, r3, #3
 800a242:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800a244:	4ba8      	ldr	r3, [pc, #672]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	0a1b      	lsrs	r3, r3, #8
 800a24a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a24e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800a250:	4ba5      	ldr	r3, [pc, #660]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a254:	f003 0310 	and.w	r3, r3, #16
 800a258:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a25a:	4ba3      	ldr	r3, [pc, #652]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	08db      	lsrs	r3, r3, #3
 800a260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	fb02 f303 	mul.w	r3, r2, r3
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a272:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 8126 	beq.w	800a4ca <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	2b03      	cmp	r3, #3
 800a282:	d053      	beq.n	800a32c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	2b03      	cmp	r3, #3
 800a288:	d86f      	bhi.n	800a36a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d003      	beq.n	800a298 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	2b02      	cmp	r3, #2
 800a294:	d02b      	beq.n	800a2ee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800a296:	e068      	b.n	800a36a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a298:	4b93      	ldr	r3, [pc, #588]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	08db      	lsrs	r3, r3, #3
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	4a92      	ldr	r2, [pc, #584]	; (800a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a2a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	ee07 3a90 	vmov	s15, r3
 800a2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	ee07 3a90 	vmov	s15, r3
 800a2c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2cc:	ed97 6a04 	vldr	s12, [r7, #16]
 800a2d0:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a2d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a2ec:	e068      	b.n	800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	ee07 3a90 	vmov	s15, r3
 800a2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a2fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	ee07 3a90 	vmov	s15, r3
 800a306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a30a:	ed97 6a04 	vldr	s12, [r7, #16]
 800a30e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a31a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a326:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a32a:	e049      	b.n	800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	ee07 3a90 	vmov	s15, r3
 800a332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a336:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800a33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	ee07 3a90 	vmov	s15, r3
 800a344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a348:	ed97 6a04 	vldr	s12, [r7, #16]
 800a34c:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a35c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a360:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a364:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a368:	e02a      	b.n	800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a36a:	4b5f      	ldr	r3, [pc, #380]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	08db      	lsrs	r3, r3, #3
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	4a5d      	ldr	r2, [pc, #372]	; (800a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a376:	fa22 f303 	lsr.w	r3, r2, r3
 800a37a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	ee07 3a90 	vmov	s15, r3
 800a38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a39e:	ed97 6a04 	vldr	s12, [r7, #16]
 800a3a2:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a3be:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3c0:	4b49      	ldr	r3, [pc, #292]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3cc:	d121      	bne.n	800a412 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a3ce:	4b46      	ldr	r3, [pc, #280]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d017      	beq.n	800a40a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a3da:	4b43      	ldr	r3, [pc, #268]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3de:	0a5b      	lsrs	r3, r3, #9
 800a3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e4:	ee07 3a90 	vmov	s15, r3
 800a3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800a3ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a3f4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a3f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a400:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e006      	b.n	800a418 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	e002      	b.n	800a418 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a418:	4b33      	ldr	r3, [pc, #204]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a424:	d121      	bne.n	800a46a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a426:	4b30      	ldr	r3, [pc, #192]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d017      	beq.n	800a462 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a432:	4b2d      	ldr	r3, [pc, #180]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a436:	0c1b      	lsrs	r3, r3, #16
 800a438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a43c:	ee07 3a90 	vmov	s15, r3
 800a440:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a448:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a44c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a458:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	605a      	str	r2, [r3, #4]
 800a460:	e006      	b.n	800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	605a      	str	r2, [r3, #4]
 800a468:	e002      	b.n	800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a470:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a47c:	d121      	bne.n	800a4c2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a47e:	4b1a      	ldr	r3, [pc, #104]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d017      	beq.n	800a4ba <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a48a:	4b17      	ldr	r3, [pc, #92]	; (800a4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	0e1b      	lsrs	r3, r3, #24
 800a490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a494:	ee07 3a90 	vmov	s15, r3
 800a498:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800a49c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a4a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a4a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4b0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a4b8:	e010      	b.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	609a      	str	r2, [r3, #8]
}
 800a4c0:	e00c      	b.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	609a      	str	r2, [r3, #8]
}
 800a4c8:	e008      	b.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	609a      	str	r2, [r3, #8]
}
 800a4dc:	bf00      	nop
 800a4de:	372c      	adds	r7, #44	; 0x2c
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	44020c00 	.word	0x44020c00
 800a4ec:	03d09000 	.word	0x03d09000
 800a4f0:	46000000 	.word	0x46000000
 800a4f4:	4a742400 	.word	0x4a742400
 800a4f8:	4af42400 	.word	0x4af42400

0800a4fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b08b      	sub	sp, #44	; 0x2c
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a504:	4bad      	ldr	r3, [pc, #692]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a50e:	4bab      	ldr	r3, [pc, #684]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800a518:	4ba8      	ldr	r3, [pc, #672]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51c:	0a1b      	lsrs	r3, r3, #8
 800a51e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a522:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800a524:	4ba5      	ldr	r3, [pc, #660]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a528:	f003 0310 	and.w	r3, r3, #16
 800a52c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a52e:	4ba3      	ldr	r3, [pc, #652]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a532:	08db      	lsrs	r3, r3, #3
 800a534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	fb02 f303 	mul.w	r3, r2, r3
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a546:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 8126 	beq.w	800a79e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	2b03      	cmp	r3, #3
 800a556:	d053      	beq.n	800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d86f      	bhi.n	800a63e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d003      	beq.n	800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d02b      	beq.n	800a5c2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800a56a:	e068      	b.n	800a63e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a56c:	4b93      	ldr	r3, [pc, #588]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	08db      	lsrs	r3, r3, #3
 800a572:	f003 0303 	and.w	r3, r3, #3
 800a576:	4a92      	ldr	r2, [pc, #584]	; (800a7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a578:	fa22 f303 	lsr.w	r3, r2, r3
 800a57c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	ee07 3a90 	vmov	s15, r3
 800a584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	ee07 3a90 	vmov	s15, r3
 800a59c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a0:	ed97 6a04 	vldr	s12, [r7, #16]
 800a5a4:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a5a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a5c0:	e068      	b.n	800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	ee07 3a90 	vmov	s15, r3
 800a5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5cc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800a5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5de:	ed97 6a04 	vldr	s12, [r7, #16]
 800a5e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a5fe:	e049      	b.n	800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a60a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800a60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	ee07 3a90 	vmov	s15, r3
 800a618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61c:	ed97 6a04 	vldr	s12, [r7, #16]
 800a620:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a638:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a63c:	e02a      	b.n	800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a63e:	4b5f      	ldr	r3, [pc, #380]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	08db      	lsrs	r3, r3, #3
 800a644:	f003 0303 	and.w	r3, r3, #3
 800a648:	4a5d      	ldr	r2, [pc, #372]	; (800a7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a64a:	fa22 f303 	lsr.w	r3, r2, r3
 800a64e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	ee07 3a90 	vmov	s15, r3
 800a656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	ee07 3a90 	vmov	s15, r3
 800a660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	ee07 3a90 	vmov	s15, r3
 800a66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a672:	ed97 6a04 	vldr	s12, [r7, #16]
 800a676:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a692:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a694:	4b49      	ldr	r3, [pc, #292]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6a0:	d121      	bne.n	800a6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a6a2:	4b46      	ldr	r3, [pc, #280]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d017      	beq.n	800a6de <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a6ae:	4b43      	ldr	r3, [pc, #268]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b2:	0a5b      	lsrs	r3, r3, #9
 800a6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b8:	ee07 3a90 	vmov	s15, r3
 800a6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800a6c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a6c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6d4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	e006      	b.n	800a6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	e002      	b.n	800a6ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6ec:	4b33      	ldr	r3, [pc, #204]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f8:	d121      	bne.n	800a73e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a6fa:	4b30      	ldr	r3, [pc, #192]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d017      	beq.n	800a736 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a706:	4b2d      	ldr	r3, [pc, #180]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70a:	0c1b      	lsrs	r3, r3, #16
 800a70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a710:	ee07 3a90 	vmov	s15, r3
 800a714:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a71c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a720:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a72c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	605a      	str	r2, [r3, #4]
 800a734:	e006      	b.n	800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	605a      	str	r2, [r3, #4]
 800a73c:	e002      	b.n	800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a744:	4b1d      	ldr	r3, [pc, #116]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a74c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a750:	d121      	bne.n	800a796 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a752:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d017      	beq.n	800a78e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a75e:	4b17      	ldr	r3, [pc, #92]	; (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a762:	0e1b      	lsrs	r3, r3, #24
 800a764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800a770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a774:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a778:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a784:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800a78c:	e010      	b.n	800a7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	609a      	str	r2, [r3, #8]
}
 800a794:	e00c      	b.n	800a7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	609a      	str	r2, [r3, #8]
}
 800a79c:	e008      	b.n	800a7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	609a      	str	r2, [r3, #8]
}
 800a7b0:	bf00      	nop
 800a7b2:	372c      	adds	r7, #44	; 0x2c
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	44020c00 	.word	0x44020c00
 800a7c0:	03d09000 	.word	0x03d09000
 800a7c4:	46000000 	.word	0x46000000
 800a7c8:	4a742400 	.word	0x4a742400
 800a7cc:	4af42400 	.word	0x4af42400

0800a7d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a7d0:	b590      	push	{r4, r7, lr}
 800a7d2:	b08f      	sub	sp, #60	; 0x3c
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a7da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a7de:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800a7e2:	4321      	orrs	r1, r4
 800a7e4:	d150      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a7e6:	4b26      	ldr	r3, [pc, #152]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a7e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7f0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a7f2:	4b23      	ldr	r3, [pc, #140]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a7f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7f8:	f003 0302 	and.w	r3, r3, #2
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d108      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a806:	d104      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a80c:	637b      	str	r3, [r7, #52]	; 0x34
 800a80e:	f002 bb2a 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a812:	4b1b      	ldr	r3, [pc, #108]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a81c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a820:	d108      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a828:	d104      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800a82a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a82e:	637b      	str	r3, [r7, #52]	; 0x34
 800a830:	f002 bb19 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800a834:	4b12      	ldr	r3, [pc, #72]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a83c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a840:	d119      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a848:	d115      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a856:	d30a      	bcc.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800a858:	4b09      	ldr	r3, [pc, #36]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	0a1b      	lsrs	r3, r3, #8
 800a85e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a862:	4a08      	ldr	r2, [pc, #32]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a864:	fbb2 f3f3 	udiv	r3, r2, r3
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a86a:	f002 bafc 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a872:	f002 baf8 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a876:	2300      	movs	r3, #0
 800a878:	637b      	str	r3, [r7, #52]	; 0x34
 800a87a:	f002 baf4 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a87e:	bf00      	nop
 800a880:	44020c00 	.word	0x44020c00
 800a884:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800a888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a88c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800a890:	ea50 0104 	orrs.w	r1, r0, r4
 800a894:	f001 8275 	beq.w	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800a898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a89c:	2801      	cmp	r0, #1
 800a89e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800a8a2:	f082 82dd 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a8a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8aa:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800a8ae:	ea50 0104 	orrs.w	r1, r0, r4
 800a8b2:	f001 816c 	beq.w	800bb8e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800a8b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8ba:	2801      	cmp	r0, #1
 800a8bc:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800a8c0:	f082 82ce 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a8c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8c8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800a8cc:	ea50 0104 	orrs.w	r1, r0, r4
 800a8d0:	f001 8602 	beq.w	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800a8d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8d8:	2801      	cmp	r0, #1
 800a8da:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800a8de:	f082 82bf 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a8e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8e6:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800a8ea:	ea50 0104 	orrs.w	r1, r0, r4
 800a8ee:	f001 854c 	beq.w	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800a8f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a8f6:	2801      	cmp	r0, #1
 800a8f8:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800a8fc:	f082 82b0 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a900:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a904:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800a908:	ea50 0104 	orrs.w	r1, r0, r4
 800a90c:	f001 849e 	beq.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800a910:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a914:	2801      	cmp	r0, #1
 800a916:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800a91a:	f082 82a1 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a91e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a922:	f1a1 0420 	sub.w	r4, r1, #32
 800a926:	ea50 0104 	orrs.w	r1, r0, r4
 800a92a:	f001 83e8 	beq.w	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800a92e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a932:	2801      	cmp	r0, #1
 800a934:	f171 0120 	sbcs.w	r1, r1, #32
 800a938:	f082 8292 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a93c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a940:	f1a1 0410 	sub.w	r4, r1, #16
 800a944:	ea50 0104 	orrs.w	r1, r0, r4
 800a948:	f002 8256 	beq.w	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a94c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a950:	2801      	cmp	r0, #1
 800a952:	f171 0110 	sbcs.w	r1, r1, #16
 800a956:	f082 8283 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a95a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a95e:	f1a1 0408 	sub.w	r4, r1, #8
 800a962:	ea50 0104 	orrs.w	r1, r0, r4
 800a966:	f002 81cc 	beq.w	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800a96a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a96e:	2801      	cmp	r0, #1
 800a970:	f171 0108 	sbcs.w	r1, r1, #8
 800a974:	f082 8274 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a97c:	1f0c      	subs	r4, r1, #4
 800a97e:	ea50 0104 	orrs.w	r1, r0, r4
 800a982:	f001 8648 	beq.w	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800a986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a98a:	2801      	cmp	r0, #1
 800a98c:	f171 0104 	sbcs.w	r1, r1, #4
 800a990:	f082 8266 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a994:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a998:	1e8c      	subs	r4, r1, #2
 800a99a:	ea50 0104 	orrs.w	r1, r0, r4
 800a99e:	f002 8143 	beq.w	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800a9a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9a6:	2801      	cmp	r0, #1
 800a9a8:	f171 0102 	sbcs.w	r1, r1, #2
 800a9ac:	f082 8258 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a9b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9b4:	1e4c      	subs	r4, r1, #1
 800a9b6:	ea50 0104 	orrs.w	r1, r0, r4
 800a9ba:	f002 80ce 	beq.w	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800a9be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9c2:	2801      	cmp	r0, #1
 800a9c4:	f171 0101 	sbcs.w	r1, r1, #1
 800a9c8:	f082 824a 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a9cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9d0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800a9d4:	4321      	orrs	r1, r4
 800a9d6:	f002 8059 	beq.w	800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800a9da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9de:	4cd9      	ldr	r4, [pc, #868]	; (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	f171 0100 	sbcs.w	r1, r1, #0
 800a9e6:	f082 823b 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a9ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9ee:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800a9f2:	4321      	orrs	r1, r4
 800a9f4:	f001 87d9 	beq.w	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800a9f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9fc:	4cd2      	ldr	r4, [pc, #840]	; (800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800a9fe:	42a0      	cmp	r0, r4
 800aa00:	f171 0100 	sbcs.w	r1, r1, #0
 800aa04:	f082 822c 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa0c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800aa10:	4321      	orrs	r1, r4
 800aa12:	f001 8751 	beq.w	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800aa16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa1a:	4ccc      	ldr	r4, [pc, #816]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800aa1c:	42a0      	cmp	r0, r4
 800aa1e:	f171 0100 	sbcs.w	r1, r1, #0
 800aa22:	f082 821d 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa26:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa2a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800aa2e:	4321      	orrs	r1, r4
 800aa30:	f001 869a 	beq.w	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800aa34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa38:	4cc5      	ldr	r4, [pc, #788]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800aa3a:	42a0      	cmp	r0, r4
 800aa3c:	f171 0100 	sbcs.w	r1, r1, #0
 800aa40:	f082 820e 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa48:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800aa4c:	4321      	orrs	r1, r4
 800aa4e:	f001 8612 	beq.w	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800aa52:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa56:	4cbf      	ldr	r4, [pc, #764]	; (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800aa58:	42a0      	cmp	r0, r4
 800aa5a:	f171 0100 	sbcs.w	r1, r1, #0
 800aa5e:	f082 81ff 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa62:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa66:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800aa6a:	4321      	orrs	r1, r4
 800aa6c:	f002 817e 	beq.w	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800aa70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa74:	4cb8      	ldr	r4, [pc, #736]	; (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aa76:	42a0      	cmp	r0, r4
 800aa78:	f171 0100 	sbcs.w	r1, r1, #0
 800aa7c:	f082 81f0 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa84:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800aa88:	4321      	orrs	r1, r4
 800aa8a:	f000 829e 	beq.w	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800aa8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa92:	4cb2      	ldr	r4, [pc, #712]	; (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa94:	42a0      	cmp	r0, r4
 800aa96:	f171 0100 	sbcs.w	r1, r1, #0
 800aa9a:	f082 81e1 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaa2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800aaa6:	4321      	orrs	r1, r4
 800aaa8:	f000 826d 	beq.w	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800aaac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aab0:	4cab      	ldr	r4, [pc, #684]	; (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aab2:	42a0      	cmp	r0, r4
 800aab4:	f171 0100 	sbcs.w	r1, r1, #0
 800aab8:	f082 81d2 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aabc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aac0:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800aac4:	4321      	orrs	r1, r4
 800aac6:	f001 800d 	beq.w	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800aaca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aace:	4ca5      	ldr	r4, [pc, #660]	; (800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aad0:	42a0      	cmp	r0, r4
 800aad2:	f171 0100 	sbcs.w	r1, r1, #0
 800aad6:	f082 81c3 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aada:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aade:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800aae2:	4321      	orrs	r1, r4
 800aae4:	f000 81d0 	beq.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800aae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaec:	4c9e      	ldr	r4, [pc, #632]	; (800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800aaee:	42a0      	cmp	r0, r4
 800aaf0:	f171 0100 	sbcs.w	r1, r1, #0
 800aaf4:	f082 81b4 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aaf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aafc:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800ab00:	4321      	orrs	r1, r4
 800ab02:	f000 8142 	beq.w	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800ab06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab0a:	4c98      	ldr	r4, [pc, #608]	; (800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ab0c:	42a0      	cmp	r0, r4
 800ab0e:	f171 0100 	sbcs.w	r1, r1, #0
 800ab12:	f082 81a5 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab1a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800ab1e:	4321      	orrs	r1, r4
 800ab20:	f001 824e 	beq.w	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800ab24:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab28:	4c91      	ldr	r4, [pc, #580]	; (800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800ab2a:	42a0      	cmp	r0, r4
 800ab2c:	f171 0100 	sbcs.w	r1, r1, #0
 800ab30:	f082 8196 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab38:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800ab3c:	4321      	orrs	r1, r4
 800ab3e:	f001 8197 	beq.w	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800ab42:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab46:	4c8b      	ldr	r4, [pc, #556]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800ab48:	42a0      	cmp	r0, r4
 800ab4a:	f171 0100 	sbcs.w	r1, r1, #0
 800ab4e:	f082 8187 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab52:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab56:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800ab5a:	4321      	orrs	r1, r4
 800ab5c:	f001 8154 	beq.w	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800ab60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab64:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800ab68:	f171 0100 	sbcs.w	r1, r1, #0
 800ab6c:	f082 8178 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab74:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800ab78:	4321      	orrs	r1, r4
 800ab7a:	f001 80b7 	beq.w	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800ab7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab82:	f248 0401 	movw	r4, #32769	; 0x8001
 800ab86:	42a0      	cmp	r0, r4
 800ab88:	f171 0100 	sbcs.w	r1, r1, #0
 800ab8c:	f082 8168 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab94:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800ab98:	4321      	orrs	r1, r4
 800ab9a:	f001 8064 	beq.w	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800ab9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aba2:	f244 0401 	movw	r4, #16385	; 0x4001
 800aba6:	42a0      	cmp	r0, r4
 800aba8:	f171 0100 	sbcs.w	r1, r1, #0
 800abac:	f082 8158 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abb4:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800abb8:	4321      	orrs	r1, r4
 800abba:	f001 8011 	beq.w	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800abbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abc2:	f242 0401 	movw	r4, #8193	; 0x2001
 800abc6:	42a0      	cmp	r0, r4
 800abc8:	f171 0100 	sbcs.w	r1, r1, #0
 800abcc:	f082 8148 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abd4:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800abd8:	4321      	orrs	r1, r4
 800abda:	f000 871e 	beq.w	800ba1a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800abde:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abe2:	f241 0401 	movw	r4, #4097	; 0x1001
 800abe6:	42a0      	cmp	r0, r4
 800abe8:	f171 0100 	sbcs.w	r1, r1, #0
 800abec:	f082 8138 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abf4:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800abf8:	4321      	orrs	r1, r4
 800abfa:	f000 86a8 	beq.w	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800abfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac02:	f640 0401 	movw	r4, #2049	; 0x801
 800ac06:	42a0      	cmp	r0, r4
 800ac08:	f171 0100 	sbcs.w	r1, r1, #0
 800ac0c:	f082 8128 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac14:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800ac18:	4321      	orrs	r1, r4
 800ac1a:	f000 8632 	beq.w	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800ac1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac22:	f240 4401 	movw	r4, #1025	; 0x401
 800ac26:	42a0      	cmp	r0, r4
 800ac28:	f171 0100 	sbcs.w	r1, r1, #0
 800ac2c:	f082 8118 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac34:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800ac38:	4321      	orrs	r1, r4
 800ac3a:	f000 85b0 	beq.w	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800ac3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac42:	f240 2401 	movw	r4, #513	; 0x201
 800ac46:	42a0      	cmp	r0, r4
 800ac48:	f171 0100 	sbcs.w	r1, r1, #0
 800ac4c:	f082 8108 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac54:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800ac58:	4321      	orrs	r1, r4
 800ac5a:	f000 8535 	beq.w	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800ac5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac62:	f240 1401 	movw	r4, #257	; 0x101
 800ac66:	42a0      	cmp	r0, r4
 800ac68:	f171 0100 	sbcs.w	r1, r1, #0
 800ac6c:	f082 80f8 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac74:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800ac78:	4321      	orrs	r1, r4
 800ac7a:	f000 84ba 	beq.w	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800ac7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac82:	2881      	cmp	r0, #129	; 0x81
 800ac84:	f171 0100 	sbcs.w	r1, r1, #0
 800ac88:	f082 80ea 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac90:	2821      	cmp	r0, #33	; 0x21
 800ac92:	f171 0100 	sbcs.w	r1, r1, #0
 800ac96:	d26f      	bcs.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ac98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac9c:	4301      	orrs	r1, r0
 800ac9e:	f002 80df 	beq.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aca6:	1e42      	subs	r2, r0, #1
 800aca8:	f141 33ff 	adc.w	r3, r1, #4294967295
 800acac:	2a20      	cmp	r2, #32
 800acae:	f173 0100 	sbcs.w	r1, r3, #0
 800acb2:	f082 80d5 	bcs.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800acb6:	2a1f      	cmp	r2, #31
 800acb8:	f202 80d2 	bhi.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800acbc:	a101      	add	r1, pc, #4	; (adr r1, 800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800acbe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800acc2:	bf00      	nop
 800acc4:	0800b025 	.word	0x0800b025
 800acc8:	0800b0f1 	.word	0x0800b0f1
 800accc:	0800ce61 	.word	0x0800ce61
 800acd0:	0800b1b1 	.word	0x0800b1b1
 800acd4:	0800ce61 	.word	0x0800ce61
 800acd8:	0800ce61 	.word	0x0800ce61
 800acdc:	0800ce61 	.word	0x0800ce61
 800ace0:	0800b281 	.word	0x0800b281
 800ace4:	0800ce61 	.word	0x0800ce61
 800ace8:	0800ce61 	.word	0x0800ce61
 800acec:	0800ce61 	.word	0x0800ce61
 800acf0:	0800ce61 	.word	0x0800ce61
 800acf4:	0800ce61 	.word	0x0800ce61
 800acf8:	0800ce61 	.word	0x0800ce61
 800acfc:	0800ce61 	.word	0x0800ce61
 800ad00:	0800b363 	.word	0x0800b363
 800ad04:	0800ce61 	.word	0x0800ce61
 800ad08:	0800ce61 	.word	0x0800ce61
 800ad0c:	0800ce61 	.word	0x0800ce61
 800ad10:	0800ce61 	.word	0x0800ce61
 800ad14:	0800ce61 	.word	0x0800ce61
 800ad18:	0800ce61 	.word	0x0800ce61
 800ad1c:	0800ce61 	.word	0x0800ce61
 800ad20:	0800ce61 	.word	0x0800ce61
 800ad24:	0800ce61 	.word	0x0800ce61
 800ad28:	0800ce61 	.word	0x0800ce61
 800ad2c:	0800ce61 	.word	0x0800ce61
 800ad30:	0800ce61 	.word	0x0800ce61
 800ad34:	0800ce61 	.word	0x0800ce61
 800ad38:	0800ce61 	.word	0x0800ce61
 800ad3c:	0800ce61 	.word	0x0800ce61
 800ad40:	0800b439 	.word	0x0800b439
 800ad44:	80000001 	.word	0x80000001
 800ad48:	40000001 	.word	0x40000001
 800ad4c:	20000001 	.word	0x20000001
 800ad50:	10000001 	.word	0x10000001
 800ad54:	08000001 	.word	0x08000001
 800ad58:	04000001 	.word	0x04000001
 800ad5c:	00800001 	.word	0x00800001
 800ad60:	00400001 	.word	0x00400001
 800ad64:	00200001 	.word	0x00200001
 800ad68:	00100001 	.word	0x00100001
 800ad6c:	00080001 	.word	0x00080001
 800ad70:	00040001 	.word	0x00040001
 800ad74:	00020001 	.word	0x00020001
 800ad78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800ad80:	430b      	orrs	r3, r1
 800ad82:	f000 83c4 	beq.w	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800ad86:	f002 b86b 	b.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ad8a:	4ba1      	ldr	r3, [pc, #644]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ad8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad90:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ad94:	633b      	str	r3, [r7, #48]	; 0x30
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad9c:	d036      	beq.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ada4:	d86b      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adac:	d02b      	beq.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adb4:	d863      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adbc:	d01b      	beq.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adc4:	d85b      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d004      	beq.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800add2:	d008      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800add4:	e053      	b.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800add6:	f107 0320 	add.w	r3, r7, #32
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff f8ba 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ade4:	e04e      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ade6:	f107 0314 	add.w	r3, r7, #20
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fa1c 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800adf4:	e046      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adf6:	f107 0308 	add.w	r3, r7, #8
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fb7e 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae04:	e03e      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ae06:	4b83      	ldr	r3, [pc, #524]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae0a:	e03b      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae0c:	4b80      	ldr	r3, [pc, #512]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae12:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ae16:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae18:	4b7d      	ldr	r3, [pc, #500]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d10c      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d109      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae2a:	4b79      	ldr	r3, [pc, #484]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	08db      	lsrs	r3, r3, #3
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	4a78      	ldr	r2, [pc, #480]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800ae36:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae3c:	e01e      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae3e:	4b74      	ldr	r3, [pc, #464]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae4a:	d106      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae52:	d102      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ae54:	4b71      	ldr	r3, [pc, #452]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800ae56:	637b      	str	r3, [r7, #52]	; 0x34
 800ae58:	e010      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae5a:	4b6d      	ldr	r3, [pc, #436]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae66:	d106      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae6e:	d102      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ae70:	4b6b      	ldr	r3, [pc, #428]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800ae72:	637b      	str	r3, [r7, #52]	; 0x34
 800ae74:	e002      	b.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ae7a:	e003      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800ae7c:	e002      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae82:	bf00      	nop
          }
        }
        break;
 800ae84:	f001 bfef 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ae88:	4b61      	ldr	r3, [pc, #388]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ae8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae8e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800ae92:	633b      	str	r3, [r7, #48]	; 0x30
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae9a:	d036      	beq.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aea2:	d86b      	bhi.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800aeaa:	d02b      	beq.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800aeb2:	d863      	bhi.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeba:	d01b      	beq.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aec2:	d85b      	bhi.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d004      	beq.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aed0:	d008      	beq.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800aed2:	e053      	b.n	800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aed4:	f107 0320 	add.w	r3, r7, #32
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff f83b 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aee2:	e04e      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee4:	f107 0314 	add.w	r3, r7, #20
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff f99d 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aef2:	e046      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aef4:	f107 0308 	add.w	r3, r7, #8
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff faff 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af02:	e03e      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800af04:	4b43      	ldr	r3, [pc, #268]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800af06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af08:	e03b      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af0a:	4b41      	ldr	r3, [pc, #260]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af10:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800af14:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af16:	4b3e      	ldr	r3, [pc, #248]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0302 	and.w	r3, r3, #2
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d10c      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af28:	4b39      	ldr	r3, [pc, #228]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	08db      	lsrs	r3, r3, #3
 800af2e:	f003 0303 	and.w	r3, r3, #3
 800af32:	4a39      	ldr	r2, [pc, #228]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800af34:	fa22 f303 	lsr.w	r3, r2, r3
 800af38:	637b      	str	r3, [r7, #52]	; 0x34
 800af3a:	e01e      	b.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af3c:	4b34      	ldr	r3, [pc, #208]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af48:	d106      	bne.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af50:	d102      	bne.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800af52:	4b32      	ldr	r3, [pc, #200]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800af54:	637b      	str	r3, [r7, #52]	; 0x34
 800af56:	e010      	b.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af58:	4b2d      	ldr	r3, [pc, #180]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af64:	d106      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800af66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af6c:	d102      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800af6e:	4b2c      	ldr	r3, [pc, #176]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800af70:	637b      	str	r3, [r7, #52]	; 0x34
 800af72:	e002      	b.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800af78:	e003      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800af7a:	e002      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af80:	bf00      	nop
          }
        }
        break;
 800af82:	f001 bf70 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800af86:	4b22      	ldr	r3, [pc, #136]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af90:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	2b00      	cmp	r3, #0
 800af96:	d108      	bne.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af98:	f107 0320 	add.w	r3, r7, #32
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fe ffd9 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800afa6:	f001 bf5e 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	2b40      	cmp	r3, #64	; 0x40
 800afae:	d108      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afb0:	f107 0314 	add.w	r3, r7, #20
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff f937 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afbe:	f001 bf52 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afc6:	f001 bf4e 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800afca:	4b11      	ldr	r3, [pc, #68]	; (800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800afd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d108      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afdc:	f107 0320 	add.w	r3, r7, #32
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe ffb7 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800afea:	f001 bf3c 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	2b80      	cmp	r3, #128	; 0x80
 800aff2:	d108      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff4:	f107 0314 	add.w	r3, r7, #20
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff f915 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b002:	f001 bf30 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b00a:	f001 bf2c 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b00e:	bf00      	nop
 800b010:	44020c00 	.word	0x44020c00
 800b014:	00bb8000 	.word	0x00bb8000
 800b018:	03d09000 	.word	0x03d09000
 800b01c:	003d0900 	.word	0x003d0900
 800b020:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b024:	4b9d      	ldr	r3, [pc, #628]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b02a:	f003 0307 	and.w	r3, r3, #7
 800b02e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	2b00      	cmp	r3, #0
 800b034:	d104      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b036:	f7fc ff9f 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800b03a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b03c:	f001 bf13 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800b040:	4b96      	ldr	r3, [pc, #600]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b04c:	d10a      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	2b01      	cmp	r3, #1
 800b052:	d107      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b054:	f107 0314 	add.w	r3, r7, #20
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff f8e5 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	637b      	str	r3, [r7, #52]	; 0x34
 800b062:	e043      	b.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800b064:	4b8d      	ldr	r3, [pc, #564]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b070:	d10a      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	2b02      	cmp	r3, #2
 800b076:	d107      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b078:	f107 0308 	add.w	r3, r7, #8
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fa3d 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	637b      	str	r3, [r7, #52]	; 0x34
 800b086:	e031      	b.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b088:	4b84      	ldr	r3, [pc, #528]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b02      	cmp	r3, #2
 800b092:	d10c      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	2b03      	cmp	r3, #3
 800b098:	d109      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b09a:	4b80      	ldr	r3, [pc, #512]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	08db      	lsrs	r3, r3, #3
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	4a7e      	ldr	r2, [pc, #504]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ac:	e01e      	b.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800b0ae:	4b7b      	ldr	r3, [pc, #492]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0ba:	d105      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d102      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800b0c2:	4b78      	ldr	r3, [pc, #480]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0c6:	e011      	b.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b0c8:	4b74      	ldr	r3, [pc, #464]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b0ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b0ce:	f003 0302 	and.w	r3, r3, #2
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d106      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	2b05      	cmp	r3, #5
 800b0da:	d103      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800b0dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e2:	e003      	b.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0e8:	f001 bebd 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0ec:	f001 bebb 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b0f0:	4b6a      	ldr	r3, [pc, #424]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b0f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b0f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0fa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d104      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b102:	f7fc ff23 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b106:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b108:	f001 bead 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800b10c:	4b63      	ldr	r3, [pc, #396]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b118:	d10a      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	2b08      	cmp	r3, #8
 800b11e:	d107      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b120:	f107 0314 	add.w	r3, r7, #20
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff f87f 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
 800b12e:	e03d      	b.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	2b10      	cmp	r3, #16
 800b134:	d108      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b136:	f107 0308 	add.w	r3, r7, #8
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7ff f9de 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b144:	f001 be8f 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b148:	4b54      	ldr	r3, [pc, #336]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b02      	cmp	r3, #2
 800b152:	d10c      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	2b18      	cmp	r3, #24
 800b158:	d109      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b15a:	4b50      	ldr	r3, [pc, #320]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	08db      	lsrs	r3, r3, #3
 800b160:	f003 0303 	and.w	r3, r3, #3
 800b164:	4a4e      	ldr	r2, [pc, #312]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b166:	fa22 f303 	lsr.w	r3, r2, r3
 800b16a:	637b      	str	r3, [r7, #52]	; 0x34
 800b16c:	e01e      	b.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800b16e:	4b4b      	ldr	r3, [pc, #300]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b17a:	d105      	bne.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	2b20      	cmp	r3, #32
 800b180:	d102      	bne.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800b182:	4b48      	ldr	r3, [pc, #288]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b184:	637b      	str	r3, [r7, #52]	; 0x34
 800b186:	e011      	b.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b188:	4b44      	ldr	r3, [pc, #272]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b18a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b02      	cmp	r3, #2
 800b194:	d106      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	2b28      	cmp	r3, #40	; 0x28
 800b19a:	d103      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800b19c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a2:	e003      	b.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1a8:	f001 be5d 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1ac:	f001 be5b 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b1b0:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b1b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b1ba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d104      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1c2:	f7fc fec3 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b1c6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b1c8:	f001 be4d 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800b1cc:	4b33      	ldr	r3, [pc, #204]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1d8:	d10a      	bne.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	2b40      	cmp	r3, #64	; 0x40
 800b1de:	d107      	bne.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1e0:	f107 0314 	add.w	r3, r7, #20
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff f81f 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ee:	e045      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800b1f0:	4b2a      	ldr	r3, [pc, #168]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1fc:	d10a      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	2b80      	cmp	r3, #128	; 0x80
 800b202:	d107      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b204:	f107 0308 	add.w	r3, r7, #8
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff f977 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	637b      	str	r3, [r7, #52]	; 0x34
 800b212:	e033      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b214:	4b21      	ldr	r3, [pc, #132]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d10c      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800b220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b222:	2bc0      	cmp	r3, #192	; 0xc0
 800b224:	d109      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b226:	4b1d      	ldr	r3, [pc, #116]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	08db      	lsrs	r3, r3, #3
 800b22c:	f003 0303 	and.w	r3, r3, #3
 800b230:	4a1b      	ldr	r2, [pc, #108]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b232:	fa22 f303 	lsr.w	r3, r2, r3
 800b236:	637b      	str	r3, [r7, #52]	; 0x34
 800b238:	e020      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800b23a:	4b18      	ldr	r3, [pc, #96]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b246:	d106      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b24e:	d102      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800b250:	4b14      	ldr	r3, [pc, #80]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b252:	637b      	str	r3, [r7, #52]	; 0x34
 800b254:	e012      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b256:	4b11      	ldr	r3, [pc, #68]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b25c:	f003 0302 	and.w	r3, r3, #2
 800b260:	2b02      	cmp	r3, #2
 800b262:	d107      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b26a:	d103      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800b26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b270:	637b      	str	r3, [r7, #52]	; 0x34
 800b272:	e003      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800b274:	2300      	movs	r3, #0
 800b276:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b278:	f001 bdf5 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b27c:	f001 bdf3 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b280:	4b06      	ldr	r3, [pc, #24]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b286:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800b28a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10a      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b292:	f7fc fe5b 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b296:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b298:	f001 bde5 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b29c:	44020c00 	.word	0x44020c00
 800b2a0:	03d09000 	.word	0x03d09000
 800b2a4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800b2a8:	4ba0      	ldr	r3, [pc, #640]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2b4:	d10b      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2bc:	d107      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2be:	f107 0314 	add.w	r3, r7, #20
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe ffb0 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b2cc:	e047      	b.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800b2ce:	4b97      	ldr	r3, [pc, #604]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2da:	d10b      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e2:	d107      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e4:	f107 0308 	add.w	r3, r7, #8
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff f907 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2f2:	e034      	b.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b2f4:	4b8d      	ldr	r3, [pc, #564]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0302 	and.w	r3, r3, #2
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d10d      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b306:	d109      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b308:	4b88      	ldr	r3, [pc, #544]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	08db      	lsrs	r3, r3, #3
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	4a87      	ldr	r2, [pc, #540]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b314:	fa22 f303 	lsr.w	r3, r2, r3
 800b318:	637b      	str	r3, [r7, #52]	; 0x34
 800b31a:	e020      	b.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800b31c:	4b83      	ldr	r3, [pc, #524]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b328:	d106      	bne.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b330:	d102      	bne.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800b332:	4b80      	ldr	r3, [pc, #512]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
 800b336:	e012      	b.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b338:	4b7c      	ldr	r3, [pc, #496]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b33a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b33e:	f003 0302 	and.w	r3, r3, #2
 800b342:	2b02      	cmp	r3, #2
 800b344:	d107      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b34c:	d103      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800b34e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
 800b354:	e003      	b.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800b356:	2300      	movs	r3, #0
 800b358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b35a:	f001 bd84 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b35e:	f001 bd82 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b362:	4b72      	ldr	r3, [pc, #456]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b368:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b36c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	2b00      	cmp	r3, #0
 800b372:	d104      	bne.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b374:	f7fc fdea 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b378:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800b37a:	f001 bd74 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800b37e:	4b6b      	ldr	r3, [pc, #428]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b38a:	d10b      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b392:	d107      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b394:	f107 0314 	add.w	r3, r7, #20
 800b398:	4618      	mov	r0, r3
 800b39a:	f7fe ff45 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b3a2:	e047      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800b3a4:	4b61      	ldr	r3, [pc, #388]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b0:	d10b      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3b8:	d107      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ba:	f107 0308 	add.w	r3, r7, #8
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff f89c 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b3c8:	e034      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b3ca:	4b58      	ldr	r3, [pc, #352]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d10d      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3dc:	d109      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3de:	4b53      	ldr	r3, [pc, #332]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	08db      	lsrs	r3, r3, #3
 800b3e4:	f003 0303 	and.w	r3, r3, #3
 800b3e8:	4a51      	ldr	r2, [pc, #324]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b3f0:	e020      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800b3f2:	4b4e      	ldr	r3, [pc, #312]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3fe:	d106      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b406:	d102      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800b408:	4b4a      	ldr	r3, [pc, #296]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34
 800b40c:	e012      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b40e:	4b47      	ldr	r3, [pc, #284]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d107      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b422:	d103      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800b424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
 800b42a:	e003      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b430:	f001 bd19 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b434:	f001 bd17 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b438:	4b3c      	ldr	r3, [pc, #240]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b43a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b43e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800b442:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b446:	2b00      	cmp	r3, #0
 800b448:	d104      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b44a:	f7fc fd7f 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b44e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800b450:	f001 bd09 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800b454:	4b35      	ldr	r3, [pc, #212]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b45c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b460:	d10b      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800b462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b468:	d107      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b46a:	f107 0314 	add.w	r3, r7, #20
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe feda 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
 800b478:	e047      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800b47a:	4b2c      	ldr	r3, [pc, #176]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b486:	d10b      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b48e:	d107      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b490:	f107 0308 	add.w	r3, r7, #8
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff f831 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	637b      	str	r3, [r7, #52]	; 0x34
 800b49e:	e034      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b4a0:	4b22      	ldr	r3, [pc, #136]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0302 	and.w	r3, r3, #2
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d10d      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ae:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800b4b2:	d109      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b4b4:	4b1d      	ldr	r3, [pc, #116]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	08db      	lsrs	r3, r3, #3
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	4a1c      	ldr	r2, [pc, #112]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c6:	e020      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800b4c8:	4b18      	ldr	r3, [pc, #96]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d4:	d106      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4dc:	d102      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800b4de:	4b15      	ldr	r3, [pc, #84]	; (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b4e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e2:	e012      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b4e4:	4b11      	ldr	r3, [pc, #68]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d107      	bne.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800b4f8:	d103      	bne.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800b4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b500:	e003      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800b502:	2300      	movs	r3, #0
 800b504:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b506:	f001 bcae 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b50a:	f001 bcac 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800b50e:	4b07      	ldr	r3, [pc, #28]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b514:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800b518:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10b      	bne.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b520:	f7fc fd14 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b524:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800b526:	f001 bc9e 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b52a:	bf00      	nop
 800b52c:	44020c00 	.word	0x44020c00
 800b530:	03d09000 	.word	0x03d09000
 800b534:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800b538:	4ba0      	ldr	r3, [pc, #640]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b544:	d10b      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b54c:	d107      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54e:	f107 0314 	add.w	r3, r7, #20
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe fe68 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34
 800b55c:	e047      	b.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800b55e:	4b97      	ldr	r3, [pc, #604]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b56a:	d10b      	bne.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b572:	d107      	bne.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b574:	f107 0308 	add.w	r3, r7, #8
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe ffbf 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	637b      	str	r3, [r7, #52]	; 0x34
 800b582:	e034      	b.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800b584:	4b8d      	ldr	r3, [pc, #564]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d10d      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b596:	d109      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b598:	4b88      	ldr	r3, [pc, #544]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	08db      	lsrs	r3, r3, #3
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	4a87      	ldr	r2, [pc, #540]	; (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5aa:	e020      	b.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800b5ac:	4b83      	ldr	r3, [pc, #524]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b8:	d106      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5c0:	d102      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800b5c2:	4b80      	ldr	r3, [pc, #512]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b5c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c6:	e012      	b.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800b5c8:	4b7c      	ldr	r3, [pc, #496]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b5ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d107      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b5dc:	d103      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800b5de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e4:	e003      	b.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ea:	f001 bc3c 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b5ee:	f001 bc3a 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800b5f2:	4b72      	ldr	r3, [pc, #456]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b5f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5f8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b5fc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b600:	2b00      	cmp	r3, #0
 800b602:	d104      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b604:	f7fc fca2 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b608:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800b60a:	f001 bc2c 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800b60e:	4b6b      	ldr	r3, [pc, #428]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b61a:	d10b      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b622:	d107      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b624:	f107 0314 	add.w	r3, r7, #20
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe fdfd 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	637b      	str	r3, [r7, #52]	; 0x34
 800b632:	e047      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800b634:	4b61      	ldr	r3, [pc, #388]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b63c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b640:	d10b      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b648:	d107      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b64a:	f107 0308 	add.w	r3, r7, #8
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe ff54 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	637b      	str	r3, [r7, #52]	; 0x34
 800b658:	e034      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800b65a:	4b58      	ldr	r3, [pc, #352]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b02      	cmp	r3, #2
 800b664:	d10d      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b66c:	d109      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b66e:	4b53      	ldr	r3, [pc, #332]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	08db      	lsrs	r3, r3, #3
 800b674:	f003 0303 	and.w	r3, r3, #3
 800b678:	4a51      	ldr	r2, [pc, #324]	; (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b67a:	fa22 f303 	lsr.w	r3, r2, r3
 800b67e:	637b      	str	r3, [r7, #52]	; 0x34
 800b680:	e020      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800b682:	4b4e      	ldr	r3, [pc, #312]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b68a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b68e:	d106      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b696:	d102      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800b698:	4b4a      	ldr	r3, [pc, #296]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b69a:	637b      	str	r3, [r7, #52]	; 0x34
 800b69c:	e012      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800b69e:	4b47      	ldr	r3, [pc, #284]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b6a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6a4:	f003 0302 	and.w	r3, r3, #2
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d107      	bne.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b6b2:	d103      	bne.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800b6b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ba:	e003      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6c0:	f001 bbd1 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6c4:	f001 bbcf 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800b6c8:	4b3c      	ldr	r3, [pc, #240]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b6ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b6ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b6d2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b6da:	f7fc fc37 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b6de:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800b6e0:	f001 bbc1 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800b6e4:	4b35      	ldr	r3, [pc, #212]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6f0:	d10b      	bne.n	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6f8:	d107      	bne.n	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6fa:	f107 0314 	add.w	r3, r7, #20
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe fd92 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	637b      	str	r3, [r7, #52]	; 0x34
 800b708:	e047      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800b70a:	4b2c      	ldr	r3, [pc, #176]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b716:	d10b      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b71e:	d107      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b720:	f107 0308 	add.w	r3, r7, #8
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe fee9 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34
 800b72e:	e034      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800b730:	4b22      	ldr	r3, [pc, #136]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d10d      	bne.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b742:	d109      	bne.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b744:	4b1d      	ldr	r3, [pc, #116]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	08db      	lsrs	r3, r3, #3
 800b74a:	f003 0303 	and.w	r3, r3, #3
 800b74e:	4a1c      	ldr	r2, [pc, #112]	; (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b750:	fa22 f303 	lsr.w	r3, r2, r3
 800b754:	637b      	str	r3, [r7, #52]	; 0x34
 800b756:	e020      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800b758:	4b18      	ldr	r3, [pc, #96]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b764:	d106      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b76c:	d102      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800b76e:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b770:	637b      	str	r3, [r7, #52]	; 0x34
 800b772:	e012      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800b774:	4b11      	ldr	r3, [pc, #68]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b77a:	f003 0302 	and.w	r3, r3, #2
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d107      	bne.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b788:	d103      	bne.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800b78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78e:	637b      	str	r3, [r7, #52]	; 0x34
 800b790:	e003      	b.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b796:	f001 bb66 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b79a:	f001 bb64 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800b79e:	4b07      	ldr	r3, [pc, #28]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b7a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b7a4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800b7a8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10b      	bne.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b7b0:	f7fc fbcc 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b7b4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800b7b6:	f001 bb56 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7ba:	bf00      	nop
 800b7bc:	44020c00 	.word	0x44020c00
 800b7c0:	03d09000 	.word	0x03d09000
 800b7c4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800b7c8:	4ba1      	ldr	r3, [pc, #644]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7d4:	d10b      	bne.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7dc:	d107      	bne.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7de:	f107 0314 	add.w	r3, r7, #20
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe fd20 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ec:	e047      	b.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800b7ee:	4b98      	ldr	r3, [pc, #608]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7fa:	d10b      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b802:	d107      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b804:	f107 0308 	add.w	r3, r7, #8
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe fe77 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	637b      	str	r3, [r7, #52]	; 0x34
 800b812:	e034      	b.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800b814:	4b8e      	ldr	r3, [pc, #568]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0302 	and.w	r3, r3, #2
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d10d      	bne.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b826:	d109      	bne.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b828:	4b89      	ldr	r3, [pc, #548]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	08db      	lsrs	r3, r3, #3
 800b82e:	f003 0303 	and.w	r3, r3, #3
 800b832:	4a88      	ldr	r2, [pc, #544]	; (800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b834:	fa22 f303 	lsr.w	r3, r2, r3
 800b838:	637b      	str	r3, [r7, #52]	; 0x34
 800b83a:	e020      	b.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800b83c:	4b84      	ldr	r3, [pc, #528]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b848:	d106      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b850:	d102      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800b852:	4b81      	ldr	r3, [pc, #516]	; (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
 800b856:	e012      	b.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800b858:	4b7d      	ldr	r3, [pc, #500]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b85a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b02      	cmp	r3, #2
 800b864:	d107      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800b86c:	d103      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800b86e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b872:	637b      	str	r3, [r7, #52]	; 0x34
 800b874:	e003      	b.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b87a:	f001 baf4 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b87e:	f001 baf2 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800b882:	4b73      	ldr	r3, [pc, #460]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b884:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b888:	f003 0307 	and.w	r3, r3, #7
 800b88c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	2b00      	cmp	r3, #0
 800b892:	d104      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b894:	f7fc fb5a 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b898:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800b89a:	f001 bae4 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800b89e:	4b6c      	ldr	r3, [pc, #432]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8aa:	d10a      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d107      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8b2:	f107 0314 	add.w	r3, r7, #20
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fcb6 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c0:	e043      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800b8c2:	4b63      	ldr	r3, [pc, #396]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ce:	d10a      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d107      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8d6:	f107 0308 	add.w	r3, r7, #8
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fe0e 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e4:	e031      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800b8e6:	4b5a      	ldr	r3, [pc, #360]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0302 	and.w	r3, r3, #2
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d10c      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d109      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b8f8:	4b55      	ldr	r3, [pc, #340]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	08db      	lsrs	r3, r3, #3
 800b8fe:	f003 0303 	and.w	r3, r3, #3
 800b902:	4a54      	ldr	r2, [pc, #336]	; (800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b904:	fa22 f303 	lsr.w	r3, r2, r3
 800b908:	637b      	str	r3, [r7, #52]	; 0x34
 800b90a:	e01e      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800b90c:	4b50      	ldr	r3, [pc, #320]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b918:	d105      	bne.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	2b04      	cmp	r3, #4
 800b91e:	d102      	bne.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800b920:	4b4d      	ldr	r3, [pc, #308]	; (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b922:	637b      	str	r3, [r7, #52]	; 0x34
 800b924:	e011      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800b926:	4b4a      	ldr	r3, [pc, #296]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b02      	cmp	r3, #2
 800b932:	d106      	bne.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	2b05      	cmp	r3, #5
 800b938:	d103      	bne.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800b93a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b93e:	637b      	str	r3, [r7, #52]	; 0x34
 800b940:	e003      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b946:	f001 ba8e 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b94a:	f001 ba8c 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800b94e:	4b40      	ldr	r3, [pc, #256]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b950:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b954:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b958:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d104      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b960:	f7fc faf4 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800b964:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800b966:	f001 ba7e 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800b96a:	4b39      	ldr	r3, [pc, #228]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b976:	d10a      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	2b10      	cmp	r3, #16
 800b97c:	d107      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b97e:	f107 0314 	add.w	r3, r7, #20
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe fc50 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	637b      	str	r3, [r7, #52]	; 0x34
 800b98c:	e043      	b.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800b98e:	4b30      	ldr	r3, [pc, #192]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b99a:	d10a      	bne.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	2b20      	cmp	r3, #32
 800b9a0:	d107      	bne.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9a2:	f107 0308 	add.w	r3, r7, #8
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fe fda8 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b9b0:	e031      	b.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800b9b2:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d10c      	bne.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	2b30      	cmp	r3, #48	; 0x30
 800b9c2:	d109      	bne.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9c4:	4b22      	ldr	r3, [pc, #136]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	08db      	lsrs	r3, r3, #3
 800b9ca:	f003 0303 	and.w	r3, r3, #3
 800b9ce:	4a21      	ldr	r2, [pc, #132]	; (800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d6:	e01e      	b.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800b9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9e4:	d105      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e8:	2b40      	cmp	r3, #64	; 0x40
 800b9ea:	d102      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800b9ec:	4b1a      	ldr	r3, [pc, #104]	; (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800b9ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f0:	e011      	b.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800b9f2:	4b17      	ldr	r3, [pc, #92]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9f8:	f003 0302 	and.w	r3, r3, #2
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d106      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	2b50      	cmp	r3, #80	; 0x50
 800ba04:	d103      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800ba06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	e003      	b.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba12:	f001 ba28 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba16:	f001 ba26 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ba1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba20:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ba24:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d104      	bne.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ba2c:	f7fc faba 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800ba30:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba32:	f001 ba18 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba3c:	d10e      	bne.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba3e:	f107 0314 	add.w	r3, r7, #20
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe fbf0 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba4c:	f001 ba0b 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba50:	44020c00 	.word	0x44020c00
 800ba54:	03d09000 	.word	0x03d09000
 800ba58:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba62:	d108      	bne.n	800ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba64:	f107 0308 	add.w	r3, r7, #8
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe fd47 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba72:	f001 b9f8 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ba76:	4ba4      	ldr	r3, [pc, #656]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d10d      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba88:	d109      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba8a:	4b9f      	ldr	r3, [pc, #636]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	08db      	lsrs	r3, r3, #3
 800ba90:	f003 0303 	and.w	r3, r3, #3
 800ba94:	4a9d      	ldr	r2, [pc, #628]	; (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ba96:	fa22 f303 	lsr.w	r3, r2, r3
 800ba9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba9c:	e020      	b.n	800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800ba9e:	4b9a      	ldr	r3, [pc, #616]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800baa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baaa:	d106      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800baac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bab2:	d102      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800bab4:	4b96      	ldr	r3, [pc, #600]	; (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bab6:	637b      	str	r3, [r7, #52]	; 0x34
 800bab8:	e012      	b.n	800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800baba:	4b93      	ldr	r3, [pc, #588]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800babc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bac0:	f003 0302 	and.w	r3, r3, #2
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d107      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800bac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bace:	d103      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800bad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bad4:	637b      	str	r3, [r7, #52]	; 0x34
 800bad6:	e003      	b.n	800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800badc:	f001 b9c3 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bae0:	f001 b9c1 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bae4:	4b88      	ldr	r3, [pc, #544]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800baea:	f003 0307 	and.w	r3, r3, #7
 800baee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d104      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800baf6:	f7fc fa0d 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 800bafa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800bafc:	f001 b9b3 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d104      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb06:	f7fc f8d9 	bl	8007cbc <HAL_RCC_GetSysClockFreq>
 800bb0a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bb0c:	f001 b9ab 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d108      	bne.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb16:	f107 0314 	add.w	r3, r7, #20
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe fb84 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb24:	f001 b99f 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800bb28:	4b77      	ldr	r3, [pc, #476]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb34:	d105      	bne.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d102      	bne.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800bb3c:	4b75      	ldr	r3, [pc, #468]	; (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb40:	e023      	b.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800bb42:	4b71      	ldr	r3, [pc, #452]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 0302 	and.w	r3, r3, #2
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d10c      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d109      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb54:	4b6c      	ldr	r3, [pc, #432]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	08db      	lsrs	r3, r3, #3
 800bb5a:	f003 0303 	and.w	r3, r3, #3
 800bb5e:	4a6b      	ldr	r2, [pc, #428]	; (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bb60:	fa22 f303 	lsr.w	r3, r2, r3
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34
 800bb66:	e010      	b.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800bb68:	4b67      	ldr	r3, [pc, #412]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb74:	d105      	bne.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	2b05      	cmp	r3, #5
 800bb7a:	d102      	bne.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800bb7c:	4b64      	ldr	r3, [pc, #400]	; (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bb7e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb80:	e003      	b.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800bb82:	2300      	movs	r3, #0
 800bb84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb86:	f001 b96e 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb8a:	f001 b96c 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800bb8e:	4b5e      	ldr	r3, [pc, #376]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800bb9a:	4b5b      	ldr	r3, [pc, #364]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bb9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d106      	bne.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d103      	bne.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800bbae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbb4:	e012      	b.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800bbb6:	4b54      	ldr	r3, [pc, #336]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bbb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbc4:	d106      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	2b08      	cmp	r3, #8
 800bbca:	d103      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800bbcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd2:	e003      	b.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800bbd8:	f001 b945 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bbdc:	f001 b943 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bbe0:	4b49      	ldr	r3, [pc, #292]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bbe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bbe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bbea:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d104      	bne.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bbf2:	f7fc f9ab 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800bbf6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bbf8:	f001 b935 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc02:	d108      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc04:	f107 0308 	add.w	r3, r7, #8
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fe fc77 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc12:	f001 b928 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800bc16:	4b3c      	ldr	r3, [pc, #240]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d10d      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc28:	d109      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc2a:	4b37      	ldr	r3, [pc, #220]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	08db      	lsrs	r3, r3, #3
 800bc30:	f003 0303 	and.w	r3, r3, #3
 800bc34:	4a35      	ldr	r2, [pc, #212]	; (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bc36:	fa22 f303 	lsr.w	r3, r2, r3
 800bc3a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc3c:	e011      	b.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800bc3e:	4b32      	ldr	r3, [pc, #200]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc4a:	d106      	bne.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc52:	d102      	bne.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800bc54:	4b2e      	ldr	r3, [pc, #184]	; (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bc56:	637b      	str	r3, [r7, #52]	; 0x34
 800bc58:	e003      	b.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc5e:	f001 b902 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc62:	f001 b900 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bc66:	4b28      	ldr	r3, [pc, #160]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bc70:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d104      	bne.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc78:	f7fc f968 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800bc7c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc7e:	f001 b8f2 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc88:	d108      	bne.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc8a:	f107 0308 	add.w	r3, r7, #8
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fc34 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc98:	f001 b8e5 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 0302 	and.w	r3, r3, #2
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d10d      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bcae:	d109      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bcb0:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	08db      	lsrs	r3, r3, #3
 800bcb6:	f003 0303 	and.w	r3, r3, #3
 800bcba:	4a14      	ldr	r2, [pc, #80]	; (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bcbc:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc0:	637b      	str	r3, [r7, #52]	; 0x34
 800bcc2:	e011      	b.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800bcc4:	4b10      	ldr	r3, [pc, #64]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcd0:	d106      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bcd8:	d102      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800bcda:	4b0d      	ldr	r3, [pc, #52]	; (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcde:	e003      	b.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800bce0:	2300      	movs	r3, #0
 800bce2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bce4:	f001 b8bf 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bce8:	f001 b8bd 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bcee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bcf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bcf6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10c      	bne.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bcfe:	f7fc f951 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800bd02:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd04:	f001 b8af 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd08:	44020c00 	.word	0x44020c00
 800bd0c:	03d09000 	.word	0x03d09000
 800bd10:	003d0900 	.word	0x003d0900
 800bd14:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd1e:	d108      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd20:	f107 0308 	add.w	r3, r7, #8
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe fbe9 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd2e:	f001 b89a 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800bd32:	4b9f      	ldr	r3, [pc, #636]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d10d      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd44:	d109      	bne.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd46:	4b9a      	ldr	r3, [pc, #616]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	08db      	lsrs	r3, r3, #3
 800bd4c:	f003 0303 	and.w	r3, r3, #3
 800bd50:	4a98      	ldr	r2, [pc, #608]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bd52:	fa22 f303 	lsr.w	r3, r2, r3
 800bd56:	637b      	str	r3, [r7, #52]	; 0x34
 800bd58:	e011      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800bd5a:	4b95      	ldr	r3, [pc, #596]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd66:	d106      	bne.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd6e:	d102      	bne.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800bd70:	4b91      	ldr	r3, [pc, #580]	; (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bd72:	637b      	str	r3, [r7, #52]	; 0x34
 800bd74:	e003      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd7a:	f001 b874 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd7e:	f001 b872 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bd82:	4b8b      	ldr	r3, [pc, #556]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bd84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bd8c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d104      	bne.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bd94:	f7fc f906 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800bd98:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd9a:	f001 b864 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bda4:	d108      	bne.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bda6:	f107 0308 	add.w	r3, r7, #8
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fba6 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdb4:	f001 b857 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bdb8:	4b7d      	ldr	r3, [pc, #500]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0302 	and.w	r3, r3, #2
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d10d      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdca:	d109      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bdcc:	4b78      	ldr	r3, [pc, #480]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	08db      	lsrs	r3, r3, #3
 800bdd2:	f003 0303 	and.w	r3, r3, #3
 800bdd6:	4a77      	ldr	r2, [pc, #476]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bdd8:	fa22 f303 	lsr.w	r3, r2, r3
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdde:	e011      	b.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800bde0:	4b73      	ldr	r3, [pc, #460]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdec:	d106      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bdf4:	d102      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800bdf6:	4b70      	ldr	r3, [pc, #448]	; (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bdf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdfa:	e003      	b.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be00:	f001 b831 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be04:	f001 b82f 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800be08:	4b69      	ldr	r3, [pc, #420]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800be0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800be0e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800be12:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	2b00      	cmp	r3, #0
 800be18:	d104      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800be1a:	f7fc f897 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800be1e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800be20:	f001 b821 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be2a:	d108      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be2c:	f107 0308 	add.w	r3, r7, #8
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe fb63 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be3a:	f001 b814 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800be3e:	4b5c      	ldr	r3, [pc, #368]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 0302 	and.w	r3, r3, #2
 800be46:	2b02      	cmp	r3, #2
 800be48:	d10e      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be50:	d10a      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be52:	4b57      	ldr	r3, [pc, #348]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	08db      	lsrs	r3, r3, #3
 800be58:	f003 0303 	and.w	r3, r3, #3
 800be5c:	4a55      	ldr	r2, [pc, #340]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800be5e:	fa22 f303 	lsr.w	r3, r2, r3
 800be62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be64:	f000 bfff 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800be68:	2300      	movs	r3, #0
 800be6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be6c:	f000 bffb 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800be70:	4b4f      	ldr	r3, [pc, #316]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800be72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800be76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be7a:	633b      	str	r3, [r7, #48]	; 0x30
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800be82:	d056      	beq.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800be8a:	f200 808b 	bhi.w	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be94:	d03e      	beq.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be9c:	f200 8082 	bhi.w	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bea6:	d027      	beq.n	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800beae:	d879      	bhi.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beb6:	d017      	beq.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bebe:	d871      	bhi.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d004      	beq.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800becc:	d004      	beq.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800bece:	e069      	b.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bed0:	f7fc f868 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800bed4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800bed6:	e068      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bed8:	f107 0314 	add.w	r3, r7, #20
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe f9a3 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bee6:	e060      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bee8:	f107 0308 	add.w	r3, r7, #8
 800beec:	4618      	mov	r0, r3
 800beee:	f7fe fb05 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bef6:	e058      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bef8:	4b2d      	ldr	r3, [pc, #180]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800befa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800befe:	f003 0302 	and.w	r3, r3, #2
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d103      	bne.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800bf06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf0a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bf0c:	e04d      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf12:	e04a      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bf14:	4b26      	ldr	r3, [pc, #152]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf22:	d103      	bne.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800bf24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bf2a:	e03e      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf30:	e03b      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf32:	4b1f      	ldr	r3, [pc, #124]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bf38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bf3c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf3e:	4b1c      	ldr	r3, [pc, #112]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 0302 	and.w	r3, r3, #2
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d10c      	bne.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf50:	4b17      	ldr	r3, [pc, #92]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	08db      	lsrs	r3, r3, #3
 800bf56:	f003 0303 	and.w	r3, r3, #3
 800bf5a:	4a16      	ldr	r2, [pc, #88]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bf5c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf60:	637b      	str	r3, [r7, #52]	; 0x34
 800bf62:	e01e      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf64:	4b12      	ldr	r3, [pc, #72]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf70:	d106      	bne.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf78:	d102      	bne.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bf7a:	4b0f      	ldr	r3, [pc, #60]	; (800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bf7c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf7e:	e010      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf8c:	d106      	bne.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800bf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf94:	d102      	bne.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bf96:	4b09      	ldr	r3, [pc, #36]	; (800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
 800bf9a:	e002      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800bfa0:	e003      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800bfa2:	e002      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bfa8:	bf00      	nop
          }
        }
        break;
 800bfaa:	f000 bf5c 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bfae:	bf00      	nop
 800bfb0:	44020c00 	.word	0x44020c00
 800bfb4:	03d09000 	.word	0x03d09000
 800bfb8:	003d0900 	.word	0x003d0900
 800bfbc:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bfc0:	4b9e      	ldr	r3, [pc, #632]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800bfc2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bfc6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bfca:	633b      	str	r3, [r7, #48]	; 0x30
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bfd2:	d056      	beq.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bfda:	f200 808b 	bhi.w	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe4:	d03e      	beq.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfec:	f200 8082 	bhi.w	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bff6:	d027      	beq.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bffe:	d879      	bhi.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c006:	d017      	beq.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c00e:	d871      	bhi.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c012:	2b00      	cmp	r3, #0
 800c014:	d004      	beq.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c01c:	d004      	beq.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800c01e:	e069      	b.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800c020:	f7fb ff94 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800c024:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c026:	e068      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c028:	f107 0314 	add.w	r3, r7, #20
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe f8fb 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c036:	e060      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c038:	f107 0308 	add.w	r3, r7, #8
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe fa5d 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c046:	e058      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c048:	4b7c      	ldr	r3, [pc, #496]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c04a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c04e:	f003 0302 	and.w	r3, r3, #2
 800c052:	2b02      	cmp	r3, #2
 800c054:	d103      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800c056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c05a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c05c:	e04d      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c062:	e04a      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c064:	4b75      	ldr	r3, [pc, #468]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c06a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c06e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c072:	d103      	bne.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800c074:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c078:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c07a:	e03e      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c080:	e03b      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c082:	4b6e      	ldr	r3, [pc, #440]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c088:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c08c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c08e:	4b6b      	ldr	r3, [pc, #428]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 0302 	and.w	r3, r3, #2
 800c096:	2b02      	cmp	r3, #2
 800c098:	d10c      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d109      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0a0:	4b66      	ldr	r3, [pc, #408]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	08db      	lsrs	r3, r3, #3
 800c0a6:	f003 0303 	and.w	r3, r3, #3
 800c0aa:	4a65      	ldr	r2, [pc, #404]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c0b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c0b2:	e01e      	b.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0b4:	4b61      	ldr	r3, [pc, #388]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0c0:	d106      	bne.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0c8:	d102      	bne.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c0ca:	4b5e      	ldr	r3, [pc, #376]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ce:	e010      	b.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0d0:	4b5a      	ldr	r3, [pc, #360]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0dc:	d106      	bne.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800c0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0e4:	d102      	bne.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c0e6:	4b58      	ldr	r3, [pc, #352]	; (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ea:	e002      	b.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c0f0:	e003      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800c0f2:	e002      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c0f8:	bf00      	nop
          }
        }
        break;
 800c0fa:	f000 beb4 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c0fe:	4b4f      	ldr	r3, [pc, #316]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c100:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c104:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c108:	633b      	str	r3, [r7, #48]	; 0x30
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c110:	d056      	beq.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c118:	f200 808b 	bhi.w	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c122:	d03e      	beq.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c12a:	f200 8082 	bhi.w	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c134:	d027      	beq.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c13c:	d879      	bhi.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c144:	d017      	beq.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14c:	d871      	bhi.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	2b00      	cmp	r3, #0
 800c152:	d004      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c15a:	d004      	beq.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800c15c:	e069      	b.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c15e:	f7fb ff21 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800c162:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c164:	e068      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c166:	f107 0314 	add.w	r3, r7, #20
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fe f85c 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c174:	e060      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c176:	f107 0308 	add.w	r3, r7, #8
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe f9be 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c184:	e058      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c186:	4b2d      	ldr	r3, [pc, #180]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b02      	cmp	r3, #2
 800c192:	d103      	bne.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800c194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c198:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c19a:	e04d      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c1a0:	e04a      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c1a2:	4b26      	ldr	r3, [pc, #152]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1b0:	d103      	bne.n	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800c1b2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c1b6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c1b8:	e03e      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c1be:	e03b      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1c0:	4b1e      	ldr	r3, [pc, #120]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c1ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1cc:	4b1b      	ldr	r3, [pc, #108]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d10c      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d109      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c1de:	4b17      	ldr	r3, [pc, #92]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	08db      	lsrs	r3, r3, #3
 800c1e4:	f003 0303 	and.w	r3, r3, #3
 800c1e8:	4a15      	ldr	r2, [pc, #84]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c1f0:	e01e      	b.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1fe:	d106      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c206:	d102      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c208:	4b0e      	ldr	r3, [pc, #56]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c20a:	637b      	str	r3, [r7, #52]	; 0x34
 800c20c:	e010      	b.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c20e:	4b0b      	ldr	r3, [pc, #44]	; (800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c21a:	d106      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c222:	d102      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c224:	4b08      	ldr	r3, [pc, #32]	; (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c226:	637b      	str	r3, [r7, #52]	; 0x34
 800c228:	e002      	b.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c22e:	e003      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800c230:	e002      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800c232:	2300      	movs	r3, #0
 800c234:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c236:	bf00      	nop
          }
        }
        break;
 800c238:	f000 be15 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c23c:	44020c00 	.word	0x44020c00
 800c240:	03d09000 	.word	0x03d09000
 800c244:	003d0900 	.word	0x003d0900
 800c248:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800c24c:	4b9e      	ldr	r3, [pc, #632]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c24e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c252:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800c256:	633b      	str	r3, [r7, #48]	; 0x30
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c25e:	d056      	beq.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c266:	f200 808b 	bhi.w	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c270:	d03e      	beq.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c278:	f200 8082 	bhi.w	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c282:	d027      	beq.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c28a:	d879      	bhi.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c292:	d017      	beq.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c29a:	d871      	bhi.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d004      	beq.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2a8:	d004      	beq.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800c2aa:	e069      	b.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c2ac:	f7fb fe7a 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800c2b0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c2b2:	e068      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2b4:	f107 0314 	add.w	r3, r7, #20
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fd ffb5 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2c2:	e060      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2c4:	f107 0308 	add.w	r3, r7, #8
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fe f917 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2d2:	e058      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c2d4:	4b7c      	ldr	r3, [pc, #496]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c2d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2da:	f003 0302 	and.w	r3, r3, #2
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d103      	bne.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800c2e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2e6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c2e8:	e04d      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2ee:	e04a      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c2f0:	4b75      	ldr	r3, [pc, #468]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c2f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2fe:	d103      	bne.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800c300:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c304:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c306:	e03e      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c30c:	e03b      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c30e:	4b6e      	ldr	r3, [pc, #440]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c314:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c318:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c31a:	4b6b      	ldr	r3, [pc, #428]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 0302 	and.w	r3, r3, #2
 800c322:	2b02      	cmp	r3, #2
 800c324:	d10c      	bne.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d109      	bne.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c32c:	4b66      	ldr	r3, [pc, #408]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	08db      	lsrs	r3, r3, #3
 800c332:	f003 0303 	and.w	r3, r3, #3
 800c336:	4a65      	ldr	r2, [pc, #404]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c338:	fa22 f303 	lsr.w	r3, r2, r3
 800c33c:	637b      	str	r3, [r7, #52]	; 0x34
 800c33e:	e01e      	b.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c340:	4b61      	ldr	r3, [pc, #388]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c34c:	d106      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c354:	d102      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c356:	4b5e      	ldr	r3, [pc, #376]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c358:	637b      	str	r3, [r7, #52]	; 0x34
 800c35a:	e010      	b.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c35c:	4b5a      	ldr	r3, [pc, #360]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c368:	d106      	bne.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c370:	d102      	bne.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c372:	4b58      	ldr	r3, [pc, #352]	; (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c374:	637b      	str	r3, [r7, #52]	; 0x34
 800c376:	e002      	b.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c37c:	e003      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800c37e:	e002      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c384:	bf00      	nop
          }
        }
        break;
 800c386:	f000 bd6e 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800c38a:	4b4f      	ldr	r3, [pc, #316]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c38c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c390:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c394:	633b      	str	r3, [r7, #48]	; 0x30
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c39c:	d056      	beq.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c3a4:	f200 808b 	bhi.w	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3ae:	d03e      	beq.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3b6:	f200 8082 	bhi.w	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c3c0:	d027      	beq.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c3c8:	d879      	bhi.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3d0:	d017      	beq.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3d8:	d871      	bhi.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d004      	beq.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3e6:	d004      	beq.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800c3e8:	e069      	b.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c3ea:	f7fb fddb 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800c3ee:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c3f0:	e068      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3f2:	f107 0314 	add.w	r3, r7, #20
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fd ff16 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c400:	e060      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c402:	f107 0308 	add.w	r3, r7, #8
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe f878 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c410:	e058      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c412:	4b2d      	ldr	r3, [pc, #180]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c418:	f003 0302 	and.w	r3, r3, #2
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d103      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800c420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c424:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c426:	e04d      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c42c:	e04a      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c42e:	4b26      	ldr	r3, [pc, #152]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c43c:	d103      	bne.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800c43e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c442:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c444:	e03e      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c44a:	e03b      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c44c:	4b1e      	ldr	r3, [pc, #120]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c44e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c452:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c456:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c458:	4b1b      	ldr	r3, [pc, #108]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0302 	and.w	r3, r3, #2
 800c460:	2b02      	cmp	r3, #2
 800c462:	d10c      	bne.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d109      	bne.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c46a:	4b17      	ldr	r3, [pc, #92]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	08db      	lsrs	r3, r3, #3
 800c470:	f003 0303 	and.w	r3, r3, #3
 800c474:	4a15      	ldr	r2, [pc, #84]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c476:	fa22 f303 	lsr.w	r3, r2, r3
 800c47a:	637b      	str	r3, [r7, #52]	; 0x34
 800c47c:	e01e      	b.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c47e:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c48a:	d106      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c492:	d102      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c494:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c496:	637b      	str	r3, [r7, #52]	; 0x34
 800c498:	e010      	b.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c49a:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a6:	d106      	bne.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4ae:	d102      	bne.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c4b0:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c4b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c4b4:	e002      	b.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c4ba:	e003      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800c4bc:	e002      	b.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4c2:	bf00      	nop
          }
        }
        break;
 800c4c4:	f000 bccf 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c4c8:	44020c00 	.word	0x44020c00
 800c4cc:	03d09000 	.word	0x03d09000
 800c4d0:	003d0900 	.word	0x003d0900
 800c4d4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800c4d8:	4b9e      	ldr	r3, [pc, #632]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c4da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c4de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c4e2:	633b      	str	r3, [r7, #48]	; 0x30
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4ea:	d056      	beq.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4f2:	f200 808b 	bhi.w	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4fc:	d03e      	beq.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c504:	f200 8082 	bhi.w	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c50e:	d027      	beq.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c516:	d879      	bhi.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c51e:	d017      	beq.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c526:	d871      	bhi.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d004      	beq.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c534:	d004      	beq.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800c536:	e069      	b.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c538:	f7fb fd34 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800c53c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c53e:	e068      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c540:	f107 0314 	add.w	r3, r7, #20
 800c544:	4618      	mov	r0, r3
 800c546:	f7fd fe6f 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c54e:	e060      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c550:	f107 0308 	add.w	r3, r7, #8
 800c554:	4618      	mov	r0, r3
 800c556:	f7fd ffd1 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c55e:	e058      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c560:	4b7c      	ldr	r3, [pc, #496]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c566:	f003 0302 	and.w	r3, r3, #2
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d103      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800c56e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c572:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c574:	e04d      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c57a:	e04a      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c57c:	4b75      	ldr	r3, [pc, #468]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c57e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c58a:	d103      	bne.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800c58c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c592:	e03e      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c598:	e03b      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c59a:	4b6e      	ldr	r3, [pc, #440]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c59c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c5a4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5a6:	4b6b      	ldr	r3, [pc, #428]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d10c      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800c5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d109      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c5b8:	4b66      	ldr	r3, [pc, #408]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	08db      	lsrs	r3, r3, #3
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	4a65      	ldr	r2, [pc, #404]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c5c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ca:	e01e      	b.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5cc:	4b61      	ldr	r3, [pc, #388]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5d8:	d106      	bne.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5e0:	d102      	bne.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c5e2:	4b5e      	ldr	r3, [pc, #376]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800c5e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c5e6:	e010      	b.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5e8:	4b5a      	ldr	r3, [pc, #360]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5f4:	d106      	bne.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5fc:	d102      	bne.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c5fe:	4b58      	ldr	r3, [pc, #352]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c600:	637b      	str	r3, [r7, #52]	; 0x34
 800c602:	e002      	b.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c608:	e003      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800c60a:	e002      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c610:	bf00      	nop
          }
        }
        break;
 800c612:	f000 bc28 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c616:	4b4f      	ldr	r3, [pc, #316]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c61c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c620:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800c622:	4b4c      	ldr	r3, [pc, #304]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c62a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c62e:	d106      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	2b00      	cmp	r3, #0
 800c634:	d103      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800c636:	4b4a      	ldr	r3, [pc, #296]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c638:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800c63a:	f000 bc14 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c644:	d108      	bne.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c646:	f107 0320 	add.w	r3, r7, #32
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd fc82 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c654:	f000 bc07 	b.w	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c65e:	d107      	bne.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c660:	f107 0314 	add.w	r3, r7, #20
 800c664:	4618      	mov	r0, r3
 800c666:	f7fd fddf 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c66e:	e3fa      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c674:	e3f7      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c676:	4b37      	ldr	r3, [pc, #220]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c67c:	f003 0307 	and.w	r3, r3, #7
 800c680:	633b      	str	r3, [r7, #48]	; 0x30
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	2b04      	cmp	r3, #4
 800c686:	d861      	bhi.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800c688:	a201      	add	r2, pc, #4	; (adr r2, 800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800c68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68e:	bf00      	nop
 800c690:	0800c6a5 	.word	0x0800c6a5
 800c694:	0800c6b5 	.word	0x0800c6b5
 800c698:	0800c6c5 	.word	0x0800c6c5
 800c69c:	0800c6d5 	.word	0x0800c6d5
 800c6a0:	0800c6db 	.word	0x0800c6db
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6a4:	f107 0320 	add.w	r3, r7, #32
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fd fc53 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6b2:	e04e      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6b4:	f107 0314 	add.w	r3, r7, #20
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fd fdb5 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6c2:	e046      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fd ff17 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6d2:	e03e      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c6d4:	4b23      	ldr	r3, [pc, #140]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800c6d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6d8:	e03b      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6da:	4b1e      	ldr	r3, [pc, #120]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c6dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c6e0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c6e4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6e6:	4b1b      	ldr	r3, [pc, #108]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 0302 	and.w	r3, r3, #2
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d10c      	bne.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d109      	bne.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c6f8:	4b16      	ldr	r3, [pc, #88]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	08db      	lsrs	r3, r3, #3
 800c6fe:	f003 0303 	and.w	r3, r3, #3
 800c702:	4a15      	ldr	r2, [pc, #84]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c704:	fa22 f303 	lsr.w	r3, r2, r3
 800c708:	637b      	str	r3, [r7, #52]	; 0x34
 800c70a:	e01e      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c70c:	4b11      	ldr	r3, [pc, #68]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c718:	d106      	bne.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c720:	d102      	bne.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c722:	4b0e      	ldr	r3, [pc, #56]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800c724:	637b      	str	r3, [r7, #52]	; 0x34
 800c726:	e010      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c734:	d106      	bne.n	800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c73c:	d102      	bne.n	800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c73e:	4b08      	ldr	r3, [pc, #32]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c740:	637b      	str	r3, [r7, #52]	; 0x34
 800c742:	e002      	b.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c748:	e003      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800c74a:	e002      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c750:	bf00      	nop
          }
        }
        break;
 800c752:	e388      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c754:	44020c00 	.word	0x44020c00
 800c758:	03d09000 	.word	0x03d09000
 800c75c:	003d0900 	.word	0x003d0900
 800c760:	007a1200 	.word	0x007a1200
 800c764:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c768:	4ba9      	ldr	r3, [pc, #676]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c76a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c76e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c772:	633b      	str	r3, [r7, #48]	; 0x30
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	2b20      	cmp	r3, #32
 800c778:	f200 809a 	bhi.w	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800c77c:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c809 	.word	0x0800c809
 800c788:	0800c8b1 	.word	0x0800c8b1
 800c78c:	0800c8b1 	.word	0x0800c8b1
 800c790:	0800c8b1 	.word	0x0800c8b1
 800c794:	0800c8b1 	.word	0x0800c8b1
 800c798:	0800c8b1 	.word	0x0800c8b1
 800c79c:	0800c8b1 	.word	0x0800c8b1
 800c7a0:	0800c8b1 	.word	0x0800c8b1
 800c7a4:	0800c819 	.word	0x0800c819
 800c7a8:	0800c8b1 	.word	0x0800c8b1
 800c7ac:	0800c8b1 	.word	0x0800c8b1
 800c7b0:	0800c8b1 	.word	0x0800c8b1
 800c7b4:	0800c8b1 	.word	0x0800c8b1
 800c7b8:	0800c8b1 	.word	0x0800c8b1
 800c7bc:	0800c8b1 	.word	0x0800c8b1
 800c7c0:	0800c8b1 	.word	0x0800c8b1
 800c7c4:	0800c829 	.word	0x0800c829
 800c7c8:	0800c8b1 	.word	0x0800c8b1
 800c7cc:	0800c8b1 	.word	0x0800c8b1
 800c7d0:	0800c8b1 	.word	0x0800c8b1
 800c7d4:	0800c8b1 	.word	0x0800c8b1
 800c7d8:	0800c8b1 	.word	0x0800c8b1
 800c7dc:	0800c8b1 	.word	0x0800c8b1
 800c7e0:	0800c8b1 	.word	0x0800c8b1
 800c7e4:	0800c839 	.word	0x0800c839
 800c7e8:	0800c8b1 	.word	0x0800c8b1
 800c7ec:	0800c8b1 	.word	0x0800c8b1
 800c7f0:	0800c8b1 	.word	0x0800c8b1
 800c7f4:	0800c8b1 	.word	0x0800c8b1
 800c7f8:	0800c8b1 	.word	0x0800c8b1
 800c7fc:	0800c8b1 	.word	0x0800c8b1
 800c800:	0800c8b1 	.word	0x0800c8b1
 800c804:	0800c83f 	.word	0x0800c83f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c808:	f107 0320 	add.w	r3, r7, #32
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fd fba1 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c816:	e04e      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c818:	f107 0314 	add.w	r3, r7, #20
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fd fd03 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c826:	e046      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fd fe65 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c836:	e03e      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c838:	4b76      	ldr	r3, [pc, #472]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800c83a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c83c:	e03b      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c83e:	4b74      	ldr	r3, [pc, #464]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c844:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c848:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c84a:	4b71      	ldr	r3, [pc, #452]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0302 	and.w	r3, r3, #2
 800c852:	2b02      	cmp	r3, #2
 800c854:	d10c      	bne.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d109      	bne.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c85c:	4b6c      	ldr	r3, [pc, #432]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	08db      	lsrs	r3, r3, #3
 800c862:	f003 0303 	and.w	r3, r3, #3
 800c866:	4a6c      	ldr	r2, [pc, #432]	; (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800c868:	fa22 f303 	lsr.w	r3, r2, r3
 800c86c:	637b      	str	r3, [r7, #52]	; 0x34
 800c86e:	e01e      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c870:	4b67      	ldr	r3, [pc, #412]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c87c:	d106      	bne.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c884:	d102      	bne.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c886:	4b65      	ldr	r3, [pc, #404]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800c888:	637b      	str	r3, [r7, #52]	; 0x34
 800c88a:	e010      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c88c:	4b60      	ldr	r3, [pc, #384]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c898:	d106      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8a0:	d102      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c8a2:	4b5f      	ldr	r3, [pc, #380]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800c8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a6:	e002      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c8ac:	e003      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800c8ae:	e002      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c8b4:	bf00      	nop
          }
        }
        break;
 800c8b6:	e2d6      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c8b8:	4b55      	ldr	r3, [pc, #340]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c8ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c8c2:	633b      	str	r3, [r7, #48]	; 0x30
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ca:	d031      	beq.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8d2:	d866      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d6:	2bc0      	cmp	r3, #192	; 0xc0
 800c8d8:	d027      	beq.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	2bc0      	cmp	r3, #192	; 0xc0
 800c8de:	d860      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	2b80      	cmp	r3, #128	; 0x80
 800c8e4:	d019      	beq.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	2b80      	cmp	r3, #128	; 0x80
 800c8ea:	d85a      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d003      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	2b40      	cmp	r3, #64	; 0x40
 800c8f6:	d008      	beq.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800c8f8:	e053      	b.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8fa:	f107 0320 	add.w	r3, r7, #32
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fd fb28 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c908:	e04e      	b.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c90a:	f107 0314 	add.w	r3, r7, #20
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fd fc8a 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c918:	e046      	b.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c91a:	f107 0308 	add.w	r3, r7, #8
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fd fdec 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c928:	e03e      	b.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c92a:	4b3a      	ldr	r3, [pc, #232]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800c92c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c92e:	e03b      	b.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c930:	4b37      	ldr	r3, [pc, #220]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c936:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c93a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c93c:	4b34      	ldr	r3, [pc, #208]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0302 	and.w	r3, r3, #2
 800c944:	2b02      	cmp	r3, #2
 800c946:	d10c      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d109      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c94e:	4b30      	ldr	r3, [pc, #192]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	08db      	lsrs	r3, r3, #3
 800c954:	f003 0303 	and.w	r3, r3, #3
 800c958:	4a2f      	ldr	r2, [pc, #188]	; (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800c95a:	fa22 f303 	lsr.w	r3, r2, r3
 800c95e:	637b      	str	r3, [r7, #52]	; 0x34
 800c960:	e01e      	b.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c962:	4b2b      	ldr	r3, [pc, #172]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c96a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c96e:	d106      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c976:	d102      	bne.n	800c97e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c978:	4b28      	ldr	r3, [pc, #160]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800c97a:	637b      	str	r3, [r7, #52]	; 0x34
 800c97c:	e010      	b.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c97e:	4b24      	ldr	r3, [pc, #144]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c98a:	d106      	bne.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c992:	d102      	bne.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c994:	4b22      	ldr	r3, [pc, #136]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800c996:	637b      	str	r3, [r7, #52]	; 0x34
 800c998:	e002      	b.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c99e:	e003      	b.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800c9a0:	e002      	b.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9a6:	bf00      	nop
          }
        }
        break;
 800c9a8:	e25d      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800c9aa:	4b19      	ldr	r3, [pc, #100]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c9ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9b0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800c9b4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d103      	bne.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800c9bc:	f7fb fadc 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800c9c0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c9c2:	e250      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800c9c4:	4b12      	ldr	r3, [pc, #72]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9d0:	d10b      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d8:	d107      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9da:	f107 0314 	add.w	r3, r7, #20
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fd fc22 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9e8:	e04f      	b.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800c9ea:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9f6:	d115      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9fe:	d111      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca00:	f107 0308 	add.w	r3, r7, #8
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fd fd79 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca0e:	e03c      	b.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800ca10:	44020c00 	.word	0x44020c00
 800ca14:	00bb8000 	.word	0x00bb8000
 800ca18:	03d09000 	.word	0x03d09000
 800ca1c:	003d0900 	.word	0x003d0900
 800ca20:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800ca24:	4b94      	ldr	r3, [pc, #592]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0302 	and.w	r3, r3, #2
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d10d      	bne.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca36:	d109      	bne.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ca38:	4b8f      	ldr	r3, [pc, #572]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	08db      	lsrs	r3, r3, #3
 800ca3e:	f003 0303 	and.w	r3, r3, #3
 800ca42:	4a8e      	ldr	r2, [pc, #568]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ca44:	fa22 f303 	lsr.w	r3, r2, r3
 800ca48:	637b      	str	r3, [r7, #52]	; 0x34
 800ca4a:	e01e      	b.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800ca4c:	4b8a      	ldr	r3, [pc, #552]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca58:	d106      	bne.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca60:	d102      	bne.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800ca62:	4b87      	ldr	r3, [pc, #540]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ca64:	637b      	str	r3, [r7, #52]	; 0x34
 800ca66:	e010      	b.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800ca68:	4b83      	ldr	r3, [pc, #524]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca74:	d106      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ca7c:	d102      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800ca7e:	4b81      	ldr	r3, [pc, #516]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ca80:	637b      	str	r3, [r7, #52]	; 0x34
 800ca82:	e002      	b.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca88:	e1ed      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ca8a:	e1ec      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800ca8c:	4b7a      	ldr	r3, [pc, #488]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ca8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca92:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca96:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d103      	bne.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ca9e:	f7fb fa81 	bl	8007fa4 <HAL_RCC_GetPCLK3Freq>
 800caa2:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800caa4:	e1df      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800caa6:	4b74      	ldr	r3, [pc, #464]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cab2:	d10b      	bne.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800cab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caba:	d107      	bne.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cabc:	f107 0314 	add.w	r3, r7, #20
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fd fbb1 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	637b      	str	r3, [r7, #52]	; 0x34
 800caca:	e045      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800cacc:	4b6a      	ldr	r3, [pc, #424]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cad8:	d10b      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cae0:	d107      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cae2:	f107 0308 	add.w	r3, r7, #8
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fd fd08 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	637b      	str	r3, [r7, #52]	; 0x34
 800caf0:	e032      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800caf2:	4b61      	ldr	r3, [pc, #388]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d10d      	bne.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb04:	d109      	bne.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cb06:	4b5c      	ldr	r3, [pc, #368]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	08db      	lsrs	r3, r3, #3
 800cb0c:	f003 0303 	and.w	r3, r3, #3
 800cb10:	4a5a      	ldr	r2, [pc, #360]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800cb12:	fa22 f303 	lsr.w	r3, r2, r3
 800cb16:	637b      	str	r3, [r7, #52]	; 0x34
 800cb18:	e01e      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800cb1a:	4b57      	ldr	r3, [pc, #348]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb26:	d106      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb2e:	d102      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800cb30:	4b53      	ldr	r3, [pc, #332]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800cb32:	637b      	str	r3, [r7, #52]	; 0x34
 800cb34:	e010      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800cb36:	4b50      	ldr	r3, [pc, #320]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb42:	d106      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cb4a:	d102      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800cb4c:	4b4d      	ldr	r3, [pc, #308]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cb4e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb50:	e002      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cb56:	e186      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cb58:	e185      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb5a:	4b47      	ldr	r3, [pc, #284]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb60:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800cb64:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d103      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cb6c:	f7fb fa04 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800cb70:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cb72:	e178      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800cb74:	4b40      	ldr	r3, [pc, #256]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb80:	d10b      	bne.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb88:	d107      	bne.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb8a:	f107 0314 	add.w	r3, r7, #20
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fd fb4a 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	637b      	str	r3, [r7, #52]	; 0x34
 800cb98:	e045      	b.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800cb9a:	4b37      	ldr	r3, [pc, #220]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cba6:	d10b      	bne.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbae:	d107      	bne.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbb0:	f107 0308 	add.w	r3, r7, #8
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fd fca1 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	637b      	str	r3, [r7, #52]	; 0x34
 800cbbe:	e032      	b.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800cbc0:	4b2d      	ldr	r3, [pc, #180]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d10d      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800cbd2:	d109      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cbd4:	4b28      	ldr	r3, [pc, #160]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	08db      	lsrs	r3, r3, #3
 800cbda:	f003 0303 	and.w	r3, r3, #3
 800cbde:	4a27      	ldr	r2, [pc, #156]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800cbe0:	fa22 f303 	lsr.w	r3, r2, r3
 800cbe4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe6:	e01e      	b.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800cbe8:	4b23      	ldr	r3, [pc, #140]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbf4:	d106      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbfc:	d102      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800cbfe:	4b20      	ldr	r3, [pc, #128]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800cc00:	637b      	str	r3, [r7, #52]	; 0x34
 800cc02:	e010      	b.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800cc04:	4b1c      	ldr	r3, [pc, #112]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc10:	d106      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800cc18:	d102      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800cc1a:	4b1a      	ldr	r3, [pc, #104]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cc1c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc1e:	e002      	b.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800cc20:	2300      	movs	r3, #0
 800cc22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc24:	e11f      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cc26:	e11e      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800cc28:	4b13      	ldr	r3, [pc, #76]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc2e:	f003 0303 	and.w	r3, r3, #3
 800cc32:	633b      	str	r3, [r7, #48]	; 0x30
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	2b03      	cmp	r3, #3
 800cc38:	d85f      	bhi.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800cc3a:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc40:	0800cc51 	.word	0x0800cc51
 800cc44:	0800cc59 	.word	0x0800cc59
 800cc48:	0800cc69 	.word	0x0800cc69
 800cc4c:	0800cc89 	.word	0x0800cc89

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800cc50:	f7fb f960 	bl	8007f14 <HAL_RCC_GetHCLKFreq>
 800cc54:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800cc56:	e053      	b.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc58:	f107 0320 	add.w	r3, r7, #32
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fd f979 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc66:	e04b      	b.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc68:	f107 0314 	add.w	r3, r7, #20
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fd fadb 	bl	800a228 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc76:	e043      	b.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800cc78:	44020c00 	.word	0x44020c00
 800cc7c:	03d09000 	.word	0x03d09000
 800cc80:	003d0900 	.word	0x003d0900
 800cc84:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc88:	4b79      	ldr	r3, [pc, #484]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cc8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cc8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cc92:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc94:	4b76      	ldr	r3, [pc, #472]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 0302 	and.w	r3, r3, #2
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d10c      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800cca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d109      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cca6:	4b72      	ldr	r3, [pc, #456]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	08db      	lsrs	r3, r3, #3
 800ccac:	f003 0303 	and.w	r3, r3, #3
 800ccb0:	4a70      	ldr	r2, [pc, #448]	; (800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800ccb2:	fa22 f303 	lsr.w	r3, r2, r3
 800ccb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb8:	e01e      	b.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccba:	4b6d      	ldr	r3, [pc, #436]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccc6:	d106      	bne.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccce:	d102      	bne.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ccd0:	4b69      	ldr	r3, [pc, #420]	; (800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800ccd2:	637b      	str	r3, [r7, #52]	; 0x34
 800ccd4:	e010      	b.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccd6:	4b66      	ldr	r3, [pc, #408]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cce2:	d106      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800cce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccea:	d102      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ccec:	4b63      	ldr	r3, [pc, #396]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800ccee:	637b      	str	r3, [r7, #52]	; 0x34
 800ccf0:	e002      	b.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ccf6:	e003      	b.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ccf8:	e002      	b.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ccfe:	bf00      	nop
          }
        }
        break;
 800cd00:	e0b1      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800cd02:	4b5b      	ldr	r3, [pc, #364]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cd0c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800cd0e:	4b58      	ldr	r3, [pc, #352]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd14:	f003 0302 	and.w	r3, r3, #2
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d106      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d103      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800cd22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd26:	637b      	str	r3, [r7, #52]	; 0x34
 800cd28:	e01f      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800cd2a:	4b51      	ldr	r3, [pc, #324]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd38:	d106      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	2b40      	cmp	r3, #64	; 0x40
 800cd3e:	d103      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800cd40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cd44:	637b      	str	r3, [r7, #52]	; 0x34
 800cd46:	e010      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800cd48:	4b49      	ldr	r3, [pc, #292]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd54:	d106      	bne.n	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	2b80      	cmp	r3, #128	; 0x80
 800cd5a:	d103      	bne.n	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800cd5c:	f248 0312 	movw	r3, #32786	; 0x8012
 800cd60:	637b      	str	r3, [r7, #52]	; 0x34
 800cd62:	e002      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800cd64:	2300      	movs	r3, #0
 800cd66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800cd68:	e07d      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cd6a:	e07c      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800cd6c:	4b40      	ldr	r3, [pc, #256]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cd76:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800cd78:	4b3d      	ldr	r3, [pc, #244]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd84:	d105      	bne.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d102      	bne.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800cd8c:	4b3c      	ldr	r3, [pc, #240]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800cd8e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd90:	e031      	b.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800cd92:	4b37      	ldr	r3, [pc, #220]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd9e:	d10a      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	2b10      	cmp	r3, #16
 800cda4:	d107      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cda6:	f107 0320 	add.w	r3, r7, #32
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fd f8d2 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	637b      	str	r3, [r7, #52]	; 0x34
 800cdb4:	e01f      	b.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800cdb6:	4b2e      	ldr	r3, [pc, #184]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cdb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cdbc:	f003 0302 	and.w	r3, r3, #2
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d106      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	2b20      	cmp	r3, #32
 800cdc8:	d103      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800cdca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdce:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd0:	e011      	b.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800cdd2:	4b27      	ldr	r3, [pc, #156]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cdd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cdd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cde0:	d106      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	2b30      	cmp	r3, #48	; 0x30
 800cde6:	d103      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800cde8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cdec:	637b      	str	r3, [r7, #52]	; 0x34
 800cdee:	e002      	b.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800cdf4:	e037      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cdf6:	e036      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800cdf8:	4b1d      	ldr	r3, [pc, #116]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cdfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cdfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ce02:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	2b10      	cmp	r3, #16
 800ce08:	d107      	bne.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce0a:	f107 0320 	add.w	r3, r7, #32
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fd f8a0 	bl	8009f54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ce18:	e025      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800ce1a:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce26:	d10a      	bne.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	2b20      	cmp	r3, #32
 800ce2c:	d107      	bne.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce2e:	f107 0308 	add.w	r3, r7, #8
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fd fb62 	bl	800a4fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce3c:	e00f      	b.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800ce3e:	4b0c      	ldr	r3, [pc, #48]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce4a:	d105      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4e:	2b30      	cmp	r3, #48	; 0x30
 800ce50:	d102      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800ce52:	4b0b      	ldr	r3, [pc, #44]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ce54:	637b      	str	r3, [r7, #52]	; 0x34
 800ce56:	e002      	b.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800ce5c:	e003      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ce5e:	e002      	b.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ce64:	bf00      	nop
    }
  }

  return (frequency);
 800ce66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	373c      	adds	r7, #60	; 0x3c
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd90      	pop	{r4, r7, pc}
 800ce70:	44020c00 	.word	0x44020c00
 800ce74:	03d09000 	.word	0x03d09000
 800ce78:	003d0900 	.word	0x003d0900
 800ce7c:	007a1200 	.word	0x007a1200
 800ce80:	02dc6c00 	.word	0x02dc6c00

0800ce84 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800ce8c:	4b48      	ldr	r3, [pc, #288]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a47      	ldr	r2, [pc, #284]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800ce92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ce98:	f7f6 ff42 	bl	8003d20 <HAL_GetTick>
 800ce9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce9e:	e008      	b.n	800ceb2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cea0:	f7f6 ff3e 	bl	8003d20 <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d901      	bls.n	800ceb2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e07a      	b.n	800cfa8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ceb2:	4b3f      	ldr	r3, [pc, #252]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1f0      	bne.n	800cea0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800cebe:	4b3c      	ldr	r3, [pc, #240]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cec6:	f023 0303 	bic.w	r3, r3, #3
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	6811      	ldr	r1, [r2, #0]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	6852      	ldr	r2, [r2, #4]
 800ced2:	0212      	lsls	r2, r2, #8
 800ced4:	430a      	orrs	r2, r1
 800ced6:	4936      	ldr	r1, [pc, #216]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	62cb      	str	r3, [r1, #44]	; 0x2c
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	025b      	lsls	r3, r3, #9
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	431a      	orrs	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	041b      	lsls	r3, r3, #16
 800cefa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cefe:	431a      	orrs	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	061b      	lsls	r3, r3, #24
 800cf08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf0c:	4928      	ldr	r1, [pc, #160]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800cf12:	4b27      	ldr	r3, [pc, #156]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf16:	f023 020c 	bic.w	r2, r3, #12
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	699b      	ldr	r3, [r3, #24]
 800cf1e:	4924      	ldr	r1, [pc, #144]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800cf24:	4b22      	ldr	r3, [pc, #136]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	f023 0220 	bic.w	r2, r3, #32
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	69db      	ldr	r3, [r3, #28]
 800cf30:	491f      	ldr	r1, [pc, #124]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf32:	4313      	orrs	r3, r2
 800cf34:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800cf36:	4b1e      	ldr	r3, [pc, #120]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	491c      	ldr	r1, [pc, #112]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf40:	4313      	orrs	r3, r2
 800cf42:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800cf44:	4b1a      	ldr	r3, [pc, #104]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf48:	4a19      	ldr	r2, [pc, #100]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf4a:	f023 0310 	bic.w	r3, r3, #16
 800cf4e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800cf50:	4b17      	ldr	r3, [pc, #92]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	6a12      	ldr	r2, [r2, #32]
 800cf60:	00d2      	lsls	r2, r2, #3
 800cf62:	4913      	ldr	r1, [pc, #76]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf64:	4313      	orrs	r3, r2
 800cf66:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800cf68:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6c:	4a10      	ldr	r2, [pc, #64]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf6e:	f043 0310 	orr.w	r3, r3, #16
 800cf72:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800cf74:	4b0e      	ldr	r3, [pc, #56]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a0d      	ldr	r2, [pc, #52]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf80:	f7f6 fece 	bl	8003d20 <HAL_GetTick>
 800cf84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf86:	e008      	b.n	800cf9a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf88:	f7f6 feca 	bl	8003d20 <HAL_GetTick>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d901      	bls.n	800cf9a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800cf96:	2303      	movs	r3, #3
 800cf98:	e006      	b.n	800cfa8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf9a:	4b05      	ldr	r3, [pc, #20]	; (800cfb0 <RCCEx_PLL2_Config+0x12c>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0f0      	beq.n	800cf88 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800cfa6:	2300      	movs	r3, #0

}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	44020c00 	.word	0x44020c00

0800cfb4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800cfbc:	4b48      	ldr	r3, [pc, #288]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a47      	ldr	r2, [pc, #284]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800cfc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cfc8:	f7f6 feaa 	bl	8003d20 <HAL_GetTick>
 800cfcc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfce:	e008      	b.n	800cfe2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfd0:	f7f6 fea6 	bl	8003d20 <HAL_GetTick>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d901      	bls.n	800cfe2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e07a      	b.n	800d0d8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfe2:	4b3f      	ldr	r3, [pc, #252]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1f0      	bne.n	800cfd0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800cfee:	4b3c      	ldr	r3, [pc, #240]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800cff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cff6:	f023 0303 	bic.w	r3, r3, #3
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	6811      	ldr	r1, [r2, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	6852      	ldr	r2, [r2, #4]
 800d002:	0212      	lsls	r2, r2, #8
 800d004:	430a      	orrs	r2, r1
 800d006:	4936      	ldr	r1, [pc, #216]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d008:	4313      	orrs	r3, r2
 800d00a:	630b      	str	r3, [r1, #48]	; 0x30
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	3b01      	subs	r3, #1
 800d012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	025b      	lsls	r3, r3, #9
 800d01e:	b29b      	uxth	r3, r3
 800d020:	431a      	orrs	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	3b01      	subs	r3, #1
 800d028:	041b      	lsls	r3, r3, #16
 800d02a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d02e:	431a      	orrs	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	3b01      	subs	r3, #1
 800d036:	061b      	lsls	r3, r3, #24
 800d038:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d03c:	4928      	ldr	r1, [pc, #160]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d03e:	4313      	orrs	r3, r2
 800d040:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d042:	4b27      	ldr	r3, [pc, #156]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d046:	f023 020c 	bic.w	r2, r3, #12
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	4924      	ldr	r1, [pc, #144]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d050:	4313      	orrs	r3, r2
 800d052:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800d054:	4b22      	ldr	r3, [pc, #136]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	f023 0220 	bic.w	r2, r3, #32
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	69db      	ldr	r3, [r3, #28]
 800d060:	491f      	ldr	r1, [pc, #124]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d062:	4313      	orrs	r3, r2
 800d064:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d066:	4b1e      	ldr	r3, [pc, #120]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	491c      	ldr	r1, [pc, #112]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d070:	4313      	orrs	r3, r2
 800d072:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800d074:	4b1a      	ldr	r3, [pc, #104]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d078:	4a19      	ldr	r2, [pc, #100]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d07a:	f023 0310 	bic.w	r3, r3, #16
 800d07e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800d080:	4b17      	ldr	r3, [pc, #92]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d088:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	6a12      	ldr	r2, [r2, #32]
 800d090:	00d2      	lsls	r2, r2, #3
 800d092:	4913      	ldr	r1, [pc, #76]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d094:	4313      	orrs	r3, r2
 800d096:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800d098:	4b11      	ldr	r3, [pc, #68]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09c:	4a10      	ldr	r2, [pc, #64]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d09e:	f043 0310 	orr.w	r3, r3, #16
 800d0a2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800d0a4:	4b0e      	ldr	r3, [pc, #56]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a0d      	ldr	r2, [pc, #52]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d0aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d0b0:	f7f6 fe36 	bl	8003d20 <HAL_GetTick>
 800d0b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0b6:	e008      	b.n	800d0ca <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0b8:	f7f6 fe32 	bl	8003d20 <HAL_GetTick>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d901      	bls.n	800d0ca <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e006      	b.n	800d0d8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0ca:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <RCCEx_PLL3_Config+0x12c>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0f0      	beq.n	800d0b8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	44020c00 	.word	0x44020c00

0800d0e4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d0f0:	4b07      	ldr	r3, [pc, #28]	; (800d110 <HAL_RTCEx_BKUPWrite+0x2c>)
 800d0f2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	601a      	str	r2, [r3, #0]
}
 800d104:	bf00      	nop
 800d106:	371c      	adds	r7, #28
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	44007d00 	.word	0x44007d00

0800d114 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d11e:	4b07      	ldr	r3, [pc, #28]	; (800d13c <HAL_RTCEx_BKUPRead+0x28>)
 800d120:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	4413      	add	r3, r2
 800d12a:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	44007d00 	.word	0x44007d00

0800d140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e049      	b.n	800d1e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f841 	bl	800d1ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3304      	adds	r3, #4
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f000 fa60 	bl	800d644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b083      	sub	sp, #12
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d1f6:	bf00      	nop
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
	...

0800d204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d212:	b2db      	uxtb	r3, r3
 800d214:	2b01      	cmp	r3, #1
 800d216:	d001      	beq.n	800d21c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	e07c      	b.n	800d316 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2202      	movs	r2, #2
 800d220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68da      	ldr	r2, [r3, #12]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f042 0201 	orr.w	r2, r2, #1
 800d232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a3a      	ldr	r2, [pc, #232]	; (800d324 <HAL_TIM_Base_Start_IT+0x120>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d04a      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a39      	ldr	r2, [pc, #228]	; (800d328 <HAL_TIM_Base_Start_IT+0x124>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d045      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d250:	d040      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d25a:	d03b      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a32      	ldr	r2, [pc, #200]	; (800d32c <HAL_TIM_Base_Start_IT+0x128>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d036      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a31      	ldr	r2, [pc, #196]	; (800d330 <HAL_TIM_Base_Start_IT+0x12c>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d031      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a2f      	ldr	r2, [pc, #188]	; (800d334 <HAL_TIM_Base_Start_IT+0x130>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d02c      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a2e      	ldr	r2, [pc, #184]	; (800d338 <HAL_TIM_Base_Start_IT+0x134>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d027      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a2c      	ldr	r2, [pc, #176]	; (800d33c <HAL_TIM_Base_Start_IT+0x138>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d022      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a2b      	ldr	r2, [pc, #172]	; (800d340 <HAL_TIM_Base_Start_IT+0x13c>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d01d      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a29      	ldr	r2, [pc, #164]	; (800d344 <HAL_TIM_Base_Start_IT+0x140>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d018      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a28      	ldr	r2, [pc, #160]	; (800d348 <HAL_TIM_Base_Start_IT+0x144>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d013      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a26      	ldr	r2, [pc, #152]	; (800d34c <HAL_TIM_Base_Start_IT+0x148>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d00e      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a25      	ldr	r2, [pc, #148]	; (800d350 <HAL_TIM_Base_Start_IT+0x14c>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d009      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a23      	ldr	r2, [pc, #140]	; (800d354 <HAL_TIM_Base_Start_IT+0x150>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d004      	beq.n	800d2d4 <HAL_TIM_Base_Start_IT+0xd0>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a22      	ldr	r2, [pc, #136]	; (800d358 <HAL_TIM_Base_Start_IT+0x154>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d115      	bne.n	800d300 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	689a      	ldr	r2, [r3, #8]
 800d2da:	4b20      	ldr	r3, [pc, #128]	; (800d35c <HAL_TIM_Base_Start_IT+0x158>)
 800d2dc:	4013      	ands	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2b06      	cmp	r3, #6
 800d2e4:	d015      	beq.n	800d312 <HAL_TIM_Base_Start_IT+0x10e>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ec:	d011      	beq.n	800d312 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f042 0201 	orr.w	r2, r2, #1
 800d2fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2fe:	e008      	b.n	800d312 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f042 0201 	orr.w	r2, r2, #1
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	e000      	b.n	800d314 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	40012c00 	.word	0x40012c00
 800d328:	50012c00 	.word	0x50012c00
 800d32c:	40000400 	.word	0x40000400
 800d330:	50000400 	.word	0x50000400
 800d334:	40000800 	.word	0x40000800
 800d338:	50000800 	.word	0x50000800
 800d33c:	40000c00 	.word	0x40000c00
 800d340:	50000c00 	.word	0x50000c00
 800d344:	40013400 	.word	0x40013400
 800d348:	50013400 	.word	0x50013400
 800d34c:	40001800 	.word	0x40001800
 800d350:	50001800 	.word	0x50001800
 800d354:	40014000 	.word	0x40014000
 800d358:	50014000 	.word	0x50014000
 800d35c:	00010007 	.word	0x00010007

0800d360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f003 0302 	and.w	r3, r3, #2
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d020      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f003 0302 	and.w	r3, r3, #2
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d01b      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f06f 0202 	mvn.w	r2, #2
 800d394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	f003 0303 	and.w	r3, r3, #3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f92c 	bl	800d608 <HAL_TIM_IC_CaptureCallback>
 800d3b0:	e005      	b.n	800d3be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f91e 	bl	800d5f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f92f 	bl	800d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d020      	beq.n	800d410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d01b      	beq.n	800d410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f06f 0204 	mvn.w	r2, #4
 800d3e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2202      	movs	r2, #2
 800d3e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f906 	bl	800d608 <HAL_TIM_IC_CaptureCallback>
 800d3fc:	e005      	b.n	800d40a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f8f8 	bl	800d5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f909 	bl	800d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	f003 0308 	and.w	r3, r3, #8
 800d416:	2b00      	cmp	r3, #0
 800d418:	d020      	beq.n	800d45c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f003 0308 	and.w	r3, r3, #8
 800d420:	2b00      	cmp	r3, #0
 800d422:	d01b      	beq.n	800d45c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f06f 0208 	mvn.w	r2, #8
 800d42c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2204      	movs	r2, #4
 800d432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	f003 0303 	and.w	r3, r3, #3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d003      	beq.n	800d44a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f8e0 	bl	800d608 <HAL_TIM_IC_CaptureCallback>
 800d448:	e005      	b.n	800d456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f8d2 	bl	800d5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f8e3 	bl	800d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	f003 0310 	and.w	r3, r3, #16
 800d462:	2b00      	cmp	r3, #0
 800d464:	d020      	beq.n	800d4a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f003 0310 	and.w	r3, r3, #16
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d01b      	beq.n	800d4a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f06f 0210 	mvn.w	r2, #16
 800d478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2208      	movs	r2, #8
 800d47e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	69db      	ldr	r3, [r3, #28]
 800d486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d003      	beq.n	800d496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f8ba 	bl	800d608 <HAL_TIM_IC_CaptureCallback>
 800d494:	e005      	b.n	800d4a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 f8ac 	bl	800d5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 f8bd 	bl	800d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00c      	beq.n	800d4cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d007      	beq.n	800d4cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f06f 0201 	mvn.w	r2, #1
 800d4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7f3 fb26 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00c      	beq.n	800d4f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d007      	beq.n	800d4f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d4e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f9d2 	bl	800d894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00c      	beq.n	800d514 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d500:	2b00      	cmp	r3, #0
 800d502:	d007      	beq.n	800d514 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d50c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f9ca 	bl	800d8a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00c      	beq.n	800d538 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d524:	2b00      	cmp	r3, #0
 800d526:	d007      	beq.n	800d538 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f87c 	bl	800d630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f003 0320 	and.w	r3, r3, #32
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00c      	beq.n	800d55c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f003 0320 	and.w	r3, r3, #32
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d007      	beq.n	800d55c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f06f 0220 	mvn.w	r2, #32
 800d554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f992 	bl	800d880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00c      	beq.n	800d580 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d007      	beq.n	800d580 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f99e 	bl	800d8bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00c      	beq.n	800d5a4 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d590:	2b00      	cmp	r3, #0
 800d592:	d007      	beq.n	800d5a4 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f996 	bl	800d8d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00c      	beq.n	800d5c8 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d007      	beq.n	800d5c8 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d5c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 f98e 	bl	800d8e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00c      	beq.n	800d5ec <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f986 	bl	800d8f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5fc:	bf00      	nop
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4a74      	ldr	r2, [pc, #464]	; (800d828 <TIM_Base_SetConfig+0x1e4>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d02b      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	4a73      	ldr	r2, [pc, #460]	; (800d82c <TIM_Base_SetConfig+0x1e8>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d027      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d66a:	d023      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d672:	d01f      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4a6e      	ldr	r2, [pc, #440]	; (800d830 <TIM_Base_SetConfig+0x1ec>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d01b      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	4a6d      	ldr	r2, [pc, #436]	; (800d834 <TIM_Base_SetConfig+0x1f0>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d017      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4a6c      	ldr	r2, [pc, #432]	; (800d838 <TIM_Base_SetConfig+0x1f4>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d013      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a6b      	ldr	r2, [pc, #428]	; (800d83c <TIM_Base_SetConfig+0x1f8>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d00f      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4a6a      	ldr	r2, [pc, #424]	; (800d840 <TIM_Base_SetConfig+0x1fc>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d00b      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a69      	ldr	r2, [pc, #420]	; (800d844 <TIM_Base_SetConfig+0x200>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d007      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a68      	ldr	r2, [pc, #416]	; (800d848 <TIM_Base_SetConfig+0x204>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d003      	beq.n	800d6b4 <TIM_Base_SetConfig+0x70>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a67      	ldr	r2, [pc, #412]	; (800d84c <TIM_Base_SetConfig+0x208>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d108      	bne.n	800d6c6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a57      	ldr	r2, [pc, #348]	; (800d828 <TIM_Base_SetConfig+0x1e4>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d05b      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a56      	ldr	r2, [pc, #344]	; (800d82c <TIM_Base_SetConfig+0x1e8>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d057      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6dc:	d053      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6e4:	d04f      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4a51      	ldr	r2, [pc, #324]	; (800d830 <TIM_Base_SetConfig+0x1ec>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d04b      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4a50      	ldr	r2, [pc, #320]	; (800d834 <TIM_Base_SetConfig+0x1f0>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d047      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4a4f      	ldr	r2, [pc, #316]	; (800d838 <TIM_Base_SetConfig+0x1f4>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d043      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a4e      	ldr	r2, [pc, #312]	; (800d83c <TIM_Base_SetConfig+0x1f8>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d03f      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a4d      	ldr	r2, [pc, #308]	; (800d840 <TIM_Base_SetConfig+0x1fc>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d03b      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a4c      	ldr	r2, [pc, #304]	; (800d844 <TIM_Base_SetConfig+0x200>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d037      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a4b      	ldr	r2, [pc, #300]	; (800d848 <TIM_Base_SetConfig+0x204>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d033      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a4a      	ldr	r2, [pc, #296]	; (800d84c <TIM_Base_SetConfig+0x208>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d02f      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a49      	ldr	r2, [pc, #292]	; (800d850 <TIM_Base_SetConfig+0x20c>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d02b      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a48      	ldr	r2, [pc, #288]	; (800d854 <TIM_Base_SetConfig+0x210>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d027      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4a47      	ldr	r2, [pc, #284]	; (800d858 <TIM_Base_SetConfig+0x214>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d023      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a46      	ldr	r2, [pc, #280]	; (800d85c <TIM_Base_SetConfig+0x218>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d01f      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4a45      	ldr	r2, [pc, #276]	; (800d860 <TIM_Base_SetConfig+0x21c>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d01b      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a44      	ldr	r2, [pc, #272]	; (800d864 <TIM_Base_SetConfig+0x220>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d017      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a43      	ldr	r2, [pc, #268]	; (800d868 <TIM_Base_SetConfig+0x224>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d013      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4a42      	ldr	r2, [pc, #264]	; (800d86c <TIM_Base_SetConfig+0x228>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d00f      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a41      	ldr	r2, [pc, #260]	; (800d870 <TIM_Base_SetConfig+0x22c>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d00b      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a40      	ldr	r2, [pc, #256]	; (800d874 <TIM_Base_SetConfig+0x230>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d007      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a3f      	ldr	r2, [pc, #252]	; (800d878 <TIM_Base_SetConfig+0x234>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d003      	beq.n	800d786 <TIM_Base_SetConfig+0x142>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a3e      	ldr	r2, [pc, #248]	; (800d87c <TIM_Base_SetConfig+0x238>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d108      	bne.n	800d798 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d78c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	4313      	orrs	r3, r2
 800d796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	689a      	ldr	r2, [r3, #8]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a1a      	ldr	r2, [pc, #104]	; (800d828 <TIM_Base_SetConfig+0x1e4>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d023      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a19      	ldr	r2, [pc, #100]	; (800d82c <TIM_Base_SetConfig+0x1e8>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d01f      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a1e      	ldr	r2, [pc, #120]	; (800d848 <TIM_Base_SetConfig+0x204>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d01b      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a1d      	ldr	r2, [pc, #116]	; (800d84c <TIM_Base_SetConfig+0x208>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d017      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a22      	ldr	r2, [pc, #136]	; (800d868 <TIM_Base_SetConfig+0x224>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d013      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a21      	ldr	r2, [pc, #132]	; (800d86c <TIM_Base_SetConfig+0x228>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d00f      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4a20      	ldr	r2, [pc, #128]	; (800d870 <TIM_Base_SetConfig+0x22c>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d00b      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a1f      	ldr	r2, [pc, #124]	; (800d874 <TIM_Base_SetConfig+0x230>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d007      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4a1e      	ldr	r2, [pc, #120]	; (800d878 <TIM_Base_SetConfig+0x234>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d003      	beq.n	800d80c <TIM_Base_SetConfig+0x1c8>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a1d      	ldr	r2, [pc, #116]	; (800d87c <TIM_Base_SetConfig+0x238>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d103      	bne.n	800d814 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	691a      	ldr	r2, [r3, #16]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	615a      	str	r2, [r3, #20]
}
 800d81a:	bf00      	nop
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	40012c00 	.word	0x40012c00
 800d82c:	50012c00 	.word	0x50012c00
 800d830:	40000400 	.word	0x40000400
 800d834:	50000400 	.word	0x50000400
 800d838:	40000800 	.word	0x40000800
 800d83c:	50000800 	.word	0x50000800
 800d840:	40000c00 	.word	0x40000c00
 800d844:	50000c00 	.word	0x50000c00
 800d848:	40013400 	.word	0x40013400
 800d84c:	50013400 	.word	0x50013400
 800d850:	40001800 	.word	0x40001800
 800d854:	50001800 	.word	0x50001800
 800d858:	40001c00 	.word	0x40001c00
 800d85c:	50001c00 	.word	0x50001c00
 800d860:	40002000 	.word	0x40002000
 800d864:	50002000 	.word	0x50002000
 800d868:	40014000 	.word	0x40014000
 800d86c:	50014000 	.word	0x50014000
 800d870:	40014400 	.word	0x40014400
 800d874:	50014400 	.word	0x50014400
 800d878:	40014800 	.word	0x40014800
 800d87c:	50014800 	.word	0x50014800

0800d880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d8c4:	bf00      	nop
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d8ec:	bf00      	nop
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
 800d91c:	e042      	b.n	800d9a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d924:	2b00      	cmp	r3, #0
 800d926:	d106      	bne.n	800d936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7f3 f913 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2224      	movs	r2, #36	; 0x24
 800d93a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f022 0201 	bic.w	r2, r2, #1
 800d94c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 fe0a 	bl	800e570 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fc19 	bl	800e194 <UART_SetConfig>
 800d962:	4603      	mov	r3, r0
 800d964:	2b01      	cmp	r3, #1
 800d966:	d101      	bne.n	800d96c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	e01b      	b.n	800d9a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d97a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	689a      	ldr	r2, [r3, #8]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d98a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f042 0201 	orr.w	r2, r2, #1
 800d99a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fe89 	bl	800e6b4 <UART_CheckIdleState>
 800d9a2:	4603      	mov	r3, r0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08a      	sub	sp, #40	; 0x28
 800d9b0:	af02      	add	r7, sp, #8
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	603b      	str	r3, [r7, #0]
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9c2:	2b20      	cmp	r3, #32
 800d9c4:	f040 808b 	bne.w	800dade <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <HAL_UART_Transmit+0x28>
 800d9ce:	88fb      	ldrh	r3, [r7, #6]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e083      	b.n	800dae0 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9e2:	2b80      	cmp	r3, #128	; 0x80
 800d9e4:	d107      	bne.n	800d9f6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	689a      	ldr	r2, [r3, #8]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9f4:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2221      	movs	r2, #33	; 0x21
 800da02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800da06:	f7f6 f98b 	bl	8003d20 <HAL_GetTick>
 800da0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	88fa      	ldrh	r2, [r7, #6]
 800da10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	88fa      	ldrh	r2, [r7, #6]
 800da18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da24:	d108      	bne.n	800da38 <HAL_UART_Transmit+0x8c>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d104      	bne.n	800da38 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800da2e:	2300      	movs	r3, #0
 800da30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	61bb      	str	r3, [r7, #24]
 800da36:	e003      	b.n	800da40 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da3c:	2300      	movs	r3, #0
 800da3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800da40:	e030      	b.n	800daa4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2200      	movs	r2, #0
 800da4a:	2180      	movs	r1, #128	; 0x80
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 fedb 	bl	800e808 <UART_WaitOnFlagUntilTimeout>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d005      	beq.n	800da64 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2220      	movs	r2, #32
 800da5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	e03d      	b.n	800dae0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10b      	bne.n	800da82 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	461a      	mov	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	3302      	adds	r3, #2
 800da7e:	61bb      	str	r3, [r7, #24]
 800da80:	e007      	b.n	800da92 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	781a      	ldrb	r2, [r3, #0]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	3301      	adds	r3, #1
 800da90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800da98:	b29b      	uxth	r3, r3
 800da9a:	3b01      	subs	r3, #1
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800daaa:	b29b      	uxth	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1c8      	bne.n	800da42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2200      	movs	r2, #0
 800dab8:	2140      	movs	r1, #64	; 0x40
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f000 fea4 	bl	800e808 <UART_WaitOnFlagUntilTimeout>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d005      	beq.n	800dad2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2220      	movs	r2, #32
 800daca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dace:	2303      	movs	r3, #3
 800dad0:	e006      	b.n	800dae0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2220      	movs	r2, #32
 800dad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	e000      	b.n	800dae0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800dade:	2302      	movs	r3, #2
  }
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3720      	adds	r7, #32
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08a      	sub	sp, #40	; 0x28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	4613      	mov	r3, r2
 800daf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dafc:	2b20      	cmp	r3, #32
 800dafe:	d14b      	bne.n	800db98 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <HAL_UART_Receive_IT+0x24>
 800db06:	88fb      	ldrh	r3, [r7, #6]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e044      	b.n	800db9a <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db20:	2b40      	cmp	r3, #64	; 0x40
 800db22:	d107      	bne.n	800db34 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	689a      	ldr	r2, [r3, #8]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db32:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a1a      	ldr	r2, [pc, #104]	; (800dba4 <HAL_UART_Receive_IT+0xbc>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d024      	beq.n	800db88 <HAL_UART_Receive_IT+0xa0>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a19      	ldr	r2, [pc, #100]	; (800dba8 <HAL_UART_Receive_IT+0xc0>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d01f      	beq.n	800db88 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db52:	2b00      	cmp	r3, #0
 800db54:	d018      	beq.n	800db88 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	e853 3f00 	ldrex	r3, [r3]
 800db62:	613b      	str	r3, [r7, #16]
   return(result);
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800db6a:	627b      	str	r3, [r7, #36]	; 0x24
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	461a      	mov	r2, r3
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	623b      	str	r3, [r7, #32]
 800db76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db78:	69f9      	ldr	r1, [r7, #28]
 800db7a:	6a3a      	ldr	r2, [r7, #32]
 800db7c:	e841 2300 	strex	r3, r2, [r1]
 800db80:	61bb      	str	r3, [r7, #24]
   return(result);
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1e6      	bne.n	800db56 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800db88:	88fb      	ldrh	r3, [r7, #6]
 800db8a:	461a      	mov	r2, r3
 800db8c:	68b9      	ldr	r1, [r7, #8]
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 fea2 	bl	800e8d8 <UART_Start_Receive_IT>
 800db94:	4603      	mov	r3, r0
 800db96:	e000      	b.n	800db9a <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800db98:	2302      	movs	r3, #2
  }
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3728      	adds	r7, #40	; 0x28
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	44002400 	.word	0x44002400
 800dba8:	54002400 	.word	0x54002400

0800dbac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b0ae      	sub	sp, #184	; 0xb8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	69db      	ldr	r3, [r3, #28]
 800dbba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dbd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbd6:	f640 030f 	movw	r3, #2063	; 0x80f
 800dbda:	4013      	ands	r3, r2
 800dbdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800dbe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d11b      	bne.n	800dc20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dbe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbec:	f003 0320 	and.w	r3, r3, #32
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d015      	beq.n	800dc20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dbf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dbf8:	f003 0320 	and.w	r3, r3, #32
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d105      	bne.n	800dc0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d009      	beq.n	800dc20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 8293 	beq.w	800e13c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	4798      	blx	r3
      }
      return;
 800dc1e:	e28d      	b.n	800e13c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 80fd 	beq.w	800de24 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dc2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800dc2e:	4b7a      	ldr	r3, [pc, #488]	; (800de18 <HAL_UART_IRQHandler+0x26c>)
 800dc30:	4013      	ands	r3, r2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d106      	bne.n	800dc44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc3a:	4b78      	ldr	r3, [pc, #480]	; (800de1c <HAL_UART_IRQHandler+0x270>)
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f000 80f0 	beq.w	800de24 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc48:	f003 0301 	and.w	r3, r3, #1
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d011      	beq.n	800dc74 <HAL_UART_IRQHandler+0xc8>
 800dc50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dc54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00b      	beq.n	800dc74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2201      	movs	r2, #1
 800dc62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc6a:	f043 0201 	orr.w	r2, r3, #1
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d011      	beq.n	800dca4 <HAL_UART_IRQHandler+0xf8>
 800dc80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d00b      	beq.n	800dca4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2202      	movs	r2, #2
 800dc92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc9a:	f043 0204 	orr.w	r2, r3, #4
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dca4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dca8:	f003 0304 	and.w	r3, r3, #4
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d011      	beq.n	800dcd4 <HAL_UART_IRQHandler+0x128>
 800dcb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dcb4:	f003 0301 	and.w	r3, r3, #1
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00b      	beq.n	800dcd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2204      	movs	r2, #4
 800dcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcca:	f043 0202 	orr.w	r2, r3, #2
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dcd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcd8:	f003 0308 	and.w	r3, r3, #8
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d017      	beq.n	800dd10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dce4:	f003 0320 	and.w	r3, r3, #32
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d105      	bne.n	800dcf8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dcec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800dcf0:	4b49      	ldr	r3, [pc, #292]	; (800de18 <HAL_UART_IRQHandler+0x26c>)
 800dcf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00b      	beq.n	800dd10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2208      	movs	r2, #8
 800dcfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd06:	f043 0208 	orr.w	r2, r3, #8
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dd10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d012      	beq.n	800dd42 <HAL_UART_IRQHandler+0x196>
 800dd1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00c      	beq.n	800dd42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd38:	f043 0220 	orr.w	r2, r3, #32
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 81f9 	beq.w	800e140 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd52:	f003 0320 	and.w	r3, r3, #32
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d013      	beq.n	800dd82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd5e:	f003 0320 	and.w	r3, r3, #32
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d105      	bne.n	800dd72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d007      	beq.n	800dd82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d003      	beq.n	800dd82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd96:	2b40      	cmp	r3, #64	; 0x40
 800dd98:	d005      	beq.n	800dda6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dd9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d02e      	beq.n	800de04 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 feb8 	bl	800eb1c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb6:	2b40      	cmp	r3, #64	; 0x40
 800ddb8:	d120      	bne.n	800ddfc <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d017      	beq.n	800ddf4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddca:	4a15      	ldr	r2, [pc, #84]	; (800de20 <HAL_UART_IRQHandler+0x274>)
 800ddcc:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f6 f945 	bl	8004064 <HAL_DMA_Abort_IT>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d019      	beq.n	800de14 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ddee:	4610      	mov	r0, r2
 800ddf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddf2:	e00f      	b.n	800de14 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 f9b7 	bl	800e168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddfa:	e00b      	b.n	800de14 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f9b3 	bl	800e168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de02:	e007      	b.n	800de14 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 f9af 	bl	800e168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800de12:	e195      	b.n	800e140 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de14:	bf00      	nop
    return;
 800de16:	e193      	b.n	800e140 <HAL_UART_IRQHandler+0x594>
 800de18:	10000001 	.word	0x10000001
 800de1c:	04000120 	.word	0x04000120
 800de20:	0800ebe9 	.word	0x0800ebe9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de28:	2b01      	cmp	r3, #1
 800de2a:	f040 8129 	bne.w	800e080 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de32:	f003 0310 	and.w	r3, r3, #16
 800de36:	2b00      	cmp	r3, #0
 800de38:	f000 8122 	beq.w	800e080 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800de40:	f003 0310 	and.w	r3, r3, #16
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 811b 	beq.w	800e080 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2210      	movs	r2, #16
 800de50:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5c:	2b40      	cmp	r3, #64	; 0x40
 800de5e:	f040 8091 	bne.w	800df84 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de6c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800de70:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800de74:	2b00      	cmp	r3, #0
 800de76:	f000 8165 	beq.w	800e144 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de80:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800de84:	429a      	cmp	r2, r3
 800de86:	f080 815d 	bcs.w	800e144 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800de90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de9c:	2b81      	cmp	r3, #129	; 0x81
 800de9e:	d060      	beq.n	800df62 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dea8:	e853 3f00 	ldrex	r3, [r3]
 800deac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800deae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800deb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dec6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800deca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dece:	e841 2300 	strex	r3, r2, [r1]
 800ded2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ded4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1e2      	bne.n	800dea0 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3308      	adds	r3, #8
 800dee0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee4:	e853 3f00 	ldrex	r3, [r3]
 800dee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800deea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deec:	f023 0301 	bic.w	r3, r3, #1
 800def0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	3308      	adds	r3, #8
 800defa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800defe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800df00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800df04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df06:	e841 2300 	strex	r3, r2, [r1]
 800df0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800df0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1e3      	bne.n	800deda <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2220      	movs	r2, #32
 800df16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df28:	e853 3f00 	ldrex	r3, [r3]
 800df2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df30:	f023 0310 	bic.w	r3, r3, #16
 800df34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	461a      	mov	r2, r3
 800df3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df42:	65bb      	str	r3, [r7, #88]	; 0x58
 800df44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df4a:	e841 2300 	strex	r3, r2, [r1]
 800df4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df52:	2b00      	cmp	r3, #0
 800df54:	d1e4      	bne.n	800df20 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7f6 f805 	bl	8003f6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2202      	movs	r2, #2
 800df66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df74:	b29b      	uxth	r3, r3
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	b29b      	uxth	r3, r3
 800df7a:	4619      	mov	r1, r3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f8fd 	bl	800e17c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df82:	e0df      	b.n	800e144 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df90:	b29b      	uxth	r3, r3
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 80d1 	beq.w	800e148 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800dfa6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f000 80cc 	beq.w	800e148 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dfbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	461a      	mov	r2, r3
 800dfce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfd2:	647b      	str	r3, [r7, #68]	; 0x44
 800dfd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfda:	e841 2300 	strex	r3, r2, [r1]
 800dfde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1e4      	bne.n	800dfb0 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3308      	adds	r3, #8
 800dfec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff0:	e853 3f00 	ldrex	r3, [r3]
 800dff4:	623b      	str	r3, [r7, #32]
   return(result);
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dffc:	f023 0301 	bic.w	r3, r3, #1
 800e000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3308      	adds	r3, #8
 800e00a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e00e:	633a      	str	r2, [r7, #48]	; 0x30
 800e010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e016:	e841 2300 	strex	r3, r2, [r1]
 800e01a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1e1      	bne.n	800dfe6 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2220      	movs	r2, #32
 800e026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	e853 3f00 	ldrex	r3, [r3]
 800e042:	60fb      	str	r3, [r7, #12]
   return(result);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f023 0310 	bic.w	r3, r3, #16
 800e04a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	461a      	mov	r2, r3
 800e054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e058:	61fb      	str	r3, [r7, #28]
 800e05a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05c:	69b9      	ldr	r1, [r7, #24]
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	e841 2300 	strex	r3, r2, [r1]
 800e064:	617b      	str	r3, [r7, #20]
   return(result);
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1e4      	bne.n	800e036 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2202      	movs	r2, #2
 800e070:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e072:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 f87f 	bl	800e17c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e07e:	e063      	b.n	800e148 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00e      	beq.n	800e0aa <HAL_UART_IRQHandler+0x4fe>
 800e08c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d008      	beq.n	800e0aa <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e0a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f001 fb1a 	bl	800f6dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0a8:	e051      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e0aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d014      	beq.n	800e0e0 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e0b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d105      	bne.n	800e0ce <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e0c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d008      	beq.n	800e0e0 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d03a      	beq.n	800e14c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	4798      	blx	r3
    }
    return;
 800e0de:	e035      	b.n	800e14c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e0e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d009      	beq.n	800e100 <HAL_UART_IRQHandler+0x554>
 800e0ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d003      	beq.n	800e100 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fd8b 	bl	800ec14 <UART_EndTransmit_IT>
    return;
 800e0fe:	e026      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d009      	beq.n	800e120 <HAL_UART_IRQHandler+0x574>
 800e10c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e110:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d003      	beq.n	800e120 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f001 faf3 	bl	800f704 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e11e:	e016      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d010      	beq.n	800e14e <HAL_UART_IRQHandler+0x5a2>
 800e12c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e130:	2b00      	cmp	r3, #0
 800e132:	da0c      	bge.n	800e14e <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f001 fadb 	bl	800f6f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e13a:	e008      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e13c:	bf00      	nop
 800e13e:	e006      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
    return;
 800e140:	bf00      	nop
 800e142:	e004      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e144:	bf00      	nop
 800e146:	e002      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e148:	bf00      	nop
 800e14a:	e000      	b.n	800e14e <HAL_UART_IRQHandler+0x5a2>
    return;
 800e14c:	bf00      	nop
  }
}
 800e14e:	37b8      	adds	r7, #184	; 0xb8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e198:	b094      	sub	sp, #80	; 0x50
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	4b78      	ldr	r3, [pc, #480]	; (800e38c <UART_SetConfig+0x1f8>)
 800e1aa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ae:	689a      	ldr	r2, [r3, #8]
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b8:	695b      	ldr	r3, [r3, #20]
 800e1ba:	431a      	orrs	r2, r3
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	69db      	ldr	r3, [r3, #28]
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4971      	ldr	r1, [pc, #452]	; (800e390 <UART_SetConfig+0x1fc>)
 800e1cc:	4019      	ands	r1, r3
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d4:	430b      	orrs	r3, r1
 800e1d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	68d9      	ldr	r1, [r3, #12]
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	ea40 0301 	orr.w	r3, r0, r1
 800e1ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	4b64      	ldr	r3, [pc, #400]	; (800e38c <UART_SetConfig+0x1f8>)
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d009      	beq.n	800e214 <UART_SetConfig+0x80>
 800e200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	4b63      	ldr	r3, [pc, #396]	; (800e394 <UART_SetConfig+0x200>)
 800e206:	429a      	cmp	r2, r3
 800e208:	d004      	beq.n	800e214 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	6a1a      	ldr	r2, [r3, #32]
 800e20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e210:	4313      	orrs	r3, r2
 800e212:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800e21e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e228:	430b      	orrs	r3, r1
 800e22a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	f023 000f 	bic.w	r0, r3, #15
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	ea40 0301 	orr.w	r3, r0, r1
 800e242:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	4b53      	ldr	r3, [pc, #332]	; (800e398 <UART_SetConfig+0x204>)
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d102      	bne.n	800e254 <UART_SetConfig+0xc0>
 800e24e:	2301      	movs	r3, #1
 800e250:	64bb      	str	r3, [r7, #72]	; 0x48
 800e252:	e066      	b.n	800e322 <UART_SetConfig+0x18e>
 800e254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	4b50      	ldr	r3, [pc, #320]	; (800e39c <UART_SetConfig+0x208>)
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d102      	bne.n	800e264 <UART_SetConfig+0xd0>
 800e25e:	2302      	movs	r3, #2
 800e260:	64bb      	str	r3, [r7, #72]	; 0x48
 800e262:	e05e      	b.n	800e322 <UART_SetConfig+0x18e>
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	4b4d      	ldr	r3, [pc, #308]	; (800e3a0 <UART_SetConfig+0x20c>)
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d102      	bne.n	800e274 <UART_SetConfig+0xe0>
 800e26e:	2304      	movs	r3, #4
 800e270:	64bb      	str	r3, [r7, #72]	; 0x48
 800e272:	e056      	b.n	800e322 <UART_SetConfig+0x18e>
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	4b4a      	ldr	r3, [pc, #296]	; (800e3a4 <UART_SetConfig+0x210>)
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d102      	bne.n	800e284 <UART_SetConfig+0xf0>
 800e27e:	2308      	movs	r3, #8
 800e280:	64bb      	str	r3, [r7, #72]	; 0x48
 800e282:	e04e      	b.n	800e322 <UART_SetConfig+0x18e>
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	4b47      	ldr	r3, [pc, #284]	; (800e3a8 <UART_SetConfig+0x214>)
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d102      	bne.n	800e294 <UART_SetConfig+0x100>
 800e28e:	2310      	movs	r3, #16
 800e290:	64bb      	str	r3, [r7, #72]	; 0x48
 800e292:	e046      	b.n	800e322 <UART_SetConfig+0x18e>
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	4b44      	ldr	r3, [pc, #272]	; (800e3ac <UART_SetConfig+0x218>)
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d102      	bne.n	800e2a4 <UART_SetConfig+0x110>
 800e29e:	2320      	movs	r3, #32
 800e2a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2a2:	e03e      	b.n	800e322 <UART_SetConfig+0x18e>
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	4b41      	ldr	r3, [pc, #260]	; (800e3b0 <UART_SetConfig+0x21c>)
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d102      	bne.n	800e2b4 <UART_SetConfig+0x120>
 800e2ae:	2340      	movs	r3, #64	; 0x40
 800e2b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2b2:	e036      	b.n	800e322 <UART_SetConfig+0x18e>
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	4b3e      	ldr	r3, [pc, #248]	; (800e3b4 <UART_SetConfig+0x220>)
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d102      	bne.n	800e2c4 <UART_SetConfig+0x130>
 800e2be:	2380      	movs	r3, #128	; 0x80
 800e2c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2c2:	e02e      	b.n	800e322 <UART_SetConfig+0x18e>
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	4b3b      	ldr	r3, [pc, #236]	; (800e3b8 <UART_SetConfig+0x224>)
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d103      	bne.n	800e2d6 <UART_SetConfig+0x142>
 800e2ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2d4:	e025      	b.n	800e322 <UART_SetConfig+0x18e>
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	4b38      	ldr	r3, [pc, #224]	; (800e3bc <UART_SetConfig+0x228>)
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d103      	bne.n	800e2e8 <UART_SetConfig+0x154>
 800e2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2e6:	e01c      	b.n	800e322 <UART_SetConfig+0x18e>
 800e2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	4b34      	ldr	r3, [pc, #208]	; (800e3c0 <UART_SetConfig+0x22c>)
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d103      	bne.n	800e2fa <UART_SetConfig+0x166>
 800e2f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2f8:	e013      	b.n	800e322 <UART_SetConfig+0x18e>
 800e2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	4b31      	ldr	r3, [pc, #196]	; (800e3c4 <UART_SetConfig+0x230>)
 800e300:	429a      	cmp	r2, r3
 800e302:	d103      	bne.n	800e30c <UART_SetConfig+0x178>
 800e304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e308:	64bb      	str	r3, [r7, #72]	; 0x48
 800e30a:	e00a      	b.n	800e322 <UART_SetConfig+0x18e>
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	4b1e      	ldr	r3, [pc, #120]	; (800e38c <UART_SetConfig+0x1f8>)
 800e312:	429a      	cmp	r2, r3
 800e314:	d103      	bne.n	800e31e <UART_SetConfig+0x18a>
 800e316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e31a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e31c:	e001      	b.n	800e322 <UART_SetConfig+0x18e>
 800e31e:	2300      	movs	r3, #0
 800e320:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	4b19      	ldr	r3, [pc, #100]	; (800e38c <UART_SetConfig+0x1f8>)
 800e328:	429a      	cmp	r2, r3
 800e32a:	d005      	beq.n	800e338 <UART_SetConfig+0x1a4>
 800e32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	4b18      	ldr	r3, [pc, #96]	; (800e394 <UART_SetConfig+0x200>)
 800e332:	429a      	cmp	r2, r3
 800e334:	f040 8094 	bne.w	800e460 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e33a:	2200      	movs	r2, #0
 800e33c:	623b      	str	r3, [r7, #32]
 800e33e:	627a      	str	r2, [r7, #36]	; 0x24
 800e340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e344:	f7fc fa44 	bl	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e348:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 80f7 	beq.w	800e540 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e356:	4a1c      	ldr	r2, [pc, #112]	; (800e3c8 <UART_SetConfig+0x234>)
 800e358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e35c:	461a      	mov	r2, r3
 800e35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e360:	fbb3 f3f2 	udiv	r3, r3, r2
 800e364:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e368:	685a      	ldr	r2, [r3, #4]
 800e36a:	4613      	mov	r3, r2
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	4413      	add	r3, r2
 800e370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e372:	429a      	cmp	r2, r3
 800e374:	d305      	bcc.n	800e382 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e37c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e37e:	429a      	cmp	r2, r3
 800e380:	d924      	bls.n	800e3cc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e388:	e069      	b.n	800e45e <UART_SetConfig+0x2ca>
 800e38a:	bf00      	nop
 800e38c:	44002400 	.word	0x44002400
 800e390:	cfff69f3 	.word	0xcfff69f3
 800e394:	54002400 	.word	0x54002400
 800e398:	40013800 	.word	0x40013800
 800e39c:	40004400 	.word	0x40004400
 800e3a0:	40004800 	.word	0x40004800
 800e3a4:	40004c00 	.word	0x40004c00
 800e3a8:	40005000 	.word	0x40005000
 800e3ac:	40006400 	.word	0x40006400
 800e3b0:	40007800 	.word	0x40007800
 800e3b4:	40007c00 	.word	0x40007c00
 800e3b8:	40008000 	.word	0x40008000
 800e3bc:	40006800 	.word	0x40006800
 800e3c0:	40006c00 	.word	0x40006c00
 800e3c4:	40008400 	.word	0x40008400
 800e3c8:	0801fd90 	.word	0x0801fd90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	61fa      	str	r2, [r7, #28]
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d8:	4a64      	ldr	r2, [pc, #400]	; (800e56c <UART_SetConfig+0x3d8>)
 800e3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	613b      	str	r3, [r7, #16]
 800e3e4:	617a      	str	r2, [r7, #20]
 800e3e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e3ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e3ee:	f7f1 ff61 	bl	80002b4 <__aeabi_uldivmod>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	f04f 0200 	mov.w	r2, #0
 800e3fe:	f04f 0300 	mov.w	r3, #0
 800e402:	020b      	lsls	r3, r1, #8
 800e404:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e408:	0202      	lsls	r2, r0, #8
 800e40a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e40c:	6849      	ldr	r1, [r1, #4]
 800e40e:	0849      	lsrs	r1, r1, #1
 800e410:	2000      	movs	r0, #0
 800e412:	460c      	mov	r4, r1
 800e414:	4605      	mov	r5, r0
 800e416:	eb12 0804 	adds.w	r8, r2, r4
 800e41a:	eb43 0905 	adc.w	r9, r3, r5
 800e41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	60bb      	str	r3, [r7, #8]
 800e426:	60fa      	str	r2, [r7, #12]
 800e428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e42c:	4640      	mov	r0, r8
 800e42e:	4649      	mov	r1, r9
 800e430:	f7f1 ff40 	bl	80002b4 <__aeabi_uldivmod>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4613      	mov	r3, r2
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e43e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e442:	d308      	bcc.n	800e456 <UART_SetConfig+0x2c2>
 800e444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e44a:	d204      	bcs.n	800e456 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e452:	60da      	str	r2, [r3, #12]
 800e454:	e003      	b.n	800e45e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800e45c:	e070      	b.n	800e540 <UART_SetConfig+0x3ac>
 800e45e:	e06f      	b.n	800e540 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e468:	d13c      	bne.n	800e4e4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e46a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e46c:	2200      	movs	r2, #0
 800e46e:	603b      	str	r3, [r7, #0]
 800e470:	607a      	str	r2, [r7, #4]
 800e472:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e476:	f7fc f9ab 	bl	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e47a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d05e      	beq.n	800e540 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e486:	4a39      	ldr	r2, [pc, #228]	; (800e56c <UART_SetConfig+0x3d8>)
 800e488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e48c:	461a      	mov	r2, r3
 800e48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e490:	fbb3 f3f2 	udiv	r3, r3, r2
 800e494:	005a      	lsls	r2, r3, #1
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	085b      	lsrs	r3, r3, #1
 800e49c:	441a      	add	r2, r3
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4aa:	2b0f      	cmp	r3, #15
 800e4ac:	d916      	bls.n	800e4dc <UART_SetConfig+0x348>
 800e4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4b4:	d212      	bcs.n	800e4dc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	f023 030f 	bic.w	r3, r3, #15
 800e4be:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c2:	085b      	lsrs	r3, r3, #1
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	f003 0307 	and.w	r3, r3, #7
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e4d8:	60da      	str	r2, [r3, #12]
 800e4da:	e031      	b.n	800e540 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e4e2:	e02d      	b.n	800e540 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e4e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	469a      	mov	sl, r3
 800e4ea:	4693      	mov	fp, r2
 800e4ec:	4650      	mov	r0, sl
 800e4ee:	4659      	mov	r1, fp
 800e4f0:	f7fc f96e 	bl	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e4f4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800e4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d021      	beq.n	800e540 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e500:	4a1a      	ldr	r2, [pc, #104]	; (800e56c <UART_SetConfig+0x3d8>)
 800e502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e506:	461a      	mov	r2, r3
 800e508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e50a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	085b      	lsrs	r3, r3, #1
 800e514:	441a      	add	r2, r3
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e51e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e522:	2b0f      	cmp	r3, #15
 800e524:	d909      	bls.n	800e53a <UART_SetConfig+0x3a6>
 800e526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e52c:	d205      	bcs.n	800e53a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e530:	b29a      	uxth	r2, r3
 800e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	60da      	str	r2, [r3, #12]
 800e538:	e002      	b.n	800e540 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	2201      	movs	r2, #1
 800e544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	2201      	movs	r2, #1
 800e54c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	2200      	movs	r2, #0
 800e554:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	2200      	movs	r2, #0
 800e55a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e55c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e560:	4618      	mov	r0, r3
 800e562:	3750      	adds	r7, #80	; 0x50
 800e564:	46bd      	mov	sp, r7
 800e566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e56a:	bf00      	nop
 800e56c:	0801fd90 	.word	0x0801fd90

0800e570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e57c:	f003 0308 	and.w	r3, r3, #8
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00a      	beq.n	800e59a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	430a      	orrs	r2, r1
 800e598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	430a      	orrs	r2, r1
 800e5ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c0:	f003 0302 	and.w	r3, r3, #2
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00a      	beq.n	800e5de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e2:	f003 0304 	and.w	r3, r3, #4
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00a      	beq.n	800e600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	430a      	orrs	r2, r1
 800e5fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e604:	f003 0310 	and.w	r3, r3, #16
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00a      	beq.n	800e622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	430a      	orrs	r2, r1
 800e620:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e626:	f003 0320 	and.w	r3, r3, #32
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00a      	beq.n	800e644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	689b      	ldr	r3, [r3, #8]
 800e634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	430a      	orrs	r2, r1
 800e642:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d01a      	beq.n	800e686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	430a      	orrs	r2, r1
 800e664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e66e:	d10a      	bne.n	800e686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	430a      	orrs	r2, r1
 800e684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00a      	beq.n	800e6a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	430a      	orrs	r2, r1
 800e6a6:	605a      	str	r2, [r3, #4]
  }
}
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b098      	sub	sp, #96	; 0x60
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e6c4:	f7f5 fb2c 	bl	8003d20 <HAL_GetTick>
 800e6c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f003 0308 	and.w	r3, r3, #8
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d12f      	bne.n	800e738 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6dc:	9300      	str	r3, [sp, #0]
 800e6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 f88e 	bl	800e808 <UART_WaitOnFlagUntilTimeout>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d022      	beq.n	800e738 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	e853 3f00 	ldrex	r3, [r3]
 800e6fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e706:	653b      	str	r3, [r7, #80]	; 0x50
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	461a      	mov	r2, r3
 800e70e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e710:	647b      	str	r3, [r7, #68]	; 0x44
 800e712:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e714:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e718:	e841 2300 	strex	r3, r2, [r1]
 800e71c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1e6      	bne.n	800e6f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2220      	movs	r2, #32
 800e728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2200      	movs	r2, #0
 800e730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e734:	2303      	movs	r3, #3
 800e736:	e063      	b.n	800e800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 0304 	and.w	r3, r3, #4
 800e742:	2b04      	cmp	r3, #4
 800e744:	d149      	bne.n	800e7da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e74e:	2200      	movs	r2, #0
 800e750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f857 	bl	800e808 <UART_WaitOnFlagUntilTimeout>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d03c      	beq.n	800e7da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	e853 3f00 	ldrex	r3, [r3]
 800e76c:	623b      	str	r3, [r7, #32]
   return(result);
 800e76e:	6a3b      	ldr	r3, [r7, #32]
 800e770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e774:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e77e:	633b      	str	r3, [r7, #48]	; 0x30
 800e780:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e786:	e841 2300 	strex	r3, r2, [r1]
 800e78a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1e6      	bne.n	800e760 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3308      	adds	r3, #8
 800e798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	e853 3f00 	ldrex	r3, [r3]
 800e7a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f023 0301 	bic.w	r3, r3, #1
 800e7a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b2:	61fa      	str	r2, [r7, #28]
 800e7b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b6:	69b9      	ldr	r1, [r7, #24]
 800e7b8:	69fa      	ldr	r2, [r7, #28]
 800e7ba:	e841 2300 	strex	r3, r2, [r1]
 800e7be:	617b      	str	r3, [r7, #20]
   return(result);
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1e5      	bne.n	800e792 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2220      	movs	r2, #32
 800e7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	e012      	b.n	800e800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2220      	movs	r2, #32
 800e7de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2220      	movs	r2, #32
 800e7e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3758      	adds	r7, #88	; 0x58
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	603b      	str	r3, [r7, #0]
 800e814:	4613      	mov	r3, r2
 800e816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e818:	e049      	b.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e820:	d045      	beq.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e822:	f7f5 fa7d 	bl	8003d20 <HAL_GetTick>
 800e826:	4602      	mov	r2, r0
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	69ba      	ldr	r2, [r7, #24]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d302      	bcc.n	800e838 <UART_WaitOnFlagUntilTimeout+0x30>
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e838:	2303      	movs	r3, #3
 800e83a:	e048      	b.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f003 0304 	and.w	r3, r3, #4
 800e846:	2b00      	cmp	r3, #0
 800e848:	d031      	beq.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	69db      	ldr	r3, [r3, #28]
 800e850:	f003 0308 	and.w	r3, r3, #8
 800e854:	2b08      	cmp	r3, #8
 800e856:	d110      	bne.n	800e87a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2208      	movs	r2, #8
 800e85e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f000 f95b 	bl	800eb1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2208      	movs	r2, #8
 800e86a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	e029      	b.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	69db      	ldr	r3, [r3, #28]
 800e880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e888:	d111      	bne.n	800e8ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f000 f941 	bl	800eb1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2220      	movs	r2, #32
 800e89e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e00f      	b.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	69da      	ldr	r2, [r3, #28]
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	4013      	ands	r3, r2
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	bf0c      	ite	eq
 800e8be:	2301      	moveq	r3, #1
 800e8c0:	2300      	movne	r3, #0
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d0a6      	beq.n	800e81a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b0a3      	sub	sp, #140	; 0x8c
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	68ba      	ldr	r2, [r7, #8]
 800e8ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	88fa      	ldrh	r2, [r7, #6]
 800e8f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	88fa      	ldrh	r2, [r7, #6]
 800e8f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e90a:	d10e      	bne.n	800e92a <UART_Start_Receive_IT+0x52>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d105      	bne.n	800e920 <UART_Start_Receive_IT+0x48>
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e91a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e91e:	e02d      	b.n	800e97c <UART_Start_Receive_IT+0xa4>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	22ff      	movs	r2, #255	; 0xff
 800e924:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e928:	e028      	b.n	800e97c <UART_Start_Receive_IT+0xa4>
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10d      	bne.n	800e94e <UART_Start_Receive_IT+0x76>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	691b      	ldr	r3, [r3, #16]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d104      	bne.n	800e944 <UART_Start_Receive_IT+0x6c>
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	22ff      	movs	r2, #255	; 0xff
 800e93e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e942:	e01b      	b.n	800e97c <UART_Start_Receive_IT+0xa4>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	227f      	movs	r2, #127	; 0x7f
 800e948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e94c:	e016      	b.n	800e97c <UART_Start_Receive_IT+0xa4>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e956:	d10d      	bne.n	800e974 <UART_Start_Receive_IT+0x9c>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	691b      	ldr	r3, [r3, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d104      	bne.n	800e96a <UART_Start_Receive_IT+0x92>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	227f      	movs	r2, #127	; 0x7f
 800e964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e968:	e008      	b.n	800e97c <UART_Start_Receive_IT+0xa4>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	223f      	movs	r2, #63	; 0x3f
 800e96e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e972:	e003      	b.n	800e97c <UART_Start_Receive_IT+0xa4>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2222      	movs	r2, #34	; 0x22
 800e988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	3308      	adds	r3, #8
 800e992:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e996:	e853 3f00 	ldrex	r3, [r3]
 800e99a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e99e:	f043 0301 	orr.w	r3, r3, #1
 800e9a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e9b0:	673a      	str	r2, [r7, #112]	; 0x70
 800e9b2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e9b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e9b8:	e841 2300 	strex	r3, r2, [r1]
 800e9bc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e9be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1e3      	bne.n	800e98c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9cc:	d14f      	bne.n	800ea6e <UART_Start_Receive_IT+0x196>
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9d4:	88fa      	ldrh	r2, [r7, #6]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d349      	bcc.n	800ea6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9e2:	d107      	bne.n	800e9f4 <UART_Start_Receive_IT+0x11c>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	691b      	ldr	r3, [r3, #16]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d103      	bne.n	800e9f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4a47      	ldr	r2, [pc, #284]	; (800eb0c <UART_Start_Receive_IT+0x234>)
 800e9f0:	675a      	str	r2, [r3, #116]	; 0x74
 800e9f2:	e002      	b.n	800e9fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	4a46      	ldr	r2, [pc, #280]	; (800eb10 <UART_Start_Receive_IT+0x238>)
 800e9f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d01a      	beq.n	800ea38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea0a:	e853 3f00 	ldrex	r3, [r3]
 800ea0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ea10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea24:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea26:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea2c:	e841 2300 	strex	r3, r2, [r1]
 800ea30:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ea32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1e4      	bne.n	800ea02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	3308      	adds	r3, #8
 800ea3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea42:	e853 3f00 	ldrex	r3, [r3]
 800ea46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3308      	adds	r3, #8
 800ea56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ea58:	64ba      	str	r2, [r7, #72]	; 0x48
 800ea5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea60:	e841 2300 	strex	r3, r2, [r1]
 800ea64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e5      	bne.n	800ea38 <UART_Start_Receive_IT+0x160>
 800ea6c:	e046      	b.n	800eafc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea76:	d107      	bne.n	800ea88 <UART_Start_Receive_IT+0x1b0>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	691b      	ldr	r3, [r3, #16]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4a24      	ldr	r2, [pc, #144]	; (800eb14 <UART_Start_Receive_IT+0x23c>)
 800ea84:	675a      	str	r2, [r3, #116]	; 0x74
 800ea86:	e002      	b.n	800ea8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	4a23      	ldr	r2, [pc, #140]	; (800eb18 <UART_Start_Receive_IT+0x240>)
 800ea8c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d019      	beq.n	800eaca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	e853 3f00 	ldrex	r3, [r3]
 800eaa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eaaa:	677b      	str	r3, [r7, #116]	; 0x74
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	461a      	mov	r2, r3
 800eab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eab4:	637b      	str	r3, [r7, #52]	; 0x34
 800eab6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eaba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eabc:	e841 2300 	strex	r3, r2, [r1]
 800eac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e6      	bne.n	800ea96 <UART_Start_Receive_IT+0x1be>
 800eac8:	e018      	b.n	800eafc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	e853 3f00 	ldrex	r3, [r3]
 800ead6:	613b      	str	r3, [r7, #16]
   return(result);
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	f043 0320 	orr.w	r3, r3, #32
 800eade:	67bb      	str	r3, [r7, #120]	; 0x78
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	461a      	mov	r2, r3
 800eae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eae8:	623b      	str	r3, [r7, #32]
 800eaea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaec:	69f9      	ldr	r1, [r7, #28]
 800eaee:	6a3a      	ldr	r2, [r7, #32]
 800eaf0:	e841 2300 	strex	r3, r2, [r1]
 800eaf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d1e6      	bne.n	800eaca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	378c      	adds	r7, #140	; 0x8c
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop
 800eb0c:	0800f365 	.word	0x0800f365
 800eb10:	0800eff5 	.word	0x0800eff5
 800eb14:	0800ee31 	.word	0x0800ee31
 800eb18:	0800ec6d 	.word	0x0800ec6d

0800eb1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b095      	sub	sp, #84	; 0x54
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2c:	e853 3f00 	ldrex	r3, [r3]
 800eb30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb42:	643b      	str	r3, [r7, #64]	; 0x40
 800eb44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb4a:	e841 2300 	strex	r3, r2, [r1]
 800eb4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1e6      	bne.n	800eb24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3308      	adds	r3, #8
 800eb5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	e853 3f00 	ldrex	r3, [r3]
 800eb64:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb6c:	f023 0301 	bic.w	r3, r3, #1
 800eb70:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3308      	adds	r3, #8
 800eb78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb82:	e841 2300 	strex	r3, r2, [r1]
 800eb86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d1e3      	bne.n	800eb56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d118      	bne.n	800ebc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	e853 3f00 	ldrex	r3, [r3]
 800eba2:	60bb      	str	r3, [r7, #8]
   return(result);
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	f023 0310 	bic.w	r3, r3, #16
 800ebaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebb4:	61bb      	str	r3, [r7, #24]
 800ebb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb8:	6979      	ldr	r1, [r7, #20]
 800ebba:	69ba      	ldr	r2, [r7, #24]
 800ebbc:	e841 2300 	strex	r3, r2, [r1]
 800ebc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1e6      	bne.n	800eb96 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2220      	movs	r2, #32
 800ebcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ebdc:	bf00      	nop
 800ebde:	3754      	adds	r7, #84	; 0x54
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f7ff faae 	bl	800e168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec0c:	bf00      	nop
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b088      	sub	sp, #32
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	e853 3f00 	ldrex	r3, [r3]
 800ec28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec30:	61fb      	str	r3, [r7, #28]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	461a      	mov	r2, r3
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	61bb      	str	r3, [r7, #24]
 800ec3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3e:	6979      	ldr	r1, [r7, #20]
 800ec40:	69ba      	ldr	r2, [r7, #24]
 800ec42:	e841 2300 	strex	r3, r2, [r1]
 800ec46:	613b      	str	r3, [r7, #16]
   return(result);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1e6      	bne.n	800ec1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2220      	movs	r2, #32
 800ec52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fa79 	bl	800e154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec62:	bf00      	nop
 800ec64:	3720      	adds	r7, #32
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
	...

0800ec6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b09c      	sub	sp, #112	; 0x70
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec7a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec84:	2b22      	cmp	r3, #34	; 0x22
 800ec86:	f040 80c3 	bne.w	800ee10 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ec94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ec98:	b2d9      	uxtb	r1, r3
 800ec9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eca4:	400a      	ands	r2, r1
 800eca6:	b2d2      	uxtb	r2, r2
 800eca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f040 80a6 	bne.w	800ee20 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecdc:	e853 3f00 	ldrex	r3, [r3]
 800ece0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ece2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ece4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ece8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ecf4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ecf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecfa:	e841 2300 	strex	r3, r2, [r1]
 800ecfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1e6      	bne.n	800ecd4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	3308      	adds	r3, #8
 800ed0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed10:	e853 3f00 	ldrex	r3, [r3]
 800ed14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed18:	f023 0301 	bic.w	r3, r3, #1
 800ed1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3308      	adds	r3, #8
 800ed24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed26:	647a      	str	r2, [r7, #68]	; 0x44
 800ed28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed2e:	e841 2300 	strex	r3, r2, [r1]
 800ed32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1e5      	bne.n	800ed06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2220      	movs	r2, #32
 800ed3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a35      	ldr	r2, [pc, #212]	; (800ee28 <UART_RxISR_8BIT+0x1bc>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d024      	beq.n	800eda2 <UART_RxISR_8BIT+0x136>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a33      	ldr	r2, [pc, #204]	; (800ee2c <UART_RxISR_8BIT+0x1c0>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d01f      	beq.n	800eda2 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d018      	beq.n	800eda2 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed78:	e853 3f00 	ldrex	r3, [r3]
 800ed7c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ed84:	663b      	str	r3, [r7, #96]	; 0x60
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ed90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed96:	e841 2300 	strex	r3, r2, [r1]
 800ed9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1e6      	bne.n	800ed70 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d12e      	bne.n	800ee08 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	e853 3f00 	ldrex	r3, [r3]
 800edbc:	60fb      	str	r3, [r7, #12]
   return(result);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f023 0310 	bic.w	r3, r3, #16
 800edc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edce:	61fb      	str	r3, [r7, #28]
 800edd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd2:	69b9      	ldr	r1, [r7, #24]
 800edd4:	69fa      	ldr	r2, [r7, #28]
 800edd6:	e841 2300 	strex	r3, r2, [r1]
 800edda:	617b      	str	r3, [r7, #20]
   return(result);
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1e6      	bne.n	800edb0 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	69db      	ldr	r3, [r3, #28]
 800ede8:	f003 0310 	and.w	r3, r3, #16
 800edec:	2b10      	cmp	r3, #16
 800edee:	d103      	bne.n	800edf8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2210      	movs	r2, #16
 800edf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edfe:	4619      	mov	r1, r3
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7ff f9bb 	bl	800e17c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee06:	e00b      	b.n	800ee20 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7f4 fe53 	bl	8003ab4 <HAL_UART_RxCpltCallback>
}
 800ee0e:	e007      	b.n	800ee20 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	699a      	ldr	r2, [r3, #24]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f042 0208 	orr.w	r2, r2, #8
 800ee1e:	619a      	str	r2, [r3, #24]
}
 800ee20:	bf00      	nop
 800ee22:	3770      	adds	r7, #112	; 0x70
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	44002400 	.word	0x44002400
 800ee2c:	54002400 	.word	0x54002400

0800ee30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b09c      	sub	sp, #112	; 0x70
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee48:	2b22      	cmp	r3, #34	; 0x22
 800ee4a:	f040 80c3 	bne.w	800efd4 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ee5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ee62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ee66:	4013      	ands	r3, r2
 800ee68:	b29a      	uxth	r2, r3
 800ee6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee72:	1c9a      	adds	r2, r3, #2
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	3b01      	subs	r3, #1
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f040 80a6 	bne.w	800efe4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eea0:	e853 3f00 	ldrex	r3, [r3]
 800eea4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800eea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eeac:	667b      	str	r3, [r7, #100]	; 0x64
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeb6:	657b      	str	r3, [r7, #84]	; 0x54
 800eeb8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eebe:	e841 2300 	strex	r3, r2, [r1]
 800eec2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1e6      	bne.n	800ee98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3308      	adds	r3, #8
 800eed0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eed4:	e853 3f00 	ldrex	r3, [r3]
 800eed8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	f023 0301 	bic.w	r3, r3, #1
 800eee0:	663b      	str	r3, [r7, #96]	; 0x60
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	3308      	adds	r3, #8
 800eee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eeea:	643a      	str	r2, [r7, #64]	; 0x40
 800eeec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eef2:	e841 2300 	strex	r3, r2, [r1]
 800eef6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1e5      	bne.n	800eeca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2220      	movs	r2, #32
 800ef02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a35      	ldr	r2, [pc, #212]	; (800efec <UART_RxISR_16BIT+0x1bc>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d024      	beq.n	800ef66 <UART_RxISR_16BIT+0x136>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a33      	ldr	r2, [pc, #204]	; (800eff0 <UART_RxISR_16BIT+0x1c0>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d01f      	beq.n	800ef66 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d018      	beq.n	800ef66 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3a:	6a3b      	ldr	r3, [r7, #32]
 800ef3c:	e853 3f00 	ldrex	r3, [r3]
 800ef40:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef54:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef5a:	e841 2300 	strex	r3, r2, [r1]
 800ef5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1e6      	bne.n	800ef34 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d12e      	bne.n	800efcc <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	e853 3f00 	ldrex	r3, [r3]
 800ef80:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	f023 0310 	bic.w	r3, r3, #16
 800ef88:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef92:	61bb      	str	r3, [r7, #24]
 800ef94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef96:	6979      	ldr	r1, [r7, #20]
 800ef98:	69ba      	ldr	r2, [r7, #24]
 800ef9a:	e841 2300 	strex	r3, r2, [r1]
 800ef9e:	613b      	str	r3, [r7, #16]
   return(result);
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1e6      	bne.n	800ef74 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	69db      	ldr	r3, [r3, #28]
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	2b10      	cmp	r3, #16
 800efb2:	d103      	bne.n	800efbc <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2210      	movs	r2, #16
 800efba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efc2:	4619      	mov	r1, r3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7ff f8d9 	bl	800e17c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efca:	e00b      	b.n	800efe4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7f4 fd71 	bl	8003ab4 <HAL_UART_RxCpltCallback>
}
 800efd2:	e007      	b.n	800efe4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	699a      	ldr	r2, [r3, #24]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f042 0208 	orr.w	r2, r2, #8
 800efe2:	619a      	str	r2, [r3, #24]
}
 800efe4:	bf00      	nop
 800efe6:	3770      	adds	r7, #112	; 0x70
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	44002400 	.word	0x44002400
 800eff0:	54002400 	.word	0x54002400

0800eff4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b0ac      	sub	sp, #176	; 0xb0
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f002:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f02a:	2b22      	cmp	r3, #34	; 0x22
 800f02c:	f040 8187 	bne.w	800f33e <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f036:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f03a:	e12a      	b.n	800f292 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f042:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f046:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f04a:	b2d9      	uxtb	r1, r3
 800f04c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f050:	b2da      	uxtb	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f056:	400a      	ands	r2, r1
 800f058:	b2d2      	uxtb	r2, r2
 800f05a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	3b01      	subs	r3, #1
 800f070:	b29a      	uxth	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	69db      	ldr	r3, [r3, #28]
 800f07e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f086:	f003 0307 	and.w	r3, r3, #7
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d053      	beq.n	800f136 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f092:	f003 0301 	and.w	r3, r3, #1
 800f096:	2b00      	cmp	r3, #0
 800f098:	d011      	beq.n	800f0be <UART_RxISR_8BIT_FIFOEN+0xca>
 800f09a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00b      	beq.n	800f0be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0b4:	f043 0201 	orr.w	r2, r3, #1
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0c2:	f003 0302 	and.w	r3, r3, #2
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d011      	beq.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f0ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2202      	movs	r2, #2
 800f0dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0e4:	f043 0204 	orr.w	r2, r3, #4
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0f2:	f003 0304 	and.w	r3, r3, #4
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d011      	beq.n	800f11e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f0fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00b      	beq.n	800f11e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2204      	movs	r2, #4
 800f10c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f114:	f043 0202 	orr.w	r2, r3, #2
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f124:	2b00      	cmp	r3, #0
 800f126:	d006      	beq.n	800f136 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7ff f81d 	bl	800e168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f040 80a7 	bne.w	800f292 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f14c:	e853 3f00 	ldrex	r3, [r3]
 800f150:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	461a      	mov	r2, r3
 800f162:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f166:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f168:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f16c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f16e:	e841 2300 	strex	r3, r2, [r1]
 800f172:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1e4      	bne.n	800f144 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	3308      	adds	r3, #8
 800f180:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f184:	e853 3f00 	ldrex	r3, [r3]
 800f188:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f18a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f18c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f190:	f023 0301 	bic.w	r3, r3, #1
 800f194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3308      	adds	r3, #8
 800f19e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f1a2:	66ba      	str	r2, [r7, #104]	; 0x68
 800f1a4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f1a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f1aa:	e841 2300 	strex	r3, r2, [r1]
 800f1ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f1b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e1      	bne.n	800f17a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2220      	movs	r2, #32
 800f1ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	4a62      	ldr	r2, [pc, #392]	; (800f358 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d026      	beq.n	800f222 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	4a60      	ldr	r2, [pc, #384]	; (800f35c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d021      	beq.n	800f222 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d01a      	beq.n	800f222 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1f4:	e853 3f00 	ldrex	r3, [r3]
 800f1f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	461a      	mov	r2, r3
 800f20a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f20e:	657b      	str	r3, [r7, #84]	; 0x54
 800f210:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f216:	e841 2300 	strex	r3, r2, [r1]
 800f21a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e4      	bne.n	800f1ec <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f226:	2b01      	cmp	r3, #1
 800f228:	d130      	bne.n	800f28c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f238:	e853 3f00 	ldrex	r3, [r3]
 800f23c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f240:	f023 0310 	bic.w	r3, r3, #16
 800f244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	461a      	mov	r2, r3
 800f24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f252:	643b      	str	r3, [r7, #64]	; 0x40
 800f254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f25a:	e841 2300 	strex	r3, r2, [r1]
 800f25e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1e4      	bne.n	800f230 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	f003 0310 	and.w	r3, r3, #16
 800f270:	2b10      	cmp	r3, #16
 800f272:	d103      	bne.n	800f27c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2210      	movs	r2, #16
 800f27a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f282:	4619      	mov	r1, r3
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7fe ff79 	bl	800e17c <HAL_UARTEx_RxEventCallback>
 800f28a:	e002      	b.n	800f292 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7f4 fc11 	bl	8003ab4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f292:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f296:	2b00      	cmp	r3, #0
 800f298:	d006      	beq.n	800f2a8 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800f29a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f29e:	f003 0320 	and.w	r3, r3, #32
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f47f aeca 	bne.w	800f03c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f2b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d049      	beq.n	800f34e <UART_RxISR_8BIT_FIFOEN+0x35a>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f2c0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d242      	bcs.n	800f34e <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	3308      	adds	r3, #8
 800f2ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d0:	6a3b      	ldr	r3, [r7, #32]
 800f2d2:	e853 3f00 	ldrex	r3, [r3]
 800f2d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f2de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f2ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f4:	e841 2300 	strex	r3, r2, [r1]
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1e3      	bne.n	800f2c8 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a17      	ldr	r2, [pc, #92]	; (800f360 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800f304:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	e853 3f00 	ldrex	r3, [r3]
 800f312:	60bb      	str	r3, [r7, #8]
   return(result);
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	f043 0320 	orr.w	r3, r3, #32
 800f31a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	461a      	mov	r2, r3
 800f324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f328:	61bb      	str	r3, [r7, #24]
 800f32a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f32c:	6979      	ldr	r1, [r7, #20]
 800f32e:	69ba      	ldr	r2, [r7, #24]
 800f330:	e841 2300 	strex	r3, r2, [r1]
 800f334:	613b      	str	r3, [r7, #16]
   return(result);
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1e4      	bne.n	800f306 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f33c:	e007      	b.n	800f34e <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	699a      	ldr	r2, [r3, #24]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f042 0208 	orr.w	r2, r2, #8
 800f34c:	619a      	str	r2, [r3, #24]
}
 800f34e:	bf00      	nop
 800f350:	37b0      	adds	r7, #176	; 0xb0
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	44002400 	.word	0x44002400
 800f35c:	54002400 	.word	0x54002400
 800f360:	0800ec6d 	.word	0x0800ec6d

0800f364 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b0ae      	sub	sp, #184	; 0xb8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f372:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	69db      	ldr	r3, [r3, #28]
 800f37c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f39a:	2b22      	cmp	r3, #34	; 0x22
 800f39c:	f040 818b 	bne.w	800f6b6 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f3a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f3aa:	e12e      	b.n	800f60a <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f3be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f3c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f3c6:	4013      	ands	r3, r2
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3d4:	1c9a      	adds	r2, r3, #2
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	3b01      	subs	r3, #1
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	69db      	ldr	r3, [r3, #28]
 800f3f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f3fa:	f003 0307 	and.w	r3, r3, #7
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d053      	beq.n	800f4aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d011      	beq.n	800f432 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f40e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00b      	beq.n	800f432 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2201      	movs	r2, #1
 800f420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f428:	f043 0201 	orr.w	r2, r3, #1
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f436:	f003 0302 	and.w	r3, r3, #2
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d011      	beq.n	800f462 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f43e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f442:	f003 0301 	and.w	r3, r3, #1
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00b      	beq.n	800f462 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2202      	movs	r2, #2
 800f450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f458:	f043 0204 	orr.w	r2, r3, #4
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f466:	f003 0304 	and.w	r3, r3, #4
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d011      	beq.n	800f492 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f46e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f472:	f003 0301 	and.w	r3, r3, #1
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00b      	beq.n	800f492 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2204      	movs	r2, #4
 800f480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f488:	f043 0202 	orr.w	r2, r3, #2
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d006      	beq.n	800f4aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7fe fe63 	bl	800e168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f040 80a9 	bne.w	800f60a <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4c0:	e853 3f00 	ldrex	r3, [r3]
 800f4c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f4c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f4da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f4e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f4e6:	e841 2300 	strex	r3, r2, [r1]
 800f4ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f4ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1e2      	bne.n	800f4b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	3308      	adds	r3, #8
 800f4f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4fc:	e853 3f00 	ldrex	r3, [r3]
 800f500:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f508:	f023 0301 	bic.w	r3, r3, #1
 800f50c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	3308      	adds	r3, #8
 800f516:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f51a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f51c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f522:	e841 2300 	strex	r3, r2, [r1]
 800f526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d1e1      	bne.n	800f4f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2220      	movs	r2, #32
 800f532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2200      	movs	r2, #0
 800f53a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a62      	ldr	r2, [pc, #392]	; (800f6d0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d026      	beq.n	800f59a <UART_RxISR_16BIT_FIFOEN+0x236>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a60      	ldr	r2, [pc, #384]	; (800f6d4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d021      	beq.n	800f59a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f560:	2b00      	cmp	r3, #0
 800f562:	d01a      	beq.n	800f59a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f56c:	e853 3f00 	ldrex	r3, [r3]
 800f570:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	461a      	mov	r2, r3
 800f582:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f586:	65bb      	str	r3, [r7, #88]	; 0x58
 800f588:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f58a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f58c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f58e:	e841 2300 	strex	r3, r2, [r1]
 800f592:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1e4      	bne.n	800f564 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d130      	bne.n	800f604 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b8:	f023 0310 	bic.w	r3, r3, #16
 800f5bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5ca:	647b      	str	r3, [r7, #68]	; 0x44
 800f5cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5d2:	e841 2300 	strex	r3, r2, [r1]
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1e4      	bne.n	800f5a8 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	69db      	ldr	r3, [r3, #28]
 800f5e4:	f003 0310 	and.w	r3, r3, #16
 800f5e8:	2b10      	cmp	r3, #16
 800f5ea:	d103      	bne.n	800f5f4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2210      	movs	r2, #16
 800f5f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7fe fdbd 	bl	800e17c <HAL_UARTEx_RxEventCallback>
 800f602:	e002      	b.n	800f60a <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7f4 fa55 	bl	8003ab4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f60a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d006      	beq.n	800f620 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800f612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f616:	f003 0320 	and.w	r3, r3, #32
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f47f aec6 	bne.w	800f3ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f626:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f62a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d049      	beq.n	800f6c6 <UART_RxISR_16BIT_FIFOEN+0x362>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f638:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d242      	bcs.n	800f6c6 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3308      	adds	r3, #8
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	e853 3f00 	ldrex	r3, [r3]
 800f64e:	623b      	str	r3, [r7, #32]
   return(result);
 800f650:	6a3b      	ldr	r3, [r7, #32]
 800f652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	3308      	adds	r3, #8
 800f660:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f664:	633a      	str	r2, [r7, #48]	; 0x30
 800f666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f66c:	e841 2300 	strex	r3, r2, [r1]
 800f670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1e3      	bne.n	800f640 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a17      	ldr	r2, [pc, #92]	; (800f6d8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800f67c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	e853 3f00 	ldrex	r3, [r3]
 800f68a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f043 0320 	orr.w	r3, r3, #32
 800f692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	461a      	mov	r2, r3
 800f69c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f6a0:	61fb      	str	r3, [r7, #28]
 800f6a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a4:	69b9      	ldr	r1, [r7, #24]
 800f6a6:	69fa      	ldr	r2, [r7, #28]
 800f6a8:	e841 2300 	strex	r3, r2, [r1]
 800f6ac:	617b      	str	r3, [r7, #20]
   return(result);
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1e4      	bne.n	800f67e <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6b4:	e007      	b.n	800f6c6 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	699a      	ldr	r2, [r3, #24]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f042 0208 	orr.w	r2, r2, #8
 800f6c4:	619a      	str	r2, [r3, #24]
}
 800f6c6:	bf00      	nop
 800f6c8:	37b8      	adds	r7, #184	; 0xb8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	44002400 	.word	0x44002400
 800f6d4:	54002400 	.word	0x54002400
 800f6d8:	0800ee31 	.word	0x0800ee31

0800f6dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6e4:	bf00      	nop
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f6f8:	bf00      	nop
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f70c:	bf00      	nop
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f726:	2b01      	cmp	r3, #1
 800f728:	d101      	bne.n	800f72e <HAL_UARTEx_DisableFifoMode+0x16>
 800f72a:	2302      	movs	r3, #2
 800f72c:	e027      	b.n	800f77e <HAL_UARTEx_DisableFifoMode+0x66>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2201      	movs	r2, #1
 800f732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2224      	movs	r2, #36	; 0x24
 800f73a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f022 0201 	bic.w	r2, r2, #1
 800f754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f75c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2220      	movs	r2, #32
 800f770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b084      	sub	sp, #16
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d101      	bne.n	800f7a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f79e:	2302      	movs	r3, #2
 800f7a0:	e02d      	b.n	800f7fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2224      	movs	r2, #36	; 0x24
 800f7ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f022 0201 	bic.w	r2, r2, #1
 800f7c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	430a      	orrs	r2, r1
 800f7dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f850 	bl	800f884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2220      	movs	r2, #32
 800f7f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b084      	sub	sp, #16
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f816:	2b01      	cmp	r3, #1
 800f818:	d101      	bne.n	800f81e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f81a:	2302      	movs	r3, #2
 800f81c:	e02d      	b.n	800f87a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2201      	movs	r2, #1
 800f822:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2224      	movs	r2, #36	; 0x24
 800f82a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f022 0201 	bic.w	r2, r2, #1
 800f844:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	430a      	orrs	r2, r1
 800f858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 f812 	bl	800f884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2220      	movs	r2, #32
 800f86c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
	...

0800f884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f890:	2b00      	cmp	r3, #0
 800f892:	d108      	bne.n	800f8a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f8a4:	e031      	b.n	800f90a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f8a6:	2308      	movs	r3, #8
 800f8a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f8aa:	2308      	movs	r3, #8
 800f8ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	689b      	ldr	r3, [r3, #8]
 800f8b4:	0e5b      	lsrs	r3, r3, #25
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	f003 0307 	and.w	r3, r3, #7
 800f8bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	0f5b      	lsrs	r3, r3, #29
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	f003 0307 	and.w	r3, r3, #7
 800f8cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	7b3a      	ldrb	r2, [r7, #12]
 800f8d2:	4911      	ldr	r1, [pc, #68]	; (800f918 <UARTEx_SetNbDataToProcess+0x94>)
 800f8d4:	5c8a      	ldrb	r2, [r1, r2]
 800f8d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8da:	7b3a      	ldrb	r2, [r7, #12]
 800f8dc:	490f      	ldr	r1, [pc, #60]	; (800f91c <UARTEx_SetNbDataToProcess+0x98>)
 800f8de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8ec:	7bfb      	ldrb	r3, [r7, #15]
 800f8ee:	7b7a      	ldrb	r2, [r7, #13]
 800f8f0:	4909      	ldr	r1, [pc, #36]	; (800f918 <UARTEx_SetNbDataToProcess+0x94>)
 800f8f2:	5c8a      	ldrb	r2, [r1, r2]
 800f8f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8f8:	7b7a      	ldrb	r2, [r7, #13]
 800f8fa:	4908      	ldr	r1, [pc, #32]	; (800f91c <UARTEx_SetNbDataToProcess+0x98>)
 800f8fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800f902:	b29a      	uxth	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f90a:	bf00      	nop
 800f90c:	3714      	adds	r7, #20
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	0801fda8 	.word	0x0801fda8
 800f91c:	0801fdb0 	.word	0x0801fdb0

0800f920 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800f920:	b480      	push	{r7}
 800f922:	b087      	sub	sp, #28
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	607a      	str	r2, [r7, #4]
 800f92c:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800f92e:	2301      	movs	r3, #1
 800f930:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	611a      	str	r2, [r3, #16]

  return ret;
 800f950:	697b      	ldr	r3, [r7, #20]
}
 800f952:	4618      	mov	r0, r3
 800f954:	371c      	adds	r7, #28
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr

0800f95e <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800f95e:	b480      	push	{r7}
 800f960:	b08b      	sub	sp, #44	; 0x2c
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800f96a:	2301      	movs	r3, #1
 800f96c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800f96e:	2300      	movs	r3, #0
 800f970:	623b      	str	r3, [r7, #32]
 800f972:	e042      	b.n	800f9fa <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	3301      	adds	r3, #1
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	6892      	ldr	r2, [r2, #8]
 800f97e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f982:	fb01 f202 	mul.w	r2, r1, r2
 800f986:	1a9b      	subs	r3, r3, r2
 800f988:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	69ba      	ldr	r2, [r7, #24]
 800f990:	429a      	cmp	r2, r3
 800f992:	d02c      	beq.n	800f9ee <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	691b      	ldr	r3, [r3, #16]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d024      	beq.n	800f9e6 <qbufferWrite+0x88>
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d021      	beq.n	800f9e6 <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	691a      	ldr	r2, [r3, #16]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	68f9      	ldr	r1, [r7, #12]
 800f9ac:	68c9      	ldr	r1, [r1, #12]
 800f9ae:	fb01 f303 	mul.w	r3, r1, r3
 800f9b2:	4413      	add	r3, r2
 800f9b4:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	61fb      	str	r3, [r7, #28]
 800f9ba:	e00a      	b.n	800f9d2 <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	68ba      	ldr	r2, [r7, #8]
 800f9c0:	441a      	add	r2, r3
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	6979      	ldr	r1, [r7, #20]
 800f9c6:	440b      	add	r3, r1
 800f9c8:	7812      	ldrb	r2, [r2, #0]
 800f9ca:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	61fb      	str	r3, [r7, #28]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	68da      	ldr	r2, [r3, #12]
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d8ef      	bhi.n	800f9bc <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	69ba      	ldr	r2, [r7, #24]
 800f9ea:	601a      	str	r2, [r3, #0]
 800f9ec:	e002      	b.n	800f9f4 <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f9f2:	e006      	b.n	800fa02 <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	623b      	str	r3, [r7, #32]
 800f9fa:	6a3b      	ldr	r3, [r7, #32]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d8b8      	bhi.n	800f974 <qbufferWrite+0x16>
    }
  }

  return ret;
 800fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	372c      	adds	r7, #44	; 0x2c
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b089      	sub	sp, #36	; 0x24
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 800fa20:	2300      	movs	r3, #0
 800fa22:	61bb      	str	r3, [r7, #24]
 800fa24:	e041      	b.n	800faaa <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	691b      	ldr	r3, [r3, #16]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d024      	beq.n	800fa78 <qbufferRead+0x68>
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d021      	beq.n	800fa78 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	691a      	ldr	r2, [r3, #16]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	68f9      	ldr	r1, [r7, #12]
 800fa3e:	68c9      	ldr	r1, [r1, #12]
 800fa40:	fb01 f303 	mul.w	r3, r1, r3
 800fa44:	4413      	add	r3, r2
 800fa46:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 800fa48:	2300      	movs	r3, #0
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	e00a      	b.n	800fa64 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	441a      	add	r2, r3
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	68b9      	ldr	r1, [r7, #8]
 800fa58:	440b      	add	r3, r1
 800fa5a:	7812      	ldrb	r2, [r2, #0]
 800fa5c:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	3301      	adds	r3, #1
 800fa62:	617b      	str	r3, [r7, #20]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	68da      	ldr	r2, [r3, #12]
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d8ef      	bhi.n	800fa4e <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	68ba      	ldr	r2, [r7, #8]
 800fa74:	4413      	add	r3, r2
 800fa76:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	685a      	ldr	r2, [r3, #4]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d00c      	beq.n	800fa9e <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	6892      	ldr	r2, [r2, #8]
 800fa8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa92:	fb01 f202 	mul.w	r2, r1, r2
 800fa96:	1a9a      	subs	r2, r3, r2
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	605a      	str	r2, [r3, #4]
 800fa9c:	e002      	b.n	800faa4 <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	61fb      	str	r3, [r7, #28]
      break;
 800faa2:	e006      	b.n	800fab2 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	3301      	adds	r3, #1
 800faa8:	61bb      	str	r3, [r7, #24]
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d8b9      	bhi.n	800fa26 <qbufferRead+0x16>
    }
  }

  return ret;
 800fab2:	69fb      	ldr	r3, [r7, #28]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3724      	adds	r7, #36	; 0x24
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	691a      	ldr	r2, [r3, #16]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	6879      	ldr	r1, [r7, #4]
 800fad2:	68c9      	ldr	r1, [r1, #12]
 800fad4:	fb01 f303 	mul.w	r3, r1, r3
 800fad8:	4413      	add	r3, r2
}
 800fada:	4618      	mov	r0, r3
 800fadc:	370c      	adds	r7, #12
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800fae6:	b480      	push	{r7}
 800fae8:	b085      	sub	sp, #20
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	6892      	ldr	r2, [r2, #8]
 800fafc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb00:	fb01 f202 	mul.w	r2, r1, r2
 800fb04:	1a9b      	subs	r3, r3, r2
 800fb06:	60fb      	str	r3, [r7, #12]

  return ret;
 800fb08:	68fb      	ldr	r3, [r7, #12]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3714      	adds	r7, #20
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
	...

0800fb18 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
  svGetChar = funcGetChar;
 800fb24:	4a18      	ldr	r2, [pc, #96]	; (800fb88 <svCLI_Init+0x70>)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6013      	str	r3, [r2, #0]
  svPutChar = funcPutChar;
 800fb2a:	4a18      	ldr	r2, [pc, #96]	; (800fb8c <svCLI_Init+0x74>)
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	6013      	str	r3, [r2, #0]
  svCommit = funcCommit;
 800fb30:	4a17      	ldr	r2, [pc, #92]	; (800fb90 <svCLI_Init+0x78>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6013      	str	r3, [r2, #0]
  szCLIString[0] = 0;
 800fb36:	4b17      	ldr	r3, [pc, #92]	; (800fb94 <svCLI_Init+0x7c>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800fb3c:	4b16      	ldr	r3, [pc, #88]	; (800fb98 <svCLI_Init+0x80>)
 800fb3e:	4a17      	ldr	r2, [pc, #92]	; (800fb9c <svCLI_Init+0x84>)
 800fb40:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800fb42:	4b17      	ldr	r3, [pc, #92]	; (800fba0 <svCLI_Init+0x88>)
 800fb44:	4a17      	ldr	r2, [pc, #92]	; (800fba4 <svCLI_Init+0x8c>)
 800fb46:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800fb48:	4b17      	ldr	r3, [pc, #92]	; (800fba8 <svCLI_Init+0x90>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00d      	beq.n	800fb6c <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800fb50:	4b16      	ldr	r3, [pc, #88]	; (800fbac <svCLI_Init+0x94>)
 800fb52:	4a17      	ldr	r2, [pc, #92]	; (800fbb0 <svCLI_Init+0x98>)
 800fb54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb58:	6018      	str	r0, [r3, #0]
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	8019      	strh	r1, [r3, #0]
 800fb5e:	3302      	adds	r3, #2
 800fb60:	0c0a      	lsrs	r2, r1, #16
 800fb62:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800fb64:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <svCLI_Init+0x9c>)
 800fb66:	2206      	movs	r2, #6
 800fb68:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800fb6a:	e007      	b.n	800fb7c <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800fb6c:	4b0f      	ldr	r3, [pc, #60]	; (800fbac <svCLI_Init+0x94>)
 800fb6e:	4a12      	ldr	r2, [pc, #72]	; (800fbb8 <svCLI_Init+0xa0>)
 800fb70:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb72:	c303      	stmia	r3!, {r0, r1}
 800fb74:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800fb76:	4b0f      	ldr	r3, [pc, #60]	; (800fbb4 <svCLI_Init+0x9c>)
 800fb78:	2209      	movs	r2, #9
 800fb7a:	601a      	str	r2, [r3, #0]
}
 800fb7c:	bf00      	nop
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	20004180 	.word	0x20004180
 800fb8c:	20004184 	.word	0x20004184
 800fb90:	20004188 	.word	0x20004188
 800fb94:	20003f6c 	.word	0x20003f6c
 800fb98:	20004178 	.word	0x20004178
 800fb9c:	0801cdb8 	.word	0x0801cdb8
 800fba0:	2000417c 	.word	0x2000417c
 800fba4:	0801cde8 	.word	0x0801cde8
 800fba8:	20000064 	.word	0x20000064
 800fbac:	20000068 	.word	0x20000068
 800fbb0:	0801d154 	.word	0x0801d154
 800fbb4:	20000074 	.word	0x20000074
 800fbb8:	0801d15c 	.word	0x0801d15c

0800fbbc <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800fbbc:	b40f      	push	{r0, r1, r2, r3}
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b084      	sub	sp, #16
 800fbc2:	af00      	add	r7, sp, #0
static char msg[256];
  va_list ap;
  int len;

  va_start(ap, fmt);
 800fbc4:	f107 031c 	add.w	r3, r7, #28
 800fbc8:	607b      	str	r3, [r7, #4]
  len = vsprintf(msg, fmt, ap);
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	69b9      	ldr	r1, [r7, #24]
 800fbce:	480f      	ldr	r0, [pc, #60]	; (800fc0c <svCLI_Printf+0x50>)
 800fbd0:	f00c f90c 	bl	801bdec <vsiprintf>
 800fbd4:	60b8      	str	r0, [r7, #8]
  va_end(ap);
  for (int i=0;i<len;i++) {
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	60fb      	str	r3, [r7, #12]
 800fbda:	e00a      	b.n	800fbf2 <svCLI_Printf+0x36>
    svPutChar(msg[i]);
 800fbdc:	4b0c      	ldr	r3, [pc, #48]	; (800fc10 <svCLI_Printf+0x54>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	490a      	ldr	r1, [pc, #40]	; (800fc0c <svCLI_Printf+0x50>)
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	440a      	add	r2, r1
 800fbe6:	7812      	ldrb	r2, [r2, #0]
 800fbe8:	4610      	mov	r0, r2
 800fbea:	4798      	blx	r3
  for (int i=0;i<len;i++) {
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	60fb      	str	r3, [r7, #12]
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	dbf0      	blt.n	800fbdc <svCLI_Printf+0x20>
  }
  return len;
 800fbfa:	68bb      	ldr	r3, [r7, #8]
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc06:	b004      	add	sp, #16
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	20004198 	.word	0x20004198
 800fc10:	20004184 	.word	0x20004184

0800fc14 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
  if (svPutChar) {
 800fc1a:	4b2d      	ldr	r3, [pc, #180]	; (800fcd0 <svCLI_ShowHelp+0xbc>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d04a      	beq.n	800fcb8 <svCLI_ShowHelp+0xa4>
    if (sCLITableBegin != sCLITablEnd) {
 800fc22:	4b2c      	ldr	r3, [pc, #176]	; (800fcd4 <svCLI_ShowHelp+0xc0>)
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	4b2c      	ldr	r3, [pc, #176]	; (800fcd8 <svCLI_ShowHelp+0xc4>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d03e      	beq.n	800fcac <svCLI_ShowHelp+0x98>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800fc2e:	2300      	movs	r3, #0
 800fc30:	60fb      	str	r3, [r7, #12]
 800fc32:	e006      	b.n	800fc42 <svCLI_ShowHelp+0x2e>
 800fc34:	4b26      	ldr	r3, [pc, #152]	; (800fcd0 <svCLI_ShowHelp+0xbc>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	203d      	movs	r0, #61	; 0x3d
 800fc3a:	4798      	blx	r3
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	60fb      	str	r3, [r7, #12]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b4f      	cmp	r3, #79	; 0x4f
 800fc46:	d9f5      	bls.n	800fc34 <svCLI_ShowHelp+0x20>
      svCLI_Printf("\r\n");
 800fc48:	4824      	ldr	r0, [pc, #144]	; (800fcdc <svCLI_ShowHelp+0xc8>)
 800fc4a:	f7ff ffb7 	bl	800fbbc <svCLI_Printf>
      SVCLI_t* pCLIEntry;
      int nCount = 1;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	607b      	str	r3, [r7, #4]
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800fc52:	4b20      	ldr	r3, [pc, #128]	; (800fcd4 <svCLI_ShowHelp+0xc0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	60bb      	str	r3, [r7, #8]
 800fc58:	e012      	b.n	800fc80 <svCLI_ShowHelp+0x6c>
        svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800fc5a:	6879      	ldr	r1, [r7, #4]
 800fc5c:	1c4b      	adds	r3, r1, #1
 800fc5e:	607b      	str	r3, [r7, #4]
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <svCLI_ShowHelp+0x5e>
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	e000      	b.n	800fc74 <svCLI_ShowHelp+0x60>
 800fc72:	4b1b      	ldr	r3, [pc, #108]	; (800fce0 <svCLI_ShowHelp+0xcc>)
 800fc74:	481b      	ldr	r0, [pc, #108]	; (800fce4 <svCLI_ShowHelp+0xd0>)
 800fc76:	f7ff ffa1 	bl	800fbbc <svCLI_Printf>
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	330c      	adds	r3, #12
 800fc7e:	60bb      	str	r3, [r7, #8]
 800fc80:	4b15      	ldr	r3, [pc, #84]	; (800fcd8 <svCLI_ShowHelp+0xc4>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68ba      	ldr	r2, [r7, #8]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d3e7      	bcc.n	800fc5a <svCLI_ShowHelp+0x46>
      }
      svCLI_Printf(AES_RESET);
 800fc8a:	4817      	ldr	r0, [pc, #92]	; (800fce8 <svCLI_ShowHelp+0xd4>)
 800fc8c:	f7ff ff96 	bl	800fbbc <svCLI_Printf>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800fc90:	2300      	movs	r3, #0
 800fc92:	603b      	str	r3, [r7, #0]
 800fc94:	e006      	b.n	800fca4 <svCLI_ShowHelp+0x90>
 800fc96:	4b0e      	ldr	r3, [pc, #56]	; (800fcd0 <svCLI_ShowHelp+0xbc>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	203d      	movs	r0, #61	; 0x3d
 800fc9c:	4798      	blx	r3
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	3301      	adds	r3, #1
 800fca2:	603b      	str	r3, [r7, #0]
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	2b4f      	cmp	r3, #79	; 0x4f
 800fca8:	d9f5      	bls.n	800fc96 <svCLI_ShowHelp+0x82>
 800fcaa:	e002      	b.n	800fcb2 <svCLI_ShowHelp+0x9e>
    }
    else {  // No CLI Entry
      svCLI_Printf("No CLI Entries !!!");
 800fcac:	480f      	ldr	r0, [pc, #60]	; (800fcec <svCLI_ShowHelp+0xd8>)
 800fcae:	f7ff ff85 	bl	800fbbc <svCLI_Printf>
    }
    svCLI_Printf("\r\n");
 800fcb2:	480a      	ldr	r0, [pc, #40]	; (800fcdc <svCLI_ShowHelp+0xc8>)
 800fcb4:	f7ff ff82 	bl	800fbbc <svCLI_Printf>
  }
  if (svCommit) {
 800fcb8:	4b0d      	ldr	r3, [pc, #52]	; (800fcf0 <svCLI_ShowHelp+0xdc>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <svCLI_ShowHelp+0xb2>
    svCommit();
 800fcc0:	4b0b      	ldr	r3, [pc, #44]	; (800fcf0 <svCLI_ShowHelp+0xdc>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4798      	blx	r3
  }
}
 800fcc6:	bf00      	nop
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	20004184 	.word	0x20004184
 800fcd4:	20004178 	.word	0x20004178
 800fcd8:	2000417c 	.word	0x2000417c
 800fcdc:	0801d168 	.word	0x0801d168
 800fce0:	0801d16c 	.word	0x0801d16c
 800fce4:	0801d170 	.word	0x0801d170
 800fce8:	0801d190 	.word	0x0801d190
 800fcec:	0801d198 	.word	0x0801d198
 800fcf0:	20004188 	.word	0x20004188

0800fcf4 <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	f7f3 fec5 	bl	8003a88 <Uart_Available>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d101      	bne.n	800fd08 <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e000      	b.n	800fd0a <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 800fd08:	2300      	movs	r3, #0
  }
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800fd0e:	b480      	push	{r7}
 800fd10:	b085      	sub	sp, #20
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
  int nCount = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	60fb      	str	r3, [r7, #12]
  if ((szString == NULL) || (*szString == 0))
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d003      	beq.n	800fd28 <_strlenOffspace+0x1a>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d104      	bne.n	800fd32 <_strlenOffspace+0x24>
    return 0;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	e017      	b.n	800fd5c <_strlenOffspace+0x4e>
  // Strip off first spaces
  while (*szString == ' ') szString++;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	3301      	adds	r3, #1
 800fd30:	607b      	str	r3, [r7, #4]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b20      	cmp	r3, #32
 800fd38:	d0f8      	beq.n	800fd2c <_strlenOffspace+0x1e>
  // Count
  while (*szString) {
 800fd3a:	e008      	b.n	800fd4e <_strlenOffspace+0x40>
    if (*szString++ != ' ') {
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	1c5a      	adds	r2, r3, #1
 800fd40:	607a      	str	r2, [r7, #4]
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b20      	cmp	r3, #32
 800fd46:	d007      	beq.n	800fd58 <_strlenOffspace+0x4a>
      nCount++;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	60fb      	str	r3, [r7, #12]
  while (*szString) {
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1f2      	bne.n	800fd3c <_strlenOffspace+0x2e>
 800fd56:	e000      	b.n	800fd5a <_strlenOffspace+0x4c>
    }
    else
      break;
 800fd58:	bf00      	nop
  }
  return nCount;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3714      	adds	r7, #20
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <_toLower>:

static char _toLower(char c)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	4603      	mov	r3, r0
 800fd70:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	2b40      	cmp	r3, #64	; 0x40
 800fd76:	d905      	bls.n	800fd84 <_toLower+0x1c>
 800fd78:	79fb      	ldrb	r3, [r7, #7]
 800fd7a:	2b5a      	cmp	r3, #90	; 0x5a
 800fd7c:	d802      	bhi.n	800fd84 <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	3320      	adds	r3, #32
 800fd82:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800fd84:	79fb      	ldrb	r3, [r7, #7]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	370c      	adds	r7, #12
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr

0800fd92 <_isPrintable>:

static int _isPrintable(char c)
{
 800fd92:	b480      	push	{r7}
 800fd94:	b083      	sub	sp, #12
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	4603      	mov	r3, r0
 800fd9a:	71fb      	strb	r3, [r7, #7]
  if ((' ' <= c) && (c <= '~'))
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	2b1f      	cmp	r3, #31
 800fda0:	d904      	bls.n	800fdac <_isPrintable+0x1a>
 800fda2:	79fb      	ldrb	r3, [r7, #7]
 800fda4:	2b7e      	cmp	r3, #126	; 0x7e
 800fda6:	d801      	bhi.n	800fdac <_isPrintable+0x1a>
    return 1;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	e000      	b.n	800fdae <_isPrintable+0x1c>
  return 0;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	370c      	adds	r7, #12
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr

0800fdba <_isHex>:

static int _isHex(char c)
{
 800fdba:	b480      	push	{r7}
 800fdbc:	b083      	sub	sp, #12
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||       \
 800fdc4:	79fb      	ldrb	r3, [r7, #7]
 800fdc6:	2b2f      	cmp	r3, #47	; 0x2f
 800fdc8:	d902      	bls.n	800fdd0 <_isHex+0x16>
 800fdca:	79fb      	ldrb	r3, [r7, #7]
 800fdcc:	2b39      	cmp	r3, #57	; 0x39
 800fdce:	d90b      	bls.n	800fde8 <_isHex+0x2e>
 800fdd0:	79fb      	ldrb	r3, [r7, #7]
 800fdd2:	2b40      	cmp	r3, #64	; 0x40
 800fdd4:	d902      	bls.n	800fddc <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||   \
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	2b46      	cmp	r3, #70	; 0x46
 800fdda:	d905      	bls.n	800fde8 <_isHex+0x2e>
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	2b60      	cmp	r3, #96	; 0x60
 800fde0:	d904      	bls.n	800fdec <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800fde2:	79fb      	ldrb	r3, [r7, #7]
 800fde4:	2b66      	cmp	r3, #102	; 0x66
 800fde6:	d801      	bhi.n	800fdec <_isHex+0x32>
    return 1;
 800fde8:	2301      	movs	r3, #1
 800fdea:	e000      	b.n	800fdee <_isHex+0x34>
  return 0;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr

0800fdfa <_fromHex>:

static int _fromHex(char c) 
{
 800fdfa:	b480      	push	{r7}
 800fdfc:	b085      	sub	sp, #20
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	4603      	mov	r3, r0
 800fe02:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800fe04:	2300      	movs	r3, #0
 800fe06:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	2b2f      	cmp	r3, #47	; 0x2f
 800fe0c:	d906      	bls.n	800fe1c <_fromHex+0x22>
 800fe0e:	79fb      	ldrb	r3, [r7, #7]
 800fe10:	2b39      	cmp	r3, #57	; 0x39
 800fe12:	d803      	bhi.n	800fe1c <_fromHex+0x22>
    ret = (c - '0');
 800fe14:	79fb      	ldrb	r3, [r7, #7]
 800fe16:	3b30      	subs	r3, #48	; 0x30
 800fe18:	60fb      	str	r3, [r7, #12]
 800fe1a:	e012      	b.n	800fe42 <_fromHex+0x48>
  } 
  else if ((c >= 'a') && (c <= 'f')) {
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	2b60      	cmp	r3, #96	; 0x60
 800fe20:	d906      	bls.n	800fe30 <_fromHex+0x36>
 800fe22:	79fb      	ldrb	r3, [r7, #7]
 800fe24:	2b66      	cmp	r3, #102	; 0x66
 800fe26:	d803      	bhi.n	800fe30 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800fe28:	79fb      	ldrb	r3, [r7, #7]
 800fe2a:	3b57      	subs	r3, #87	; 0x57
 800fe2c:	60fb      	str	r3, [r7, #12]
 800fe2e:	e008      	b.n	800fe42 <_fromHex+0x48>
  } 
  else if ((c >= 'A') && (c <= 'F')) {
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	2b40      	cmp	r3, #64	; 0x40
 800fe34:	d905      	bls.n	800fe42 <_fromHex+0x48>
 800fe36:	79fb      	ldrb	r3, [r7, #7]
 800fe38:	2b46      	cmp	r3, #70	; 0x46
 800fe3a:	d802      	bhi.n	800fe42 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800fe3c:	79fb      	ldrb	r3, [r7, #7]
 800fe3e:	3b37      	subs	r3, #55	; 0x37
 800fe40:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800fe42:	68fb      	ldr	r3, [r7, #12]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3714      	adds	r7, #20
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4e:	4770      	bx	lr

0800fe50 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <_strNoCaseCmp+0x16>
    return 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	e026      	b.n	800feb4 <_strNoCaseCmp+0x64>
  do {
    if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	60fa      	str	r2, [r7, #12]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff ff7a 	bl	800fd68 <_toLower>
 800fe74:	4603      	mov	r3, r0
 800fe76:	75fb      	strb	r3, [r7, #23]
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	1c5a      	adds	r2, r3, #1
 800fe7c:	60ba      	str	r2, [r7, #8]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff ff71 	bl	800fd68 <_toLower>
 800fe86:	4603      	mov	r3, r0
 800fe88:	75bb      	strb	r3, [r7, #22]
 800fe8a:	7dfa      	ldrb	r2, [r7, #23]
 800fe8c:	7dbb      	ldrb	r3, [r7, #22]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d009      	beq.n	800fea6 <_strNoCaseCmp+0x56>
      if ((c1 == 0) || (c2 == 0))
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00c      	beq.n	800feb2 <_strNoCaseCmp+0x62>
 800fe98:	7dbb      	ldrb	r3, [r7, #22]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d009      	beq.n	800feb2 <_strNoCaseCmp+0x62>
          break;
      return ((unsigned char)c1 - (unsigned char)c2);
 800fe9e:	7dfa      	ldrb	r2, [r7, #23]
 800fea0:	7dbb      	ldrb	r3, [r7, #22]
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	e006      	b.n	800feb4 <_strNoCaseCmp+0x64>
    }
  } while (--nLenghth != 0);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3b01      	subs	r3, #1
 800feaa:	607b      	str	r3, [r7, #4]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1d9      	bne.n	800fe66 <_strNoCaseCmp+0x16>
  return 0;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3718      	adds	r7, #24
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
  while (nLength--) {
 800fec8:	e007      	b.n	800feda <_svMemCpy+0x1e>
    *dst++=*src++;
 800feca:	68ba      	ldr	r2, [r7, #8]
 800fecc:	1c53      	adds	r3, r2, #1
 800fece:	60bb      	str	r3, [r7, #8]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	1c59      	adds	r1, r3, #1
 800fed4:	60f9      	str	r1, [r7, #12]
 800fed6:	7812      	ldrb	r2, [r2, #0]
 800fed8:	701a      	strb	r2, [r3, #0]
  while (nLength--) {
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	1e5a      	subs	r2, r3, #1
 800fede:	607a      	str	r2, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d1f2      	bne.n	800feca <_svMemCpy+0xe>
  }
}
 800fee4:	bf00      	nop
 800fee6:	bf00      	nop
 800fee8:	3714      	adds	r7, #20
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
	...

0800fef4 <_svClearLine>:

static void _svClearLine(void)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
  svPutChar('\r');
 800fefa:	4b16      	ldr	r3, [pc, #88]	; (800ff54 <_svClearLine+0x60>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	200d      	movs	r0, #13
 800ff00:	4798      	blx	r3
  // Remove Strings
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ff02:	2300      	movs	r3, #0
 800ff04:	607b      	str	r3, [r7, #4]
 800ff06:	e006      	b.n	800ff16 <_svClearLine+0x22>
    svPutChar(' ');
 800ff08:	4b12      	ldr	r3, [pc, #72]	; (800ff54 <_svClearLine+0x60>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2020      	movs	r0, #32
 800ff0e:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3301      	adds	r3, #1
 800ff14:	607b      	str	r3, [r7, #4]
 800ff16:	4b10      	ldr	r3, [pc, #64]	; (800ff58 <_svClearLine+0x64>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4a10      	ldr	r2, [pc, #64]	; (800ff5c <_svClearLine+0x68>)
 800ff1c:	6812      	ldr	r2, [r2, #0]
 800ff1e:	441a      	add	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d8f0      	bhi.n	800ff08 <_svClearLine+0x14>
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ff26:	2300      	movs	r3, #0
 800ff28:	603b      	str	r3, [r7, #0]
 800ff2a:	e006      	b.n	800ff3a <_svClearLine+0x46>
    svPutChar('\b');
 800ff2c:	4b09      	ldr	r3, [pc, #36]	; (800ff54 <_svClearLine+0x60>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2008      	movs	r0, #8
 800ff32:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	3301      	adds	r3, #1
 800ff38:	603b      	str	r3, [r7, #0]
 800ff3a:	4b07      	ldr	r3, [pc, #28]	; (800ff58 <_svClearLine+0x64>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4a07      	ldr	r2, [pc, #28]	; (800ff5c <_svClearLine+0x68>)
 800ff40:	6812      	ldr	r2, [r2, #0]
 800ff42:	441a      	add	r2, r3
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d8f0      	bhi.n	800ff2c <_svClearLine+0x38>
}
 800ff4a:	bf00      	nop
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	20004184 	.word	0x20004184
 800ff58:	20004174 	.word	0x20004174
 800ff5c:	20000074 	.word	0x20000074

0800ff60 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	4603      	mov	r3, r0
 800ff68:	71fb      	strb	r3, [r7, #7]
  switch (eHistoryCmd) {
 800ff6a:	79fb      	ldrb	r3, [r7, #7]
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d03f      	beq.n	800fff0 <svCLIHandleHistory+0x90>
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	dc6f      	bgt.n	8010054 <svCLIHandleHistory+0xf4>
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d002      	beq.n	800ff7e <svCLIHandleHistory+0x1e>
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d052      	beq.n	8010022 <svCLIHandleHistory+0xc2>
      if (snCLIHistoryPos >= snCLIHistoryCount)
        snCLIHistoryPos = 0;
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
      break;
    default:
      break;
 800ff7c:	e06a      	b.n	8010054 <svCLIHandleHistory+0xf4>
      if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {  // Full
 800ff7e:	4b38      	ldr	r3, [pc, #224]	; (8010060 <svCLIHandleHistory+0x100>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b03      	cmp	r3, #3
 800ff84:	d11c      	bne.n	800ffc0 <svCLIHandleHistory+0x60>
        for (int i=1;i<snCLIHistoryCount;i++) {
 800ff86:	2301      	movs	r3, #1
 800ff88:	60fb      	str	r3, [r7, #12]
 800ff8a:	e00f      	b.n	800ffac <svCLIHandleHistory+0x4c>
          _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	01db      	lsls	r3, r3, #7
 800ff92:	4a34      	ldr	r2, [pc, #208]	; (8010064 <svCLIHandleHistory+0x104>)
 800ff94:	1898      	adds	r0, r3, r2
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	01db      	lsls	r3, r3, #7
 800ff9a:	4a32      	ldr	r2, [pc, #200]	; (8010064 <svCLIHandleHistory+0x104>)
 800ff9c:	4413      	add	r3, r2
 800ff9e:	2280      	movs	r2, #128	; 0x80
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	f7ff ff8b 	bl	800febc <_svMemCpy>
        for (int i=1;i<snCLIHistoryCount;i++) {
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	60fb      	str	r3, [r7, #12]
 800ffac:	4b2c      	ldr	r3, [pc, #176]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	dbea      	blt.n	800ff8c <svCLIHandleHistory+0x2c>
        snCLIHistoryCount--;
 800ffb6:	4b2a      	ldr	r3, [pc, #168]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	4a28      	ldr	r2, [pc, #160]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffbe:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800ffc0:	4b27      	ldr	r3, [pc, #156]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	01db      	lsls	r3, r3, #7
 800ffc6:	4a27      	ldr	r2, [pc, #156]	; (8010064 <svCLIHandleHistory+0x104>)
 800ffc8:	4413      	add	r3, r2
 800ffca:	2280      	movs	r2, #128	; 0x80
 800ffcc:	4926      	ldr	r1, [pc, #152]	; (8010068 <svCLIHandleHistory+0x108>)
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff ff74 	bl	800febc <_svMemCpy>
      if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800ffd4:	4b22      	ldr	r3, [pc, #136]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b02      	cmp	r3, #2
 800ffda:	dc04      	bgt.n	800ffe6 <svCLIHandleHistory+0x86>
        snCLIHistoryCount++;
 800ffdc:	4b20      	ldr	r3, [pc, #128]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	4a1f      	ldr	r2, [pc, #124]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffe4:	6013      	str	r3, [r2, #0]
      snCLIHistoryPos = snCLIHistoryCount;
 800ffe6:	4b1e      	ldr	r3, [pc, #120]	; (8010060 <svCLIHandleHistory+0x100>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a20      	ldr	r2, [pc, #128]	; (801006c <svCLIHandleHistory+0x10c>)
 800ffec:	6013      	str	r3, [r2, #0]
      break;
 800ffee:	e032      	b.n	8010056 <svCLIHandleHistory+0xf6>
      snCLIHistoryPos--;
 800fff0:	4b1e      	ldr	r3, [pc, #120]	; (801006c <svCLIHandleHistory+0x10c>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	4a1d      	ldr	r2, [pc, #116]	; (801006c <svCLIHandleHistory+0x10c>)
 800fff8:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos < 0)
 800fffa:	4b1c      	ldr	r3, [pc, #112]	; (801006c <svCLIHandleHistory+0x10c>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	da04      	bge.n	801000c <svCLIHandleHistory+0xac>
        snCLIHistoryPos = snCLIHistoryCount - 1;
 8010002:	4b17      	ldr	r3, [pc, #92]	; (8010060 <svCLIHandleHistory+0x100>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	3b01      	subs	r3, #1
 8010008:	4a18      	ldr	r2, [pc, #96]	; (801006c <svCLIHandleHistory+0x10c>)
 801000a:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 801000c:	4b17      	ldr	r3, [pc, #92]	; (801006c <svCLIHandleHistory+0x10c>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	01db      	lsls	r3, r3, #7
 8010012:	4a14      	ldr	r2, [pc, #80]	; (8010064 <svCLIHandleHistory+0x104>)
 8010014:	4413      	add	r3, r2
 8010016:	2280      	movs	r2, #128	; 0x80
 8010018:	4619      	mov	r1, r3
 801001a:	4813      	ldr	r0, [pc, #76]	; (8010068 <svCLIHandleHistory+0x108>)
 801001c:	f7ff ff4e 	bl	800febc <_svMemCpy>
      break;
 8010020:	e019      	b.n	8010056 <svCLIHandleHistory+0xf6>
      snCLIHistoryPos++;
 8010022:	4b12      	ldr	r3, [pc, #72]	; (801006c <svCLIHandleHistory+0x10c>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	3301      	adds	r3, #1
 8010028:	4a10      	ldr	r2, [pc, #64]	; (801006c <svCLIHandleHistory+0x10c>)
 801002a:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos >= snCLIHistoryCount)
 801002c:	4b0f      	ldr	r3, [pc, #60]	; (801006c <svCLIHandleHistory+0x10c>)
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	4b0b      	ldr	r3, [pc, #44]	; (8010060 <svCLIHandleHistory+0x100>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	429a      	cmp	r2, r3
 8010036:	db02      	blt.n	801003e <svCLIHandleHistory+0xde>
        snCLIHistoryPos = 0;
 8010038:	4b0c      	ldr	r3, [pc, #48]	; (801006c <svCLIHandleHistory+0x10c>)
 801003a:	2200      	movs	r2, #0
 801003c:	601a      	str	r2, [r3, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 801003e:	4b0b      	ldr	r3, [pc, #44]	; (801006c <svCLIHandleHistory+0x10c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	01db      	lsls	r3, r3, #7
 8010044:	4a07      	ldr	r2, [pc, #28]	; (8010064 <svCLIHandleHistory+0x104>)
 8010046:	4413      	add	r3, r2
 8010048:	2280      	movs	r2, #128	; 0x80
 801004a:	4619      	mov	r1, r3
 801004c:	4806      	ldr	r0, [pc, #24]	; (8010068 <svCLIHandleHistory+0x108>)
 801004e:	f7ff ff35 	bl	800febc <_svMemCpy>
      break;
 8010052:	e000      	b.n	8010056 <svCLIHandleHistory+0xf6>
      break;
 8010054:	bf00      	nop
  }
}
 8010056:	bf00      	nop
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	2000416c 	.word	0x2000416c
 8010064:	20003fec 	.word	0x20003fec
 8010068:	20003f6c 	.word	0x20003f6c
 801006c:	20004170 	.word	0x20004170

08010070 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  SVCLI_t* pCLIEntry;
  char* pCurrent = *line;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 801007e:	e002      	b.n	8010086 <svCLI_Search+0x16>
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	3301      	adds	r3, #1
 8010084:	613b      	str	r3, [r7, #16]
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d003      	beq.n	8010096 <svCLI_Search+0x26>
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	2b20      	cmp	r3, #32
 8010094:	d0f4      	beq.n	8010080 <svCLI_Search+0x10>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 8010096:	4b22      	ldr	r3, [pc, #136]	; (8010120 <svCLI_Search+0xb0>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	617b      	str	r3, [r7, #20]
 801009c:	e035      	b.n	801010a <svCLI_Search+0x9a>
    int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff fe33 	bl	800fd0e <_strlenOffspace>
 80100a8:	60f8      	str	r0, [r7, #12]
    int nArgLength = _strlenOffspace(pCurrent);
 80100aa:	6938      	ldr	r0, [r7, #16]
 80100ac:	f7ff fe2f 	bl	800fd0e <_strlenOffspace>
 80100b0:	60b8      	str	r0, [r7, #8]
    pCurrent[nArgLength] = 0; // NULL termination just after command for comparing
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	693a      	ldr	r2, [r7, #16]
 80100b6:	4413      	add	r3, r2
 80100b8:	2200      	movs	r2, #0
 80100ba:	701a      	strb	r2, [r3, #0]
    if (nCmdLength >= nArgLength) {
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	db1f      	blt.n	8010104 <svCLI_Search+0x94>
      if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) { // Partial Command OK !!
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	4619      	mov	r1, r3
 80100cc:	6938      	ldr	r0, [r7, #16]
 80100ce:	f7ff febf 	bl	800fe50 <_strNoCaseCmp>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d115      	bne.n	8010104 <svCLI_Search+0x94>
        pCurrent += (nArgLength + 1);
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	3301      	adds	r3, #1
 80100dc:	693a      	ldr	r2, [r7, #16]
 80100de:	4413      	add	r3, r2
 80100e0:	613b      	str	r3, [r7, #16]
        // strip off trailing spaces
        while (*pCurrent && *pCurrent == ' ') pCurrent++;
 80100e2:	e002      	b.n	80100ea <svCLI_Search+0x7a>
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	3301      	adds	r3, #1
 80100e8:	613b      	str	r3, [r7, #16]
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d003      	beq.n	80100fa <svCLI_Search+0x8a>
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	2b20      	cmp	r3, #32
 80100f8:	d0f4      	beq.n	80100e4 <svCLI_Search+0x74>
        *line = pCurrent;   // remove command & return
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	693a      	ldr	r2, [r7, #16]
 80100fe:	601a      	str	r2, [r3, #0]

        return pCLIEntry;
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	e008      	b.n	8010116 <svCLI_Search+0xa6>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	330c      	adds	r3, #12
 8010108:	617b      	str	r3, [r7, #20]
 801010a:	4b06      	ldr	r3, [pc, #24]	; (8010124 <svCLI_Search+0xb4>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	429a      	cmp	r2, r3
 8010112:	d3c4      	bcc.n	801009e <svCLI_Search+0x2e>
      }
    }
  }
  return NULL;
 8010114:	2300      	movs	r3, #0
}
 8010116:	4618      	mov	r0, r3
 8010118:	3718      	adds	r7, #24
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	20004178 	.word	0x20004178
 8010124:	2000417c 	.word	0x2000417c

08010128 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b08a      	sub	sp, #40	; 0x28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
 8010134:	603b      	str	r3, [r7, #0]
  int first = 1;
 8010136:	2301      	movs	r3, #1
 8010138:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 801013a:	230a      	movs	r3, #10
 801013c:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	61fb      	str	r3, [r7, #28]
  int digit;
    // strip off leading spaces
    while (*s == ' ') s++;
 8010142:	e002      	b.n	801014a <svCLI_ParseNumber+0x22>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	3301      	adds	r3, #1
 8010148:	60fb      	str	r3, [r7, #12]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	2b20      	cmp	r3, #32
 8010150:	d0f8      	beq.n	8010144 <svCLI_ParseNumber+0x1c>
    if (*s == 0)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d14d      	bne.n	80101f6 <svCLI_ParseNumber+0xce>
      return 0;
 801015a:	2300      	movs	r3, #0
 801015c:	e05b      	b.n	8010216 <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 801015e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010160:	2b00      	cmp	r3, #0
 8010162:	d011      	beq.n	8010188 <svCLI_ParseNumber+0x60>
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	2b30      	cmp	r3, #48	; 0x30
 801016a:	d10d      	bne.n	8010188 <svCLI_ParseNumber+0x60>
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	3301      	adds	r3, #1
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	4618      	mov	r0, r3
 8010174:	f7ff fdf8 	bl	800fd68 <_toLower>
 8010178:	4603      	mov	r3, r0
 801017a:	2b78      	cmp	r3, #120	; 0x78
 801017c:	d104      	bne.n	8010188 <svCLI_ParseNumber+0x60>
        radix = 16;
 801017e:	2310      	movs	r3, #16
 8010180:	623b      	str	r3, [r7, #32]
        s += 2;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3302      	adds	r3, #2
 8010186:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 8010188:	2300      	movs	r3, #0
 801018a:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	60fa      	str	r2, [r7, #12]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 8010196:	7dfb      	ldrb	r3, [r7, #23]
 8010198:	4618      	mov	r0, r3
 801019a:	f7ff fe0e 	bl	800fdba <_isHex>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d010      	beq.n	80101c6 <svCLI_ParseNumber+0x9e>
 80101a4:	7dfb      	ldrb	r3, [r7, #23]
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7ff fe27 	bl	800fdfa <_fromHex>
 80101ac:	6138      	str	r0, [r7, #16]
 80101ae:	693a      	ldr	r2, [r7, #16]
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	da07      	bge.n	80101c6 <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	69fa      	ldr	r2, [r7, #28]
 80101ba:	fb03 f202 	mul.w	r2, r3, r2
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	4413      	add	r3, r2
 80101c2:	61fb      	str	r3, [r7, #28]
 80101c4:	e017      	b.n	80101f6 <svCLI_ParseNumber+0xce>
      } 
      else {
        if (delimiter != (char *)0) {
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d012      	beq.n	80101f2 <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 80101d0:	e002      	b.n	80101d8 <svCLI_ParseNumber+0xb0>
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	3301      	adds	r3, #1
 80101d6:	61bb      	str	r3, [r7, #24]
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d004      	beq.n	80101ea <svCLI_ParseNumber+0xc2>
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	7dfa      	ldrb	r2, [r7, #23]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d1f3      	bne.n	80101d2 <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d106      	bne.n	8010200 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 80101f2:	2300      	movs	r3, #0
 80101f4:	e00f      	b.n	8010216 <svCLI_ParseNumber+0xee>
    while (*s) {
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1af      	bne.n	801015e <svCLI_ParseNumber+0x36>
 80101fe:	e000      	b.n	8010202 <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 8010200:	bf00      	nop
      }
    }
    *val = result;
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	69fa      	ldr	r2, [r7, #28]
 8010206:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d002      	beq.n	8010214 <svCLI_ParseNumber+0xec>
      *res = s;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8010214:	2301      	movs	r3, #1
}
 8010216:	4618      	mov	r0, r3
 8010218:	3728      	adds	r7, #40	; 0x28
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
	...

08010220 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b089      	sub	sp, #36	; 0x24
 8010224:	af00      	add	r7, sp, #0
  if (s_bPwdOK == FALSE) {  // Input Password
 8010226:	4b3a      	ldr	r3, [pc, #232]	; (8010310 <svCLI_ParsenExecute+0xf0>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d120      	bne.n	8010270 <svCLI_ParsenExecute+0x50>
    if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 801022e:	4939      	ldr	r1, [pc, #228]	; (8010314 <svCLI_ParsenExecute+0xf4>)
 8010230:	4839      	ldr	r0, [pc, #228]	; (8010318 <svCLI_ParsenExecute+0xf8>)
 8010232:	f7f0 f82d 	bl	8000290 <strcmp>
 8010236:	4603      	mov	r3, r0
 8010238:	2b00      	cmp	r3, #0
 801023a:	d115      	bne.n	8010268 <svCLI_ParsenExecute+0x48>
      s_bPwdOK = TRUE;
 801023c:	4b34      	ldr	r3, [pc, #208]	; (8010310 <svCLI_ParsenExecute+0xf0>)
 801023e:	2201      	movs	r2, #1
 8010240:	601a      	str	r2, [r3, #0]
      svCLI_Printf("Welcome !!\r\n");
 8010242:	4836      	ldr	r0, [pc, #216]	; (801031c <svCLI_ParsenExecute+0xfc>)
 8010244:	f7ff fcba 	bl	800fbbc <svCLI_Printf>
      strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010248:	4b35      	ldr	r3, [pc, #212]	; (8010320 <svCLI_ParsenExecute+0x100>)
 801024a:	4a36      	ldr	r2, [pc, #216]	; (8010324 <svCLI_ParsenExecute+0x104>)
 801024c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010250:	6018      	str	r0, [r3, #0]
 8010252:	3304      	adds	r3, #4
 8010254:	8019      	strh	r1, [r3, #0]
 8010256:	3302      	adds	r3, #2
 8010258:	0c0a      	lsrs	r2, r1, #16
 801025a:	701a      	strb	r2, [r3, #0]
      snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 801025c:	4b32      	ldr	r3, [pc, #200]	; (8010328 <svCLI_ParsenExecute+0x108>)
 801025e:	2206      	movs	r2, #6
 8010260:	601a      	str	r2, [r3, #0]
      svCLI_ShowHelp();
 8010262:	f7ff fcd7 	bl	800fc14 <svCLI_ShowHelp>
    }
    else {
      svCLI_Printf("Invalid Password !!\r\n");
    }
    return;
 8010266:	e04f      	b.n	8010308 <svCLI_ParsenExecute+0xe8>
      svCLI_Printf("Invalid Password !!\r\n");
 8010268:	4830      	ldr	r0, [pc, #192]	; (801032c <svCLI_ParsenExecute+0x10c>)
 801026a:	f7ff fca7 	bl	800fbbc <svCLI_Printf>
    return;
 801026e:	e04b      	b.n	8010308 <svCLI_ParsenExecute+0xe8>
  }
  SVCLI_t* pCLIEntry;
  if (sCLITableBegin == sCLITablEnd) {
 8010270:	4b2f      	ldr	r3, [pc, #188]	; (8010330 <svCLI_ParsenExecute+0x110>)
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	4b2f      	ldr	r3, [pc, #188]	; (8010334 <svCLI_ParsenExecute+0x114>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	429a      	cmp	r2, r3
 801027a:	d103      	bne.n	8010284 <svCLI_ParsenExecute+0x64>
    svCLI_Printf("No CLI Entries !!!\r\n");
 801027c:	482e      	ldr	r0, [pc, #184]	; (8010338 <svCLI_ParsenExecute+0x118>)
 801027e:	f7ff fc9d 	bl	800fbbc <svCLI_Printf>
    return;
 8010282:	e041      	b.n	8010308 <svCLI_ParsenExecute+0xe8>
  }
  char* pLine = szCLIString;
 8010284:	4b24      	ldr	r3, [pc, #144]	; (8010318 <svCLI_ParsenExecute+0xf8>)
 8010286:	613b      	str	r3, [r7, #16]
  pCLIEntry = svCLI_Search(&pLine);
 8010288:	f107 0310 	add.w	r3, r7, #16
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff feef 	bl	8010070 <svCLI_Search>
 8010292:	61b8      	str	r0, [r7, #24]
  if (pCLIEntry) {
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d033      	beq.n	8010302 <svCLI_ParsenExecute+0xe2>
    // Parse more for CLI function
    unsigned int nFirst, nSecond, nCount;
    nCount = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	61fb      	str	r3, [r7, #28]
    nFirst = 0;
 801029e:	2300      	movs	r3, #0
 80102a0:	60fb      	str	r3, [r7, #12]
    nSecond = 0;
 80102a2:	2300      	movs	r3, #0
 80102a4:	60bb      	str	r3, [r7, #8]
    char* pParseLine = pLine;
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	617b      	str	r3, [r7, #20]
    char delim[3] = ", ";
 80102aa:	4a24      	ldr	r2, [pc, #144]	; (801033c <svCLI_ParsenExecute+0x11c>)
 80102ac:	1d3b      	adds	r3, r7, #4
 80102ae:	6812      	ldr	r2, [r2, #0]
 80102b0:	4611      	mov	r1, r2
 80102b2:	8019      	strh	r1, [r3, #0]
 80102b4:	3302      	adds	r3, #2
 80102b6:	0c12      	lsrs	r2, r2, #16
 80102b8:	701a      	strb	r2, [r3, #0]
    if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 80102ba:	6938      	ldr	r0, [r7, #16]
 80102bc:	1d3b      	adds	r3, r7, #4
 80102be:	f107 0210 	add.w	r2, r7, #16
 80102c2:	f107 010c 	add.w	r1, r7, #12
 80102c6:	f7ff ff2f 	bl	8010128 <svCLI_ParseNumber>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d010      	beq.n	80102f2 <svCLI_ParsenExecute+0xd2>
      nCount++;
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	3301      	adds	r3, #1
 80102d4:	61fb      	str	r3, [r7, #28]
      if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 80102d6:	6938      	ldr	r0, [r7, #16]
 80102d8:	1d3b      	adds	r3, r7, #4
 80102da:	f107 0210 	add.w	r2, r7, #16
 80102de:	f107 0108 	add.w	r1, r7, #8
 80102e2:	f7ff ff21 	bl	8010128 <svCLI_ParseNumber>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <svCLI_ParsenExecute+0xd2>
        nCount++;
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	3301      	adds	r3, #1
 80102f0:	61fb      	str	r3, [r7, #28]
      }
    }
    pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	689c      	ldr	r4, [r3, #8]
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	69f9      	ldr	r1, [r7, #28]
 80102fc:	6978      	ldr	r0, [r7, #20]
 80102fe:	47a0      	blx	r4
 8010300:	e002      	b.n	8010308 <svCLI_ParsenExecute+0xe8>
  }
  else {
    svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 8010302:	480f      	ldr	r0, [pc, #60]	; (8010340 <svCLI_ParsenExecute+0x120>)
 8010304:	f7ff fc5a 	bl	800fbbc <svCLI_Printf>
  }
}
 8010308:	3724      	adds	r7, #36	; 0x24
 801030a:	46bd      	mov	sp, r7
 801030c:	bd90      	pop	{r4, r7, pc}
 801030e:	bf00      	nop
 8010310:	20000064 	.word	0x20000064
 8010314:	0801d1ac 	.word	0x0801d1ac
 8010318:	20003f6c 	.word	0x20003f6c
 801031c:	0801d1b8 	.word	0x0801d1b8
 8010320:	20000068 	.word	0x20000068
 8010324:	0801d154 	.word	0x0801d154
 8010328:	20000074 	.word	0x20000074
 801032c:	0801d1c8 	.word	0x0801d1c8
 8010330:	20004178 	.word	0x20004178
 8010334:	2000417c 	.word	0x2000417c
 8010338:	0801d1e0 	.word	0x0801d1e0
 801033c:	0801d220 	.word	0x0801d220
 8010340:	0801d1f8 	.word	0x0801d1f8

08010344 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	603b      	str	r3, [r7, #0]
 8010350:	4613      	mov	r3, r2
 8010352:	71fb      	strb	r3, [r7, #7]
  if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d005      	beq.n	8010366 <svCLI_SetBypassFtn+0x22>
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <svCLI_SetBypassFtn+0x22>
 8010360:	79fb      	ldrb	r3, [r7, #7]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d136      	bne.n	80103d4 <svCLI_SetBypassFtn+0x90>
    if (svBypass == NULL) {
 8010366:	4b28      	ldr	r3, [pc, #160]	; (8010408 <svCLI_SetBypassFtn+0xc4>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d048      	beq.n	8010400 <svCLI_SetBypassFtn+0xbc>
      // Nothing to do..
      return;
    }
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 801036e:	4b27      	ldr	r3, [pc, #156]	; (801040c <svCLI_SetBypassFtn+0xc8>)
 8010370:	4a27      	ldr	r2, [pc, #156]	; (8010410 <svCLI_SetBypassFtn+0xcc>)
 8010372:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010376:	6018      	str	r0, [r3, #0]
 8010378:	3304      	adds	r3, #4
 801037a:	8019      	strh	r1, [r3, #0]
 801037c:	3302      	adds	r3, #2
 801037e:	0c0a      	lsrs	r2, r1, #16
 8010380:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 8010382:	4b24      	ldr	r3, [pc, #144]	; (8010414 <svCLI_SetBypassFtn+0xd0>)
 8010384:	2206      	movs	r2, #6
 8010386:	601a      	str	r2, [r3, #0]
    svBypass = NULL;
 8010388:	4b1f      	ldr	r3, [pc, #124]	; (8010408 <svCLI_SetBypassFtn+0xc4>)
 801038a:	2200      	movs	r2, #0
 801038c:	601a      	str	r2, [r3, #0]

    svExit = NULL;
 801038e:	4b22      	ldr	r3, [pc, #136]	; (8010418 <svCLI_SetBypassFtn+0xd4>)
 8010390:	2200      	movs	r2, #0
 8010392:	701a      	strb	r2, [r3, #0]
    sbEnter = FALSE;
 8010394:	4b21      	ldr	r3, [pc, #132]	; (801041c <svCLI_SetBypassFtn+0xd8>)
 8010396:	2200      	movs	r2, #0
 8010398:	601a      	str	r2, [r3, #0]

    scntCLIString = 0;  // Clean Up Char
 801039a:	4b21      	ldr	r3, [pc, #132]	; (8010420 <svCLI_SetBypassFtn+0xdc>)
 801039c:	2200      	movs	r2, #0
 801039e:	601a      	str	r2, [r3, #0]
    // clean up line string
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 80103a0:	2300      	movs	r3, #0
 80103a2:	617b      	str	r3, [r7, #20]
 80103a4:	e007      	b.n	80103b6 <svCLI_SetBypassFtn+0x72>
      szCLIString[i] = '\0';
 80103a6:	4a1f      	ldr	r2, [pc, #124]	; (8010424 <svCLI_SetBypassFtn+0xe0>)
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	4413      	add	r3, r2
 80103ac:	2200      	movs	r2, #0
 80103ae:	701a      	strb	r2, [r3, #0]
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	3301      	adds	r3, #1
 80103b4:	617b      	str	r3, [r7, #20]
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	2b7f      	cmp	r3, #127	; 0x7f
 80103ba:	ddf4      	ble.n	80103a6 <svCLI_SetBypassFtn+0x62>
    }
    svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 80103bc:	4913      	ldr	r1, [pc, #76]	; (801040c <svCLI_SetBypassFtn+0xc8>)
 80103be:	481a      	ldr	r0, [pc, #104]	; (8010428 <svCLI_SetBypassFtn+0xe4>)
 80103c0:	f7ff fbfc 	bl	800fbbc <svCLI_Printf>

    if (svCommit) {
 80103c4:	4b19      	ldr	r3, [pc, #100]	; (801042c <svCLI_SetBypassFtn+0xe8>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d01a      	beq.n	8010402 <svCLI_SetBypassFtn+0xbe>
      svCommit();
 80103cc:	4b17      	ldr	r3, [pc, #92]	; (801042c <svCLI_SetBypassFtn+0xe8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4798      	blx	r3
    if (svCommit) {
 80103d2:	e016      	b.n	8010402 <svCLI_SetBypassFtn+0xbe>
    }
  }
  else {
    strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 80103d4:	2209      	movs	r2, #9
 80103d6:	68b9      	ldr	r1, [r7, #8]
 80103d8:	480c      	ldr	r0, [pc, #48]	; (801040c <svCLI_SetBypassFtn+0xc8>)
 80103da:	f00b fd43 	bl	801be64 <strncpy>
    snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 80103de:	480b      	ldr	r0, [pc, #44]	; (801040c <svCLI_SetBypassFtn+0xc8>)
 80103e0:	f7ef ff60 	bl	80002a4 <strlen>
 80103e4:	4603      	mov	r3, r0
 80103e6:	461a      	mov	r2, r3
 80103e8:	4b0a      	ldr	r3, [pc, #40]	; (8010414 <svCLI_SetBypassFtn+0xd0>)
 80103ea:	601a      	str	r2, [r3, #0]
    svBypass = pfnBypass;
 80103ec:	4a06      	ldr	r2, [pc, #24]	; (8010408 <svCLI_SetBypassFtn+0xc4>)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	6013      	str	r3, [r2, #0]
    svExit = szExit;
 80103f2:	4a09      	ldr	r2, [pc, #36]	; (8010418 <svCLI_SetBypassFtn+0xd4>)
 80103f4:	79fb      	ldrb	r3, [r7, #7]
 80103f6:	7013      	strb	r3, [r2, #0]
    sbEnter = bEnter;
 80103f8:	4a08      	ldr	r2, [pc, #32]	; (801041c <svCLI_SetBypassFtn+0xd8>)
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	e000      	b.n	8010402 <svCLI_SetBypassFtn+0xbe>
      return;
 8010400:	bf00      	nop
  }
}
 8010402:	3718      	adds	r7, #24
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	2000418c 	.word	0x2000418c
 801040c:	20000068 	.word	0x20000068
 8010410:	0801d154 	.word	0x0801d154
 8010414:	20000074 	.word	0x20000074
 8010418:	20004190 	.word	0x20004190
 801041c:	20004194 	.word	0x20004194
 8010420:	20004174 	.word	0x20004174
 8010424:	20003f6c 	.word	0x20003f6c
 8010428:	0801d224 	.word	0x0801d224
 801042c:	20004188 	.word	0x20004188

08010430 <svCLI_Handler>:

void svCLI_Handler(void)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
  if (sbFirst) {
    svCLI_Printf("\r\n%s", szCLI_PROMPT);
    sbFirst = 0;
  }
#endif
  if (svGetChar) {
 8010436:	4b92      	ldr	r3, [pc, #584]	; (8010680 <svCLI_Handler+0x250>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	f000 8114 	beq.w	8010668 <svCLI_Handler+0x238>
    char bSkipPrompt = 0;
 8010440:	2300      	movs	r3, #0
 8010442:	73fb      	strb	r3, [r7, #15]
    char szChar = svGetChar();
 8010444:	4b8e      	ldr	r3, [pc, #568]	; (8010680 <svCLI_Handler+0x250>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4798      	blx	r3
 801044a:	4603      	mov	r3, r0
 801044c:	71fb      	strb	r3, [r7, #7]
    if ((szChar != 0) && (szChar != '\n')) {
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f000 8109 	beq.w	8010668 <svCLI_Handler+0x238>
 8010456:	79fb      	ldrb	r3, [r7, #7]
 8010458:	2b0a      	cmp	r3, #10
 801045a:	f000 8105 	beq.w	8010668 <svCLI_Handler+0x238>
      if (szChar == '\r') {
 801045e:	79fb      	ldrb	r3, [r7, #7]
 8010460:	2b0d      	cmp	r3, #13
 8010462:	d154      	bne.n	801050e <svCLI_Handler+0xde>
        sbInEsc = 0;
 8010464:	4b87      	ldr	r3, [pc, #540]	; (8010684 <svCLI_Handler+0x254>)
 8010466:	2200      	movs	r2, #0
 8010468:	701a      	strb	r2, [r3, #0]
        svCLI_Printf("\r\n");
 801046a:	4887      	ldr	r0, [pc, #540]	; (8010688 <svCLI_Handler+0x258>)
 801046c:	f7ff fba6 	bl	800fbbc <svCLI_Printf>
        if (scntCLIString > 0) {
 8010470:	4b86      	ldr	r3, [pc, #536]	; (801068c <svCLI_Handler+0x25c>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d031      	beq.n	80104dc <svCLI_Handler+0xac>
          // Parse and Execute
          szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010478:	4b84      	ldr	r3, [pc, #528]	; (801068c <svCLI_Handler+0x25c>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a84      	ldr	r2, [pc, #528]	; (8010690 <svCLI_Handler+0x260>)
 801047e:	2100      	movs	r1, #0
 8010480:	54d1      	strb	r1, [r2, r3]
          // Save to history Buffer
          svCLIHandleHistory(CLI_HISTORY_ADD);
 8010482:	2000      	movs	r0, #0
 8010484:	f7ff fd6c 	bl	800ff60 <svCLIHandleHistory>
          // Call Parser
          if (svBypass) { // hellosmk 210225 added
 8010488:	4b82      	ldr	r3, [pc, #520]	; (8010694 <svCLI_Handler+0x264>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d011      	beq.n	80104b4 <svCLI_Handler+0x84>
            bSkipPrompt = 1;
 8010490:	2301      	movs	r3, #1
 8010492:	73fb      	strb	r3, [r7, #15]
            szCLIString[scntCLIString] = '\r';
 8010494:	4b7d      	ldr	r3, [pc, #500]	; (801068c <svCLI_Handler+0x25c>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a7d      	ldr	r2, [pc, #500]	; (8010690 <svCLI_Handler+0x260>)
 801049a:	210d      	movs	r1, #13
 801049c:	54d1      	strb	r1, [r2, r3]
            szCLIString[scntCLIString+1] = '\0';
 801049e:	4b7b      	ldr	r3, [pc, #492]	; (801068c <svCLI_Handler+0x25c>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	3301      	adds	r3, #1
 80104a4:	4a7a      	ldr	r2, [pc, #488]	; (8010690 <svCLI_Handler+0x260>)
 80104a6:	2100      	movs	r1, #0
 80104a8:	54d1      	strb	r1, [r2, r3]
            svBypass(szCLIString);
 80104aa:	4b7a      	ldr	r3, [pc, #488]	; (8010694 <svCLI_Handler+0x264>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4878      	ldr	r0, [pc, #480]	; (8010690 <svCLI_Handler+0x260>)
 80104b0:	4798      	blx	r3
 80104b2:	e001      	b.n	80104b8 <svCLI_Handler+0x88>
          }
          else {
            svCLI_ParsenExecute();
 80104b4:	f7ff feb4 	bl	8010220 <svCLI_ParsenExecute>
          }
          scntCLIString = 0;  // Clean Up Char
 80104b8:	4b74      	ldr	r3, [pc, #464]	; (801068c <svCLI_Handler+0x25c>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	601a      	str	r2, [r3, #0]
          // clean up line string
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 80104be:	2300      	movs	r3, #0
 80104c0:	60bb      	str	r3, [r7, #8]
 80104c2:	e007      	b.n	80104d4 <svCLI_Handler+0xa4>
            szCLIString[i] = '\0';
 80104c4:	4a72      	ldr	r2, [pc, #456]	; (8010690 <svCLI_Handler+0x260>)
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	4413      	add	r3, r2
 80104ca:	2200      	movs	r2, #0
 80104cc:	701a      	strb	r2, [r3, #0]
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	3301      	adds	r3, #1
 80104d2:	60bb      	str	r3, [r7, #8]
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2b7f      	cmp	r3, #127	; 0x7f
 80104d8:	ddf4      	ble.n	80104c4 <svCLI_Handler+0x94>
 80104da:	e010      	b.n	80104fe <svCLI_Handler+0xce>
          }
        }
        else if (sbEnter && svBypass) {
 80104dc:	4b6e      	ldr	r3, [pc, #440]	; (8010698 <svCLI_Handler+0x268>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00c      	beq.n	80104fe <svCLI_Handler+0xce>
 80104e4:	4b6b      	ldr	r3, [pc, #428]	; (8010694 <svCLI_Handler+0x264>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d008      	beq.n	80104fe <svCLI_Handler+0xce>
          const char cszRet[2] = {'\n',0};
 80104ec:	230a      	movs	r3, #10
 80104ee:	80bb      	strh	r3, [r7, #4]
          svBypass((char*)cszRet);
 80104f0:	4b68      	ldr	r3, [pc, #416]	; (8010694 <svCLI_Handler+0x264>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	1d3a      	adds	r2, r7, #4
 80104f6:	4610      	mov	r0, r2
 80104f8:	4798      	blx	r3
          bSkipPrompt = 1;
 80104fa:	2301      	movs	r3, #1
 80104fc:	73fb      	strb	r3, [r7, #15]
        }

        if (bSkipPrompt == 0) {
 80104fe:	7bfb      	ldrb	r3, [r7, #15]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f040 80b1 	bne.w	8010668 <svCLI_Handler+0x238>
          svCLI_Printf(szCLI_PROMPT);
 8010506:	4865      	ldr	r0, [pc, #404]	; (801069c <svCLI_Handler+0x26c>)
 8010508:	f7ff fb58 	bl	800fbbc <svCLI_Printf>
 801050c:	e0ac      	b.n	8010668 <svCLI_Handler+0x238>
        }
      }
      else if (svBypass && (szChar == svExit)) {
 801050e:	4b61      	ldr	r3, [pc, #388]	; (8010694 <svCLI_Handler+0x264>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d019      	beq.n	801054a <svCLI_Handler+0x11a>
 8010516:	4b62      	ldr	r3, [pc, #392]	; (80106a0 <svCLI_Handler+0x270>)
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	79fa      	ldrb	r2, [r7, #7]
 801051c:	429a      	cmp	r2, r3
 801051e:	d114      	bne.n	801054a <svCLI_Handler+0x11a>
        // Exit Bypass mode
        if (0x11 == svExit) {
 8010520:	4b5f      	ldr	r3, [pc, #380]	; (80106a0 <svCLI_Handler+0x270>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	2b11      	cmp	r3, #17
 8010526:	d102      	bne.n	801052e <svCLI_Handler+0xfe>
          svCLI_Printf("^Q");
 8010528:	485e      	ldr	r0, [pc, #376]	; (80106a4 <svCLI_Handler+0x274>)
 801052a:	f7ff fb47 	bl	800fbbc <svCLI_Printf>
        }
        svBypass(NULL); // Notify Exit !!
 801052e:	4b59      	ldr	r3, [pc, #356]	; (8010694 <svCLI_Handler+0x264>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2000      	movs	r0, #0
 8010534:	4798      	blx	r3
        svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 8010536:	2300      	movs	r3, #0
 8010538:	2200      	movs	r2, #0
 801053a:	2100      	movs	r1, #0
 801053c:	2000      	movs	r0, #0
 801053e:	f7ff ff01 	bl	8010344 <svCLI_SetBypassFtn>
        sbInEsc = 0;
 8010542:	4b50      	ldr	r3, [pc, #320]	; (8010684 <svCLI_Handler+0x254>)
 8010544:	2200      	movs	r2, #0
 8010546:	701a      	strb	r2, [r3, #0]
 8010548:	e08e      	b.n	8010668 <svCLI_Handler+0x238>
      }
      else if (svBypass && (szChar == 0X1A)) {    // Ctrl+Z
 801054a:	4b52      	ldr	r3, [pc, #328]	; (8010694 <svCLI_Handler+0x264>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d014      	beq.n	801057c <svCLI_Handler+0x14c>
 8010552:	79fb      	ldrb	r3, [r7, #7]
 8010554:	2b1a      	cmp	r3, #26
 8010556:	d111      	bne.n	801057c <svCLI_Handler+0x14c>
        bSkipPrompt = 1;
 8010558:	2301      	movs	r3, #1
 801055a:	73fb      	strb	r3, [r7, #15]
        szCLIString[scntCLIString] = 0X1A;  //Ctrl+z
 801055c:	4b4b      	ldr	r3, [pc, #300]	; (801068c <svCLI_Handler+0x25c>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a4b      	ldr	r2, [pc, #300]	; (8010690 <svCLI_Handler+0x260>)
 8010562:	211a      	movs	r1, #26
 8010564:	54d1      	strb	r1, [r2, r3]
        szCLIString[scntCLIString+1] = '\0';  // NULL Termination
 8010566:	4b49      	ldr	r3, [pc, #292]	; (801068c <svCLI_Handler+0x25c>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3301      	adds	r3, #1
 801056c:	4a48      	ldr	r2, [pc, #288]	; (8010690 <svCLI_Handler+0x260>)
 801056e:	2100      	movs	r1, #0
 8010570:	54d1      	strb	r1, [r2, r3]
        svBypass(szCLIString);
 8010572:	4b48      	ldr	r3, [pc, #288]	; (8010694 <svCLI_Handler+0x264>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4846      	ldr	r0, [pc, #280]	; (8010690 <svCLI_Handler+0x260>)
 8010578:	4798      	blx	r3
 801057a:	e075      	b.n	8010668 <svCLI_Handler+0x238>
      }
      else {
        if (szChar == '\b') { // Back space
 801057c:	79fb      	ldrb	r3, [r7, #7]
 801057e:	2b08      	cmp	r3, #8
 8010580:	d118      	bne.n	80105b4 <svCLI_Handler+0x184>
          sbInEsc = 0;
 8010582:	4b40      	ldr	r3, [pc, #256]	; (8010684 <svCLI_Handler+0x254>)
 8010584:	2200      	movs	r2, #0
 8010586:	701a      	strb	r2, [r3, #0]
          if (scntCLIString > 0) {
 8010588:	4b40      	ldr	r3, [pc, #256]	; (801068c <svCLI_Handler+0x25c>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d06b      	beq.n	8010668 <svCLI_Handler+0x238>
            _svClearLine();
 8010590:	f7ff fcb0 	bl	800fef4 <_svClearLine>
            scntCLIString--;
 8010594:	4b3d      	ldr	r3, [pc, #244]	; (801068c <svCLI_Handler+0x25c>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	3b01      	subs	r3, #1
 801059a:	4a3c      	ldr	r2, [pc, #240]	; (801068c <svCLI_Handler+0x25c>)
 801059c:	6013      	str	r3, [r2, #0]
            szCLIString[scntCLIString] = '\0';  // NULL Termination
 801059e:	4b3b      	ldr	r3, [pc, #236]	; (801068c <svCLI_Handler+0x25c>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	4a3b      	ldr	r2, [pc, #236]	; (8010690 <svCLI_Handler+0x260>)
 80105a4:	2100      	movs	r1, #0
 80105a6:	54d1      	strb	r1, [r2, r3]
            svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 80105a8:	4a39      	ldr	r2, [pc, #228]	; (8010690 <svCLI_Handler+0x260>)
 80105aa:	493c      	ldr	r1, [pc, #240]	; (801069c <svCLI_Handler+0x26c>)
 80105ac:	483e      	ldr	r0, [pc, #248]	; (80106a8 <svCLI_Handler+0x278>)
 80105ae:	f7ff fb05 	bl	800fbbc <svCLI_Printf>
 80105b2:	e059      	b.n	8010668 <svCLI_Handler+0x238>
          }
        }
        else if (szChar == '[') { // ESC sequence started
 80105b4:	79fb      	ldrb	r3, [r7, #7]
 80105b6:	2b5b      	cmp	r3, #91	; 0x5b
 80105b8:	d103      	bne.n	80105c2 <svCLI_Handler+0x192>
          sbInEsc = 1;
 80105ba:	4b32      	ldr	r3, [pc, #200]	; (8010684 <svCLI_Handler+0x254>)
 80105bc:	2201      	movs	r2, #1
 80105be:	701a      	strb	r2, [r3, #0]
 80105c0:	e052      	b.n	8010668 <svCLI_Handler+0x238>
        }
        else if (_isPrintable(szChar)) {
 80105c2:	79fb      	ldrb	r3, [r7, #7]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7ff fbe4 	bl	800fd92 <_isPrintable>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d04b      	beq.n	8010668 <svCLI_Handler+0x238>
          if (sbInEsc) {
 80105d0:	4b2c      	ldr	r3, [pc, #176]	; (8010684 <svCLI_Handler+0x254>)
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d036      	beq.n	8010646 <svCLI_Handler+0x216>
            sbInEsc = 0;
 80105d8:	4b2a      	ldr	r3, [pc, #168]	; (8010684 <svCLI_Handler+0x254>)
 80105da:	2200      	movs	r2, #0
 80105dc:	701a      	strb	r2, [r3, #0]
            if (snCLIHistoryCount > 0) {
 80105de:	4b33      	ldr	r3, [pc, #204]	; (80106ac <svCLI_Handler+0x27c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	dd27      	ble.n	8010636 <svCLI_Handler+0x206>
              switch (szChar) {
 80105e6:	79fb      	ldrb	r3, [r7, #7]
 80105e8:	2b41      	cmp	r3, #65	; 0x41
 80105ea:	d002      	beq.n	80105f2 <svCLI_Handler+0x1c2>
 80105ec:	2b42      	cmp	r3, #66	; 0x42
 80105ee:	d011      	beq.n	8010614 <svCLI_Handler+0x1e4>
                  // echo back
                  scntCLIString = svCLI_Printf("%s", szCLIString);
                  // echo back
                  break;
                default:  // Do Nothing
                  break;
 80105f0:	e021      	b.n	8010636 <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_PREV);
 80105f2:	2002      	movs	r0, #2
 80105f4:	f7ff fcb4 	bl	800ff60 <svCLIHandleHistory>
                  _svClearLine();
 80105f8:	f7ff fc7c 	bl	800fef4 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 80105fc:	4827      	ldr	r0, [pc, #156]	; (801069c <svCLI_Handler+0x26c>)
 80105fe:	f7ff fadd 	bl	800fbbc <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010602:	4923      	ldr	r1, [pc, #140]	; (8010690 <svCLI_Handler+0x260>)
 8010604:	482a      	ldr	r0, [pc, #168]	; (80106b0 <svCLI_Handler+0x280>)
 8010606:	f7ff fad9 	bl	800fbbc <svCLI_Printf>
 801060a:	4603      	mov	r3, r0
 801060c:	461a      	mov	r2, r3
 801060e:	4b1f      	ldr	r3, [pc, #124]	; (801068c <svCLI_Handler+0x25c>)
 8010610:	601a      	str	r2, [r3, #0]
                  break;
 8010612:	e010      	b.n	8010636 <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_NEXT);
 8010614:	2001      	movs	r0, #1
 8010616:	f7ff fca3 	bl	800ff60 <svCLIHandleHistory>
                  _svClearLine();
 801061a:	f7ff fc6b 	bl	800fef4 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 801061e:	481f      	ldr	r0, [pc, #124]	; (801069c <svCLI_Handler+0x26c>)
 8010620:	f7ff facc 	bl	800fbbc <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010624:	491a      	ldr	r1, [pc, #104]	; (8010690 <svCLI_Handler+0x260>)
 8010626:	4822      	ldr	r0, [pc, #136]	; (80106b0 <svCLI_Handler+0x280>)
 8010628:	f7ff fac8 	bl	800fbbc <svCLI_Printf>
 801062c:	4603      	mov	r3, r0
 801062e:	461a      	mov	r2, r3
 8010630:	4b16      	ldr	r3, [pc, #88]	; (801068c <svCLI_Handler+0x25c>)
 8010632:	601a      	str	r2, [r3, #0]
                  break;
 8010634:	bf00      	nop
              }
            }
            if (svCommit) {
 8010636:	4b1f      	ldr	r3, [pc, #124]	; (80106b4 <svCLI_Handler+0x284>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d01c      	beq.n	8010678 <svCLI_Handler+0x248>
              svCommit();
 801063e:	4b1d      	ldr	r3, [pc, #116]	; (80106b4 <svCLI_Handler+0x284>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4798      	blx	r3
            }
            return;
 8010644:	e018      	b.n	8010678 <svCLI_Handler+0x248>
          }
          if (scntCLIString < (MAX_CLI_CHARS-1)) {
 8010646:	4b11      	ldr	r3, [pc, #68]	; (801068c <svCLI_Handler+0x25c>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2b7e      	cmp	r3, #126	; 0x7e
 801064c:	d80c      	bhi.n	8010668 <svCLI_Handler+0x238>
            // echo back
            svPutChar(szChar);
 801064e:	4b1a      	ldr	r3, [pc, #104]	; (80106b8 <svCLI_Handler+0x288>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	79fa      	ldrb	r2, [r7, #7]
 8010654:	4610      	mov	r0, r2
 8010656:	4798      	blx	r3
            szCLIString[scntCLIString++] = szChar;
 8010658:	4b0c      	ldr	r3, [pc, #48]	; (801068c <svCLI_Handler+0x25c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	1c5a      	adds	r2, r3, #1
 801065e:	490b      	ldr	r1, [pc, #44]	; (801068c <svCLI_Handler+0x25c>)
 8010660:	600a      	str	r2, [r1, #0]
 8010662:	490b      	ldr	r1, [pc, #44]	; (8010690 <svCLI_Handler+0x260>)
 8010664:	79fa      	ldrb	r2, [r7, #7]
 8010666:	54ca      	strb	r2, [r1, r3]
          }
        }
      }
    }
  }
  if (svCommit) {
 8010668:	4b12      	ldr	r3, [pc, #72]	; (80106b4 <svCLI_Handler+0x284>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d004      	beq.n	801067a <svCLI_Handler+0x24a>
    svCommit();
 8010670:	4b10      	ldr	r3, [pc, #64]	; (80106b4 <svCLI_Handler+0x284>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4798      	blx	r3
 8010676:	e000      	b.n	801067a <svCLI_Handler+0x24a>
            return;
 8010678:	bf00      	nop
  }
}
 801067a:	3710      	adds	r7, #16
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	20004180 	.word	0x20004180
 8010684:	20004298 	.word	0x20004298
 8010688:	0801d168 	.word	0x0801d168
 801068c:	20004174 	.word	0x20004174
 8010690:	20003f6c 	.word	0x20003f6c
 8010694:	2000418c 	.word	0x2000418c
 8010698:	20004194 	.word	0x20004194
 801069c:	20000068 	.word	0x20000068
 80106a0:	20004190 	.word	0x20004190
 80106a4:	0801d23c 	.word	0x0801d23c
 80106a8:	0801d240 	.word	0x0801d240
 80106ac:	2000416c 	.word	0x2000416c
 80106b0:	0801d248 	.word	0x0801d248
 80106b4:	20004188 	.word	0x20004188
 80106b8:	20004184 	.word	0x20004184

080106bc <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
 80106c8:	603b      	str	r3, [r7, #0]
  svCLI_ShowHelp();
 80106ca:	f7ff faa3 	bl	800fc14 <svCLI_ShowHelp>
}
 80106ce:	bf00      	nop
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b085      	sub	sp, #20
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d303      	bcc.n	80106fa <svRingBuffer_GetCount+0x24>
	  return (h - t);
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	e009      	b.n	801070e <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	68da      	ldr	r2, [r3, #12]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	461a      	mov	r2, r3
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	441a      	add	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	1ad3      	subs	r3, r2, r3
}
 801070e:	4618      	mov	r0, r3
 8010710:	3714      	adds	r7, #20
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr

0801071a <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 801071a:	b480      	push	{r7}
 801071c:	b083      	sub	sp, #12
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	609a      	str	r2, [r3, #8]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	619a      	str	r2, [r3, #24]
}
 801073e:	bf00      	nop
 8010740:	370c      	adds	r7, #12
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr

0801074a <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 801074a:	b480      	push	{r7}
 801074c:	b085      	sub	sp, #20
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	460b      	mov	r3, r1
 8010754:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 8010756:	2300      	movs	r3, #0
 8010758:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	78fa      	ldrb	r2, [r7, #3]
 8010760:	701a      	strb	r2, [r3, #0]
	rb->head++;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	1c5a      	adds	r2, r3, #1
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	429a      	cmp	r2, r3
 8010776:	d109      	bne.n	801078c <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2201      	movs	r2, #1
 8010784:	619a      	str	r2, [r3, #24]
		nRet = -1;
 8010786:	f04f 33ff 	mov.w	r3, #4294967295
 801078a:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	685a      	ldr	r2, [r3, #4]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	689b      	ldr	r3, [r3, #8]
 8010794:	429a      	cmp	r2, r3
 8010796:	d105      	bne.n	80107a4 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2201      	movs	r2, #1
 801079c:	615a      	str	r2, [r3, #20]
		nRet = -2;
 801079e:	f06f 0301 	mvn.w	r3, #1
 80107a2:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 80107a4:	68fb      	ldr	r3, [r7, #12]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3714      	adds	r7, #20
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 80107b2:	b480      	push	{r7}
 80107b4:	b085      	sub	sp, #20
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	689b      	ldr	r3, [r3, #8]
 80107c6:	1c5a      	adds	r2, r3, #1
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	689a      	ldr	r2, [r3, #8]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d103      	bne.n	80107e0 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	609a      	str	r2, [r3, #8]
	return byData;
 80107e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3714      	adds	r7, #20
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr
	...

080107f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80107f0:	b580      	push	{r7, lr}
 80107f2:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 80107f4:	4b05      	ldr	r3, [pc, #20]	; (801080c <SysTick_Handler+0x1c>)
 80107f6:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80107f8:	f000 f98a 	bl	8010b10 <xTaskGetSchedulerState>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d001      	beq.n	8010806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010802:	f000 f9a3 	bl	8010b4c <xPortSysTickHandler>
  }
}
 8010806:	bf00      	nop
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	e000e010 	.word	0xe000e010

08010810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b088      	sub	sp, #32
 8010814:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8010816:	2300      	movs	r3, #0
 8010818:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801081a:	4b7a      	ldr	r3, [pc, #488]	; (8010a04 <xTaskIncrementTick+0x1f4>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	f040 80e5 	bne.w	80109ee <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010824:	4b78      	ldr	r3, [pc, #480]	; (8010a08 <xTaskIncrementTick+0x1f8>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	3301      	adds	r3, #1
 801082a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 801082c:	4a76      	ldr	r2, [pc, #472]	; (8010a08 <xTaskIncrementTick+0x1f8>)
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d118      	bne.n	801086a <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8010838:	4b74      	ldr	r3, [pc, #464]	; (8010a0c <xTaskIncrementTick+0x1fc>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d002      	beq.n	8010848 <xTaskIncrementTick+0x38>
 8010842:	f000 f9d1 	bl	8010be8 <ulSetInterruptMask>
 8010846:	e7fe      	b.n	8010846 <xTaskIncrementTick+0x36>
 8010848:	4b70      	ldr	r3, [pc, #448]	; (8010a0c <xTaskIncrementTick+0x1fc>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	617b      	str	r3, [r7, #20]
 801084e:	4b70      	ldr	r3, [pc, #448]	; (8010a10 <xTaskIncrementTick+0x200>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4a6e      	ldr	r2, [pc, #440]	; (8010a0c <xTaskIncrementTick+0x1fc>)
 8010854:	6013      	str	r3, [r2, #0]
 8010856:	4a6e      	ldr	r2, [pc, #440]	; (8010a10 <xTaskIncrementTick+0x200>)
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	6013      	str	r3, [r2, #0]
 801085c:	4b6d      	ldr	r3, [pc, #436]	; (8010a14 <xTaskIncrementTick+0x204>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	3301      	adds	r3, #1
 8010862:	4a6c      	ldr	r2, [pc, #432]	; (8010a14 <xTaskIncrementTick+0x204>)
 8010864:	6013      	str	r3, [r2, #0]
 8010866:	f000 f937 	bl	8010ad8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 801086a:	4b6b      	ldr	r3, [pc, #428]	; (8010a18 <xTaskIncrementTick+0x208>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	69ba      	ldr	r2, [r7, #24]
 8010870:	429a      	cmp	r2, r3
 8010872:	f0c0 80a7 	bcc.w	80109c4 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010876:	4b65      	ldr	r3, [pc, #404]	; (8010a0c <xTaskIncrementTick+0x1fc>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d104      	bne.n	801088a <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010880:	4b65      	ldr	r3, [pc, #404]	; (8010a18 <xTaskIncrementTick+0x208>)
 8010882:	f04f 32ff 	mov.w	r2, #4294967295
 8010886:	601a      	str	r2, [r3, #0]
                    break;
 8010888:	e09c      	b.n	80109c4 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801088a:	4b60      	ldr	r3, [pc, #384]	; (8010a0c <xTaskIncrementTick+0x1fc>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 801089a:	69ba      	ldr	r2, [r7, #24]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d203      	bcs.n	80108aa <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80108a2:	4a5d      	ldr	r2, [pc, #372]	; (8010a18 <xTaskIncrementTick+0x208>)
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80108a8:	e08c      	b.n	80109c4 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	695b      	ldr	r3, [r3, #20]
 80108ae:	60bb      	str	r3, [r7, #8]
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	693a      	ldr	r2, [r7, #16]
 80108b6:	68d2      	ldr	r2, [r2, #12]
 80108b8:	609a      	str	r2, [r3, #8]
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	6892      	ldr	r2, [r2, #8]
 80108c2:	605a      	str	r2, [r3, #4]
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	685a      	ldr	r2, [r3, #4]
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	3304      	adds	r3, #4
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d103      	bne.n	80108d8 <xTaskIncrementTick+0xc8>
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	68da      	ldr	r2, [r3, #12]
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	605a      	str	r2, [r3, #4]
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	2200      	movs	r2, #0
 80108dc:	615a      	str	r2, [r3, #20]
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	1e5a      	subs	r2, r3, #1
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d01e      	beq.n	801092e <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f4:	607b      	str	r3, [r7, #4]
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	69db      	ldr	r3, [r3, #28]
 80108fa:	693a      	ldr	r2, [r7, #16]
 80108fc:	6a12      	ldr	r2, [r2, #32]
 80108fe:	609a      	str	r2, [r3, #8]
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	6a1b      	ldr	r3, [r3, #32]
 8010904:	693a      	ldr	r2, [r7, #16]
 8010906:	69d2      	ldr	r2, [r2, #28]
 8010908:	605a      	str	r2, [r3, #4]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	685a      	ldr	r2, [r3, #4]
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	3318      	adds	r3, #24
 8010912:	429a      	cmp	r2, r3
 8010914:	d103      	bne.n	801091e <xTaskIncrementTick+0x10e>
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	6a1a      	ldr	r2, [r3, #32]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	605a      	str	r2, [r3, #4]
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	2200      	movs	r2, #0
 8010922:	629a      	str	r2, [r3, #40]	; 0x28
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	1e5a      	subs	r2, r3, #1
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010932:	4b3a      	ldr	r3, [pc, #232]	; (8010a1c <xTaskIncrementTick+0x20c>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	429a      	cmp	r2, r3
 8010938:	d903      	bls.n	8010942 <xTaskIncrementTick+0x132>
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093e:	4a37      	ldr	r2, [pc, #220]	; (8010a1c <xTaskIncrementTick+0x20c>)
 8010940:	6013      	str	r3, [r2, #0]
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010946:	4936      	ldr	r1, [pc, #216]	; (8010a20 <xTaskIncrementTick+0x210>)
 8010948:	4613      	mov	r3, r2
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	4413      	add	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	440b      	add	r3, r1
 8010952:	3304      	adds	r3, #4
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	603b      	str	r3, [r7, #0]
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	609a      	str	r2, [r3, #8]
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	689a      	ldr	r2, [r3, #8]
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	60da      	str	r2, [r3, #12]
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	693a      	ldr	r2, [r7, #16]
 801096c:	3204      	adds	r2, #4
 801096e:	605a      	str	r2, [r3, #4]
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	1d1a      	adds	r2, r3, #4
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	609a      	str	r2, [r3, #8]
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801097c:	4613      	mov	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	4413      	add	r3, r2
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	4a26      	ldr	r2, [pc, #152]	; (8010a20 <xTaskIncrementTick+0x210>)
 8010986:	441a      	add	r2, r3
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	615a      	str	r2, [r3, #20]
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010990:	4923      	ldr	r1, [pc, #140]	; (8010a20 <xTaskIncrementTick+0x210>)
 8010992:	4613      	mov	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	440b      	add	r3, r1
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	1c59      	adds	r1, r3, #1
 80109a0:	481f      	ldr	r0, [pc, #124]	; (8010a20 <xTaskIncrementTick+0x210>)
 80109a2:	4613      	mov	r3, r2
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4413      	add	r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	4403      	add	r3, r0
 80109ac:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109b2:	4b1c      	ldr	r3, [pc, #112]	; (8010a24 <xTaskIncrementTick+0x214>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109b8:	429a      	cmp	r2, r3
 80109ba:	f67f af5c 	bls.w	8010876 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 80109be:	2301      	movs	r3, #1
 80109c0:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109c2:	e758      	b.n	8010876 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80109c4:	4b17      	ldr	r3, [pc, #92]	; (8010a24 <xTaskIncrementTick+0x214>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ca:	4915      	ldr	r1, [pc, #84]	; (8010a20 <xTaskIncrementTick+0x210>)
 80109cc:	4613      	mov	r3, r2
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	4413      	add	r3, r2
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	440b      	add	r3, r1
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d901      	bls.n	80109e0 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 80109dc:	2301      	movs	r3, #1
 80109de:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80109e0:	4b11      	ldr	r3, [pc, #68]	; (8010a28 <xTaskIncrementTick+0x218>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d007      	beq.n	80109f8 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 80109e8:	2301      	movs	r3, #1
 80109ea:	61fb      	str	r3, [r7, #28]
 80109ec:	e004      	b.n	80109f8 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80109ee:	4b0f      	ldr	r3, [pc, #60]	; (8010a2c <xTaskIncrementTick+0x21c>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3301      	adds	r3, #1
 80109f4:	4a0d      	ldr	r2, [pc, #52]	; (8010a2c <xTaskIncrementTick+0x21c>)
 80109f6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80109f8:	69fb      	ldr	r3, [r7, #28]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3720      	adds	r7, #32
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20004724 	.word	0x20004724
 8010a08:	20004708 	.word	0x20004708
 8010a0c:	20004700 	.word	0x20004700
 8010a10:	20004704 	.word	0x20004704
 8010a14:	2000471c 	.word	0x2000471c
 8010a18:	20004720 	.word	0x20004720
 8010a1c:	2000470c 	.word	0x2000470c
 8010a20:	200042a0 	.word	0x200042a0
 8010a24:	2000429c 	.word	0x2000429c
 8010a28:	20004718 	.word	0x20004718
 8010a2c:	20004714 	.word	0x20004714

08010a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a36:	4b23      	ldr	r3, [pc, #140]	; (8010ac4 <vTaskSwitchContext+0x94>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8010a3e:	4b22      	ldr	r3, [pc, #136]	; (8010ac8 <vTaskSwitchContext+0x98>)
 8010a40:	2201      	movs	r2, #1
 8010a42:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8010a44:	e039      	b.n	8010aba <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8010a46:	4b20      	ldr	r3, [pc, #128]	; (8010ac8 <vTaskSwitchContext+0x98>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a4c:	4b1f      	ldr	r3, [pc, #124]	; (8010acc <vTaskSwitchContext+0x9c>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	607b      	str	r3, [r7, #4]
 8010a52:	e008      	b.n	8010a66 <vTaskSwitchContext+0x36>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d102      	bne.n	8010a60 <vTaskSwitchContext+0x30>
 8010a5a:	f000 f8c5 	bl	8010be8 <ulSetInterruptMask>
 8010a5e:	e7fe      	b.n	8010a5e <vTaskSwitchContext+0x2e>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	607b      	str	r3, [r7, #4]
 8010a66:	491a      	ldr	r1, [pc, #104]	; (8010ad0 <vTaskSwitchContext+0xa0>)
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	009b      	lsls	r3, r3, #2
 8010a6e:	4413      	add	r3, r2
 8010a70:	009b      	lsls	r3, r3, #2
 8010a72:	440b      	add	r3, r1
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d0ec      	beq.n	8010a54 <vTaskSwitchContext+0x24>
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	4a12      	ldr	r2, [pc, #72]	; (8010ad0 <vTaskSwitchContext+0xa0>)
 8010a86:	4413      	add	r3, r2
 8010a88:	603b      	str	r3, [r7, #0]
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	685a      	ldr	r2, [r3, #4]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	605a      	str	r2, [r3, #4]
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	685a      	ldr	r2, [r3, #4]
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	3308      	adds	r3, #8
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d104      	bne.n	8010aaa <vTaskSwitchContext+0x7a>
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	605a      	str	r2, [r3, #4]
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	4a08      	ldr	r2, [pc, #32]	; (8010ad4 <vTaskSwitchContext+0xa4>)
 8010ab2:	6013      	str	r3, [r2, #0]
 8010ab4:	4a05      	ldr	r2, [pc, #20]	; (8010acc <vTaskSwitchContext+0x9c>)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6013      	str	r3, [r2, #0]
}
 8010aba:	bf00      	nop
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20004724 	.word	0x20004724
 8010ac8:	20004718 	.word	0x20004718
 8010acc:	2000470c 	.word	0x2000470c
 8010ad0:	200042a0 	.word	0x200042a0
 8010ad4:	2000429c 	.word	0x2000429c

08010ad8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ad8:	b480      	push	{r7}
 8010ada:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010adc:	4b0a      	ldr	r3, [pc, #40]	; (8010b08 <prvResetNextTaskUnblockTime+0x30>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d104      	bne.n	8010af0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8010ae6:	4b09      	ldr	r3, [pc, #36]	; (8010b0c <prvResetNextTaskUnblockTime+0x34>)
 8010ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8010aec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8010aee:	e005      	b.n	8010afc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010af0:	4b05      	ldr	r3, [pc, #20]	; (8010b08 <prvResetNextTaskUnblockTime+0x30>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4a04      	ldr	r2, [pc, #16]	; (8010b0c <prvResetNextTaskUnblockTime+0x34>)
 8010afa:	6013      	str	r3, [r2, #0]
}
 8010afc:	bf00      	nop
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	20004700 	.word	0x20004700
 8010b0c:	20004720 	.word	0x20004720

08010b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8010b10:	b480      	push	{r7}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8010b16:	4b0b      	ldr	r3, [pc, #44]	; (8010b44 <xTaskGetSchedulerState+0x34>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d102      	bne.n	8010b24 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8010b1e:	2301      	movs	r3, #1
 8010b20:	607b      	str	r3, [r7, #4]
 8010b22:	e008      	b.n	8010b36 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b24:	4b08      	ldr	r3, [pc, #32]	; (8010b48 <xTaskGetSchedulerState+0x38>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d102      	bne.n	8010b32 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8010b2c:	2302      	movs	r3, #2
 8010b2e:	607b      	str	r3, [r7, #4]
 8010b30:	e001      	b.n	8010b36 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8010b32:	2300      	movs	r3, #0
 8010b34:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8010b36:	687b      	ldr	r3, [r7, #4]
    }
 8010b38:	4618      	mov	r0, r3
 8010b3a:	370c      	adds	r7, #12
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr
 8010b44:	20004710 	.word	0x20004710
 8010b48:	20004724 	.word	0x20004724

08010b4c <xPortSysTickHandler>:
    }
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b52:	f000 f849 	bl	8010be8 <ulSetInterruptMask>
 8010b56:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8010b58:	f7ff fe5a 	bl	8010810 <xTaskIncrementTick>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d003      	beq.n	8010b6a <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b62:	4b05      	ldr	r3, [pc, #20]	; (8010b78 <xPortSysTickHandler+0x2c>)
 8010b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b68:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f000 f849 	bl	8010c02 <vClearInterruptMask>
}
 8010b70:	bf00      	nop
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	e000ed04 	.word	0xe000ed04

08010b7c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	699b      	ldr	r3, [r3, #24]
 8010b88:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	3b02      	subs	r3, #2
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8010b92:	7afb      	ldrb	r3, [r7, #11]
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	d102      	bne.n	8010b9e <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8010b98:	f000 f80a 	bl	8010bb0 <vRestoreContextOfFirstTask>
            break;
 8010b9c:	e002      	b.n	8010ba4 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8010b9e:	f000 f823 	bl	8010be8 <ulSetInterruptMask>
 8010ba2:	e7fe      	b.n	8010ba2 <vPortSVCHandler_C+0x26>
    }
}
 8010ba4:	bf00      	nop
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	0000      	movs	r0, r0
	...

08010bb0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010bb0:	4a0b      	ldr	r2, [pc, #44]	; (8010be0 <pxCurrentTCBConst2>)
 8010bb2:	6811      	ldr	r1, [r2, #0]
 8010bb4:	6808      	ldr	r0, [r1, #0]
 8010bb6:	c806      	ldmia	r0!, {r1, r2}
 8010bb8:	f381 880b 	msr	PSPLIM, r1
 8010bbc:	2102      	movs	r1, #2
 8010bbe:	f381 8814 	msr	CONTROL, r1
 8010bc2:	3020      	adds	r0, #32
 8010bc4:	f380 8809 	msr	PSP, r0
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f04f 0000 	mov.w	r0, #0
 8010bd0:	f380 8811 	msr	BASEPRI, r0
 8010bd4:	4710      	bx	r2
 8010bd6:	bf00      	nop
 8010bd8:	f3af 8000 	nop.w
 8010bdc:	f3af 8000 	nop.w

08010be0 <pxCurrentTCBConst2>:
 8010be0:	2000429c 	.word	0x2000429c
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8010be4:	bf00      	nop
 8010be6:	bf00      	nop

08010be8 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010be8:	f3ef 8011 	mrs	r0, BASEPRI
 8010bec:	f04f 0150 	mov.w	r1, #80	; 0x50
 8010bf0:	f381 8811 	msr	BASEPRI, r1
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8010bfe:	bf00      	nop
 8010c00:	4618      	mov	r0, r3

08010c02 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010c02:	f380 8811 	msr	BASEPRI, r0
 8010c06:	f3bf 8f4f 	dsb	sy
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8010c10:	bf00      	nop
	...

08010c20 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010c20:	f3ef 8009 	mrs	r0, PSP
 8010c24:	f3ef 820b 	mrs	r2, PSPLIM
 8010c28:	4673      	mov	r3, lr
 8010c2a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8010c2e:	4a10      	ldr	r2, [pc, #64]	; (8010c70 <pxCurrentTCBConst>)
 8010c30:	6811      	ldr	r1, [r2, #0]
 8010c32:	6008      	str	r0, [r1, #0]
 8010c34:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c38:	f380 8811 	msr	BASEPRI, r0
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	f3bf 8f6f 	isb	sy
 8010c44:	f7ff fef4 	bl	8010a30 <vTaskSwitchContext>
 8010c48:	f04f 0000 	mov.w	r0, #0
 8010c4c:	f380 8811 	msr	BASEPRI, r0
 8010c50:	4a07      	ldr	r2, [pc, #28]	; (8010c70 <pxCurrentTCBConst>)
 8010c52:	6811      	ldr	r1, [r2, #0]
 8010c54:	6808      	ldr	r0, [r1, #0]
 8010c56:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8010c5a:	f382 880b 	msr	PSPLIM, r2
 8010c5e:	f380 8809 	msr	PSP, r0
 8010c62:	4718      	bx	r3
 8010c64:	f3af 8000 	nop.w
 8010c68:	f3af 8000 	nop.w
 8010c6c:	f3af 8000 	nop.w

08010c70 <pxCurrentTCBConst>:
 8010c70:	2000429c 	.word	0x2000429c
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8010c74:	bf00      	nop
 8010c76:	bf00      	nop
	...

08010c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010c80:	f01e 0f04 	tst.w	lr, #4
 8010c84:	bf0c      	ite	eq
 8010c86:	f3ef 8008 	mrseq	r0, MSP
 8010c8a:	f3ef 8009 	mrsne	r0, PSP
 8010c8e:	4904      	ldr	r1, [pc, #16]	; (8010ca0 <svchandler_address_const>)
 8010c90:	4708      	bx	r1
 8010c92:	bf00      	nop
 8010c94:	f3af 8000 	nop.w
 8010c98:	f3af 8000 	nop.w
 8010c9c:	f3af 8000 	nop.w

08010ca0 <svchandler_address_const>:
 8010ca0:	08010b7d 	.word	0x08010b7d
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 8010ca4:	bf00      	nop
 8010ca6:	bf00      	nop

08010ca8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	4603      	mov	r3, r0
 8010cb0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010cb2:	88fb      	ldrh	r3, [r7, #6]
 8010cb4:	021b      	lsls	r3, r3, #8
 8010cb6:	b21a      	sxth	r2, r3
 8010cb8:	88fb      	ldrh	r3, [r7, #6]
 8010cba:	0a1b      	lsrs	r3, r3, #8
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	b21b      	sxth	r3, r3
 8010cc0:	4313      	orrs	r3, r2
 8010cc2:	b21b      	sxth	r3, r3
 8010cc4:	b29b      	uxth	r3, r3
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	370c      	adds	r7, #12
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr

08010cd2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010cd2:	b480      	push	{r7}
 8010cd4:	b083      	sub	sp, #12
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	061a      	lsls	r2, r3, #24
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	021b      	lsls	r3, r3, #8
 8010ce2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010ce6:	431a      	orrs	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	0a1b      	lsrs	r3, r3, #8
 8010cec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010cf0:	431a      	orrs	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	0e1b      	lsrs	r3, r3, #24
 8010cf6:	4313      	orrs	r3, r2
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b089      	sub	sp, #36	; 0x24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010d12:	2300      	movs	r3, #0
 8010d14:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8010d16:	2300      	movs	r3, #0
 8010d18:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010d1a:	69fb      	ldr	r3, [r7, #28]
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00d      	beq.n	8010d44 <lwip_standard_chksum+0x40>
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	dd0a      	ble.n	8010d44 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010d2e:	69fa      	ldr	r2, [r7, #28]
 8010d30:	1c53      	adds	r3, r2, #1
 8010d32:	61fb      	str	r3, [r7, #28]
 8010d34:	f107 030e 	add.w	r3, r7, #14
 8010d38:	3301      	adds	r3, #1
 8010d3a:	7812      	ldrb	r2, [r2, #0]
 8010d3c:	701a      	strb	r2, [r3, #0]
    len--;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8010d48:	e00a      	b.n	8010d60 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	1c9a      	adds	r2, r3, #2
 8010d4e:	61ba      	str	r2, [r7, #24]
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	461a      	mov	r2, r3
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	4413      	add	r3, r2
 8010d58:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	3b02      	subs	r3, #2
 8010d5e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	dcf1      	bgt.n	8010d4a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	dd04      	ble.n	8010d76 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010d6c:	f107 030e 	add.w	r3, r7, #14
 8010d70:	69ba      	ldr	r2, [r7, #24]
 8010d72:	7812      	ldrb	r2, [r2, #0]
 8010d74:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8010d76:	89fb      	ldrh	r3, [r7, #14]
 8010d78:	461a      	mov	r2, r3
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	0c1a      	lsrs	r2, r3, #16
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	4413      	add	r3, r2
 8010d8a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	0c1a      	lsrs	r2, r3, #16
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	4413      	add	r3, r2
 8010d96:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d007      	beq.n	8010dae <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	021b      	lsls	r3, r3, #8
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	0a1b      	lsrs	r3, r3, #8
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	4313      	orrs	r3, r2
 8010dac:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	b29b      	uxth	r3, r3
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3724      	adds	r7, #36	; 0x24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010dca:	887b      	ldrh	r3, [r7, #2]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f7ff ff98 	bl	8010d04 <lwip_standard_chksum>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	43db      	mvns	r3, r3
 8010dd8:	b29b      	uxth	r3, r3
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3708      	adds	r7, #8
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}

08010de2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b082      	sub	sp, #8
 8010de6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010de8:	2300      	movs	r3, #0
 8010dea:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8010dec:	f000 f8d4 	bl	8010f98 <mem_init>
  memp_init();
 8010df0:	f000 fbd6 	bl	80115a0 <memp_init>
  pbuf_init();
  netif_init();
 8010df4:	f000 fcd4 	bl	80117a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010df8:	f007 ff5e 	bl	8018cb8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010dfc:	f001 fdba 	bl	8012974 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010e00:	f007 fed0 	bl	8018ba4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010e04:	bf00      	nop
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	4603      	mov	r3, r0
 8010e14:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010e16:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <ptr_to_mem+0x20>)
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	88fb      	ldrh	r3, [r7, #6]
 8010e1c:	4413      	add	r3, r2
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	370c      	adds	r7, #12
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	20004740 	.word	0x20004740

08010e30 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010e38:	4b05      	ldr	r3, [pc, #20]	; (8010e50 <mem_to_ptr+0x20>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	b29b      	uxth	r3, r3
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	370c      	adds	r7, #12
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop
 8010e50:	20004740 	.word	0x20004740

08010e54 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010e54:	b590      	push	{r4, r7, lr}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010e5c:	4b45      	ldr	r3, [pc, #276]	; (8010f74 <plug_holes+0x120>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d206      	bcs.n	8010e74 <plug_holes+0x20>
 8010e66:	4b44      	ldr	r3, [pc, #272]	; (8010f78 <plug_holes+0x124>)
 8010e68:	f240 12df 	movw	r2, #479	; 0x1df
 8010e6c:	4943      	ldr	r1, [pc, #268]	; (8010f7c <plug_holes+0x128>)
 8010e6e:	4844      	ldr	r0, [pc, #272]	; (8010f80 <plug_holes+0x12c>)
 8010e70:	f00a ff18 	bl	801bca4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010e74:	4b43      	ldr	r3, [pc, #268]	; (8010f84 <plug_holes+0x130>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d306      	bcc.n	8010e8c <plug_holes+0x38>
 8010e7e:	4b3e      	ldr	r3, [pc, #248]	; (8010f78 <plug_holes+0x124>)
 8010e80:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010e84:	4940      	ldr	r1, [pc, #256]	; (8010f88 <plug_holes+0x134>)
 8010e86:	483e      	ldr	r0, [pc, #248]	; (8010f80 <plug_holes+0x12c>)
 8010e88:	f00a ff0c 	bl	801bca4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	791b      	ldrb	r3, [r3, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d006      	beq.n	8010ea2 <plug_holes+0x4e>
 8010e94:	4b38      	ldr	r3, [pc, #224]	; (8010f78 <plug_holes+0x124>)
 8010e96:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010e9a:	493c      	ldr	r1, [pc, #240]	; (8010f8c <plug_holes+0x138>)
 8010e9c:	4838      	ldr	r0, [pc, #224]	; (8010f80 <plug_holes+0x12c>)
 8010e9e:	f00a ff01 	bl	801bca4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	881b      	ldrh	r3, [r3, #0]
 8010ea6:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010eaa:	d906      	bls.n	8010eba <plug_holes+0x66>
 8010eac:	4b32      	ldr	r3, [pc, #200]	; (8010f78 <plug_holes+0x124>)
 8010eae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010eb2:	4937      	ldr	r1, [pc, #220]	; (8010f90 <plug_holes+0x13c>)
 8010eb4:	4832      	ldr	r0, [pc, #200]	; (8010f80 <plug_holes+0x12c>)
 8010eb6:	f00a fef5 	bl	801bca4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff ffa4 	bl	8010e0c <ptr_to_mem>
 8010ec4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010ec6:	687a      	ldr	r2, [r7, #4]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d024      	beq.n	8010f18 <plug_holes+0xc4>
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	791b      	ldrb	r3, [r3, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d120      	bne.n	8010f18 <plug_holes+0xc4>
 8010ed6:	4b2b      	ldr	r3, [pc, #172]	; (8010f84 <plug_holes+0x130>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d01b      	beq.n	8010f18 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010ee0:	4b2c      	ldr	r3, [pc, #176]	; (8010f94 <plug_holes+0x140>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	68fa      	ldr	r2, [r7, #12]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d102      	bne.n	8010ef0 <plug_holes+0x9c>
      lfree = mem;
 8010eea:	4a2a      	ldr	r2, [pc, #168]	; (8010f94 <plug_holes+0x140>)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	881a      	ldrh	r2, [r3, #0]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010f00:	d00a      	beq.n	8010f18 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	881b      	ldrh	r3, [r3, #0]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7ff ff80 	bl	8010e0c <ptr_to_mem>
 8010f0c:	4604      	mov	r4, r0
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f7ff ff8e 	bl	8010e30 <mem_to_ptr>
 8010f14:	4603      	mov	r3, r0
 8010f16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	885b      	ldrh	r3, [r3, #2]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff ff75 	bl	8010e0c <ptr_to_mem>
 8010f22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d01f      	beq.n	8010f6c <plug_holes+0x118>
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	791b      	ldrb	r3, [r3, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d11b      	bne.n	8010f6c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010f34:	4b17      	ldr	r3, [pc, #92]	; (8010f94 <plug_holes+0x140>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d102      	bne.n	8010f44 <plug_holes+0xf0>
      lfree = pmem;
 8010f3e:	4a15      	ldr	r2, [pc, #84]	; (8010f94 <plug_holes+0x140>)
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	881a      	ldrh	r2, [r3, #0]
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010f54:	d00a      	beq.n	8010f6c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	881b      	ldrh	r3, [r3, #0]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7ff ff56 	bl	8010e0c <ptr_to_mem>
 8010f60:	4604      	mov	r4, r0
 8010f62:	68b8      	ldr	r0, [r7, #8]
 8010f64:	f7ff ff64 	bl	8010e30 <mem_to_ptr>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010f6c:	bf00      	nop
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd90      	pop	{r4, r7, pc}
 8010f74:	20004740 	.word	0x20004740
 8010f78:	0801d268 	.word	0x0801d268
 8010f7c:	0801d298 	.word	0x0801d298
 8010f80:	0801d2b0 	.word	0x0801d2b0
 8010f84:	20004744 	.word	0x20004744
 8010f88:	0801d2d8 	.word	0x0801d2d8
 8010f8c:	0801d2f4 	.word	0x0801d2f4
 8010f90:	0801d310 	.word	0x0801d310
 8010f94:	20004748 	.word	0x20004748

08010f98 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010f9e:	4b16      	ldr	r3, [pc, #88]	; (8010ff8 <mem_init+0x60>)
 8010fa0:	4a16      	ldr	r2, [pc, #88]	; (8010ffc <mem_init+0x64>)
 8010fa2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010fa4:	4b14      	ldr	r3, [pc, #80]	; (8010ff8 <mem_init+0x60>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010fb0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010fbe:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8010fc2:	f7ff ff23 	bl	8010e0c <ptr_to_mem>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	4a0d      	ldr	r2, [pc, #52]	; (8011000 <mem_init+0x68>)
 8010fca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010fcc:	4b0c      	ldr	r3, [pc, #48]	; (8011000 <mem_init+0x68>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010fd4:	4b0a      	ldr	r3, [pc, #40]	; (8011000 <mem_init+0x68>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010fdc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010fde:	4b08      	ldr	r3, [pc, #32]	; (8011000 <mem_init+0x68>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010fe6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010fe8:	4b03      	ldr	r3, [pc, #12]	; (8010ff8 <mem_init+0x60>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a05      	ldr	r2, [pc, #20]	; (8011004 <mem_init+0x6c>)
 8010fee:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	20004740 	.word	0x20004740
 8010ffc:	20084000 	.word	0x20084000
 8011000:	20004744 	.word	0x20004744
 8011004:	20004748 	.word	0x20004748

08011008 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7ff ff0d 	bl	8010e30 <mem_to_ptr>
 8011016:	4603      	mov	r3, r0
 8011018:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	4618      	mov	r0, r3
 8011020:	f7ff fef4 	bl	8010e0c <ptr_to_mem>
 8011024:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	885b      	ldrh	r3, [r3, #2]
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff feee 	bl	8010e0c <ptr_to_mem>
 8011030:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801103a:	d818      	bhi.n	801106e <mem_link_valid+0x66>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	885b      	ldrh	r3, [r3, #2]
 8011040:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8011044:	d813      	bhi.n	801106e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801104a:	8afa      	ldrh	r2, [r7, #22]
 801104c:	429a      	cmp	r2, r3
 801104e:	d004      	beq.n	801105a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	881b      	ldrh	r3, [r3, #0]
 8011054:	8afa      	ldrh	r2, [r7, #22]
 8011056:	429a      	cmp	r2, r3
 8011058:	d109      	bne.n	801106e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801105a:	4b08      	ldr	r3, [pc, #32]	; (801107c <mem_link_valid+0x74>)
 801105c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	429a      	cmp	r2, r3
 8011062:	d006      	beq.n	8011072 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	885b      	ldrh	r3, [r3, #2]
 8011068:	8afa      	ldrh	r2, [r7, #22]
 801106a:	429a      	cmp	r2, r3
 801106c:	d001      	beq.n	8011072 <mem_link_valid+0x6a>
    return 0;
 801106e:	2300      	movs	r3, #0
 8011070:	e000      	b.n	8011074 <mem_link_valid+0x6c>
  }
  return 1;
 8011072:	2301      	movs	r3, #1
}
 8011074:	4618      	mov	r0, r3
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	20004744 	.word	0x20004744

08011080 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d04c      	beq.n	8011128 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f003 0303 	and.w	r3, r3, #3
 8011094:	2b00      	cmp	r3, #0
 8011096:	d007      	beq.n	80110a8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011098:	4b25      	ldr	r3, [pc, #148]	; (8011130 <mem_free+0xb0>)
 801109a:	f240 2273 	movw	r2, #627	; 0x273
 801109e:	4925      	ldr	r1, [pc, #148]	; (8011134 <mem_free+0xb4>)
 80110a0:	4825      	ldr	r0, [pc, #148]	; (8011138 <mem_free+0xb8>)
 80110a2:	f00a fdff 	bl	801bca4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80110a6:	e040      	b.n	801112a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	3b08      	subs	r3, #8
 80110ac:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80110ae:	4b23      	ldr	r3, [pc, #140]	; (801113c <mem_free+0xbc>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68fa      	ldr	r2, [r7, #12]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d306      	bcc.n	80110c6 <mem_free+0x46>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f103 020c 	add.w	r2, r3, #12
 80110be:	4b20      	ldr	r3, [pc, #128]	; (8011140 <mem_free+0xc0>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d907      	bls.n	80110d6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80110c6:	4b1a      	ldr	r3, [pc, #104]	; (8011130 <mem_free+0xb0>)
 80110c8:	f240 227f 	movw	r2, #639	; 0x27f
 80110cc:	491d      	ldr	r1, [pc, #116]	; (8011144 <mem_free+0xc4>)
 80110ce:	481a      	ldr	r0, [pc, #104]	; (8011138 <mem_free+0xb8>)
 80110d0:	f00a fde8 	bl	801bca4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80110d4:	e029      	b.n	801112a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	791b      	ldrb	r3, [r3, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d107      	bne.n	80110ee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80110de:	4b14      	ldr	r3, [pc, #80]	; (8011130 <mem_free+0xb0>)
 80110e0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80110e4:	4918      	ldr	r1, [pc, #96]	; (8011148 <mem_free+0xc8>)
 80110e6:	4814      	ldr	r0, [pc, #80]	; (8011138 <mem_free+0xb8>)
 80110e8:	f00a fddc 	bl	801bca4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80110ec:	e01d      	b.n	801112a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80110ee:	68f8      	ldr	r0, [r7, #12]
 80110f0:	f7ff ff8a 	bl	8011008 <mem_link_valid>
 80110f4:	4603      	mov	r3, r0
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d107      	bne.n	801110a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80110fa:	4b0d      	ldr	r3, [pc, #52]	; (8011130 <mem_free+0xb0>)
 80110fc:	f240 2295 	movw	r2, #661	; 0x295
 8011100:	4912      	ldr	r1, [pc, #72]	; (801114c <mem_free+0xcc>)
 8011102:	480d      	ldr	r0, [pc, #52]	; (8011138 <mem_free+0xb8>)
 8011104:	f00a fdce 	bl	801bca4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011108:	e00f      	b.n	801112a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2200      	movs	r2, #0
 801110e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011110:	4b0f      	ldr	r3, [pc, #60]	; (8011150 <mem_free+0xd0>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	68fa      	ldr	r2, [r7, #12]
 8011116:	429a      	cmp	r2, r3
 8011118:	d202      	bcs.n	8011120 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801111a:	4a0d      	ldr	r2, [pc, #52]	; (8011150 <mem_free+0xd0>)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f7ff fe97 	bl	8010e54 <plug_holes>
 8011126:	e000      	b.n	801112a <mem_free+0xaa>
    return;
 8011128:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	0801d268 	.word	0x0801d268
 8011134:	0801d33c 	.word	0x0801d33c
 8011138:	0801d2b0 	.word	0x0801d2b0
 801113c:	20004740 	.word	0x20004740
 8011140:	20004744 	.word	0x20004744
 8011144:	0801d360 	.word	0x0801d360
 8011148:	0801d37c 	.word	0x0801d37c
 801114c:	0801d3a4 	.word	0x0801d3a4
 8011150:	20004748 	.word	0x20004748

08011154 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b088      	sub	sp, #32
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	460b      	mov	r3, r1
 801115e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011160:	887b      	ldrh	r3, [r7, #2]
 8011162:	3303      	adds	r3, #3
 8011164:	b29b      	uxth	r3, r3
 8011166:	f023 0303 	bic.w	r3, r3, #3
 801116a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801116c:	8bfb      	ldrh	r3, [r7, #30]
 801116e:	2b0b      	cmp	r3, #11
 8011170:	d801      	bhi.n	8011176 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011172:	230c      	movs	r3, #12
 8011174:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011176:	8bfb      	ldrh	r3, [r7, #30]
 8011178:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801117c:	d803      	bhi.n	8011186 <mem_trim+0x32>
 801117e:	8bfa      	ldrh	r2, [r7, #30]
 8011180:	887b      	ldrh	r3, [r7, #2]
 8011182:	429a      	cmp	r2, r3
 8011184:	d201      	bcs.n	801118a <mem_trim+0x36>
    return NULL;
 8011186:	2300      	movs	r3, #0
 8011188:	e0cc      	b.n	8011324 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801118a:	4b68      	ldr	r3, [pc, #416]	; (801132c <mem_trim+0x1d8>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	429a      	cmp	r2, r3
 8011192:	d304      	bcc.n	801119e <mem_trim+0x4a>
 8011194:	4b66      	ldr	r3, [pc, #408]	; (8011330 <mem_trim+0x1dc>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	429a      	cmp	r2, r3
 801119c:	d306      	bcc.n	80111ac <mem_trim+0x58>
 801119e:	4b65      	ldr	r3, [pc, #404]	; (8011334 <mem_trim+0x1e0>)
 80111a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80111a4:	4964      	ldr	r1, [pc, #400]	; (8011338 <mem_trim+0x1e4>)
 80111a6:	4865      	ldr	r0, [pc, #404]	; (801133c <mem_trim+0x1e8>)
 80111a8:	f00a fd7c 	bl	801bca4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80111ac:	4b5f      	ldr	r3, [pc, #380]	; (801132c <mem_trim+0x1d8>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d304      	bcc.n	80111c0 <mem_trim+0x6c>
 80111b6:	4b5e      	ldr	r3, [pc, #376]	; (8011330 <mem_trim+0x1dc>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d301      	bcc.n	80111c4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	e0af      	b.n	8011324 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	3b08      	subs	r3, #8
 80111c8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80111ca:	69b8      	ldr	r0, [r7, #24]
 80111cc:	f7ff fe30 	bl	8010e30 <mem_to_ptr>
 80111d0:	4603      	mov	r3, r0
 80111d2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	881a      	ldrh	r2, [r3, #0]
 80111d8:	8afb      	ldrh	r3, [r7, #22]
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	b29b      	uxth	r3, r3
 80111de:	3b08      	subs	r3, #8
 80111e0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80111e2:	8bfa      	ldrh	r2, [r7, #30]
 80111e4:	8abb      	ldrh	r3, [r7, #20]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d906      	bls.n	80111f8 <mem_trim+0xa4>
 80111ea:	4b52      	ldr	r3, [pc, #328]	; (8011334 <mem_trim+0x1e0>)
 80111ec:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80111f0:	4953      	ldr	r1, [pc, #332]	; (8011340 <mem_trim+0x1ec>)
 80111f2:	4852      	ldr	r0, [pc, #328]	; (801133c <mem_trim+0x1e8>)
 80111f4:	f00a fd56 	bl	801bca4 <iprintf>
  if (newsize > size) {
 80111f8:	8bfa      	ldrh	r2, [r7, #30]
 80111fa:	8abb      	ldrh	r3, [r7, #20]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d901      	bls.n	8011204 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8011200:	2300      	movs	r3, #0
 8011202:	e08f      	b.n	8011324 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8011204:	8bfa      	ldrh	r2, [r7, #30]
 8011206:	8abb      	ldrh	r3, [r7, #20]
 8011208:	429a      	cmp	r2, r3
 801120a:	d101      	bne.n	8011210 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	e089      	b.n	8011324 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff fdf9 	bl	8010e0c <ptr_to_mem>
 801121a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	791b      	ldrb	r3, [r3, #4]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d13f      	bne.n	80112a4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	881b      	ldrh	r3, [r3, #0]
 8011228:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801122c:	d106      	bne.n	801123c <mem_trim+0xe8>
 801122e:	4b41      	ldr	r3, [pc, #260]	; (8011334 <mem_trim+0x1e0>)
 8011230:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011234:	4943      	ldr	r1, [pc, #268]	; (8011344 <mem_trim+0x1f0>)
 8011236:	4841      	ldr	r0, [pc, #260]	; (801133c <mem_trim+0x1e8>)
 8011238:	f00a fd34 	bl	801bca4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801123c:	693b      	ldr	r3, [r7, #16]
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011242:	8afa      	ldrh	r2, [r7, #22]
 8011244:	8bfb      	ldrh	r3, [r7, #30]
 8011246:	4413      	add	r3, r2
 8011248:	b29b      	uxth	r3, r3
 801124a:	3308      	adds	r3, #8
 801124c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801124e:	4b3e      	ldr	r3, [pc, #248]	; (8011348 <mem_trim+0x1f4>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	693a      	ldr	r2, [r7, #16]
 8011254:	429a      	cmp	r2, r3
 8011256:	d106      	bne.n	8011266 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8011258:	89fb      	ldrh	r3, [r7, #14]
 801125a:	4618      	mov	r0, r3
 801125c:	f7ff fdd6 	bl	8010e0c <ptr_to_mem>
 8011260:	4603      	mov	r3, r0
 8011262:	4a39      	ldr	r2, [pc, #228]	; (8011348 <mem_trim+0x1f4>)
 8011264:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011266:	89fb      	ldrh	r3, [r7, #14]
 8011268:	4618      	mov	r0, r3
 801126a:	f7ff fdcf 	bl	8010e0c <ptr_to_mem>
 801126e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	2200      	movs	r2, #0
 8011274:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	89ba      	ldrh	r2, [r7, #12]
 801127a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	8afa      	ldrh	r2, [r7, #22]
 8011280:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	89fa      	ldrh	r2, [r7, #14]
 8011286:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8011290:	d047      	beq.n	8011322 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff fdb8 	bl	8010e0c <ptr_to_mem>
 801129c:	4602      	mov	r2, r0
 801129e:	89fb      	ldrh	r3, [r7, #14]
 80112a0:	8053      	strh	r3, [r2, #2]
 80112a2:	e03e      	b.n	8011322 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80112a4:	8bfb      	ldrh	r3, [r7, #30]
 80112a6:	f103 0214 	add.w	r2, r3, #20
 80112aa:	8abb      	ldrh	r3, [r7, #20]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d838      	bhi.n	8011322 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80112b0:	8afa      	ldrh	r2, [r7, #22]
 80112b2:	8bfb      	ldrh	r3, [r7, #30]
 80112b4:	4413      	add	r3, r2
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	3308      	adds	r3, #8
 80112ba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	881b      	ldrh	r3, [r3, #0]
 80112c0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80112c4:	d106      	bne.n	80112d4 <mem_trim+0x180>
 80112c6:	4b1b      	ldr	r3, [pc, #108]	; (8011334 <mem_trim+0x1e0>)
 80112c8:	f240 3216 	movw	r2, #790	; 0x316
 80112cc:	491d      	ldr	r1, [pc, #116]	; (8011344 <mem_trim+0x1f0>)
 80112ce:	481b      	ldr	r0, [pc, #108]	; (801133c <mem_trim+0x1e8>)
 80112d0:	f00a fce8 	bl	801bca4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80112d4:	89fb      	ldrh	r3, [r7, #14]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7ff fd98 	bl	8010e0c <ptr_to_mem>
 80112dc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80112de:	4b1a      	ldr	r3, [pc, #104]	; (8011348 <mem_trim+0x1f4>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	693a      	ldr	r2, [r7, #16]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d202      	bcs.n	80112ee <mem_trim+0x19a>
      lfree = mem2;
 80112e8:	4a17      	ldr	r2, [pc, #92]	; (8011348 <mem_trim+0x1f4>)
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	2200      	movs	r2, #0
 80112f2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80112f4:	69bb      	ldr	r3, [r7, #24]
 80112f6:	881a      	ldrh	r2, [r3, #0]
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	8afa      	ldrh	r2, [r7, #22]
 8011300:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	89fa      	ldrh	r2, [r7, #14]
 8011306:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8011310:	d007      	beq.n	8011322 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	881b      	ldrh	r3, [r3, #0]
 8011316:	4618      	mov	r0, r3
 8011318:	f7ff fd78 	bl	8010e0c <ptr_to_mem>
 801131c:	4602      	mov	r2, r0
 801131e:	89fb      	ldrh	r3, [r7, #14]
 8011320:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8011322:	687b      	ldr	r3, [r7, #4]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3720      	adds	r7, #32
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	20004740 	.word	0x20004740
 8011330:	20004744 	.word	0x20004744
 8011334:	0801d268 	.word	0x0801d268
 8011338:	0801d3d8 	.word	0x0801d3d8
 801133c:	0801d2b0 	.word	0x0801d2b0
 8011340:	0801d3f0 	.word	0x0801d3f0
 8011344:	0801d410 	.word	0x0801d410
 8011348:	20004748 	.word	0x20004748

0801134c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b088      	sub	sp, #32
 8011350:	af00      	add	r7, sp, #0
 8011352:	4603      	mov	r3, r0
 8011354:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011356:	88fb      	ldrh	r3, [r7, #6]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d101      	bne.n	8011360 <mem_malloc+0x14>
    return NULL;
 801135c:	2300      	movs	r3, #0
 801135e:	e0d9      	b.n	8011514 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011360:	88fb      	ldrh	r3, [r7, #6]
 8011362:	3303      	adds	r3, #3
 8011364:	b29b      	uxth	r3, r3
 8011366:	f023 0303 	bic.w	r3, r3, #3
 801136a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801136c:	8bbb      	ldrh	r3, [r7, #28]
 801136e:	2b0b      	cmp	r3, #11
 8011370:	d801      	bhi.n	8011376 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011372:	230c      	movs	r3, #12
 8011374:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011376:	8bbb      	ldrh	r3, [r7, #28]
 8011378:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801137c:	d803      	bhi.n	8011386 <mem_malloc+0x3a>
 801137e:	8bba      	ldrh	r2, [r7, #28]
 8011380:	88fb      	ldrh	r3, [r7, #6]
 8011382:	429a      	cmp	r2, r3
 8011384:	d201      	bcs.n	801138a <mem_malloc+0x3e>
    return NULL;
 8011386:	2300      	movs	r3, #0
 8011388:	e0c4      	b.n	8011514 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801138a:	4b64      	ldr	r3, [pc, #400]	; (801151c <mem_malloc+0x1d0>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff fd4e 	bl	8010e30 <mem_to_ptr>
 8011394:	4603      	mov	r3, r0
 8011396:	83fb      	strh	r3, [r7, #30]
 8011398:	e0b4      	b.n	8011504 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801139a:	8bfb      	ldrh	r3, [r7, #30]
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fd35 	bl	8010e0c <ptr_to_mem>
 80113a2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	791b      	ldrb	r3, [r3, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f040 80a4 	bne.w	80114f6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	461a      	mov	r2, r3
 80113b4:	8bfb      	ldrh	r3, [r7, #30]
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	f1a3 0208 	sub.w	r2, r3, #8
 80113bc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80113be:	429a      	cmp	r2, r3
 80113c0:	f0c0 8099 	bcc.w	80114f6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	881b      	ldrh	r3, [r3, #0]
 80113c8:	461a      	mov	r2, r3
 80113ca:	8bfb      	ldrh	r3, [r7, #30]
 80113cc:	1ad3      	subs	r3, r2, r3
 80113ce:	f1a3 0208 	sub.w	r2, r3, #8
 80113d2:	8bbb      	ldrh	r3, [r7, #28]
 80113d4:	3314      	adds	r3, #20
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d333      	bcc.n	8011442 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80113da:	8bfa      	ldrh	r2, [r7, #30]
 80113dc:	8bbb      	ldrh	r3, [r7, #28]
 80113de:	4413      	add	r3, r2
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	3308      	adds	r3, #8
 80113e4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80113e6:	8a7b      	ldrh	r3, [r7, #18]
 80113e8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80113ec:	d106      	bne.n	80113fc <mem_malloc+0xb0>
 80113ee:	4b4c      	ldr	r3, [pc, #304]	; (8011520 <mem_malloc+0x1d4>)
 80113f0:	f240 3287 	movw	r2, #903	; 0x387
 80113f4:	494b      	ldr	r1, [pc, #300]	; (8011524 <mem_malloc+0x1d8>)
 80113f6:	484c      	ldr	r0, [pc, #304]	; (8011528 <mem_malloc+0x1dc>)
 80113f8:	f00a fc54 	bl	801bca4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80113fc:	8a7b      	ldrh	r3, [r7, #18]
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff fd04 	bl	8010e0c <ptr_to_mem>
 8011404:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2200      	movs	r2, #0
 801140a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	881a      	ldrh	r2, [r3, #0]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	8bfa      	ldrh	r2, [r7, #30]
 8011418:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	8a7a      	ldrh	r2, [r7, #18]
 801141e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	2201      	movs	r2, #1
 8011424:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	881b      	ldrh	r3, [r3, #0]
 801142a:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801142e:	d00b      	beq.n	8011448 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff fce9 	bl	8010e0c <ptr_to_mem>
 801143a:	4602      	mov	r2, r0
 801143c:	8a7b      	ldrh	r3, [r7, #18]
 801143e:	8053      	strh	r3, [r2, #2]
 8011440:	e002      	b.n	8011448 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	2201      	movs	r2, #1
 8011446:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011448:	4b34      	ldr	r3, [pc, #208]	; (801151c <mem_malloc+0x1d0>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	697a      	ldr	r2, [r7, #20]
 801144e:	429a      	cmp	r2, r3
 8011450:	d127      	bne.n	80114a2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8011452:	4b32      	ldr	r3, [pc, #200]	; (801151c <mem_malloc+0x1d0>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011458:	e005      	b.n	8011466 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	4618      	mov	r0, r3
 8011460:	f7ff fcd4 	bl	8010e0c <ptr_to_mem>
 8011464:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	791b      	ldrb	r3, [r3, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d004      	beq.n	8011478 <mem_malloc+0x12c>
 801146e:	4b2f      	ldr	r3, [pc, #188]	; (801152c <mem_malloc+0x1e0>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	69ba      	ldr	r2, [r7, #24]
 8011474:	429a      	cmp	r2, r3
 8011476:	d1f0      	bne.n	801145a <mem_malloc+0x10e>
          }
          lfree = cur;
 8011478:	4a28      	ldr	r2, [pc, #160]	; (801151c <mem_malloc+0x1d0>)
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801147e:	4b27      	ldr	r3, [pc, #156]	; (801151c <mem_malloc+0x1d0>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	4b2a      	ldr	r3, [pc, #168]	; (801152c <mem_malloc+0x1e0>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	429a      	cmp	r2, r3
 8011488:	d00b      	beq.n	80114a2 <mem_malloc+0x156>
 801148a:	4b24      	ldr	r3, [pc, #144]	; (801151c <mem_malloc+0x1d0>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	791b      	ldrb	r3, [r3, #4]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d006      	beq.n	80114a2 <mem_malloc+0x156>
 8011494:	4b22      	ldr	r3, [pc, #136]	; (8011520 <mem_malloc+0x1d4>)
 8011496:	f240 32b5 	movw	r2, #949	; 0x3b5
 801149a:	4925      	ldr	r1, [pc, #148]	; (8011530 <mem_malloc+0x1e4>)
 801149c:	4822      	ldr	r0, [pc, #136]	; (8011528 <mem_malloc+0x1dc>)
 801149e:	f00a fc01 	bl	801bca4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80114a2:	8bba      	ldrh	r2, [r7, #28]
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	4413      	add	r3, r2
 80114a8:	3308      	adds	r3, #8
 80114aa:	4a20      	ldr	r2, [pc, #128]	; (801152c <mem_malloc+0x1e0>)
 80114ac:	6812      	ldr	r2, [r2, #0]
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d906      	bls.n	80114c0 <mem_malloc+0x174>
 80114b2:	4b1b      	ldr	r3, [pc, #108]	; (8011520 <mem_malloc+0x1d4>)
 80114b4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80114b8:	491e      	ldr	r1, [pc, #120]	; (8011534 <mem_malloc+0x1e8>)
 80114ba:	481b      	ldr	r0, [pc, #108]	; (8011528 <mem_malloc+0x1dc>)
 80114bc:	f00a fbf2 	bl	801bca4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	f003 0303 	and.w	r3, r3, #3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d006      	beq.n	80114d8 <mem_malloc+0x18c>
 80114ca:	4b15      	ldr	r3, [pc, #84]	; (8011520 <mem_malloc+0x1d4>)
 80114cc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80114d0:	4919      	ldr	r1, [pc, #100]	; (8011538 <mem_malloc+0x1ec>)
 80114d2:	4815      	ldr	r0, [pc, #84]	; (8011528 <mem_malloc+0x1dc>)
 80114d4:	f00a fbe6 	bl	801bca4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	f003 0303 	and.w	r3, r3, #3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d006      	beq.n	80114f0 <mem_malloc+0x1a4>
 80114e2:	4b0f      	ldr	r3, [pc, #60]	; (8011520 <mem_malloc+0x1d4>)
 80114e4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80114e8:	4914      	ldr	r1, [pc, #80]	; (801153c <mem_malloc+0x1f0>)
 80114ea:	480f      	ldr	r0, [pc, #60]	; (8011528 <mem_malloc+0x1dc>)
 80114ec:	f00a fbda 	bl	801bca4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	3308      	adds	r3, #8
 80114f4:	e00e      	b.n	8011514 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80114f6:	8bfb      	ldrh	r3, [r7, #30]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7ff fc87 	bl	8010e0c <ptr_to_mem>
 80114fe:	4603      	mov	r3, r0
 8011500:	881b      	ldrh	r3, [r3, #0]
 8011502:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011504:	8bfa      	ldrh	r2, [r7, #30]
 8011506:	8bbb      	ldrh	r3, [r7, #28]
 8011508:	f5c3 5360 	rsb	r3, r3, #14336	; 0x3800
 801150c:	429a      	cmp	r2, r3
 801150e:	f4ff af44 	bcc.w	801139a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011512:	2300      	movs	r3, #0
}
 8011514:	4618      	mov	r0, r3
 8011516:	3720      	adds	r7, #32
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	20004748 	.word	0x20004748
 8011520:	0801d268 	.word	0x0801d268
 8011524:	0801d410 	.word	0x0801d410
 8011528:	0801d2b0 	.word	0x0801d2b0
 801152c:	20004744 	.word	0x20004744
 8011530:	0801d424 	.word	0x0801d424
 8011534:	0801d440 	.word	0x0801d440
 8011538:	0801d470 	.word	0x0801d470
 801153c:	0801d4a0 	.word	0x0801d4a0

08011540 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011540:	b480      	push	{r7}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	3303      	adds	r3, #3
 8011556:	f023 0303 	bic.w	r3, r3, #3
 801155a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801155c:	2300      	movs	r3, #0
 801155e:	60fb      	str	r3, [r7, #12]
 8011560:	e011      	b.n	8011586 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	881b      	ldrh	r3, [r3, #0]
 8011578:	461a      	mov	r2, r3
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	4413      	add	r3, r2
 801157e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	3301      	adds	r3, #1
 8011584:	60fb      	str	r3, [r7, #12]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	885b      	ldrh	r3, [r3, #2]
 801158a:	461a      	mov	r2, r3
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	4293      	cmp	r3, r2
 8011590:	dbe7      	blt.n	8011562 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011592:	bf00      	nop
 8011594:	bf00      	nop
 8011596:	3714      	adds	r7, #20
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80115a6:	2300      	movs	r3, #0
 80115a8:	80fb      	strh	r3, [r7, #6]
 80115aa:	e009      	b.n	80115c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80115ac:	88fb      	ldrh	r3, [r7, #6]
 80115ae:	4a08      	ldr	r2, [pc, #32]	; (80115d0 <memp_init+0x30>)
 80115b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff ffc3 	bl	8011540 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80115ba:	88fb      	ldrh	r3, [r7, #6]
 80115bc:	3301      	adds	r3, #1
 80115be:	80fb      	strh	r3, [r7, #6]
 80115c0:	88fb      	ldrh	r3, [r7, #6]
 80115c2:	2b08      	cmp	r3, #8
 80115c4:	d9f2      	bls.n	80115ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80115c6:	bf00      	nop
 80115c8:	bf00      	nop
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	0801fe24 	.word	0x0801fe24

080115d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	689b      	ldr	r3, [r3, #8]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d012      	beq.n	8011610 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	689b      	ldr	r3, [r3, #8]
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	6812      	ldr	r2, [r2, #0]
 80115f2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f003 0303 	and.w	r3, r3, #3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d006      	beq.n	801160c <do_memp_malloc_pool+0x38>
 80115fe:	4b07      	ldr	r3, [pc, #28]	; (801161c <do_memp_malloc_pool+0x48>)
 8011600:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011604:	4906      	ldr	r1, [pc, #24]	; (8011620 <do_memp_malloc_pool+0x4c>)
 8011606:	4807      	ldr	r0, [pc, #28]	; (8011624 <do_memp_malloc_pool+0x50>)
 8011608:	f00a fb4c 	bl	801bca4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	e000      	b.n	8011612 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	0801d4c4 	.word	0x0801d4c4
 8011620:	0801d4f4 	.word	0x0801d4f4
 8011624:	0801d518 	.word	0x0801d518

08011628 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d106      	bne.n	8011644 <memp_malloc_pool+0x1c>
 8011636:	4b0a      	ldr	r3, [pc, #40]	; (8011660 <memp_malloc_pool+0x38>)
 8011638:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801163c:	4909      	ldr	r1, [pc, #36]	; (8011664 <memp_malloc_pool+0x3c>)
 801163e:	480a      	ldr	r0, [pc, #40]	; (8011668 <memp_malloc_pool+0x40>)
 8011640:	f00a fb30 	bl	801bca4 <iprintf>
  if (desc == NULL) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d101      	bne.n	801164e <memp_malloc_pool+0x26>
    return NULL;
 801164a:	2300      	movs	r3, #0
 801164c:	e003      	b.n	8011656 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7ff ffc0 	bl	80115d4 <do_memp_malloc_pool>
 8011654:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011656:	4618      	mov	r0, r3
 8011658:	3708      	adds	r7, #8
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	0801d4c4 	.word	0x0801d4c4
 8011664:	0801d540 	.word	0x0801d540
 8011668:	0801d518 	.word	0x0801d518

0801166c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	4603      	mov	r3, r0
 8011674:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	2b08      	cmp	r3, #8
 801167a:	d908      	bls.n	801168e <memp_malloc+0x22>
 801167c:	4b0a      	ldr	r3, [pc, #40]	; (80116a8 <memp_malloc+0x3c>)
 801167e:	f240 1257 	movw	r2, #343	; 0x157
 8011682:	490a      	ldr	r1, [pc, #40]	; (80116ac <memp_malloc+0x40>)
 8011684:	480a      	ldr	r0, [pc, #40]	; (80116b0 <memp_malloc+0x44>)
 8011686:	f00a fb0d 	bl	801bca4 <iprintf>
 801168a:	2300      	movs	r3, #0
 801168c:	e008      	b.n	80116a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801168e:	79fb      	ldrb	r3, [r7, #7]
 8011690:	4a08      	ldr	r2, [pc, #32]	; (80116b4 <memp_malloc+0x48>)
 8011692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011696:	4618      	mov	r0, r3
 8011698:	f7ff ff9c 	bl	80115d4 <do_memp_malloc_pool>
 801169c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801169e:	68fb      	ldr	r3, [r7, #12]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3710      	adds	r7, #16
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	0801d4c4 	.word	0x0801d4c4
 80116ac:	0801d554 	.word	0x0801d554
 80116b0:	0801d518 	.word	0x0801d518
 80116b4:	0801fe24 	.word	0x0801fe24

080116b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	f003 0303 	and.w	r3, r3, #3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d006      	beq.n	80116da <do_memp_free_pool+0x22>
 80116cc:	4b0a      	ldr	r3, [pc, #40]	; (80116f8 <do_memp_free_pool+0x40>)
 80116ce:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80116d2:	490a      	ldr	r1, [pc, #40]	; (80116fc <do_memp_free_pool+0x44>)
 80116d4:	480a      	ldr	r0, [pc, #40]	; (8011700 <do_memp_free_pool+0x48>)
 80116d6:	f00a fae5 	bl	801bca4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	689b      	ldr	r3, [r3, #8]
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80116f0:	bf00      	nop
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	0801d4c4 	.word	0x0801d4c4
 80116fc:	0801d574 	.word	0x0801d574
 8011700:	0801d518 	.word	0x0801d518

08011704 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d106      	bne.n	8011722 <memp_free_pool+0x1e>
 8011714:	4b0a      	ldr	r3, [pc, #40]	; (8011740 <memp_free_pool+0x3c>)
 8011716:	f240 1295 	movw	r2, #405	; 0x195
 801171a:	490a      	ldr	r1, [pc, #40]	; (8011744 <memp_free_pool+0x40>)
 801171c:	480a      	ldr	r0, [pc, #40]	; (8011748 <memp_free_pool+0x44>)
 801171e:	f00a fac1 	bl	801bca4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d007      	beq.n	8011738 <memp_free_pool+0x34>
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d004      	beq.n	8011738 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801172e:	6839      	ldr	r1, [r7, #0]
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f7ff ffc1 	bl	80116b8 <do_memp_free_pool>
 8011736:	e000      	b.n	801173a <memp_free_pool+0x36>
    return;
 8011738:	bf00      	nop
}
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	0801d4c4 	.word	0x0801d4c4
 8011744:	0801d540 	.word	0x0801d540
 8011748:	0801d518 	.word	0x0801d518

0801174c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	4603      	mov	r3, r0
 8011754:	6039      	str	r1, [r7, #0]
 8011756:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011758:	79fb      	ldrb	r3, [r7, #7]
 801175a:	2b08      	cmp	r3, #8
 801175c:	d907      	bls.n	801176e <memp_free+0x22>
 801175e:	4b0c      	ldr	r3, [pc, #48]	; (8011790 <memp_free+0x44>)
 8011760:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011764:	490b      	ldr	r1, [pc, #44]	; (8011794 <memp_free+0x48>)
 8011766:	480c      	ldr	r0, [pc, #48]	; (8011798 <memp_free+0x4c>)
 8011768:	f00a fa9c 	bl	801bca4 <iprintf>
 801176c:	e00c      	b.n	8011788 <memp_free+0x3c>

  if (mem == NULL) {
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d008      	beq.n	8011786 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011774:	79fb      	ldrb	r3, [r7, #7]
 8011776:	4a09      	ldr	r2, [pc, #36]	; (801179c <memp_free+0x50>)
 8011778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	4618      	mov	r0, r3
 8011780:	f7ff ff9a 	bl	80116b8 <do_memp_free_pool>
 8011784:	e000      	b.n	8011788 <memp_free+0x3c>
    return;
 8011786:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011788:	3708      	adds	r7, #8
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	0801d4c4 	.word	0x0801d4c4
 8011794:	0801d594 	.word	0x0801d594
 8011798:	0801d518 	.word	0x0801d518
 801179c:	0801fe24 	.word	0x0801fe24

080117a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80117a0:	b480      	push	{r7}
 80117a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80117a4:	bf00      	nop
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
	...

080117b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b086      	sub	sp, #24
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
 80117bc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d108      	bne.n	80117d6 <netif_add+0x26>
 80117c4:	4b57      	ldr	r3, [pc, #348]	; (8011924 <netif_add+0x174>)
 80117c6:	f240 1227 	movw	r2, #295	; 0x127
 80117ca:	4957      	ldr	r1, [pc, #348]	; (8011928 <netif_add+0x178>)
 80117cc:	4857      	ldr	r0, [pc, #348]	; (801192c <netif_add+0x17c>)
 80117ce:	f00a fa69 	bl	801bca4 <iprintf>
 80117d2:	2300      	movs	r3, #0
 80117d4:	e0a2      	b.n	801191c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80117d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d108      	bne.n	80117ee <netif_add+0x3e>
 80117dc:	4b51      	ldr	r3, [pc, #324]	; (8011924 <netif_add+0x174>)
 80117de:	f44f 7294 	mov.w	r2, #296	; 0x128
 80117e2:	4953      	ldr	r1, [pc, #332]	; (8011930 <netif_add+0x180>)
 80117e4:	4851      	ldr	r0, [pc, #324]	; (801192c <netif_add+0x17c>)
 80117e6:	f00a fa5d 	bl	801bca4 <iprintf>
 80117ea:	2300      	movs	r3, #0
 80117ec:	e096      	b.n	801191c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d101      	bne.n	80117f8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80117f4:	4b4f      	ldr	r3, [pc, #316]	; (8011934 <netif_add+0x184>)
 80117f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d101      	bne.n	8011802 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80117fe:	4b4d      	ldr	r3, [pc, #308]	; (8011934 <netif_add+0x184>)
 8011800:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d101      	bne.n	801180c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011808:	4b4a      	ldr	r3, [pc, #296]	; (8011934 <netif_add+0x184>)
 801180a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2200      	movs	r2, #0
 8011810:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	2200      	movs	r2, #0
 8011816:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2200      	movs	r2, #0
 801181c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	4a45      	ldr	r2, [pc, #276]	; (8011938 <netif_add+0x188>)
 8011822:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2200      	movs	r2, #0
 8011828:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2200      	movs	r2, #0
 801182e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2200      	movs	r2, #0
 8011836:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	6a3a      	ldr	r2, [r7, #32]
 801183c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801183e:	4b3f      	ldr	r3, [pc, #252]	; (801193c <netif_add+0x18c>)
 8011840:	781a      	ldrb	r2, [r3, #0]
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801184c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	68b9      	ldr	r1, [r7, #8]
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	f000 f913 	bl	8011a80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	4798      	blx	r3
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d001      	beq.n	801186a <netif_add+0xba>
    return NULL;
 8011866:	2300      	movs	r3, #0
 8011868:	e058      	b.n	801191c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011870:	2bff      	cmp	r3, #255	; 0xff
 8011872:	d103      	bne.n	801187c <netif_add+0xcc>
        netif->num = 0;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2200      	movs	r2, #0
 8011878:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801187c:	2300      	movs	r3, #0
 801187e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011880:	4b2f      	ldr	r3, [pc, #188]	; (8011940 <netif_add+0x190>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	617b      	str	r3, [r7, #20]
 8011886:	e02b      	b.n	80118e0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011888:	697a      	ldr	r2, [r7, #20]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	429a      	cmp	r2, r3
 801188e:	d106      	bne.n	801189e <netif_add+0xee>
 8011890:	4b24      	ldr	r3, [pc, #144]	; (8011924 <netif_add+0x174>)
 8011892:	f240 128b 	movw	r2, #395	; 0x18b
 8011896:	492b      	ldr	r1, [pc, #172]	; (8011944 <netif_add+0x194>)
 8011898:	4824      	ldr	r0, [pc, #144]	; (801192c <netif_add+0x17c>)
 801189a:	f00a fa03 	bl	801bca4 <iprintf>
        num_netifs++;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	3301      	adds	r3, #1
 80118a2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	2bff      	cmp	r3, #255	; 0xff
 80118a8:	dd06      	ble.n	80118b8 <netif_add+0x108>
 80118aa:	4b1e      	ldr	r3, [pc, #120]	; (8011924 <netif_add+0x174>)
 80118ac:	f240 128d 	movw	r2, #397	; 0x18d
 80118b0:	4925      	ldr	r1, [pc, #148]	; (8011948 <netif_add+0x198>)
 80118b2:	481e      	ldr	r0, [pc, #120]	; (801192c <netif_add+0x17c>)
 80118b4:	f00a f9f6 	bl	801bca4 <iprintf>
        if (netif2->num == netif->num) {
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d108      	bne.n	80118da <netif_add+0x12a>
          netif->num++;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118ce:	3301      	adds	r3, #1
 80118d0:	b2da      	uxtb	r2, r3
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80118d8:	e005      	b.n	80118e6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	617b      	str	r3, [r7, #20]
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d1d0      	bne.n	8011888 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d1be      	bne.n	801186a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118f2:	2bfe      	cmp	r3, #254	; 0xfe
 80118f4:	d103      	bne.n	80118fe <netif_add+0x14e>
    netif_num = 0;
 80118f6:	4b11      	ldr	r3, [pc, #68]	; (801193c <netif_add+0x18c>)
 80118f8:	2200      	movs	r2, #0
 80118fa:	701a      	strb	r2, [r3, #0]
 80118fc:	e006      	b.n	801190c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011904:	3301      	adds	r3, #1
 8011906:	b2da      	uxtb	r2, r3
 8011908:	4b0c      	ldr	r3, [pc, #48]	; (801193c <netif_add+0x18c>)
 801190a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801190c:	4b0c      	ldr	r3, [pc, #48]	; (8011940 <netif_add+0x190>)
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011914:	4a0a      	ldr	r2, [pc, #40]	; (8011940 <netif_add+0x190>)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801191a:	68fb      	ldr	r3, [r7, #12]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3718      	adds	r7, #24
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	0801d5b0 	.word	0x0801d5b0
 8011928:	0801d644 	.word	0x0801d644
 801192c:	0801d600 	.word	0x0801d600
 8011930:	0801d660 	.word	0x0801d660
 8011934:	0801fe88 	.word	0x0801fe88
 8011938:	08011d5b 	.word	0x08011d5b
 801193c:	2000b44c 	.word	0x2000b44c
 8011940:	2000b444 	.word	0x2000b444
 8011944:	0801d684 	.word	0x0801d684
 8011948:	0801d698 	.word	0x0801d698

0801194c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011956:	6839      	ldr	r1, [r7, #0]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f002 fdf7 	bl	801454c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801195e:	6839      	ldr	r1, [r7, #0]
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f007 fb33 	bl	8018fcc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011966:	bf00      	nop
 8011968:	3708      	adds	r7, #8
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
	...

08011970 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b086      	sub	sp, #24
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d106      	bne.n	8011990 <netif_do_set_ipaddr+0x20>
 8011982:	4b1d      	ldr	r3, [pc, #116]	; (80119f8 <netif_do_set_ipaddr+0x88>)
 8011984:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011988:	491c      	ldr	r1, [pc, #112]	; (80119fc <netif_do_set_ipaddr+0x8c>)
 801198a:	481d      	ldr	r0, [pc, #116]	; (8011a00 <netif_do_set_ipaddr+0x90>)
 801198c:	f00a f98a 	bl	801bca4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <netif_do_set_ipaddr+0x34>
 8011996:	4b18      	ldr	r3, [pc, #96]	; (80119f8 <netif_do_set_ipaddr+0x88>)
 8011998:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801199c:	4917      	ldr	r1, [pc, #92]	; (80119fc <netif_do_set_ipaddr+0x8c>)
 801199e:	4818      	ldr	r0, [pc, #96]	; (8011a00 <netif_do_set_ipaddr+0x90>)
 80119a0:	f00a f980 	bl	801bca4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	3304      	adds	r3, #4
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d01c      	beq.n	80119ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	3304      	adds	r3, #4
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80119c2:	f107 0314 	add.w	r3, r7, #20
 80119c6:	4619      	mov	r1, r3
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f7ff ffbf 	bl	801194c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d002      	beq.n	80119da <netif_do_set_ipaddr+0x6a>
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	e000      	b.n	80119dc <netif_do_set_ipaddr+0x6c>
 80119da:	2300      	movs	r3, #0
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80119e0:	2101      	movs	r1, #1
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f000 f8d2 	bl	8011b8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80119e8:	2301      	movs	r3, #1
 80119ea:	e000      	b.n	80119ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80119ec:	2300      	movs	r3, #0
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3718      	adds	r7, #24
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	0801d5b0 	.word	0x0801d5b0
 80119fc:	0801d6c8 	.word	0x0801d6c8
 8011a00:	0801d600 	.word	0x0801d600

08011a04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b085      	sub	sp, #20
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	3308      	adds	r3, #8
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d00a      	beq.n	8011a34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <netif_do_set_netmask+0x26>
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	e000      	b.n	8011a2c <netif_do_set_netmask+0x28>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	68fa      	ldr	r2, [r7, #12]
 8011a2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011a30:	2301      	movs	r3, #1
 8011a32:	e000      	b.n	8011a36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011a34:	2300      	movs	r3, #0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr

08011a42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011a42:	b480      	push	{r7}
 8011a44:	b085      	sub	sp, #20
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	60f8      	str	r0, [r7, #12]
 8011a4a:	60b9      	str	r1, [r7, #8]
 8011a4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	330c      	adds	r3, #12
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d00a      	beq.n	8011a72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d002      	beq.n	8011a68 <netif_do_set_gw+0x26>
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	e000      	b.n	8011a6a <netif_do_set_gw+0x28>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e000      	b.n	8011a74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3714      	adds	r7, #20
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr

08011a80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b088      	sub	sp, #32
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
 8011a8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011a92:	2300      	movs	r3, #0
 8011a94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d101      	bne.n	8011aa0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011a9c:	4b1c      	ldr	r3, [pc, #112]	; (8011b10 <netif_set_addr+0x90>)
 8011a9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d101      	bne.n	8011aaa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011aa6:	4b1a      	ldr	r3, [pc, #104]	; (8011b10 <netif_set_addr+0x90>)
 8011aa8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011ab0:	4b17      	ldr	r3, [pc, #92]	; (8011b10 <netif_set_addr+0x90>)
 8011ab2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d003      	beq.n	8011ac2 <netif_set_addr+0x42>
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d101      	bne.n	8011ac6 <netif_set_addr+0x46>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e000      	b.n	8011ac8 <netif_set_addr+0x48>
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d006      	beq.n	8011ade <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011ad0:	f107 0310 	add.w	r3, r7, #16
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	68b9      	ldr	r1, [r7, #8]
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f7ff ff49 	bl	8011970 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011ade:	69fa      	ldr	r2, [r7, #28]
 8011ae0:	6879      	ldr	r1, [r7, #4]
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f7ff ff8e 	bl	8011a04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011ae8:	69ba      	ldr	r2, [r7, #24]
 8011aea:	6839      	ldr	r1, [r7, #0]
 8011aec:	68f8      	ldr	r0, [r7, #12]
 8011aee:	f7ff ffa8 	bl	8011a42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d106      	bne.n	8011b06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011af8:	f107 0310 	add.w	r3, r7, #16
 8011afc:	461a      	mov	r2, r3
 8011afe:	68b9      	ldr	r1, [r7, #8]
 8011b00:	68f8      	ldr	r0, [r7, #12]
 8011b02:	f7ff ff35 	bl	8011970 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011b06:	bf00      	nop
 8011b08:	3720      	adds	r7, #32
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	0801fe88 	.word	0x0801fe88

08011b14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011b1c:	4a04      	ldr	r2, [pc, #16]	; (8011b30 <netif_set_default+0x1c>)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011b22:	bf00      	nop
 8011b24:	370c      	adds	r7, #12
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	2000b448 	.word	0x2000b448

08011b34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d107      	bne.n	8011b52 <netif_set_up+0x1e>
 8011b42:	4b0f      	ldr	r3, [pc, #60]	; (8011b80 <netif_set_up+0x4c>)
 8011b44:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011b48:	490e      	ldr	r1, [pc, #56]	; (8011b84 <netif_set_up+0x50>)
 8011b4a:	480f      	ldr	r0, [pc, #60]	; (8011b88 <netif_set_up+0x54>)
 8011b4c:	f00a f8aa 	bl	801bca4 <iprintf>
 8011b50:	e013      	b.n	8011b7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d10c      	bne.n	8011b7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b66:	f043 0301 	orr.w	r3, r3, #1
 8011b6a:	b2da      	uxtb	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011b72:	2103      	movs	r1, #3
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 f809 	bl	8011b8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	0801d5b0 	.word	0x0801d5b0
 8011b84:	0801d738 	.word	0x0801d738
 8011b88:	0801d600 	.word	0x0801d600

08011b8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	460b      	mov	r3, r1
 8011b96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d106      	bne.n	8011bac <netif_issue_reports+0x20>
 8011b9e:	4b18      	ldr	r3, [pc, #96]	; (8011c00 <netif_issue_reports+0x74>)
 8011ba0:	f240 326d 	movw	r2, #877	; 0x36d
 8011ba4:	4917      	ldr	r1, [pc, #92]	; (8011c04 <netif_issue_reports+0x78>)
 8011ba6:	4818      	ldr	r0, [pc, #96]	; (8011c08 <netif_issue_reports+0x7c>)
 8011ba8:	f00a f87c 	bl	801bca4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bb2:	f003 0304 	and.w	r3, r3, #4
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d01e      	beq.n	8011bf8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d017      	beq.n	8011bf8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011bc8:	78fb      	ldrb	r3, [r7, #3]
 8011bca:	f003 0301 	and.w	r3, r3, #1
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d013      	beq.n	8011bfa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	3304      	adds	r3, #4
 8011bd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00e      	beq.n	8011bfa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011be2:	f003 0308 	and.w	r3, r3, #8
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d007      	beq.n	8011bfa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	3304      	adds	r3, #4
 8011bee:	4619      	mov	r1, r3
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f008 f955 	bl	8019ea0 <etharp_request>
 8011bf6:	e000      	b.n	8011bfa <netif_issue_reports+0x6e>
    return;
 8011bf8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	0801d5b0 	.word	0x0801d5b0
 8011c04:	0801d754 	.word	0x0801d754
 8011c08:	0801d600 	.word	0x0801d600

08011c0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d107      	bne.n	8011c2a <netif_set_down+0x1e>
 8011c1a:	4b12      	ldr	r3, [pc, #72]	; (8011c64 <netif_set_down+0x58>)
 8011c1c:	f240 329b 	movw	r2, #923	; 0x39b
 8011c20:	4911      	ldr	r1, [pc, #68]	; (8011c68 <netif_set_down+0x5c>)
 8011c22:	4812      	ldr	r0, [pc, #72]	; (8011c6c <netif_set_down+0x60>)
 8011c24:	f00a f83e 	bl	801bca4 <iprintf>
 8011c28:	e019      	b.n	8011c5e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c30:	f003 0301 	and.w	r3, r3, #1
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d012      	beq.n	8011c5e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c3e:	f023 0301 	bic.w	r3, r3, #1
 8011c42:	b2da      	uxtb	r2, r3
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c50:	f003 0308 	and.w	r3, r3, #8
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f007 fcdf 	bl	801961c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011c5e:	3708      	adds	r7, #8
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	0801d5b0 	.word	0x0801d5b0
 8011c68:	0801d778 	.word	0x0801d778
 8011c6c:	0801d600 	.word	0x0801d600

08011c70 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d107      	bne.n	8011c8e <netif_set_link_up+0x1e>
 8011c7e:	4b13      	ldr	r3, [pc, #76]	; (8011ccc <netif_set_link_up+0x5c>)
 8011c80:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011c84:	4912      	ldr	r1, [pc, #72]	; (8011cd0 <netif_set_link_up+0x60>)
 8011c86:	4813      	ldr	r0, [pc, #76]	; (8011cd4 <netif_set_link_up+0x64>)
 8011c88:	f00a f80c 	bl	801bca4 <iprintf>
 8011c8c:	e01b      	b.n	8011cc6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c94:	f003 0304 	and.w	r3, r3, #4
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d114      	bne.n	8011cc6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ca2:	f043 0304 	orr.w	r3, r3, #4
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011cae:	2103      	movs	r1, #3
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7ff ff6b 	bl	8011b8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	69db      	ldr	r3, [r3, #28]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d003      	beq.n	8011cc6 <netif_set_link_up+0x56>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	69db      	ldr	r3, [r3, #28]
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011cc6:	3708      	adds	r7, #8
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	0801d5b0 	.word	0x0801d5b0
 8011cd0:	0801d798 	.word	0x0801d798
 8011cd4:	0801d600 	.word	0x0801d600

08011cd8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d107      	bne.n	8011cf6 <netif_set_link_down+0x1e>
 8011ce6:	4b11      	ldr	r3, [pc, #68]	; (8011d2c <netif_set_link_down+0x54>)
 8011ce8:	f240 4206 	movw	r2, #1030	; 0x406
 8011cec:	4910      	ldr	r1, [pc, #64]	; (8011d30 <netif_set_link_down+0x58>)
 8011cee:	4811      	ldr	r0, [pc, #68]	; (8011d34 <netif_set_link_down+0x5c>)
 8011cf0:	f009 ffd8 	bl	801bca4 <iprintf>
 8011cf4:	e017      	b.n	8011d26 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cfc:	f003 0304 	and.w	r3, r3, #4
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d010      	beq.n	8011d26 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d0a:	f023 0304 	bic.w	r3, r3, #4
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	69db      	ldr	r3, [r3, #28]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d003      	beq.n	8011d26 <netif_set_link_down+0x4e>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	69db      	ldr	r3, [r3, #28]
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011d26:	3708      	adds	r7, #8
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	0801d5b0 	.word	0x0801d5b0
 8011d30:	0801d7bc 	.word	0x0801d7bc
 8011d34:	0801d600 	.word	0x0801d600

08011d38 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d002      	beq.n	8011d4e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	683a      	ldr	r2, [r7, #0]
 8011d4c:	61da      	str	r2, [r3, #28]
  }
}
 8011d4e:	bf00      	nop
 8011d50:	370c      	adds	r7, #12
 8011d52:	46bd      	mov	sp, r7
 8011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d58:	4770      	bx	lr

08011d5a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011d5a:	b480      	push	{r7}
 8011d5c:	b085      	sub	sp, #20
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	60f8      	str	r0, [r7, #12]
 8011d62:	60b9      	str	r1, [r7, #8]
 8011d64:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011d66:	f06f 030b 	mvn.w	r3, #11
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
	...

08011d78 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b085      	sub	sp, #20
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	4603      	mov	r3, r0
 8011d80:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011d82:	79fb      	ldrb	r3, [r7, #7]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d013      	beq.n	8011db0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011d88:	4b0d      	ldr	r3, [pc, #52]	; (8011dc0 <netif_get_by_index+0x48>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	60fb      	str	r3, [r7, #12]
 8011d8e:	e00c      	b.n	8011daa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011d96:	3301      	adds	r3, #1
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	79fa      	ldrb	r2, [r7, #7]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d101      	bne.n	8011da4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	e006      	b.n	8011db2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d1ef      	bne.n	8011d90 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011db0:	2300      	movs	r3, #0
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3714      	adds	r7, #20
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	2000b444 	.word	0x2000b444

08011dc4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011dca:	4b0c      	ldr	r3, [pc, #48]	; (8011dfc <pbuf_free_ooseq+0x38>)
 8011dcc:	2200      	movs	r2, #0
 8011dce:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011dd0:	4b0b      	ldr	r3, [pc, #44]	; (8011e00 <pbuf_free_ooseq+0x3c>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	607b      	str	r3, [r7, #4]
 8011dd6:	e00a      	b.n	8011dee <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d003      	beq.n	8011de8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f002 fbf1 	bl	80145c8 <tcp_free_ooseq>
      return;
 8011de6:	e005      	b.n	8011df4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	607b      	str	r3, [r7, #4]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d1f1      	bne.n	8011dd8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8011df4:	3708      	adds	r7, #8
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	2000b44d 	.word	0x2000b44d
 8011e00:	2000b45c 	.word	0x2000b45c

08011e04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011e04:	b480      	push	{r7}
 8011e06:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8011e08:	4b03      	ldr	r3, [pc, #12]	; (8011e18 <pbuf_pool_is_empty+0x14>)
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011e0e:	bf00      	nop
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr
 8011e18:	2000b44d 	.word	0x2000b44d

08011e1c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	4611      	mov	r1, r2
 8011e28:	461a      	mov	r2, r3
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	80fb      	strh	r3, [r7, #6]
 8011e2e:	4613      	mov	r3, r2
 8011e30:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2200      	movs	r2, #0
 8011e36:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	68ba      	ldr	r2, [r7, #8]
 8011e3c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	88fa      	ldrh	r2, [r7, #6]
 8011e42:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	88ba      	ldrh	r2, [r7, #4]
 8011e48:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011e4a:	8b3b      	ldrh	r3, [r7, #24]
 8011e4c:	b2da      	uxtb	r2, r3
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	7f3a      	ldrb	r2, [r7, #28]
 8011e56:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2200      	movs	r2, #0
 8011e62:	73da      	strb	r2, [r3, #15]
}
 8011e64:	bf00      	nop
 8011e66:	3714      	adds	r7, #20
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6e:	4770      	bx	lr

08011e70 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b08c      	sub	sp, #48	; 0x30
 8011e74:	af02      	add	r7, sp, #8
 8011e76:	4603      	mov	r3, r0
 8011e78:	71fb      	strb	r3, [r7, #7]
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	80bb      	strh	r3, [r7, #4]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011e82:	79fb      	ldrb	r3, [r7, #7]
 8011e84:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011e86:	887b      	ldrh	r3, [r7, #2]
 8011e88:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011e8c:	d07f      	beq.n	8011f8e <pbuf_alloc+0x11e>
 8011e8e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011e92:	f300 80c8 	bgt.w	8012026 <pbuf_alloc+0x1b6>
 8011e96:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011e9a:	d010      	beq.n	8011ebe <pbuf_alloc+0x4e>
 8011e9c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011ea0:	f300 80c1 	bgt.w	8012026 <pbuf_alloc+0x1b6>
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d002      	beq.n	8011eae <pbuf_alloc+0x3e>
 8011ea8:	2b41      	cmp	r3, #65	; 0x41
 8011eaa:	f040 80bc 	bne.w	8012026 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011eae:	887a      	ldrh	r2, [r7, #2]
 8011eb0:	88bb      	ldrh	r3, [r7, #4]
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f000 f8d1 	bl	801205c <pbuf_alloc_reference>
 8011eba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8011ebc:	e0bd      	b.n	801203a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011ec6:	88bb      	ldrh	r3, [r7, #4]
 8011ec8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011eca:	2008      	movs	r0, #8
 8011ecc:	f7ff fbce 	bl	801166c <memp_malloc>
 8011ed0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d109      	bne.n	8011eec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011ed8:	f7ff ff94 	bl	8011e04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d002      	beq.n	8011ee8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ee4:	f000 faa8 	bl	8012438 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	e0a7      	b.n	801203c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011eec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011eee:	3303      	adds	r3, #3
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	f023 0303 	bic.w	r3, r3, #3
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	8b7a      	ldrh	r2, [r7, #26]
 8011f00:	4293      	cmp	r3, r2
 8011f02:	bf28      	it	cs
 8011f04:	4613      	movcs	r3, r2
 8011f06:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f0a:	3310      	adds	r3, #16
 8011f0c:	693a      	ldr	r2, [r7, #16]
 8011f0e:	4413      	add	r3, r2
 8011f10:	3303      	adds	r3, #3
 8011f12:	f023 0303 	bic.w	r3, r3, #3
 8011f16:	4618      	mov	r0, r3
 8011f18:	89f9      	ldrh	r1, [r7, #14]
 8011f1a:	8b7a      	ldrh	r2, [r7, #26]
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	9301      	str	r3, [sp, #4]
 8011f20:	887b      	ldrh	r3, [r7, #2]
 8011f22:	9300      	str	r3, [sp, #0]
 8011f24:	460b      	mov	r3, r1
 8011f26:	4601      	mov	r1, r0
 8011f28:	6938      	ldr	r0, [r7, #16]
 8011f2a:	f7ff ff77 	bl	8011e1c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	f003 0303 	and.w	r3, r3, #3
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d006      	beq.n	8011f48 <pbuf_alloc+0xd8>
 8011f3a:	4b42      	ldr	r3, [pc, #264]	; (8012044 <pbuf_alloc+0x1d4>)
 8011f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011f40:	4941      	ldr	r1, [pc, #260]	; (8012048 <pbuf_alloc+0x1d8>)
 8011f42:	4842      	ldr	r0, [pc, #264]	; (801204c <pbuf_alloc+0x1dc>)
 8011f44:	f009 feae 	bl	801bca4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f4a:	3303      	adds	r3, #3
 8011f4c:	f023 0303 	bic.w	r3, r3, #3
 8011f50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011f54:	d106      	bne.n	8011f64 <pbuf_alloc+0xf4>
 8011f56:	4b3b      	ldr	r3, [pc, #236]	; (8012044 <pbuf_alloc+0x1d4>)
 8011f58:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011f5c:	493c      	ldr	r1, [pc, #240]	; (8012050 <pbuf_alloc+0x1e0>)
 8011f5e:	483b      	ldr	r0, [pc, #236]	; (801204c <pbuf_alloc+0x1dc>)
 8011f60:	f009 fea0 	bl	801bca4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d102      	bne.n	8011f70 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f6e:	e002      	b.n	8011f76 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	693a      	ldr	r2, [r7, #16]
 8011f74:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011f7a:	8b7a      	ldrh	r2, [r7, #26]
 8011f7c:	89fb      	ldrh	r3, [r7, #14]
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011f86:	8b7b      	ldrh	r3, [r7, #26]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d19e      	bne.n	8011eca <pbuf_alloc+0x5a>
      break;
 8011f8c:	e055      	b.n	801203a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f90:	3303      	adds	r3, #3
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	f023 0303 	bic.w	r3, r3, #3
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	88bb      	ldrh	r3, [r7, #4]
 8011f9c:	3303      	adds	r3, #3
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	f023 0303 	bic.w	r3, r3, #3
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	4413      	add	r3, r2
 8011fa8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011faa:	8b3b      	ldrh	r3, [r7, #24]
 8011fac:	3310      	adds	r3, #16
 8011fae:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011fb0:	8b3a      	ldrh	r2, [r7, #24]
 8011fb2:	88bb      	ldrh	r3, [r7, #4]
 8011fb4:	3303      	adds	r3, #3
 8011fb6:	f023 0303 	bic.w	r3, r3, #3
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d306      	bcc.n	8011fcc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011fbe:	8afa      	ldrh	r2, [r7, #22]
 8011fc0:	88bb      	ldrh	r3, [r7, #4]
 8011fc2:	3303      	adds	r3, #3
 8011fc4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d201      	bcs.n	8011fd0 <pbuf_alloc+0x160>
        return NULL;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	e035      	b.n	801203c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011fd0:	8afb      	ldrh	r3, [r7, #22]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7ff f9ba 	bl	801134c <mem_malloc>
 8011fd8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d101      	bne.n	8011fe4 <pbuf_alloc+0x174>
        return NULL;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	e02b      	b.n	801203c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011fe6:	3310      	adds	r3, #16
 8011fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fea:	4413      	add	r3, r2
 8011fec:	3303      	adds	r3, #3
 8011fee:	f023 0303 	bic.w	r3, r3, #3
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	88b9      	ldrh	r1, [r7, #4]
 8011ff6:	88ba      	ldrh	r2, [r7, #4]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	9301      	str	r3, [sp, #4]
 8011ffc:	887b      	ldrh	r3, [r7, #2]
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	460b      	mov	r3, r1
 8012002:	4601      	mov	r1, r0
 8012004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012006:	f7ff ff09 	bl	8011e1c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	f003 0303 	and.w	r3, r3, #3
 8012012:	2b00      	cmp	r3, #0
 8012014:	d010      	beq.n	8012038 <pbuf_alloc+0x1c8>
 8012016:	4b0b      	ldr	r3, [pc, #44]	; (8012044 <pbuf_alloc+0x1d4>)
 8012018:	f44f 7291 	mov.w	r2, #290	; 0x122
 801201c:	490d      	ldr	r1, [pc, #52]	; (8012054 <pbuf_alloc+0x1e4>)
 801201e:	480b      	ldr	r0, [pc, #44]	; (801204c <pbuf_alloc+0x1dc>)
 8012020:	f009 fe40 	bl	801bca4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012024:	e008      	b.n	8012038 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012026:	4b07      	ldr	r3, [pc, #28]	; (8012044 <pbuf_alloc+0x1d4>)
 8012028:	f240 1227 	movw	r2, #295	; 0x127
 801202c:	490a      	ldr	r1, [pc, #40]	; (8012058 <pbuf_alloc+0x1e8>)
 801202e:	4807      	ldr	r0, [pc, #28]	; (801204c <pbuf_alloc+0x1dc>)
 8012030:	f009 fe38 	bl	801bca4 <iprintf>
      return NULL;
 8012034:	2300      	movs	r3, #0
 8012036:	e001      	b.n	801203c <pbuf_alloc+0x1cc>
      break;
 8012038:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801203c:	4618      	mov	r0, r3
 801203e:	3728      	adds	r7, #40	; 0x28
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	0801d7e0 	.word	0x0801d7e0
 8012048:	0801d810 	.word	0x0801d810
 801204c:	0801d840 	.word	0x0801d840
 8012050:	0801d868 	.word	0x0801d868
 8012054:	0801d89c 	.word	0x0801d89c
 8012058:	0801d8c8 	.word	0x0801d8c8

0801205c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b086      	sub	sp, #24
 8012060:	af02      	add	r7, sp, #8
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	460b      	mov	r3, r1
 8012066:	807b      	strh	r3, [r7, #2]
 8012068:	4613      	mov	r3, r2
 801206a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801206c:	883b      	ldrh	r3, [r7, #0]
 801206e:	2b41      	cmp	r3, #65	; 0x41
 8012070:	d009      	beq.n	8012086 <pbuf_alloc_reference+0x2a>
 8012072:	883b      	ldrh	r3, [r7, #0]
 8012074:	2b01      	cmp	r3, #1
 8012076:	d006      	beq.n	8012086 <pbuf_alloc_reference+0x2a>
 8012078:	4b0f      	ldr	r3, [pc, #60]	; (80120b8 <pbuf_alloc_reference+0x5c>)
 801207a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801207e:	490f      	ldr	r1, [pc, #60]	; (80120bc <pbuf_alloc_reference+0x60>)
 8012080:	480f      	ldr	r0, [pc, #60]	; (80120c0 <pbuf_alloc_reference+0x64>)
 8012082:	f009 fe0f 	bl	801bca4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012086:	2007      	movs	r0, #7
 8012088:	f7ff faf0 	bl	801166c <memp_malloc>
 801208c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d101      	bne.n	8012098 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012094:	2300      	movs	r3, #0
 8012096:	e00b      	b.n	80120b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012098:	8879      	ldrh	r1, [r7, #2]
 801209a:	887a      	ldrh	r2, [r7, #2]
 801209c:	2300      	movs	r3, #0
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	883b      	ldrh	r3, [r7, #0]
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	460b      	mov	r3, r1
 80120a6:	6879      	ldr	r1, [r7, #4]
 80120a8:	68f8      	ldr	r0, [r7, #12]
 80120aa:	f7ff feb7 	bl	8011e1c <pbuf_init_alloced_pbuf>
  return p;
 80120ae:	68fb      	ldr	r3, [r7, #12]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3710      	adds	r7, #16
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	0801d7e0 	.word	0x0801d7e0
 80120bc:	0801d8e4 	.word	0x0801d8e4
 80120c0:	0801d840 	.word	0x0801d840

080120c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b088      	sub	sp, #32
 80120c8:	af02      	add	r7, sp, #8
 80120ca:	607b      	str	r3, [r7, #4]
 80120cc:	4603      	mov	r3, r0
 80120ce:	73fb      	strb	r3, [r7, #15]
 80120d0:	460b      	mov	r3, r1
 80120d2:	81bb      	strh	r3, [r7, #12]
 80120d4:	4613      	mov	r3, r2
 80120d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80120d8:	7bfb      	ldrb	r3, [r7, #15]
 80120da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80120dc:	8a7b      	ldrh	r3, [r7, #18]
 80120de:	3303      	adds	r3, #3
 80120e0:	f023 0203 	bic.w	r2, r3, #3
 80120e4:	89bb      	ldrh	r3, [r7, #12]
 80120e6:	441a      	add	r2, r3
 80120e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d901      	bls.n	80120f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80120ee:	2300      	movs	r3, #0
 80120f0:	e018      	b.n	8012124 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80120f2:	6a3b      	ldr	r3, [r7, #32]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d007      	beq.n	8012108 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80120f8:	8a7b      	ldrh	r3, [r7, #18]
 80120fa:	3303      	adds	r3, #3
 80120fc:	f023 0303 	bic.w	r3, r3, #3
 8012100:	6a3a      	ldr	r2, [r7, #32]
 8012102:	4413      	add	r3, r2
 8012104:	617b      	str	r3, [r7, #20]
 8012106:	e001      	b.n	801210c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	89b9      	ldrh	r1, [r7, #12]
 8012110:	89ba      	ldrh	r2, [r7, #12]
 8012112:	2302      	movs	r3, #2
 8012114:	9301      	str	r3, [sp, #4]
 8012116:	897b      	ldrh	r3, [r7, #10]
 8012118:	9300      	str	r3, [sp, #0]
 801211a:	460b      	mov	r3, r1
 801211c:	6979      	ldr	r1, [r7, #20]
 801211e:	f7ff fe7d 	bl	8011e1c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012122:	687b      	ldr	r3, [r7, #4]
}
 8012124:	4618      	mov	r0, r3
 8012126:	3718      	adds	r7, #24
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	460b      	mov	r3, r1
 8012136:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <pbuf_realloc+0x20>
 801213e:	4b3a      	ldr	r3, [pc, #232]	; (8012228 <pbuf_realloc+0xfc>)
 8012140:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012144:	4939      	ldr	r1, [pc, #228]	; (801222c <pbuf_realloc+0x100>)
 8012146:	483a      	ldr	r0, [pc, #232]	; (8012230 <pbuf_realloc+0x104>)
 8012148:	f009 fdac 	bl	801bca4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	891b      	ldrh	r3, [r3, #8]
 8012150:	887a      	ldrh	r2, [r7, #2]
 8012152:	429a      	cmp	r2, r3
 8012154:	d263      	bcs.n	801221e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	891a      	ldrh	r2, [r3, #8]
 801215a:	887b      	ldrh	r3, [r7, #2]
 801215c:	1ad3      	subs	r3, r2, r3
 801215e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012160:	887b      	ldrh	r3, [r7, #2]
 8012162:	817b      	strh	r3, [r7, #10]
  q = p;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012168:	e018      	b.n	801219c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	895b      	ldrh	r3, [r3, #10]
 801216e:	897a      	ldrh	r2, [r7, #10]
 8012170:	1ad3      	subs	r3, r2, r3
 8012172:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	891a      	ldrh	r2, [r3, #8]
 8012178:	893b      	ldrh	r3, [r7, #8]
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	b29a      	uxth	r2, r3
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d106      	bne.n	801219c <pbuf_realloc+0x70>
 801218e:	4b26      	ldr	r3, [pc, #152]	; (8012228 <pbuf_realloc+0xfc>)
 8012190:	f240 12af 	movw	r2, #431	; 0x1af
 8012194:	4927      	ldr	r1, [pc, #156]	; (8012234 <pbuf_realloc+0x108>)
 8012196:	4826      	ldr	r0, [pc, #152]	; (8012230 <pbuf_realloc+0x104>)
 8012198:	f009 fd84 	bl	801bca4 <iprintf>
  while (rem_len > q->len) {
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	895b      	ldrh	r3, [r3, #10]
 80121a0:	897a      	ldrh	r2, [r7, #10]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d8e1      	bhi.n	801216a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	7b1b      	ldrb	r3, [r3, #12]
 80121aa:	f003 030f 	and.w	r3, r3, #15
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d121      	bne.n	80121f6 <pbuf_realloc+0xca>
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	895b      	ldrh	r3, [r3, #10]
 80121b6:	897a      	ldrh	r2, [r7, #10]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d01c      	beq.n	80121f6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	7b5b      	ldrb	r3, [r3, #13]
 80121c0:	f003 0302 	and.w	r3, r3, #2
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d116      	bne.n	80121f6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	685a      	ldr	r2, [r3, #4]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	897b      	ldrh	r3, [r7, #10]
 80121d4:	4413      	add	r3, r2
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	4619      	mov	r1, r3
 80121da:	68f8      	ldr	r0, [r7, #12]
 80121dc:	f7fe ffba 	bl	8011154 <mem_trim>
 80121e0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d106      	bne.n	80121f6 <pbuf_realloc+0xca>
 80121e8:	4b0f      	ldr	r3, [pc, #60]	; (8012228 <pbuf_realloc+0xfc>)
 80121ea:	f240 12bd 	movw	r2, #445	; 0x1bd
 80121ee:	4912      	ldr	r1, [pc, #72]	; (8012238 <pbuf_realloc+0x10c>)
 80121f0:	480f      	ldr	r0, [pc, #60]	; (8012230 <pbuf_realloc+0x104>)
 80121f2:	f009 fd57 	bl	801bca4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	897a      	ldrh	r2, [r7, #10]
 80121fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	895a      	ldrh	r2, [r3, #10]
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d004      	beq.n	8012216 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	4618      	mov	r0, r3
 8012212:	f000 f911 	bl	8012438 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2200      	movs	r2, #0
 801221a:	601a      	str	r2, [r3, #0]
 801221c:	e000      	b.n	8012220 <pbuf_realloc+0xf4>
    return;
 801221e:	bf00      	nop

}
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	0801d7e0 	.word	0x0801d7e0
 801222c:	0801d8f8 	.word	0x0801d8f8
 8012230:	0801d840 	.word	0x0801d840
 8012234:	0801d910 	.word	0x0801d910
 8012238:	0801d928 	.word	0x0801d928

0801223c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	4613      	mov	r3, r2
 8012248:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d106      	bne.n	801225e <pbuf_add_header_impl+0x22>
 8012250:	4b2b      	ldr	r3, [pc, #172]	; (8012300 <pbuf_add_header_impl+0xc4>)
 8012252:	f240 12df 	movw	r2, #479	; 0x1df
 8012256:	492b      	ldr	r1, [pc, #172]	; (8012304 <pbuf_add_header_impl+0xc8>)
 8012258:	482b      	ldr	r0, [pc, #172]	; (8012308 <pbuf_add_header_impl+0xcc>)
 801225a:	f009 fd23 	bl	801bca4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d003      	beq.n	801226c <pbuf_add_header_impl+0x30>
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801226a:	d301      	bcc.n	8012270 <pbuf_add_header_impl+0x34>
    return 1;
 801226c:	2301      	movs	r3, #1
 801226e:	e043      	b.n	80122f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <pbuf_add_header_impl+0x3e>
    return 0;
 8012276:	2300      	movs	r3, #0
 8012278:	e03e      	b.n	80122f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	891a      	ldrh	r2, [r3, #8]
 8012282:	8a7b      	ldrh	r3, [r7, #18]
 8012284:	4413      	add	r3, r2
 8012286:	b29b      	uxth	r3, r3
 8012288:	8a7a      	ldrh	r2, [r7, #18]
 801228a:	429a      	cmp	r2, r3
 801228c:	d901      	bls.n	8012292 <pbuf_add_header_impl+0x56>
    return 1;
 801228e:	2301      	movs	r3, #1
 8012290:	e032      	b.n	80122f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	7b1b      	ldrb	r3, [r3, #12]
 8012296:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012298:	8a3b      	ldrh	r3, [r7, #16]
 801229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d00c      	beq.n	80122bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	685a      	ldr	r2, [r3, #4]
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	425b      	negs	r3, r3
 80122aa:	4413      	add	r3, r2
 80122ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	3310      	adds	r3, #16
 80122b2:	697a      	ldr	r2, [r7, #20]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d20d      	bcs.n	80122d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80122b8:	2301      	movs	r3, #1
 80122ba:	e01d      	b.n	80122f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80122bc:	79fb      	ldrb	r3, [r7, #7]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d006      	beq.n	80122d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	685a      	ldr	r2, [r3, #4]
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	425b      	negs	r3, r3
 80122ca:	4413      	add	r3, r2
 80122cc:	617b      	str	r3, [r7, #20]
 80122ce:	e001      	b.n	80122d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80122d0:	2301      	movs	r3, #1
 80122d2:	e011      	b.n	80122f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	895a      	ldrh	r2, [r3, #10]
 80122de:	8a7b      	ldrh	r3, [r7, #18]
 80122e0:	4413      	add	r3, r2
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	891a      	ldrh	r2, [r3, #8]
 80122ec:	8a7b      	ldrh	r3, [r7, #18]
 80122ee:	4413      	add	r3, r2
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	811a      	strh	r2, [r3, #8]


  return 0;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3718      	adds	r7, #24
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	0801d7e0 	.word	0x0801d7e0
 8012304:	0801d944 	.word	0x0801d944
 8012308:	0801d840 	.word	0x0801d840

0801230c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012316:	2200      	movs	r2, #0
 8012318:	6839      	ldr	r1, [r7, #0]
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7ff ff8e 	bl	801223c <pbuf_add_header_impl>
 8012320:	4603      	mov	r3, r0
}
 8012322:	4618      	mov	r0, r3
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
	...

0801232c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d106      	bne.n	801234a <pbuf_remove_header+0x1e>
 801233c:	4b20      	ldr	r3, [pc, #128]	; (80123c0 <pbuf_remove_header+0x94>)
 801233e:	f240 224b 	movw	r2, #587	; 0x24b
 8012342:	4920      	ldr	r1, [pc, #128]	; (80123c4 <pbuf_remove_header+0x98>)
 8012344:	4820      	ldr	r0, [pc, #128]	; (80123c8 <pbuf_remove_header+0x9c>)
 8012346:	f009 fcad 	bl	801bca4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d003      	beq.n	8012358 <pbuf_remove_header+0x2c>
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012356:	d301      	bcc.n	801235c <pbuf_remove_header+0x30>
    return 1;
 8012358:	2301      	movs	r3, #1
 801235a:	e02c      	b.n	80123b6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d101      	bne.n	8012366 <pbuf_remove_header+0x3a>
    return 0;
 8012362:	2300      	movs	r3, #0
 8012364:	e027      	b.n	80123b6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	895b      	ldrh	r3, [r3, #10]
 801236e:	89fa      	ldrh	r2, [r7, #14]
 8012370:	429a      	cmp	r2, r3
 8012372:	d908      	bls.n	8012386 <pbuf_remove_header+0x5a>
 8012374:	4b12      	ldr	r3, [pc, #72]	; (80123c0 <pbuf_remove_header+0x94>)
 8012376:	f240 2255 	movw	r2, #597	; 0x255
 801237a:	4914      	ldr	r1, [pc, #80]	; (80123cc <pbuf_remove_header+0xa0>)
 801237c:	4812      	ldr	r0, [pc, #72]	; (80123c8 <pbuf_remove_header+0x9c>)
 801237e:	f009 fc91 	bl	801bca4 <iprintf>
 8012382:	2301      	movs	r3, #1
 8012384:	e017      	b.n	80123b6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	685a      	ldr	r2, [r3, #4]
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	441a      	add	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	895a      	ldrh	r2, [r3, #10]
 801239c:	89fb      	ldrh	r3, [r7, #14]
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	891a      	ldrh	r2, [r3, #8]
 80123aa:	89fb      	ldrh	r3, [r7, #14]
 80123ac:	1ad3      	subs	r3, r2, r3
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80123b4:	2300      	movs	r3, #0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	0801d7e0 	.word	0x0801d7e0
 80123c4:	0801d944 	.word	0x0801d944
 80123c8:	0801d840 	.word	0x0801d840
 80123cc:	0801d950 	.word	0x0801d950

080123d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	460b      	mov	r3, r1
 80123da:	807b      	strh	r3, [r7, #2]
 80123dc:	4613      	mov	r3, r2
 80123de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80123e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	da08      	bge.n	80123fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80123e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123ec:	425b      	negs	r3, r3
 80123ee:	4619      	mov	r1, r3
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7ff ff9b 	bl	801232c <pbuf_remove_header>
 80123f6:	4603      	mov	r3, r0
 80123f8:	e007      	b.n	801240a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80123fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123fe:	787a      	ldrb	r2, [r7, #1]
 8012400:	4619      	mov	r1, r3
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f7ff ff1a 	bl	801223c <pbuf_add_header_impl>
 8012408:	4603      	mov	r3, r0
  }
}
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
 801241a:	460b      	mov	r3, r1
 801241c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801241e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012422:	2201      	movs	r2, #1
 8012424:	4619      	mov	r1, r3
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f7ff ffd2 	bl	80123d0 <pbuf_header_impl>
 801242c:	4603      	mov	r3, r0
}
 801242e:	4618      	mov	r0, r3
 8012430:	3708      	adds	r7, #8
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b086      	sub	sp, #24
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d10b      	bne.n	801245e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d106      	bne.n	801245a <pbuf_free+0x22>
 801244c:	4b38      	ldr	r3, [pc, #224]	; (8012530 <pbuf_free+0xf8>)
 801244e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012452:	4938      	ldr	r1, [pc, #224]	; (8012534 <pbuf_free+0xfc>)
 8012454:	4838      	ldr	r0, [pc, #224]	; (8012538 <pbuf_free+0x100>)
 8012456:	f009 fc25 	bl	801bca4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801245a:	2300      	movs	r3, #0
 801245c:	e063      	b.n	8012526 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801245e:	2300      	movs	r3, #0
 8012460:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012462:	e05c      	b.n	801251e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	7b9b      	ldrb	r3, [r3, #14]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d106      	bne.n	801247a <pbuf_free+0x42>
 801246c:	4b30      	ldr	r3, [pc, #192]	; (8012530 <pbuf_free+0xf8>)
 801246e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012472:	4932      	ldr	r1, [pc, #200]	; (801253c <pbuf_free+0x104>)
 8012474:	4830      	ldr	r0, [pc, #192]	; (8012538 <pbuf_free+0x100>)
 8012476:	f009 fc15 	bl	801bca4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	7b9b      	ldrb	r3, [r3, #14]
 801247e:	3b01      	subs	r3, #1
 8012480:	b2da      	uxtb	r2, r3
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	739a      	strb	r2, [r3, #14]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	7b9b      	ldrb	r3, [r3, #14]
 801248a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801248c:	7dbb      	ldrb	r3, [r7, #22]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d143      	bne.n	801251a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	7b1b      	ldrb	r3, [r3, #12]
 801249c:	f003 030f 	and.w	r3, r3, #15
 80124a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	7b5b      	ldrb	r3, [r3, #13]
 80124a6:	f003 0302 	and.w	r3, r3, #2
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d011      	beq.n	80124d2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	691b      	ldr	r3, [r3, #16]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d106      	bne.n	80124c8 <pbuf_free+0x90>
 80124ba:	4b1d      	ldr	r3, [pc, #116]	; (8012530 <pbuf_free+0xf8>)
 80124bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80124c0:	491f      	ldr	r1, [pc, #124]	; (8012540 <pbuf_free+0x108>)
 80124c2:	481d      	ldr	r0, [pc, #116]	; (8012538 <pbuf_free+0x100>)
 80124c4:	f009 fbee 	bl	801bca4 <iprintf>
        pc->custom_free_function(p);
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	4798      	blx	r3
 80124d0:	e01d      	b.n	801250e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80124d2:	7bfb      	ldrb	r3, [r7, #15]
 80124d4:	2b02      	cmp	r3, #2
 80124d6:	d104      	bne.n	80124e2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80124d8:	6879      	ldr	r1, [r7, #4]
 80124da:	2008      	movs	r0, #8
 80124dc:	f7ff f936 	bl	801174c <memp_free>
 80124e0:	e015      	b.n	801250e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80124e2:	7bfb      	ldrb	r3, [r7, #15]
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d104      	bne.n	80124f2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80124e8:	6879      	ldr	r1, [r7, #4]
 80124ea:	2007      	movs	r0, #7
 80124ec:	f7ff f92e 	bl	801174c <memp_free>
 80124f0:	e00d      	b.n	801250e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80124f2:	7bfb      	ldrb	r3, [r7, #15]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d103      	bne.n	8012500 <pbuf_free+0xc8>
          mem_free(p);
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7fe fdc1 	bl	8011080 <mem_free>
 80124fe:	e006      	b.n	801250e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012500:	4b0b      	ldr	r3, [pc, #44]	; (8012530 <pbuf_free+0xf8>)
 8012502:	f240 320f 	movw	r2, #783	; 0x30f
 8012506:	490f      	ldr	r1, [pc, #60]	; (8012544 <pbuf_free+0x10c>)
 8012508:	480b      	ldr	r0, [pc, #44]	; (8012538 <pbuf_free+0x100>)
 801250a:	f009 fbcb 	bl	801bca4 <iprintf>
        }
      }
      count++;
 801250e:	7dfb      	ldrb	r3, [r7, #23]
 8012510:	3301      	adds	r3, #1
 8012512:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	607b      	str	r3, [r7, #4]
 8012518:	e001      	b.n	801251e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801251a:	2300      	movs	r3, #0
 801251c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d19f      	bne.n	8012464 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012524:	7dfb      	ldrb	r3, [r7, #23]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3718      	adds	r7, #24
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	0801d7e0 	.word	0x0801d7e0
 8012534:	0801d944 	.word	0x0801d944
 8012538:	0801d840 	.word	0x0801d840
 801253c:	0801d970 	.word	0x0801d970
 8012540:	0801d988 	.word	0x0801d988
 8012544:	0801d9ac 	.word	0x0801d9ac

08012548 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012548:	b480      	push	{r7}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012550:	2300      	movs	r3, #0
 8012552:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012554:	e005      	b.n	8012562 <pbuf_clen+0x1a>
    ++len;
 8012556:	89fb      	ldrh	r3, [r7, #14]
 8012558:	3301      	adds	r3, #1
 801255a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d1f6      	bne.n	8012556 <pbuf_clen+0xe>
  }
  return len;
 8012568:	89fb      	ldrh	r3, [r7, #14]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3714      	adds	r7, #20
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr
	...

08012578 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d010      	beq.n	80125a8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	7b9b      	ldrb	r3, [r3, #14]
 801258a:	3301      	adds	r3, #1
 801258c:	b2da      	uxtb	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	7b9b      	ldrb	r3, [r3, #14]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d106      	bne.n	80125a8 <pbuf_ref+0x30>
 801259a:	4b05      	ldr	r3, [pc, #20]	; (80125b0 <pbuf_ref+0x38>)
 801259c:	f240 3242 	movw	r2, #834	; 0x342
 80125a0:	4904      	ldr	r1, [pc, #16]	; (80125b4 <pbuf_ref+0x3c>)
 80125a2:	4805      	ldr	r0, [pc, #20]	; (80125b8 <pbuf_ref+0x40>)
 80125a4:	f009 fb7e 	bl	801bca4 <iprintf>
  }
}
 80125a8:	bf00      	nop
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	0801d7e0 	.word	0x0801d7e0
 80125b4:	0801d9c0 	.word	0x0801d9c0
 80125b8:	0801d840 	.word	0x0801d840

080125bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <pbuf_cat+0x16>
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d107      	bne.n	80125e2 <pbuf_cat+0x26>
 80125d2:	4b20      	ldr	r3, [pc, #128]	; (8012654 <pbuf_cat+0x98>)
 80125d4:	f240 3259 	movw	r2, #857	; 0x359
 80125d8:	491f      	ldr	r1, [pc, #124]	; (8012658 <pbuf_cat+0x9c>)
 80125da:	4820      	ldr	r0, [pc, #128]	; (801265c <pbuf_cat+0xa0>)
 80125dc:	f009 fb62 	bl	801bca4 <iprintf>
 80125e0:	e034      	b.n	801264c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	60fb      	str	r3, [r7, #12]
 80125e6:	e00a      	b.n	80125fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	891a      	ldrh	r2, [r3, #8]
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	891b      	ldrh	r3, [r3, #8]
 80125f0:	4413      	add	r3, r2
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	60fb      	str	r3, [r7, #12]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1f0      	bne.n	80125e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	891a      	ldrh	r2, [r3, #8]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	895b      	ldrh	r3, [r3, #10]
 801260e:	429a      	cmp	r2, r3
 8012610:	d006      	beq.n	8012620 <pbuf_cat+0x64>
 8012612:	4b10      	ldr	r3, [pc, #64]	; (8012654 <pbuf_cat+0x98>)
 8012614:	f240 3262 	movw	r2, #866	; 0x362
 8012618:	4911      	ldr	r1, [pc, #68]	; (8012660 <pbuf_cat+0xa4>)
 801261a:	4810      	ldr	r0, [pc, #64]	; (801265c <pbuf_cat+0xa0>)
 801261c:	f009 fb42 	bl	801bca4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d006      	beq.n	8012636 <pbuf_cat+0x7a>
 8012628:	4b0a      	ldr	r3, [pc, #40]	; (8012654 <pbuf_cat+0x98>)
 801262a:	f240 3263 	movw	r2, #867	; 0x363
 801262e:	490d      	ldr	r1, [pc, #52]	; (8012664 <pbuf_cat+0xa8>)
 8012630:	480a      	ldr	r0, [pc, #40]	; (801265c <pbuf_cat+0xa0>)
 8012632:	f009 fb37 	bl	801bca4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	891a      	ldrh	r2, [r3, #8]
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	891b      	ldrh	r3, [r3, #8]
 801263e:	4413      	add	r3, r2
 8012640:	b29a      	uxth	r2, r3
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	683a      	ldr	r2, [r7, #0]
 801264a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	0801d7e0 	.word	0x0801d7e0
 8012658:	0801d9d4 	.word	0x0801d9d4
 801265c:	0801d840 	.word	0x0801d840
 8012660:	0801da0c 	.word	0x0801da0c
 8012664:	0801da3c 	.word	0x0801da3c

08012668 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012672:	6839      	ldr	r1, [r7, #0]
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f7ff ffa1 	bl	80125bc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801267a:	6838      	ldr	r0, [r7, #0]
 801267c:	f7ff ff7c 	bl	8012578 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012680:	bf00      	nop
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b086      	sub	sp, #24
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012692:	2300      	movs	r3, #0
 8012694:	617b      	str	r3, [r7, #20]
 8012696:	2300      	movs	r3, #0
 8012698:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d008      	beq.n	80126b2 <pbuf_copy+0x2a>
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d005      	beq.n	80126b2 <pbuf_copy+0x2a>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	891a      	ldrh	r2, [r3, #8]
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	891b      	ldrh	r3, [r3, #8]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d209      	bcs.n	80126c6 <pbuf_copy+0x3e>
 80126b2:	4b57      	ldr	r3, [pc, #348]	; (8012810 <pbuf_copy+0x188>)
 80126b4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80126b8:	4956      	ldr	r1, [pc, #344]	; (8012814 <pbuf_copy+0x18c>)
 80126ba:	4857      	ldr	r0, [pc, #348]	; (8012818 <pbuf_copy+0x190>)
 80126bc:	f009 faf2 	bl	801bca4 <iprintf>
 80126c0:	f06f 030f 	mvn.w	r3, #15
 80126c4:	e09f      	b.n	8012806 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	895b      	ldrh	r3, [r3, #10]
 80126ca:	461a      	mov	r2, r3
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	1ad2      	subs	r2, r2, r3
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	895b      	ldrh	r3, [r3, #10]
 80126d4:	4619      	mov	r1, r3
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	1acb      	subs	r3, r1, r3
 80126da:	429a      	cmp	r2, r3
 80126dc:	d306      	bcc.n	80126ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	895b      	ldrh	r3, [r3, #10]
 80126e2:	461a      	mov	r2, r3
 80126e4:	693b      	ldr	r3, [r7, #16]
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	e005      	b.n	80126f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	895b      	ldrh	r3, [r3, #10]
 80126f0:	461a      	mov	r2, r3
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	1ad3      	subs	r3, r2, r3
 80126f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	685a      	ldr	r2, [r3, #4]
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	18d0      	adds	r0, r2, r3
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	685a      	ldr	r2, [r3, #4]
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	4413      	add	r3, r2
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	4619      	mov	r1, r3
 801270c:	f009 fc3b 	bl	801bf86 <memcpy>
    offset_to += len;
 8012710:	697a      	ldr	r2, [r7, #20]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	4413      	add	r3, r2
 8012716:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012718:	693a      	ldr	r2, [r7, #16]
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	4413      	add	r3, r2
 801271e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	895b      	ldrh	r3, [r3, #10]
 8012724:	461a      	mov	r2, r3
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	4293      	cmp	r3, r2
 801272a:	d906      	bls.n	801273a <pbuf_copy+0xb2>
 801272c:	4b38      	ldr	r3, [pc, #224]	; (8012810 <pbuf_copy+0x188>)
 801272e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012732:	493a      	ldr	r1, [pc, #232]	; (801281c <pbuf_copy+0x194>)
 8012734:	4838      	ldr	r0, [pc, #224]	; (8012818 <pbuf_copy+0x190>)
 8012736:	f009 fab5 	bl	801bca4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	895b      	ldrh	r3, [r3, #10]
 801273e:	461a      	mov	r2, r3
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	4293      	cmp	r3, r2
 8012744:	d906      	bls.n	8012754 <pbuf_copy+0xcc>
 8012746:	4b32      	ldr	r3, [pc, #200]	; (8012810 <pbuf_copy+0x188>)
 8012748:	f240 32da 	movw	r2, #986	; 0x3da
 801274c:	4934      	ldr	r1, [pc, #208]	; (8012820 <pbuf_copy+0x198>)
 801274e:	4832      	ldr	r0, [pc, #200]	; (8012818 <pbuf_copy+0x190>)
 8012750:	f009 faa8 	bl	801bca4 <iprintf>
    if (offset_from >= p_from->len) {
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	895b      	ldrh	r3, [r3, #10]
 8012758:	461a      	mov	r2, r3
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	4293      	cmp	r3, r2
 801275e:	d304      	bcc.n	801276a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012760:	2300      	movs	r3, #0
 8012762:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	895b      	ldrh	r3, [r3, #10]
 801276e:	461a      	mov	r2, r3
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	4293      	cmp	r3, r2
 8012774:	d114      	bne.n	80127a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012776:	2300      	movs	r3, #0
 8012778:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d10c      	bne.n	80127a0 <pbuf_copy+0x118>
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d009      	beq.n	80127a0 <pbuf_copy+0x118>
 801278c:	4b20      	ldr	r3, [pc, #128]	; (8012810 <pbuf_copy+0x188>)
 801278e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012792:	4924      	ldr	r1, [pc, #144]	; (8012824 <pbuf_copy+0x19c>)
 8012794:	4820      	ldr	r0, [pc, #128]	; (8012818 <pbuf_copy+0x190>)
 8012796:	f009 fa85 	bl	801bca4 <iprintf>
 801279a:	f06f 030f 	mvn.w	r3, #15
 801279e:	e032      	b.n	8012806 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d013      	beq.n	80127ce <pbuf_copy+0x146>
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	895a      	ldrh	r2, [r3, #10]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	891b      	ldrh	r3, [r3, #8]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d10d      	bne.n	80127ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d009      	beq.n	80127ce <pbuf_copy+0x146>
 80127ba:	4b15      	ldr	r3, [pc, #84]	; (8012810 <pbuf_copy+0x188>)
 80127bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80127c0:	4919      	ldr	r1, [pc, #100]	; (8012828 <pbuf_copy+0x1a0>)
 80127c2:	4815      	ldr	r0, [pc, #84]	; (8012818 <pbuf_copy+0x190>)
 80127c4:	f009 fa6e 	bl	801bca4 <iprintf>
 80127c8:	f06f 0305 	mvn.w	r3, #5
 80127cc:	e01b      	b.n	8012806 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d013      	beq.n	80127fc <pbuf_copy+0x174>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	895a      	ldrh	r2, [r3, #10]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	891b      	ldrh	r3, [r3, #8]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d10d      	bne.n	80127fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d009      	beq.n	80127fc <pbuf_copy+0x174>
 80127e8:	4b09      	ldr	r3, [pc, #36]	; (8012810 <pbuf_copy+0x188>)
 80127ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80127ee:	490e      	ldr	r1, [pc, #56]	; (8012828 <pbuf_copy+0x1a0>)
 80127f0:	4809      	ldr	r0, [pc, #36]	; (8012818 <pbuf_copy+0x190>)
 80127f2:	f009 fa57 	bl	801bca4 <iprintf>
 80127f6:	f06f 0305 	mvn.w	r3, #5
 80127fa:	e004      	b.n	8012806 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	f47f af61 	bne.w	80126c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012804:	2300      	movs	r3, #0
}
 8012806:	4618      	mov	r0, r3
 8012808:	3718      	adds	r7, #24
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	0801d7e0 	.word	0x0801d7e0
 8012814:	0801da88 	.word	0x0801da88
 8012818:	0801d840 	.word	0x0801d840
 801281c:	0801dab8 	.word	0x0801dab8
 8012820:	0801dad0 	.word	0x0801dad0
 8012824:	0801daec 	.word	0x0801daec
 8012828:	0801dafc 	.word	0x0801dafc

0801282c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b088      	sub	sp, #32
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	4611      	mov	r1, r2
 8012838:	461a      	mov	r2, r3
 801283a:	460b      	mov	r3, r1
 801283c:	80fb      	strh	r3, [r7, #6]
 801283e:	4613      	mov	r3, r2
 8012840:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012842:	2300      	movs	r3, #0
 8012844:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012846:	2300      	movs	r3, #0
 8012848:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d108      	bne.n	8012862 <pbuf_copy_partial+0x36>
 8012850:	4b2b      	ldr	r3, [pc, #172]	; (8012900 <pbuf_copy_partial+0xd4>)
 8012852:	f240 420a 	movw	r2, #1034	; 0x40a
 8012856:	492b      	ldr	r1, [pc, #172]	; (8012904 <pbuf_copy_partial+0xd8>)
 8012858:	482b      	ldr	r0, [pc, #172]	; (8012908 <pbuf_copy_partial+0xdc>)
 801285a:	f009 fa23 	bl	801bca4 <iprintf>
 801285e:	2300      	movs	r3, #0
 8012860:	e04a      	b.n	80128f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d108      	bne.n	801287a <pbuf_copy_partial+0x4e>
 8012868:	4b25      	ldr	r3, [pc, #148]	; (8012900 <pbuf_copy_partial+0xd4>)
 801286a:	f240 420b 	movw	r2, #1035	; 0x40b
 801286e:	4927      	ldr	r1, [pc, #156]	; (801290c <pbuf_copy_partial+0xe0>)
 8012870:	4825      	ldr	r0, [pc, #148]	; (8012908 <pbuf_copy_partial+0xdc>)
 8012872:	f009 fa17 	bl	801bca4 <iprintf>
 8012876:	2300      	movs	r3, #0
 8012878:	e03e      	b.n	80128f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	61fb      	str	r3, [r7, #28]
 801287e:	e034      	b.n	80128ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012880:	88bb      	ldrh	r3, [r7, #4]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d00a      	beq.n	801289c <pbuf_copy_partial+0x70>
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	895b      	ldrh	r3, [r3, #10]
 801288a:	88ba      	ldrh	r2, [r7, #4]
 801288c:	429a      	cmp	r2, r3
 801288e:	d305      	bcc.n	801289c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	895b      	ldrh	r3, [r3, #10]
 8012894:	88ba      	ldrh	r2, [r7, #4]
 8012896:	1ad3      	subs	r3, r2, r3
 8012898:	80bb      	strh	r3, [r7, #4]
 801289a:	e023      	b.n	80128e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	895a      	ldrh	r2, [r3, #10]
 80128a0:	88bb      	ldrh	r3, [r7, #4]
 80128a2:	1ad3      	subs	r3, r2, r3
 80128a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80128a6:	8b3a      	ldrh	r2, [r7, #24]
 80128a8:	88fb      	ldrh	r3, [r7, #6]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d901      	bls.n	80128b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80128ae:	88fb      	ldrh	r3, [r7, #6]
 80128b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80128b2:	8b7b      	ldrh	r3, [r7, #26]
 80128b4:	68ba      	ldr	r2, [r7, #8]
 80128b6:	18d0      	adds	r0, r2, r3
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	685a      	ldr	r2, [r3, #4]
 80128bc:	88bb      	ldrh	r3, [r7, #4]
 80128be:	4413      	add	r3, r2
 80128c0:	8b3a      	ldrh	r2, [r7, #24]
 80128c2:	4619      	mov	r1, r3
 80128c4:	f009 fb5f 	bl	801bf86 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80128c8:	8afa      	ldrh	r2, [r7, #22]
 80128ca:	8b3b      	ldrh	r3, [r7, #24]
 80128cc:	4413      	add	r3, r2
 80128ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80128d0:	8b7a      	ldrh	r2, [r7, #26]
 80128d2:	8b3b      	ldrh	r3, [r7, #24]
 80128d4:	4413      	add	r3, r2
 80128d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80128d8:	88fa      	ldrh	r2, [r7, #6]
 80128da:	8b3b      	ldrh	r3, [r7, #24]
 80128dc:	1ad3      	subs	r3, r2, r3
 80128de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80128e0:	2300      	movs	r3, #0
 80128e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80128e4:	69fb      	ldr	r3, [r7, #28]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	61fb      	str	r3, [r7, #28]
 80128ea:	88fb      	ldrh	r3, [r7, #6]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d002      	beq.n	80128f6 <pbuf_copy_partial+0xca>
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d1c4      	bne.n	8012880 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80128f6:	8afb      	ldrh	r3, [r7, #22]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3720      	adds	r7, #32
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	0801d7e0 	.word	0x0801d7e0
 8012904:	0801db28 	.word	0x0801db28
 8012908:	0801d840 	.word	0x0801d840
 801290c:	0801db48 	.word	0x0801db48

08012910 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	603a      	str	r2, [r7, #0]
 801291a:	71fb      	strb	r3, [r7, #7]
 801291c:	460b      	mov	r3, r1
 801291e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	8919      	ldrh	r1, [r3, #8]
 8012924:	88ba      	ldrh	r2, [r7, #4]
 8012926:	79fb      	ldrb	r3, [r7, #7]
 8012928:	4618      	mov	r0, r3
 801292a:	f7ff faa1 	bl	8011e70 <pbuf_alloc>
 801292e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d101      	bne.n	801293a <pbuf_clone+0x2a>
    return NULL;
 8012936:	2300      	movs	r3, #0
 8012938:	e011      	b.n	801295e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801293a:	6839      	ldr	r1, [r7, #0]
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ff fea3 	bl	8012688 <pbuf_copy>
 8012942:	4603      	mov	r3, r0
 8012944:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012946:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d006      	beq.n	801295c <pbuf_clone+0x4c>
 801294e:	4b06      	ldr	r3, [pc, #24]	; (8012968 <pbuf_clone+0x58>)
 8012950:	f240 5224 	movw	r2, #1316	; 0x524
 8012954:	4905      	ldr	r1, [pc, #20]	; (801296c <pbuf_clone+0x5c>)
 8012956:	4806      	ldr	r0, [pc, #24]	; (8012970 <pbuf_clone+0x60>)
 8012958:	f009 f9a4 	bl	801bca4 <iprintf>
  return q;
 801295c:	68fb      	ldr	r3, [r7, #12]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	0801d7e0 	.word	0x0801d7e0
 801296c:	0801dc54 	.word	0x0801dc54
 8012970:	0801d840 	.word	0x0801d840

08012974 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012978:	f009 f894 	bl	801baa4 <rand>
 801297c:	4603      	mov	r3, r0
 801297e:	b29b      	uxth	r3, r3
 8012980:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012984:	b29b      	uxth	r3, r3
 8012986:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801298a:	b29a      	uxth	r2, r3
 801298c:	4b01      	ldr	r3, [pc, #4]	; (8012994 <tcp_init+0x20>)
 801298e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012990:	bf00      	nop
 8012992:	bd80      	pop	{r7, pc}
 8012994:	20000078 	.word	0x20000078

08012998 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	7d1b      	ldrb	r3, [r3, #20]
 80129a4:	2b01      	cmp	r3, #1
 80129a6:	d105      	bne.n	80129b4 <tcp_free+0x1c>
 80129a8:	4b06      	ldr	r3, [pc, #24]	; (80129c4 <tcp_free+0x2c>)
 80129aa:	22d4      	movs	r2, #212	; 0xd4
 80129ac:	4906      	ldr	r1, [pc, #24]	; (80129c8 <tcp_free+0x30>)
 80129ae:	4807      	ldr	r0, [pc, #28]	; (80129cc <tcp_free+0x34>)
 80129b0:	f009 f978 	bl	801bca4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80129b4:	6879      	ldr	r1, [r7, #4]
 80129b6:	2001      	movs	r0, #1
 80129b8:	f7fe fec8 	bl	801174c <memp_free>
}
 80129bc:	bf00      	nop
 80129be:	3708      	adds	r7, #8
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	0801dce0 	.word	0x0801dce0
 80129c8:	0801dd10 	.word	0x0801dd10
 80129cc:	0801dd24 	.word	0x0801dd24

080129d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	7d1b      	ldrb	r3, [r3, #20]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d105      	bne.n	80129ec <tcp_free_listen+0x1c>
 80129e0:	4b06      	ldr	r3, [pc, #24]	; (80129fc <tcp_free_listen+0x2c>)
 80129e2:	22df      	movs	r2, #223	; 0xdf
 80129e4:	4906      	ldr	r1, [pc, #24]	; (8012a00 <tcp_free_listen+0x30>)
 80129e6:	4807      	ldr	r0, [pc, #28]	; (8012a04 <tcp_free_listen+0x34>)
 80129e8:	f009 f95c 	bl	801bca4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80129ec:	6879      	ldr	r1, [r7, #4]
 80129ee:	2002      	movs	r0, #2
 80129f0:	f7fe feac 	bl	801174c <memp_free>
}
 80129f4:	bf00      	nop
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	0801dce0 	.word	0x0801dce0
 8012a00:	0801dd4c 	.word	0x0801dd4c
 8012a04:	0801dd24 	.word	0x0801dd24

08012a08 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012a0c:	f001 f85e 	bl	8013acc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012a10:	4b07      	ldr	r3, [pc, #28]	; (8012a30 <tcp_tmr+0x28>)
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	3301      	adds	r3, #1
 8012a16:	b2da      	uxtb	r2, r3
 8012a18:	4b05      	ldr	r3, [pc, #20]	; (8012a30 <tcp_tmr+0x28>)
 8012a1a:	701a      	strb	r2, [r3, #0]
 8012a1c:	4b04      	ldr	r3, [pc, #16]	; (8012a30 <tcp_tmr+0x28>)
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	f003 0301 	and.w	r3, r3, #1
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d001      	beq.n	8012a2c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012a28:	f000 fd10 	bl	801344c <tcp_slowtmr>
  }
}
 8012a2c:	bf00      	nop
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	2000b465 	.word	0x2000b465

08012a34 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b084      	sub	sp, #16
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d105      	bne.n	8012a50 <tcp_remove_listener+0x1c>
 8012a44:	4b0d      	ldr	r3, [pc, #52]	; (8012a7c <tcp_remove_listener+0x48>)
 8012a46:	22ff      	movs	r2, #255	; 0xff
 8012a48:	490d      	ldr	r1, [pc, #52]	; (8012a80 <tcp_remove_listener+0x4c>)
 8012a4a:	480e      	ldr	r0, [pc, #56]	; (8012a84 <tcp_remove_listener+0x50>)
 8012a4c:	f009 f92a 	bl	801bca4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	60fb      	str	r3, [r7, #12]
 8012a54:	e00a      	b.n	8012a6c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d102      	bne.n	8012a66 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2200      	movs	r2, #0
 8012a64:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	60fb      	str	r3, [r7, #12]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1f1      	bne.n	8012a56 <tcp_remove_listener+0x22>
    }
  }
}
 8012a72:	bf00      	nop
 8012a74:	bf00      	nop
 8012a76:	3710      	adds	r7, #16
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	0801dce0 	.word	0x0801dce0
 8012a80:	0801dd68 	.word	0x0801dd68
 8012a84:	0801dd24 	.word	0x0801dd24

08012a88 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d106      	bne.n	8012aa4 <tcp_listen_closed+0x1c>
 8012a96:	4b14      	ldr	r3, [pc, #80]	; (8012ae8 <tcp_listen_closed+0x60>)
 8012a98:	f240 1211 	movw	r2, #273	; 0x111
 8012a9c:	4913      	ldr	r1, [pc, #76]	; (8012aec <tcp_listen_closed+0x64>)
 8012a9e:	4814      	ldr	r0, [pc, #80]	; (8012af0 <tcp_listen_closed+0x68>)
 8012aa0:	f009 f900 	bl	801bca4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	7d1b      	ldrb	r3, [r3, #20]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d006      	beq.n	8012aba <tcp_listen_closed+0x32>
 8012aac:	4b0e      	ldr	r3, [pc, #56]	; (8012ae8 <tcp_listen_closed+0x60>)
 8012aae:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012ab2:	4910      	ldr	r1, [pc, #64]	; (8012af4 <tcp_listen_closed+0x6c>)
 8012ab4:	480e      	ldr	r0, [pc, #56]	; (8012af0 <tcp_listen_closed+0x68>)
 8012ab6:	f009 f8f5 	bl	801bca4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012aba:	2301      	movs	r3, #1
 8012abc:	60fb      	str	r3, [r7, #12]
 8012abe:	e00b      	b.n	8012ad8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012ac0:	4a0d      	ldr	r2, [pc, #52]	; (8012af8 <tcp_listen_closed+0x70>)
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	6879      	ldr	r1, [r7, #4]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7ff ffb1 	bl	8012a34 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	60fb      	str	r3, [r7, #12]
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	d9f0      	bls.n	8012ac0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012ade:	bf00      	nop
 8012ae0:	bf00      	nop
 8012ae2:	3710      	adds	r7, #16
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	0801dce0 	.word	0x0801dce0
 8012aec:	0801dd90 	.word	0x0801dd90
 8012af0:	0801dd24 	.word	0x0801dd24
 8012af4:	0801dd9c 	.word	0x0801dd9c
 8012af8:	0801fe60 	.word	0x0801fe60

08012afc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012afc:	b5b0      	push	{r4, r5, r7, lr}
 8012afe:	b088      	sub	sp, #32
 8012b00:	af04      	add	r7, sp, #16
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	460b      	mov	r3, r1
 8012b06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d106      	bne.n	8012b1c <tcp_close_shutdown+0x20>
 8012b0e:	4b63      	ldr	r3, [pc, #396]	; (8012c9c <tcp_close_shutdown+0x1a0>)
 8012b10:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012b14:	4962      	ldr	r1, [pc, #392]	; (8012ca0 <tcp_close_shutdown+0x1a4>)
 8012b16:	4863      	ldr	r0, [pc, #396]	; (8012ca4 <tcp_close_shutdown+0x1a8>)
 8012b18:	f009 f8c4 	bl	801bca4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012b1c:	78fb      	ldrb	r3, [r7, #3]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d067      	beq.n	8012bf2 <tcp_close_shutdown+0xf6>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	7d1b      	ldrb	r3, [r3, #20]
 8012b26:	2b04      	cmp	r3, #4
 8012b28:	d003      	beq.n	8012b32 <tcp_close_shutdown+0x36>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	7d1b      	ldrb	r3, [r3, #20]
 8012b2e:	2b07      	cmp	r3, #7
 8012b30:	d15f      	bne.n	8012bf2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d105      	bne.n	8012b46 <tcp_close_shutdown+0x4a>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b3e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d055      	beq.n	8012bf2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8b5b      	ldrh	r3, [r3, #26]
 8012b4a:	f003 0310 	and.w	r3, r3, #16
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d106      	bne.n	8012b60 <tcp_close_shutdown+0x64>
 8012b52:	4b52      	ldr	r3, [pc, #328]	; (8012c9c <tcp_close_shutdown+0x1a0>)
 8012b54:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012b58:	4953      	ldr	r1, [pc, #332]	; (8012ca8 <tcp_close_shutdown+0x1ac>)
 8012b5a:	4852      	ldr	r0, [pc, #328]	; (8012ca4 <tcp_close_shutdown+0x1a8>)
 8012b5c:	f009 f8a2 	bl	801bca4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012b68:	687d      	ldr	r5, [r7, #4]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	3304      	adds	r3, #4
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	8ad2      	ldrh	r2, [r2, #22]
 8012b72:	6879      	ldr	r1, [r7, #4]
 8012b74:	8b09      	ldrh	r1, [r1, #24]
 8012b76:	9102      	str	r1, [sp, #8]
 8012b78:	9201      	str	r2, [sp, #4]
 8012b7a:	9300      	str	r3, [sp, #0]
 8012b7c:	462b      	mov	r3, r5
 8012b7e:	4622      	mov	r2, r4
 8012b80:	4601      	mov	r1, r0
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f005 fd8c 	bl	80186a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f001 fb69 	bl	8014260 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012b8e:	4b47      	ldr	r3, [pc, #284]	; (8012cac <tcp_close_shutdown+0x1b0>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d105      	bne.n	8012ba4 <tcp_close_shutdown+0xa8>
 8012b98:	4b44      	ldr	r3, [pc, #272]	; (8012cac <tcp_close_shutdown+0x1b0>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	4a43      	ldr	r2, [pc, #268]	; (8012cac <tcp_close_shutdown+0x1b0>)
 8012ba0:	6013      	str	r3, [r2, #0]
 8012ba2:	e013      	b.n	8012bcc <tcp_close_shutdown+0xd0>
 8012ba4:	4b41      	ldr	r3, [pc, #260]	; (8012cac <tcp_close_shutdown+0x1b0>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	60fb      	str	r3, [r7, #12]
 8012baa:	e00c      	b.n	8012bc6 <tcp_close_shutdown+0xca>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d104      	bne.n	8012bc0 <tcp_close_shutdown+0xc4>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	68da      	ldr	r2, [r3, #12]
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	60da      	str	r2, [r3, #12]
 8012bbe:	e005      	b.n	8012bcc <tcp_close_shutdown+0xd0>
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	60fb      	str	r3, [r7, #12]
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d1ef      	bne.n	8012bac <tcp_close_shutdown+0xb0>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	60da      	str	r2, [r3, #12]
 8012bd2:	4b37      	ldr	r3, [pc, #220]	; (8012cb0 <tcp_close_shutdown+0x1b4>)
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012bd8:	4b36      	ldr	r3, [pc, #216]	; (8012cb4 <tcp_close_shutdown+0x1b8>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d102      	bne.n	8012be8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012be2:	f004 f801 	bl	8016be8 <tcp_trigger_input_pcb_close>
 8012be6:	e002      	b.n	8012bee <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7ff fed5 	bl	8012998 <tcp_free>
      }
      return ERR_OK;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e050      	b.n	8012c94 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	7d1b      	ldrb	r3, [r3, #20]
 8012bf6:	2b02      	cmp	r3, #2
 8012bf8:	d03b      	beq.n	8012c72 <tcp_close_shutdown+0x176>
 8012bfa:	2b02      	cmp	r3, #2
 8012bfc:	dc44      	bgt.n	8012c88 <tcp_close_shutdown+0x18c>
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d002      	beq.n	8012c08 <tcp_close_shutdown+0x10c>
 8012c02:	2b01      	cmp	r3, #1
 8012c04:	d02a      	beq.n	8012c5c <tcp_close_shutdown+0x160>
 8012c06:	e03f      	b.n	8012c88 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	8adb      	ldrh	r3, [r3, #22]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d021      	beq.n	8012c54 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012c10:	4b29      	ldr	r3, [pc, #164]	; (8012cb8 <tcp_close_shutdown+0x1bc>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d105      	bne.n	8012c26 <tcp_close_shutdown+0x12a>
 8012c1a:	4b27      	ldr	r3, [pc, #156]	; (8012cb8 <tcp_close_shutdown+0x1bc>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	68db      	ldr	r3, [r3, #12]
 8012c20:	4a25      	ldr	r2, [pc, #148]	; (8012cb8 <tcp_close_shutdown+0x1bc>)
 8012c22:	6013      	str	r3, [r2, #0]
 8012c24:	e013      	b.n	8012c4e <tcp_close_shutdown+0x152>
 8012c26:	4b24      	ldr	r3, [pc, #144]	; (8012cb8 <tcp_close_shutdown+0x1bc>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	60bb      	str	r3, [r7, #8]
 8012c2c:	e00c      	b.n	8012c48 <tcp_close_shutdown+0x14c>
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d104      	bne.n	8012c42 <tcp_close_shutdown+0x146>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	68da      	ldr	r2, [r3, #12]
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	60da      	str	r2, [r3, #12]
 8012c40:	e005      	b.n	8012c4e <tcp_close_shutdown+0x152>
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	60bb      	str	r3, [r7, #8]
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d1ef      	bne.n	8012c2e <tcp_close_shutdown+0x132>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2200      	movs	r2, #0
 8012c52:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f7ff fe9f 	bl	8012998 <tcp_free>
      break;
 8012c5a:	e01a      	b.n	8012c92 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ff ff13 	bl	8012a88 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012c62:	6879      	ldr	r1, [r7, #4]
 8012c64:	4815      	ldr	r0, [pc, #84]	; (8012cbc <tcp_close_shutdown+0x1c0>)
 8012c66:	f001 fb4b 	bl	8014300 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f7ff feb0 	bl	80129d0 <tcp_free_listen>
      break;
 8012c70:	e00f      	b.n	8012c92 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012c72:	6879      	ldr	r1, [r7, #4]
 8012c74:	480d      	ldr	r0, [pc, #52]	; (8012cac <tcp_close_shutdown+0x1b0>)
 8012c76:	f001 fb43 	bl	8014300 <tcp_pcb_remove>
 8012c7a:	4b0d      	ldr	r3, [pc, #52]	; (8012cb0 <tcp_close_shutdown+0x1b4>)
 8012c7c:	2201      	movs	r2, #1
 8012c7e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7ff fe89 	bl	8012998 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012c86:	e004      	b.n	8012c92 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f819 	bl	8012cc0 <tcp_close_shutdown_fin>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	e000      	b.n	8012c94 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8012c92:	2300      	movs	r3, #0
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3710      	adds	r7, #16
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8012c9c:	0801dce0 	.word	0x0801dce0
 8012ca0:	0801ddb4 	.word	0x0801ddb4
 8012ca4:	0801dd24 	.word	0x0801dd24
 8012ca8:	0801ddd4 	.word	0x0801ddd4
 8012cac:	2000b45c 	.word	0x2000b45c
 8012cb0:	2000b464 	.word	0x2000b464
 8012cb4:	2000b49c 	.word	0x2000b49c
 8012cb8:	2000b454 	.word	0x2000b454
 8012cbc:	2000b458 	.word	0x2000b458

08012cc0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d106      	bne.n	8012cdc <tcp_close_shutdown_fin+0x1c>
 8012cce:	4b2e      	ldr	r3, [pc, #184]	; (8012d88 <tcp_close_shutdown_fin+0xc8>)
 8012cd0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012cd4:	492d      	ldr	r1, [pc, #180]	; (8012d8c <tcp_close_shutdown_fin+0xcc>)
 8012cd6:	482e      	ldr	r0, [pc, #184]	; (8012d90 <tcp_close_shutdown_fin+0xd0>)
 8012cd8:	f008 ffe4 	bl	801bca4 <iprintf>

  switch (pcb->state) {
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	7d1b      	ldrb	r3, [r3, #20]
 8012ce0:	2b07      	cmp	r3, #7
 8012ce2:	d020      	beq.n	8012d26 <tcp_close_shutdown_fin+0x66>
 8012ce4:	2b07      	cmp	r3, #7
 8012ce6:	dc2b      	bgt.n	8012d40 <tcp_close_shutdown_fin+0x80>
 8012ce8:	2b03      	cmp	r3, #3
 8012cea:	d002      	beq.n	8012cf2 <tcp_close_shutdown_fin+0x32>
 8012cec:	2b04      	cmp	r3, #4
 8012cee:	d00d      	beq.n	8012d0c <tcp_close_shutdown_fin+0x4c>
 8012cf0:	e026      	b.n	8012d40 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f004 fde2 	bl	80178bc <tcp_send_fin>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d11f      	bne.n	8012d44 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2205      	movs	r2, #5
 8012d08:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012d0a:	e01b      	b.n	8012d44 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f004 fdd5 	bl	80178bc <tcp_send_fin>
 8012d12:	4603      	mov	r3, r0
 8012d14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d114      	bne.n	8012d48 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2205      	movs	r2, #5
 8012d22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012d24:	e010      	b.n	8012d48 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f004 fdc8 	bl	80178bc <tcp_send_fin>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d109      	bne.n	8012d4c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2209      	movs	r2, #9
 8012d3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012d3e:	e005      	b.n	8012d4c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012d40:	2300      	movs	r3, #0
 8012d42:	e01c      	b.n	8012d7e <tcp_close_shutdown_fin+0xbe>
      break;
 8012d44:	bf00      	nop
 8012d46:	e002      	b.n	8012d4e <tcp_close_shutdown_fin+0x8e>
      break;
 8012d48:	bf00      	nop
 8012d4a:	e000      	b.n	8012d4e <tcp_close_shutdown_fin+0x8e>
      break;
 8012d4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d103      	bne.n	8012d5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f004 feee 	bl	8017b38 <tcp_output>
 8012d5c:	e00d      	b.n	8012d7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d66:	d108      	bne.n	8012d7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	8b5b      	ldrh	r3, [r3, #26]
 8012d6c:	f043 0308 	orr.w	r3, r3, #8
 8012d70:	b29a      	uxth	r2, r3
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012d76:	2300      	movs	r3, #0
 8012d78:	e001      	b.n	8012d7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	0801dce0 	.word	0x0801dce0
 8012d8c:	0801dd90 	.word	0x0801dd90
 8012d90:	0801dd24 	.word	0x0801dd24

08012d94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d109      	bne.n	8012db6 <tcp_close+0x22>
 8012da2:	4b0f      	ldr	r3, [pc, #60]	; (8012de0 <tcp_close+0x4c>)
 8012da4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012da8:	490e      	ldr	r1, [pc, #56]	; (8012de4 <tcp_close+0x50>)
 8012daa:	480f      	ldr	r0, [pc, #60]	; (8012de8 <tcp_close+0x54>)
 8012dac:	f008 ff7a 	bl	801bca4 <iprintf>
 8012db0:	f06f 030f 	mvn.w	r3, #15
 8012db4:	e00f      	b.n	8012dd6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	7d1b      	ldrb	r3, [r3, #20]
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d006      	beq.n	8012dcc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	8b5b      	ldrh	r3, [r3, #26]
 8012dc2:	f043 0310 	orr.w	r3, r3, #16
 8012dc6:	b29a      	uxth	r2, r3
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012dcc:	2101      	movs	r1, #1
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f7ff fe94 	bl	8012afc <tcp_close_shutdown>
 8012dd4:	4603      	mov	r3, r0
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3708      	adds	r7, #8
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	0801dce0 	.word	0x0801dce0
 8012de4:	0801ddf0 	.word	0x0801ddf0
 8012de8:	0801dd24 	.word	0x0801dd24

08012dec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b08e      	sub	sp, #56	; 0x38
 8012df0:	af04      	add	r7, sp, #16
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d107      	bne.n	8012e0c <tcp_abandon+0x20>
 8012dfc:	4b52      	ldr	r3, [pc, #328]	; (8012f48 <tcp_abandon+0x15c>)
 8012dfe:	f240 223d 	movw	r2, #573	; 0x23d
 8012e02:	4952      	ldr	r1, [pc, #328]	; (8012f4c <tcp_abandon+0x160>)
 8012e04:	4852      	ldr	r0, [pc, #328]	; (8012f50 <tcp_abandon+0x164>)
 8012e06:	f008 ff4d 	bl	801bca4 <iprintf>
 8012e0a:	e099      	b.n	8012f40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	7d1b      	ldrb	r3, [r3, #20]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d106      	bne.n	8012e22 <tcp_abandon+0x36>
 8012e14:	4b4c      	ldr	r3, [pc, #304]	; (8012f48 <tcp_abandon+0x15c>)
 8012e16:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012e1a:	494e      	ldr	r1, [pc, #312]	; (8012f54 <tcp_abandon+0x168>)
 8012e1c:	484c      	ldr	r0, [pc, #304]	; (8012f50 <tcp_abandon+0x164>)
 8012e1e:	f008 ff41 	bl	801bca4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	7d1b      	ldrb	r3, [r3, #20]
 8012e26:	2b0a      	cmp	r3, #10
 8012e28:	d107      	bne.n	8012e3a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012e2a:	6879      	ldr	r1, [r7, #4]
 8012e2c:	484a      	ldr	r0, [pc, #296]	; (8012f58 <tcp_abandon+0x16c>)
 8012e2e:	f001 fa67 	bl	8014300 <tcp_pcb_remove>
    tcp_free(pcb);
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f7ff fdb0 	bl	8012998 <tcp_free>
 8012e38:	e082      	b.n	8012f40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e46:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e4c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e54:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	691b      	ldr	r3, [r3, #16]
 8012e5a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	7d1b      	ldrb	r3, [r3, #20]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d126      	bne.n	8012eb2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	8adb      	ldrh	r3, [r3, #22]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d02e      	beq.n	8012eca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012e6c:	4b3b      	ldr	r3, [pc, #236]	; (8012f5c <tcp_abandon+0x170>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d105      	bne.n	8012e82 <tcp_abandon+0x96>
 8012e76:	4b39      	ldr	r3, [pc, #228]	; (8012f5c <tcp_abandon+0x170>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	4a37      	ldr	r2, [pc, #220]	; (8012f5c <tcp_abandon+0x170>)
 8012e7e:	6013      	str	r3, [r2, #0]
 8012e80:	e013      	b.n	8012eaa <tcp_abandon+0xbe>
 8012e82:	4b36      	ldr	r3, [pc, #216]	; (8012f5c <tcp_abandon+0x170>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	61fb      	str	r3, [r7, #28]
 8012e88:	e00c      	b.n	8012ea4 <tcp_abandon+0xb8>
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d104      	bne.n	8012e9e <tcp_abandon+0xb2>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	68da      	ldr	r2, [r3, #12]
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	60da      	str	r2, [r3, #12]
 8012e9c:	e005      	b.n	8012eaa <tcp_abandon+0xbe>
 8012e9e:	69fb      	ldr	r3, [r7, #28]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	61fb      	str	r3, [r7, #28]
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1ef      	bne.n	8012e8a <tcp_abandon+0x9e>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	60da      	str	r2, [r3, #12]
 8012eb0:	e00b      	b.n	8012eca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	8adb      	ldrh	r3, [r3, #22]
 8012eba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012ebc:	6879      	ldr	r1, [r7, #4]
 8012ebe:	4828      	ldr	r0, [pc, #160]	; (8012f60 <tcp_abandon+0x174>)
 8012ec0:	f001 fa1e 	bl	8014300 <tcp_pcb_remove>
 8012ec4:	4b27      	ldr	r3, [pc, #156]	; (8012f64 <tcp_abandon+0x178>)
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d004      	beq.n	8012edc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f000 feda 	bl	8013c90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d004      	beq.n	8012eee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f000 fed1 	bl	8013c90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d004      	beq.n	8012f00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 fec8 	bl	8013c90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d00e      	beq.n	8012f24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012f06:	6879      	ldr	r1, [r7, #4]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	3304      	adds	r3, #4
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	8b12      	ldrh	r2, [r2, #24]
 8012f10:	9202      	str	r2, [sp, #8]
 8012f12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f14:	9201      	str	r2, [sp, #4]
 8012f16:	9300      	str	r3, [sp, #0]
 8012f18:	460b      	mov	r3, r1
 8012f1a:	697a      	ldr	r2, [r7, #20]
 8012f1c:	69b9      	ldr	r1, [r7, #24]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f005 fbbe 	bl	80186a0 <tcp_rst>
    }
    last_state = pcb->state;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	7d1b      	ldrb	r3, [r3, #20]
 8012f28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7ff fd34 	bl	8012998 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d004      	beq.n	8012f40 <tcp_abandon+0x154>
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	f06f 010c 	mvn.w	r1, #12
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	4798      	blx	r3
  }
}
 8012f40:	3728      	adds	r7, #40	; 0x28
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	0801dce0 	.word	0x0801dce0
 8012f4c:	0801de24 	.word	0x0801de24
 8012f50:	0801dd24 	.word	0x0801dd24
 8012f54:	0801de40 	.word	0x0801de40
 8012f58:	2000b460 	.word	0x2000b460
 8012f5c:	2000b454 	.word	0x2000b454
 8012f60:	2000b45c 	.word	0x2000b45c
 8012f64:	2000b464 	.word	0x2000b464

08012f68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012f70:	2101      	movs	r1, #1
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7ff ff3a 	bl	8012dec <tcp_abandon>
}
 8012f78:	bf00      	nop
 8012f7a:	3708      	adds	r7, #8
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}

08012f80 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b088      	sub	sp, #32
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012f8e:	2304      	movs	r3, #4
 8012f90:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d101      	bne.n	8012f9c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012f98:	4b3e      	ldr	r3, [pc, #248]	; (8013094 <tcp_bind+0x114>)
 8012f9a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d109      	bne.n	8012fb6 <tcp_bind+0x36>
 8012fa2:	4b3d      	ldr	r3, [pc, #244]	; (8013098 <tcp_bind+0x118>)
 8012fa4:	f240 22a9 	movw	r2, #681	; 0x2a9
 8012fa8:	493c      	ldr	r1, [pc, #240]	; (801309c <tcp_bind+0x11c>)
 8012faa:	483d      	ldr	r0, [pc, #244]	; (80130a0 <tcp_bind+0x120>)
 8012fac:	f008 fe7a 	bl	801bca4 <iprintf>
 8012fb0:	f06f 030f 	mvn.w	r3, #15
 8012fb4:	e06a      	b.n	801308c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	7d1b      	ldrb	r3, [r3, #20]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d009      	beq.n	8012fd2 <tcp_bind+0x52>
 8012fbe:	4b36      	ldr	r3, [pc, #216]	; (8013098 <tcp_bind+0x118>)
 8012fc0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012fc4:	4937      	ldr	r1, [pc, #220]	; (80130a4 <tcp_bind+0x124>)
 8012fc6:	4836      	ldr	r0, [pc, #216]	; (80130a0 <tcp_bind+0x120>)
 8012fc8:	f008 fe6c 	bl	801bca4 <iprintf>
 8012fcc:	f06f 0305 	mvn.w	r3, #5
 8012fd0:	e05c      	b.n	801308c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012fd2:	88fb      	ldrh	r3, [r7, #6]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d109      	bne.n	8012fec <tcp_bind+0x6c>
    port = tcp_new_port();
 8012fd8:	f000 f9f2 	bl	80133c0 <tcp_new_port>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012fe0:	88fb      	ldrh	r3, [r7, #6]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d135      	bne.n	8013052 <tcp_bind+0xd2>
      return ERR_BUF;
 8012fe6:	f06f 0301 	mvn.w	r3, #1
 8012fea:	e04f      	b.n	801308c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012fec:	2300      	movs	r3, #0
 8012fee:	61fb      	str	r3, [r7, #28]
 8012ff0:	e02b      	b.n	801304a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012ff2:	4a2d      	ldr	r2, [pc, #180]	; (80130a8 <tcp_bind+0x128>)
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	61bb      	str	r3, [r7, #24]
 8012ffe:	e01e      	b.n	801303e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013000:	69bb      	ldr	r3, [r7, #24]
 8013002:	8adb      	ldrh	r3, [r3, #22]
 8013004:	88fa      	ldrh	r2, [r7, #6]
 8013006:	429a      	cmp	r2, r3
 8013008:	d116      	bne.n	8013038 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801300a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801300c:	2b00      	cmp	r3, #0
 801300e:	d010      	beq.n	8013032 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013010:	69bb      	ldr	r3, [r7, #24]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d00c      	beq.n	8013032 <tcp_bind+0xb2>
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d009      	beq.n	8013032 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d005      	beq.n	8013032 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	681a      	ldr	r2, [r3, #0]
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801302e:	429a      	cmp	r2, r3
 8013030:	d102      	bne.n	8013038 <tcp_bind+0xb8>
              return ERR_USE;
 8013032:	f06f 0307 	mvn.w	r3, #7
 8013036:	e029      	b.n	801308c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	68db      	ldr	r3, [r3, #12]
 801303c:	61bb      	str	r3, [r7, #24]
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d1dd      	bne.n	8013000 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	3301      	adds	r3, #1
 8013048:	61fb      	str	r3, [r7, #28]
 801304a:	69fa      	ldr	r2, [r7, #28]
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	429a      	cmp	r2, r3
 8013050:	dbcf      	blt.n	8012ff2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d00c      	beq.n	8013072 <tcp_bind+0xf2>
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d008      	beq.n	8013072 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d002      	beq.n	801306c <tcp_bind+0xec>
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	e000      	b.n	801306e <tcp_bind+0xee>
 801306c:	2300      	movs	r3, #0
 801306e:	68fa      	ldr	r2, [r7, #12]
 8013070:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	88fa      	ldrh	r2, [r7, #6]
 8013076:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013078:	4b0c      	ldr	r3, [pc, #48]	; (80130ac <tcp_bind+0x12c>)
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	60da      	str	r2, [r3, #12]
 8013080:	4a0a      	ldr	r2, [pc, #40]	; (80130ac <tcp_bind+0x12c>)
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6013      	str	r3, [r2, #0]
 8013086:	f005 fccd 	bl	8018a24 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3720      	adds	r7, #32
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	0801fe88 	.word	0x0801fe88
 8013098:	0801dce0 	.word	0x0801dce0
 801309c:	0801de74 	.word	0x0801de74
 80130a0:	0801dd24 	.word	0x0801dd24
 80130a4:	0801de8c 	.word	0x0801de8c
 80130a8:	0801fe60 	.word	0x0801fe60
 80130ac:	2000b454 	.word	0x2000b454

080130b0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	4613      	mov	r3, r2
 80130bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d106      	bne.n	80130d2 <tcp_accept_null+0x22>
 80130c4:	4b07      	ldr	r3, [pc, #28]	; (80130e4 <tcp_accept_null+0x34>)
 80130c6:	f240 320f 	movw	r2, #783	; 0x30f
 80130ca:	4907      	ldr	r1, [pc, #28]	; (80130e8 <tcp_accept_null+0x38>)
 80130cc:	4807      	ldr	r0, [pc, #28]	; (80130ec <tcp_accept_null+0x3c>)
 80130ce:	f008 fde9 	bl	801bca4 <iprintf>

  tcp_abort(pcb);
 80130d2:	68b8      	ldr	r0, [r7, #8]
 80130d4:	f7ff ff48 	bl	8012f68 <tcp_abort>

  return ERR_ABRT;
 80130d8:	f06f 030c 	mvn.w	r3, #12
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3710      	adds	r7, #16
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	0801dce0 	.word	0x0801dce0
 80130e8:	0801deb4 	.word	0x0801deb4
 80130ec:	0801dd24 	.word	0x0801dd24

080130f0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b082      	sub	sp, #8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	460b      	mov	r3, r1
 80130fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80130fc:	78fb      	ldrb	r3, [r7, #3]
 80130fe:	2200      	movs	r2, #0
 8013100:	4619      	mov	r1, r3
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 f806 	bl	8013114 <tcp_listen_with_backlog_and_err>
 8013108:	4603      	mov	r3, r0
}
 801310a:	4618      	mov	r0, r3
 801310c:	3708      	adds	r7, #8
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
	...

08013114 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b088      	sub	sp, #32
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	460b      	mov	r3, r1
 801311e:	607a      	str	r2, [r7, #4]
 8013120:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013122:	2300      	movs	r3, #0
 8013124:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d109      	bne.n	8013140 <tcp_listen_with_backlog_and_err+0x2c>
 801312c:	4b47      	ldr	r3, [pc, #284]	; (801324c <tcp_listen_with_backlog_and_err+0x138>)
 801312e:	f240 3259 	movw	r2, #857	; 0x359
 8013132:	4947      	ldr	r1, [pc, #284]	; (8013250 <tcp_listen_with_backlog_and_err+0x13c>)
 8013134:	4847      	ldr	r0, [pc, #284]	; (8013254 <tcp_listen_with_backlog_and_err+0x140>)
 8013136:	f008 fdb5 	bl	801bca4 <iprintf>
 801313a:	23f0      	movs	r3, #240	; 0xf0
 801313c:	76fb      	strb	r3, [r7, #27]
 801313e:	e079      	b.n	8013234 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	7d1b      	ldrb	r3, [r3, #20]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d009      	beq.n	801315c <tcp_listen_with_backlog_and_err+0x48>
 8013148:	4b40      	ldr	r3, [pc, #256]	; (801324c <tcp_listen_with_backlog_and_err+0x138>)
 801314a:	f240 325a 	movw	r2, #858	; 0x35a
 801314e:	4942      	ldr	r1, [pc, #264]	; (8013258 <tcp_listen_with_backlog_and_err+0x144>)
 8013150:	4840      	ldr	r0, [pc, #256]	; (8013254 <tcp_listen_with_backlog_and_err+0x140>)
 8013152:	f008 fda7 	bl	801bca4 <iprintf>
 8013156:	23f1      	movs	r3, #241	; 0xf1
 8013158:	76fb      	strb	r3, [r7, #27]
 801315a:	e06b      	b.n	8013234 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	7d1b      	ldrb	r3, [r3, #20]
 8013160:	2b01      	cmp	r3, #1
 8013162:	d104      	bne.n	801316e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013168:	23f7      	movs	r3, #247	; 0xf7
 801316a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801316c:	e062      	b.n	8013234 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801316e:	2002      	movs	r0, #2
 8013170:	f7fe fa7c 	bl	801166c <memp_malloc>
 8013174:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d102      	bne.n	8013182 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801317c:	23ff      	movs	r3, #255	; 0xff
 801317e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013180:	e058      	b.n	8013234 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	691a      	ldr	r2, [r3, #16]
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	8ada      	ldrh	r2, [r3, #22]
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013192:	69fb      	ldr	r3, [r7, #28]
 8013194:	2201      	movs	r2, #1
 8013196:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	7d5a      	ldrb	r2, [r3, #21]
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	7a5a      	ldrb	r2, [r3, #9]
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	2200      	movs	r2, #0
 80131ac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	7ada      	ldrb	r2, [r3, #11]
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	7a9a      	ldrb	r2, [r3, #10]
 80131ba:	69fb      	ldr	r3, [r7, #28]
 80131bc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	8adb      	ldrh	r3, [r3, #22]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d021      	beq.n	8013212 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80131ce:	4b23      	ldr	r3, [pc, #140]	; (801325c <tcp_listen_with_backlog_and_err+0x148>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	68fa      	ldr	r2, [r7, #12]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d105      	bne.n	80131e4 <tcp_listen_with_backlog_and_err+0xd0>
 80131d8:	4b20      	ldr	r3, [pc, #128]	; (801325c <tcp_listen_with_backlog_and_err+0x148>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	4a1f      	ldr	r2, [pc, #124]	; (801325c <tcp_listen_with_backlog_and_err+0x148>)
 80131e0:	6013      	str	r3, [r2, #0]
 80131e2:	e013      	b.n	801320c <tcp_listen_with_backlog_and_err+0xf8>
 80131e4:	4b1d      	ldr	r3, [pc, #116]	; (801325c <tcp_listen_with_backlog_and_err+0x148>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	617b      	str	r3, [r7, #20]
 80131ea:	e00c      	b.n	8013206 <tcp_listen_with_backlog_and_err+0xf2>
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	68fa      	ldr	r2, [r7, #12]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d104      	bne.n	8013200 <tcp_listen_with_backlog_and_err+0xec>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	68da      	ldr	r2, [r3, #12]
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	60da      	str	r2, [r3, #12]
 80131fe:	e005      	b.n	801320c <tcp_listen_with_backlog_and_err+0xf8>
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	68db      	ldr	r3, [r3, #12]
 8013204:	617b      	str	r3, [r7, #20]
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d1ef      	bne.n	80131ec <tcp_listen_with_backlog_and_err+0xd8>
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2200      	movs	r2, #0
 8013210:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013212:	68f8      	ldr	r0, [r7, #12]
 8013214:	f7ff fbc0 	bl	8012998 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	4a11      	ldr	r2, [pc, #68]	; (8013260 <tcp_listen_with_backlog_and_err+0x14c>)
 801321c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801321e:	4b11      	ldr	r3, [pc, #68]	; (8013264 <tcp_listen_with_backlog_and_err+0x150>)
 8013220:	681a      	ldr	r2, [r3, #0]
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	60da      	str	r2, [r3, #12]
 8013226:	4a0f      	ldr	r2, [pc, #60]	; (8013264 <tcp_listen_with_backlog_and_err+0x150>)
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	6013      	str	r3, [r2, #0]
 801322c:	f005 fbfa 	bl	8018a24 <tcp_timer_needed>
  res = ERR_OK;
 8013230:	2300      	movs	r3, #0
 8013232:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d002      	beq.n	8013240 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	7efa      	ldrb	r2, [r7, #27]
 801323e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013240:	69fb      	ldr	r3, [r7, #28]
}
 8013242:	4618      	mov	r0, r3
 8013244:	3720      	adds	r7, #32
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	0801dce0 	.word	0x0801dce0
 8013250:	0801ded4 	.word	0x0801ded4
 8013254:	0801dd24 	.word	0x0801dd24
 8013258:	0801df04 	.word	0x0801df04
 801325c:	2000b454 	.word	0x2000b454
 8013260:	080130b1 	.word	0x080130b1
 8013264:	2000b458 	.word	0x2000b458

08013268 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d106      	bne.n	8013284 <tcp_update_rcv_ann_wnd+0x1c>
 8013276:	4b25      	ldr	r3, [pc, #148]	; (801330c <tcp_update_rcv_ann_wnd+0xa4>)
 8013278:	f240 32a6 	movw	r2, #934	; 0x3a6
 801327c:	4924      	ldr	r1, [pc, #144]	; (8013310 <tcp_update_rcv_ann_wnd+0xa8>)
 801327e:	4825      	ldr	r0, [pc, #148]	; (8013314 <tcp_update_rcv_ann_wnd+0xac>)
 8013280:	f008 fd10 	bl	801bca4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801328c:	4413      	add	r3, r2
 801328e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013298:	f640 3168 	movw	r1, #2920	; 0xb68
 801329c:	428a      	cmp	r2, r1
 801329e:	bf28      	it	cs
 80132a0:	460a      	movcs	r2, r1
 80132a2:	b292      	uxth	r2, r2
 80132a4:	4413      	add	r3, r2
 80132a6:	68fa      	ldr	r2, [r7, #12]
 80132a8:	1ad3      	subs	r3, r2, r3
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	db08      	blt.n	80132c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ba:	68fa      	ldr	r2, [r7, #12]
 80132bc:	1ad3      	subs	r3, r2, r3
 80132be:	e020      	b.n	8013302 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132c8:	1ad3      	subs	r3, r2, r3
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	dd03      	ble.n	80132d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2200      	movs	r2, #0
 80132d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80132d4:	e014      	b.n	8013300 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132e8:	d306      	bcc.n	80132f8 <tcp_update_rcv_ann_wnd+0x90>
 80132ea:	4b08      	ldr	r3, [pc, #32]	; (801330c <tcp_update_rcv_ann_wnd+0xa4>)
 80132ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 80132f0:	4909      	ldr	r1, [pc, #36]	; (8013318 <tcp_update_rcv_ann_wnd+0xb0>)
 80132f2:	4808      	ldr	r0, [pc, #32]	; (8013314 <tcp_update_rcv_ann_wnd+0xac>)
 80132f4:	f008 fcd6 	bl	801bca4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	b29a      	uxth	r2, r3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013300:	2300      	movs	r3, #0
  }
}
 8013302:	4618      	mov	r0, r3
 8013304:	3710      	adds	r7, #16
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
 801330a:	bf00      	nop
 801330c:	0801dce0 	.word	0x0801dce0
 8013310:	0801df3c 	.word	0x0801df3c
 8013314:	0801dd24 	.word	0x0801dd24
 8013318:	0801df60 	.word	0x0801df60

0801331c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	460b      	mov	r3, r1
 8013326:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d107      	bne.n	801333e <tcp_recved+0x22>
 801332e:	4b20      	ldr	r3, [pc, #128]	; (80133b0 <tcp_recved+0x94>)
 8013330:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013334:	491f      	ldr	r1, [pc, #124]	; (80133b4 <tcp_recved+0x98>)
 8013336:	4820      	ldr	r0, [pc, #128]	; (80133b8 <tcp_recved+0x9c>)
 8013338:	f008 fcb4 	bl	801bca4 <iprintf>
 801333c:	e034      	b.n	80133a8 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	7d1b      	ldrb	r3, [r3, #20]
 8013342:	2b01      	cmp	r3, #1
 8013344:	d106      	bne.n	8013354 <tcp_recved+0x38>
 8013346:	4b1a      	ldr	r3, [pc, #104]	; (80133b0 <tcp_recved+0x94>)
 8013348:	f240 32d2 	movw	r2, #978	; 0x3d2
 801334c:	491b      	ldr	r1, [pc, #108]	; (80133bc <tcp_recved+0xa0>)
 801334e:	481a      	ldr	r0, [pc, #104]	; (80133b8 <tcp_recved+0x9c>)
 8013350:	f008 fca8 	bl	801bca4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013358:	887b      	ldrh	r3, [r7, #2]
 801335a:	4413      	add	r3, r2
 801335c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801335e:	89fb      	ldrh	r3, [r7, #14]
 8013360:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013364:	4293      	cmp	r3, r2
 8013366:	d804      	bhi.n	8013372 <tcp_recved+0x56>
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801336c:	89fa      	ldrh	r2, [r7, #14]
 801336e:	429a      	cmp	r2, r3
 8013370:	d204      	bcs.n	801337c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013378:	851a      	strh	r2, [r3, #40]	; 0x28
 801337a:	e002      	b.n	8013382 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	89fa      	ldrh	r2, [r7, #14]
 8013380:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7ff ff70 	bl	8013268 <tcp_update_rcv_ann_wnd>
 8013388:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013390:	4293      	cmp	r3, r2
 8013392:	d909      	bls.n	80133a8 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	8b5b      	ldrh	r3, [r3, #26]
 8013398:	f043 0302 	orr.w	r3, r3, #2
 801339c:	b29a      	uxth	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f004 fbc8 	bl	8017b38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80133a8:	3710      	adds	r7, #16
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	0801dce0 	.word	0x0801dce0
 80133b4:	0801df7c 	.word	0x0801df7c
 80133b8:	0801dd24 	.word	0x0801dd24
 80133bc:	0801df94 	.word	0x0801df94

080133c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80133ca:	4b1e      	ldr	r3, [pc, #120]	; (8013444 <tcp_new_port+0x84>)
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	3301      	adds	r3, #1
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	4b1c      	ldr	r3, [pc, #112]	; (8013444 <tcp_new_port+0x84>)
 80133d4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80133d6:	4b1b      	ldr	r3, [pc, #108]	; (8013444 <tcp_new_port+0x84>)
 80133d8:	881b      	ldrh	r3, [r3, #0]
 80133da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133de:	4293      	cmp	r3, r2
 80133e0:	d103      	bne.n	80133ea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80133e2:	4b18      	ldr	r3, [pc, #96]	; (8013444 <tcp_new_port+0x84>)
 80133e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80133e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80133ea:	2300      	movs	r3, #0
 80133ec:	71fb      	strb	r3, [r7, #7]
 80133ee:	e01e      	b.n	801342e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80133f0:	79fb      	ldrb	r3, [r7, #7]
 80133f2:	4a15      	ldr	r2, [pc, #84]	; (8013448 <tcp_new_port+0x88>)
 80133f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	603b      	str	r3, [r7, #0]
 80133fc:	e011      	b.n	8013422 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	8ada      	ldrh	r2, [r3, #22]
 8013402:	4b10      	ldr	r3, [pc, #64]	; (8013444 <tcp_new_port+0x84>)
 8013404:	881b      	ldrh	r3, [r3, #0]
 8013406:	429a      	cmp	r2, r3
 8013408:	d108      	bne.n	801341c <tcp_new_port+0x5c>
        n++;
 801340a:	88bb      	ldrh	r3, [r7, #4]
 801340c:	3301      	adds	r3, #1
 801340e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013410:	88bb      	ldrh	r3, [r7, #4]
 8013412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013416:	d3d8      	bcc.n	80133ca <tcp_new_port+0xa>
          return 0;
 8013418:	2300      	movs	r3, #0
 801341a:	e00d      	b.n	8013438 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	603b      	str	r3, [r7, #0]
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d1ea      	bne.n	80133fe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013428:	79fb      	ldrb	r3, [r7, #7]
 801342a:	3301      	adds	r3, #1
 801342c:	71fb      	strb	r3, [r7, #7]
 801342e:	79fb      	ldrb	r3, [r7, #7]
 8013430:	2b03      	cmp	r3, #3
 8013432:	d9dd      	bls.n	80133f0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013434:	4b03      	ldr	r3, [pc, #12]	; (8013444 <tcp_new_port+0x84>)
 8013436:	881b      	ldrh	r3, [r3, #0]
}
 8013438:	4618      	mov	r0, r3
 801343a:	370c      	adds	r7, #12
 801343c:	46bd      	mov	sp, r7
 801343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013442:	4770      	bx	lr
 8013444:	20000078 	.word	0x20000078
 8013448:	0801fe60 	.word	0x0801fe60

0801344c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801344c:	b5b0      	push	{r4, r5, r7, lr}
 801344e:	b090      	sub	sp, #64	; 0x40
 8013450:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013452:	2300      	movs	r3, #0
 8013454:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013458:	4b94      	ldr	r3, [pc, #592]	; (80136ac <tcp_slowtmr+0x260>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	3301      	adds	r3, #1
 801345e:	4a93      	ldr	r2, [pc, #588]	; (80136ac <tcp_slowtmr+0x260>)
 8013460:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013462:	4b93      	ldr	r3, [pc, #588]	; (80136b0 <tcp_slowtmr+0x264>)
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	3301      	adds	r3, #1
 8013468:	b2da      	uxtb	r2, r3
 801346a:	4b91      	ldr	r3, [pc, #580]	; (80136b0 <tcp_slowtmr+0x264>)
 801346c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013472:	4b90      	ldr	r3, [pc, #576]	; (80136b4 <tcp_slowtmr+0x268>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013478:	e29f      	b.n	80139ba <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347c:	7d1b      	ldrb	r3, [r3, #20]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d106      	bne.n	8013490 <tcp_slowtmr+0x44>
 8013482:	4b8d      	ldr	r3, [pc, #564]	; (80136b8 <tcp_slowtmr+0x26c>)
 8013484:	f240 42be 	movw	r2, #1214	; 0x4be
 8013488:	498c      	ldr	r1, [pc, #560]	; (80136bc <tcp_slowtmr+0x270>)
 801348a:	488d      	ldr	r0, [pc, #564]	; (80136c0 <tcp_slowtmr+0x274>)
 801348c:	f008 fc0a 	bl	801bca4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013492:	7d1b      	ldrb	r3, [r3, #20]
 8013494:	2b01      	cmp	r3, #1
 8013496:	d106      	bne.n	80134a6 <tcp_slowtmr+0x5a>
 8013498:	4b87      	ldr	r3, [pc, #540]	; (80136b8 <tcp_slowtmr+0x26c>)
 801349a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801349e:	4989      	ldr	r1, [pc, #548]	; (80136c4 <tcp_slowtmr+0x278>)
 80134a0:	4887      	ldr	r0, [pc, #540]	; (80136c0 <tcp_slowtmr+0x274>)
 80134a2:	f008 fbff 	bl	801bca4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80134a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a8:	7d1b      	ldrb	r3, [r3, #20]
 80134aa:	2b0a      	cmp	r3, #10
 80134ac:	d106      	bne.n	80134bc <tcp_slowtmr+0x70>
 80134ae:	4b82      	ldr	r3, [pc, #520]	; (80136b8 <tcp_slowtmr+0x26c>)
 80134b0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80134b4:	4984      	ldr	r1, [pc, #528]	; (80136c8 <tcp_slowtmr+0x27c>)
 80134b6:	4882      	ldr	r0, [pc, #520]	; (80136c0 <tcp_slowtmr+0x274>)
 80134b8:	f008 fbf4 	bl	801bca4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80134bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134be:	7f9a      	ldrb	r2, [r3, #30]
 80134c0:	4b7b      	ldr	r3, [pc, #492]	; (80136b0 <tcp_slowtmr+0x264>)
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d105      	bne.n	80134d4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80134c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80134cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ce:	68db      	ldr	r3, [r3, #12]
 80134d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80134d2:	e272      	b.n	80139ba <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80134d4:	4b76      	ldr	r3, [pc, #472]	; (80136b0 <tcp_slowtmr+0x264>)
 80134d6:	781a      	ldrb	r2, [r3, #0]
 80134d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134da:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80134dc:	2300      	movs	r3, #0
 80134de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80134e2:	2300      	movs	r3, #0
 80134e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80134e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ea:	7d1b      	ldrb	r3, [r3, #20]
 80134ec:	2b02      	cmp	r3, #2
 80134ee:	d10a      	bne.n	8013506 <tcp_slowtmr+0xba>
 80134f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80134f6:	2b05      	cmp	r3, #5
 80134f8:	d905      	bls.n	8013506 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80134fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134fe:	3301      	adds	r3, #1
 8013500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013504:	e11e      	b.n	8013744 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013508:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801350c:	2b0b      	cmp	r3, #11
 801350e:	d905      	bls.n	801351c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013514:	3301      	adds	r3, #1
 8013516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801351a:	e113      	b.n	8013744 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801351e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013522:	2b00      	cmp	r3, #0
 8013524:	d075      	beq.n	8013612 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801352a:	2b00      	cmp	r3, #0
 801352c:	d006      	beq.n	801353c <tcp_slowtmr+0xf0>
 801352e:	4b62      	ldr	r3, [pc, #392]	; (80136b8 <tcp_slowtmr+0x26c>)
 8013530:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013534:	4965      	ldr	r1, [pc, #404]	; (80136cc <tcp_slowtmr+0x280>)
 8013536:	4862      	ldr	r0, [pc, #392]	; (80136c0 <tcp_slowtmr+0x274>)
 8013538:	f008 fbb4 	bl	801bca4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013540:	2b00      	cmp	r3, #0
 8013542:	d106      	bne.n	8013552 <tcp_slowtmr+0x106>
 8013544:	4b5c      	ldr	r3, [pc, #368]	; (80136b8 <tcp_slowtmr+0x26c>)
 8013546:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801354a:	4961      	ldr	r1, [pc, #388]	; (80136d0 <tcp_slowtmr+0x284>)
 801354c:	485c      	ldr	r0, [pc, #368]	; (80136c0 <tcp_slowtmr+0x274>)
 801354e:	f008 fba9 	bl	801bca4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013554:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013558:	2b0b      	cmp	r3, #11
 801355a:	d905      	bls.n	8013568 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801355c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013560:	3301      	adds	r3, #1
 8013562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013566:	e0ed      	b.n	8013744 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801356e:	3b01      	subs	r3, #1
 8013570:	4a58      	ldr	r2, [pc, #352]	; (80136d4 <tcp_slowtmr+0x288>)
 8013572:	5cd3      	ldrb	r3, [r2, r3]
 8013574:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013578:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801357c:	7c7a      	ldrb	r2, [r7, #17]
 801357e:	429a      	cmp	r2, r3
 8013580:	d907      	bls.n	8013592 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013584:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013588:	3301      	adds	r3, #1
 801358a:	b2da      	uxtb	r2, r3
 801358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013594:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013598:	7c7a      	ldrb	r2, [r7, #17]
 801359a:	429a      	cmp	r2, r3
 801359c:	f200 80d2 	bhi.w	8013744 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80135a0:	2301      	movs	r3, #1
 80135a2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80135a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d108      	bne.n	80135c0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80135ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135b0:	f005 f96a 	bl	8018888 <tcp_zero_window_probe>
 80135b4:	4603      	mov	r3, r0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d014      	beq.n	80135e4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80135ba:	2300      	movs	r3, #0
 80135bc:	623b      	str	r3, [r7, #32]
 80135be:	e011      	b.n	80135e4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80135c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135c6:	4619      	mov	r1, r3
 80135c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135ca:	f004 f82f 	bl	801762c <tcp_split_unsent_seg>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d107      	bne.n	80135e4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80135d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135d6:	f004 faaf 	bl	8017b38 <tcp_output>
 80135da:	4603      	mov	r3, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d101      	bne.n	80135e4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80135e0:	2300      	movs	r3, #0
 80135e2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80135e4:	6a3b      	ldr	r3, [r7, #32]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	f000 80ac 	beq.w	8013744 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80135ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ee:	2200      	movs	r2, #0
 80135f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80135f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80135fa:	2b06      	cmp	r3, #6
 80135fc:	f200 80a2 	bhi.w	8013744 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013602:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013606:	3301      	adds	r3, #1
 8013608:	b2da      	uxtb	r2, r3
 801360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013610:	e098      	b.n	8013744 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013614:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013618:	2b00      	cmp	r3, #0
 801361a:	db0f      	blt.n	801363c <tcp_slowtmr+0x1f0>
 801361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013622:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013626:	4293      	cmp	r3, r2
 8013628:	d008      	beq.n	801363c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013630:	b29b      	uxth	r3, r3
 8013632:	3301      	adds	r3, #1
 8013634:	b29b      	uxth	r3, r3
 8013636:	b21a      	sxth	r2, r3
 8013638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013644:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013648:	429a      	cmp	r2, r3
 801364a:	db7b      	blt.n	8013744 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801364c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801364e:	f004 fd67 	bl	8018120 <tcp_rexmit_rto_prepare>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d007      	beq.n	8013668 <tcp_slowtmr+0x21c>
 8013658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365c:	2b00      	cmp	r3, #0
 801365e:	d171      	bne.n	8013744 <tcp_slowtmr+0x2f8>
 8013660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013664:	2b00      	cmp	r3, #0
 8013666:	d06d      	beq.n	8013744 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366a:	7d1b      	ldrb	r3, [r3, #20]
 801366c:	2b02      	cmp	r3, #2
 801366e:	d03a      	beq.n	80136e6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013676:	2b0c      	cmp	r3, #12
 8013678:	bf28      	it	cs
 801367a:	230c      	movcs	r3, #12
 801367c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013680:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013684:	10db      	asrs	r3, r3, #3
 8013686:	b21b      	sxth	r3, r3
 8013688:	461a      	mov	r2, r3
 801368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013690:	4413      	add	r3, r2
 8013692:	7efa      	ldrb	r2, [r7, #27]
 8013694:	4910      	ldr	r1, [pc, #64]	; (80136d8 <tcp_slowtmr+0x28c>)
 8013696:	5c8a      	ldrb	r2, [r1, r2]
 8013698:	4093      	lsls	r3, r2
 801369a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80136a2:	4293      	cmp	r3, r2
 80136a4:	dc1a      	bgt.n	80136dc <tcp_slowtmr+0x290>
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	b21a      	sxth	r2, r3
 80136aa:	e019      	b.n	80136e0 <tcp_slowtmr+0x294>
 80136ac:	2000b450 	.word	0x2000b450
 80136b0:	2000b466 	.word	0x2000b466
 80136b4:	2000b45c 	.word	0x2000b45c
 80136b8:	0801dce0 	.word	0x0801dce0
 80136bc:	0801e024 	.word	0x0801e024
 80136c0:	0801dd24 	.word	0x0801dd24
 80136c4:	0801e050 	.word	0x0801e050
 80136c8:	0801e07c 	.word	0x0801e07c
 80136cc:	0801e0ac 	.word	0x0801e0ac
 80136d0:	0801e0e0 	.word	0x0801e0e0
 80136d4:	0801fe58 	.word	0x0801fe58
 80136d8:	0801fe48 	.word	0x0801fe48
 80136dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80136e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e8:	2200      	movs	r2, #0
 80136ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80136ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80136f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80136f8:	4293      	cmp	r3, r2
 80136fa:	bf28      	it	cs
 80136fc:	4613      	movcs	r3, r2
 80136fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013700:	8a7b      	ldrh	r3, [r7, #18]
 8013702:	085b      	lsrs	r3, r3, #1
 8013704:	b29a      	uxth	r2, r3
 8013706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013708:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	b29b      	uxth	r3, r3
 801371a:	429a      	cmp	r2, r3
 801371c:	d206      	bcs.n	801372c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	b29a      	uxth	r2, r3
 8013726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013728:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801372e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013732:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013738:	2200      	movs	r2, #0
 801373a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801373e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013740:	f004 fd5e 	bl	8018200 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013746:	7d1b      	ldrb	r3, [r3, #20]
 8013748:	2b06      	cmp	r3, #6
 801374a:	d111      	bne.n	8013770 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374e:	8b5b      	ldrh	r3, [r3, #26]
 8013750:	f003 0310 	and.w	r3, r3, #16
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00b      	beq.n	8013770 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013758:	4b9d      	ldr	r3, [pc, #628]	; (80139d0 <tcp_slowtmr+0x584>)
 801375a:	681a      	ldr	r2, [r3, #0]
 801375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375e:	6a1b      	ldr	r3, [r3, #32]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	2b28      	cmp	r3, #40	; 0x28
 8013764:	d904      	bls.n	8013770 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801376a:	3301      	adds	r3, #1
 801376c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	7a5b      	ldrb	r3, [r3, #9]
 8013774:	f003 0308 	and.w	r3, r3, #8
 8013778:	2b00      	cmp	r3, #0
 801377a:	d04c      	beq.n	8013816 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013780:	2b04      	cmp	r3, #4
 8013782:	d003      	beq.n	801378c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013786:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013788:	2b07      	cmp	r3, #7
 801378a:	d144      	bne.n	8013816 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801378c:	4b90      	ldr	r3, [pc, #576]	; (80139d0 <tcp_slowtmr+0x584>)
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013792:	6a1b      	ldr	r3, [r3, #32]
 8013794:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801379c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80137a0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80137a4:	498b      	ldr	r1, [pc, #556]	; (80139d4 <tcp_slowtmr+0x588>)
 80137a6:	fba1 1303 	umull	r1, r3, r1, r3
 80137aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d90a      	bls.n	80137c6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80137b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137b4:	3301      	adds	r3, #1
 80137b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80137ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137be:	3301      	adds	r3, #1
 80137c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80137c4:	e027      	b.n	8013816 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80137c6:	4b82      	ldr	r3, [pc, #520]	; (80139d0 <tcp_slowtmr+0x584>)
 80137c8:	681a      	ldr	r2, [r3, #0]
 80137ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137cc:	6a1b      	ldr	r3, [r3, #32]
 80137ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80137d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80137d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80137dc:	4618      	mov	r0, r3
 80137de:	4b7e      	ldr	r3, [pc, #504]	; (80139d8 <tcp_slowtmr+0x58c>)
 80137e0:	fb00 f303 	mul.w	r3, r0, r3
 80137e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80137e6:	497b      	ldr	r1, [pc, #492]	; (80139d4 <tcp_slowtmr+0x588>)
 80137e8:	fba1 1303 	umull	r1, r3, r1, r3
 80137ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d911      	bls.n	8013816 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80137f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137f4:	f005 f808 	bl	8018808 <tcp_keepalive>
 80137f8:	4603      	mov	r3, r0
 80137fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80137fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013802:	2b00      	cmp	r3, #0
 8013804:	d107      	bne.n	8013816 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013808:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801380c:	3301      	adds	r3, #1
 801380e:	b2da      	uxtb	r2, r3
 8013810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013812:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801381a:	2b00      	cmp	r3, #0
 801381c:	d011      	beq.n	8013842 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801381e:	4b6c      	ldr	r3, [pc, #432]	; (80139d0 <tcp_slowtmr+0x584>)
 8013820:	681a      	ldr	r2, [r3, #0]
 8013822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013824:	6a1b      	ldr	r3, [r3, #32]
 8013826:	1ad2      	subs	r2, r2, r3
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801382e:	4619      	mov	r1, r3
 8013830:	460b      	mov	r3, r1
 8013832:	005b      	lsls	r3, r3, #1
 8013834:	440b      	add	r3, r1
 8013836:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013838:	429a      	cmp	r2, r3
 801383a:	d302      	bcc.n	8013842 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801383c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801383e:	f000 fec3 	bl	80145c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013844:	7d1b      	ldrb	r3, [r3, #20]
 8013846:	2b03      	cmp	r3, #3
 8013848:	d10b      	bne.n	8013862 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801384a:	4b61      	ldr	r3, [pc, #388]	; (80139d0 <tcp_slowtmr+0x584>)
 801384c:	681a      	ldr	r2, [r3, #0]
 801384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013850:	6a1b      	ldr	r3, [r3, #32]
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	2b28      	cmp	r3, #40	; 0x28
 8013856:	d904      	bls.n	8013862 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801385c:	3301      	adds	r3, #1
 801385e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013864:	7d1b      	ldrb	r3, [r3, #20]
 8013866:	2b09      	cmp	r3, #9
 8013868:	d10b      	bne.n	8013882 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801386a:	4b59      	ldr	r3, [pc, #356]	; (80139d0 <tcp_slowtmr+0x584>)
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013870:	6a1b      	ldr	r3, [r3, #32]
 8013872:	1ad3      	subs	r3, r2, r3
 8013874:	2bf0      	cmp	r3, #240	; 0xf0
 8013876:	d904      	bls.n	8013882 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801387c:	3301      	adds	r3, #1
 801387e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013886:	2b00      	cmp	r3, #0
 8013888:	d060      	beq.n	801394c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013890:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013894:	f000 fce4 	bl	8014260 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801389a:	2b00      	cmp	r3, #0
 801389c:	d010      	beq.n	80138c0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801389e:	4b4f      	ldr	r3, [pc, #316]	; (80139dc <tcp_slowtmr+0x590>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d106      	bne.n	80138b6 <tcp_slowtmr+0x46a>
 80138a8:	4b4d      	ldr	r3, [pc, #308]	; (80139e0 <tcp_slowtmr+0x594>)
 80138aa:	f240 526d 	movw	r2, #1389	; 0x56d
 80138ae:	494d      	ldr	r1, [pc, #308]	; (80139e4 <tcp_slowtmr+0x598>)
 80138b0:	484d      	ldr	r0, [pc, #308]	; (80139e8 <tcp_slowtmr+0x59c>)
 80138b2:	f008 f9f7 	bl	801bca4 <iprintf>
        prev->next = pcb->next;
 80138b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b8:	68da      	ldr	r2, [r3, #12]
 80138ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138bc:	60da      	str	r2, [r3, #12]
 80138be:	e00f      	b.n	80138e0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80138c0:	4b46      	ldr	r3, [pc, #280]	; (80139dc <tcp_slowtmr+0x590>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d006      	beq.n	80138d8 <tcp_slowtmr+0x48c>
 80138ca:	4b45      	ldr	r3, [pc, #276]	; (80139e0 <tcp_slowtmr+0x594>)
 80138cc:	f240 5271 	movw	r2, #1393	; 0x571
 80138d0:	4946      	ldr	r1, [pc, #280]	; (80139ec <tcp_slowtmr+0x5a0>)
 80138d2:	4845      	ldr	r0, [pc, #276]	; (80139e8 <tcp_slowtmr+0x59c>)
 80138d4:	f008 f9e6 	bl	801bca4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80138d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	4a3f      	ldr	r2, [pc, #252]	; (80139dc <tcp_slowtmr+0x590>)
 80138de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80138e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d013      	beq.n	8013910 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80138e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80138ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80138f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80138f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f4:	3304      	adds	r3, #4
 80138f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138f8:	8ad2      	ldrh	r2, [r2, #22]
 80138fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80138fc:	8b09      	ldrh	r1, [r1, #24]
 80138fe:	9102      	str	r1, [sp, #8]
 8013900:	9201      	str	r2, [sp, #4]
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	462b      	mov	r3, r5
 8013906:	4622      	mov	r2, r4
 8013908:	4601      	mov	r1, r0
 801390a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801390c:	f004 fec8 	bl	80186a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013918:	7d1b      	ldrb	r3, [r3, #20]
 801391a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013926:	6838      	ldr	r0, [r7, #0]
 8013928:	f7ff f836 	bl	8012998 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801392c:	4b30      	ldr	r3, [pc, #192]	; (80139f0 <tcp_slowtmr+0x5a4>)
 801392e:	2200      	movs	r2, #0
 8013930:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d004      	beq.n	8013942 <tcp_slowtmr+0x4f6>
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	f06f 010c 	mvn.w	r1, #12
 801393e:	68b8      	ldr	r0, [r7, #8]
 8013940:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013942:	4b2b      	ldr	r3, [pc, #172]	; (80139f0 <tcp_slowtmr+0x5a4>)
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d037      	beq.n	80139ba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801394a:	e590      	b.n	801346e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801394e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	7f1b      	ldrb	r3, [r3, #28]
 801395a:	3301      	adds	r3, #1
 801395c:	b2da      	uxtb	r2, r3
 801395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013960:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013964:	7f1a      	ldrb	r2, [r3, #28]
 8013966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013968:	7f5b      	ldrb	r3, [r3, #29]
 801396a:	429a      	cmp	r2, r3
 801396c:	d325      	bcc.n	80139ba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013970:	2200      	movs	r2, #0
 8013972:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013974:	4b1e      	ldr	r3, [pc, #120]	; (80139f0 <tcp_slowtmr+0x5a4>)
 8013976:	2200      	movs	r2, #0
 8013978:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00b      	beq.n	801399c <tcp_slowtmr+0x550>
 8013984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801398a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801398c:	6912      	ldr	r2, [r2, #16]
 801398e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013990:	4610      	mov	r0, r2
 8013992:	4798      	blx	r3
 8013994:	4603      	mov	r3, r0
 8013996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801399a:	e002      	b.n	80139a2 <tcp_slowtmr+0x556>
 801399c:	2300      	movs	r3, #0
 801399e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80139a2:	4b13      	ldr	r3, [pc, #76]	; (80139f0 <tcp_slowtmr+0x5a4>)
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d000      	beq.n	80139ac <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80139aa:	e560      	b.n	801346e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80139ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d102      	bne.n	80139ba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80139b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139b6:	f004 f8bf 	bl	8017b38 <tcp_output>
  while (pcb != NULL) {
 80139ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f47f ad5c 	bne.w	801347a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80139c2:	2300      	movs	r3, #0
 80139c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80139c6:	4b0b      	ldr	r3, [pc, #44]	; (80139f4 <tcp_slowtmr+0x5a8>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80139cc:	e067      	b.n	8013a9e <tcp_slowtmr+0x652>
 80139ce:	bf00      	nop
 80139d0:	2000b450 	.word	0x2000b450
 80139d4:	10624dd3 	.word	0x10624dd3
 80139d8:	000124f8 	.word	0x000124f8
 80139dc:	2000b45c 	.word	0x2000b45c
 80139e0:	0801dce0 	.word	0x0801dce0
 80139e4:	0801e118 	.word	0x0801e118
 80139e8:	0801dd24 	.word	0x0801dd24
 80139ec:	0801e144 	.word	0x0801e144
 80139f0:	2000b464 	.word	0x2000b464
 80139f4:	2000b460 	.word	0x2000b460
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80139f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fa:	7d1b      	ldrb	r3, [r3, #20]
 80139fc:	2b0a      	cmp	r3, #10
 80139fe:	d006      	beq.n	8013a0e <tcp_slowtmr+0x5c2>
 8013a00:	4b2b      	ldr	r3, [pc, #172]	; (8013ab0 <tcp_slowtmr+0x664>)
 8013a02:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8013a06:	492b      	ldr	r1, [pc, #172]	; (8013ab4 <tcp_slowtmr+0x668>)
 8013a08:	482b      	ldr	r0, [pc, #172]	; (8013ab8 <tcp_slowtmr+0x66c>)
 8013a0a:	f008 f94b 	bl	801bca4 <iprintf>
    pcb_remove = 0;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013a14:	4b29      	ldr	r3, [pc, #164]	; (8013abc <tcp_slowtmr+0x670>)
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1a:	6a1b      	ldr	r3, [r3, #32]
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	2bf0      	cmp	r3, #240	; 0xf0
 8013a20:	d904      	bls.n	8013a2c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a26:	3301      	adds	r3, #1
 8013a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d02f      	beq.n	8013a94 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a36:	f000 fc13 	bl	8014260 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d010      	beq.n	8013a62 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013a40:	4b1f      	ldr	r3, [pc, #124]	; (8013ac0 <tcp_slowtmr+0x674>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d106      	bne.n	8013a58 <tcp_slowtmr+0x60c>
 8013a4a:	4b19      	ldr	r3, [pc, #100]	; (8013ab0 <tcp_slowtmr+0x664>)
 8013a4c:	f240 52af 	movw	r2, #1455	; 0x5af
 8013a50:	491c      	ldr	r1, [pc, #112]	; (8013ac4 <tcp_slowtmr+0x678>)
 8013a52:	4819      	ldr	r0, [pc, #100]	; (8013ab8 <tcp_slowtmr+0x66c>)
 8013a54:	f008 f926 	bl	801bca4 <iprintf>
        prev->next = pcb->next;
 8013a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5a:	68da      	ldr	r2, [r3, #12]
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	60da      	str	r2, [r3, #12]
 8013a60:	e00f      	b.n	8013a82 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013a62:	4b17      	ldr	r3, [pc, #92]	; (8013ac0 <tcp_slowtmr+0x674>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d006      	beq.n	8013a7a <tcp_slowtmr+0x62e>
 8013a6c:	4b10      	ldr	r3, [pc, #64]	; (8013ab0 <tcp_slowtmr+0x664>)
 8013a6e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013a72:	4915      	ldr	r1, [pc, #84]	; (8013ac8 <tcp_slowtmr+0x67c>)
 8013a74:	4810      	ldr	r0, [pc, #64]	; (8013ab8 <tcp_slowtmr+0x66c>)
 8013a76:	f008 f915 	bl	801bca4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7c:	68db      	ldr	r3, [r3, #12]
 8013a7e:	4a10      	ldr	r2, [pc, #64]	; (8013ac0 <tcp_slowtmr+0x674>)
 8013a80:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a84:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013a8c:	69f8      	ldr	r0, [r7, #28]
 8013a8e:	f7fe ff83 	bl	8012998 <tcp_free>
 8013a92:	e004      	b.n	8013a9e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9a:	68db      	ldr	r3, [r3, #12]
 8013a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d1a9      	bne.n	80139f8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013aa4:	bf00      	nop
 8013aa6:	bf00      	nop
 8013aa8:	3730      	adds	r7, #48	; 0x30
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bdb0      	pop	{r4, r5, r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	0801dce0 	.word	0x0801dce0
 8013ab4:	0801e170 	.word	0x0801e170
 8013ab8:	0801dd24 	.word	0x0801dd24
 8013abc:	2000b450 	.word	0x2000b450
 8013ac0:	2000b460 	.word	0x2000b460
 8013ac4:	0801e1a0 	.word	0x0801e1a0
 8013ac8:	0801e1c8 	.word	0x0801e1c8

08013acc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013ad2:	4b2d      	ldr	r3, [pc, #180]	; (8013b88 <tcp_fasttmr+0xbc>)
 8013ad4:	781b      	ldrb	r3, [r3, #0]
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	b2da      	uxtb	r2, r3
 8013ada:	4b2b      	ldr	r3, [pc, #172]	; (8013b88 <tcp_fasttmr+0xbc>)
 8013adc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013ade:	4b2b      	ldr	r3, [pc, #172]	; (8013b8c <tcp_fasttmr+0xc0>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013ae4:	e048      	b.n	8013b78 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	7f9a      	ldrb	r2, [r3, #30]
 8013aea:	4b27      	ldr	r3, [pc, #156]	; (8013b88 <tcp_fasttmr+0xbc>)
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d03f      	beq.n	8013b72 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013af2:	4b25      	ldr	r3, [pc, #148]	; (8013b88 <tcp_fasttmr+0xbc>)
 8013af4:	781a      	ldrb	r2, [r3, #0]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8b5b      	ldrh	r3, [r3, #26]
 8013afe:	f003 0301 	and.w	r3, r3, #1
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d010      	beq.n	8013b28 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8b5b      	ldrh	r3, [r3, #26]
 8013b0a:	f043 0302 	orr.w	r3, r3, #2
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f004 f80f 	bl	8017b38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	8b5b      	ldrh	r3, [r3, #26]
 8013b1e:	f023 0303 	bic.w	r3, r3, #3
 8013b22:	b29a      	uxth	r2, r3
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	8b5b      	ldrh	r3, [r3, #26]
 8013b2c:	f003 0308 	and.w	r3, r3, #8
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d009      	beq.n	8013b48 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	8b5b      	ldrh	r3, [r3, #26]
 8013b38:	f023 0308 	bic.w	r3, r3, #8
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f7ff f8bc 	bl	8012cc0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00a      	beq.n	8013b6c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013b56:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <tcp_fasttmr+0xc4>)
 8013b58:	2200      	movs	r2, #0
 8013b5a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f000 f819 	bl	8013b94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013b62:	4b0b      	ldr	r3, [pc, #44]	; (8013b90 <tcp_fasttmr+0xc4>)
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d000      	beq.n	8013b6c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013b6a:	e7b8      	b.n	8013ade <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	607b      	str	r3, [r7, #4]
 8013b70:	e002      	b.n	8013b78 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d1b3      	bne.n	8013ae6 <tcp_fasttmr+0x1a>
    }
  }
}
 8013b7e:	bf00      	nop
 8013b80:	bf00      	nop
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	2000b466 	.word	0x2000b466
 8013b8c:	2000b45c 	.word	0x2000b45c
 8013b90:	2000b464 	.word	0x2000b464

08013b94 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013b94:	b590      	push	{r4, r7, lr}
 8013b96:	b085      	sub	sp, #20
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d109      	bne.n	8013bb6 <tcp_process_refused_data+0x22>
 8013ba2:	4b38      	ldr	r3, [pc, #224]	; (8013c84 <tcp_process_refused_data+0xf0>)
 8013ba4:	f240 6209 	movw	r2, #1545	; 0x609
 8013ba8:	4937      	ldr	r1, [pc, #220]	; (8013c88 <tcp_process_refused_data+0xf4>)
 8013baa:	4838      	ldr	r0, [pc, #224]	; (8013c8c <tcp_process_refused_data+0xf8>)
 8013bac:	f008 f87a 	bl	801bca4 <iprintf>
 8013bb0:	f06f 030f 	mvn.w	r3, #15
 8013bb4:	e061      	b.n	8013c7a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bba:	7b5b      	ldrb	r3, [r3, #13]
 8013bbc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bc2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d00b      	beq.n	8013bec <tcp_process_refused_data+0x58>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6918      	ldr	r0, [r3, #16]
 8013bde:	2300      	movs	r3, #0
 8013be0:	68ba      	ldr	r2, [r7, #8]
 8013be2:	6879      	ldr	r1, [r7, #4]
 8013be4:	47a0      	blx	r4
 8013be6:	4603      	mov	r3, r0
 8013be8:	73fb      	strb	r3, [r7, #15]
 8013bea:	e007      	b.n	8013bfc <tcp_process_refused_data+0x68>
 8013bec:	2300      	movs	r3, #0
 8013bee:	68ba      	ldr	r2, [r7, #8]
 8013bf0:	6879      	ldr	r1, [r7, #4]
 8013bf2:	2000      	movs	r0, #0
 8013bf4:	f000 f8c4 	bl	8013d80 <tcp_recv_null>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d12b      	bne.n	8013c5c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013c04:	7bbb      	ldrb	r3, [r7, #14]
 8013c06:	f003 0320 	and.w	r3, r3, #32
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d034      	beq.n	8013c78 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c12:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d005      	beq.n	8013c26 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c1e:	3301      	adds	r3, #1
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d00b      	beq.n	8013c48 <tcp_process_refused_data+0xb4>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6918      	ldr	r0, [r3, #16]
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	6879      	ldr	r1, [r7, #4]
 8013c40:	47a0      	blx	r4
 8013c42:	4603      	mov	r3, r0
 8013c44:	73fb      	strb	r3, [r7, #15]
 8013c46:	e001      	b.n	8013c4c <tcp_process_refused_data+0xb8>
 8013c48:	2300      	movs	r3, #0
 8013c4a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c50:	f113 0f0d 	cmn.w	r3, #13
 8013c54:	d110      	bne.n	8013c78 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8013c56:	f06f 030c 	mvn.w	r3, #12
 8013c5a:	e00e      	b.n	8013c7a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8013c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c60:	f113 0f0d 	cmn.w	r3, #13
 8013c64:	d102      	bne.n	8013c6c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013c66:	f06f 030c 	mvn.w	r3, #12
 8013c6a:	e006      	b.n	8013c7a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	68ba      	ldr	r2, [r7, #8]
 8013c70:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013c72:	f06f 0304 	mvn.w	r3, #4
 8013c76:	e000      	b.n	8013c7a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8013c78:	2300      	movs	r3, #0
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3714      	adds	r7, #20
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd90      	pop	{r4, r7, pc}
 8013c82:	bf00      	nop
 8013c84:	0801dce0 	.word	0x0801dce0
 8013c88:	0801e1f0 	.word	0x0801e1f0
 8013c8c:	0801dd24 	.word	0x0801dd24

08013c90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013c98:	e007      	b.n	8013caa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f000 f80a 	bl	8013cba <tcp_seg_free>
    seg = next;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d1f4      	bne.n	8013c9a <tcp_segs_free+0xa>
  }
}
 8013cb0:	bf00      	nop
 8013cb2:	bf00      	nop
 8013cb4:	3710      	adds	r7, #16
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b082      	sub	sp, #8
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d00c      	beq.n	8013ce2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d004      	beq.n	8013cda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fe fbaf 	bl	8012438 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013cda:	6879      	ldr	r1, [r7, #4]
 8013cdc:	2003      	movs	r0, #3
 8013cde:	f7fd fd35 	bl	801174c <memp_free>
  }
}
 8013ce2:	bf00      	nop
 8013ce4:	3708      	adds	r7, #8
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
	...

08013cec <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d107      	bne.n	8013d0e <tcp_setprio+0x22>
 8013cfe:	4b07      	ldr	r3, [pc, #28]	; (8013d1c <tcp_setprio+0x30>)
 8013d00:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8013d04:	4906      	ldr	r1, [pc, #24]	; (8013d20 <tcp_setprio+0x34>)
 8013d06:	4807      	ldr	r0, [pc, #28]	; (8013d24 <tcp_setprio+0x38>)
 8013d08:	f007 ffcc 	bl	801bca4 <iprintf>
 8013d0c:	e002      	b.n	8013d14 <tcp_setprio+0x28>

  pcb->prio = prio;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	78fa      	ldrb	r2, [r7, #3]
 8013d12:	755a      	strb	r2, [r3, #21]
}
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	0801dce0 	.word	0x0801dce0
 8013d20:	0801e218 	.word	0x0801e218
 8013d24:	0801dd24 	.word	0x0801dd24

08013d28 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d106      	bne.n	8013d44 <tcp_seg_copy+0x1c>
 8013d36:	4b0f      	ldr	r3, [pc, #60]	; (8013d74 <tcp_seg_copy+0x4c>)
 8013d38:	f240 6282 	movw	r2, #1666	; 0x682
 8013d3c:	490e      	ldr	r1, [pc, #56]	; (8013d78 <tcp_seg_copy+0x50>)
 8013d3e:	480f      	ldr	r0, [pc, #60]	; (8013d7c <tcp_seg_copy+0x54>)
 8013d40:	f007 ffb0 	bl	801bca4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013d44:	2003      	movs	r0, #3
 8013d46:	f7fd fc91 	bl	801166c <memp_malloc>
 8013d4a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d101      	bne.n	8013d56 <tcp_seg_copy+0x2e>
    return NULL;
 8013d52:	2300      	movs	r3, #0
 8013d54:	e00a      	b.n	8013d6c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013d56:	2210      	movs	r2, #16
 8013d58:	6879      	ldr	r1, [r7, #4]
 8013d5a:	68f8      	ldr	r0, [r7, #12]
 8013d5c:	f008 f913 	bl	801bf86 <memcpy>
  pbuf_ref(cseg->p);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fe fc07 	bl	8012578 <pbuf_ref>
  return cseg;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	0801dce0 	.word	0x0801dce0
 8013d78:	0801e234 	.word	0x0801e234
 8013d7c:	0801dd24 	.word	0x0801dd24

08013d80 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
 8013d8c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d109      	bne.n	8013da8 <tcp_recv_null+0x28>
 8013d94:	4b12      	ldr	r3, [pc, #72]	; (8013de0 <tcp_recv_null+0x60>)
 8013d96:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013d9a:	4912      	ldr	r1, [pc, #72]	; (8013de4 <tcp_recv_null+0x64>)
 8013d9c:	4812      	ldr	r0, [pc, #72]	; (8013de8 <tcp_recv_null+0x68>)
 8013d9e:	f007 ff81 	bl	801bca4 <iprintf>
 8013da2:	f06f 030f 	mvn.w	r3, #15
 8013da6:	e016      	b.n	8013dd6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d009      	beq.n	8013dc2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	891b      	ldrh	r3, [r3, #8]
 8013db2:	4619      	mov	r1, r3
 8013db4:	68b8      	ldr	r0, [r7, #8]
 8013db6:	f7ff fab1 	bl	801331c <tcp_recved>
    pbuf_free(p);
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f7fe fb3c 	bl	8012438 <pbuf_free>
 8013dc0:	e008      	b.n	8013dd4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d104      	bne.n	8013dd4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013dca:	68b8      	ldr	r0, [r7, #8]
 8013dcc:	f7fe ffe2 	bl	8012d94 <tcp_close>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	e000      	b.n	8013dd6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3710      	adds	r7, #16
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	0801dce0 	.word	0x0801dce0
 8013de4:	0801e250 	.word	0x0801e250
 8013de8:	0801dd24 	.word	0x0801dd24

08013dec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	4603      	mov	r3, r0
 8013df4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	db01      	blt.n	8013e02 <tcp_kill_prio+0x16>
 8013dfe:	79fb      	ldrb	r3, [r7, #7]
 8013e00:	e000      	b.n	8013e04 <tcp_kill_prio+0x18>
 8013e02:	237f      	movs	r3, #127	; 0x7f
 8013e04:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013e06:	7afb      	ldrb	r3, [r7, #11]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d034      	beq.n	8013e76 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013e0c:	7afb      	ldrb	r3, [r7, #11]
 8013e0e:	3b01      	subs	r3, #1
 8013e10:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013e12:	2300      	movs	r3, #0
 8013e14:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013e16:	2300      	movs	r3, #0
 8013e18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e1a:	4b19      	ldr	r3, [pc, #100]	; (8013e80 <tcp_kill_prio+0x94>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	617b      	str	r3, [r7, #20]
 8013e20:	e01f      	b.n	8013e62 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	7d5b      	ldrb	r3, [r3, #21]
 8013e26:	7afa      	ldrb	r2, [r7, #11]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d80c      	bhi.n	8013e46 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013e30:	7afa      	ldrb	r2, [r7, #11]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d112      	bne.n	8013e5c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013e36:	4b13      	ldr	r3, [pc, #76]	; (8013e84 <tcp_kill_prio+0x98>)
 8013e38:	681a      	ldr	r2, [r3, #0]
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	6a1b      	ldr	r3, [r3, #32]
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	68fa      	ldr	r2, [r7, #12]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d80a      	bhi.n	8013e5c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013e46:	4b0f      	ldr	r3, [pc, #60]	; (8013e84 <tcp_kill_prio+0x98>)
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	6a1b      	ldr	r3, [r3, #32]
 8013e4e:	1ad3      	subs	r3, r2, r3
 8013e50:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	7d5b      	ldrb	r3, [r3, #21]
 8013e5a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	617b      	str	r3, [r7, #20]
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1dc      	bne.n	8013e22 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d004      	beq.n	8013e78 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013e6e:	6938      	ldr	r0, [r7, #16]
 8013e70:	f7ff f87a 	bl	8012f68 <tcp_abort>
 8013e74:	e000      	b.n	8013e78 <tcp_kill_prio+0x8c>
    return;
 8013e76:	bf00      	nop
  }
}
 8013e78:	3718      	adds	r7, #24
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
 8013e7e:	bf00      	nop
 8013e80:	2000b45c 	.word	0x2000b45c
 8013e84:	2000b450 	.word	0x2000b450

08013e88 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b086      	sub	sp, #24
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	4603      	mov	r3, r0
 8013e90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013e92:	79fb      	ldrb	r3, [r7, #7]
 8013e94:	2b08      	cmp	r3, #8
 8013e96:	d009      	beq.n	8013eac <tcp_kill_state+0x24>
 8013e98:	79fb      	ldrb	r3, [r7, #7]
 8013e9a:	2b09      	cmp	r3, #9
 8013e9c:	d006      	beq.n	8013eac <tcp_kill_state+0x24>
 8013e9e:	4b1a      	ldr	r3, [pc, #104]	; (8013f08 <tcp_kill_state+0x80>)
 8013ea0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8013ea4:	4919      	ldr	r1, [pc, #100]	; (8013f0c <tcp_kill_state+0x84>)
 8013ea6:	481a      	ldr	r0, [pc, #104]	; (8013f10 <tcp_kill_state+0x88>)
 8013ea8:	f007 fefc 	bl	801bca4 <iprintf>

  inactivity = 0;
 8013eac:	2300      	movs	r3, #0
 8013eae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013eb4:	4b17      	ldr	r3, [pc, #92]	; (8013f14 <tcp_kill_state+0x8c>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	617b      	str	r3, [r7, #20]
 8013eba:	e017      	b.n	8013eec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	7d1b      	ldrb	r3, [r3, #20]
 8013ec0:	79fa      	ldrb	r2, [r7, #7]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d10f      	bne.n	8013ee6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013ec6:	4b14      	ldr	r3, [pc, #80]	; (8013f18 <tcp_kill_state+0x90>)
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	6a1b      	ldr	r3, [r3, #32]
 8013ece:	1ad3      	subs	r3, r2, r3
 8013ed0:	68fa      	ldr	r2, [r7, #12]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d807      	bhi.n	8013ee6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013ed6:	4b10      	ldr	r3, [pc, #64]	; (8013f18 <tcp_kill_state+0x90>)
 8013ed8:	681a      	ldr	r2, [r3, #0]
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	6a1b      	ldr	r3, [r3, #32]
 8013ede:	1ad3      	subs	r3, r2, r3
 8013ee0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	617b      	str	r3, [r7, #20]
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d1e4      	bne.n	8013ebc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d003      	beq.n	8013f00 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013ef8:	2100      	movs	r1, #0
 8013efa:	6938      	ldr	r0, [r7, #16]
 8013efc:	f7fe ff76 	bl	8012dec <tcp_abandon>
  }
}
 8013f00:	bf00      	nop
 8013f02:	3718      	adds	r7, #24
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	0801dce0 	.word	0x0801dce0
 8013f0c:	0801e26c 	.word	0x0801e26c
 8013f10:	0801dd24 	.word	0x0801dd24
 8013f14:	2000b45c 	.word	0x2000b45c
 8013f18:	2000b450 	.word	0x2000b450

08013f1c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013f22:	2300      	movs	r3, #0
 8013f24:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013f26:	2300      	movs	r3, #0
 8013f28:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f2a:	4b12      	ldr	r3, [pc, #72]	; (8013f74 <tcp_kill_timewait+0x58>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	60fb      	str	r3, [r7, #12]
 8013f30:	e012      	b.n	8013f58 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013f32:	4b11      	ldr	r3, [pc, #68]	; (8013f78 <tcp_kill_timewait+0x5c>)
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	6a1b      	ldr	r3, [r3, #32]
 8013f3a:	1ad3      	subs	r3, r2, r3
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d807      	bhi.n	8013f52 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013f42:	4b0d      	ldr	r3, [pc, #52]	; (8013f78 <tcp_kill_timewait+0x5c>)
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	6a1b      	ldr	r3, [r3, #32]
 8013f4a:	1ad3      	subs	r3, r2, r3
 8013f4c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	60fb      	str	r3, [r7, #12]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d1e9      	bne.n	8013f32 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d002      	beq.n	8013f6a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013f64:	68b8      	ldr	r0, [r7, #8]
 8013f66:	f7fe ffff 	bl	8012f68 <tcp_abort>
  }
}
 8013f6a:	bf00      	nop
 8013f6c:	3710      	adds	r7, #16
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	2000b460 	.word	0x2000b460
 8013f78:	2000b450 	.word	0x2000b450

08013f7c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013f82:	4b10      	ldr	r3, [pc, #64]	; (8013fc4 <tcp_handle_closepend+0x48>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013f88:	e014      	b.n	8013fb4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	8b5b      	ldrh	r3, [r3, #26]
 8013f94:	f003 0308 	and.w	r3, r3, #8
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d009      	beq.n	8013fb0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	8b5b      	ldrh	r3, [r3, #26]
 8013fa0:	f023 0308 	bic.w	r3, r3, #8
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f7fe fe88 	bl	8012cc0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d1e7      	bne.n	8013f8a <tcp_handle_closepend+0xe>
  }
}
 8013fba:	bf00      	nop
 8013fbc:	bf00      	nop
 8013fbe:	3708      	adds	r7, #8
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}
 8013fc4:	2000b45c 	.word	0x2000b45c

08013fc8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	4603      	mov	r3, r0
 8013fd0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013fd2:	2001      	movs	r0, #1
 8013fd4:	f7fd fb4a 	bl	801166c <memp_malloc>
 8013fd8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d126      	bne.n	801402e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013fe0:	f7ff ffcc 	bl	8013f7c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013fe4:	f7ff ff9a 	bl	8013f1c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013fe8:	2001      	movs	r0, #1
 8013fea:	f7fd fb3f 	bl	801166c <memp_malloc>
 8013fee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d11b      	bne.n	801402e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013ff6:	2009      	movs	r0, #9
 8013ff8:	f7ff ff46 	bl	8013e88 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ffc:	2001      	movs	r0, #1
 8013ffe:	f7fd fb35 	bl	801166c <memp_malloc>
 8014002:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d111      	bne.n	801402e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801400a:	2008      	movs	r0, #8
 801400c:	f7ff ff3c 	bl	8013e88 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014010:	2001      	movs	r0, #1
 8014012:	f7fd fb2b 	bl	801166c <memp_malloc>
 8014016:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d107      	bne.n	801402e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801401e:	79fb      	ldrb	r3, [r7, #7]
 8014020:	4618      	mov	r0, r3
 8014022:	f7ff fee3 	bl	8013dec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014026:	2001      	movs	r0, #1
 8014028:	f7fd fb20 	bl	801166c <memp_malloc>
 801402c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d03f      	beq.n	80140b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014034:	229c      	movs	r2, #156	; 0x9c
 8014036:	2100      	movs	r1, #0
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f007 ff0b 	bl	801be54 <memset>
    pcb->prio = prio;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	79fa      	ldrb	r2, [r7, #7]
 8014042:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801404a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8014054:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	22ff      	movs	r2, #255	; 0xff
 8014062:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f44f 7206 	mov.w	r2, #536	; 0x218
 801406a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	2206      	movs	r2, #6
 8014070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2206      	movs	r2, #6
 8014078:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014080:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2201      	movs	r2, #1
 8014086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801408a:	4b0d      	ldr	r3, [pc, #52]	; (80140c0 <tcp_alloc+0xf8>)
 801408c:	681a      	ldr	r2, [r3, #0]
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014092:	4b0c      	ldr	r3, [pc, #48]	; (80140c4 <tcp_alloc+0xfc>)
 8014094:	781a      	ldrb	r2, [r3, #0]
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80140a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	4a08      	ldr	r2, [pc, #32]	; (80140c8 <tcp_alloc+0x100>)
 80140a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	4a07      	ldr	r2, [pc, #28]	; (80140cc <tcp_alloc+0x104>)
 80140b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80140b4:	68fb      	ldr	r3, [r7, #12]
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	2000b450 	.word	0x2000b450
 80140c4:	2000b466 	.word	0x2000b466
 80140c8:	08013d81 	.word	0x08013d81
 80140cc:	006ddd00 	.word	0x006ddd00

080140d0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80140d4:	2040      	movs	r0, #64	; 0x40
 80140d6:	f7ff ff77 	bl	8013fc8 <tcp_alloc>
 80140da:	4603      	mov	r3, r0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	bd80      	pop	{r7, pc}

080140e0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b083      	sub	sp, #12
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	683a      	ldr	r2, [r7, #0]
 80140f4:	611a      	str	r2, [r3, #16]
  }
}
 80140f6:	bf00      	nop
 80140f8:	370c      	adds	r7, #12
 80140fa:	46bd      	mov	sp, r7
 80140fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014100:	4770      	bx	lr
	...

08014104 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d00e      	beq.n	8014132 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	7d1b      	ldrb	r3, [r3, #20]
 8014118:	2b01      	cmp	r3, #1
 801411a:	d106      	bne.n	801412a <tcp_recv+0x26>
 801411c:	4b07      	ldr	r3, [pc, #28]	; (801413c <tcp_recv+0x38>)
 801411e:	f240 72df 	movw	r2, #2015	; 0x7df
 8014122:	4907      	ldr	r1, [pc, #28]	; (8014140 <tcp_recv+0x3c>)
 8014124:	4807      	ldr	r0, [pc, #28]	; (8014144 <tcp_recv+0x40>)
 8014126:	f007 fdbd 	bl	801bca4 <iprintf>
    pcb->recv = recv;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	683a      	ldr	r2, [r7, #0]
 801412e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014132:	bf00      	nop
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	0801dce0 	.word	0x0801dce0
 8014140:	0801e27c 	.word	0x0801e27c
 8014144:	0801dd24 	.word	0x0801dd24

08014148 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00e      	beq.n	8014176 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	7d1b      	ldrb	r3, [r3, #20]
 801415c:	2b01      	cmp	r3, #1
 801415e:	d106      	bne.n	801416e <tcp_sent+0x26>
 8014160:	4b07      	ldr	r3, [pc, #28]	; (8014180 <tcp_sent+0x38>)
 8014162:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014166:	4907      	ldr	r1, [pc, #28]	; (8014184 <tcp_sent+0x3c>)
 8014168:	4807      	ldr	r0, [pc, #28]	; (8014188 <tcp_sent+0x40>)
 801416a:	f007 fd9b 	bl	801bca4 <iprintf>
    pcb->sent = sent;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	683a      	ldr	r2, [r7, #0]
 8014172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	0801dce0 	.word	0x0801dce0
 8014184:	0801e2a4 	.word	0x0801e2a4
 8014188:	0801dd24 	.word	0x0801dd24

0801418c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d00e      	beq.n	80141ba <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	7d1b      	ldrb	r3, [r3, #20]
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d106      	bne.n	80141b2 <tcp_err+0x26>
 80141a4:	4b07      	ldr	r3, [pc, #28]	; (80141c4 <tcp_err+0x38>)
 80141a6:	f640 020d 	movw	r2, #2061	; 0x80d
 80141aa:	4907      	ldr	r1, [pc, #28]	; (80141c8 <tcp_err+0x3c>)
 80141ac:	4807      	ldr	r0, [pc, #28]	; (80141cc <tcp_err+0x40>)
 80141ae:	f007 fd79 	bl	801bca4 <iprintf>
    pcb->errf = err;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	683a      	ldr	r2, [r7, #0]
 80141b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80141ba:	bf00      	nop
 80141bc:	3708      	adds	r7, #8
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	0801dce0 	.word	0x0801dce0
 80141c8:	0801e2cc 	.word	0x0801e2cc
 80141cc:	0801dd24 	.word	0x0801dd24

080141d0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80141d0:	b480      	push	{r7}
 80141d2:	b085      	sub	sp, #20
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d008      	beq.n	80141f2 <tcp_accept+0x22>
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	7d1b      	ldrb	r3, [r3, #20]
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d104      	bne.n	80141f2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	683a      	ldr	r2, [r7, #0]
 80141f0:	619a      	str	r2, [r3, #24]
  }
}
 80141f2:	bf00      	nop
 80141f4:	3714      	adds	r7, #20
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr
	...

08014200 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b084      	sub	sp, #16
 8014204:	af00      	add	r7, sp, #0
 8014206:	60f8      	str	r0, [r7, #12]
 8014208:	60b9      	str	r1, [r7, #8]
 801420a:	4613      	mov	r3, r2
 801420c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d107      	bne.n	8014224 <tcp_poll+0x24>
 8014214:	4b0e      	ldr	r3, [pc, #56]	; (8014250 <tcp_poll+0x50>)
 8014216:	f640 023d 	movw	r2, #2109	; 0x83d
 801421a:	490e      	ldr	r1, [pc, #56]	; (8014254 <tcp_poll+0x54>)
 801421c:	480e      	ldr	r0, [pc, #56]	; (8014258 <tcp_poll+0x58>)
 801421e:	f007 fd41 	bl	801bca4 <iprintf>
 8014222:	e011      	b.n	8014248 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	7d1b      	ldrb	r3, [r3, #20]
 8014228:	2b01      	cmp	r3, #1
 801422a:	d106      	bne.n	801423a <tcp_poll+0x3a>
 801422c:	4b08      	ldr	r3, [pc, #32]	; (8014250 <tcp_poll+0x50>)
 801422e:	f640 023e 	movw	r2, #2110	; 0x83e
 8014232:	490a      	ldr	r1, [pc, #40]	; (801425c <tcp_poll+0x5c>)
 8014234:	4808      	ldr	r0, [pc, #32]	; (8014258 <tcp_poll+0x58>)
 8014236:	f007 fd35 	bl	801bca4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	68ba      	ldr	r2, [r7, #8]
 801423e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	79fa      	ldrb	r2, [r7, #7]
 8014246:	775a      	strb	r2, [r3, #29]
}
 8014248:	3710      	adds	r7, #16
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	0801dce0 	.word	0x0801dce0
 8014254:	0801e2f4 	.word	0x0801e2f4
 8014258:	0801dd24 	.word	0x0801dd24
 801425c:	0801e30c 	.word	0x0801e30c

08014260 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d107      	bne.n	801427e <tcp_pcb_purge+0x1e>
 801426e:	4b21      	ldr	r3, [pc, #132]	; (80142f4 <tcp_pcb_purge+0x94>)
 8014270:	f640 0251 	movw	r2, #2129	; 0x851
 8014274:	4920      	ldr	r1, [pc, #128]	; (80142f8 <tcp_pcb_purge+0x98>)
 8014276:	4821      	ldr	r0, [pc, #132]	; (80142fc <tcp_pcb_purge+0x9c>)
 8014278:	f007 fd14 	bl	801bca4 <iprintf>
 801427c:	e037      	b.n	80142ee <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	7d1b      	ldrb	r3, [r3, #20]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d033      	beq.n	80142ee <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801428a:	2b0a      	cmp	r3, #10
 801428c:	d02f      	beq.n	80142ee <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014292:	2b01      	cmp	r3, #1
 8014294:	d02b      	beq.n	80142ee <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801429a:	2b00      	cmp	r3, #0
 801429c:	d007      	beq.n	80142ae <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fe f8c8 	bl	8012438 <pbuf_free>
      pcb->refused_data = NULL;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2200      	movs	r2, #0
 80142ac:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d002      	beq.n	80142bc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f000 f986 	bl	80145c8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142c2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7ff fce1 	bl	8013c90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7ff fcdc 	bl	8013c90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2200      	movs	r2, #0
 80142ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	0801dce0 	.word	0x0801dce0
 80142f8:	0801e32c 	.word	0x0801e32c
 80142fc:	0801dd24 	.word	0x0801dd24

08014300 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b084      	sub	sp, #16
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d106      	bne.n	801431e <tcp_pcb_remove+0x1e>
 8014310:	4b3e      	ldr	r3, [pc, #248]	; (801440c <tcp_pcb_remove+0x10c>)
 8014312:	f640 0283 	movw	r2, #2179	; 0x883
 8014316:	493e      	ldr	r1, [pc, #248]	; (8014410 <tcp_pcb_remove+0x110>)
 8014318:	483e      	ldr	r0, [pc, #248]	; (8014414 <tcp_pcb_remove+0x114>)
 801431a:	f007 fcc3 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d106      	bne.n	8014332 <tcp_pcb_remove+0x32>
 8014324:	4b39      	ldr	r3, [pc, #228]	; (801440c <tcp_pcb_remove+0x10c>)
 8014326:	f640 0284 	movw	r2, #2180	; 0x884
 801432a:	493b      	ldr	r1, [pc, #236]	; (8014418 <tcp_pcb_remove+0x118>)
 801432c:	4839      	ldr	r0, [pc, #228]	; (8014414 <tcp_pcb_remove+0x114>)
 801432e:	f007 fcb9 	bl	801bca4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	683a      	ldr	r2, [r7, #0]
 8014338:	429a      	cmp	r2, r3
 801433a:	d105      	bne.n	8014348 <tcp_pcb_remove+0x48>
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	68da      	ldr	r2, [r3, #12]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	601a      	str	r2, [r3, #0]
 8014346:	e013      	b.n	8014370 <tcp_pcb_remove+0x70>
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	60fb      	str	r3, [r7, #12]
 801434e:	e00c      	b.n	801436a <tcp_pcb_remove+0x6a>
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	683a      	ldr	r2, [r7, #0]
 8014356:	429a      	cmp	r2, r3
 8014358:	d104      	bne.n	8014364 <tcp_pcb_remove+0x64>
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	68da      	ldr	r2, [r3, #12]
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	60da      	str	r2, [r3, #12]
 8014362:	e005      	b.n	8014370 <tcp_pcb_remove+0x70>
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	60fb      	str	r3, [r7, #12]
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d1ef      	bne.n	8014350 <tcp_pcb_remove+0x50>
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	2200      	movs	r2, #0
 8014374:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014376:	6838      	ldr	r0, [r7, #0]
 8014378:	f7ff ff72 	bl	8014260 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	7d1b      	ldrb	r3, [r3, #20]
 8014380:	2b0a      	cmp	r3, #10
 8014382:	d013      	beq.n	80143ac <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014388:	2b01      	cmp	r3, #1
 801438a:	d00f      	beq.n	80143ac <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	8b5b      	ldrh	r3, [r3, #26]
 8014390:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014394:	2b00      	cmp	r3, #0
 8014396:	d009      	beq.n	80143ac <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	8b5b      	ldrh	r3, [r3, #26]
 801439c:	f043 0302 	orr.w	r3, r3, #2
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80143a6:	6838      	ldr	r0, [r7, #0]
 80143a8:	f003 fbc6 	bl	8017b38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	7d1b      	ldrb	r3, [r3, #20]
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d020      	beq.n	80143f6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d006      	beq.n	80143ca <tcp_pcb_remove+0xca>
 80143bc:	4b13      	ldr	r3, [pc, #76]	; (801440c <tcp_pcb_remove+0x10c>)
 80143be:	f640 0293 	movw	r2, #2195	; 0x893
 80143c2:	4916      	ldr	r1, [pc, #88]	; (801441c <tcp_pcb_remove+0x11c>)
 80143c4:	4813      	ldr	r0, [pc, #76]	; (8014414 <tcp_pcb_remove+0x114>)
 80143c6:	f007 fc6d 	bl	801bca4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d006      	beq.n	80143e0 <tcp_pcb_remove+0xe0>
 80143d2:	4b0e      	ldr	r3, [pc, #56]	; (801440c <tcp_pcb_remove+0x10c>)
 80143d4:	f640 0294 	movw	r2, #2196	; 0x894
 80143d8:	4911      	ldr	r1, [pc, #68]	; (8014420 <tcp_pcb_remove+0x120>)
 80143da:	480e      	ldr	r0, [pc, #56]	; (8014414 <tcp_pcb_remove+0x114>)
 80143dc:	f007 fc62 	bl	801bca4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d006      	beq.n	80143f6 <tcp_pcb_remove+0xf6>
 80143e8:	4b08      	ldr	r3, [pc, #32]	; (801440c <tcp_pcb_remove+0x10c>)
 80143ea:	f640 0296 	movw	r2, #2198	; 0x896
 80143ee:	490d      	ldr	r1, [pc, #52]	; (8014424 <tcp_pcb_remove+0x124>)
 80143f0:	4808      	ldr	r0, [pc, #32]	; (8014414 <tcp_pcb_remove+0x114>)
 80143f2:	f007 fc57 	bl	801bca4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	2200      	movs	r2, #0
 80143fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	2200      	movs	r2, #0
 8014400:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014402:	bf00      	nop
 8014404:	3710      	adds	r7, #16
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	0801dce0 	.word	0x0801dce0
 8014410:	0801e348 	.word	0x0801e348
 8014414:	0801dd24 	.word	0x0801dd24
 8014418:	0801e364 	.word	0x0801e364
 801441c:	0801e384 	.word	0x0801e384
 8014420:	0801e39c 	.word	0x0801e39c
 8014424:	0801e3b8 	.word	0x0801e3b8

08014428 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d106      	bne.n	8014444 <tcp_next_iss+0x1c>
 8014436:	4b0a      	ldr	r3, [pc, #40]	; (8014460 <tcp_next_iss+0x38>)
 8014438:	f640 02af 	movw	r2, #2223	; 0x8af
 801443c:	4909      	ldr	r1, [pc, #36]	; (8014464 <tcp_next_iss+0x3c>)
 801443e:	480a      	ldr	r0, [pc, #40]	; (8014468 <tcp_next_iss+0x40>)
 8014440:	f007 fc30 	bl	801bca4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014444:	4b09      	ldr	r3, [pc, #36]	; (801446c <tcp_next_iss+0x44>)
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	4b09      	ldr	r3, [pc, #36]	; (8014470 <tcp_next_iss+0x48>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4413      	add	r3, r2
 801444e:	4a07      	ldr	r2, [pc, #28]	; (801446c <tcp_next_iss+0x44>)
 8014450:	6013      	str	r3, [r2, #0]
  return iss;
 8014452:	4b06      	ldr	r3, [pc, #24]	; (801446c <tcp_next_iss+0x44>)
 8014454:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014456:	4618      	mov	r0, r3
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	0801dce0 	.word	0x0801dce0
 8014464:	0801e3d0 	.word	0x0801e3d0
 8014468:	0801dd24 	.word	0x0801dd24
 801446c:	2000007c 	.word	0x2000007c
 8014470:	2000b450 	.word	0x2000b450

08014474 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b086      	sub	sp, #24
 8014478:	af00      	add	r7, sp, #0
 801447a:	4603      	mov	r3, r0
 801447c:	60b9      	str	r1, [r7, #8]
 801447e:	607a      	str	r2, [r7, #4]
 8014480:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d106      	bne.n	8014496 <tcp_eff_send_mss_netif+0x22>
 8014488:	4b14      	ldr	r3, [pc, #80]	; (80144dc <tcp_eff_send_mss_netif+0x68>)
 801448a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801448e:	4914      	ldr	r1, [pc, #80]	; (80144e0 <tcp_eff_send_mss_netif+0x6c>)
 8014490:	4814      	ldr	r0, [pc, #80]	; (80144e4 <tcp_eff_send_mss_netif+0x70>)
 8014492:	f007 fc07 	bl	801bca4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d101      	bne.n	80144a0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801449c:	89fb      	ldrh	r3, [r7, #14]
 801449e:	e019      	b.n	80144d4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144a4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80144a6:	8afb      	ldrh	r3, [r7, #22]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d012      	beq.n	80144d2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80144ac:	2328      	movs	r3, #40	; 0x28
 80144ae:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80144b0:	8afa      	ldrh	r2, [r7, #22]
 80144b2:	8abb      	ldrh	r3, [r7, #20]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d904      	bls.n	80144c2 <tcp_eff_send_mss_netif+0x4e>
 80144b8:	8afa      	ldrh	r2, [r7, #22]
 80144ba:	8abb      	ldrh	r3, [r7, #20]
 80144bc:	1ad3      	subs	r3, r2, r3
 80144be:	b29b      	uxth	r3, r3
 80144c0:	e000      	b.n	80144c4 <tcp_eff_send_mss_netif+0x50>
 80144c2:	2300      	movs	r3, #0
 80144c4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80144c6:	8a7a      	ldrh	r2, [r7, #18]
 80144c8:	89fb      	ldrh	r3, [r7, #14]
 80144ca:	4293      	cmp	r3, r2
 80144cc:	bf28      	it	cs
 80144ce:	4613      	movcs	r3, r2
 80144d0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80144d2:	89fb      	ldrh	r3, [r7, #14]
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3718      	adds	r7, #24
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}
 80144dc:	0801dce0 	.word	0x0801dce0
 80144e0:	0801e3ec 	.word	0x0801e3ec
 80144e4:	0801dd24 	.word	0x0801dd24

080144e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d119      	bne.n	8014530 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80144fc:	4b10      	ldr	r3, [pc, #64]	; (8014540 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80144fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014502:	4910      	ldr	r1, [pc, #64]	; (8014544 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014504:	4810      	ldr	r0, [pc, #64]	; (8014548 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014506:	f007 fbcd 	bl	801bca4 <iprintf>

  while (pcb != NULL) {
 801450a:	e011      	b.n	8014530 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	681a      	ldr	r2, [r3, #0]
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	429a      	cmp	r2, r3
 8014516:	d108      	bne.n	801452a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	f7fe fd22 	bl	8012f68 <tcp_abort>
      pcb = next;
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	60fb      	str	r3, [r7, #12]
 8014528:	e002      	b.n	8014530 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	68db      	ldr	r3, [r3, #12]
 801452e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d1ea      	bne.n	801450c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014536:	bf00      	nop
 8014538:	bf00      	nop
 801453a:	3710      	adds	r7, #16
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	0801dce0 	.word	0x0801dce0
 8014544:	0801e414 	.word	0x0801e414
 8014548:	0801dd24 	.word	0x0801dd24

0801454c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d02a      	beq.n	80145b2 <tcp_netif_ip_addr_changed+0x66>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d026      	beq.n	80145b2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014564:	4b15      	ldr	r3, [pc, #84]	; (80145bc <tcp_netif_ip_addr_changed+0x70>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	4619      	mov	r1, r3
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f7ff ffbc 	bl	80144e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014570:	4b13      	ldr	r3, [pc, #76]	; (80145c0 <tcp_netif_ip_addr_changed+0x74>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f7ff ffb6 	bl	80144e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d017      	beq.n	80145b2 <tcp_netif_ip_addr_changed+0x66>
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d013      	beq.n	80145b2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801458a:	4b0e      	ldr	r3, [pc, #56]	; (80145c4 <tcp_netif_ip_addr_changed+0x78>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	60fb      	str	r3, [r7, #12]
 8014590:	e00c      	b.n	80145ac <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	681a      	ldr	r2, [r3, #0]
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	429a      	cmp	r2, r3
 801459c:	d103      	bne.n	80145a6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	60fb      	str	r3, [r7, #12]
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d1ef      	bne.n	8014592 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80145b2:	bf00      	nop
 80145b4:	3710      	adds	r7, #16
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}
 80145ba:	bf00      	nop
 80145bc:	2000b45c 	.word	0x2000b45c
 80145c0:	2000b454 	.word	0x2000b454
 80145c4:	2000b458 	.word	0x2000b458

080145c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d007      	beq.n	80145e8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145dc:	4618      	mov	r0, r3
 80145de:	f7ff fb57 	bl	8013c90 <tcp_segs_free>
    pcb->ooseq = NULL;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2200      	movs	r2, #0
 80145e6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80145e8:	bf00      	nop
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80145f0:	b590      	push	{r4, r7, lr}
 80145f2:	b08d      	sub	sp, #52	; 0x34
 80145f4:	af04      	add	r7, sp, #16
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d105      	bne.n	801460c <tcp_input+0x1c>
 8014600:	4b9b      	ldr	r3, [pc, #620]	; (8014870 <tcp_input+0x280>)
 8014602:	2283      	movs	r2, #131	; 0x83
 8014604:	499b      	ldr	r1, [pc, #620]	; (8014874 <tcp_input+0x284>)
 8014606:	489c      	ldr	r0, [pc, #624]	; (8014878 <tcp_input+0x288>)
 8014608:	f007 fb4c 	bl	801bca4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	4a9a      	ldr	r2, [pc, #616]	; (801487c <tcp_input+0x28c>)
 8014612:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	895b      	ldrh	r3, [r3, #10]
 8014618:	2b13      	cmp	r3, #19
 801461a:	f240 83d1 	bls.w	8014dc0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801461e:	4b98      	ldr	r3, [pc, #608]	; (8014880 <tcp_input+0x290>)
 8014620:	695b      	ldr	r3, [r3, #20]
 8014622:	4a97      	ldr	r2, [pc, #604]	; (8014880 <tcp_input+0x290>)
 8014624:	6812      	ldr	r2, [r2, #0]
 8014626:	4611      	mov	r1, r2
 8014628:	4618      	mov	r0, r3
 801462a:	f006 f88b 	bl	801a744 <ip4_addr_isbroadcast_u32>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	f040 83c7 	bne.w	8014dc4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014636:	4b92      	ldr	r3, [pc, #584]	; (8014880 <tcp_input+0x290>)
 8014638:	695b      	ldr	r3, [r3, #20]
 801463a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801463e:	2be0      	cmp	r3, #224	; 0xe0
 8014640:	f000 83c0 	beq.w	8014dc4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014644:	4b8d      	ldr	r3, [pc, #564]	; (801487c <tcp_input+0x28c>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	899b      	ldrh	r3, [r3, #12]
 801464a:	b29b      	uxth	r3, r3
 801464c:	4618      	mov	r0, r3
 801464e:	f7fc fb2b 	bl	8010ca8 <lwip_htons>
 8014652:	4603      	mov	r3, r0
 8014654:	0b1b      	lsrs	r3, r3, #12
 8014656:	b29b      	uxth	r3, r3
 8014658:	b2db      	uxtb	r3, r3
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801465e:	7cbb      	ldrb	r3, [r7, #18]
 8014660:	2b13      	cmp	r3, #19
 8014662:	f240 83b1 	bls.w	8014dc8 <tcp_input+0x7d8>
 8014666:	7cbb      	ldrb	r3, [r7, #18]
 8014668:	b29a      	uxth	r2, r3
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	891b      	ldrh	r3, [r3, #8]
 801466e:	429a      	cmp	r2, r3
 8014670:	f200 83aa 	bhi.w	8014dc8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014674:	7cbb      	ldrb	r3, [r7, #18]
 8014676:	b29b      	uxth	r3, r3
 8014678:	3b14      	subs	r3, #20
 801467a:	b29a      	uxth	r2, r3
 801467c:	4b81      	ldr	r3, [pc, #516]	; (8014884 <tcp_input+0x294>)
 801467e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014680:	4b81      	ldr	r3, [pc, #516]	; (8014888 <tcp_input+0x298>)
 8014682:	2200      	movs	r2, #0
 8014684:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	895a      	ldrh	r2, [r3, #10]
 801468a:	7cbb      	ldrb	r3, [r7, #18]
 801468c:	b29b      	uxth	r3, r3
 801468e:	429a      	cmp	r2, r3
 8014690:	d309      	bcc.n	80146a6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014692:	4b7c      	ldr	r3, [pc, #496]	; (8014884 <tcp_input+0x294>)
 8014694:	881a      	ldrh	r2, [r3, #0]
 8014696:	4b7d      	ldr	r3, [pc, #500]	; (801488c <tcp_input+0x29c>)
 8014698:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801469a:	7cbb      	ldrb	r3, [r7, #18]
 801469c:	4619      	mov	r1, r3
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f7fd fe44 	bl	801232c <pbuf_remove_header>
 80146a4:	e04e      	b.n	8014744 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d105      	bne.n	80146ba <tcp_input+0xca>
 80146ae:	4b70      	ldr	r3, [pc, #448]	; (8014870 <tcp_input+0x280>)
 80146b0:	22c2      	movs	r2, #194	; 0xc2
 80146b2:	4977      	ldr	r1, [pc, #476]	; (8014890 <tcp_input+0x2a0>)
 80146b4:	4870      	ldr	r0, [pc, #448]	; (8014878 <tcp_input+0x288>)
 80146b6:	f007 faf5 	bl	801bca4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80146ba:	2114      	movs	r1, #20
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f7fd fe35 	bl	801232c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	895a      	ldrh	r2, [r3, #10]
 80146c6:	4b71      	ldr	r3, [pc, #452]	; (801488c <tcp_input+0x29c>)
 80146c8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80146ca:	4b6e      	ldr	r3, [pc, #440]	; (8014884 <tcp_input+0x294>)
 80146cc:	881a      	ldrh	r2, [r3, #0]
 80146ce:	4b6f      	ldr	r3, [pc, #444]	; (801488c <tcp_input+0x29c>)
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80146d6:	4b6d      	ldr	r3, [pc, #436]	; (801488c <tcp_input+0x29c>)
 80146d8:	881b      	ldrh	r3, [r3, #0]
 80146da:	4619      	mov	r1, r3
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7fd fe25 	bl	801232c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	895b      	ldrh	r3, [r3, #10]
 80146e8:	8a3a      	ldrh	r2, [r7, #16]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	f200 836e 	bhi.w	8014dcc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	4a64      	ldr	r2, [pc, #400]	; (8014888 <tcp_input+0x298>)
 80146f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	8a3a      	ldrh	r2, [r7, #16]
 8014700:	4611      	mov	r1, r2
 8014702:	4618      	mov	r0, r3
 8014704:	f7fd fe12 	bl	801232c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	891a      	ldrh	r2, [r3, #8]
 801470c:	8a3b      	ldrh	r3, [r7, #16]
 801470e:	1ad3      	subs	r3, r2, r3
 8014710:	b29a      	uxth	r2, r3
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	895b      	ldrh	r3, [r3, #10]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d005      	beq.n	801472a <tcp_input+0x13a>
 801471e:	4b54      	ldr	r3, [pc, #336]	; (8014870 <tcp_input+0x280>)
 8014720:	22df      	movs	r2, #223	; 0xdf
 8014722:	495c      	ldr	r1, [pc, #368]	; (8014894 <tcp_input+0x2a4>)
 8014724:	4854      	ldr	r0, [pc, #336]	; (8014878 <tcp_input+0x288>)
 8014726:	f007 fabd 	bl	801bca4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	891a      	ldrh	r2, [r3, #8]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	891b      	ldrh	r3, [r3, #8]
 8014734:	429a      	cmp	r2, r3
 8014736:	d005      	beq.n	8014744 <tcp_input+0x154>
 8014738:	4b4d      	ldr	r3, [pc, #308]	; (8014870 <tcp_input+0x280>)
 801473a:	22e0      	movs	r2, #224	; 0xe0
 801473c:	4956      	ldr	r1, [pc, #344]	; (8014898 <tcp_input+0x2a8>)
 801473e:	484e      	ldr	r0, [pc, #312]	; (8014878 <tcp_input+0x288>)
 8014740:	f007 fab0 	bl	801bca4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014744:	4b4d      	ldr	r3, [pc, #308]	; (801487c <tcp_input+0x28c>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	881b      	ldrh	r3, [r3, #0]
 801474a:	b29b      	uxth	r3, r3
 801474c:	4a4b      	ldr	r2, [pc, #300]	; (801487c <tcp_input+0x28c>)
 801474e:	6814      	ldr	r4, [r2, #0]
 8014750:	4618      	mov	r0, r3
 8014752:	f7fc faa9 	bl	8010ca8 <lwip_htons>
 8014756:	4603      	mov	r3, r0
 8014758:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801475a:	4b48      	ldr	r3, [pc, #288]	; (801487c <tcp_input+0x28c>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	885b      	ldrh	r3, [r3, #2]
 8014760:	b29b      	uxth	r3, r3
 8014762:	4a46      	ldr	r2, [pc, #280]	; (801487c <tcp_input+0x28c>)
 8014764:	6814      	ldr	r4, [r2, #0]
 8014766:	4618      	mov	r0, r3
 8014768:	f7fc fa9e 	bl	8010ca8 <lwip_htons>
 801476c:	4603      	mov	r3, r0
 801476e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014770:	4b42      	ldr	r3, [pc, #264]	; (801487c <tcp_input+0x28c>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	4a41      	ldr	r2, [pc, #260]	; (801487c <tcp_input+0x28c>)
 8014778:	6814      	ldr	r4, [r2, #0]
 801477a:	4618      	mov	r0, r3
 801477c:	f7fc faa9 	bl	8010cd2 <lwip_htonl>
 8014780:	4603      	mov	r3, r0
 8014782:	6063      	str	r3, [r4, #4]
 8014784:	6863      	ldr	r3, [r4, #4]
 8014786:	4a45      	ldr	r2, [pc, #276]	; (801489c <tcp_input+0x2ac>)
 8014788:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801478a:	4b3c      	ldr	r3, [pc, #240]	; (801487c <tcp_input+0x28c>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	689b      	ldr	r3, [r3, #8]
 8014790:	4a3a      	ldr	r2, [pc, #232]	; (801487c <tcp_input+0x28c>)
 8014792:	6814      	ldr	r4, [r2, #0]
 8014794:	4618      	mov	r0, r3
 8014796:	f7fc fa9c 	bl	8010cd2 <lwip_htonl>
 801479a:	4603      	mov	r3, r0
 801479c:	60a3      	str	r3, [r4, #8]
 801479e:	68a3      	ldr	r3, [r4, #8]
 80147a0:	4a3f      	ldr	r2, [pc, #252]	; (80148a0 <tcp_input+0x2b0>)
 80147a2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80147a4:	4b35      	ldr	r3, [pc, #212]	; (801487c <tcp_input+0x28c>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	89db      	ldrh	r3, [r3, #14]
 80147aa:	b29b      	uxth	r3, r3
 80147ac:	4a33      	ldr	r2, [pc, #204]	; (801487c <tcp_input+0x28c>)
 80147ae:	6814      	ldr	r4, [r2, #0]
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fc fa79 	bl	8010ca8 <lwip_htons>
 80147b6:	4603      	mov	r3, r0
 80147b8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80147ba:	4b30      	ldr	r3, [pc, #192]	; (801487c <tcp_input+0x28c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	899b      	ldrh	r3, [r3, #12]
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fc fa70 	bl	8010ca8 <lwip_htons>
 80147c8:	4603      	mov	r3, r0
 80147ca:	b2db      	uxtb	r3, r3
 80147cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80147d0:	b2da      	uxtb	r2, r3
 80147d2:	4b34      	ldr	r3, [pc, #208]	; (80148a4 <tcp_input+0x2b4>)
 80147d4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	891a      	ldrh	r2, [r3, #8]
 80147da:	4b33      	ldr	r3, [pc, #204]	; (80148a8 <tcp_input+0x2b8>)
 80147dc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80147de:	4b31      	ldr	r3, [pc, #196]	; (80148a4 <tcp_input+0x2b4>)
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	f003 0303 	and.w	r3, r3, #3
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d00c      	beq.n	8014804 <tcp_input+0x214>
    tcplen++;
 80147ea:	4b2f      	ldr	r3, [pc, #188]	; (80148a8 <tcp_input+0x2b8>)
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	3301      	adds	r3, #1
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	4b2d      	ldr	r3, [pc, #180]	; (80148a8 <tcp_input+0x2b8>)
 80147f4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	891a      	ldrh	r2, [r3, #8]
 80147fa:	4b2b      	ldr	r3, [pc, #172]	; (80148a8 <tcp_input+0x2b8>)
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	429a      	cmp	r2, r3
 8014800:	f200 82e6 	bhi.w	8014dd0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014804:	2300      	movs	r3, #0
 8014806:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014808:	4b28      	ldr	r3, [pc, #160]	; (80148ac <tcp_input+0x2bc>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	61fb      	str	r3, [r7, #28]
 801480e:	e09d      	b.n	801494c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	7d1b      	ldrb	r3, [r3, #20]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d105      	bne.n	8014824 <tcp_input+0x234>
 8014818:	4b15      	ldr	r3, [pc, #84]	; (8014870 <tcp_input+0x280>)
 801481a:	22fb      	movs	r2, #251	; 0xfb
 801481c:	4924      	ldr	r1, [pc, #144]	; (80148b0 <tcp_input+0x2c0>)
 801481e:	4816      	ldr	r0, [pc, #88]	; (8014878 <tcp_input+0x288>)
 8014820:	f007 fa40 	bl	801bca4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	7d1b      	ldrb	r3, [r3, #20]
 8014828:	2b0a      	cmp	r3, #10
 801482a:	d105      	bne.n	8014838 <tcp_input+0x248>
 801482c:	4b10      	ldr	r3, [pc, #64]	; (8014870 <tcp_input+0x280>)
 801482e:	22fc      	movs	r2, #252	; 0xfc
 8014830:	4920      	ldr	r1, [pc, #128]	; (80148b4 <tcp_input+0x2c4>)
 8014832:	4811      	ldr	r0, [pc, #68]	; (8014878 <tcp_input+0x288>)
 8014834:	f007 fa36 	bl	801bca4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014838:	69fb      	ldr	r3, [r7, #28]
 801483a:	7d1b      	ldrb	r3, [r3, #20]
 801483c:	2b01      	cmp	r3, #1
 801483e:	d105      	bne.n	801484c <tcp_input+0x25c>
 8014840:	4b0b      	ldr	r3, [pc, #44]	; (8014870 <tcp_input+0x280>)
 8014842:	22fd      	movs	r2, #253	; 0xfd
 8014844:	491c      	ldr	r1, [pc, #112]	; (80148b8 <tcp_input+0x2c8>)
 8014846:	480c      	ldr	r0, [pc, #48]	; (8014878 <tcp_input+0x288>)
 8014848:	f007 fa2c 	bl	801bca4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801484c:	69fb      	ldr	r3, [r7, #28]
 801484e:	7a1b      	ldrb	r3, [r3, #8]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d033      	beq.n	80148bc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	7a1a      	ldrb	r2, [r3, #8]
 8014858:	4b09      	ldr	r3, [pc, #36]	; (8014880 <tcp_input+0x290>)
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014860:	3301      	adds	r3, #1
 8014862:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014864:	429a      	cmp	r2, r3
 8014866:	d029      	beq.n	80148bc <tcp_input+0x2cc>
      prev = pcb;
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	61bb      	str	r3, [r7, #24]
      continue;
 801486c:	e06b      	b.n	8014946 <tcp_input+0x356>
 801486e:	bf00      	nop
 8014870:	0801e448 	.word	0x0801e448
 8014874:	0801e47c 	.word	0x0801e47c
 8014878:	0801e494 	.word	0x0801e494
 801487c:	2000b478 	.word	0x2000b478
 8014880:	20004728 	.word	0x20004728
 8014884:	2000b47c 	.word	0x2000b47c
 8014888:	2000b480 	.word	0x2000b480
 801488c:	2000b47e 	.word	0x2000b47e
 8014890:	0801e4bc 	.word	0x0801e4bc
 8014894:	0801e4cc 	.word	0x0801e4cc
 8014898:	0801e4d8 	.word	0x0801e4d8
 801489c:	2000b488 	.word	0x2000b488
 80148a0:	2000b48c 	.word	0x2000b48c
 80148a4:	2000b494 	.word	0x2000b494
 80148a8:	2000b492 	.word	0x2000b492
 80148ac:	2000b45c 	.word	0x2000b45c
 80148b0:	0801e4f8 	.word	0x0801e4f8
 80148b4:	0801e520 	.word	0x0801e520
 80148b8:	0801e54c 	.word	0x0801e54c
    }

    if (pcb->remote_port == tcphdr->src &&
 80148bc:	69fb      	ldr	r3, [r7, #28]
 80148be:	8b1a      	ldrh	r2, [r3, #24]
 80148c0:	4b72      	ldr	r3, [pc, #456]	; (8014a8c <tcp_input+0x49c>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	881b      	ldrh	r3, [r3, #0]
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d13a      	bne.n	8014942 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80148cc:	69fb      	ldr	r3, [r7, #28]
 80148ce:	8ada      	ldrh	r2, [r3, #22]
 80148d0:	4b6e      	ldr	r3, [pc, #440]	; (8014a8c <tcp_input+0x49c>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	885b      	ldrh	r3, [r3, #2]
 80148d6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80148d8:	429a      	cmp	r2, r3
 80148da:	d132      	bne.n	8014942 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80148dc:	69fb      	ldr	r3, [r7, #28]
 80148de:	685a      	ldr	r2, [r3, #4]
 80148e0:	4b6b      	ldr	r3, [pc, #428]	; (8014a90 <tcp_input+0x4a0>)
 80148e2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d12c      	bne.n	8014942 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	681a      	ldr	r2, [r3, #0]
 80148ec:	4b68      	ldr	r3, [pc, #416]	; (8014a90 <tcp_input+0x4a0>)
 80148ee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d126      	bne.n	8014942 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80148f4:	69fb      	ldr	r3, [r7, #28]
 80148f6:	68db      	ldr	r3, [r3, #12]
 80148f8:	69fa      	ldr	r2, [r7, #28]
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d106      	bne.n	801490c <tcp_input+0x31c>
 80148fe:	4b65      	ldr	r3, [pc, #404]	; (8014a94 <tcp_input+0x4a4>)
 8014900:	f240 120d 	movw	r2, #269	; 0x10d
 8014904:	4964      	ldr	r1, [pc, #400]	; (8014a98 <tcp_input+0x4a8>)
 8014906:	4865      	ldr	r0, [pc, #404]	; (8014a9c <tcp_input+0x4ac>)
 8014908:	f007 f9cc 	bl	801bca4 <iprintf>
      if (prev != NULL) {
 801490c:	69bb      	ldr	r3, [r7, #24]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d00a      	beq.n	8014928 <tcp_input+0x338>
        prev->next = pcb->next;
 8014912:	69fb      	ldr	r3, [r7, #28]
 8014914:	68da      	ldr	r2, [r3, #12]
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801491a:	4b61      	ldr	r3, [pc, #388]	; (8014aa0 <tcp_input+0x4b0>)
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014922:	4a5f      	ldr	r2, [pc, #380]	; (8014aa0 <tcp_input+0x4b0>)
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	68db      	ldr	r3, [r3, #12]
 801492c:	69fa      	ldr	r2, [r7, #28]
 801492e:	429a      	cmp	r2, r3
 8014930:	d111      	bne.n	8014956 <tcp_input+0x366>
 8014932:	4b58      	ldr	r3, [pc, #352]	; (8014a94 <tcp_input+0x4a4>)
 8014934:	f240 1215 	movw	r2, #277	; 0x115
 8014938:	495a      	ldr	r1, [pc, #360]	; (8014aa4 <tcp_input+0x4b4>)
 801493a:	4858      	ldr	r0, [pc, #352]	; (8014a9c <tcp_input+0x4ac>)
 801493c:	f007 f9b2 	bl	801bca4 <iprintf>
      break;
 8014940:	e009      	b.n	8014956 <tcp_input+0x366>
    }
    prev = pcb;
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	68db      	ldr	r3, [r3, #12]
 801494a:	61fb      	str	r3, [r7, #28]
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	2b00      	cmp	r3, #0
 8014950:	f47f af5e 	bne.w	8014810 <tcp_input+0x220>
 8014954:	e000      	b.n	8014958 <tcp_input+0x368>
      break;
 8014956:	bf00      	nop
  }

  if (pcb == NULL) {
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	2b00      	cmp	r3, #0
 801495c:	f040 80aa 	bne.w	8014ab4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014960:	4b51      	ldr	r3, [pc, #324]	; (8014aa8 <tcp_input+0x4b8>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	61fb      	str	r3, [r7, #28]
 8014966:	e03f      	b.n	80149e8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	7d1b      	ldrb	r3, [r3, #20]
 801496c:	2b0a      	cmp	r3, #10
 801496e:	d006      	beq.n	801497e <tcp_input+0x38e>
 8014970:	4b48      	ldr	r3, [pc, #288]	; (8014a94 <tcp_input+0x4a4>)
 8014972:	f240 121f 	movw	r2, #287	; 0x11f
 8014976:	494d      	ldr	r1, [pc, #308]	; (8014aac <tcp_input+0x4bc>)
 8014978:	4848      	ldr	r0, [pc, #288]	; (8014a9c <tcp_input+0x4ac>)
 801497a:	f007 f993 	bl	801bca4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	7a1b      	ldrb	r3, [r3, #8]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d009      	beq.n	801499a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	7a1a      	ldrb	r2, [r3, #8]
 801498a:	4b41      	ldr	r3, [pc, #260]	; (8014a90 <tcp_input+0x4a0>)
 801498c:	685b      	ldr	r3, [r3, #4]
 801498e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014992:	3301      	adds	r3, #1
 8014994:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014996:	429a      	cmp	r2, r3
 8014998:	d122      	bne.n	80149e0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801499a:	69fb      	ldr	r3, [r7, #28]
 801499c:	8b1a      	ldrh	r2, [r3, #24]
 801499e:	4b3b      	ldr	r3, [pc, #236]	; (8014a8c <tcp_input+0x49c>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	881b      	ldrh	r3, [r3, #0]
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d11b      	bne.n	80149e2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	8ada      	ldrh	r2, [r3, #22]
 80149ae:	4b37      	ldr	r3, [pc, #220]	; (8014a8c <tcp_input+0x49c>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	885b      	ldrh	r3, [r3, #2]
 80149b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d113      	bne.n	80149e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80149ba:	69fb      	ldr	r3, [r7, #28]
 80149bc:	685a      	ldr	r2, [r3, #4]
 80149be:	4b34      	ldr	r3, [pc, #208]	; (8014a90 <tcp_input+0x4a0>)
 80149c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d10d      	bne.n	80149e2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80149c6:	69fb      	ldr	r3, [r7, #28]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	4b31      	ldr	r3, [pc, #196]	; (8014a90 <tcp_input+0x4a0>)
 80149cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d107      	bne.n	80149e2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80149d2:	69f8      	ldr	r0, [r7, #28]
 80149d4:	f000 fb56 	bl	8015084 <tcp_timewait_input>
        }
        pbuf_free(p);
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f7fd fd2d 	bl	8012438 <pbuf_free>
        return;
 80149de:	e1fd      	b.n	8014ddc <tcp_input+0x7ec>
        continue;
 80149e0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	68db      	ldr	r3, [r3, #12]
 80149e6:	61fb      	str	r3, [r7, #28]
 80149e8:	69fb      	ldr	r3, [r7, #28]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d1bc      	bne.n	8014968 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80149ee:	2300      	movs	r3, #0
 80149f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80149f2:	4b2f      	ldr	r3, [pc, #188]	; (8014ab0 <tcp_input+0x4c0>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	617b      	str	r3, [r7, #20]
 80149f8:	e02a      	b.n	8014a50 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	7a1b      	ldrb	r3, [r3, #8]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d00c      	beq.n	8014a1c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	7a1a      	ldrb	r2, [r3, #8]
 8014a06:	4b22      	ldr	r3, [pc, #136]	; (8014a90 <tcp_input+0x4a0>)
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a0e:	3301      	adds	r3, #1
 8014a10:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d002      	beq.n	8014a1c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	61bb      	str	r3, [r7, #24]
        continue;
 8014a1a:	e016      	b.n	8014a4a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	8ada      	ldrh	r2, [r3, #22]
 8014a20:	4b1a      	ldr	r3, [pc, #104]	; (8014a8c <tcp_input+0x49c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	885b      	ldrh	r3, [r3, #2]
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d10c      	bne.n	8014a46 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	4b17      	ldr	r3, [pc, #92]	; (8014a90 <tcp_input+0x4a0>)
 8014a32:	695b      	ldr	r3, [r3, #20]
 8014a34:	429a      	cmp	r2, r3
 8014a36:	d00f      	beq.n	8014a58 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00d      	beq.n	8014a5a <tcp_input+0x46a>
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d009      	beq.n	8014a5a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	68db      	ldr	r3, [r3, #12]
 8014a4e:	617b      	str	r3, [r7, #20]
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d1d1      	bne.n	80149fa <tcp_input+0x40a>
 8014a56:	e000      	b.n	8014a5a <tcp_input+0x46a>
            break;
 8014a58:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d029      	beq.n	8014ab4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d00a      	beq.n	8014a7c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	68da      	ldr	r2, [r3, #12]
 8014a6a:	69bb      	ldr	r3, [r7, #24]
 8014a6c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014a6e:	4b10      	ldr	r3, [pc, #64]	; (8014ab0 <tcp_input+0x4c0>)
 8014a70:	681a      	ldr	r2, [r3, #0]
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014a76:	4a0e      	ldr	r2, [pc, #56]	; (8014ab0 <tcp_input+0x4c0>)
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014a7c:	6978      	ldr	r0, [r7, #20]
 8014a7e:	f000 fa03 	bl	8014e88 <tcp_listen_input>
      }
      pbuf_free(p);
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f7fd fcd8 	bl	8012438 <pbuf_free>
      return;
 8014a88:	e1a8      	b.n	8014ddc <tcp_input+0x7ec>
 8014a8a:	bf00      	nop
 8014a8c:	2000b478 	.word	0x2000b478
 8014a90:	20004728 	.word	0x20004728
 8014a94:	0801e448 	.word	0x0801e448
 8014a98:	0801e574 	.word	0x0801e574
 8014a9c:	0801e494 	.word	0x0801e494
 8014aa0:	2000b45c 	.word	0x2000b45c
 8014aa4:	0801e5a0 	.word	0x0801e5a0
 8014aa8:	2000b460 	.word	0x2000b460
 8014aac:	0801e5cc 	.word	0x0801e5cc
 8014ab0:	2000b458 	.word	0x2000b458
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	f000 8158 	beq.w	8014d6c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014abc:	4b95      	ldr	r3, [pc, #596]	; (8014d14 <tcp_input+0x724>)
 8014abe:	2200      	movs	r2, #0
 8014ac0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	891a      	ldrh	r2, [r3, #8]
 8014ac6:	4b93      	ldr	r3, [pc, #588]	; (8014d14 <tcp_input+0x724>)
 8014ac8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014aca:	4a92      	ldr	r2, [pc, #584]	; (8014d14 <tcp_input+0x724>)
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014ad0:	4b91      	ldr	r3, [pc, #580]	; (8014d18 <tcp_input+0x728>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4a8f      	ldr	r2, [pc, #572]	; (8014d14 <tcp_input+0x724>)
 8014ad6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014ad8:	4b90      	ldr	r3, [pc, #576]	; (8014d1c <tcp_input+0x72c>)
 8014ada:	2200      	movs	r2, #0
 8014adc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014ade:	4b90      	ldr	r3, [pc, #576]	; (8014d20 <tcp_input+0x730>)
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014ae4:	4b8f      	ldr	r3, [pc, #572]	; (8014d24 <tcp_input+0x734>)
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014aea:	4b8f      	ldr	r3, [pc, #572]	; (8014d28 <tcp_input+0x738>)
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	f003 0308 	and.w	r3, r3, #8
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d006      	beq.n	8014b04 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	7b5b      	ldrb	r3, [r3, #13]
 8014afa:	f043 0301 	orr.w	r3, r3, #1
 8014afe:	b2da      	uxtb	r2, r3
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014b04:	69fb      	ldr	r3, [r7, #28]
 8014b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d017      	beq.n	8014b3c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014b0c:	69f8      	ldr	r0, [r7, #28]
 8014b0e:	f7ff f841 	bl	8013b94 <tcp_process_refused_data>
 8014b12:	4603      	mov	r3, r0
 8014b14:	f113 0f0d 	cmn.w	r3, #13
 8014b18:	d007      	beq.n	8014b2a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d00c      	beq.n	8014b3c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014b22:	4b82      	ldr	r3, [pc, #520]	; (8014d2c <tcp_input+0x73c>)
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d008      	beq.n	8014b3c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	f040 80e4 	bne.w	8014cfc <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014b34:	69f8      	ldr	r0, [r7, #28]
 8014b36:	f003 fe05 	bl	8018744 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014b3a:	e0df      	b.n	8014cfc <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8014b3c:	4a7c      	ldr	r2, [pc, #496]	; (8014d30 <tcp_input+0x740>)
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014b42:	69f8      	ldr	r0, [r7, #28]
 8014b44:	f000 fb18 	bl	8015178 <tcp_process>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014b4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b50:	f113 0f0d 	cmn.w	r3, #13
 8014b54:	f000 80d4 	beq.w	8014d00 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8014b58:	4b71      	ldr	r3, [pc, #452]	; (8014d20 <tcp_input+0x730>)
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	f003 0308 	and.w	r3, r3, #8
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d015      	beq.n	8014b90 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014b64:	69fb      	ldr	r3, [r7, #28]
 8014b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d008      	beq.n	8014b80 <tcp_input+0x590>
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b74:	69fa      	ldr	r2, [r7, #28]
 8014b76:	6912      	ldr	r2, [r2, #16]
 8014b78:	f06f 010d 	mvn.w	r1, #13
 8014b7c:	4610      	mov	r0, r2
 8014b7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014b80:	69f9      	ldr	r1, [r7, #28]
 8014b82:	486c      	ldr	r0, [pc, #432]	; (8014d34 <tcp_input+0x744>)
 8014b84:	f7ff fbbc 	bl	8014300 <tcp_pcb_remove>
        tcp_free(pcb);
 8014b88:	69f8      	ldr	r0, [r7, #28]
 8014b8a:	f7fd ff05 	bl	8012998 <tcp_free>
 8014b8e:	e0da      	b.n	8014d46 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014b90:	2300      	movs	r3, #0
 8014b92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014b94:	4b63      	ldr	r3, [pc, #396]	; (8014d24 <tcp_input+0x734>)
 8014b96:	881b      	ldrh	r3, [r3, #0]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d01d      	beq.n	8014bd8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014b9c:	4b61      	ldr	r3, [pc, #388]	; (8014d24 <tcp_input+0x734>)
 8014b9e:	881b      	ldrh	r3, [r3, #0]
 8014ba0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00a      	beq.n	8014bc2 <tcp_input+0x5d2>
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bb2:	69fa      	ldr	r2, [r7, #28]
 8014bb4:	6910      	ldr	r0, [r2, #16]
 8014bb6:	89fa      	ldrh	r2, [r7, #14]
 8014bb8:	69f9      	ldr	r1, [r7, #28]
 8014bba:	4798      	blx	r3
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	74fb      	strb	r3, [r7, #19]
 8014bc0:	e001      	b.n	8014bc6 <tcp_input+0x5d6>
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014bc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014bca:	f113 0f0d 	cmn.w	r3, #13
 8014bce:	f000 8099 	beq.w	8014d04 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014bd2:	4b54      	ldr	r3, [pc, #336]	; (8014d24 <tcp_input+0x734>)
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014bd8:	69f8      	ldr	r0, [r7, #28]
 8014bda:	f000 f915 	bl	8014e08 <tcp_input_delayed_close>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	f040 8091 	bne.w	8014d08 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014be6:	4b4d      	ldr	r3, [pc, #308]	; (8014d1c <tcp_input+0x72c>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d041      	beq.n	8014c72 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d006      	beq.n	8014c04 <tcp_input+0x614>
 8014bf6:	4b50      	ldr	r3, [pc, #320]	; (8014d38 <tcp_input+0x748>)
 8014bf8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014bfc:	494f      	ldr	r1, [pc, #316]	; (8014d3c <tcp_input+0x74c>)
 8014bfe:	4850      	ldr	r0, [pc, #320]	; (8014d40 <tcp_input+0x750>)
 8014c00:	f007 f850 	bl	801bca4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	8b5b      	ldrh	r3, [r3, #26]
 8014c08:	f003 0310 	and.w	r3, r3, #16
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d008      	beq.n	8014c22 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014c10:	4b42      	ldr	r3, [pc, #264]	; (8014d1c <tcp_input+0x72c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7fd fc0f 	bl	8012438 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014c1a:	69f8      	ldr	r0, [r7, #28]
 8014c1c:	f7fe f9a4 	bl	8012f68 <tcp_abort>
            goto aborted;
 8014c20:	e091      	b.n	8014d46 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014c22:	69fb      	ldr	r3, [r7, #28]
 8014c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00c      	beq.n	8014c46 <tcp_input+0x656>
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	6918      	ldr	r0, [r3, #16]
 8014c36:	4b39      	ldr	r3, [pc, #228]	; (8014d1c <tcp_input+0x72c>)
 8014c38:	681a      	ldr	r2, [r3, #0]
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	69f9      	ldr	r1, [r7, #28]
 8014c3e:	47a0      	blx	r4
 8014c40:	4603      	mov	r3, r0
 8014c42:	74fb      	strb	r3, [r7, #19]
 8014c44:	e008      	b.n	8014c58 <tcp_input+0x668>
 8014c46:	4b35      	ldr	r3, [pc, #212]	; (8014d1c <tcp_input+0x72c>)
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	69f9      	ldr	r1, [r7, #28]
 8014c4e:	2000      	movs	r0, #0
 8014c50:	f7ff f896 	bl	8013d80 <tcp_recv_null>
 8014c54:	4603      	mov	r3, r0
 8014c56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014c58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c5c:	f113 0f0d 	cmn.w	r3, #13
 8014c60:	d054      	beq.n	8014d0c <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014c62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d003      	beq.n	8014c72 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014c6a:	4b2c      	ldr	r3, [pc, #176]	; (8014d1c <tcp_input+0x72c>)
 8014c6c:	681a      	ldr	r2, [r3, #0]
 8014c6e:	69fb      	ldr	r3, [r7, #28]
 8014c70:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014c72:	4b2b      	ldr	r3, [pc, #172]	; (8014d20 <tcp_input+0x730>)
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	f003 0320 	and.w	r3, r3, #32
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d031      	beq.n	8014ce2 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d009      	beq.n	8014c9a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014c86:	69fb      	ldr	r3, [r7, #28]
 8014c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c8a:	7b5a      	ldrb	r2, [r3, #13]
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c90:	f042 0220 	orr.w	r2, r2, #32
 8014c94:	b2d2      	uxtb	r2, r2
 8014c96:	735a      	strb	r2, [r3, #13]
 8014c98:	e023      	b.n	8014ce2 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c9e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d005      	beq.n	8014cb2 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014caa:	3301      	adds	r3, #1
 8014cac:	b29a      	uxth	r2, r3
 8014cae:	69fb      	ldr	r3, [r7, #28]
 8014cb0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d00b      	beq.n	8014cd4 <tcp_input+0x6e4>
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014cc2:	69fb      	ldr	r3, [r7, #28]
 8014cc4:	6918      	ldr	r0, [r3, #16]
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	2200      	movs	r2, #0
 8014cca:	69f9      	ldr	r1, [r7, #28]
 8014ccc:	47a0      	blx	r4
 8014cce:	4603      	mov	r3, r0
 8014cd0:	74fb      	strb	r3, [r7, #19]
 8014cd2:	e001      	b.n	8014cd8 <tcp_input+0x6e8>
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014cd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014cdc:	f113 0f0d 	cmn.w	r3, #13
 8014ce0:	d016      	beq.n	8014d10 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014ce2:	4b13      	ldr	r3, [pc, #76]	; (8014d30 <tcp_input+0x740>)
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014ce8:	69f8      	ldr	r0, [r7, #28]
 8014cea:	f000 f88d 	bl	8014e08 <tcp_input_delayed_close>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d127      	bne.n	8014d44 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014cf4:	69f8      	ldr	r0, [r7, #28]
 8014cf6:	f002 ff1f 	bl	8017b38 <tcp_output>
 8014cfa:	e024      	b.n	8014d46 <tcp_input+0x756>
        goto aborted;
 8014cfc:	bf00      	nop
 8014cfe:	e022      	b.n	8014d46 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014d00:	bf00      	nop
 8014d02:	e020      	b.n	8014d46 <tcp_input+0x756>
              goto aborted;
 8014d04:	bf00      	nop
 8014d06:	e01e      	b.n	8014d46 <tcp_input+0x756>
          goto aborted;
 8014d08:	bf00      	nop
 8014d0a:	e01c      	b.n	8014d46 <tcp_input+0x756>
            goto aborted;
 8014d0c:	bf00      	nop
 8014d0e:	e01a      	b.n	8014d46 <tcp_input+0x756>
              goto aborted;
 8014d10:	bf00      	nop
 8014d12:	e018      	b.n	8014d46 <tcp_input+0x756>
 8014d14:	2000b468 	.word	0x2000b468
 8014d18:	2000b478 	.word	0x2000b478
 8014d1c:	2000b498 	.word	0x2000b498
 8014d20:	2000b495 	.word	0x2000b495
 8014d24:	2000b490 	.word	0x2000b490
 8014d28:	2000b494 	.word	0x2000b494
 8014d2c:	2000b492 	.word	0x2000b492
 8014d30:	2000b49c 	.word	0x2000b49c
 8014d34:	2000b45c 	.word	0x2000b45c
 8014d38:	0801e448 	.word	0x0801e448
 8014d3c:	0801e5fc 	.word	0x0801e5fc
 8014d40:	0801e494 	.word	0x0801e494
          goto aborted;
 8014d44:	bf00      	nop
    tcp_input_pcb = NULL;
 8014d46:	4b27      	ldr	r3, [pc, #156]	; (8014de4 <tcp_input+0x7f4>)
 8014d48:	2200      	movs	r2, #0
 8014d4a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014d4c:	4b26      	ldr	r3, [pc, #152]	; (8014de8 <tcp_input+0x7f8>)
 8014d4e:	2200      	movs	r2, #0
 8014d50:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014d52:	4b26      	ldr	r3, [pc, #152]	; (8014dec <tcp_input+0x7fc>)
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d03f      	beq.n	8014dda <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014d5a:	4b24      	ldr	r3, [pc, #144]	; (8014dec <tcp_input+0x7fc>)
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fd fb6a 	bl	8012438 <pbuf_free>
      inseg.p = NULL;
 8014d64:	4b21      	ldr	r3, [pc, #132]	; (8014dec <tcp_input+0x7fc>)
 8014d66:	2200      	movs	r2, #0
 8014d68:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014d6a:	e036      	b.n	8014dda <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014d6c:	4b20      	ldr	r3, [pc, #128]	; (8014df0 <tcp_input+0x800>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	899b      	ldrh	r3, [r3, #12]
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7fb ff97 	bl	8010ca8 <lwip_htons>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	f003 0304 	and.w	r3, r3, #4
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d118      	bne.n	8014db8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d86:	4b1b      	ldr	r3, [pc, #108]	; (8014df4 <tcp_input+0x804>)
 8014d88:	6819      	ldr	r1, [r3, #0]
 8014d8a:	4b1b      	ldr	r3, [pc, #108]	; (8014df8 <tcp_input+0x808>)
 8014d8c:	881b      	ldrh	r3, [r3, #0]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	4b1a      	ldr	r3, [pc, #104]	; (8014dfc <tcp_input+0x80c>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d96:	4b16      	ldr	r3, [pc, #88]	; (8014df0 <tcp_input+0x800>)
 8014d98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d9a:	885b      	ldrh	r3, [r3, #2]
 8014d9c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d9e:	4a14      	ldr	r2, [pc, #80]	; (8014df0 <tcp_input+0x800>)
 8014da0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014da2:	8812      	ldrh	r2, [r2, #0]
 8014da4:	b292      	uxth	r2, r2
 8014da6:	9202      	str	r2, [sp, #8]
 8014da8:	9301      	str	r3, [sp, #4]
 8014daa:	4b15      	ldr	r3, [pc, #84]	; (8014e00 <tcp_input+0x810>)
 8014dac:	9300      	str	r3, [sp, #0]
 8014dae:	4b15      	ldr	r3, [pc, #84]	; (8014e04 <tcp_input+0x814>)
 8014db0:	4602      	mov	r2, r0
 8014db2:	2000      	movs	r0, #0
 8014db4:	f003 fc74 	bl	80186a0 <tcp_rst>
    pbuf_free(p);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f7fd fb3d 	bl	8012438 <pbuf_free>
  return;
 8014dbe:	e00c      	b.n	8014dda <tcp_input+0x7ea>
    goto dropped;
 8014dc0:	bf00      	nop
 8014dc2:	e006      	b.n	8014dd2 <tcp_input+0x7e2>
    goto dropped;
 8014dc4:	bf00      	nop
 8014dc6:	e004      	b.n	8014dd2 <tcp_input+0x7e2>
    goto dropped;
 8014dc8:	bf00      	nop
 8014dca:	e002      	b.n	8014dd2 <tcp_input+0x7e2>
      goto dropped;
 8014dcc:	bf00      	nop
 8014dce:	e000      	b.n	8014dd2 <tcp_input+0x7e2>
      goto dropped;
 8014dd0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7fd fb30 	bl	8012438 <pbuf_free>
 8014dd8:	e000      	b.n	8014ddc <tcp_input+0x7ec>
  return;
 8014dda:	bf00      	nop
}
 8014ddc:	3724      	adds	r7, #36	; 0x24
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd90      	pop	{r4, r7, pc}
 8014de2:	bf00      	nop
 8014de4:	2000b49c 	.word	0x2000b49c
 8014de8:	2000b498 	.word	0x2000b498
 8014dec:	2000b468 	.word	0x2000b468
 8014df0:	2000b478 	.word	0x2000b478
 8014df4:	2000b48c 	.word	0x2000b48c
 8014df8:	2000b492 	.word	0x2000b492
 8014dfc:	2000b488 	.word	0x2000b488
 8014e00:	20004738 	.word	0x20004738
 8014e04:	2000473c 	.word	0x2000473c

08014e08 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d106      	bne.n	8014e24 <tcp_input_delayed_close+0x1c>
 8014e16:	4b17      	ldr	r3, [pc, #92]	; (8014e74 <tcp_input_delayed_close+0x6c>)
 8014e18:	f240 225a 	movw	r2, #602	; 0x25a
 8014e1c:	4916      	ldr	r1, [pc, #88]	; (8014e78 <tcp_input_delayed_close+0x70>)
 8014e1e:	4817      	ldr	r0, [pc, #92]	; (8014e7c <tcp_input_delayed_close+0x74>)
 8014e20:	f006 ff40 	bl	801bca4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014e24:	4b16      	ldr	r3, [pc, #88]	; (8014e80 <tcp_input_delayed_close+0x78>)
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	f003 0310 	and.w	r3, r3, #16
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d01c      	beq.n	8014e6a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	8b5b      	ldrh	r3, [r3, #26]
 8014e34:	f003 0310 	and.w	r3, r3, #16
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d10d      	bne.n	8014e58 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d008      	beq.n	8014e58 <tcp_input_delayed_close+0x50>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	6912      	ldr	r2, [r2, #16]
 8014e50:	f06f 010e 	mvn.w	r1, #14
 8014e54:	4610      	mov	r0, r2
 8014e56:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014e58:	6879      	ldr	r1, [r7, #4]
 8014e5a:	480a      	ldr	r0, [pc, #40]	; (8014e84 <tcp_input_delayed_close+0x7c>)
 8014e5c:	f7ff fa50 	bl	8014300 <tcp_pcb_remove>
    tcp_free(pcb);
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f7fd fd99 	bl	8012998 <tcp_free>
    return 1;
 8014e66:	2301      	movs	r3, #1
 8014e68:	e000      	b.n	8014e6c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014e6a:	2300      	movs	r3, #0
}
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	3708      	adds	r7, #8
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	0801e448 	.word	0x0801e448
 8014e78:	0801e618 	.word	0x0801e618
 8014e7c:	0801e494 	.word	0x0801e494
 8014e80:	2000b495 	.word	0x2000b495
 8014e84:	2000b45c 	.word	0x2000b45c

08014e88 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014e88:	b590      	push	{r4, r7, lr}
 8014e8a:	b08b      	sub	sp, #44	; 0x2c
 8014e8c:	af04      	add	r7, sp, #16
 8014e8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014e90:	4b6f      	ldr	r3, [pc, #444]	; (8015050 <tcp_listen_input+0x1c8>)
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	f003 0304 	and.w	r3, r3, #4
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	f040 80d2 	bne.w	8015042 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d106      	bne.n	8014eb2 <tcp_listen_input+0x2a>
 8014ea4:	4b6b      	ldr	r3, [pc, #428]	; (8015054 <tcp_listen_input+0x1cc>)
 8014ea6:	f240 2281 	movw	r2, #641	; 0x281
 8014eaa:	496b      	ldr	r1, [pc, #428]	; (8015058 <tcp_listen_input+0x1d0>)
 8014eac:	486b      	ldr	r0, [pc, #428]	; (801505c <tcp_listen_input+0x1d4>)
 8014eae:	f006 fef9 	bl	801bca4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014eb2:	4b67      	ldr	r3, [pc, #412]	; (8015050 <tcp_listen_input+0x1c8>)
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	f003 0310 	and.w	r3, r3, #16
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d019      	beq.n	8014ef2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ebe:	4b68      	ldr	r3, [pc, #416]	; (8015060 <tcp_listen_input+0x1d8>)
 8014ec0:	6819      	ldr	r1, [r3, #0]
 8014ec2:	4b68      	ldr	r3, [pc, #416]	; (8015064 <tcp_listen_input+0x1dc>)
 8014ec4:	881b      	ldrh	r3, [r3, #0]
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	4b67      	ldr	r3, [pc, #412]	; (8015068 <tcp_listen_input+0x1e0>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ece:	4b67      	ldr	r3, [pc, #412]	; (801506c <tcp_listen_input+0x1e4>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ed2:	885b      	ldrh	r3, [r3, #2]
 8014ed4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ed6:	4a65      	ldr	r2, [pc, #404]	; (801506c <tcp_listen_input+0x1e4>)
 8014ed8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014eda:	8812      	ldrh	r2, [r2, #0]
 8014edc:	b292      	uxth	r2, r2
 8014ede:	9202      	str	r2, [sp, #8]
 8014ee0:	9301      	str	r3, [sp, #4]
 8014ee2:	4b63      	ldr	r3, [pc, #396]	; (8015070 <tcp_listen_input+0x1e8>)
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	4b63      	ldr	r3, [pc, #396]	; (8015074 <tcp_listen_input+0x1ec>)
 8014ee8:	4602      	mov	r2, r0
 8014eea:	6878      	ldr	r0, [r7, #4]
 8014eec:	f003 fbd8 	bl	80186a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014ef0:	e0a9      	b.n	8015046 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014ef2:	4b57      	ldr	r3, [pc, #348]	; (8015050 <tcp_listen_input+0x1c8>)
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	f003 0302 	and.w	r3, r3, #2
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	f000 80a3 	beq.w	8015046 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	7d5b      	ldrb	r3, [r3, #21]
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7ff f85f 	bl	8013fc8 <tcp_alloc>
 8014f0a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d111      	bne.n	8014f36 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	699b      	ldr	r3, [r3, #24]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d00a      	beq.n	8014f30 <tcp_listen_input+0xa8>
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	699b      	ldr	r3, [r3, #24]
 8014f1e:	687a      	ldr	r2, [r7, #4]
 8014f20:	6910      	ldr	r0, [r2, #16]
 8014f22:	f04f 32ff 	mov.w	r2, #4294967295
 8014f26:	2100      	movs	r1, #0
 8014f28:	4798      	blx	r3
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	73bb      	strb	r3, [r7, #14]
      return;
 8014f2e:	e08b      	b.n	8015048 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014f30:	23f0      	movs	r3, #240	; 0xf0
 8014f32:	73bb      	strb	r3, [r7, #14]
      return;
 8014f34:	e088      	b.n	8015048 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014f36:	4b50      	ldr	r3, [pc, #320]	; (8015078 <tcp_listen_input+0x1f0>)
 8014f38:	695a      	ldr	r2, [r3, #20]
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014f3e:	4b4e      	ldr	r3, [pc, #312]	; (8015078 <tcp_listen_input+0x1f0>)
 8014f40:	691a      	ldr	r2, [r3, #16]
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	8ada      	ldrh	r2, [r3, #22]
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014f4e:	4b47      	ldr	r3, [pc, #284]	; (801506c <tcp_listen_input+0x1e4>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	881b      	ldrh	r3, [r3, #0]
 8014f54:	b29a      	uxth	r2, r3
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2203      	movs	r2, #3
 8014f5e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014f60:	4b41      	ldr	r3, [pc, #260]	; (8015068 <tcp_listen_input+0x1e0>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	1c5a      	adds	r2, r3, #1
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014f72:	6978      	ldr	r0, [r7, #20]
 8014f74:	f7ff fa58 	bl	8014428 <tcp_next_iss>
 8014f78:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	693a      	ldr	r2, [r7, #16]
 8014f7e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	693a      	ldr	r2, [r7, #16]
 8014f84:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	693a      	ldr	r2, [r7, #16]
 8014f8a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	693a      	ldr	r2, [r7, #16]
 8014f90:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014f92:	4b35      	ldr	r3, [pc, #212]	; (8015068 <tcp_listen_input+0x1e0>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	1e5a      	subs	r2, r3, #1
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	691a      	ldr	r2, [r3, #16]
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	687a      	ldr	r2, [r7, #4]
 8014fa8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	7a5b      	ldrb	r3, [r3, #9]
 8014fae:	f003 030c 	and.w	r3, r3, #12
 8014fb2:	b2da      	uxtb	r2, r3
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	7a1a      	ldrb	r2, [r3, #8]
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014fc0:	4b2e      	ldr	r3, [pc, #184]	; (801507c <tcp_listen_input+0x1f4>)
 8014fc2:	681a      	ldr	r2, [r3, #0]
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	60da      	str	r2, [r3, #12]
 8014fc8:	4a2c      	ldr	r2, [pc, #176]	; (801507c <tcp_listen_input+0x1f4>)
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	6013      	str	r3, [r2, #0]
 8014fce:	f003 fd29 	bl	8018a24 <tcp_timer_needed>
 8014fd2:	4b2b      	ldr	r3, [pc, #172]	; (8015080 <tcp_listen_input+0x1f8>)
 8014fd4:	2201      	movs	r2, #1
 8014fd6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014fd8:	6978      	ldr	r0, [r7, #20]
 8014fda:	f001 fd8f 	bl	8016afc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014fde:	4b23      	ldr	r3, [pc, #140]	; (801506c <tcp_listen_input+0x1e4>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	89db      	ldrh	r3, [r3, #14]
 8014fe4:	b29a      	uxth	r2, r3
 8014fe6:	697b      	ldr	r3, [r7, #20]
 8014fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014ff2:	697b      	ldr	r3, [r7, #20]
 8014ff4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	3304      	adds	r3, #4
 8015000:	4618      	mov	r0, r3
 8015002:	f005 f909 	bl	801a218 <ip4_route>
 8015006:	4601      	mov	r1, r0
 8015008:	697b      	ldr	r3, [r7, #20]
 801500a:	3304      	adds	r3, #4
 801500c:	461a      	mov	r2, r3
 801500e:	4620      	mov	r0, r4
 8015010:	f7ff fa30 	bl	8014474 <tcp_eff_send_mss_netif>
 8015014:	4603      	mov	r3, r0
 8015016:	461a      	mov	r2, r3
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801501c:	2112      	movs	r1, #18
 801501e:	6978      	ldr	r0, [r7, #20]
 8015020:	f002 fc9c 	bl	801795c <tcp_enqueue_flags>
 8015024:	4603      	mov	r3, r0
 8015026:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d004      	beq.n	801503a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015030:	2100      	movs	r1, #0
 8015032:	6978      	ldr	r0, [r7, #20]
 8015034:	f7fd feda 	bl	8012dec <tcp_abandon>
      return;
 8015038:	e006      	b.n	8015048 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801503a:	6978      	ldr	r0, [r7, #20]
 801503c:	f002 fd7c 	bl	8017b38 <tcp_output>
  return;
 8015040:	e001      	b.n	8015046 <tcp_listen_input+0x1be>
    return;
 8015042:	bf00      	nop
 8015044:	e000      	b.n	8015048 <tcp_listen_input+0x1c0>
  return;
 8015046:	bf00      	nop
}
 8015048:	371c      	adds	r7, #28
 801504a:	46bd      	mov	sp, r7
 801504c:	bd90      	pop	{r4, r7, pc}
 801504e:	bf00      	nop
 8015050:	2000b494 	.word	0x2000b494
 8015054:	0801e448 	.word	0x0801e448
 8015058:	0801e640 	.word	0x0801e640
 801505c:	0801e494 	.word	0x0801e494
 8015060:	2000b48c 	.word	0x2000b48c
 8015064:	2000b492 	.word	0x2000b492
 8015068:	2000b488 	.word	0x2000b488
 801506c:	2000b478 	.word	0x2000b478
 8015070:	20004738 	.word	0x20004738
 8015074:	2000473c 	.word	0x2000473c
 8015078:	20004728 	.word	0x20004728
 801507c:	2000b45c 	.word	0x2000b45c
 8015080:	2000b464 	.word	0x2000b464

08015084 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b086      	sub	sp, #24
 8015088:	af04      	add	r7, sp, #16
 801508a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801508c:	4b2f      	ldr	r3, [pc, #188]	; (801514c <tcp_timewait_input+0xc8>)
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	f003 0304 	and.w	r3, r3, #4
 8015094:	2b00      	cmp	r3, #0
 8015096:	d153      	bne.n	8015140 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d106      	bne.n	80150ac <tcp_timewait_input+0x28>
 801509e:	4b2c      	ldr	r3, [pc, #176]	; (8015150 <tcp_timewait_input+0xcc>)
 80150a0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80150a4:	492b      	ldr	r1, [pc, #172]	; (8015154 <tcp_timewait_input+0xd0>)
 80150a6:	482c      	ldr	r0, [pc, #176]	; (8015158 <tcp_timewait_input+0xd4>)
 80150a8:	f006 fdfc 	bl	801bca4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80150ac:	4b27      	ldr	r3, [pc, #156]	; (801514c <tcp_timewait_input+0xc8>)
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	f003 0302 	and.w	r3, r3, #2
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d02a      	beq.n	801510e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80150b8:	4b28      	ldr	r3, [pc, #160]	; (801515c <tcp_timewait_input+0xd8>)
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	db2d      	blt.n	8015122 <tcp_timewait_input+0x9e>
 80150c6:	4b25      	ldr	r3, [pc, #148]	; (801515c <tcp_timewait_input+0xd8>)
 80150c8:	681a      	ldr	r2, [r3, #0]
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ce:	6879      	ldr	r1, [r7, #4]
 80150d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80150d2:	440b      	add	r3, r1
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	dc23      	bgt.n	8015122 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150da:	4b21      	ldr	r3, [pc, #132]	; (8015160 <tcp_timewait_input+0xdc>)
 80150dc:	6819      	ldr	r1, [r3, #0]
 80150de:	4b21      	ldr	r3, [pc, #132]	; (8015164 <tcp_timewait_input+0xe0>)
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	461a      	mov	r2, r3
 80150e4:	4b1d      	ldr	r3, [pc, #116]	; (801515c <tcp_timewait_input+0xd8>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150ea:	4b1f      	ldr	r3, [pc, #124]	; (8015168 <tcp_timewait_input+0xe4>)
 80150ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150ee:	885b      	ldrh	r3, [r3, #2]
 80150f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150f2:	4a1d      	ldr	r2, [pc, #116]	; (8015168 <tcp_timewait_input+0xe4>)
 80150f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150f6:	8812      	ldrh	r2, [r2, #0]
 80150f8:	b292      	uxth	r2, r2
 80150fa:	9202      	str	r2, [sp, #8]
 80150fc:	9301      	str	r3, [sp, #4]
 80150fe:	4b1b      	ldr	r3, [pc, #108]	; (801516c <tcp_timewait_input+0xe8>)
 8015100:	9300      	str	r3, [sp, #0]
 8015102:	4b1b      	ldr	r3, [pc, #108]	; (8015170 <tcp_timewait_input+0xec>)
 8015104:	4602      	mov	r2, r0
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f003 faca 	bl	80186a0 <tcp_rst>
      return;
 801510c:	e01b      	b.n	8015146 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801510e:	4b0f      	ldr	r3, [pc, #60]	; (801514c <tcp_timewait_input+0xc8>)
 8015110:	781b      	ldrb	r3, [r3, #0]
 8015112:	f003 0301 	and.w	r3, r3, #1
 8015116:	2b00      	cmp	r3, #0
 8015118:	d003      	beq.n	8015122 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801511a:	4b16      	ldr	r3, [pc, #88]	; (8015174 <tcp_timewait_input+0xf0>)
 801511c:	681a      	ldr	r2, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015122:	4b10      	ldr	r3, [pc, #64]	; (8015164 <tcp_timewait_input+0xe0>)
 8015124:	881b      	ldrh	r3, [r3, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d00c      	beq.n	8015144 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	8b5b      	ldrh	r3, [r3, #26]
 801512e:	f043 0302 	orr.w	r3, r3, #2
 8015132:	b29a      	uxth	r2, r3
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f002 fcfd 	bl	8017b38 <tcp_output>
  }
  return;
 801513e:	e001      	b.n	8015144 <tcp_timewait_input+0xc0>
    return;
 8015140:	bf00      	nop
 8015142:	e000      	b.n	8015146 <tcp_timewait_input+0xc2>
  return;
 8015144:	bf00      	nop
}
 8015146:	3708      	adds	r7, #8
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	2000b494 	.word	0x2000b494
 8015150:	0801e448 	.word	0x0801e448
 8015154:	0801e660 	.word	0x0801e660
 8015158:	0801e494 	.word	0x0801e494
 801515c:	2000b488 	.word	0x2000b488
 8015160:	2000b48c 	.word	0x2000b48c
 8015164:	2000b492 	.word	0x2000b492
 8015168:	2000b478 	.word	0x2000b478
 801516c:	20004738 	.word	0x20004738
 8015170:	2000473c 	.word	0x2000473c
 8015174:	2000b450 	.word	0x2000b450

08015178 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015178:	b590      	push	{r4, r7, lr}
 801517a:	b08d      	sub	sp, #52	; 0x34
 801517c:	af04      	add	r7, sp, #16
 801517e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015180:	2300      	movs	r3, #0
 8015182:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015184:	2300      	movs	r3, #0
 8015186:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d106      	bne.n	801519c <tcp_process+0x24>
 801518e:	4b9d      	ldr	r3, [pc, #628]	; (8015404 <tcp_process+0x28c>)
 8015190:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015194:	499c      	ldr	r1, [pc, #624]	; (8015408 <tcp_process+0x290>)
 8015196:	489d      	ldr	r0, [pc, #628]	; (801540c <tcp_process+0x294>)
 8015198:	f006 fd84 	bl	801bca4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801519c:	4b9c      	ldr	r3, [pc, #624]	; (8015410 <tcp_process+0x298>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	f003 0304 	and.w	r3, r3, #4
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d04e      	beq.n	8015246 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	7d1b      	ldrb	r3, [r3, #20]
 80151ac:	2b02      	cmp	r3, #2
 80151ae:	d108      	bne.n	80151c2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80151b4:	4b97      	ldr	r3, [pc, #604]	; (8015414 <tcp_process+0x29c>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d123      	bne.n	8015204 <tcp_process+0x8c>
        acceptable = 1;
 80151bc:	2301      	movs	r3, #1
 80151be:	76fb      	strb	r3, [r7, #27]
 80151c0:	e020      	b.n	8015204 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151c6:	4b94      	ldr	r3, [pc, #592]	; (8015418 <tcp_process+0x2a0>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d102      	bne.n	80151d4 <tcp_process+0x5c>
        acceptable = 1;
 80151ce:	2301      	movs	r3, #1
 80151d0:	76fb      	strb	r3, [r7, #27]
 80151d2:	e017      	b.n	8015204 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80151d4:	4b90      	ldr	r3, [pc, #576]	; (8015418 <tcp_process+0x2a0>)
 80151d6:	681a      	ldr	r2, [r3, #0]
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151dc:	1ad3      	subs	r3, r2, r3
 80151de:	2b00      	cmp	r3, #0
 80151e0:	db10      	blt.n	8015204 <tcp_process+0x8c>
 80151e2:	4b8d      	ldr	r3, [pc, #564]	; (8015418 <tcp_process+0x2a0>)
 80151e4:	681a      	ldr	r2, [r3, #0]
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ea:	6879      	ldr	r1, [r7, #4]
 80151ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80151ee:	440b      	add	r3, r1
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	dc06      	bgt.n	8015204 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	8b5b      	ldrh	r3, [r3, #26]
 80151fa:	f043 0302 	orr.w	r3, r3, #2
 80151fe:	b29a      	uxth	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015204:	7efb      	ldrb	r3, [r7, #27]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d01b      	beq.n	8015242 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	7d1b      	ldrb	r3, [r3, #20]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d106      	bne.n	8015220 <tcp_process+0xa8>
 8015212:	4b7c      	ldr	r3, [pc, #496]	; (8015404 <tcp_process+0x28c>)
 8015214:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015218:	4980      	ldr	r1, [pc, #512]	; (801541c <tcp_process+0x2a4>)
 801521a:	487c      	ldr	r0, [pc, #496]	; (801540c <tcp_process+0x294>)
 801521c:	f006 fd42 	bl	801bca4 <iprintf>
      recv_flags |= TF_RESET;
 8015220:	4b7f      	ldr	r3, [pc, #508]	; (8015420 <tcp_process+0x2a8>)
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	f043 0308 	orr.w	r3, r3, #8
 8015228:	b2da      	uxtb	r2, r3
 801522a:	4b7d      	ldr	r3, [pc, #500]	; (8015420 <tcp_process+0x2a8>)
 801522c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	8b5b      	ldrh	r3, [r3, #26]
 8015232:	f023 0301 	bic.w	r3, r3, #1
 8015236:	b29a      	uxth	r2, r3
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801523c:	f06f 030d 	mvn.w	r3, #13
 8015240:	e37a      	b.n	8015938 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015242:	2300      	movs	r3, #0
 8015244:	e378      	b.n	8015938 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015246:	4b72      	ldr	r3, [pc, #456]	; (8015410 <tcp_process+0x298>)
 8015248:	781b      	ldrb	r3, [r3, #0]
 801524a:	f003 0302 	and.w	r3, r3, #2
 801524e:	2b00      	cmp	r3, #0
 8015250:	d010      	beq.n	8015274 <tcp_process+0xfc>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	7d1b      	ldrb	r3, [r3, #20]
 8015256:	2b02      	cmp	r3, #2
 8015258:	d00c      	beq.n	8015274 <tcp_process+0xfc>
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	7d1b      	ldrb	r3, [r3, #20]
 801525e:	2b03      	cmp	r3, #3
 8015260:	d008      	beq.n	8015274 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	8b5b      	ldrh	r3, [r3, #26]
 8015266:	f043 0302 	orr.w	r3, r3, #2
 801526a:	b29a      	uxth	r2, r3
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015270:	2300      	movs	r3, #0
 8015272:	e361      	b.n	8015938 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	8b5b      	ldrh	r3, [r3, #26]
 8015278:	f003 0310 	and.w	r3, r3, #16
 801527c:	2b00      	cmp	r3, #0
 801527e:	d103      	bne.n	8015288 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015280:	4b68      	ldr	r3, [pc, #416]	; (8015424 <tcp_process+0x2ac>)
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2200      	movs	r2, #0
 801528c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2200      	movs	r2, #0
 8015294:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f001 fc2f 	bl	8016afc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	7d1b      	ldrb	r3, [r3, #20]
 80152a2:	3b02      	subs	r3, #2
 80152a4:	2b07      	cmp	r3, #7
 80152a6:	f200 8337 	bhi.w	8015918 <tcp_process+0x7a0>
 80152aa:	a201      	add	r2, pc, #4	; (adr r2, 80152b0 <tcp_process+0x138>)
 80152ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b0:	080152d1 	.word	0x080152d1
 80152b4:	08015501 	.word	0x08015501
 80152b8:	08015679 	.word	0x08015679
 80152bc:	080156a3 	.word	0x080156a3
 80152c0:	080157c7 	.word	0x080157c7
 80152c4:	08015679 	.word	0x08015679
 80152c8:	08015853 	.word	0x08015853
 80152cc:	080158e3 	.word	0x080158e3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80152d0:	4b4f      	ldr	r3, [pc, #316]	; (8015410 <tcp_process+0x298>)
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	f003 0310 	and.w	r3, r3, #16
 80152d8:	2b00      	cmp	r3, #0
 80152da:	f000 80e4 	beq.w	80154a6 <tcp_process+0x32e>
 80152de:	4b4c      	ldr	r3, [pc, #304]	; (8015410 <tcp_process+0x298>)
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	f003 0302 	and.w	r3, r3, #2
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f000 80dd 	beq.w	80154a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152f0:	1c5a      	adds	r2, r3, #1
 80152f2:	4b48      	ldr	r3, [pc, #288]	; (8015414 <tcp_process+0x29c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	429a      	cmp	r2, r3
 80152f8:	f040 80d5 	bne.w	80154a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80152fc:	4b46      	ldr	r3, [pc, #280]	; (8015418 <tcp_process+0x2a0>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	1c5a      	adds	r2, r3, #1
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801530e:	4b41      	ldr	r3, [pc, #260]	; (8015414 <tcp_process+0x29c>)
 8015310:	681a      	ldr	r2, [r3, #0]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015316:	4b44      	ldr	r3, [pc, #272]	; (8015428 <tcp_process+0x2b0>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	89db      	ldrh	r3, [r3, #14]
 801531c:	b29a      	uxth	r2, r3
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015330:	4b39      	ldr	r3, [pc, #228]	; (8015418 <tcp_process+0x2a0>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	1e5a      	subs	r2, r3, #1
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2204      	movs	r2, #4
 801533e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	3304      	adds	r3, #4
 8015348:	4618      	mov	r0, r3
 801534a:	f004 ff65 	bl	801a218 <ip4_route>
 801534e:	4601      	mov	r1, r0
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	3304      	adds	r3, #4
 8015354:	461a      	mov	r2, r3
 8015356:	4620      	mov	r0, r4
 8015358:	f7ff f88c 	bl	8014474 <tcp_eff_send_mss_netif>
 801535c:	4603      	mov	r3, r0
 801535e:	461a      	mov	r2, r3
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015368:	009a      	lsls	r2, r3, #2
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801536e:	005b      	lsls	r3, r3, #1
 8015370:	f241 111c 	movw	r1, #4380	; 0x111c
 8015374:	428b      	cmp	r3, r1
 8015376:	bf38      	it	cc
 8015378:	460b      	movcc	r3, r1
 801537a:	429a      	cmp	r2, r3
 801537c:	d204      	bcs.n	8015388 <tcp_process+0x210>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	b29b      	uxth	r3, r3
 8015386:	e00d      	b.n	80153a4 <tcp_process+0x22c>
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015392:	4293      	cmp	r3, r2
 8015394:	d904      	bls.n	80153a0 <tcp_process+0x228>
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801539a:	005b      	lsls	r3, r3, #1
 801539c:	b29b      	uxth	r3, r3
 801539e:	e001      	b.n	80153a4 <tcp_process+0x22c>
 80153a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80153a4:	687a      	ldr	r2, [r7, #4]
 80153a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d106      	bne.n	80153c2 <tcp_process+0x24a>
 80153b4:	4b13      	ldr	r3, [pc, #76]	; (8015404 <tcp_process+0x28c>)
 80153b6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80153ba:	491c      	ldr	r1, [pc, #112]	; (801542c <tcp_process+0x2b4>)
 80153bc:	4813      	ldr	r0, [pc, #76]	; (801540c <tcp_process+0x294>)
 80153be:	f006 fc71 	bl	801bca4 <iprintf>
        --pcb->snd_queuelen;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80153c8:	3b01      	subs	r3, #1
 80153ca:	b29a      	uxth	r2, r3
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153d6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d12a      	bne.n	8015434 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153e2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80153e4:	69fb      	ldr	r3, [r7, #28]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d106      	bne.n	80153f8 <tcp_process+0x280>
 80153ea:	4b06      	ldr	r3, [pc, #24]	; (8015404 <tcp_process+0x28c>)
 80153ec:	f44f 725d 	mov.w	r2, #884	; 0x374
 80153f0:	490f      	ldr	r1, [pc, #60]	; (8015430 <tcp_process+0x2b8>)
 80153f2:	4806      	ldr	r0, [pc, #24]	; (801540c <tcp_process+0x294>)
 80153f4:	f006 fc56 	bl	801bca4 <iprintf>
          pcb->unsent = rseg->next;
 80153f8:	69fb      	ldr	r3, [r7, #28]
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	66da      	str	r2, [r3, #108]	; 0x6c
 8015400:	e01c      	b.n	801543c <tcp_process+0x2c4>
 8015402:	bf00      	nop
 8015404:	0801e448 	.word	0x0801e448
 8015408:	0801e680 	.word	0x0801e680
 801540c:	0801e494 	.word	0x0801e494
 8015410:	2000b494 	.word	0x2000b494
 8015414:	2000b48c 	.word	0x2000b48c
 8015418:	2000b488 	.word	0x2000b488
 801541c:	0801e69c 	.word	0x0801e69c
 8015420:	2000b495 	.word	0x2000b495
 8015424:	2000b450 	.word	0x2000b450
 8015428:	2000b478 	.word	0x2000b478
 801542c:	0801e6bc 	.word	0x0801e6bc
 8015430:	0801e6d4 	.word	0x0801e6d4
        } else {
          pcb->unacked = rseg->next;
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801543c:	69f8      	ldr	r0, [r7, #28]
 801543e:	f7fe fc3c 	bl	8013cba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015446:	2b00      	cmp	r3, #0
 8015448:	d104      	bne.n	8015454 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015450:	861a      	strh	r2, [r3, #48]	; 0x30
 8015452:	e006      	b.n	8015462 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2200      	movs	r2, #0
 8015458:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2200      	movs	r2, #0
 801545e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015468:	2b00      	cmp	r3, #0
 801546a:	d00a      	beq.n	8015482 <tcp_process+0x30a>
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	6910      	ldr	r0, [r2, #16]
 8015476:	2200      	movs	r2, #0
 8015478:	6879      	ldr	r1, [r7, #4]
 801547a:	4798      	blx	r3
 801547c:	4603      	mov	r3, r0
 801547e:	76bb      	strb	r3, [r7, #26]
 8015480:	e001      	b.n	8015486 <tcp_process+0x30e>
 8015482:	2300      	movs	r3, #0
 8015484:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015486:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801548a:	f113 0f0d 	cmn.w	r3, #13
 801548e:	d102      	bne.n	8015496 <tcp_process+0x31e>
          return ERR_ABRT;
 8015490:	f06f 030c 	mvn.w	r3, #12
 8015494:	e250      	b.n	8015938 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	8b5b      	ldrh	r3, [r3, #26]
 801549a:	f043 0302 	orr.w	r3, r3, #2
 801549e:	b29a      	uxth	r2, r3
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80154a4:	e23a      	b.n	801591c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80154a6:	4b98      	ldr	r3, [pc, #608]	; (8015708 <tcp_process+0x590>)
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	f003 0310 	and.w	r3, r3, #16
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f000 8234 	beq.w	801591c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80154b4:	4b95      	ldr	r3, [pc, #596]	; (801570c <tcp_process+0x594>)
 80154b6:	6819      	ldr	r1, [r3, #0]
 80154b8:	4b95      	ldr	r3, [pc, #596]	; (8015710 <tcp_process+0x598>)
 80154ba:	881b      	ldrh	r3, [r3, #0]
 80154bc:	461a      	mov	r2, r3
 80154be:	4b95      	ldr	r3, [pc, #596]	; (8015714 <tcp_process+0x59c>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80154c4:	4b94      	ldr	r3, [pc, #592]	; (8015718 <tcp_process+0x5a0>)
 80154c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80154c8:	885b      	ldrh	r3, [r3, #2]
 80154ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80154cc:	4a92      	ldr	r2, [pc, #584]	; (8015718 <tcp_process+0x5a0>)
 80154ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80154d0:	8812      	ldrh	r2, [r2, #0]
 80154d2:	b292      	uxth	r2, r2
 80154d4:	9202      	str	r2, [sp, #8]
 80154d6:	9301      	str	r3, [sp, #4]
 80154d8:	4b90      	ldr	r3, [pc, #576]	; (801571c <tcp_process+0x5a4>)
 80154da:	9300      	str	r3, [sp, #0]
 80154dc:	4b90      	ldr	r3, [pc, #576]	; (8015720 <tcp_process+0x5a8>)
 80154de:	4602      	mov	r2, r0
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f003 f8dd 	bl	80186a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154ec:	2b05      	cmp	r3, #5
 80154ee:	f200 8215 	bhi.w	801591c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2200      	movs	r2, #0
 80154f6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f002 fea9 	bl	8018250 <tcp_rexmit_rto>
      break;
 80154fe:	e20d      	b.n	801591c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015500:	4b81      	ldr	r3, [pc, #516]	; (8015708 <tcp_process+0x590>)
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	f003 0310 	and.w	r3, r3, #16
 8015508:	2b00      	cmp	r3, #0
 801550a:	f000 80a1 	beq.w	8015650 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801550e:	4b7f      	ldr	r3, [pc, #508]	; (801570c <tcp_process+0x594>)
 8015510:	681a      	ldr	r2, [r3, #0]
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015516:	1ad3      	subs	r3, r2, r3
 8015518:	3b01      	subs	r3, #1
 801551a:	2b00      	cmp	r3, #0
 801551c:	db7e      	blt.n	801561c <tcp_process+0x4a4>
 801551e:	4b7b      	ldr	r3, [pc, #492]	; (801570c <tcp_process+0x594>)
 8015520:	681a      	ldr	r2, [r3, #0]
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	2b00      	cmp	r3, #0
 801552a:	dc77      	bgt.n	801561c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2204      	movs	r2, #4
 8015530:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015536:	2b00      	cmp	r3, #0
 8015538:	d102      	bne.n	8015540 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801553a:	23fa      	movs	r3, #250	; 0xfa
 801553c:	76bb      	strb	r3, [r7, #26]
 801553e:	e01d      	b.n	801557c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015544:	699b      	ldr	r3, [r3, #24]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d106      	bne.n	8015558 <tcp_process+0x3e0>
 801554a:	4b76      	ldr	r3, [pc, #472]	; (8015724 <tcp_process+0x5ac>)
 801554c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015550:	4975      	ldr	r1, [pc, #468]	; (8015728 <tcp_process+0x5b0>)
 8015552:	4876      	ldr	r0, [pc, #472]	; (801572c <tcp_process+0x5b4>)
 8015554:	f006 fba6 	bl	801bca4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801555c:	699b      	ldr	r3, [r3, #24]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d00a      	beq.n	8015578 <tcp_process+0x400>
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015566:	699b      	ldr	r3, [r3, #24]
 8015568:	687a      	ldr	r2, [r7, #4]
 801556a:	6910      	ldr	r0, [r2, #16]
 801556c:	2200      	movs	r2, #0
 801556e:	6879      	ldr	r1, [r7, #4]
 8015570:	4798      	blx	r3
 8015572:	4603      	mov	r3, r0
 8015574:	76bb      	strb	r3, [r7, #26]
 8015576:	e001      	b.n	801557c <tcp_process+0x404>
 8015578:	23f0      	movs	r3, #240	; 0xf0
 801557a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801557c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d00a      	beq.n	801559a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015584:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015588:	f113 0f0d 	cmn.w	r3, #13
 801558c:	d002      	beq.n	8015594 <tcp_process+0x41c>
              tcp_abort(pcb);
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f7fd fcea 	bl	8012f68 <tcp_abort>
            }
            return ERR_ABRT;
 8015594:	f06f 030c 	mvn.w	r3, #12
 8015598:	e1ce      	b.n	8015938 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f000 fae0 	bl	8015b60 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80155a0:	4b63      	ldr	r3, [pc, #396]	; (8015730 <tcp_process+0x5b8>)
 80155a2:	881b      	ldrh	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d005      	beq.n	80155b4 <tcp_process+0x43c>
            recv_acked--;
 80155a8:	4b61      	ldr	r3, [pc, #388]	; (8015730 <tcp_process+0x5b8>)
 80155aa:	881b      	ldrh	r3, [r3, #0]
 80155ac:	3b01      	subs	r3, #1
 80155ae:	b29a      	uxth	r2, r3
 80155b0:	4b5f      	ldr	r3, [pc, #380]	; (8015730 <tcp_process+0x5b8>)
 80155b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155b8:	009a      	lsls	r2, r3, #2
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155be:	005b      	lsls	r3, r3, #1
 80155c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80155c4:	428b      	cmp	r3, r1
 80155c6:	bf38      	it	cc
 80155c8:	460b      	movcc	r3, r1
 80155ca:	429a      	cmp	r2, r3
 80155cc:	d204      	bcs.n	80155d8 <tcp_process+0x460>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	b29b      	uxth	r3, r3
 80155d6:	e00d      	b.n	80155f4 <tcp_process+0x47c>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155dc:	005b      	lsls	r3, r3, #1
 80155de:	f241 121c 	movw	r2, #4380	; 0x111c
 80155e2:	4293      	cmp	r3, r2
 80155e4:	d904      	bls.n	80155f0 <tcp_process+0x478>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155ea:	005b      	lsls	r3, r3, #1
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	e001      	b.n	80155f4 <tcp_process+0x47c>
 80155f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80155fa:	4b4e      	ldr	r3, [pc, #312]	; (8015734 <tcp_process+0x5bc>)
 80155fc:	781b      	ldrb	r3, [r3, #0]
 80155fe:	f003 0320 	and.w	r3, r3, #32
 8015602:	2b00      	cmp	r3, #0
 8015604:	d037      	beq.n	8015676 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	8b5b      	ldrh	r3, [r3, #26]
 801560a:	f043 0302 	orr.w	r3, r3, #2
 801560e:	b29a      	uxth	r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2207      	movs	r2, #7
 8015618:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801561a:	e02c      	b.n	8015676 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801561c:	4b3b      	ldr	r3, [pc, #236]	; (801570c <tcp_process+0x594>)
 801561e:	6819      	ldr	r1, [r3, #0]
 8015620:	4b3b      	ldr	r3, [pc, #236]	; (8015710 <tcp_process+0x598>)
 8015622:	881b      	ldrh	r3, [r3, #0]
 8015624:	461a      	mov	r2, r3
 8015626:	4b3b      	ldr	r3, [pc, #236]	; (8015714 <tcp_process+0x59c>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801562c:	4b3a      	ldr	r3, [pc, #232]	; (8015718 <tcp_process+0x5a0>)
 801562e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015630:	885b      	ldrh	r3, [r3, #2]
 8015632:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015634:	4a38      	ldr	r2, [pc, #224]	; (8015718 <tcp_process+0x5a0>)
 8015636:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015638:	8812      	ldrh	r2, [r2, #0]
 801563a:	b292      	uxth	r2, r2
 801563c:	9202      	str	r2, [sp, #8]
 801563e:	9301      	str	r3, [sp, #4]
 8015640:	4b36      	ldr	r3, [pc, #216]	; (801571c <tcp_process+0x5a4>)
 8015642:	9300      	str	r3, [sp, #0]
 8015644:	4b36      	ldr	r3, [pc, #216]	; (8015720 <tcp_process+0x5a8>)
 8015646:	4602      	mov	r2, r0
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f003 f829 	bl	80186a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801564e:	e167      	b.n	8015920 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015650:	4b2d      	ldr	r3, [pc, #180]	; (8015708 <tcp_process+0x590>)
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	f003 0302 	and.w	r3, r3, #2
 8015658:	2b00      	cmp	r3, #0
 801565a:	f000 8161 	beq.w	8015920 <tcp_process+0x7a8>
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015662:	1e5a      	subs	r2, r3, #1
 8015664:	4b2b      	ldr	r3, [pc, #172]	; (8015714 <tcp_process+0x59c>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	429a      	cmp	r2, r3
 801566a:	f040 8159 	bne.w	8015920 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f002 fe10 	bl	8018294 <tcp_rexmit>
      break;
 8015674:	e154      	b.n	8015920 <tcp_process+0x7a8>
 8015676:	e153      	b.n	8015920 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f000 fa71 	bl	8015b60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801567e:	4b2d      	ldr	r3, [pc, #180]	; (8015734 <tcp_process+0x5bc>)
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	f003 0320 	and.w	r3, r3, #32
 8015686:	2b00      	cmp	r3, #0
 8015688:	f000 814c 	beq.w	8015924 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	8b5b      	ldrh	r3, [r3, #26]
 8015690:	f043 0302 	orr.w	r3, r3, #2
 8015694:	b29a      	uxth	r2, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2207      	movs	r2, #7
 801569e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80156a0:	e140      	b.n	8015924 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f000 fa5c 	bl	8015b60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80156a8:	4b22      	ldr	r3, [pc, #136]	; (8015734 <tcp_process+0x5bc>)
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	f003 0320 	and.w	r3, r3, #32
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d071      	beq.n	8015798 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80156b4:	4b14      	ldr	r3, [pc, #80]	; (8015708 <tcp_process+0x590>)
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	f003 0310 	and.w	r3, r3, #16
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d060      	beq.n	8015782 <tcp_process+0x60a>
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80156c4:	4b11      	ldr	r3, [pc, #68]	; (801570c <tcp_process+0x594>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d15a      	bne.n	8015782 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d156      	bne.n	8015782 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	8b5b      	ldrh	r3, [r3, #26]
 80156d8:	f043 0302 	orr.w	r3, r3, #2
 80156dc:	b29a      	uxth	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f7fe fdbc 	bl	8014260 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80156e8:	4b13      	ldr	r3, [pc, #76]	; (8015738 <tcp_process+0x5c0>)
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	687a      	ldr	r2, [r7, #4]
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d105      	bne.n	80156fe <tcp_process+0x586>
 80156f2:	4b11      	ldr	r3, [pc, #68]	; (8015738 <tcp_process+0x5c0>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	68db      	ldr	r3, [r3, #12]
 80156f8:	4a0f      	ldr	r2, [pc, #60]	; (8015738 <tcp_process+0x5c0>)
 80156fa:	6013      	str	r3, [r2, #0]
 80156fc:	e02e      	b.n	801575c <tcp_process+0x5e4>
 80156fe:	4b0e      	ldr	r3, [pc, #56]	; (8015738 <tcp_process+0x5c0>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	617b      	str	r3, [r7, #20]
 8015704:	e027      	b.n	8015756 <tcp_process+0x5de>
 8015706:	bf00      	nop
 8015708:	2000b494 	.word	0x2000b494
 801570c:	2000b48c 	.word	0x2000b48c
 8015710:	2000b492 	.word	0x2000b492
 8015714:	2000b488 	.word	0x2000b488
 8015718:	2000b478 	.word	0x2000b478
 801571c:	20004738 	.word	0x20004738
 8015720:	2000473c 	.word	0x2000473c
 8015724:	0801e448 	.word	0x0801e448
 8015728:	0801e6e8 	.word	0x0801e6e8
 801572c:	0801e494 	.word	0x0801e494
 8015730:	2000b490 	.word	0x2000b490
 8015734:	2000b495 	.word	0x2000b495
 8015738:	2000b45c 	.word	0x2000b45c
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	68db      	ldr	r3, [r3, #12]
 8015740:	687a      	ldr	r2, [r7, #4]
 8015742:	429a      	cmp	r2, r3
 8015744:	d104      	bne.n	8015750 <tcp_process+0x5d8>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	68da      	ldr	r2, [r3, #12]
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	60da      	str	r2, [r3, #12]
 801574e:	e005      	b.n	801575c <tcp_process+0x5e4>
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	68db      	ldr	r3, [r3, #12]
 8015754:	617b      	str	r3, [r7, #20]
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d1ef      	bne.n	801573c <tcp_process+0x5c4>
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2200      	movs	r2, #0
 8015760:	60da      	str	r2, [r3, #12]
 8015762:	4b77      	ldr	r3, [pc, #476]	; (8015940 <tcp_process+0x7c8>)
 8015764:	2201      	movs	r2, #1
 8015766:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	220a      	movs	r2, #10
 801576c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801576e:	4b75      	ldr	r3, [pc, #468]	; (8015944 <tcp_process+0x7cc>)
 8015770:	681a      	ldr	r2, [r3, #0]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	60da      	str	r2, [r3, #12]
 8015776:	4a73      	ldr	r2, [pc, #460]	; (8015944 <tcp_process+0x7cc>)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6013      	str	r3, [r2, #0]
 801577c:	f003 f952 	bl	8018a24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015780:	e0d2      	b.n	8015928 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	8b5b      	ldrh	r3, [r3, #26]
 8015786:	f043 0302 	orr.w	r3, r3, #2
 801578a:	b29a      	uxth	r2, r3
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2208      	movs	r2, #8
 8015794:	751a      	strb	r2, [r3, #20]
      break;
 8015796:	e0c7      	b.n	8015928 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015798:	4b6b      	ldr	r3, [pc, #428]	; (8015948 <tcp_process+0x7d0>)
 801579a:	781b      	ldrb	r3, [r3, #0]
 801579c:	f003 0310 	and.w	r3, r3, #16
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	f000 80c1 	beq.w	8015928 <tcp_process+0x7b0>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80157aa:	4b68      	ldr	r3, [pc, #416]	; (801594c <tcp_process+0x7d4>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	f040 80ba 	bne.w	8015928 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	f040 80b5 	bne.w	8015928 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2206      	movs	r2, #6
 80157c2:	751a      	strb	r2, [r3, #20]
      break;
 80157c4:	e0b0      	b.n	8015928 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f000 f9ca 	bl	8015b60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80157cc:	4b60      	ldr	r3, [pc, #384]	; (8015950 <tcp_process+0x7d8>)
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	f003 0320 	and.w	r3, r3, #32
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f000 80a9 	beq.w	801592c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	8b5b      	ldrh	r3, [r3, #26]
 80157de:	f043 0302 	orr.w	r3, r3, #2
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f7fe fd39 	bl	8014260 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80157ee:	4b59      	ldr	r3, [pc, #356]	; (8015954 <tcp_process+0x7dc>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	687a      	ldr	r2, [r7, #4]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d105      	bne.n	8015804 <tcp_process+0x68c>
 80157f8:	4b56      	ldr	r3, [pc, #344]	; (8015954 <tcp_process+0x7dc>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	4a55      	ldr	r2, [pc, #340]	; (8015954 <tcp_process+0x7dc>)
 8015800:	6013      	str	r3, [r2, #0]
 8015802:	e013      	b.n	801582c <tcp_process+0x6b4>
 8015804:	4b53      	ldr	r3, [pc, #332]	; (8015954 <tcp_process+0x7dc>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	613b      	str	r3, [r7, #16]
 801580a:	e00c      	b.n	8015826 <tcp_process+0x6ae>
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	687a      	ldr	r2, [r7, #4]
 8015812:	429a      	cmp	r2, r3
 8015814:	d104      	bne.n	8015820 <tcp_process+0x6a8>
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	68da      	ldr	r2, [r3, #12]
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	60da      	str	r2, [r3, #12]
 801581e:	e005      	b.n	801582c <tcp_process+0x6b4>
 8015820:	693b      	ldr	r3, [r7, #16]
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	613b      	str	r3, [r7, #16]
 8015826:	693b      	ldr	r3, [r7, #16]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d1ef      	bne.n	801580c <tcp_process+0x694>
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2200      	movs	r2, #0
 8015830:	60da      	str	r2, [r3, #12]
 8015832:	4b43      	ldr	r3, [pc, #268]	; (8015940 <tcp_process+0x7c8>)
 8015834:	2201      	movs	r2, #1
 8015836:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	220a      	movs	r2, #10
 801583c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801583e:	4b41      	ldr	r3, [pc, #260]	; (8015944 <tcp_process+0x7cc>)
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	60da      	str	r2, [r3, #12]
 8015846:	4a3f      	ldr	r2, [pc, #252]	; (8015944 <tcp_process+0x7cc>)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6013      	str	r3, [r2, #0]
 801584c:	f003 f8ea 	bl	8018a24 <tcp_timer_needed>
      }
      break;
 8015850:	e06c      	b.n	801592c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f000 f984 	bl	8015b60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015858:	4b3b      	ldr	r3, [pc, #236]	; (8015948 <tcp_process+0x7d0>)
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	f003 0310 	and.w	r3, r3, #16
 8015860:	2b00      	cmp	r3, #0
 8015862:	d065      	beq.n	8015930 <tcp_process+0x7b8>
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015868:	4b38      	ldr	r3, [pc, #224]	; (801594c <tcp_process+0x7d4>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	429a      	cmp	r2, r3
 801586e:	d15f      	bne.n	8015930 <tcp_process+0x7b8>
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015874:	2b00      	cmp	r3, #0
 8015876:	d15b      	bne.n	8015930 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f7fe fcf1 	bl	8014260 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801587e:	4b35      	ldr	r3, [pc, #212]	; (8015954 <tcp_process+0x7dc>)
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	687a      	ldr	r2, [r7, #4]
 8015884:	429a      	cmp	r2, r3
 8015886:	d105      	bne.n	8015894 <tcp_process+0x71c>
 8015888:	4b32      	ldr	r3, [pc, #200]	; (8015954 <tcp_process+0x7dc>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	4a31      	ldr	r2, [pc, #196]	; (8015954 <tcp_process+0x7dc>)
 8015890:	6013      	str	r3, [r2, #0]
 8015892:	e013      	b.n	80158bc <tcp_process+0x744>
 8015894:	4b2f      	ldr	r3, [pc, #188]	; (8015954 <tcp_process+0x7dc>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	60fb      	str	r3, [r7, #12]
 801589a:	e00c      	b.n	80158b6 <tcp_process+0x73e>
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d104      	bne.n	80158b0 <tcp_process+0x738>
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	68da      	ldr	r2, [r3, #12]
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	60da      	str	r2, [r3, #12]
 80158ae:	e005      	b.n	80158bc <tcp_process+0x744>
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	60fb      	str	r3, [r7, #12]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d1ef      	bne.n	801589c <tcp_process+0x724>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	2200      	movs	r2, #0
 80158c0:	60da      	str	r2, [r3, #12]
 80158c2:	4b1f      	ldr	r3, [pc, #124]	; (8015940 <tcp_process+0x7c8>)
 80158c4:	2201      	movs	r2, #1
 80158c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	220a      	movs	r2, #10
 80158cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80158ce:	4b1d      	ldr	r3, [pc, #116]	; (8015944 <tcp_process+0x7cc>)
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	60da      	str	r2, [r3, #12]
 80158d6:	4a1b      	ldr	r2, [pc, #108]	; (8015944 <tcp_process+0x7cc>)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6013      	str	r3, [r2, #0]
 80158dc:	f003 f8a2 	bl	8018a24 <tcp_timer_needed>
      }
      break;
 80158e0:	e026      	b.n	8015930 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 f93c 	bl	8015b60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80158e8:	4b17      	ldr	r3, [pc, #92]	; (8015948 <tcp_process+0x7d0>)
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	f003 0310 	and.w	r3, r3, #16
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d01f      	beq.n	8015934 <tcp_process+0x7bc>
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80158f8:	4b14      	ldr	r3, [pc, #80]	; (801594c <tcp_process+0x7d4>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d119      	bne.n	8015934 <tcp_process+0x7bc>
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015904:	2b00      	cmp	r3, #0
 8015906:	d115      	bne.n	8015934 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015908:	4b11      	ldr	r3, [pc, #68]	; (8015950 <tcp_process+0x7d8>)
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	f043 0310 	orr.w	r3, r3, #16
 8015910:	b2da      	uxtb	r2, r3
 8015912:	4b0f      	ldr	r3, [pc, #60]	; (8015950 <tcp_process+0x7d8>)
 8015914:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015916:	e00d      	b.n	8015934 <tcp_process+0x7bc>
    default:
      break;
 8015918:	bf00      	nop
 801591a:	e00c      	b.n	8015936 <tcp_process+0x7be>
      break;
 801591c:	bf00      	nop
 801591e:	e00a      	b.n	8015936 <tcp_process+0x7be>
      break;
 8015920:	bf00      	nop
 8015922:	e008      	b.n	8015936 <tcp_process+0x7be>
      break;
 8015924:	bf00      	nop
 8015926:	e006      	b.n	8015936 <tcp_process+0x7be>
      break;
 8015928:	bf00      	nop
 801592a:	e004      	b.n	8015936 <tcp_process+0x7be>
      break;
 801592c:	bf00      	nop
 801592e:	e002      	b.n	8015936 <tcp_process+0x7be>
      break;
 8015930:	bf00      	nop
 8015932:	e000      	b.n	8015936 <tcp_process+0x7be>
      break;
 8015934:	bf00      	nop
  }
  return ERR_OK;
 8015936:	2300      	movs	r3, #0
}
 8015938:	4618      	mov	r0, r3
 801593a:	3724      	adds	r7, #36	; 0x24
 801593c:	46bd      	mov	sp, r7
 801593e:	bd90      	pop	{r4, r7, pc}
 8015940:	2000b464 	.word	0x2000b464
 8015944:	2000b460 	.word	0x2000b460
 8015948:	2000b494 	.word	0x2000b494
 801594c:	2000b48c 	.word	0x2000b48c
 8015950:	2000b495 	.word	0x2000b495
 8015954:	2000b45c 	.word	0x2000b45c

08015958 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015958:	b590      	push	{r4, r7, lr}
 801595a:	b085      	sub	sp, #20
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d106      	bne.n	8015976 <tcp_oos_insert_segment+0x1e>
 8015968:	4b3b      	ldr	r3, [pc, #236]	; (8015a58 <tcp_oos_insert_segment+0x100>)
 801596a:	f240 421f 	movw	r2, #1055	; 0x41f
 801596e:	493b      	ldr	r1, [pc, #236]	; (8015a5c <tcp_oos_insert_segment+0x104>)
 8015970:	483b      	ldr	r0, [pc, #236]	; (8015a60 <tcp_oos_insert_segment+0x108>)
 8015972:	f006 f997 	bl	801bca4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	899b      	ldrh	r3, [r3, #12]
 801597c:	b29b      	uxth	r3, r3
 801597e:	4618      	mov	r0, r3
 8015980:	f7fb f992 	bl	8010ca8 <lwip_htons>
 8015984:	4603      	mov	r3, r0
 8015986:	b2db      	uxtb	r3, r3
 8015988:	f003 0301 	and.w	r3, r3, #1
 801598c:	2b00      	cmp	r3, #0
 801598e:	d028      	beq.n	80159e2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015990:	6838      	ldr	r0, [r7, #0]
 8015992:	f7fe f97d 	bl	8013c90 <tcp_segs_free>
    next = NULL;
 8015996:	2300      	movs	r3, #0
 8015998:	603b      	str	r3, [r7, #0]
 801599a:	e056      	b.n	8015a4a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	68db      	ldr	r3, [r3, #12]
 80159a0:	899b      	ldrh	r3, [r3, #12]
 80159a2:	b29b      	uxth	r3, r3
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7fb f97f 	bl	8010ca8 <lwip_htons>
 80159aa:	4603      	mov	r3, r0
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	f003 0301 	and.w	r3, r3, #1
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d00d      	beq.n	80159d2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	68db      	ldr	r3, [r3, #12]
 80159ba:	899b      	ldrh	r3, [r3, #12]
 80159bc:	b29c      	uxth	r4, r3
 80159be:	2001      	movs	r0, #1
 80159c0:	f7fb f972 	bl	8010ca8 <lwip_htons>
 80159c4:	4603      	mov	r3, r0
 80159c6:	461a      	mov	r2, r3
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	4322      	orrs	r2, r4
 80159ce:	b292      	uxth	r2, r2
 80159d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80159dc:	68f8      	ldr	r0, [r7, #12]
 80159de:	f7fe f96c 	bl	8013cba <tcp_seg_free>
    while (next &&
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00e      	beq.n	8015a06 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	891b      	ldrh	r3, [r3, #8]
 80159ec:	461a      	mov	r2, r3
 80159ee:	4b1d      	ldr	r3, [pc, #116]	; (8015a64 <tcp_oos_insert_segment+0x10c>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	441a      	add	r2, r3
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	68db      	ldr	r3, [r3, #12]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	6839      	ldr	r1, [r7, #0]
 80159fc:	8909      	ldrh	r1, [r1, #8]
 80159fe:	440b      	add	r3, r1
 8015a00:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	daca      	bge.n	801599c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d01e      	beq.n	8015a4a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	891b      	ldrh	r3, [r3, #8]
 8015a10:	461a      	mov	r2, r3
 8015a12:	4b14      	ldr	r3, [pc, #80]	; (8015a64 <tcp_oos_insert_segment+0x10c>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	441a      	add	r2, r3
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	68db      	ldr	r3, [r3, #12]
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	dd12      	ble.n	8015a4a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	68db      	ldr	r3, [r3, #12]
 8015a28:	685b      	ldr	r3, [r3, #4]
 8015a2a:	b29a      	uxth	r2, r3
 8015a2c:	4b0d      	ldr	r3, [pc, #52]	; (8015a64 <tcp_oos_insert_segment+0x10c>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	b29b      	uxth	r3, r3
 8015a32:	1ad3      	subs	r3, r2, r3
 8015a34:	b29a      	uxth	r2, r3
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	685a      	ldr	r2, [r3, #4]
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	891b      	ldrh	r3, [r3, #8]
 8015a42:	4619      	mov	r1, r3
 8015a44:	4610      	mov	r0, r2
 8015a46:	f7fc fb71 	bl	801212c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	683a      	ldr	r2, [r7, #0]
 8015a4e:	601a      	str	r2, [r3, #0]
}
 8015a50:	bf00      	nop
 8015a52:	3714      	adds	r7, #20
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd90      	pop	{r4, r7, pc}
 8015a58:	0801e448 	.word	0x0801e448
 8015a5c:	0801e708 	.word	0x0801e708
 8015a60:	0801e494 	.word	0x0801e494
 8015a64:	2000b488 	.word	0x2000b488

08015a68 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015a68:	b5b0      	push	{r4, r5, r7, lr}
 8015a6a:	b086      	sub	sp, #24
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	60f8      	str	r0, [r7, #12]
 8015a70:	60b9      	str	r1, [r7, #8]
 8015a72:	607a      	str	r2, [r7, #4]
 8015a74:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015a76:	e03e      	b.n	8015af6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	685b      	ldr	r3, [r3, #4]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7fc fd5e 	bl	8012548 <pbuf_clen>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a96:	8a7a      	ldrh	r2, [r7, #18]
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	d906      	bls.n	8015aaa <tcp_free_acked_segments+0x42>
 8015a9c:	4b2a      	ldr	r3, [pc, #168]	; (8015b48 <tcp_free_acked_segments+0xe0>)
 8015a9e:	f240 4257 	movw	r2, #1111	; 0x457
 8015aa2:	492a      	ldr	r1, [pc, #168]	; (8015b4c <tcp_free_acked_segments+0xe4>)
 8015aa4:	482a      	ldr	r0, [pc, #168]	; (8015b50 <tcp_free_acked_segments+0xe8>)
 8015aa6:	f006 f8fd 	bl	801bca4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015ab0:	8a7b      	ldrh	r3, [r7, #18]
 8015ab2:	1ad3      	subs	r3, r2, r3
 8015ab4:	b29a      	uxth	r2, r3
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	891a      	ldrh	r2, [r3, #8]
 8015ac0:	4b24      	ldr	r3, [pc, #144]	; (8015b54 <tcp_free_acked_segments+0xec>)
 8015ac2:	881b      	ldrh	r3, [r3, #0]
 8015ac4:	4413      	add	r3, r2
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	4b22      	ldr	r3, [pc, #136]	; (8015b54 <tcp_free_acked_segments+0xec>)
 8015aca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015acc:	6978      	ldr	r0, [r7, #20]
 8015ace:	f7fe f8f4 	bl	8013cba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d00c      	beq.n	8015af6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d109      	bne.n	8015af6 <tcp_free_acked_segments+0x8e>
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d106      	bne.n	8015af6 <tcp_free_acked_segments+0x8e>
 8015ae8:	4b17      	ldr	r3, [pc, #92]	; (8015b48 <tcp_free_acked_segments+0xe0>)
 8015aea:	f240 4261 	movw	r2, #1121	; 0x461
 8015aee:	491a      	ldr	r1, [pc, #104]	; (8015b58 <tcp_free_acked_segments+0xf0>)
 8015af0:	4817      	ldr	r0, [pc, #92]	; (8015b50 <tcp_free_acked_segments+0xe8>)
 8015af2:	f006 f8d7 	bl	801bca4 <iprintf>
  while (seg_list != NULL &&
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d020      	beq.n	8015b3e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	68db      	ldr	r3, [r3, #12]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fb f8e5 	bl	8010cd2 <lwip_htonl>
 8015b08:	4604      	mov	r4, r0
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	891b      	ldrh	r3, [r3, #8]
 8015b0e:	461d      	mov	r5, r3
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	899b      	ldrh	r3, [r3, #12]
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7fb f8c5 	bl	8010ca8 <lwip_htons>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	b2db      	uxtb	r3, r3
 8015b22:	f003 0303 	and.w	r3, r3, #3
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d001      	beq.n	8015b2e <tcp_free_acked_segments+0xc6>
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	e000      	b.n	8015b30 <tcp_free_acked_segments+0xc8>
 8015b2e:	2300      	movs	r3, #0
 8015b30:	442b      	add	r3, r5
 8015b32:	18e2      	adds	r2, r4, r3
 8015b34:	4b09      	ldr	r3, [pc, #36]	; (8015b5c <tcp_free_acked_segments+0xf4>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	dd9c      	ble.n	8015a78 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015b3e:	68bb      	ldr	r3, [r7, #8]
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3718      	adds	r7, #24
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bdb0      	pop	{r4, r5, r7, pc}
 8015b48:	0801e448 	.word	0x0801e448
 8015b4c:	0801e730 	.word	0x0801e730
 8015b50:	0801e494 	.word	0x0801e494
 8015b54:	2000b490 	.word	0x2000b490
 8015b58:	0801e758 	.word	0x0801e758
 8015b5c:	2000b48c 	.word	0x2000b48c

08015b60 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015b60:	b5b0      	push	{r4, r5, r7, lr}
 8015b62:	b094      	sub	sp, #80	; 0x50
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d106      	bne.n	8015b80 <tcp_receive+0x20>
 8015b72:	4b91      	ldr	r3, [pc, #580]	; (8015db8 <tcp_receive+0x258>)
 8015b74:	f240 427b 	movw	r2, #1147	; 0x47b
 8015b78:	4990      	ldr	r1, [pc, #576]	; (8015dbc <tcp_receive+0x25c>)
 8015b7a:	4891      	ldr	r0, [pc, #580]	; (8015dc0 <tcp_receive+0x260>)
 8015b7c:	f006 f892 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	7d1b      	ldrb	r3, [r3, #20]
 8015b84:	2b03      	cmp	r3, #3
 8015b86:	d806      	bhi.n	8015b96 <tcp_receive+0x36>
 8015b88:	4b8b      	ldr	r3, [pc, #556]	; (8015db8 <tcp_receive+0x258>)
 8015b8a:	f240 427c 	movw	r2, #1148	; 0x47c
 8015b8e:	498d      	ldr	r1, [pc, #564]	; (8015dc4 <tcp_receive+0x264>)
 8015b90:	488b      	ldr	r0, [pc, #556]	; (8015dc0 <tcp_receive+0x260>)
 8015b92:	f006 f887 	bl	801bca4 <iprintf>

  if (flags & TCP_ACK) {
 8015b96:	4b8c      	ldr	r3, [pc, #560]	; (8015dc8 <tcp_receive+0x268>)
 8015b98:	781b      	ldrb	r3, [r3, #0]
 8015b9a:	f003 0310 	and.w	r3, r3, #16
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f000 8264 	beq.w	801606c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015baa:	461a      	mov	r2, r3
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bb0:	4413      	add	r3, r2
 8015bb2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015bb8:	4b84      	ldr	r3, [pc, #528]	; (8015dcc <tcp_receive+0x26c>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	1ad3      	subs	r3, r2, r3
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	db1b      	blt.n	8015bfa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015bc6:	4b81      	ldr	r3, [pc, #516]	; (8015dcc <tcp_receive+0x26c>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d106      	bne.n	8015bdc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015bd2:	4b7f      	ldr	r3, [pc, #508]	; (8015dd0 <tcp_receive+0x270>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	db0e      	blt.n	8015bfa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015be0:	4b7b      	ldr	r3, [pc, #492]	; (8015dd0 <tcp_receive+0x270>)
 8015be2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d125      	bne.n	8015c34 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015be8:	4b7a      	ldr	r3, [pc, #488]	; (8015dd4 <tcp_receive+0x274>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	89db      	ldrh	r3, [r3, #14]
 8015bee:	b29a      	uxth	r2, r3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d91c      	bls.n	8015c34 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015bfa:	4b76      	ldr	r3, [pc, #472]	; (8015dd4 <tcp_receive+0x274>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	89db      	ldrh	r3, [r3, #14]
 8015c00:	b29a      	uxth	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d205      	bcs.n	8015c24 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015c24:	4b69      	ldr	r3, [pc, #420]	; (8015dcc <tcp_receive+0x26c>)
 8015c26:	681a      	ldr	r2, [r3, #0]
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015c2c:	4b68      	ldr	r3, [pc, #416]	; (8015dd0 <tcp_receive+0x270>)
 8015c2e:	681a      	ldr	r2, [r3, #0]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015c34:	4b66      	ldr	r3, [pc, #408]	; (8015dd0 <tcp_receive+0x270>)
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c3c:	1ad3      	subs	r3, r2, r3
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	dc58      	bgt.n	8015cf4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015c42:	4b65      	ldr	r3, [pc, #404]	; (8015dd8 <tcp_receive+0x278>)
 8015c44:	881b      	ldrh	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d14b      	bne.n	8015ce2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015c54:	4413      	add	r3, r2
 8015c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d142      	bne.n	8015ce2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	db3d      	blt.n	8015ce2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015c6a:	4b59      	ldr	r3, [pc, #356]	; (8015dd0 <tcp_receive+0x270>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d137      	bne.n	8015ce2 <tcp_receive+0x182>
              found_dupack = 1;
 8015c72:	2301      	movs	r3, #1
 8015c74:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015c7c:	2bff      	cmp	r3, #255	; 0xff
 8015c7e:	d007      	beq.n	8015c90 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015c86:	3301      	adds	r3, #1
 8015c88:	b2da      	uxtb	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015c96:	2b03      	cmp	r3, #3
 8015c98:	d91b      	bls.n	8015cd2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ca4:	4413      	add	r3, r2
 8015ca6:	b29a      	uxth	r2, r3
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d30a      	bcc.n	8015cc8 <tcp_receive+0x168>
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015cbc:	4413      	add	r3, r2
 8015cbe:	b29a      	uxth	r2, r3
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015cc6:	e004      	b.n	8015cd2 <tcp_receive+0x172>
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015cce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d902      	bls.n	8015ce2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f002 fb45 	bl	801836c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	f040 8161 	bne.w	8015fac <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2200      	movs	r2, #0
 8015cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015cf2:	e15b      	b.n	8015fac <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015cf4:	4b36      	ldr	r3, [pc, #216]	; (8015dd0 <tcp_receive+0x270>)
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cfc:	1ad3      	subs	r3, r2, r3
 8015cfe:	3b01      	subs	r3, #1
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	f2c0 814e 	blt.w	8015fa2 <tcp_receive+0x442>
 8015d06:	4b32      	ldr	r3, [pc, #200]	; (8015dd0 <tcp_receive+0x270>)
 8015d08:	681a      	ldr	r2, [r3, #0]
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d0e:	1ad3      	subs	r3, r2, r3
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	f300 8146 	bgt.w	8015fa2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	8b5b      	ldrh	r3, [r3, #26]
 8015d1a:	f003 0304 	and.w	r3, r3, #4
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d010      	beq.n	8015d44 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	8b5b      	ldrh	r3, [r3, #26]
 8015d26:	f023 0304 	bic.w	r3, r3, #4
 8015d2a:	b29a      	uxth	r2, r3
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015d52:	10db      	asrs	r3, r3, #3
 8015d54:	b21b      	sxth	r3, r3
 8015d56:	b29a      	uxth	r2, r3
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	4413      	add	r3, r2
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	b21a      	sxth	r2, r3
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015d6c:	4b18      	ldr	r3, [pc, #96]	; (8015dd0 <tcp_receive+0x270>)
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	b29a      	uxth	r2, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d76:	b29b      	uxth	r3, r3
 8015d78:	1ad3      	subs	r3, r2, r3
 8015d7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015d84:	4b12      	ldr	r3, [pc, #72]	; (8015dd0 <tcp_receive+0x270>)
 8015d86:	681a      	ldr	r2, [r3, #0]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	7d1b      	ldrb	r3, [r3, #20]
 8015d90:	2b03      	cmp	r3, #3
 8015d92:	f240 8097 	bls.w	8015ec4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d245      	bcs.n	8015e32 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	8b5b      	ldrh	r3, [r3, #26]
 8015daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d014      	beq.n	8015ddc <tcp_receive+0x27c>
 8015db2:	2301      	movs	r3, #1
 8015db4:	e013      	b.n	8015dde <tcp_receive+0x27e>
 8015db6:	bf00      	nop
 8015db8:	0801e448 	.word	0x0801e448
 8015dbc:	0801e778 	.word	0x0801e778
 8015dc0:	0801e494 	.word	0x0801e494
 8015dc4:	0801e794 	.word	0x0801e794
 8015dc8:	2000b494 	.word	0x2000b494
 8015dcc:	2000b488 	.word	0x2000b488
 8015dd0:	2000b48c 	.word	0x2000b48c
 8015dd4:	2000b478 	.word	0x2000b478
 8015dd8:	2000b492 	.word	0x2000b492
 8015ddc:	2302      	movs	r3, #2
 8015dde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015de2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015de6:	b29a      	uxth	r2, r3
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dec:	fb12 f303 	smulbb	r3, r2, r3
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015df4:	4293      	cmp	r3, r2
 8015df6:	bf28      	it	cs
 8015df8:	4613      	movcs	r3, r2
 8015dfa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e04:	4413      	add	r3, r2
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d309      	bcc.n	8015e26 <tcp_receive+0x2c6>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e1a:	4413      	add	r3, r2
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015e24:	e04e      	b.n	8015ec4 <tcp_receive+0x364>
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015e30:	e048      	b.n	8015ec4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015e38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015e3a:	4413      	add	r3, r2
 8015e3c:	b29a      	uxth	r2, r3
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015e44:	429a      	cmp	r2, r3
 8015e46:	d309      	bcc.n	8015e5c <tcp_receive+0x2fc>
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015e50:	4413      	add	r3, r2
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015e5a:	e004      	b.n	8015e66 <tcp_receive+0x306>
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d326      	bcc.n	8015ec4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015e82:	1ad3      	subs	r3, r2, r3
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e96:	4413      	add	r3, r2
 8015e98:	b29a      	uxth	r2, r3
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d30a      	bcc.n	8015eba <tcp_receive+0x35a>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015eae:	4413      	add	r3, r2
 8015eb0:	b29a      	uxth	r2, r3
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015eb8:	e004      	b.n	8015ec4 <tcp_receive+0x364>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ec0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ecc:	4a98      	ldr	r2, [pc, #608]	; (8016130 <tcp_receive+0x5d0>)
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f7ff fdca 	bl	8015a68 <tcp_free_acked_segments>
 8015ed4:	4602      	mov	r2, r0
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ee2:	4a94      	ldr	r2, [pc, #592]	; (8016134 <tcp_receive+0x5d4>)
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7ff fdbf 	bl	8015a68 <tcp_free_acked_segments>
 8015eea:	4602      	mov	r2, r0
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d104      	bne.n	8015f02 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015efe:	861a      	strh	r2, [r3, #48]	; 0x30
 8015f00:	e002      	b.n	8015f08 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2200      	movs	r2, #0
 8015f06:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d103      	bne.n	8015f1e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015f24:	4b84      	ldr	r3, [pc, #528]	; (8016138 <tcp_receive+0x5d8>)
 8015f26:	881b      	ldrh	r3, [r3, #0]
 8015f28:	4413      	add	r3, r2
 8015f2a:	b29a      	uxth	r2, r3
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	8b5b      	ldrh	r3, [r3, #26]
 8015f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d035      	beq.n	8015faa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d118      	bne.n	8015f78 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d00c      	beq.n	8015f68 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7fa feb9 	bl	8010cd2 <lwip_htonl>
 8015f60:	4603      	mov	r3, r0
 8015f62:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	dc20      	bgt.n	8015faa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	8b5b      	ldrh	r3, [r3, #26]
 8015f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f76:	e018      	b.n	8015faa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7fa fea4 	bl	8010cd2 <lwip_htonl>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	1ae3      	subs	r3, r4, r3
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	dc0b      	bgt.n	8015faa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	8b5b      	ldrh	r3, [r3, #26]
 8015f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015fa0:	e003      	b.n	8015faa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f002 fbce 	bl	8018744 <tcp_send_empty_ack>
 8015fa8:	e000      	b.n	8015fac <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015faa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d05b      	beq.n	801606c <tcp_receive+0x50c>
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015fb8:	4b60      	ldr	r3, [pc, #384]	; (801613c <tcp_receive+0x5dc>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	1ad3      	subs	r3, r2, r3
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	da54      	bge.n	801606c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015fc2:	4b5f      	ldr	r3, [pc, #380]	; (8016140 <tcp_receive+0x5e0>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	b29a      	uxth	r2, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	1ad3      	subs	r3, r2, r3
 8015fd0:	b29b      	uxth	r3, r3
 8015fd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015fd6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015fe0:	10db      	asrs	r3, r3, #3
 8015fe2:	b21b      	sxth	r3, r3
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	1ad3      	subs	r3, r2, r3
 8015fe8:	b29b      	uxth	r3, r3
 8015fea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015ffa:	4413      	add	r3, r2
 8015ffc:	b29b      	uxth	r3, r3
 8015ffe:	b21a      	sxth	r2, r3
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016004:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016008:	2b00      	cmp	r3, #0
 801600a:	da05      	bge.n	8016018 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801600c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016010:	425b      	negs	r3, r3
 8016012:	b29b      	uxth	r3, r3
 8016014:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016018:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016022:	109b      	asrs	r3, r3, #2
 8016024:	b21b      	sxth	r3, r3
 8016026:	b29b      	uxth	r3, r3
 8016028:	1ad3      	subs	r3, r2, r3
 801602a:	b29b      	uxth	r3, r3
 801602c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016036:	b29a      	uxth	r2, r3
 8016038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801603c:	4413      	add	r3, r2
 801603e:	b29b      	uxth	r3, r3
 8016040:	b21a      	sxth	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801604c:	10db      	asrs	r3, r3, #3
 801604e:	b21b      	sxth	r3, r3
 8016050:	b29a      	uxth	r2, r3
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016058:	b29b      	uxth	r3, r3
 801605a:	4413      	add	r3, r2
 801605c:	b29b      	uxth	r3, r3
 801605e:	b21a      	sxth	r2, r3
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2200      	movs	r2, #0
 801606a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801606c:	4b35      	ldr	r3, [pc, #212]	; (8016144 <tcp_receive+0x5e4>)
 801606e:	881b      	ldrh	r3, [r3, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	f000 84e2 	beq.w	8016a3a <tcp_receive+0xeda>
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	7d1b      	ldrb	r3, [r3, #20]
 801607a:	2b06      	cmp	r3, #6
 801607c:	f200 84dd 	bhi.w	8016a3a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016084:	4b30      	ldr	r3, [pc, #192]	; (8016148 <tcp_receive+0x5e8>)
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	1ad3      	subs	r3, r2, r3
 801608a:	3b01      	subs	r3, #1
 801608c:	2b00      	cmp	r3, #0
 801608e:	f2c0 808f 	blt.w	80161b0 <tcp_receive+0x650>
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016096:	4b2b      	ldr	r3, [pc, #172]	; (8016144 <tcp_receive+0x5e4>)
 8016098:	881b      	ldrh	r3, [r3, #0]
 801609a:	4619      	mov	r1, r3
 801609c:	4b2a      	ldr	r3, [pc, #168]	; (8016148 <tcp_receive+0x5e8>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	440b      	add	r3, r1
 80160a2:	1ad3      	subs	r3, r2, r3
 80160a4:	3301      	adds	r3, #1
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f300 8082 	bgt.w	80161b0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80160ac:	4b27      	ldr	r3, [pc, #156]	; (801614c <tcp_receive+0x5ec>)
 80160ae:	685b      	ldr	r3, [r3, #4]
 80160b0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80160b6:	4b24      	ldr	r3, [pc, #144]	; (8016148 <tcp_receive+0x5e8>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	1ad3      	subs	r3, r2, r3
 80160bc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80160be:	4b23      	ldr	r3, [pc, #140]	; (801614c <tcp_receive+0x5ec>)
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d106      	bne.n	80160d4 <tcp_receive+0x574>
 80160c6:	4b22      	ldr	r3, [pc, #136]	; (8016150 <tcp_receive+0x5f0>)
 80160c8:	f240 5294 	movw	r2, #1428	; 0x594
 80160cc:	4921      	ldr	r1, [pc, #132]	; (8016154 <tcp_receive+0x5f4>)
 80160ce:	4822      	ldr	r0, [pc, #136]	; (8016158 <tcp_receive+0x5f8>)
 80160d0:	f005 fde8 	bl	801bca4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80160d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80160da:	4293      	cmp	r3, r2
 80160dc:	d906      	bls.n	80160ec <tcp_receive+0x58c>
 80160de:	4b1c      	ldr	r3, [pc, #112]	; (8016150 <tcp_receive+0x5f0>)
 80160e0:	f240 5295 	movw	r2, #1429	; 0x595
 80160e4:	491d      	ldr	r1, [pc, #116]	; (801615c <tcp_receive+0x5fc>)
 80160e6:	481c      	ldr	r0, [pc, #112]	; (8016158 <tcp_receive+0x5f8>)
 80160e8:	f005 fddc 	bl	801bca4 <iprintf>
      off = (u16_t)off32;
 80160ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80160f2:	4b16      	ldr	r3, [pc, #88]	; (801614c <tcp_receive+0x5ec>)
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	891b      	ldrh	r3, [r3, #8]
 80160f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d906      	bls.n	801610e <tcp_receive+0x5ae>
 8016100:	4b13      	ldr	r3, [pc, #76]	; (8016150 <tcp_receive+0x5f0>)
 8016102:	f240 5297 	movw	r2, #1431	; 0x597
 8016106:	4916      	ldr	r1, [pc, #88]	; (8016160 <tcp_receive+0x600>)
 8016108:	4813      	ldr	r0, [pc, #76]	; (8016158 <tcp_receive+0x5f8>)
 801610a:	f005 fdcb 	bl	801bca4 <iprintf>
      inseg.len -= off;
 801610e:	4b0f      	ldr	r3, [pc, #60]	; (801614c <tcp_receive+0x5ec>)
 8016110:	891a      	ldrh	r2, [r3, #8]
 8016112:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016116:	1ad3      	subs	r3, r2, r3
 8016118:	b29a      	uxth	r2, r3
 801611a:	4b0c      	ldr	r3, [pc, #48]	; (801614c <tcp_receive+0x5ec>)
 801611c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801611e:	4b0b      	ldr	r3, [pc, #44]	; (801614c <tcp_receive+0x5ec>)
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	891a      	ldrh	r2, [r3, #8]
 8016124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016128:	1ad3      	subs	r3, r2, r3
 801612a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801612c:	e02a      	b.n	8016184 <tcp_receive+0x624>
 801612e:	bf00      	nop
 8016130:	0801e7b0 	.word	0x0801e7b0
 8016134:	0801e7b8 	.word	0x0801e7b8
 8016138:	2000b490 	.word	0x2000b490
 801613c:	2000b48c 	.word	0x2000b48c
 8016140:	2000b450 	.word	0x2000b450
 8016144:	2000b492 	.word	0x2000b492
 8016148:	2000b488 	.word	0x2000b488
 801614c:	2000b468 	.word	0x2000b468
 8016150:	0801e448 	.word	0x0801e448
 8016154:	0801e7c0 	.word	0x0801e7c0
 8016158:	0801e494 	.word	0x0801e494
 801615c:	0801e7d0 	.word	0x0801e7d0
 8016160:	0801e7e0 	.word	0x0801e7e0
        off -= p->len;
 8016164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016166:	895b      	ldrh	r3, [r3, #10]
 8016168:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801616c:	1ad3      	subs	r3, r2, r3
 801616e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016174:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016176:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801617a:	2200      	movs	r2, #0
 801617c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801617e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016186:	895b      	ldrh	r3, [r3, #10]
 8016188:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801618c:	429a      	cmp	r2, r3
 801618e:	d8e9      	bhi.n	8016164 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016194:	4619      	mov	r1, r3
 8016196:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016198:	f7fc f8c8 	bl	801232c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161a0:	4a91      	ldr	r2, [pc, #580]	; (80163e8 <tcp_receive+0x888>)
 80161a2:	6013      	str	r3, [r2, #0]
 80161a4:	4b91      	ldr	r3, [pc, #580]	; (80163ec <tcp_receive+0x88c>)
 80161a6:	68db      	ldr	r3, [r3, #12]
 80161a8:	4a8f      	ldr	r2, [pc, #572]	; (80163e8 <tcp_receive+0x888>)
 80161aa:	6812      	ldr	r2, [r2, #0]
 80161ac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80161ae:	e00d      	b.n	80161cc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80161b0:	4b8d      	ldr	r3, [pc, #564]	; (80163e8 <tcp_receive+0x888>)
 80161b2:	681a      	ldr	r2, [r3, #0]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	da06      	bge.n	80161cc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	8b5b      	ldrh	r3, [r3, #26]
 80161c2:	f043 0302 	orr.w	r3, r3, #2
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80161cc:	4b86      	ldr	r3, [pc, #536]	; (80163e8 <tcp_receive+0x888>)
 80161ce:	681a      	ldr	r2, [r3, #0]
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d4:	1ad3      	subs	r3, r2, r3
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	f2c0 842a 	blt.w	8016a30 <tcp_receive+0xed0>
 80161dc:	4b82      	ldr	r3, [pc, #520]	; (80163e8 <tcp_receive+0x888>)
 80161de:	681a      	ldr	r2, [r3, #0]
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161e4:	6879      	ldr	r1, [r7, #4]
 80161e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80161e8:	440b      	add	r3, r1
 80161ea:	1ad3      	subs	r3, r2, r3
 80161ec:	3301      	adds	r3, #1
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	f300 841e 	bgt.w	8016a30 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80161f8:	4b7b      	ldr	r3, [pc, #492]	; (80163e8 <tcp_receive+0x888>)
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	f040 829a 	bne.w	8016736 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016202:	4b7a      	ldr	r3, [pc, #488]	; (80163ec <tcp_receive+0x88c>)
 8016204:	891c      	ldrh	r4, [r3, #8]
 8016206:	4b79      	ldr	r3, [pc, #484]	; (80163ec <tcp_receive+0x88c>)
 8016208:	68db      	ldr	r3, [r3, #12]
 801620a:	899b      	ldrh	r3, [r3, #12]
 801620c:	b29b      	uxth	r3, r3
 801620e:	4618      	mov	r0, r3
 8016210:	f7fa fd4a 	bl	8010ca8 <lwip_htons>
 8016214:	4603      	mov	r3, r0
 8016216:	b2db      	uxtb	r3, r3
 8016218:	f003 0303 	and.w	r3, r3, #3
 801621c:	2b00      	cmp	r3, #0
 801621e:	d001      	beq.n	8016224 <tcp_receive+0x6c4>
 8016220:	2301      	movs	r3, #1
 8016222:	e000      	b.n	8016226 <tcp_receive+0x6c6>
 8016224:	2300      	movs	r3, #0
 8016226:	4423      	add	r3, r4
 8016228:	b29a      	uxth	r2, r3
 801622a:	4b71      	ldr	r3, [pc, #452]	; (80163f0 <tcp_receive+0x890>)
 801622c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016232:	4b6f      	ldr	r3, [pc, #444]	; (80163f0 <tcp_receive+0x890>)
 8016234:	881b      	ldrh	r3, [r3, #0]
 8016236:	429a      	cmp	r2, r3
 8016238:	d275      	bcs.n	8016326 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801623a:	4b6c      	ldr	r3, [pc, #432]	; (80163ec <tcp_receive+0x88c>)
 801623c:	68db      	ldr	r3, [r3, #12]
 801623e:	899b      	ldrh	r3, [r3, #12]
 8016240:	b29b      	uxth	r3, r3
 8016242:	4618      	mov	r0, r3
 8016244:	f7fa fd30 	bl	8010ca8 <lwip_htons>
 8016248:	4603      	mov	r3, r0
 801624a:	b2db      	uxtb	r3, r3
 801624c:	f003 0301 	and.w	r3, r3, #1
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01f      	beq.n	8016294 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016254:	4b65      	ldr	r3, [pc, #404]	; (80163ec <tcp_receive+0x88c>)
 8016256:	68db      	ldr	r3, [r3, #12]
 8016258:	899b      	ldrh	r3, [r3, #12]
 801625a:	b29b      	uxth	r3, r3
 801625c:	b21b      	sxth	r3, r3
 801625e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016262:	b21c      	sxth	r4, r3
 8016264:	4b61      	ldr	r3, [pc, #388]	; (80163ec <tcp_receive+0x88c>)
 8016266:	68db      	ldr	r3, [r3, #12]
 8016268:	899b      	ldrh	r3, [r3, #12]
 801626a:	b29b      	uxth	r3, r3
 801626c:	4618      	mov	r0, r3
 801626e:	f7fa fd1b 	bl	8010ca8 <lwip_htons>
 8016272:	4603      	mov	r3, r0
 8016274:	b2db      	uxtb	r3, r3
 8016276:	b29b      	uxth	r3, r3
 8016278:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801627c:	b29b      	uxth	r3, r3
 801627e:	4618      	mov	r0, r3
 8016280:	f7fa fd12 	bl	8010ca8 <lwip_htons>
 8016284:	4603      	mov	r3, r0
 8016286:	b21b      	sxth	r3, r3
 8016288:	4323      	orrs	r3, r4
 801628a:	b21a      	sxth	r2, r3
 801628c:	4b57      	ldr	r3, [pc, #348]	; (80163ec <tcp_receive+0x88c>)
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	b292      	uxth	r2, r2
 8016292:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016298:	4b54      	ldr	r3, [pc, #336]	; (80163ec <tcp_receive+0x88c>)
 801629a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801629c:	4b53      	ldr	r3, [pc, #332]	; (80163ec <tcp_receive+0x88c>)
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	899b      	ldrh	r3, [r3, #12]
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fa fcff 	bl	8010ca8 <lwip_htons>
 80162aa:	4603      	mov	r3, r0
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	f003 0302 	and.w	r3, r3, #2
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d005      	beq.n	80162c2 <tcp_receive+0x762>
            inseg.len -= 1;
 80162b6:	4b4d      	ldr	r3, [pc, #308]	; (80163ec <tcp_receive+0x88c>)
 80162b8:	891b      	ldrh	r3, [r3, #8]
 80162ba:	3b01      	subs	r3, #1
 80162bc:	b29a      	uxth	r2, r3
 80162be:	4b4b      	ldr	r3, [pc, #300]	; (80163ec <tcp_receive+0x88c>)
 80162c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80162c2:	4b4a      	ldr	r3, [pc, #296]	; (80163ec <tcp_receive+0x88c>)
 80162c4:	685b      	ldr	r3, [r3, #4]
 80162c6:	4a49      	ldr	r2, [pc, #292]	; (80163ec <tcp_receive+0x88c>)
 80162c8:	8912      	ldrh	r2, [r2, #8]
 80162ca:	4611      	mov	r1, r2
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7fb ff2d 	bl	801212c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80162d2:	4b46      	ldr	r3, [pc, #280]	; (80163ec <tcp_receive+0x88c>)
 80162d4:	891c      	ldrh	r4, [r3, #8]
 80162d6:	4b45      	ldr	r3, [pc, #276]	; (80163ec <tcp_receive+0x88c>)
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	899b      	ldrh	r3, [r3, #12]
 80162dc:	b29b      	uxth	r3, r3
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fa fce2 	bl	8010ca8 <lwip_htons>
 80162e4:	4603      	mov	r3, r0
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	f003 0303 	and.w	r3, r3, #3
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d001      	beq.n	80162f4 <tcp_receive+0x794>
 80162f0:	2301      	movs	r3, #1
 80162f2:	e000      	b.n	80162f6 <tcp_receive+0x796>
 80162f4:	2300      	movs	r3, #0
 80162f6:	4423      	add	r3, r4
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	4b3d      	ldr	r3, [pc, #244]	; (80163f0 <tcp_receive+0x890>)
 80162fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80162fe:	4b3c      	ldr	r3, [pc, #240]	; (80163f0 <tcp_receive+0x890>)
 8016300:	881b      	ldrh	r3, [r3, #0]
 8016302:	461a      	mov	r2, r3
 8016304:	4b38      	ldr	r3, [pc, #224]	; (80163e8 <tcp_receive+0x888>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	441a      	add	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801630e:	6879      	ldr	r1, [r7, #4]
 8016310:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016312:	440b      	add	r3, r1
 8016314:	429a      	cmp	r2, r3
 8016316:	d006      	beq.n	8016326 <tcp_receive+0x7c6>
 8016318:	4b36      	ldr	r3, [pc, #216]	; (80163f4 <tcp_receive+0x894>)
 801631a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801631e:	4936      	ldr	r1, [pc, #216]	; (80163f8 <tcp_receive+0x898>)
 8016320:	4836      	ldr	r0, [pc, #216]	; (80163fc <tcp_receive+0x89c>)
 8016322:	f005 fcbf 	bl	801bca4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801632a:	2b00      	cmp	r3, #0
 801632c:	f000 80e7 	beq.w	80164fe <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016330:	4b2e      	ldr	r3, [pc, #184]	; (80163ec <tcp_receive+0x88c>)
 8016332:	68db      	ldr	r3, [r3, #12]
 8016334:	899b      	ldrh	r3, [r3, #12]
 8016336:	b29b      	uxth	r3, r3
 8016338:	4618      	mov	r0, r3
 801633a:	f7fa fcb5 	bl	8010ca8 <lwip_htons>
 801633e:	4603      	mov	r3, r0
 8016340:	b2db      	uxtb	r3, r3
 8016342:	f003 0301 	and.w	r3, r3, #1
 8016346:	2b00      	cmp	r3, #0
 8016348:	d010      	beq.n	801636c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801634a:	e00a      	b.n	8016362 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016350:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801635c:	68f8      	ldr	r0, [r7, #12]
 801635e:	f7fd fcac 	bl	8013cba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016366:	2b00      	cmp	r3, #0
 8016368:	d1f0      	bne.n	801634c <tcp_receive+0x7ec>
 801636a:	e0c8      	b.n	80164fe <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016370:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016372:	e052      	b.n	801641a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016376:	68db      	ldr	r3, [r3, #12]
 8016378:	899b      	ldrh	r3, [r3, #12]
 801637a:	b29b      	uxth	r3, r3
 801637c:	4618      	mov	r0, r3
 801637e:	f7fa fc93 	bl	8010ca8 <lwip_htons>
 8016382:	4603      	mov	r3, r0
 8016384:	b2db      	uxtb	r3, r3
 8016386:	f003 0301 	and.w	r3, r3, #1
 801638a:	2b00      	cmp	r3, #0
 801638c:	d03d      	beq.n	801640a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801638e:	4b17      	ldr	r3, [pc, #92]	; (80163ec <tcp_receive+0x88c>)
 8016390:	68db      	ldr	r3, [r3, #12]
 8016392:	899b      	ldrh	r3, [r3, #12]
 8016394:	b29b      	uxth	r3, r3
 8016396:	4618      	mov	r0, r3
 8016398:	f7fa fc86 	bl	8010ca8 <lwip_htons>
 801639c:	4603      	mov	r3, r0
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d130      	bne.n	801640a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80163a8:	4b10      	ldr	r3, [pc, #64]	; (80163ec <tcp_receive+0x88c>)
 80163aa:	68db      	ldr	r3, [r3, #12]
 80163ac:	899b      	ldrh	r3, [r3, #12]
 80163ae:	b29c      	uxth	r4, r3
 80163b0:	2001      	movs	r0, #1
 80163b2:	f7fa fc79 	bl	8010ca8 <lwip_htons>
 80163b6:	4603      	mov	r3, r0
 80163b8:	461a      	mov	r2, r3
 80163ba:	4b0c      	ldr	r3, [pc, #48]	; (80163ec <tcp_receive+0x88c>)
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	4322      	orrs	r2, r4
 80163c0:	b292      	uxth	r2, r2
 80163c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80163c4:	4b09      	ldr	r3, [pc, #36]	; (80163ec <tcp_receive+0x88c>)
 80163c6:	891c      	ldrh	r4, [r3, #8]
 80163c8:	4b08      	ldr	r3, [pc, #32]	; (80163ec <tcp_receive+0x88c>)
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	899b      	ldrh	r3, [r3, #12]
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7fa fc69 	bl	8010ca8 <lwip_htons>
 80163d6:	4603      	mov	r3, r0
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	f003 0303 	and.w	r3, r3, #3
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d00e      	beq.n	8016400 <tcp_receive+0x8a0>
 80163e2:	2301      	movs	r3, #1
 80163e4:	e00d      	b.n	8016402 <tcp_receive+0x8a2>
 80163e6:	bf00      	nop
 80163e8:	2000b488 	.word	0x2000b488
 80163ec:	2000b468 	.word	0x2000b468
 80163f0:	2000b492 	.word	0x2000b492
 80163f4:	0801e448 	.word	0x0801e448
 80163f8:	0801e7f0 	.word	0x0801e7f0
 80163fc:	0801e494 	.word	0x0801e494
 8016400:	2300      	movs	r3, #0
 8016402:	4423      	add	r3, r4
 8016404:	b29a      	uxth	r2, r3
 8016406:	4b98      	ldr	r3, [pc, #608]	; (8016668 <tcp_receive+0xb08>)
 8016408:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801640a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801640c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801640e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016414:	6938      	ldr	r0, [r7, #16]
 8016416:	f7fd fc50 	bl	8013cba <tcp_seg_free>
            while (next &&
 801641a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801641c:	2b00      	cmp	r3, #0
 801641e:	d00e      	beq.n	801643e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016420:	4b91      	ldr	r3, [pc, #580]	; (8016668 <tcp_receive+0xb08>)
 8016422:	881b      	ldrh	r3, [r3, #0]
 8016424:	461a      	mov	r2, r3
 8016426:	4b91      	ldr	r3, [pc, #580]	; (801666c <tcp_receive+0xb0c>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	441a      	add	r2, r3
 801642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016434:	8909      	ldrh	r1, [r1, #8]
 8016436:	440b      	add	r3, r1
 8016438:	1ad3      	subs	r3, r2, r3
            while (next &&
 801643a:	2b00      	cmp	r3, #0
 801643c:	da9a      	bge.n	8016374 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016440:	2b00      	cmp	r3, #0
 8016442:	d059      	beq.n	80164f8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016444:	4b88      	ldr	r3, [pc, #544]	; (8016668 <tcp_receive+0xb08>)
 8016446:	881b      	ldrh	r3, [r3, #0]
 8016448:	461a      	mov	r2, r3
 801644a:	4b88      	ldr	r3, [pc, #544]	; (801666c <tcp_receive+0xb0c>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	441a      	add	r2, r3
 8016450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016458:	2b00      	cmp	r3, #0
 801645a:	dd4d      	ble.n	80164f8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	b29a      	uxth	r2, r3
 8016464:	4b81      	ldr	r3, [pc, #516]	; (801666c <tcp_receive+0xb0c>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	b29b      	uxth	r3, r3
 801646a:	1ad3      	subs	r3, r2, r3
 801646c:	b29a      	uxth	r2, r3
 801646e:	4b80      	ldr	r3, [pc, #512]	; (8016670 <tcp_receive+0xb10>)
 8016470:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016472:	4b7f      	ldr	r3, [pc, #508]	; (8016670 <tcp_receive+0xb10>)
 8016474:	68db      	ldr	r3, [r3, #12]
 8016476:	899b      	ldrh	r3, [r3, #12]
 8016478:	b29b      	uxth	r3, r3
 801647a:	4618      	mov	r0, r3
 801647c:	f7fa fc14 	bl	8010ca8 <lwip_htons>
 8016480:	4603      	mov	r3, r0
 8016482:	b2db      	uxtb	r3, r3
 8016484:	f003 0302 	and.w	r3, r3, #2
 8016488:	2b00      	cmp	r3, #0
 801648a:	d005      	beq.n	8016498 <tcp_receive+0x938>
                inseg.len -= 1;
 801648c:	4b78      	ldr	r3, [pc, #480]	; (8016670 <tcp_receive+0xb10>)
 801648e:	891b      	ldrh	r3, [r3, #8]
 8016490:	3b01      	subs	r3, #1
 8016492:	b29a      	uxth	r2, r3
 8016494:	4b76      	ldr	r3, [pc, #472]	; (8016670 <tcp_receive+0xb10>)
 8016496:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016498:	4b75      	ldr	r3, [pc, #468]	; (8016670 <tcp_receive+0xb10>)
 801649a:	685b      	ldr	r3, [r3, #4]
 801649c:	4a74      	ldr	r2, [pc, #464]	; (8016670 <tcp_receive+0xb10>)
 801649e:	8912      	ldrh	r2, [r2, #8]
 80164a0:	4611      	mov	r1, r2
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7fb fe42 	bl	801212c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80164a8:	4b71      	ldr	r3, [pc, #452]	; (8016670 <tcp_receive+0xb10>)
 80164aa:	891c      	ldrh	r4, [r3, #8]
 80164ac:	4b70      	ldr	r3, [pc, #448]	; (8016670 <tcp_receive+0xb10>)
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	899b      	ldrh	r3, [r3, #12]
 80164b2:	b29b      	uxth	r3, r3
 80164b4:	4618      	mov	r0, r3
 80164b6:	f7fa fbf7 	bl	8010ca8 <lwip_htons>
 80164ba:	4603      	mov	r3, r0
 80164bc:	b2db      	uxtb	r3, r3
 80164be:	f003 0303 	and.w	r3, r3, #3
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d001      	beq.n	80164ca <tcp_receive+0x96a>
 80164c6:	2301      	movs	r3, #1
 80164c8:	e000      	b.n	80164cc <tcp_receive+0x96c>
 80164ca:	2300      	movs	r3, #0
 80164cc:	4423      	add	r3, r4
 80164ce:	b29a      	uxth	r2, r3
 80164d0:	4b65      	ldr	r3, [pc, #404]	; (8016668 <tcp_receive+0xb08>)
 80164d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80164d4:	4b64      	ldr	r3, [pc, #400]	; (8016668 <tcp_receive+0xb08>)
 80164d6:	881b      	ldrh	r3, [r3, #0]
 80164d8:	461a      	mov	r2, r3
 80164da:	4b64      	ldr	r3, [pc, #400]	; (801666c <tcp_receive+0xb0c>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	441a      	add	r2, r3
 80164e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d006      	beq.n	80164f8 <tcp_receive+0x998>
 80164ea:	4b62      	ldr	r3, [pc, #392]	; (8016674 <tcp_receive+0xb14>)
 80164ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80164f0:	4961      	ldr	r1, [pc, #388]	; (8016678 <tcp_receive+0xb18>)
 80164f2:	4862      	ldr	r0, [pc, #392]	; (801667c <tcp_receive+0xb1c>)
 80164f4:	f005 fbd6 	bl	801bca4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80164fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80164fe:	4b5a      	ldr	r3, [pc, #360]	; (8016668 <tcp_receive+0xb08>)
 8016500:	881b      	ldrh	r3, [r3, #0]
 8016502:	461a      	mov	r2, r3
 8016504:	4b59      	ldr	r3, [pc, #356]	; (801666c <tcp_receive+0xb0c>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	441a      	add	r2, r3
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016512:	4b55      	ldr	r3, [pc, #340]	; (8016668 <tcp_receive+0xb08>)
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	429a      	cmp	r2, r3
 8016518:	d206      	bcs.n	8016528 <tcp_receive+0x9c8>
 801651a:	4b56      	ldr	r3, [pc, #344]	; (8016674 <tcp_receive+0xb14>)
 801651c:	f240 6207 	movw	r2, #1543	; 0x607
 8016520:	4957      	ldr	r1, [pc, #348]	; (8016680 <tcp_receive+0xb20>)
 8016522:	4856      	ldr	r0, [pc, #344]	; (801667c <tcp_receive+0xb1c>)
 8016524:	f005 fbbe 	bl	801bca4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801652c:	4b4e      	ldr	r3, [pc, #312]	; (8016668 <tcp_receive+0xb08>)
 801652e:	881b      	ldrh	r3, [r3, #0]
 8016530:	1ad3      	subs	r3, r2, r3
 8016532:	b29a      	uxth	r2, r3
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7fc fe95 	bl	8013268 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801653e:	4b4c      	ldr	r3, [pc, #304]	; (8016670 <tcp_receive+0xb10>)
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	891b      	ldrh	r3, [r3, #8]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d006      	beq.n	8016556 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016548:	4b49      	ldr	r3, [pc, #292]	; (8016670 <tcp_receive+0xb10>)
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	4a4d      	ldr	r2, [pc, #308]	; (8016684 <tcp_receive+0xb24>)
 801654e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016550:	4b47      	ldr	r3, [pc, #284]	; (8016670 <tcp_receive+0xb10>)
 8016552:	2200      	movs	r2, #0
 8016554:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016556:	4b46      	ldr	r3, [pc, #280]	; (8016670 <tcp_receive+0xb10>)
 8016558:	68db      	ldr	r3, [r3, #12]
 801655a:	899b      	ldrh	r3, [r3, #12]
 801655c:	b29b      	uxth	r3, r3
 801655e:	4618      	mov	r0, r3
 8016560:	f7fa fba2 	bl	8010ca8 <lwip_htons>
 8016564:	4603      	mov	r3, r0
 8016566:	b2db      	uxtb	r3, r3
 8016568:	f003 0301 	and.w	r3, r3, #1
 801656c:	2b00      	cmp	r3, #0
 801656e:	f000 80b8 	beq.w	80166e2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016572:	4b45      	ldr	r3, [pc, #276]	; (8016688 <tcp_receive+0xb28>)
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	f043 0320 	orr.w	r3, r3, #32
 801657a:	b2da      	uxtb	r2, r3
 801657c:	4b42      	ldr	r3, [pc, #264]	; (8016688 <tcp_receive+0xb28>)
 801657e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016580:	e0af      	b.n	80166e2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016586:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801658c:	68db      	ldr	r3, [r3, #12]
 801658e:	685b      	ldr	r3, [r3, #4]
 8016590:	4a36      	ldr	r2, [pc, #216]	; (801666c <tcp_receive+0xb0c>)
 8016592:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	891b      	ldrh	r3, [r3, #8]
 8016598:	461c      	mov	r4, r3
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	899b      	ldrh	r3, [r3, #12]
 80165a0:	b29b      	uxth	r3, r3
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7fa fb80 	bl	8010ca8 <lwip_htons>
 80165a8:	4603      	mov	r3, r0
 80165aa:	b2db      	uxtb	r3, r3
 80165ac:	f003 0303 	and.w	r3, r3, #3
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d001      	beq.n	80165b8 <tcp_receive+0xa58>
 80165b4:	2301      	movs	r3, #1
 80165b6:	e000      	b.n	80165ba <tcp_receive+0xa5a>
 80165b8:	2300      	movs	r3, #0
 80165ba:	191a      	adds	r2, r3, r4
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165c0:	441a      	add	r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165ca:	461c      	mov	r4, r3
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	891b      	ldrh	r3, [r3, #8]
 80165d0:	461d      	mov	r5, r3
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	68db      	ldr	r3, [r3, #12]
 80165d6:	899b      	ldrh	r3, [r3, #12]
 80165d8:	b29b      	uxth	r3, r3
 80165da:	4618      	mov	r0, r3
 80165dc:	f7fa fb64 	bl	8010ca8 <lwip_htons>
 80165e0:	4603      	mov	r3, r0
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	f003 0303 	and.w	r3, r3, #3
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d001      	beq.n	80165f0 <tcp_receive+0xa90>
 80165ec:	2301      	movs	r3, #1
 80165ee:	e000      	b.n	80165f2 <tcp_receive+0xa92>
 80165f0:	2300      	movs	r3, #0
 80165f2:	442b      	add	r3, r5
 80165f4:	429c      	cmp	r4, r3
 80165f6:	d206      	bcs.n	8016606 <tcp_receive+0xaa6>
 80165f8:	4b1e      	ldr	r3, [pc, #120]	; (8016674 <tcp_receive+0xb14>)
 80165fa:	f240 622b 	movw	r2, #1579	; 0x62b
 80165fe:	4923      	ldr	r1, [pc, #140]	; (801668c <tcp_receive+0xb2c>)
 8016600:	481e      	ldr	r0, [pc, #120]	; (801667c <tcp_receive+0xb1c>)
 8016602:	f005 fb4f 	bl	801bca4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	891b      	ldrh	r3, [r3, #8]
 801660a:	461c      	mov	r4, r3
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	899b      	ldrh	r3, [r3, #12]
 8016612:	b29b      	uxth	r3, r3
 8016614:	4618      	mov	r0, r3
 8016616:	f7fa fb47 	bl	8010ca8 <lwip_htons>
 801661a:	4603      	mov	r3, r0
 801661c:	b2db      	uxtb	r3, r3
 801661e:	f003 0303 	and.w	r3, r3, #3
 8016622:	2b00      	cmp	r3, #0
 8016624:	d001      	beq.n	801662a <tcp_receive+0xaca>
 8016626:	2301      	movs	r3, #1
 8016628:	e000      	b.n	801662c <tcp_receive+0xacc>
 801662a:	2300      	movs	r3, #0
 801662c:	1919      	adds	r1, r3, r4
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016632:	b28b      	uxth	r3, r1
 8016634:	1ad3      	subs	r3, r2, r3
 8016636:	b29a      	uxth	r2, r3
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7fc fe13 	bl	8013268 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	891b      	ldrh	r3, [r3, #8]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d028      	beq.n	801669e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801664c:	4b0d      	ldr	r3, [pc, #52]	; (8016684 <tcp_receive+0xb24>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d01d      	beq.n	8016690 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016654:	4b0b      	ldr	r3, [pc, #44]	; (8016684 <tcp_receive+0xb24>)
 8016656:	681a      	ldr	r2, [r3, #0]
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	685b      	ldr	r3, [r3, #4]
 801665c:	4619      	mov	r1, r3
 801665e:	4610      	mov	r0, r2
 8016660:	f7fb ffac 	bl	80125bc <pbuf_cat>
 8016664:	e018      	b.n	8016698 <tcp_receive+0xb38>
 8016666:	bf00      	nop
 8016668:	2000b492 	.word	0x2000b492
 801666c:	2000b488 	.word	0x2000b488
 8016670:	2000b468 	.word	0x2000b468
 8016674:	0801e448 	.word	0x0801e448
 8016678:	0801e828 	.word	0x0801e828
 801667c:	0801e494 	.word	0x0801e494
 8016680:	0801e864 	.word	0x0801e864
 8016684:	2000b498 	.word	0x2000b498
 8016688:	2000b495 	.word	0x2000b495
 801668c:	0801e884 	.word	0x0801e884
            } else {
              recv_data = cseg->p;
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	685b      	ldr	r3, [r3, #4]
 8016694:	4a70      	ldr	r2, [pc, #448]	; (8016858 <tcp_receive+0xcf8>)
 8016696:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	2200      	movs	r2, #0
 801669c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	68db      	ldr	r3, [r3, #12]
 80166a2:	899b      	ldrh	r3, [r3, #12]
 80166a4:	b29b      	uxth	r3, r3
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7fa fafe 	bl	8010ca8 <lwip_htons>
 80166ac:	4603      	mov	r3, r0
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	f003 0301 	and.w	r3, r3, #1
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d00d      	beq.n	80166d4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80166b8:	4b68      	ldr	r3, [pc, #416]	; (801685c <tcp_receive+0xcfc>)
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	f043 0320 	orr.w	r3, r3, #32
 80166c0:	b2da      	uxtb	r2, r3
 80166c2:	4b66      	ldr	r3, [pc, #408]	; (801685c <tcp_receive+0xcfc>)
 80166c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	7d1b      	ldrb	r3, [r3, #20]
 80166ca:	2b04      	cmp	r3, #4
 80166cc:	d102      	bne.n	80166d4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	2207      	movs	r2, #7
 80166d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	681a      	ldr	r2, [r3, #0]
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80166dc:	68b8      	ldr	r0, [r7, #8]
 80166de:	f7fd faec 	bl	8013cba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d008      	beq.n	80166fc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166ee:	68db      	ldr	r3, [r3, #12]
 80166f0:	685a      	ldr	r2, [r3, #4]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80166f6:	429a      	cmp	r2, r3
 80166f8:	f43f af43 	beq.w	8016582 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	8b5b      	ldrh	r3, [r3, #26]
 8016700:	f003 0301 	and.w	r3, r3, #1
 8016704:	2b00      	cmp	r3, #0
 8016706:	d00e      	beq.n	8016726 <tcp_receive+0xbc6>
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	8b5b      	ldrh	r3, [r3, #26]
 801670c:	f023 0301 	bic.w	r3, r3, #1
 8016710:	b29a      	uxth	r2, r3
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	835a      	strh	r2, [r3, #26]
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	8b5b      	ldrh	r3, [r3, #26]
 801671a:	f043 0302 	orr.w	r3, r3, #2
 801671e:	b29a      	uxth	r2, r3
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016724:	e188      	b.n	8016a38 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	8b5b      	ldrh	r3, [r3, #26]
 801672a:	f043 0301 	orr.w	r3, r3, #1
 801672e:	b29a      	uxth	r2, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016734:	e180      	b.n	8016a38 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801673a:	2b00      	cmp	r3, #0
 801673c:	d106      	bne.n	801674c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801673e:	4848      	ldr	r0, [pc, #288]	; (8016860 <tcp_receive+0xd00>)
 8016740:	f7fd faf2 	bl	8013d28 <tcp_seg_copy>
 8016744:	4602      	mov	r2, r0
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	675a      	str	r2, [r3, #116]	; 0x74
 801674a:	e16d      	b.n	8016a28 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801674c:	2300      	movs	r3, #0
 801674e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016754:	63bb      	str	r3, [r7, #56]	; 0x38
 8016756:	e157      	b.n	8016a08 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801675a:	68db      	ldr	r3, [r3, #12]
 801675c:	685a      	ldr	r2, [r3, #4]
 801675e:	4b41      	ldr	r3, [pc, #260]	; (8016864 <tcp_receive+0xd04>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	429a      	cmp	r2, r3
 8016764:	d11d      	bne.n	80167a2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016766:	4b3e      	ldr	r3, [pc, #248]	; (8016860 <tcp_receive+0xd00>)
 8016768:	891a      	ldrh	r2, [r3, #8]
 801676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676c:	891b      	ldrh	r3, [r3, #8]
 801676e:	429a      	cmp	r2, r3
 8016770:	f240 814f 	bls.w	8016a12 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016774:	483a      	ldr	r0, [pc, #232]	; (8016860 <tcp_receive+0xd00>)
 8016776:	f7fd fad7 	bl	8013d28 <tcp_seg_copy>
 801677a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	2b00      	cmp	r3, #0
 8016780:	f000 8149 	beq.w	8016a16 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016786:	2b00      	cmp	r3, #0
 8016788:	d003      	beq.n	8016792 <tcp_receive+0xc32>
                    prev->next = cseg;
 801678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801678c:	697a      	ldr	r2, [r7, #20]
 801678e:	601a      	str	r2, [r3, #0]
 8016790:	e002      	b.n	8016798 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	697a      	ldr	r2, [r7, #20]
 8016796:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016798:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801679a:	6978      	ldr	r0, [r7, #20]
 801679c:	f7ff f8dc 	bl	8015958 <tcp_oos_insert_segment>
                }
                break;
 80167a0:	e139      	b.n	8016a16 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80167a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d117      	bne.n	80167d8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80167a8:	4b2e      	ldr	r3, [pc, #184]	; (8016864 <tcp_receive+0xd04>)
 80167aa:	681a      	ldr	r2, [r3, #0]
 80167ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ae:	68db      	ldr	r3, [r3, #12]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	1ad3      	subs	r3, r2, r3
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	da57      	bge.n	8016868 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80167b8:	4829      	ldr	r0, [pc, #164]	; (8016860 <tcp_receive+0xd00>)
 80167ba:	f7fd fab5 	bl	8013d28 <tcp_seg_copy>
 80167be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80167c0:	69bb      	ldr	r3, [r7, #24]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	f000 8129 	beq.w	8016a1a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	69ba      	ldr	r2, [r7, #24]
 80167cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80167ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80167d0:	69b8      	ldr	r0, [r7, #24]
 80167d2:	f7ff f8c1 	bl	8015958 <tcp_oos_insert_segment>
                  }
                  break;
 80167d6:	e120      	b.n	8016a1a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80167d8:	4b22      	ldr	r3, [pc, #136]	; (8016864 <tcp_receive+0xd04>)
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167de:	68db      	ldr	r3, [r3, #12]
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	1ad3      	subs	r3, r2, r3
 80167e4:	3b01      	subs	r3, #1
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	db3e      	blt.n	8016868 <tcp_receive+0xd08>
 80167ea:	4b1e      	ldr	r3, [pc, #120]	; (8016864 <tcp_receive+0xd04>)
 80167ec:	681a      	ldr	r2, [r3, #0]
 80167ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f0:	68db      	ldr	r3, [r3, #12]
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	1ad3      	subs	r3, r2, r3
 80167f6:	3301      	adds	r3, #1
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	dc35      	bgt.n	8016868 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80167fc:	4818      	ldr	r0, [pc, #96]	; (8016860 <tcp_receive+0xd00>)
 80167fe:	f7fd fa93 	bl	8013d28 <tcp_seg_copy>
 8016802:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	2b00      	cmp	r3, #0
 8016808:	f000 8109 	beq.w	8016a1e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801680e:	68db      	ldr	r3, [r3, #12]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016814:	8912      	ldrh	r2, [r2, #8]
 8016816:	441a      	add	r2, r3
 8016818:	4b12      	ldr	r3, [pc, #72]	; (8016864 <tcp_receive+0xd04>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	1ad3      	subs	r3, r2, r3
 801681e:	2b00      	cmp	r3, #0
 8016820:	dd12      	ble.n	8016848 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016822:	4b10      	ldr	r3, [pc, #64]	; (8016864 <tcp_receive+0xd04>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	b29a      	uxth	r2, r3
 8016828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801682a:	68db      	ldr	r3, [r3, #12]
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	b29b      	uxth	r3, r3
 8016830:	1ad3      	subs	r3, r2, r3
 8016832:	b29a      	uxth	r2, r3
 8016834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016836:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801683a:	685a      	ldr	r2, [r3, #4]
 801683c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801683e:	891b      	ldrh	r3, [r3, #8]
 8016840:	4619      	mov	r1, r3
 8016842:	4610      	mov	r0, r2
 8016844:	f7fb fc72 	bl	801212c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801684a:	69fa      	ldr	r2, [r7, #28]
 801684c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801684e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016850:	69f8      	ldr	r0, [r7, #28]
 8016852:	f7ff f881 	bl	8015958 <tcp_oos_insert_segment>
                  }
                  break;
 8016856:	e0e2      	b.n	8016a1e <tcp_receive+0xebe>
 8016858:	2000b498 	.word	0x2000b498
 801685c:	2000b495 	.word	0x2000b495
 8016860:	2000b468 	.word	0x2000b468
 8016864:	2000b488 	.word	0x2000b488
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	f040 80c6 	bne.w	8016a02 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016876:	4b80      	ldr	r3, [pc, #512]	; (8016a78 <tcp_receive+0xf18>)
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801687c:	68db      	ldr	r3, [r3, #12]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016882:	2b00      	cmp	r3, #0
 8016884:	f340 80bd 	ble.w	8016a02 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	899b      	ldrh	r3, [r3, #12]
 801688e:	b29b      	uxth	r3, r3
 8016890:	4618      	mov	r0, r3
 8016892:	f7fa fa09 	bl	8010ca8 <lwip_htons>
 8016896:	4603      	mov	r3, r0
 8016898:	b2db      	uxtb	r3, r3
 801689a:	f003 0301 	and.w	r3, r3, #1
 801689e:	2b00      	cmp	r3, #0
 80168a0:	f040 80bf 	bne.w	8016a22 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80168a4:	4875      	ldr	r0, [pc, #468]	; (8016a7c <tcp_receive+0xf1c>)
 80168a6:	f7fd fa3f 	bl	8013d28 <tcp_seg_copy>
 80168aa:	4602      	mov	r2, r0
 80168ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80168b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	f000 80b6 	beq.w	8016a26 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80168ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168bc:	68db      	ldr	r3, [r3, #12]
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168c2:	8912      	ldrh	r2, [r2, #8]
 80168c4:	441a      	add	r2, r3
 80168c6:	4b6c      	ldr	r3, [pc, #432]	; (8016a78 <tcp_receive+0xf18>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	1ad3      	subs	r3, r2, r3
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	dd12      	ble.n	80168f6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80168d0:	4b69      	ldr	r3, [pc, #420]	; (8016a78 <tcp_receive+0xf18>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	b29a      	uxth	r2, r3
 80168d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168d8:	68db      	ldr	r3, [r3, #12]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	b29b      	uxth	r3, r3
 80168de:	1ad3      	subs	r3, r2, r3
 80168e0:	b29a      	uxth	r2, r3
 80168e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80168e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168e8:	685a      	ldr	r2, [r3, #4]
 80168ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ec:	891b      	ldrh	r3, [r3, #8]
 80168ee:	4619      	mov	r1, r3
 80168f0:	4610      	mov	r0, r2
 80168f2:	f7fb fc1b 	bl	801212c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80168f6:	4b62      	ldr	r3, [pc, #392]	; (8016a80 <tcp_receive+0xf20>)
 80168f8:	881b      	ldrh	r3, [r3, #0]
 80168fa:	461a      	mov	r2, r3
 80168fc:	4b5e      	ldr	r3, [pc, #376]	; (8016a78 <tcp_receive+0xf18>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	441a      	add	r2, r3
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016906:	6879      	ldr	r1, [r7, #4]
 8016908:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801690a:	440b      	add	r3, r1
 801690c:	1ad3      	subs	r3, r2, r3
 801690e:	2b00      	cmp	r3, #0
 8016910:	f340 8089 	ble.w	8016a26 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	899b      	ldrh	r3, [r3, #12]
 801691c:	b29b      	uxth	r3, r3
 801691e:	4618      	mov	r0, r3
 8016920:	f7fa f9c2 	bl	8010ca8 <lwip_htons>
 8016924:	4603      	mov	r3, r0
 8016926:	b2db      	uxtb	r3, r3
 8016928:	f003 0301 	and.w	r3, r3, #1
 801692c:	2b00      	cmp	r3, #0
 801692e:	d022      	beq.n	8016976 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	68db      	ldr	r3, [r3, #12]
 8016936:	899b      	ldrh	r3, [r3, #12]
 8016938:	b29b      	uxth	r3, r3
 801693a:	b21b      	sxth	r3, r3
 801693c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016940:	b21c      	sxth	r4, r3
 8016942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	899b      	ldrh	r3, [r3, #12]
 801694a:	b29b      	uxth	r3, r3
 801694c:	4618      	mov	r0, r3
 801694e:	f7fa f9ab 	bl	8010ca8 <lwip_htons>
 8016952:	4603      	mov	r3, r0
 8016954:	b2db      	uxtb	r3, r3
 8016956:	b29b      	uxth	r3, r3
 8016958:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801695c:	b29b      	uxth	r3, r3
 801695e:	4618      	mov	r0, r3
 8016960:	f7fa f9a2 	bl	8010ca8 <lwip_htons>
 8016964:	4603      	mov	r3, r0
 8016966:	b21b      	sxth	r3, r3
 8016968:	4323      	orrs	r3, r4
 801696a:	b21a      	sxth	r2, r3
 801696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	68db      	ldr	r3, [r3, #12]
 8016972:	b292      	uxth	r2, r2
 8016974:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801697a:	b29a      	uxth	r2, r3
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016980:	4413      	add	r3, r2
 8016982:	b299      	uxth	r1, r3
 8016984:	4b3c      	ldr	r3, [pc, #240]	; (8016a78 <tcp_receive+0xf18>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	b29a      	uxth	r2, r3
 801698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	1a8a      	subs	r2, r1, r2
 8016990:	b292      	uxth	r2, r2
 8016992:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	685a      	ldr	r2, [r3, #4]
 801699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	891b      	ldrh	r3, [r3, #8]
 80169a0:	4619      	mov	r1, r3
 80169a2:	4610      	mov	r0, r2
 80169a4:	f7fb fbc2 	bl	801212c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80169a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	891c      	ldrh	r4, [r3, #8]
 80169ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	68db      	ldr	r3, [r3, #12]
 80169b4:	899b      	ldrh	r3, [r3, #12]
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	4618      	mov	r0, r3
 80169ba:	f7fa f975 	bl	8010ca8 <lwip_htons>
 80169be:	4603      	mov	r3, r0
 80169c0:	b2db      	uxtb	r3, r3
 80169c2:	f003 0303 	and.w	r3, r3, #3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d001      	beq.n	80169ce <tcp_receive+0xe6e>
 80169ca:	2301      	movs	r3, #1
 80169cc:	e000      	b.n	80169d0 <tcp_receive+0xe70>
 80169ce:	2300      	movs	r3, #0
 80169d0:	4423      	add	r3, r4
 80169d2:	b29a      	uxth	r2, r3
 80169d4:	4b2a      	ldr	r3, [pc, #168]	; (8016a80 <tcp_receive+0xf20>)
 80169d6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80169d8:	4b29      	ldr	r3, [pc, #164]	; (8016a80 <tcp_receive+0xf20>)
 80169da:	881b      	ldrh	r3, [r3, #0]
 80169dc:	461a      	mov	r2, r3
 80169de:	4b26      	ldr	r3, [pc, #152]	; (8016a78 <tcp_receive+0xf18>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	441a      	add	r2, r3
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169e8:	6879      	ldr	r1, [r7, #4]
 80169ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80169ec:	440b      	add	r3, r1
 80169ee:	429a      	cmp	r2, r3
 80169f0:	d019      	beq.n	8016a26 <tcp_receive+0xec6>
 80169f2:	4b24      	ldr	r3, [pc, #144]	; (8016a84 <tcp_receive+0xf24>)
 80169f4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80169f8:	4923      	ldr	r1, [pc, #140]	; (8016a88 <tcp_receive+0xf28>)
 80169fa:	4824      	ldr	r0, [pc, #144]	; (8016a8c <tcp_receive+0xf2c>)
 80169fc:	f005 f952 	bl	801bca4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016a00:	e011      	b.n	8016a26 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8016a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f47f aea4 	bne.w	8016758 <tcp_receive+0xbf8>
 8016a10:	e00a      	b.n	8016a28 <tcp_receive+0xec8>
                break;
 8016a12:	bf00      	nop
 8016a14:	e008      	b.n	8016a28 <tcp_receive+0xec8>
                break;
 8016a16:	bf00      	nop
 8016a18:	e006      	b.n	8016a28 <tcp_receive+0xec8>
                  break;
 8016a1a:	bf00      	nop
 8016a1c:	e004      	b.n	8016a28 <tcp_receive+0xec8>
                  break;
 8016a1e:	bf00      	nop
 8016a20:	e002      	b.n	8016a28 <tcp_receive+0xec8>
                  break;
 8016a22:	bf00      	nop
 8016a24:	e000      	b.n	8016a28 <tcp_receive+0xec8>
                break;
 8016a26:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f001 fe8b 	bl	8018744 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016a2e:	e003      	b.n	8016a38 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f001 fe87 	bl	8018744 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016a36:	e01a      	b.n	8016a6e <tcp_receive+0xf0e>
 8016a38:	e019      	b.n	8016a6e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016a3a:	4b0f      	ldr	r3, [pc, #60]	; (8016a78 <tcp_receive+0xf18>)
 8016a3c:	681a      	ldr	r2, [r3, #0]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a42:	1ad3      	subs	r3, r2, r3
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	db0a      	blt.n	8016a5e <tcp_receive+0xefe>
 8016a48:	4b0b      	ldr	r3, [pc, #44]	; (8016a78 <tcp_receive+0xf18>)
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a50:	6879      	ldr	r1, [r7, #4]
 8016a52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016a54:	440b      	add	r3, r1
 8016a56:	1ad3      	subs	r3, r2, r3
 8016a58:	3301      	adds	r3, #1
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	dd07      	ble.n	8016a6e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	8b5b      	ldrh	r3, [r3, #26]
 8016a62:	f043 0302 	orr.w	r3, r3, #2
 8016a66:	b29a      	uxth	r2, r3
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016a6c:	e7ff      	b.n	8016a6e <tcp_receive+0xf0e>
 8016a6e:	bf00      	nop
 8016a70:	3750      	adds	r7, #80	; 0x50
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bdb0      	pop	{r4, r5, r7, pc}
 8016a76:	bf00      	nop
 8016a78:	2000b488 	.word	0x2000b488
 8016a7c:	2000b468 	.word	0x2000b468
 8016a80:	2000b492 	.word	0x2000b492
 8016a84:	0801e448 	.word	0x0801e448
 8016a88:	0801e7f0 	.word	0x0801e7f0
 8016a8c:	0801e494 	.word	0x0801e494

08016a90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016a90:	b480      	push	{r7}
 8016a92:	b083      	sub	sp, #12
 8016a94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016a96:	4b15      	ldr	r3, [pc, #84]	; (8016aec <tcp_get_next_optbyte+0x5c>)
 8016a98:	881b      	ldrh	r3, [r3, #0]
 8016a9a:	1c5a      	adds	r2, r3, #1
 8016a9c:	b291      	uxth	r1, r2
 8016a9e:	4a13      	ldr	r2, [pc, #76]	; (8016aec <tcp_get_next_optbyte+0x5c>)
 8016aa0:	8011      	strh	r1, [r2, #0]
 8016aa2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016aa4:	4b12      	ldr	r3, [pc, #72]	; (8016af0 <tcp_get_next_optbyte+0x60>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d004      	beq.n	8016ab6 <tcp_get_next_optbyte+0x26>
 8016aac:	4b11      	ldr	r3, [pc, #68]	; (8016af4 <tcp_get_next_optbyte+0x64>)
 8016aae:	881b      	ldrh	r3, [r3, #0]
 8016ab0:	88fa      	ldrh	r2, [r7, #6]
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d208      	bcs.n	8016ac8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016ab6:	4b10      	ldr	r3, [pc, #64]	; (8016af8 <tcp_get_next_optbyte+0x68>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	3314      	adds	r3, #20
 8016abc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016abe:	88fb      	ldrh	r3, [r7, #6]
 8016ac0:	683a      	ldr	r2, [r7, #0]
 8016ac2:	4413      	add	r3, r2
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	e00b      	b.n	8016ae0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016ac8:	88fb      	ldrh	r3, [r7, #6]
 8016aca:	b2da      	uxtb	r2, r3
 8016acc:	4b09      	ldr	r3, [pc, #36]	; (8016af4 <tcp_get_next_optbyte+0x64>)
 8016ace:	881b      	ldrh	r3, [r3, #0]
 8016ad0:	b2db      	uxtb	r3, r3
 8016ad2:	1ad3      	subs	r3, r2, r3
 8016ad4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016ad6:	4b06      	ldr	r3, [pc, #24]	; (8016af0 <tcp_get_next_optbyte+0x60>)
 8016ad8:	681a      	ldr	r2, [r3, #0]
 8016ada:	797b      	ldrb	r3, [r7, #5]
 8016adc:	4413      	add	r3, r2
 8016ade:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	370c      	adds	r7, #12
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aea:	4770      	bx	lr
 8016aec:	2000b484 	.word	0x2000b484
 8016af0:	2000b480 	.word	0x2000b480
 8016af4:	2000b47e 	.word	0x2000b47e
 8016af8:	2000b478 	.word	0x2000b478

08016afc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b084      	sub	sp, #16
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d106      	bne.n	8016b18 <tcp_parseopt+0x1c>
 8016b0a:	4b32      	ldr	r3, [pc, #200]	; (8016bd4 <tcp_parseopt+0xd8>)
 8016b0c:	f240 727d 	movw	r2, #1917	; 0x77d
 8016b10:	4931      	ldr	r1, [pc, #196]	; (8016bd8 <tcp_parseopt+0xdc>)
 8016b12:	4832      	ldr	r0, [pc, #200]	; (8016bdc <tcp_parseopt+0xe0>)
 8016b14:	f005 f8c6 	bl	801bca4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016b18:	4b31      	ldr	r3, [pc, #196]	; (8016be0 <tcp_parseopt+0xe4>)
 8016b1a:	881b      	ldrh	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d056      	beq.n	8016bce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016b20:	4b30      	ldr	r3, [pc, #192]	; (8016be4 <tcp_parseopt+0xe8>)
 8016b22:	2200      	movs	r2, #0
 8016b24:	801a      	strh	r2, [r3, #0]
 8016b26:	e046      	b.n	8016bb6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016b28:	f7ff ffb2 	bl	8016a90 <tcp_get_next_optbyte>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016b30:	7bfb      	ldrb	r3, [r7, #15]
 8016b32:	2b02      	cmp	r3, #2
 8016b34:	d006      	beq.n	8016b44 <tcp_parseopt+0x48>
 8016b36:	2b02      	cmp	r3, #2
 8016b38:	dc2c      	bgt.n	8016b94 <tcp_parseopt+0x98>
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d042      	beq.n	8016bc4 <tcp_parseopt+0xc8>
 8016b3e:	2b01      	cmp	r3, #1
 8016b40:	d128      	bne.n	8016b94 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016b42:	e038      	b.n	8016bb6 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016b44:	f7ff ffa4 	bl	8016a90 <tcp_get_next_optbyte>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	2b04      	cmp	r3, #4
 8016b4c:	d13c      	bne.n	8016bc8 <tcp_parseopt+0xcc>
 8016b4e:	4b25      	ldr	r3, [pc, #148]	; (8016be4 <tcp_parseopt+0xe8>)
 8016b50:	881b      	ldrh	r3, [r3, #0]
 8016b52:	3301      	adds	r3, #1
 8016b54:	4a22      	ldr	r2, [pc, #136]	; (8016be0 <tcp_parseopt+0xe4>)
 8016b56:	8812      	ldrh	r2, [r2, #0]
 8016b58:	4293      	cmp	r3, r2
 8016b5a:	da35      	bge.n	8016bc8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016b5c:	f7ff ff98 	bl	8016a90 <tcp_get_next_optbyte>
 8016b60:	4603      	mov	r3, r0
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	021b      	lsls	r3, r3, #8
 8016b66:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016b68:	f7ff ff92 	bl	8016a90 <tcp_get_next_optbyte>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	89bb      	ldrh	r3, [r7, #12]
 8016b72:	4313      	orrs	r3, r2
 8016b74:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016b76:	89bb      	ldrh	r3, [r7, #12]
 8016b78:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8016b7c:	4293      	cmp	r3, r2
 8016b7e:	d804      	bhi.n	8016b8a <tcp_parseopt+0x8e>
 8016b80:	89bb      	ldrh	r3, [r7, #12]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d001      	beq.n	8016b8a <tcp_parseopt+0x8e>
 8016b86:	89ba      	ldrh	r2, [r7, #12]
 8016b88:	e001      	b.n	8016b8e <tcp_parseopt+0x92>
 8016b8a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016b92:	e010      	b.n	8016bb6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016b94:	f7ff ff7c 	bl	8016a90 <tcp_get_next_optbyte>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016b9c:	7afb      	ldrb	r3, [r7, #11]
 8016b9e:	2b01      	cmp	r3, #1
 8016ba0:	d914      	bls.n	8016bcc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016ba2:	7afb      	ldrb	r3, [r7, #11]
 8016ba4:	b29a      	uxth	r2, r3
 8016ba6:	4b0f      	ldr	r3, [pc, #60]	; (8016be4 <tcp_parseopt+0xe8>)
 8016ba8:	881b      	ldrh	r3, [r3, #0]
 8016baa:	4413      	add	r3, r2
 8016bac:	b29b      	uxth	r3, r3
 8016bae:	3b02      	subs	r3, #2
 8016bb0:	b29a      	uxth	r2, r3
 8016bb2:	4b0c      	ldr	r3, [pc, #48]	; (8016be4 <tcp_parseopt+0xe8>)
 8016bb4:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016bb6:	4b0b      	ldr	r3, [pc, #44]	; (8016be4 <tcp_parseopt+0xe8>)
 8016bb8:	881a      	ldrh	r2, [r3, #0]
 8016bba:	4b09      	ldr	r3, [pc, #36]	; (8016be0 <tcp_parseopt+0xe4>)
 8016bbc:	881b      	ldrh	r3, [r3, #0]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d3b2      	bcc.n	8016b28 <tcp_parseopt+0x2c>
 8016bc2:	e004      	b.n	8016bce <tcp_parseopt+0xd2>
          return;
 8016bc4:	bf00      	nop
 8016bc6:	e002      	b.n	8016bce <tcp_parseopt+0xd2>
            return;
 8016bc8:	bf00      	nop
 8016bca:	e000      	b.n	8016bce <tcp_parseopt+0xd2>
            return;
 8016bcc:	bf00      	nop
      }
    }
  }
}
 8016bce:	3710      	adds	r7, #16
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}
 8016bd4:	0801e448 	.word	0x0801e448
 8016bd8:	0801e8ac 	.word	0x0801e8ac
 8016bdc:	0801e494 	.word	0x0801e494
 8016be0:	2000b47c 	.word	0x2000b47c
 8016be4:	2000b484 	.word	0x2000b484

08016be8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016be8:	b480      	push	{r7}
 8016bea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016bec:	4b05      	ldr	r3, [pc, #20]	; (8016c04 <tcp_trigger_input_pcb_close+0x1c>)
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	f043 0310 	orr.w	r3, r3, #16
 8016bf4:	b2da      	uxtb	r2, r3
 8016bf6:	4b03      	ldr	r3, [pc, #12]	; (8016c04 <tcp_trigger_input_pcb_close+0x1c>)
 8016bf8:	701a      	strb	r2, [r3, #0]
}
 8016bfa:	bf00      	nop
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c02:	4770      	bx	lr
 8016c04:	2000b495 	.word	0x2000b495

08016c08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60f8      	str	r0, [r7, #12]
 8016c10:	60b9      	str	r1, [r7, #8]
 8016c12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d00a      	beq.n	8016c30 <tcp_route+0x28>
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	7a1b      	ldrb	r3, [r3, #8]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d006      	beq.n	8016c30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	7a1b      	ldrb	r3, [r3, #8]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7fb f8a6 	bl	8011d78 <netif_get_by_index>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	e003      	b.n	8016c38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f003 faf1 	bl	801a218 <ip4_route>
 8016c36:	4603      	mov	r3, r0
  }
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3710      	adds	r7, #16
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}

08016c40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016c40:	b590      	push	{r4, r7, lr}
 8016c42:	b087      	sub	sp, #28
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	60f8      	str	r0, [r7, #12]
 8016c48:	60b9      	str	r1, [r7, #8]
 8016c4a:	603b      	str	r3, [r7, #0]
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d105      	bne.n	8016c62 <tcp_create_segment+0x22>
 8016c56:	4b44      	ldr	r3, [pc, #272]	; (8016d68 <tcp_create_segment+0x128>)
 8016c58:	22a3      	movs	r2, #163	; 0xa3
 8016c5a:	4944      	ldr	r1, [pc, #272]	; (8016d6c <tcp_create_segment+0x12c>)
 8016c5c:	4844      	ldr	r0, [pc, #272]	; (8016d70 <tcp_create_segment+0x130>)
 8016c5e:	f005 f821 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d105      	bne.n	8016c74 <tcp_create_segment+0x34>
 8016c68:	4b3f      	ldr	r3, [pc, #252]	; (8016d68 <tcp_create_segment+0x128>)
 8016c6a:	22a4      	movs	r2, #164	; 0xa4
 8016c6c:	4941      	ldr	r1, [pc, #260]	; (8016d74 <tcp_create_segment+0x134>)
 8016c6e:	4840      	ldr	r0, [pc, #256]	; (8016d70 <tcp_create_segment+0x130>)
 8016c70:	f005 f818 	bl	801bca4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016c74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016c78:	009b      	lsls	r3, r3, #2
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	f003 0304 	and.w	r3, r3, #4
 8016c80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016c82:	2003      	movs	r0, #3
 8016c84:	f7fa fcf2 	bl	801166c <memp_malloc>
 8016c88:	6138      	str	r0, [r7, #16]
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d104      	bne.n	8016c9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016c90:	68b8      	ldr	r0, [r7, #8]
 8016c92:	f7fb fbd1 	bl	8012438 <pbuf_free>
    return NULL;
 8016c96:	2300      	movs	r3, #0
 8016c98:	e061      	b.n	8016d5e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016ca0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016ca2:	693b      	ldr	r3, [r7, #16]
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	68ba      	ldr	r2, [r7, #8]
 8016cac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	891a      	ldrh	r2, [r3, #8]
 8016cb2:	7dfb      	ldrb	r3, [r7, #23]
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d205      	bcs.n	8016cc6 <tcp_create_segment+0x86>
 8016cba:	4b2b      	ldr	r3, [pc, #172]	; (8016d68 <tcp_create_segment+0x128>)
 8016cbc:	22b0      	movs	r2, #176	; 0xb0
 8016cbe:	492e      	ldr	r1, [pc, #184]	; (8016d78 <tcp_create_segment+0x138>)
 8016cc0:	482b      	ldr	r0, [pc, #172]	; (8016d70 <tcp_create_segment+0x130>)
 8016cc2:	f004 ffef 	bl	801bca4 <iprintf>
  seg->len = p->tot_len - optlen;
 8016cc6:	68bb      	ldr	r3, [r7, #8]
 8016cc8:	891a      	ldrh	r2, [r3, #8]
 8016cca:	7dfb      	ldrb	r3, [r7, #23]
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	1ad3      	subs	r3, r2, r3
 8016cd0:	b29a      	uxth	r2, r3
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016cd6:	2114      	movs	r1, #20
 8016cd8:	68b8      	ldr	r0, [r7, #8]
 8016cda:	f7fb fb17 	bl	801230c <pbuf_add_header>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d004      	beq.n	8016cee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016ce4:	6938      	ldr	r0, [r7, #16]
 8016ce6:	f7fc ffe8 	bl	8013cba <tcp_seg_free>
    return NULL;
 8016cea:	2300      	movs	r3, #0
 8016cec:	e037      	b.n	8016d5e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	685b      	ldr	r3, [r3, #4]
 8016cf2:	685a      	ldr	r2, [r3, #4]
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	8ada      	ldrh	r2, [r3, #22]
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	68dc      	ldr	r4, [r3, #12]
 8016d00:	4610      	mov	r0, r2
 8016d02:	f7f9 ffd1 	bl	8010ca8 <lwip_htons>
 8016d06:	4603      	mov	r3, r0
 8016d08:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	8b1a      	ldrh	r2, [r3, #24]
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	68dc      	ldr	r4, [r3, #12]
 8016d12:	4610      	mov	r0, r2
 8016d14:	f7f9 ffc8 	bl	8010ca8 <lwip_htons>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	68dc      	ldr	r4, [r3, #12]
 8016d20:	6838      	ldr	r0, [r7, #0]
 8016d22:	f7f9 ffd6 	bl	8010cd2 <lwip_htonl>
 8016d26:	4603      	mov	r3, r0
 8016d28:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016d2a:	7dfb      	ldrb	r3, [r7, #23]
 8016d2c:	089b      	lsrs	r3, r3, #2
 8016d2e:	b2db      	uxtb	r3, r3
 8016d30:	b29b      	uxth	r3, r3
 8016d32:	3305      	adds	r3, #5
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	031b      	lsls	r3, r3, #12
 8016d38:	b29a      	uxth	r2, r3
 8016d3a:	79fb      	ldrb	r3, [r7, #7]
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	4313      	orrs	r3, r2
 8016d40:	b29a      	uxth	r2, r3
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	68dc      	ldr	r4, [r3, #12]
 8016d46:	4610      	mov	r0, r2
 8016d48:	f7f9 ffae 	bl	8010ca8 <lwip_htons>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	68db      	ldr	r3, [r3, #12]
 8016d54:	2200      	movs	r2, #0
 8016d56:	749a      	strb	r2, [r3, #18]
 8016d58:	2200      	movs	r2, #0
 8016d5a:	74da      	strb	r2, [r3, #19]
  return seg;
 8016d5c:	693b      	ldr	r3, [r7, #16]
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	371c      	adds	r7, #28
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd90      	pop	{r4, r7, pc}
 8016d66:	bf00      	nop
 8016d68:	0801e8c8 	.word	0x0801e8c8
 8016d6c:	0801e8fc 	.word	0x0801e8fc
 8016d70:	0801e91c 	.word	0x0801e91c
 8016d74:	0801e944 	.word	0x0801e944
 8016d78:	0801e968 	.word	0x0801e968

08016d7c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b086      	sub	sp, #24
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	607b      	str	r3, [r7, #4]
 8016d84:	4603      	mov	r3, r0
 8016d86:	73fb      	strb	r3, [r7, #15]
 8016d88:	460b      	mov	r3, r1
 8016d8a:	81bb      	strh	r3, [r7, #12]
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016d90:	89bb      	ldrh	r3, [r7, #12]
 8016d92:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d105      	bne.n	8016da6 <tcp_pbuf_prealloc+0x2a>
 8016d9a:	4b30      	ldr	r3, [pc, #192]	; (8016e5c <tcp_pbuf_prealloc+0xe0>)
 8016d9c:	22e8      	movs	r2, #232	; 0xe8
 8016d9e:	4930      	ldr	r1, [pc, #192]	; (8016e60 <tcp_pbuf_prealloc+0xe4>)
 8016da0:	4830      	ldr	r0, [pc, #192]	; (8016e64 <tcp_pbuf_prealloc+0xe8>)
 8016da2:	f004 ff7f 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016da6:	6a3b      	ldr	r3, [r7, #32]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d105      	bne.n	8016db8 <tcp_pbuf_prealloc+0x3c>
 8016dac:	4b2b      	ldr	r3, [pc, #172]	; (8016e5c <tcp_pbuf_prealloc+0xe0>)
 8016dae:	22e9      	movs	r2, #233	; 0xe9
 8016db0:	492d      	ldr	r1, [pc, #180]	; (8016e68 <tcp_pbuf_prealloc+0xec>)
 8016db2:	482c      	ldr	r0, [pc, #176]	; (8016e64 <tcp_pbuf_prealloc+0xe8>)
 8016db4:	f004 ff76 	bl	801bca4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016db8:	89ba      	ldrh	r2, [r7, #12]
 8016dba:	897b      	ldrh	r3, [r7, #10]
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	d221      	bcs.n	8016e04 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016dc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016dc4:	f003 0302 	and.w	r3, r3, #2
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d111      	bne.n	8016df0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016dcc:	6a3b      	ldr	r3, [r7, #32]
 8016dce:	8b5b      	ldrh	r3, [r3, #26]
 8016dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d115      	bne.n	8016e04 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016dd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d007      	beq.n	8016df0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016de0:	6a3b      	ldr	r3, [r7, #32]
 8016de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d103      	bne.n	8016df0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016de8:	6a3b      	ldr	r3, [r7, #32]
 8016dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d009      	beq.n	8016e04 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016df0:	89bb      	ldrh	r3, [r7, #12]
 8016df2:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8016df6:	f023 0203 	bic.w	r2, r3, #3
 8016dfa:	897b      	ldrh	r3, [r7, #10]
 8016dfc:	4293      	cmp	r3, r2
 8016dfe:	bf28      	it	cs
 8016e00:	4613      	movcs	r3, r2
 8016e02:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016e04:	8af9      	ldrh	r1, [r7, #22]
 8016e06:	7bfb      	ldrb	r3, [r7, #15]
 8016e08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7fb f82f 	bl	8011e70 <pbuf_alloc>
 8016e12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016e14:	693b      	ldr	r3, [r7, #16]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d101      	bne.n	8016e1e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	e019      	b.n	8016e52 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d006      	beq.n	8016e34 <tcp_pbuf_prealloc+0xb8>
 8016e26:	4b0d      	ldr	r3, [pc, #52]	; (8016e5c <tcp_pbuf_prealloc+0xe0>)
 8016e28:	f240 120b 	movw	r2, #267	; 0x10b
 8016e2c:	490f      	ldr	r1, [pc, #60]	; (8016e6c <tcp_pbuf_prealloc+0xf0>)
 8016e2e:	480d      	ldr	r0, [pc, #52]	; (8016e64 <tcp_pbuf_prealloc+0xe8>)
 8016e30:	f004 ff38 	bl	801bca4 <iprintf>
  *oversize = p->len - length;
 8016e34:	693b      	ldr	r3, [r7, #16]
 8016e36:	895a      	ldrh	r2, [r3, #10]
 8016e38:	89bb      	ldrh	r3, [r7, #12]
 8016e3a:	1ad3      	subs	r3, r2, r3
 8016e3c:	b29a      	uxth	r2, r3
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016e42:	693b      	ldr	r3, [r7, #16]
 8016e44:	89ba      	ldrh	r2, [r7, #12]
 8016e46:	811a      	strh	r2, [r3, #8]
 8016e48:	693b      	ldr	r3, [r7, #16]
 8016e4a:	891a      	ldrh	r2, [r3, #8]
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	815a      	strh	r2, [r3, #10]
  return p;
 8016e50:	693b      	ldr	r3, [r7, #16]
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	3718      	adds	r7, #24
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd80      	pop	{r7, pc}
 8016e5a:	bf00      	nop
 8016e5c:	0801e8c8 	.word	0x0801e8c8
 8016e60:	0801e980 	.word	0x0801e980
 8016e64:	0801e91c 	.word	0x0801e91c
 8016e68:	0801e9a4 	.word	0x0801e9a4
 8016e6c:	0801e9c4 	.word	0x0801e9c4

08016e70 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b082      	sub	sp, #8
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
 8016e78:	460b      	mov	r3, r1
 8016e7a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d106      	bne.n	8016e90 <tcp_write_checks+0x20>
 8016e82:	4b33      	ldr	r3, [pc, #204]	; (8016f50 <tcp_write_checks+0xe0>)
 8016e84:	f240 1233 	movw	r2, #307	; 0x133
 8016e88:	4932      	ldr	r1, [pc, #200]	; (8016f54 <tcp_write_checks+0xe4>)
 8016e8a:	4833      	ldr	r0, [pc, #204]	; (8016f58 <tcp_write_checks+0xe8>)
 8016e8c:	f004 ff0a 	bl	801bca4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	7d1b      	ldrb	r3, [r3, #20]
 8016e94:	2b04      	cmp	r3, #4
 8016e96:	d00e      	beq.n	8016eb6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016e9c:	2b07      	cmp	r3, #7
 8016e9e:	d00a      	beq.n	8016eb6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016ea4:	2b02      	cmp	r3, #2
 8016ea6:	d006      	beq.n	8016eb6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016eac:	2b03      	cmp	r3, #3
 8016eae:	d002      	beq.n	8016eb6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016eb0:	f06f 030a 	mvn.w	r3, #10
 8016eb4:	e048      	b.n	8016f48 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016eb6:	887b      	ldrh	r3, [r7, #2]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d101      	bne.n	8016ec0 <tcp_write_checks+0x50>
    return ERR_OK;
 8016ebc:	2300      	movs	r3, #0
 8016ebe:	e043      	b.n	8016f48 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016ec6:	887a      	ldrh	r2, [r7, #2]
 8016ec8:	429a      	cmp	r2, r3
 8016eca:	d909      	bls.n	8016ee0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	8b5b      	ldrh	r3, [r3, #26]
 8016ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ed4:	b29a      	uxth	r2, r3
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016eda:	f04f 33ff 	mov.w	r3, #4294967295
 8016ede:	e033      	b.n	8016f48 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016ee6:	2b0f      	cmp	r3, #15
 8016ee8:	d909      	bls.n	8016efe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	8b5b      	ldrh	r3, [r3, #26]
 8016eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8016efc:	e024      	b.n	8016f48 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d00f      	beq.n	8016f28 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d11a      	bne.n	8016f46 <tcp_write_checks+0xd6>
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d116      	bne.n	8016f46 <tcp_write_checks+0xd6>
 8016f18:	4b0d      	ldr	r3, [pc, #52]	; (8016f50 <tcp_write_checks+0xe0>)
 8016f1a:	f240 1255 	movw	r2, #341	; 0x155
 8016f1e:	490f      	ldr	r1, [pc, #60]	; (8016f5c <tcp_write_checks+0xec>)
 8016f20:	480d      	ldr	r0, [pc, #52]	; (8016f58 <tcp_write_checks+0xe8>)
 8016f22:	f004 febf 	bl	801bca4 <iprintf>
 8016f26:	e00e      	b.n	8016f46 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d103      	bne.n	8016f38 <tcp_write_checks+0xc8>
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d006      	beq.n	8016f46 <tcp_write_checks+0xd6>
 8016f38:	4b05      	ldr	r3, [pc, #20]	; (8016f50 <tcp_write_checks+0xe0>)
 8016f3a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016f3e:	4908      	ldr	r1, [pc, #32]	; (8016f60 <tcp_write_checks+0xf0>)
 8016f40:	4805      	ldr	r0, [pc, #20]	; (8016f58 <tcp_write_checks+0xe8>)
 8016f42:	f004 feaf 	bl	801bca4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016f46:	2300      	movs	r3, #0
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	3708      	adds	r7, #8
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	0801e8c8 	.word	0x0801e8c8
 8016f54:	0801e9d8 	.word	0x0801e9d8
 8016f58:	0801e91c 	.word	0x0801e91c
 8016f5c:	0801e9f8 	.word	0x0801e9f8
 8016f60:	0801ea34 	.word	0x0801ea34

08016f64 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016f64:	b590      	push	{r4, r7, lr}
 8016f66:	b09b      	sub	sp, #108	; 0x6c
 8016f68:	af04      	add	r7, sp, #16
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	60b9      	str	r1, [r7, #8]
 8016f6e:	4611      	mov	r1, r2
 8016f70:	461a      	mov	r2, r3
 8016f72:	460b      	mov	r3, r1
 8016f74:	80fb      	strh	r3, [r7, #6]
 8016f76:	4613      	mov	r3, r2
 8016f78:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	653b      	str	r3, [r7, #80]	; 0x50
 8016f82:	2300      	movs	r3, #0
 8016f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016f86:	2300      	movs	r3, #0
 8016f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8016f8e:	2300      	movs	r3, #0
 8016f90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016f94:	2300      	movs	r3, #0
 8016f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d109      	bne.n	8016fc0 <tcp_write+0x5c>
 8016fac:	4ba4      	ldr	r3, [pc, #656]	; (8017240 <tcp_write+0x2dc>)
 8016fae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016fb2:	49a4      	ldr	r1, [pc, #656]	; (8017244 <tcp_write+0x2e0>)
 8016fb4:	48a4      	ldr	r0, [pc, #656]	; (8017248 <tcp_write+0x2e4>)
 8016fb6:	f004 fe75 	bl	801bca4 <iprintf>
 8016fba:	f06f 030f 	mvn.w	r3, #15
 8016fbe:	e32a      	b.n	8017616 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016fc6:	085b      	lsrs	r3, r3, #1
 8016fc8:	b29a      	uxth	r2, r3
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016fce:	4293      	cmp	r3, r2
 8016fd0:	bf28      	it	cs
 8016fd2:	4613      	movcs	r3, r2
 8016fd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d102      	bne.n	8016fe2 <tcp_write+0x7e>
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016fe0:	e000      	b.n	8016fe4 <tcp_write+0x80>
 8016fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016fe4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d109      	bne.n	8017000 <tcp_write+0x9c>
 8016fec:	4b94      	ldr	r3, [pc, #592]	; (8017240 <tcp_write+0x2dc>)
 8016fee:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016ff2:	4996      	ldr	r1, [pc, #600]	; (801724c <tcp_write+0x2e8>)
 8016ff4:	4894      	ldr	r0, [pc, #592]	; (8017248 <tcp_write+0x2e4>)
 8016ff6:	f004 fe55 	bl	801bca4 <iprintf>
 8016ffa:	f06f 030f 	mvn.w	r3, #15
 8016ffe:	e30a      	b.n	8017616 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017000:	88fb      	ldrh	r3, [r7, #6]
 8017002:	4619      	mov	r1, r3
 8017004:	68f8      	ldr	r0, [r7, #12]
 8017006:	f7ff ff33 	bl	8016e70 <tcp_write_checks>
 801700a:	4603      	mov	r3, r0
 801700c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017010:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017014:	2b00      	cmp	r3, #0
 8017016:	d002      	beq.n	801701e <tcp_write+0xba>
    return err;
 8017018:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801701c:	e2fb      	b.n	8017616 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017024:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017028:	2300      	movs	r3, #0
 801702a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017032:	2b00      	cmp	r3, #0
 8017034:	f000 80f6 	beq.w	8017224 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801703c:	653b      	str	r3, [r7, #80]	; 0x50
 801703e:	e002      	b.n	8017046 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d1f8      	bne.n	8017040 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801704e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017050:	7a9b      	ldrb	r3, [r3, #10]
 8017052:	009b      	lsls	r3, r3, #2
 8017054:	b29b      	uxth	r3, r3
 8017056:	f003 0304 	and.w	r3, r3, #4
 801705a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801705c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801705e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017060:	891b      	ldrh	r3, [r3, #8]
 8017062:	4619      	mov	r1, r3
 8017064:	8c3b      	ldrh	r3, [r7, #32]
 8017066:	440b      	add	r3, r1
 8017068:	429a      	cmp	r2, r3
 801706a:	da06      	bge.n	801707a <tcp_write+0x116>
 801706c:	4b74      	ldr	r3, [pc, #464]	; (8017240 <tcp_write+0x2dc>)
 801706e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017072:	4977      	ldr	r1, [pc, #476]	; (8017250 <tcp_write+0x2ec>)
 8017074:	4874      	ldr	r0, [pc, #464]	; (8017248 <tcp_write+0x2e4>)
 8017076:	f004 fe15 	bl	801bca4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801707a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801707c:	891a      	ldrh	r2, [r3, #8]
 801707e:	8c3b      	ldrh	r3, [r7, #32]
 8017080:	4413      	add	r3, r2
 8017082:	b29b      	uxth	r3, r3
 8017084:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017086:	1ad3      	subs	r3, r2, r3
 8017088:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017090:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017092:	8a7b      	ldrh	r3, [r7, #18]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d026      	beq.n	80170e6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017098:	8a7b      	ldrh	r3, [r7, #18]
 801709a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801709c:	429a      	cmp	r2, r3
 801709e:	d206      	bcs.n	80170ae <tcp_write+0x14a>
 80170a0:	4b67      	ldr	r3, [pc, #412]	; (8017240 <tcp_write+0x2dc>)
 80170a2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80170a6:	496b      	ldr	r1, [pc, #428]	; (8017254 <tcp_write+0x2f0>)
 80170a8:	4867      	ldr	r0, [pc, #412]	; (8017248 <tcp_write+0x2e4>)
 80170aa:	f004 fdfb 	bl	801bca4 <iprintf>
      seg = last_unsent;
 80170ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80170b2:	8a7b      	ldrh	r3, [r7, #18]
 80170b4:	88fa      	ldrh	r2, [r7, #6]
 80170b6:	4293      	cmp	r3, r2
 80170b8:	bf28      	it	cs
 80170ba:	4613      	movcs	r3, r2
 80170bc:	b29b      	uxth	r3, r3
 80170be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80170c0:	4293      	cmp	r3, r2
 80170c2:	bf28      	it	cs
 80170c4:	4613      	movcs	r3, r2
 80170c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80170c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170ce:	4413      	add	r3, r2
 80170d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80170d4:	8a7a      	ldrh	r2, [r7, #18]
 80170d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170d8:	1ad3      	subs	r3, r2, r3
 80170da:	b29b      	uxth	r3, r3
 80170dc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80170de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80170e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170e2:	1ad3      	subs	r3, r2, r3
 80170e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80170e6:	8a7b      	ldrh	r3, [r7, #18]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d00b      	beq.n	8017104 <tcp_write+0x1a0>
 80170ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170f0:	88fb      	ldrh	r3, [r7, #6]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d006      	beq.n	8017104 <tcp_write+0x1a0>
 80170f6:	4b52      	ldr	r3, [pc, #328]	; (8017240 <tcp_write+0x2dc>)
 80170f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80170fc:	4956      	ldr	r1, [pc, #344]	; (8017258 <tcp_write+0x2f4>)
 80170fe:	4852      	ldr	r0, [pc, #328]	; (8017248 <tcp_write+0x2e4>)
 8017100:	f004 fdd0 	bl	801bca4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017104:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017108:	88fb      	ldrh	r3, [r7, #6]
 801710a:	429a      	cmp	r2, r3
 801710c:	f080 8167 	bcs.w	80173de <tcp_write+0x47a>
 8017110:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017112:	2b00      	cmp	r3, #0
 8017114:	f000 8163 	beq.w	80173de <tcp_write+0x47a>
 8017118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801711a:	891b      	ldrh	r3, [r3, #8]
 801711c:	2b00      	cmp	r3, #0
 801711e:	f000 815e 	beq.w	80173de <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017122:	88fa      	ldrh	r2, [r7, #6]
 8017124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017128:	1ad2      	subs	r2, r2, r3
 801712a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801712c:	4293      	cmp	r3, r2
 801712e:	bfa8      	it	ge
 8017130:	4613      	movge	r3, r2
 8017132:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017136:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017138:	797b      	ldrb	r3, [r7, #5]
 801713a:	f003 0301 	and.w	r3, r3, #1
 801713e:	2b00      	cmp	r3, #0
 8017140:	d027      	beq.n	8017192 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017142:	f107 0012 	add.w	r0, r7, #18
 8017146:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017148:	8bf9      	ldrh	r1, [r7, #30]
 801714a:	2301      	movs	r3, #1
 801714c:	9302      	str	r3, [sp, #8]
 801714e:	797b      	ldrb	r3, [r7, #5]
 8017150:	9301      	str	r3, [sp, #4]
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	9300      	str	r3, [sp, #0]
 8017156:	4603      	mov	r3, r0
 8017158:	2000      	movs	r0, #0
 801715a:	f7ff fe0f 	bl	8016d7c <tcp_pbuf_prealloc>
 801715e:	6578      	str	r0, [r7, #84]	; 0x54
 8017160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017162:	2b00      	cmp	r3, #0
 8017164:	f000 8225 	beq.w	80175b2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801716a:	6858      	ldr	r0, [r3, #4]
 801716c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017170:	68ba      	ldr	r2, [r7, #8]
 8017172:	4413      	add	r3, r2
 8017174:	8bfa      	ldrh	r2, [r7, #30]
 8017176:	4619      	mov	r1, r3
 8017178:	f004 ff05 	bl	801bf86 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801717c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801717e:	f7fb f9e3 	bl	8012548 <pbuf_clen>
 8017182:	4603      	mov	r3, r0
 8017184:	461a      	mov	r2, r3
 8017186:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801718a:	4413      	add	r3, r2
 801718c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017190:	e041      	b.n	8017216 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017194:	685b      	ldr	r3, [r3, #4]
 8017196:	637b      	str	r3, [r7, #52]	; 0x34
 8017198:	e002      	b.n	80171a0 <tcp_write+0x23c>
 801719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	637b      	str	r3, [r7, #52]	; 0x34
 80171a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d1f8      	bne.n	801719a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80171a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171aa:	7b1b      	ldrb	r3, [r3, #12]
 80171ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d115      	bne.n	80171e0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80171b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171b6:	685b      	ldr	r3, [r3, #4]
 80171b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80171ba:	8952      	ldrh	r2, [r2, #10]
 80171bc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80171be:	68ba      	ldr	r2, [r7, #8]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d10d      	bne.n	80171e0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80171c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d006      	beq.n	80171da <tcp_write+0x276>
 80171cc:	4b1c      	ldr	r3, [pc, #112]	; (8017240 <tcp_write+0x2dc>)
 80171ce:	f240 2231 	movw	r2, #561	; 0x231
 80171d2:	4922      	ldr	r1, [pc, #136]	; (801725c <tcp_write+0x2f8>)
 80171d4:	481c      	ldr	r0, [pc, #112]	; (8017248 <tcp_write+0x2e4>)
 80171d6:	f004 fd65 	bl	801bca4 <iprintf>
          extendlen = seglen;
 80171da:	8bfb      	ldrh	r3, [r7, #30]
 80171dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80171de:	e01a      	b.n	8017216 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80171e0:	8bfb      	ldrh	r3, [r7, #30]
 80171e2:	2201      	movs	r2, #1
 80171e4:	4619      	mov	r1, r3
 80171e6:	2000      	movs	r0, #0
 80171e8:	f7fa fe42 	bl	8011e70 <pbuf_alloc>
 80171ec:	6578      	str	r0, [r7, #84]	; 0x54
 80171ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	f000 81e0 	beq.w	80175b6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80171f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80171fa:	68ba      	ldr	r2, [r7, #8]
 80171fc:	441a      	add	r2, r3
 80171fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017200:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017202:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017204:	f7fb f9a0 	bl	8012548 <pbuf_clen>
 8017208:	4603      	mov	r3, r0
 801720a:	461a      	mov	r2, r3
 801720c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017210:	4413      	add	r3, r2
 8017212:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017216:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801721a:	8bfb      	ldrh	r3, [r7, #30]
 801721c:	4413      	add	r3, r2
 801721e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017222:	e0dc      	b.n	80173de <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801722a:	2b00      	cmp	r3, #0
 801722c:	f000 80d7 	beq.w	80173de <tcp_write+0x47a>
 8017230:	4b03      	ldr	r3, [pc, #12]	; (8017240 <tcp_write+0x2dc>)
 8017232:	f240 224a 	movw	r2, #586	; 0x24a
 8017236:	490a      	ldr	r1, [pc, #40]	; (8017260 <tcp_write+0x2fc>)
 8017238:	4803      	ldr	r0, [pc, #12]	; (8017248 <tcp_write+0x2e4>)
 801723a:	f004 fd33 	bl	801bca4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801723e:	e0ce      	b.n	80173de <tcp_write+0x47a>
 8017240:	0801e8c8 	.word	0x0801e8c8
 8017244:	0801ea68 	.word	0x0801ea68
 8017248:	0801e91c 	.word	0x0801e91c
 801724c:	0801ea80 	.word	0x0801ea80
 8017250:	0801eab4 	.word	0x0801eab4
 8017254:	0801eacc 	.word	0x0801eacc
 8017258:	0801eaec 	.word	0x0801eaec
 801725c:	0801eb0c 	.word	0x0801eb0c
 8017260:	0801eb38 	.word	0x0801eb38
    struct pbuf *p;
    u16_t left = len - pos;
 8017264:	88fa      	ldrh	r2, [r7, #6]
 8017266:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801726a:	1ad3      	subs	r3, r2, r3
 801726c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801726e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017272:	b29b      	uxth	r3, r3
 8017274:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801727a:	8b7a      	ldrh	r2, [r7, #26]
 801727c:	8bbb      	ldrh	r3, [r7, #28]
 801727e:	4293      	cmp	r3, r2
 8017280:	bf28      	it	cs
 8017282:	4613      	movcs	r3, r2
 8017284:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017286:	797b      	ldrb	r3, [r7, #5]
 8017288:	f003 0301 	and.w	r3, r3, #1
 801728c:	2b00      	cmp	r3, #0
 801728e:	d036      	beq.n	80172fe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017290:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017294:	b29a      	uxth	r2, r3
 8017296:	8b3b      	ldrh	r3, [r7, #24]
 8017298:	4413      	add	r3, r2
 801729a:	b299      	uxth	r1, r3
 801729c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801729e:	2b00      	cmp	r3, #0
 80172a0:	bf0c      	ite	eq
 80172a2:	2301      	moveq	r3, #1
 80172a4:	2300      	movne	r3, #0
 80172a6:	b2db      	uxtb	r3, r3
 80172a8:	f107 0012 	add.w	r0, r7, #18
 80172ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80172ae:	9302      	str	r3, [sp, #8]
 80172b0:	797b      	ldrb	r3, [r7, #5]
 80172b2:	9301      	str	r3, [sp, #4]
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	9300      	str	r3, [sp, #0]
 80172b8:	4603      	mov	r3, r0
 80172ba:	2036      	movs	r0, #54	; 0x36
 80172bc:	f7ff fd5e 	bl	8016d7c <tcp_pbuf_prealloc>
 80172c0:	6338      	str	r0, [r7, #48]	; 0x30
 80172c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	f000 8178 	beq.w	80175ba <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80172ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172cc:	895b      	ldrh	r3, [r3, #10]
 80172ce:	8b3a      	ldrh	r2, [r7, #24]
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d906      	bls.n	80172e2 <tcp_write+0x37e>
 80172d4:	4b8c      	ldr	r3, [pc, #560]	; (8017508 <tcp_write+0x5a4>)
 80172d6:	f240 2266 	movw	r2, #614	; 0x266
 80172da:	498c      	ldr	r1, [pc, #560]	; (801750c <tcp_write+0x5a8>)
 80172dc:	488c      	ldr	r0, [pc, #560]	; (8017510 <tcp_write+0x5ac>)
 80172de:	f004 fce1 	bl	801bca4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80172e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172e4:	685a      	ldr	r2, [r3, #4]
 80172e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80172ea:	18d0      	adds	r0, r2, r3
 80172ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80172f0:	68ba      	ldr	r2, [r7, #8]
 80172f2:	4413      	add	r3, r2
 80172f4:	8b3a      	ldrh	r2, [r7, #24]
 80172f6:	4619      	mov	r1, r3
 80172f8:	f004 fe45 	bl	801bf86 <memcpy>
 80172fc:	e02f      	b.n	801735e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80172fe:	8a7b      	ldrh	r3, [r7, #18]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d006      	beq.n	8017312 <tcp_write+0x3ae>
 8017304:	4b80      	ldr	r3, [pc, #512]	; (8017508 <tcp_write+0x5a4>)
 8017306:	f240 2271 	movw	r2, #625	; 0x271
 801730a:	4982      	ldr	r1, [pc, #520]	; (8017514 <tcp_write+0x5b0>)
 801730c:	4880      	ldr	r0, [pc, #512]	; (8017510 <tcp_write+0x5ac>)
 801730e:	f004 fcc9 	bl	801bca4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017312:	8b3b      	ldrh	r3, [r7, #24]
 8017314:	2201      	movs	r2, #1
 8017316:	4619      	mov	r1, r3
 8017318:	2036      	movs	r0, #54	; 0x36
 801731a:	f7fa fda9 	bl	8011e70 <pbuf_alloc>
 801731e:	6178      	str	r0, [r7, #20]
 8017320:	697b      	ldr	r3, [r7, #20]
 8017322:	2b00      	cmp	r3, #0
 8017324:	f000 814b 	beq.w	80175be <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801732c:	68ba      	ldr	r2, [r7, #8]
 801732e:	441a      	add	r2, r3
 8017330:	697b      	ldr	r3, [r7, #20]
 8017332:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017334:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017338:	b29b      	uxth	r3, r3
 801733a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801733e:	4619      	mov	r1, r3
 8017340:	2036      	movs	r0, #54	; 0x36
 8017342:	f7fa fd95 	bl	8011e70 <pbuf_alloc>
 8017346:	6338      	str	r0, [r7, #48]	; 0x30
 8017348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801734a:	2b00      	cmp	r3, #0
 801734c:	d103      	bne.n	8017356 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801734e:	6978      	ldr	r0, [r7, #20]
 8017350:	f7fb f872 	bl	8012438 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017354:	e136      	b.n	80175c4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017356:	6979      	ldr	r1, [r7, #20]
 8017358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801735a:	f7fb f92f 	bl	80125bc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801735e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017360:	f7fb f8f2 	bl	8012548 <pbuf_clen>
 8017364:	4603      	mov	r3, r0
 8017366:	461a      	mov	r2, r3
 8017368:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801736c:	4413      	add	r3, r2
 801736e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017376:	2b10      	cmp	r3, #16
 8017378:	d903      	bls.n	8017382 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801737a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801737c:	f7fb f85c 	bl	8012438 <pbuf_free>
      goto memerr;
 8017380:	e120      	b.n	80175c4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017386:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801738a:	441a      	add	r2, r3
 801738c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017390:	9300      	str	r3, [sp, #0]
 8017392:	4613      	mov	r3, r2
 8017394:	2200      	movs	r2, #0
 8017396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017398:	68f8      	ldr	r0, [r7, #12]
 801739a:	f7ff fc51 	bl	8016c40 <tcp_create_segment>
 801739e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80173a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f000 810d 	beq.w	80175c2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80173a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d102      	bne.n	80173b4 <tcp_write+0x450>
      queue = seg;
 80173ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173b0:	647b      	str	r3, [r7, #68]	; 0x44
 80173b2:	e00c      	b.n	80173ce <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80173b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d106      	bne.n	80173c8 <tcp_write+0x464>
 80173ba:	4b53      	ldr	r3, [pc, #332]	; (8017508 <tcp_write+0x5a4>)
 80173bc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80173c0:	4955      	ldr	r1, [pc, #340]	; (8017518 <tcp_write+0x5b4>)
 80173c2:	4853      	ldr	r0, [pc, #332]	; (8017510 <tcp_write+0x5ac>)
 80173c4:	f004 fc6e 	bl	801bca4 <iprintf>
      prev_seg->next = seg;
 80173c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80173cc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80173ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173d0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80173d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80173d6:	8b3b      	ldrh	r3, [r7, #24]
 80173d8:	4413      	add	r3, r2
 80173da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80173de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80173e2:	88fb      	ldrh	r3, [r7, #6]
 80173e4:	429a      	cmp	r2, r3
 80173e6:	f4ff af3d 	bcc.w	8017264 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80173ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d02c      	beq.n	801744a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80173f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173f2:	685b      	ldr	r3, [r3, #4]
 80173f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173f6:	e01e      	b.n	8017436 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80173f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173fa:	891a      	ldrh	r2, [r3, #8]
 80173fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80173fe:	4413      	add	r3, r2
 8017400:	b29a      	uxth	r2, r3
 8017402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017404:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d110      	bne.n	8017430 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017410:	685b      	ldr	r3, [r3, #4]
 8017412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017414:	8952      	ldrh	r2, [r2, #10]
 8017416:	4413      	add	r3, r2
 8017418:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801741a:	68b9      	ldr	r1, [r7, #8]
 801741c:	4618      	mov	r0, r3
 801741e:	f004 fdb2 	bl	801bf86 <memcpy>
        p->len += oversize_used;
 8017422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017424:	895a      	ldrh	r2, [r3, #10]
 8017426:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017428:	4413      	add	r3, r2
 801742a:	b29a      	uxth	r2, r3
 801742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017438:	2b00      	cmp	r3, #0
 801743a:	d1dd      	bne.n	80173f8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801743c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801743e:	891a      	ldrh	r2, [r3, #8]
 8017440:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017442:	4413      	add	r3, r2
 8017444:	b29a      	uxth	r2, r3
 8017446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017448:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801744a:	8a7a      	ldrh	r2, [r7, #18]
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017454:	2b00      	cmp	r3, #0
 8017456:	d018      	beq.n	801748a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801745a:	2b00      	cmp	r3, #0
 801745c:	d106      	bne.n	801746c <tcp_write+0x508>
 801745e:	4b2a      	ldr	r3, [pc, #168]	; (8017508 <tcp_write+0x5a4>)
 8017460:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017464:	492d      	ldr	r1, [pc, #180]	; (801751c <tcp_write+0x5b8>)
 8017466:	482a      	ldr	r0, [pc, #168]	; (8017510 <tcp_write+0x5ac>)
 8017468:	f004 fc1c 	bl	801bca4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801746c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017472:	4618      	mov	r0, r3
 8017474:	f7fb f8a2 	bl	80125bc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801747a:	891a      	ldrh	r2, [r3, #8]
 801747c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801747e:	891b      	ldrh	r3, [r3, #8]
 8017480:	4413      	add	r3, r2
 8017482:	b29a      	uxth	r2, r3
 8017484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017486:	811a      	strh	r2, [r3, #8]
 8017488:	e037      	b.n	80174fa <tcp_write+0x596>
  } else if (extendlen > 0) {
 801748a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801748c:	2b00      	cmp	r3, #0
 801748e:	d034      	beq.n	80174fa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017492:	2b00      	cmp	r3, #0
 8017494:	d003      	beq.n	801749e <tcp_write+0x53a>
 8017496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d106      	bne.n	80174ac <tcp_write+0x548>
 801749e:	4b1a      	ldr	r3, [pc, #104]	; (8017508 <tcp_write+0x5a4>)
 80174a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80174a4:	491e      	ldr	r1, [pc, #120]	; (8017520 <tcp_write+0x5bc>)
 80174a6:	481a      	ldr	r0, [pc, #104]	; (8017510 <tcp_write+0x5ac>)
 80174a8:	f004 fbfc 	bl	801bca4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80174ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174ae:	685b      	ldr	r3, [r3, #4]
 80174b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80174b2:	e009      	b.n	80174c8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80174b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b6:	891a      	ldrh	r2, [r3, #8]
 80174b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174ba:	4413      	add	r3, r2
 80174bc:	b29a      	uxth	r2, r3
 80174be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80174c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80174c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d1f1      	bne.n	80174b4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80174d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d2:	891a      	ldrh	r2, [r3, #8]
 80174d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174d6:	4413      	add	r3, r2
 80174d8:	b29a      	uxth	r2, r3
 80174da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80174de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e0:	895a      	ldrh	r2, [r3, #10]
 80174e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174e4:	4413      	add	r3, r2
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80174ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174ee:	891a      	ldrh	r2, [r3, #8]
 80174f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174f2:	4413      	add	r3, r2
 80174f4:	b29a      	uxth	r2, r3
 80174f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80174fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d111      	bne.n	8017524 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017504:	66da      	str	r2, [r3, #108]	; 0x6c
 8017506:	e010      	b.n	801752a <tcp_write+0x5c6>
 8017508:	0801e8c8 	.word	0x0801e8c8
 801750c:	0801eb68 	.word	0x0801eb68
 8017510:	0801e91c 	.word	0x0801e91c
 8017514:	0801eba8 	.word	0x0801eba8
 8017518:	0801ebb8 	.word	0x0801ebb8
 801751c:	0801ebcc 	.word	0x0801ebcc
 8017520:	0801ec04 	.word	0x0801ec04
  } else {
    last_unsent->next = queue;
 8017524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017528:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801752e:	88fb      	ldrh	r3, [r7, #6]
 8017530:	441a      	add	r2, r3
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801753c:	88fb      	ldrh	r3, [r7, #6]
 801753e:	1ad3      	subs	r3, r2, r3
 8017540:	b29a      	uxth	r2, r3
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801754e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017558:	2b00      	cmp	r3, #0
 801755a:	d00e      	beq.n	801757a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017560:	2b00      	cmp	r3, #0
 8017562:	d10a      	bne.n	801757a <tcp_write+0x616>
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017568:	2b00      	cmp	r3, #0
 801756a:	d106      	bne.n	801757a <tcp_write+0x616>
 801756c:	4b2c      	ldr	r3, [pc, #176]	; (8017620 <tcp_write+0x6bc>)
 801756e:	f240 3212 	movw	r2, #786	; 0x312
 8017572:	492c      	ldr	r1, [pc, #176]	; (8017624 <tcp_write+0x6c0>)
 8017574:	482c      	ldr	r0, [pc, #176]	; (8017628 <tcp_write+0x6c4>)
 8017576:	f004 fb95 	bl	801bca4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801757c:	2b00      	cmp	r3, #0
 801757e:	d016      	beq.n	80175ae <tcp_write+0x64a>
 8017580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017582:	68db      	ldr	r3, [r3, #12]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d012      	beq.n	80175ae <tcp_write+0x64a>
 8017588:	797b      	ldrb	r3, [r7, #5]
 801758a:	f003 0302 	and.w	r3, r3, #2
 801758e:	2b00      	cmp	r3, #0
 8017590:	d10d      	bne.n	80175ae <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017594:	68db      	ldr	r3, [r3, #12]
 8017596:	899b      	ldrh	r3, [r3, #12]
 8017598:	b29c      	uxth	r4, r3
 801759a:	2008      	movs	r0, #8
 801759c:	f7f9 fb84 	bl	8010ca8 <lwip_htons>
 80175a0:	4603      	mov	r3, r0
 80175a2:	461a      	mov	r2, r3
 80175a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175a6:	68db      	ldr	r3, [r3, #12]
 80175a8:	4322      	orrs	r2, r4
 80175aa:	b292      	uxth	r2, r2
 80175ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80175ae:	2300      	movs	r3, #0
 80175b0:	e031      	b.n	8017616 <tcp_write+0x6b2>
          goto memerr;
 80175b2:	bf00      	nop
 80175b4:	e006      	b.n	80175c4 <tcp_write+0x660>
            goto memerr;
 80175b6:	bf00      	nop
 80175b8:	e004      	b.n	80175c4 <tcp_write+0x660>
        goto memerr;
 80175ba:	bf00      	nop
 80175bc:	e002      	b.n	80175c4 <tcp_write+0x660>
        goto memerr;
 80175be:	bf00      	nop
 80175c0:	e000      	b.n	80175c4 <tcp_write+0x660>
      goto memerr;
 80175c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	8b5b      	ldrh	r3, [r3, #26]
 80175c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175cc:	b29a      	uxth	r2, r3
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80175d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d002      	beq.n	80175de <tcp_write+0x67a>
    pbuf_free(concat_p);
 80175d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80175da:	f7fa ff2d 	bl	8012438 <pbuf_free>
  }
  if (queue != NULL) {
 80175de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d002      	beq.n	80175ea <tcp_write+0x686>
    tcp_segs_free(queue);
 80175e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80175e6:	f7fc fb53 	bl	8013c90 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d00e      	beq.n	8017612 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d10a      	bne.n	8017612 <tcp_write+0x6ae>
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017600:	2b00      	cmp	r3, #0
 8017602:	d106      	bne.n	8017612 <tcp_write+0x6ae>
 8017604:	4b06      	ldr	r3, [pc, #24]	; (8017620 <tcp_write+0x6bc>)
 8017606:	f240 3227 	movw	r2, #807	; 0x327
 801760a:	4906      	ldr	r1, [pc, #24]	; (8017624 <tcp_write+0x6c0>)
 801760c:	4806      	ldr	r0, [pc, #24]	; (8017628 <tcp_write+0x6c4>)
 801760e:	f004 fb49 	bl	801bca4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017616:	4618      	mov	r0, r3
 8017618:	375c      	adds	r7, #92	; 0x5c
 801761a:	46bd      	mov	sp, r7
 801761c:	bd90      	pop	{r4, r7, pc}
 801761e:	bf00      	nop
 8017620:	0801e8c8 	.word	0x0801e8c8
 8017624:	0801ec3c 	.word	0x0801ec3c
 8017628:	0801e91c 	.word	0x0801e91c

0801762c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801762c:	b590      	push	{r4, r7, lr}
 801762e:	b08b      	sub	sp, #44	; 0x2c
 8017630:	af02      	add	r7, sp, #8
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	460b      	mov	r3, r1
 8017636:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017638:	2300      	movs	r3, #0
 801763a:	61fb      	str	r3, [r7, #28]
 801763c:	2300      	movs	r3, #0
 801763e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017640:	2300      	movs	r3, #0
 8017642:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d106      	bne.n	8017658 <tcp_split_unsent_seg+0x2c>
 801764a:	4b95      	ldr	r3, [pc, #596]	; (80178a0 <tcp_split_unsent_seg+0x274>)
 801764c:	f240 324b 	movw	r2, #843	; 0x34b
 8017650:	4994      	ldr	r1, [pc, #592]	; (80178a4 <tcp_split_unsent_seg+0x278>)
 8017652:	4895      	ldr	r0, [pc, #596]	; (80178a8 <tcp_split_unsent_seg+0x27c>)
 8017654:	f004 fb26 	bl	801bca4 <iprintf>

  useg = pcb->unsent;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801765c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801765e:	697b      	ldr	r3, [r7, #20]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d102      	bne.n	801766a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017664:	f04f 33ff 	mov.w	r3, #4294967295
 8017668:	e116      	b.n	8017898 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801766a:	887b      	ldrh	r3, [r7, #2]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d109      	bne.n	8017684 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017670:	4b8b      	ldr	r3, [pc, #556]	; (80178a0 <tcp_split_unsent_seg+0x274>)
 8017672:	f240 3253 	movw	r2, #851	; 0x353
 8017676:	498d      	ldr	r1, [pc, #564]	; (80178ac <tcp_split_unsent_seg+0x280>)
 8017678:	488b      	ldr	r0, [pc, #556]	; (80178a8 <tcp_split_unsent_seg+0x27c>)
 801767a:	f004 fb13 	bl	801bca4 <iprintf>
    return ERR_VAL;
 801767e:	f06f 0305 	mvn.w	r3, #5
 8017682:	e109      	b.n	8017898 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017684:	697b      	ldr	r3, [r7, #20]
 8017686:	891b      	ldrh	r3, [r3, #8]
 8017688:	887a      	ldrh	r2, [r7, #2]
 801768a:	429a      	cmp	r2, r3
 801768c:	d301      	bcc.n	8017692 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801768e:	2300      	movs	r3, #0
 8017690:	e102      	b.n	8017898 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017696:	887a      	ldrh	r2, [r7, #2]
 8017698:	429a      	cmp	r2, r3
 801769a:	d906      	bls.n	80176aa <tcp_split_unsent_seg+0x7e>
 801769c:	4b80      	ldr	r3, [pc, #512]	; (80178a0 <tcp_split_unsent_seg+0x274>)
 801769e:	f240 325b 	movw	r2, #859	; 0x35b
 80176a2:	4983      	ldr	r1, [pc, #524]	; (80178b0 <tcp_split_unsent_seg+0x284>)
 80176a4:	4880      	ldr	r0, [pc, #512]	; (80178a8 <tcp_split_unsent_seg+0x27c>)
 80176a6:	f004 fafd 	bl	801bca4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	891b      	ldrh	r3, [r3, #8]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d106      	bne.n	80176c0 <tcp_split_unsent_seg+0x94>
 80176b2:	4b7b      	ldr	r3, [pc, #492]	; (80178a0 <tcp_split_unsent_seg+0x274>)
 80176b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80176b8:	497e      	ldr	r1, [pc, #504]	; (80178b4 <tcp_split_unsent_seg+0x288>)
 80176ba:	487b      	ldr	r0, [pc, #492]	; (80178a8 <tcp_split_unsent_seg+0x27c>)
 80176bc:	f004 faf2 	bl	801bca4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	7a9b      	ldrb	r3, [r3, #10]
 80176c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80176c6:	7bfb      	ldrb	r3, [r7, #15]
 80176c8:	009b      	lsls	r3, r3, #2
 80176ca:	b2db      	uxtb	r3, r3
 80176cc:	f003 0304 	and.w	r3, r3, #4
 80176d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80176d2:	697b      	ldr	r3, [r7, #20]
 80176d4:	891a      	ldrh	r2, [r3, #8]
 80176d6:	887b      	ldrh	r3, [r7, #2]
 80176d8:	1ad3      	subs	r3, r2, r3
 80176da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80176dc:	7bbb      	ldrb	r3, [r7, #14]
 80176de:	b29a      	uxth	r2, r3
 80176e0:	89bb      	ldrh	r3, [r7, #12]
 80176e2:	4413      	add	r3, r2
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80176ea:	4619      	mov	r1, r3
 80176ec:	2036      	movs	r0, #54	; 0x36
 80176ee:	f7fa fbbf 	bl	8011e70 <pbuf_alloc>
 80176f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80176f4:	693b      	ldr	r3, [r7, #16]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	f000 80b7 	beq.w	801786a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80176fc:	697b      	ldr	r3, [r7, #20]
 80176fe:	685b      	ldr	r3, [r3, #4]
 8017700:	891a      	ldrh	r2, [r3, #8]
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	891b      	ldrh	r3, [r3, #8]
 8017706:	1ad3      	subs	r3, r2, r3
 8017708:	b29a      	uxth	r2, r3
 801770a:	887b      	ldrh	r3, [r7, #2]
 801770c:	4413      	add	r3, r2
 801770e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	6858      	ldr	r0, [r3, #4]
 8017714:	693b      	ldr	r3, [r7, #16]
 8017716:	685a      	ldr	r2, [r3, #4]
 8017718:	7bbb      	ldrb	r3, [r7, #14]
 801771a:	18d1      	adds	r1, r2, r3
 801771c:	897b      	ldrh	r3, [r7, #10]
 801771e:	89ba      	ldrh	r2, [r7, #12]
 8017720:	f7fb f884 	bl	801282c <pbuf_copy_partial>
 8017724:	4603      	mov	r3, r0
 8017726:	461a      	mov	r2, r3
 8017728:	89bb      	ldrh	r3, [r7, #12]
 801772a:	4293      	cmp	r3, r2
 801772c:	f040 809f 	bne.w	801786e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017730:	697b      	ldr	r3, [r7, #20]
 8017732:	68db      	ldr	r3, [r3, #12]
 8017734:	899b      	ldrh	r3, [r3, #12]
 8017736:	b29b      	uxth	r3, r3
 8017738:	4618      	mov	r0, r3
 801773a:	f7f9 fab5 	bl	8010ca8 <lwip_htons>
 801773e:	4603      	mov	r3, r0
 8017740:	b2db      	uxtb	r3, r3
 8017742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017746:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017748:	2300      	movs	r3, #0
 801774a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801774c:	7efb      	ldrb	r3, [r7, #27]
 801774e:	f003 0308 	and.w	r3, r3, #8
 8017752:	2b00      	cmp	r3, #0
 8017754:	d007      	beq.n	8017766 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017756:	7efb      	ldrb	r3, [r7, #27]
 8017758:	f023 0308 	bic.w	r3, r3, #8
 801775c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801775e:	7ebb      	ldrb	r3, [r7, #26]
 8017760:	f043 0308 	orr.w	r3, r3, #8
 8017764:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017766:	7efb      	ldrb	r3, [r7, #27]
 8017768:	f003 0301 	and.w	r3, r3, #1
 801776c:	2b00      	cmp	r3, #0
 801776e:	d007      	beq.n	8017780 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017770:	7efb      	ldrb	r3, [r7, #27]
 8017772:	f023 0301 	bic.w	r3, r3, #1
 8017776:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017778:	7ebb      	ldrb	r3, [r7, #26]
 801777a:	f043 0301 	orr.w	r3, r3, #1
 801777e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	68db      	ldr	r3, [r3, #12]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	4618      	mov	r0, r3
 8017788:	f7f9 faa3 	bl	8010cd2 <lwip_htonl>
 801778c:	4602      	mov	r2, r0
 801778e:	887b      	ldrh	r3, [r7, #2]
 8017790:	18d1      	adds	r1, r2, r3
 8017792:	7eba      	ldrb	r2, [r7, #26]
 8017794:	7bfb      	ldrb	r3, [r7, #15]
 8017796:	9300      	str	r3, [sp, #0]
 8017798:	460b      	mov	r3, r1
 801779a:	6939      	ldr	r1, [r7, #16]
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f7ff fa4f 	bl	8016c40 <tcp_create_segment>
 80177a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80177a4:	69fb      	ldr	r3, [r7, #28]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d063      	beq.n	8017872 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80177aa:	697b      	ldr	r3, [r7, #20]
 80177ac:	685b      	ldr	r3, [r3, #4]
 80177ae:	4618      	mov	r0, r3
 80177b0:	f7fa feca 	bl	8012548 <pbuf_clen>
 80177b4:	4603      	mov	r3, r0
 80177b6:	461a      	mov	r2, r3
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80177be:	1a9b      	subs	r3, r3, r2
 80177c0:	b29a      	uxth	r2, r3
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80177c8:	697b      	ldr	r3, [r7, #20]
 80177ca:	6858      	ldr	r0, [r3, #4]
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	685b      	ldr	r3, [r3, #4]
 80177d0:	891a      	ldrh	r2, [r3, #8]
 80177d2:	89bb      	ldrh	r3, [r7, #12]
 80177d4:	1ad3      	subs	r3, r2, r3
 80177d6:	b29b      	uxth	r3, r3
 80177d8:	4619      	mov	r1, r3
 80177da:	f7fa fca7 	bl	801212c <pbuf_realloc>
  useg->len -= remainder;
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	891a      	ldrh	r2, [r3, #8]
 80177e2:	89bb      	ldrh	r3, [r7, #12]
 80177e4:	1ad3      	subs	r3, r2, r3
 80177e6:	b29a      	uxth	r2, r3
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	899b      	ldrh	r3, [r3, #12]
 80177f2:	b29c      	uxth	r4, r3
 80177f4:	7efb      	ldrb	r3, [r7, #27]
 80177f6:	b29b      	uxth	r3, r3
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7f9 fa55 	bl	8010ca8 <lwip_htons>
 80177fe:	4603      	mov	r3, r0
 8017800:	461a      	mov	r2, r3
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	68db      	ldr	r3, [r3, #12]
 8017806:	4322      	orrs	r2, r4
 8017808:	b292      	uxth	r2, r2
 801780a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	685b      	ldr	r3, [r3, #4]
 8017810:	4618      	mov	r0, r3
 8017812:	f7fa fe99 	bl	8012548 <pbuf_clen>
 8017816:	4603      	mov	r3, r0
 8017818:	461a      	mov	r2, r3
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017820:	4413      	add	r3, r2
 8017822:	b29a      	uxth	r2, r3
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801782a:	69fb      	ldr	r3, [r7, #28]
 801782c:	685b      	ldr	r3, [r3, #4]
 801782e:	4618      	mov	r0, r3
 8017830:	f7fa fe8a 	bl	8012548 <pbuf_clen>
 8017834:	4603      	mov	r3, r0
 8017836:	461a      	mov	r2, r3
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801783e:	4413      	add	r3, r2
 8017840:	b29a      	uxth	r2, r3
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017848:	697b      	ldr	r3, [r7, #20]
 801784a:	681a      	ldr	r2, [r3, #0]
 801784c:	69fb      	ldr	r3, [r7, #28]
 801784e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	69fa      	ldr	r2, [r7, #28]
 8017854:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017856:	69fb      	ldr	r3, [r7, #28]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d103      	bne.n	8017866 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2200      	movs	r2, #0
 8017862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017866:	2300      	movs	r3, #0
 8017868:	e016      	b.n	8017898 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801786a:	bf00      	nop
 801786c:	e002      	b.n	8017874 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801786e:	bf00      	nop
 8017870:	e000      	b.n	8017874 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017872:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017874:	69fb      	ldr	r3, [r7, #28]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d006      	beq.n	8017888 <tcp_split_unsent_seg+0x25c>
 801787a:	4b09      	ldr	r3, [pc, #36]	; (80178a0 <tcp_split_unsent_seg+0x274>)
 801787c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017880:	490d      	ldr	r1, [pc, #52]	; (80178b8 <tcp_split_unsent_seg+0x28c>)
 8017882:	4809      	ldr	r0, [pc, #36]	; (80178a8 <tcp_split_unsent_seg+0x27c>)
 8017884:	f004 fa0e 	bl	801bca4 <iprintf>
  if (p != NULL) {
 8017888:	693b      	ldr	r3, [r7, #16]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d002      	beq.n	8017894 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801788e:	6938      	ldr	r0, [r7, #16]
 8017890:	f7fa fdd2 	bl	8012438 <pbuf_free>
  }

  return ERR_MEM;
 8017894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017898:	4618      	mov	r0, r3
 801789a:	3724      	adds	r7, #36	; 0x24
 801789c:	46bd      	mov	sp, r7
 801789e:	bd90      	pop	{r4, r7, pc}
 80178a0:	0801e8c8 	.word	0x0801e8c8
 80178a4:	0801ec5c 	.word	0x0801ec5c
 80178a8:	0801e91c 	.word	0x0801e91c
 80178ac:	0801ec80 	.word	0x0801ec80
 80178b0:	0801eca4 	.word	0x0801eca4
 80178b4:	0801ecb4 	.word	0x0801ecb4
 80178b8:	0801ecc4 	.word	0x0801ecc4

080178bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80178bc:	b590      	push	{r4, r7, lr}
 80178be:	b085      	sub	sp, #20
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d106      	bne.n	80178d8 <tcp_send_fin+0x1c>
 80178ca:	4b21      	ldr	r3, [pc, #132]	; (8017950 <tcp_send_fin+0x94>)
 80178cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80178d0:	4920      	ldr	r1, [pc, #128]	; (8017954 <tcp_send_fin+0x98>)
 80178d2:	4821      	ldr	r0, [pc, #132]	; (8017958 <tcp_send_fin+0x9c>)
 80178d4:	f004 f9e6 	bl	801bca4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d02e      	beq.n	801793e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178e4:	60fb      	str	r3, [r7, #12]
 80178e6:	e002      	b.n	80178ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d1f8      	bne.n	80178e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	68db      	ldr	r3, [r3, #12]
 80178fa:	899b      	ldrh	r3, [r3, #12]
 80178fc:	b29b      	uxth	r3, r3
 80178fe:	4618      	mov	r0, r3
 8017900:	f7f9 f9d2 	bl	8010ca8 <lwip_htons>
 8017904:	4603      	mov	r3, r0
 8017906:	b2db      	uxtb	r3, r3
 8017908:	f003 0307 	and.w	r3, r3, #7
 801790c:	2b00      	cmp	r3, #0
 801790e:	d116      	bne.n	801793e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	68db      	ldr	r3, [r3, #12]
 8017914:	899b      	ldrh	r3, [r3, #12]
 8017916:	b29c      	uxth	r4, r3
 8017918:	2001      	movs	r0, #1
 801791a:	f7f9 f9c5 	bl	8010ca8 <lwip_htons>
 801791e:	4603      	mov	r3, r0
 8017920:	461a      	mov	r2, r3
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	68db      	ldr	r3, [r3, #12]
 8017926:	4322      	orrs	r2, r4
 8017928:	b292      	uxth	r2, r2
 801792a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	8b5b      	ldrh	r3, [r3, #26]
 8017930:	f043 0320 	orr.w	r3, r3, #32
 8017934:	b29a      	uxth	r2, r3
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801793a:	2300      	movs	r3, #0
 801793c:	e004      	b.n	8017948 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801793e:	2101      	movs	r1, #1
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f000 f80b 	bl	801795c <tcp_enqueue_flags>
 8017946:	4603      	mov	r3, r0
}
 8017948:	4618      	mov	r0, r3
 801794a:	3714      	adds	r7, #20
 801794c:	46bd      	mov	sp, r7
 801794e:	bd90      	pop	{r4, r7, pc}
 8017950:	0801e8c8 	.word	0x0801e8c8
 8017954:	0801ecd0 	.word	0x0801ecd0
 8017958:	0801e91c 	.word	0x0801e91c

0801795c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b08a      	sub	sp, #40	; 0x28
 8017960:	af02      	add	r7, sp, #8
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	460b      	mov	r3, r1
 8017966:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017968:	2300      	movs	r3, #0
 801796a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801796c:	2300      	movs	r3, #0
 801796e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017970:	78fb      	ldrb	r3, [r7, #3]
 8017972:	f003 0303 	and.w	r3, r3, #3
 8017976:	2b00      	cmp	r3, #0
 8017978:	d106      	bne.n	8017988 <tcp_enqueue_flags+0x2c>
 801797a:	4b67      	ldr	r3, [pc, #412]	; (8017b18 <tcp_enqueue_flags+0x1bc>)
 801797c:	f240 4211 	movw	r2, #1041	; 0x411
 8017980:	4966      	ldr	r1, [pc, #408]	; (8017b1c <tcp_enqueue_flags+0x1c0>)
 8017982:	4867      	ldr	r0, [pc, #412]	; (8017b20 <tcp_enqueue_flags+0x1c4>)
 8017984:	f004 f98e 	bl	801bca4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d106      	bne.n	801799c <tcp_enqueue_flags+0x40>
 801798e:	4b62      	ldr	r3, [pc, #392]	; (8017b18 <tcp_enqueue_flags+0x1bc>)
 8017990:	f240 4213 	movw	r2, #1043	; 0x413
 8017994:	4963      	ldr	r1, [pc, #396]	; (8017b24 <tcp_enqueue_flags+0x1c8>)
 8017996:	4862      	ldr	r0, [pc, #392]	; (8017b20 <tcp_enqueue_flags+0x1c4>)
 8017998:	f004 f984 	bl	801bca4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801799c:	78fb      	ldrb	r3, [r7, #3]
 801799e:	f003 0302 	and.w	r3, r3, #2
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d001      	beq.n	80179aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80179a6:	2301      	movs	r3, #1
 80179a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80179aa:	7ffb      	ldrb	r3, [r7, #31]
 80179ac:	009b      	lsls	r3, r3, #2
 80179ae:	b2db      	uxtb	r3, r3
 80179b0:	f003 0304 	and.w	r3, r3, #4
 80179b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80179b6:	7dfb      	ldrb	r3, [r7, #23]
 80179b8:	b29b      	uxth	r3, r3
 80179ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80179be:	4619      	mov	r1, r3
 80179c0:	2036      	movs	r0, #54	; 0x36
 80179c2:	f7fa fa55 	bl	8011e70 <pbuf_alloc>
 80179c6:	6138      	str	r0, [r7, #16]
 80179c8:	693b      	ldr	r3, [r7, #16]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d109      	bne.n	80179e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	8b5b      	ldrh	r3, [r3, #26]
 80179d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179d6:	b29a      	uxth	r2, r3
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80179dc:	f04f 33ff 	mov.w	r3, #4294967295
 80179e0:	e095      	b.n	8017b0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80179e2:	693b      	ldr	r3, [r7, #16]
 80179e4:	895a      	ldrh	r2, [r3, #10]
 80179e6:	7dfb      	ldrb	r3, [r7, #23]
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d206      	bcs.n	80179fc <tcp_enqueue_flags+0xa0>
 80179ee:	4b4a      	ldr	r3, [pc, #296]	; (8017b18 <tcp_enqueue_flags+0x1bc>)
 80179f0:	f240 4239 	movw	r2, #1081	; 0x439
 80179f4:	494c      	ldr	r1, [pc, #304]	; (8017b28 <tcp_enqueue_flags+0x1cc>)
 80179f6:	484a      	ldr	r0, [pc, #296]	; (8017b20 <tcp_enqueue_flags+0x1c4>)
 80179f8:	f004 f954 	bl	801bca4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017a00:	78fa      	ldrb	r2, [r7, #3]
 8017a02:	7ffb      	ldrb	r3, [r7, #31]
 8017a04:	9300      	str	r3, [sp, #0]
 8017a06:	460b      	mov	r3, r1
 8017a08:	6939      	ldr	r1, [r7, #16]
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	f7ff f918 	bl	8016c40 <tcp_create_segment>
 8017a10:	60f8      	str	r0, [r7, #12]
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d109      	bne.n	8017a2c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	8b5b      	ldrh	r3, [r3, #26]
 8017a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a20:	b29a      	uxth	r2, r3
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017a26:	f04f 33ff 	mov.w	r3, #4294967295
 8017a2a:	e070      	b.n	8017b0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	68db      	ldr	r3, [r3, #12]
 8017a30:	f003 0303 	and.w	r3, r3, #3
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d006      	beq.n	8017a46 <tcp_enqueue_flags+0xea>
 8017a38:	4b37      	ldr	r3, [pc, #220]	; (8017b18 <tcp_enqueue_flags+0x1bc>)
 8017a3a:	f240 4242 	movw	r2, #1090	; 0x442
 8017a3e:	493b      	ldr	r1, [pc, #236]	; (8017b2c <tcp_enqueue_flags+0x1d0>)
 8017a40:	4837      	ldr	r0, [pc, #220]	; (8017b20 <tcp_enqueue_flags+0x1c4>)
 8017a42:	f004 f92f 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	891b      	ldrh	r3, [r3, #8]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d006      	beq.n	8017a5c <tcp_enqueue_flags+0x100>
 8017a4e:	4b32      	ldr	r3, [pc, #200]	; (8017b18 <tcp_enqueue_flags+0x1bc>)
 8017a50:	f240 4243 	movw	r2, #1091	; 0x443
 8017a54:	4936      	ldr	r1, [pc, #216]	; (8017b30 <tcp_enqueue_flags+0x1d4>)
 8017a56:	4832      	ldr	r0, [pc, #200]	; (8017b20 <tcp_enqueue_flags+0x1c4>)
 8017a58:	f004 f924 	bl	801bca4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d103      	bne.n	8017a6c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	68fa      	ldr	r2, [r7, #12]
 8017a68:	66da      	str	r2, [r3, #108]	; 0x6c
 8017a6a:	e00d      	b.n	8017a88 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a70:	61bb      	str	r3, [r7, #24]
 8017a72:	e002      	b.n	8017a7a <tcp_enqueue_flags+0x11e>
 8017a74:	69bb      	ldr	r3, [r7, #24]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	61bb      	str	r3, [r7, #24]
 8017a7a:	69bb      	ldr	r3, [r7, #24]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d1f8      	bne.n	8017a74 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017a82:	69bb      	ldr	r3, [r7, #24]
 8017a84:	68fa      	ldr	r2, [r7, #12]
 8017a86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017a90:	78fb      	ldrb	r3, [r7, #3]
 8017a92:	f003 0302 	and.w	r3, r3, #2
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d104      	bne.n	8017aa4 <tcp_enqueue_flags+0x148>
 8017a9a:	78fb      	ldrb	r3, [r7, #3]
 8017a9c:	f003 0301 	and.w	r3, r3, #1
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d004      	beq.n	8017aae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017aa8:	1c5a      	adds	r2, r3, #1
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017aae:	78fb      	ldrb	r3, [r7, #3]
 8017ab0:	f003 0301 	and.w	r3, r3, #1
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d006      	beq.n	8017ac6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	8b5b      	ldrh	r3, [r3, #26]
 8017abc:	f043 0320 	orr.w	r3, r3, #32
 8017ac0:	b29a      	uxth	r2, r3
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	685b      	ldr	r3, [r3, #4]
 8017aca:	4618      	mov	r0, r3
 8017acc:	f7fa fd3c 	bl	8012548 <pbuf_clen>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	461a      	mov	r2, r3
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ada:	4413      	add	r3, r2
 8017adc:	b29a      	uxth	r2, r3
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d00e      	beq.n	8017b0c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d10a      	bne.n	8017b0c <tcp_enqueue_flags+0x1b0>
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d106      	bne.n	8017b0c <tcp_enqueue_flags+0x1b0>
 8017afe:	4b06      	ldr	r3, [pc, #24]	; (8017b18 <tcp_enqueue_flags+0x1bc>)
 8017b00:	f240 4265 	movw	r2, #1125	; 0x465
 8017b04:	490b      	ldr	r1, [pc, #44]	; (8017b34 <tcp_enqueue_flags+0x1d8>)
 8017b06:	4806      	ldr	r0, [pc, #24]	; (8017b20 <tcp_enqueue_flags+0x1c4>)
 8017b08:	f004 f8cc 	bl	801bca4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017b0c:	2300      	movs	r3, #0
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3720      	adds	r7, #32
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd80      	pop	{r7, pc}
 8017b16:	bf00      	nop
 8017b18:	0801e8c8 	.word	0x0801e8c8
 8017b1c:	0801ecec 	.word	0x0801ecec
 8017b20:	0801e91c 	.word	0x0801e91c
 8017b24:	0801ed44 	.word	0x0801ed44
 8017b28:	0801ed64 	.word	0x0801ed64
 8017b2c:	0801eda0 	.word	0x0801eda0
 8017b30:	0801edb8 	.word	0x0801edb8
 8017b34:	0801ede4 	.word	0x0801ede4

08017b38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017b38:	b5b0      	push	{r4, r5, r7, lr}
 8017b3a:	b08a      	sub	sp, #40	; 0x28
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d106      	bne.n	8017b54 <tcp_output+0x1c>
 8017b46:	4b8a      	ldr	r3, [pc, #552]	; (8017d70 <tcp_output+0x238>)
 8017b48:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017b4c:	4989      	ldr	r1, [pc, #548]	; (8017d74 <tcp_output+0x23c>)
 8017b4e:	488a      	ldr	r0, [pc, #552]	; (8017d78 <tcp_output+0x240>)
 8017b50:	f004 f8a8 	bl	801bca4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	7d1b      	ldrb	r3, [r3, #20]
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d106      	bne.n	8017b6a <tcp_output+0x32>
 8017b5c:	4b84      	ldr	r3, [pc, #528]	; (8017d70 <tcp_output+0x238>)
 8017b5e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017b62:	4986      	ldr	r1, [pc, #536]	; (8017d7c <tcp_output+0x244>)
 8017b64:	4884      	ldr	r0, [pc, #528]	; (8017d78 <tcp_output+0x240>)
 8017b66:	f004 f89d 	bl	801bca4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017b6a:	4b85      	ldr	r3, [pc, #532]	; (8017d80 <tcp_output+0x248>)
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	687a      	ldr	r2, [r7, #4]
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d101      	bne.n	8017b78 <tcp_output+0x40>
    return ERR_OK;
 8017b74:	2300      	movs	r3, #0
 8017b76:	e1ce      	b.n	8017f16 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017b84:	4293      	cmp	r3, r2
 8017b86:	bf28      	it	cs
 8017b88:	4613      	movcs	r3, r2
 8017b8a:	b29b      	uxth	r3, r3
 8017b8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d10b      	bne.n	8017bb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	8b5b      	ldrh	r3, [r3, #26]
 8017b9e:	f003 0302 	and.w	r3, r3, #2
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	f000 81aa 	beq.w	8017efc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f000 fdcb 	bl	8018744 <tcp_send_empty_ack>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	e1b1      	b.n	8017f16 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017bb2:	6879      	ldr	r1, [r7, #4]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	3304      	adds	r3, #4
 8017bb8:	461a      	mov	r2, r3
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f7ff f824 	bl	8016c08 <tcp_route>
 8017bc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d102      	bne.n	8017bce <tcp_output+0x96>
    return ERR_RTE;
 8017bc8:	f06f 0303 	mvn.w	r3, #3
 8017bcc:	e1a3      	b.n	8017f16 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d003      	beq.n	8017bdc <tcp_output+0xa4>
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d111      	bne.n	8017c00 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d002      	beq.n	8017be8 <tcp_output+0xb0>
 8017be2:	697b      	ldr	r3, [r7, #20]
 8017be4:	3304      	adds	r3, #4
 8017be6:	e000      	b.n	8017bea <tcp_output+0xb2>
 8017be8:	2300      	movs	r3, #0
 8017bea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017bec:	693b      	ldr	r3, [r7, #16]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d102      	bne.n	8017bf8 <tcp_output+0xc0>
      return ERR_RTE;
 8017bf2:	f06f 0303 	mvn.w	r3, #3
 8017bf6:	e18e      	b.n	8017f16 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	681a      	ldr	r2, [r3, #0]
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c02:	68db      	ldr	r3, [r3, #12]
 8017c04:	685b      	ldr	r3, [r3, #4]
 8017c06:	4618      	mov	r0, r3
 8017c08:	f7f9 f863 	bl	8010cd2 <lwip_htonl>
 8017c0c:	4602      	mov	r2, r0
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c12:	1ad3      	subs	r3, r2, r3
 8017c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c16:	8912      	ldrh	r2, [r2, #8]
 8017c18:	4413      	add	r3, r2
 8017c1a:	69ba      	ldr	r2, [r7, #24]
 8017c1c:	429a      	cmp	r2, r3
 8017c1e:	d227      	bcs.n	8017c70 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c26:	461a      	mov	r2, r3
 8017c28:	69bb      	ldr	r3, [r7, #24]
 8017c2a:	4293      	cmp	r3, r2
 8017c2c:	d114      	bne.n	8017c58 <tcp_output+0x120>
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d110      	bne.n	8017c58 <tcp_output+0x120>
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d10b      	bne.n	8017c58 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2200      	movs	r2, #0
 8017c44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2201      	movs	r2, #1
 8017c4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2200      	movs	r2, #0
 8017c54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	8b5b      	ldrh	r3, [r3, #26]
 8017c5c:	f003 0302 	and.w	r3, r3, #2
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	f000 814d 	beq.w	8017f00 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017c66:	6878      	ldr	r0, [r7, #4]
 8017c68:	f000 fd6c 	bl	8018744 <tcp_send_empty_ack>
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	e152      	b.n	8017f16 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2200      	movs	r2, #0
 8017c74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c7c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017c7e:	6a3b      	ldr	r3, [r7, #32]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	f000 811c 	beq.w	8017ebe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017c86:	e002      	b.n	8017c8e <tcp_output+0x156>
 8017c88:	6a3b      	ldr	r3, [r7, #32]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	623b      	str	r3, [r7, #32]
 8017c8e:	6a3b      	ldr	r3, [r7, #32]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d1f8      	bne.n	8017c88 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017c96:	e112      	b.n	8017ebe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9a:	68db      	ldr	r3, [r3, #12]
 8017c9c:	899b      	ldrh	r3, [r3, #12]
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7f9 f801 	bl	8010ca8 <lwip_htons>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	f003 0304 	and.w	r3, r3, #4
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d006      	beq.n	8017cc0 <tcp_output+0x188>
 8017cb2:	4b2f      	ldr	r3, [pc, #188]	; (8017d70 <tcp_output+0x238>)
 8017cb4:	f240 5236 	movw	r2, #1334	; 0x536
 8017cb8:	4932      	ldr	r1, [pc, #200]	; (8017d84 <tcp_output+0x24c>)
 8017cba:	482f      	ldr	r0, [pc, #188]	; (8017d78 <tcp_output+0x240>)
 8017cbc:	f003 fff2 	bl	801bca4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d01f      	beq.n	8017d08 <tcp_output+0x1d0>
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	8b5b      	ldrh	r3, [r3, #26]
 8017ccc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d119      	bne.n	8017d08 <tcp_output+0x1d0>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d00b      	beq.n	8017cf4 <tcp_output+0x1bc>
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d110      	bne.n	8017d08 <tcp_output+0x1d0>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cea:	891a      	ldrh	r2, [r3, #8]
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d209      	bcs.n	8017d08 <tcp_output+0x1d0>
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d004      	beq.n	8017d08 <tcp_output+0x1d0>
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d04:	2b0f      	cmp	r3, #15
 8017d06:	d901      	bls.n	8017d0c <tcp_output+0x1d4>
 8017d08:	2301      	movs	r3, #1
 8017d0a:	e000      	b.n	8017d0e <tcp_output+0x1d6>
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d106      	bne.n	8017d20 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	8b5b      	ldrh	r3, [r3, #26]
 8017d16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	f000 80e4 	beq.w	8017ee8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	7d1b      	ldrb	r3, [r3, #20]
 8017d24:	2b02      	cmp	r3, #2
 8017d26:	d00d      	beq.n	8017d44 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d2a:	68db      	ldr	r3, [r3, #12]
 8017d2c:	899b      	ldrh	r3, [r3, #12]
 8017d2e:	b29c      	uxth	r4, r3
 8017d30:	2010      	movs	r0, #16
 8017d32:	f7f8 ffb9 	bl	8010ca8 <lwip_htons>
 8017d36:	4603      	mov	r3, r0
 8017d38:	461a      	mov	r2, r3
 8017d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d3c:	68db      	ldr	r3, [r3, #12]
 8017d3e:	4322      	orrs	r2, r4
 8017d40:	b292      	uxth	r2, r2
 8017d42:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017d44:	697a      	ldr	r2, [r7, #20]
 8017d46:	6879      	ldr	r1, [r7, #4]
 8017d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d4a:	f000 f909 	bl	8017f60 <tcp_output_segment>
 8017d4e:	4603      	mov	r3, r0
 8017d50:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d016      	beq.n	8017d88 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	8b5b      	ldrh	r3, [r3, #26]
 8017d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d62:	b29a      	uxth	r2, r3
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	835a      	strh	r2, [r3, #26]
      return err;
 8017d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d6c:	e0d3      	b.n	8017f16 <tcp_output+0x3de>
 8017d6e:	bf00      	nop
 8017d70:	0801e8c8 	.word	0x0801e8c8
 8017d74:	0801ee0c 	.word	0x0801ee0c
 8017d78:	0801e91c 	.word	0x0801e91c
 8017d7c:	0801ee24 	.word	0x0801ee24
 8017d80:	2000b49c 	.word	0x2000b49c
 8017d84:	0801ee4c 	.word	0x0801ee4c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8a:	681a      	ldr	r2, [r3, #0]
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	7d1b      	ldrb	r3, [r3, #20]
 8017d94:	2b02      	cmp	r3, #2
 8017d96:	d006      	beq.n	8017da6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	8b5b      	ldrh	r3, [r3, #26]
 8017d9c:	f023 0303 	bic.w	r3, r3, #3
 8017da0:	b29a      	uxth	r2, r3
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da8:	68db      	ldr	r3, [r3, #12]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	4618      	mov	r0, r3
 8017dae:	f7f8 ff90 	bl	8010cd2 <lwip_htonl>
 8017db2:	4604      	mov	r4, r0
 8017db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db6:	891b      	ldrh	r3, [r3, #8]
 8017db8:	461d      	mov	r5, r3
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbc:	68db      	ldr	r3, [r3, #12]
 8017dbe:	899b      	ldrh	r3, [r3, #12]
 8017dc0:	b29b      	uxth	r3, r3
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f7f8 ff70 	bl	8010ca8 <lwip_htons>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	b2db      	uxtb	r3, r3
 8017dcc:	f003 0303 	and.w	r3, r3, #3
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d001      	beq.n	8017dd8 <tcp_output+0x2a0>
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	e000      	b.n	8017dda <tcp_output+0x2a2>
 8017dd8:	2300      	movs	r3, #0
 8017dda:	442b      	add	r3, r5
 8017ddc:	4423      	add	r3, r4
 8017dde:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	1ad3      	subs	r3, r2, r3
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	da02      	bge.n	8017df2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	68ba      	ldr	r2, [r7, #8]
 8017df0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df4:	891b      	ldrh	r3, [r3, #8]
 8017df6:	461c      	mov	r4, r3
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	68db      	ldr	r3, [r3, #12]
 8017dfc:	899b      	ldrh	r3, [r3, #12]
 8017dfe:	b29b      	uxth	r3, r3
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7f8 ff51 	bl	8010ca8 <lwip_htons>
 8017e06:	4603      	mov	r3, r0
 8017e08:	b2db      	uxtb	r3, r3
 8017e0a:	f003 0303 	and.w	r3, r3, #3
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d001      	beq.n	8017e16 <tcp_output+0x2de>
 8017e12:	2301      	movs	r3, #1
 8017e14:	e000      	b.n	8017e18 <tcp_output+0x2e0>
 8017e16:	2300      	movs	r3, #0
 8017e18:	4423      	add	r3, r4
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d049      	beq.n	8017eb2 <tcp_output+0x37a>
      seg->next = NULL;
 8017e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e20:	2200      	movs	r2, #0
 8017e22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d105      	bne.n	8017e38 <tcp_output+0x300>
        pcb->unacked = seg;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e30:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e34:	623b      	str	r3, [r7, #32]
 8017e36:	e03f      	b.n	8017eb8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3a:	68db      	ldr	r3, [r3, #12]
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7f8 ff47 	bl	8010cd2 <lwip_htonl>
 8017e44:	4604      	mov	r4, r0
 8017e46:	6a3b      	ldr	r3, [r7, #32]
 8017e48:	68db      	ldr	r3, [r3, #12]
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7f8 ff40 	bl	8010cd2 <lwip_htonl>
 8017e52:	4603      	mov	r3, r0
 8017e54:	1ae3      	subs	r3, r4, r3
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	da24      	bge.n	8017ea4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	3370      	adds	r3, #112	; 0x70
 8017e5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017e60:	e002      	b.n	8017e68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017e62:	69fb      	ldr	r3, [r7, #28]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d011      	beq.n	8017e94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017e70:	69fb      	ldr	r3, [r7, #28]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	68db      	ldr	r3, [r3, #12]
 8017e76:	685b      	ldr	r3, [r3, #4]
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f7f8 ff2a 	bl	8010cd2 <lwip_htonl>
 8017e7e:	4604      	mov	r4, r0
 8017e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e82:	68db      	ldr	r3, [r3, #12]
 8017e84:	685b      	ldr	r3, [r3, #4]
 8017e86:	4618      	mov	r0, r3
 8017e88:	f7f8 ff23 	bl	8010cd2 <lwip_htonl>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	dbe6      	blt.n	8017e62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017e9c:	69fb      	ldr	r3, [r7, #28]
 8017e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ea0:	601a      	str	r2, [r3, #0]
 8017ea2:	e009      	b.n	8017eb8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017ea4:	6a3b      	ldr	r3, [r7, #32]
 8017ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ea8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017eaa:	6a3b      	ldr	r3, [r7, #32]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	623b      	str	r3, [r7, #32]
 8017eb0:	e002      	b.n	8017eb8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017eb4:	f7fb ff01 	bl	8013cba <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ebc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8017ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d012      	beq.n	8017eea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec6:	68db      	ldr	r3, [r3, #12]
 8017ec8:	685b      	ldr	r3, [r3, #4]
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f7f8 ff01 	bl	8010cd2 <lwip_htonl>
 8017ed0:	4602      	mov	r2, r0
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ed6:	1ad3      	subs	r3, r2, r3
 8017ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eda:	8912      	ldrh	r2, [r2, #8]
 8017edc:	4413      	add	r3, r2
  while (seg != NULL &&
 8017ede:	69ba      	ldr	r2, [r7, #24]
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	f4bf aed9 	bcs.w	8017c98 <tcp_output+0x160>
 8017ee6:	e000      	b.n	8017eea <tcp_output+0x3b2>
      break;
 8017ee8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d108      	bne.n	8017f04 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017efa:	e004      	b.n	8017f06 <tcp_output+0x3ce>
    goto output_done;
 8017efc:	bf00      	nop
 8017efe:	e002      	b.n	8017f06 <tcp_output+0x3ce>
    goto output_done;
 8017f00:	bf00      	nop
 8017f02:	e000      	b.n	8017f06 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017f04:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	8b5b      	ldrh	r3, [r3, #26]
 8017f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017f0e:	b29a      	uxth	r2, r3
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017f14:	2300      	movs	r3, #0
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3728      	adds	r7, #40	; 0x28
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8017f1e:	bf00      	nop

08017f20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d106      	bne.n	8017f3c <tcp_output_segment_busy+0x1c>
 8017f2e:	4b09      	ldr	r3, [pc, #36]	; (8017f54 <tcp_output_segment_busy+0x34>)
 8017f30:	f240 529a 	movw	r2, #1434	; 0x59a
 8017f34:	4908      	ldr	r1, [pc, #32]	; (8017f58 <tcp_output_segment_busy+0x38>)
 8017f36:	4809      	ldr	r0, [pc, #36]	; (8017f5c <tcp_output_segment_busy+0x3c>)
 8017f38:	f003 feb4 	bl	801bca4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	685b      	ldr	r3, [r3, #4]
 8017f40:	7b9b      	ldrb	r3, [r3, #14]
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d001      	beq.n	8017f4a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017f46:	2301      	movs	r3, #1
 8017f48:	e000      	b.n	8017f4c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017f4a:	2300      	movs	r3, #0
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3708      	adds	r7, #8
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}
 8017f54:	0801e8c8 	.word	0x0801e8c8
 8017f58:	0801ee64 	.word	0x0801ee64
 8017f5c:	0801e91c 	.word	0x0801e91c

08017f60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017f60:	b5b0      	push	{r4, r5, r7, lr}
 8017f62:	b08c      	sub	sp, #48	; 0x30
 8017f64:	af04      	add	r7, sp, #16
 8017f66:	60f8      	str	r0, [r7, #12]
 8017f68:	60b9      	str	r1, [r7, #8]
 8017f6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d106      	bne.n	8017f80 <tcp_output_segment+0x20>
 8017f72:	4b64      	ldr	r3, [pc, #400]	; (8018104 <tcp_output_segment+0x1a4>)
 8017f74:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017f78:	4963      	ldr	r1, [pc, #396]	; (8018108 <tcp_output_segment+0x1a8>)
 8017f7a:	4864      	ldr	r0, [pc, #400]	; (801810c <tcp_output_segment+0x1ac>)
 8017f7c:	f003 fe92 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d106      	bne.n	8017f94 <tcp_output_segment+0x34>
 8017f86:	4b5f      	ldr	r3, [pc, #380]	; (8018104 <tcp_output_segment+0x1a4>)
 8017f88:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017f8c:	4960      	ldr	r1, [pc, #384]	; (8018110 <tcp_output_segment+0x1b0>)
 8017f8e:	485f      	ldr	r0, [pc, #380]	; (801810c <tcp_output_segment+0x1ac>)
 8017f90:	f003 fe88 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d106      	bne.n	8017fa8 <tcp_output_segment+0x48>
 8017f9a:	4b5a      	ldr	r3, [pc, #360]	; (8018104 <tcp_output_segment+0x1a4>)
 8017f9c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017fa0:	495c      	ldr	r1, [pc, #368]	; (8018114 <tcp_output_segment+0x1b4>)
 8017fa2:	485a      	ldr	r0, [pc, #360]	; (801810c <tcp_output_segment+0x1ac>)
 8017fa4:	f003 fe7e 	bl	801bca4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017fa8:	68f8      	ldr	r0, [r7, #12]
 8017faa:	f7ff ffb9 	bl	8017f20 <tcp_output_segment_busy>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d001      	beq.n	8017fb8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	e0a1      	b.n	80180fc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	68dc      	ldr	r4, [r3, #12]
 8017fc0:	4610      	mov	r0, r2
 8017fc2:	f7f8 fe86 	bl	8010cd2 <lwip_htonl>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017fca:	68bb      	ldr	r3, [r7, #8]
 8017fcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	68dc      	ldr	r4, [r3, #12]
 8017fd2:	4610      	mov	r0, r2
 8017fd4:	f7f8 fe68 	bl	8010ca8 <lwip_htons>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017fdc:	68bb      	ldr	r3, [r7, #8]
 8017fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fe0:	68ba      	ldr	r2, [r7, #8]
 8017fe2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017fe4:	441a      	add	r2, r3
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	68db      	ldr	r3, [r3, #12]
 8017fee:	3314      	adds	r3, #20
 8017ff0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	7a9b      	ldrb	r3, [r3, #10]
 8017ff6:	f003 0301 	and.w	r3, r3, #1
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d015      	beq.n	801802a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	3304      	adds	r3, #4
 8018002:	461a      	mov	r2, r3
 8018004:	6879      	ldr	r1, [r7, #4]
 8018006:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801800a:	f7fc fa33 	bl	8014474 <tcp_eff_send_mss_netif>
 801800e:	4603      	mov	r3, r0
 8018010:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018012:	8b7b      	ldrh	r3, [r7, #26]
 8018014:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018018:	4618      	mov	r0, r3
 801801a:	f7f8 fe5a 	bl	8010cd2 <lwip_htonl>
 801801e:	4602      	mov	r2, r0
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018024:	69fb      	ldr	r3, [r7, #28]
 8018026:	3304      	adds	r3, #4
 8018028:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018030:	2b00      	cmp	r3, #0
 8018032:	da02      	bge.n	801803a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	2200      	movs	r2, #0
 8018038:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801803e:	2b00      	cmp	r3, #0
 8018040:	d10c      	bne.n	801805c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018042:	4b35      	ldr	r3, [pc, #212]	; (8018118 <tcp_output_segment+0x1b8>)
 8018044:	681a      	ldr	r2, [r3, #0]
 8018046:	68bb      	ldr	r3, [r7, #8]
 8018048:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	68db      	ldr	r3, [r3, #12]
 801804e:	685b      	ldr	r3, [r3, #4]
 8018050:	4618      	mov	r0, r3
 8018052:	f7f8 fe3e 	bl	8010cd2 <lwip_htonl>
 8018056:	4602      	mov	r2, r0
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	68da      	ldr	r2, [r3, #12]
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	685b      	ldr	r3, [r3, #4]
 8018066:	1ad3      	subs	r3, r2, r3
 8018068:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	8959      	ldrh	r1, [r3, #10]
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	8b3a      	ldrh	r2, [r7, #24]
 8018076:	1a8a      	subs	r2, r1, r2
 8018078:	b292      	uxth	r2, r2
 801807a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	685b      	ldr	r3, [r3, #4]
 8018080:	8919      	ldrh	r1, [r3, #8]
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	685b      	ldr	r3, [r3, #4]
 8018086:	8b3a      	ldrh	r2, [r7, #24]
 8018088:	1a8a      	subs	r2, r1, r2
 801808a:	b292      	uxth	r2, r2
 801808c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	68fa      	ldr	r2, [r7, #12]
 8018094:	68d2      	ldr	r2, [r2, #12]
 8018096:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	68db      	ldr	r3, [r3, #12]
 801809c:	2200      	movs	r2, #0
 801809e:	741a      	strb	r2, [r3, #16]
 80180a0:	2200      	movs	r2, #0
 80180a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	68da      	ldr	r2, [r3, #12]
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	7a9b      	ldrb	r3, [r3, #10]
 80180ac:	f003 0301 	and.w	r3, r3, #1
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d001      	beq.n	80180b8 <tcp_output_segment+0x158>
 80180b4:	2318      	movs	r3, #24
 80180b6:	e000      	b.n	80180ba <tcp_output_segment+0x15a>
 80180b8:	2314      	movs	r3, #20
 80180ba:	4413      	add	r3, r2
 80180bc:	69fa      	ldr	r2, [r7, #28]
 80180be:	429a      	cmp	r2, r3
 80180c0:	d006      	beq.n	80180d0 <tcp_output_segment+0x170>
 80180c2:	4b10      	ldr	r3, [pc, #64]	; (8018104 <tcp_output_segment+0x1a4>)
 80180c4:	f240 621c 	movw	r2, #1564	; 0x61c
 80180c8:	4914      	ldr	r1, [pc, #80]	; (801811c <tcp_output_segment+0x1bc>)
 80180ca:	4810      	ldr	r0, [pc, #64]	; (801810c <tcp_output_segment+0x1ac>)
 80180cc:	f003 fdea 	bl	801bca4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	6858      	ldr	r0, [r3, #4]
 80180d4:	68b9      	ldr	r1, [r7, #8]
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	1d1c      	adds	r4, r3, #4
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	7add      	ldrb	r5, [r3, #11]
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	7a9b      	ldrb	r3, [r3, #10]
 80180e2:	687a      	ldr	r2, [r7, #4]
 80180e4:	9202      	str	r2, [sp, #8]
 80180e6:	2206      	movs	r2, #6
 80180e8:	9201      	str	r2, [sp, #4]
 80180ea:	9300      	str	r3, [sp, #0]
 80180ec:	462b      	mov	r3, r5
 80180ee:	4622      	mov	r2, r4
 80180f0:	f002 fa50 	bl	801a594 <ip4_output_if>
 80180f4:	4603      	mov	r3, r0
 80180f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80180f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	3720      	adds	r7, #32
 8018100:	46bd      	mov	sp, r7
 8018102:	bdb0      	pop	{r4, r5, r7, pc}
 8018104:	0801e8c8 	.word	0x0801e8c8
 8018108:	0801ee8c 	.word	0x0801ee8c
 801810c:	0801e91c 	.word	0x0801e91c
 8018110:	0801eeac 	.word	0x0801eeac
 8018114:	0801eecc 	.word	0x0801eecc
 8018118:	2000b450 	.word	0x2000b450
 801811c:	0801eef0 	.word	0x0801eef0

08018120 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018120:	b5b0      	push	{r4, r5, r7, lr}
 8018122:	b084      	sub	sp, #16
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d106      	bne.n	801813c <tcp_rexmit_rto_prepare+0x1c>
 801812e:	4b31      	ldr	r3, [pc, #196]	; (80181f4 <tcp_rexmit_rto_prepare+0xd4>)
 8018130:	f240 6263 	movw	r2, #1635	; 0x663
 8018134:	4930      	ldr	r1, [pc, #192]	; (80181f8 <tcp_rexmit_rto_prepare+0xd8>)
 8018136:	4831      	ldr	r0, [pc, #196]	; (80181fc <tcp_rexmit_rto_prepare+0xdc>)
 8018138:	f003 fdb4 	bl	801bca4 <iprintf>

  if (pcb->unacked == NULL) {
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018140:	2b00      	cmp	r3, #0
 8018142:	d102      	bne.n	801814a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018144:	f06f 0305 	mvn.w	r3, #5
 8018148:	e050      	b.n	80181ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801814e:	60fb      	str	r3, [r7, #12]
 8018150:	e00b      	b.n	801816a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018152:	68f8      	ldr	r0, [r7, #12]
 8018154:	f7ff fee4 	bl	8017f20 <tcp_output_segment_busy>
 8018158:	4603      	mov	r3, r0
 801815a:	2b00      	cmp	r3, #0
 801815c:	d002      	beq.n	8018164 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801815e:	f06f 0305 	mvn.w	r3, #5
 8018162:	e043      	b.n	80181ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	60fb      	str	r3, [r7, #12]
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d1ef      	bne.n	8018152 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018172:	68f8      	ldr	r0, [r7, #12]
 8018174:	f7ff fed4 	bl	8017f20 <tcp_output_segment_busy>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d002      	beq.n	8018184 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801817e:	f06f 0305 	mvn.w	r3, #5
 8018182:	e033      	b.n	80181ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2200      	movs	r2, #0
 8018198:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	8b5b      	ldrh	r3, [r3, #26]
 801819e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80181a2:	b29a      	uxth	r2, r3
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	68db      	ldr	r3, [r3, #12]
 80181ac:	685b      	ldr	r3, [r3, #4]
 80181ae:	4618      	mov	r0, r3
 80181b0:	f7f8 fd8f 	bl	8010cd2 <lwip_htonl>
 80181b4:	4604      	mov	r4, r0
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	891b      	ldrh	r3, [r3, #8]
 80181ba:	461d      	mov	r5, r3
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	68db      	ldr	r3, [r3, #12]
 80181c0:	899b      	ldrh	r3, [r3, #12]
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7f8 fd6f 	bl	8010ca8 <lwip_htons>
 80181ca:	4603      	mov	r3, r0
 80181cc:	b2db      	uxtb	r3, r3
 80181ce:	f003 0303 	and.w	r3, r3, #3
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d001      	beq.n	80181da <tcp_rexmit_rto_prepare+0xba>
 80181d6:	2301      	movs	r3, #1
 80181d8:	e000      	b.n	80181dc <tcp_rexmit_rto_prepare+0xbc>
 80181da:	2300      	movs	r3, #0
 80181dc:	442b      	add	r3, r5
 80181de:	18e2      	adds	r2, r4, r3
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	2200      	movs	r2, #0
 80181e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80181ea:	2300      	movs	r3, #0
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3710      	adds	r7, #16
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bdb0      	pop	{r4, r5, r7, pc}
 80181f4:	0801e8c8 	.word	0x0801e8c8
 80181f8:	0801ef04 	.word	0x0801ef04
 80181fc:	0801e91c 	.word	0x0801e91c

08018200 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b082      	sub	sp, #8
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d106      	bne.n	801821c <tcp_rexmit_rto_commit+0x1c>
 801820e:	4b0d      	ldr	r3, [pc, #52]	; (8018244 <tcp_rexmit_rto_commit+0x44>)
 8018210:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018214:	490c      	ldr	r1, [pc, #48]	; (8018248 <tcp_rexmit_rto_commit+0x48>)
 8018216:	480d      	ldr	r0, [pc, #52]	; (801824c <tcp_rexmit_rto_commit+0x4c>)
 8018218:	f003 fd44 	bl	801bca4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018222:	2bff      	cmp	r3, #255	; 0xff
 8018224:	d007      	beq.n	8018236 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801822c:	3301      	adds	r3, #1
 801822e:	b2da      	uxtb	r2, r3
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018236:	6878      	ldr	r0, [r7, #4]
 8018238:	f7ff fc7e 	bl	8017b38 <tcp_output>
}
 801823c:	bf00      	nop
 801823e:	3708      	adds	r7, #8
 8018240:	46bd      	mov	sp, r7
 8018242:	bd80      	pop	{r7, pc}
 8018244:	0801e8c8 	.word	0x0801e8c8
 8018248:	0801ef28 	.word	0x0801ef28
 801824c:	0801e91c 	.word	0x0801e91c

08018250 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d106      	bne.n	801826c <tcp_rexmit_rto+0x1c>
 801825e:	4b0a      	ldr	r3, [pc, #40]	; (8018288 <tcp_rexmit_rto+0x38>)
 8018260:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018264:	4909      	ldr	r1, [pc, #36]	; (801828c <tcp_rexmit_rto+0x3c>)
 8018266:	480a      	ldr	r0, [pc, #40]	; (8018290 <tcp_rexmit_rto+0x40>)
 8018268:	f003 fd1c 	bl	801bca4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801826c:	6878      	ldr	r0, [r7, #4]
 801826e:	f7ff ff57 	bl	8018120 <tcp_rexmit_rto_prepare>
 8018272:	4603      	mov	r3, r0
 8018274:	2b00      	cmp	r3, #0
 8018276:	d102      	bne.n	801827e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018278:	6878      	ldr	r0, [r7, #4]
 801827a:	f7ff ffc1 	bl	8018200 <tcp_rexmit_rto_commit>
  }
}
 801827e:	bf00      	nop
 8018280:	3708      	adds	r7, #8
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}
 8018286:	bf00      	nop
 8018288:	0801e8c8 	.word	0x0801e8c8
 801828c:	0801ef4c 	.word	0x0801ef4c
 8018290:	0801e91c 	.word	0x0801e91c

08018294 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018294:	b590      	push	{r4, r7, lr}
 8018296:	b085      	sub	sp, #20
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d106      	bne.n	80182b0 <tcp_rexmit+0x1c>
 80182a2:	4b2f      	ldr	r3, [pc, #188]	; (8018360 <tcp_rexmit+0xcc>)
 80182a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80182a8:	492e      	ldr	r1, [pc, #184]	; (8018364 <tcp_rexmit+0xd0>)
 80182aa:	482f      	ldr	r0, [pc, #188]	; (8018368 <tcp_rexmit+0xd4>)
 80182ac:	f003 fcfa 	bl	801bca4 <iprintf>

  if (pcb->unacked == NULL) {
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d102      	bne.n	80182be <tcp_rexmit+0x2a>
    return ERR_VAL;
 80182b8:	f06f 0305 	mvn.w	r3, #5
 80182bc:	e04c      	b.n	8018358 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80182c4:	68b8      	ldr	r0, [r7, #8]
 80182c6:	f7ff fe2b 	bl	8017f20 <tcp_output_segment_busy>
 80182ca:	4603      	mov	r3, r0
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d002      	beq.n	80182d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80182d0:	f06f 0305 	mvn.w	r3, #5
 80182d4:	e040      	b.n	8018358 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	681a      	ldr	r2, [r3, #0]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	336c      	adds	r3, #108	; 0x6c
 80182e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80182e4:	e002      	b.n	80182ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d011      	beq.n	8018318 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	68db      	ldr	r3, [r3, #12]
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7f8 fce8 	bl	8010cd2 <lwip_htonl>
 8018302:	4604      	mov	r4, r0
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	68db      	ldr	r3, [r3, #12]
 8018308:	685b      	ldr	r3, [r3, #4]
 801830a:	4618      	mov	r0, r3
 801830c:	f7f8 fce1 	bl	8010cd2 <lwip_htonl>
 8018310:	4603      	mov	r3, r0
 8018312:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018314:	2b00      	cmp	r3, #0
 8018316:	dbe6      	blt.n	80182e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	681a      	ldr	r2, [r3, #0]
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	68ba      	ldr	r2, [r7, #8]
 8018324:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d103      	bne.n	8018336 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	2200      	movs	r2, #0
 8018332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801833c:	2bff      	cmp	r3, #255	; 0xff
 801833e:	d007      	beq.n	8018350 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018346:	3301      	adds	r3, #1
 8018348:	b2da      	uxtb	r2, r3
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	2200      	movs	r2, #0
 8018354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018356:	2300      	movs	r3, #0
}
 8018358:	4618      	mov	r0, r3
 801835a:	3714      	adds	r7, #20
 801835c:	46bd      	mov	sp, r7
 801835e:	bd90      	pop	{r4, r7, pc}
 8018360:	0801e8c8 	.word	0x0801e8c8
 8018364:	0801ef68 	.word	0x0801ef68
 8018368:	0801e91c 	.word	0x0801e91c

0801836c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d106      	bne.n	8018388 <tcp_rexmit_fast+0x1c>
 801837a:	4b2a      	ldr	r3, [pc, #168]	; (8018424 <tcp_rexmit_fast+0xb8>)
 801837c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018380:	4929      	ldr	r1, [pc, #164]	; (8018428 <tcp_rexmit_fast+0xbc>)
 8018382:	482a      	ldr	r0, [pc, #168]	; (801842c <tcp_rexmit_fast+0xc0>)
 8018384:	f003 fc8e 	bl	801bca4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801838c:	2b00      	cmp	r3, #0
 801838e:	d044      	beq.n	801841a <tcp_rexmit_fast+0xae>
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	8b5b      	ldrh	r3, [r3, #26]
 8018394:	f003 0304 	and.w	r3, r3, #4
 8018398:	2b00      	cmp	r3, #0
 801839a:	d13e      	bne.n	801841a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801839c:	6878      	ldr	r0, [r7, #4]
 801839e:	f7ff ff79 	bl	8018294 <tcp_rexmit>
 80183a2:	4603      	mov	r3, r0
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d138      	bne.n	801841a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80183b4:	4293      	cmp	r3, r2
 80183b6:	bf28      	it	cs
 80183b8:	4613      	movcs	r3, r2
 80183ba:	b29b      	uxth	r3, r3
 80183bc:	0fda      	lsrs	r2, r3, #31
 80183be:	4413      	add	r3, r2
 80183c0:	105b      	asrs	r3, r3, #1
 80183c2:	b29a      	uxth	r2, r3
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80183d0:	461a      	mov	r2, r3
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80183d6:	005b      	lsls	r3, r3, #1
 80183d8:	429a      	cmp	r2, r3
 80183da:	d206      	bcs.n	80183ea <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80183e0:	005b      	lsls	r3, r3, #1
 80183e2:	b29a      	uxth	r2, r3
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80183f4:	4619      	mov	r1, r3
 80183f6:	0049      	lsls	r1, r1, #1
 80183f8:	440b      	add	r3, r1
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	4413      	add	r3, r2
 80183fe:	b29a      	uxth	r2, r3
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	8b5b      	ldrh	r3, [r3, #26]
 801840a:	f043 0304 	orr.w	r3, r3, #4
 801840e:	b29a      	uxth	r2, r3
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2200      	movs	r2, #0
 8018418:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801841a:	bf00      	nop
 801841c:	3708      	adds	r7, #8
 801841e:	46bd      	mov	sp, r7
 8018420:	bd80      	pop	{r7, pc}
 8018422:	bf00      	nop
 8018424:	0801e8c8 	.word	0x0801e8c8
 8018428:	0801ef80 	.word	0x0801ef80
 801842c:	0801e91c 	.word	0x0801e91c

08018430 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b086      	sub	sp, #24
 8018434:	af00      	add	r7, sp, #0
 8018436:	60f8      	str	r0, [r7, #12]
 8018438:	607b      	str	r3, [r7, #4]
 801843a:	460b      	mov	r3, r1
 801843c:	817b      	strh	r3, [r7, #10]
 801843e:	4613      	mov	r3, r2
 8018440:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018442:	897a      	ldrh	r2, [r7, #10]
 8018444:	893b      	ldrh	r3, [r7, #8]
 8018446:	4413      	add	r3, r2
 8018448:	b29b      	uxth	r3, r3
 801844a:	3314      	adds	r3, #20
 801844c:	b29b      	uxth	r3, r3
 801844e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018452:	4619      	mov	r1, r3
 8018454:	2022      	movs	r0, #34	; 0x22
 8018456:	f7f9 fd0b 	bl	8011e70 <pbuf_alloc>
 801845a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801845c:	697b      	ldr	r3, [r7, #20]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d04d      	beq.n	80184fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018462:	897b      	ldrh	r3, [r7, #10]
 8018464:	3313      	adds	r3, #19
 8018466:	697a      	ldr	r2, [r7, #20]
 8018468:	8952      	ldrh	r2, [r2, #10]
 801846a:	4293      	cmp	r3, r2
 801846c:	db06      	blt.n	801847c <tcp_output_alloc_header_common+0x4c>
 801846e:	4b26      	ldr	r3, [pc, #152]	; (8018508 <tcp_output_alloc_header_common+0xd8>)
 8018470:	f240 7223 	movw	r2, #1827	; 0x723
 8018474:	4925      	ldr	r1, [pc, #148]	; (801850c <tcp_output_alloc_header_common+0xdc>)
 8018476:	4826      	ldr	r0, [pc, #152]	; (8018510 <tcp_output_alloc_header_common+0xe0>)
 8018478:	f003 fc14 	bl	801bca4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	685b      	ldr	r3, [r3, #4]
 8018480:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018482:	8c3b      	ldrh	r3, [r7, #32]
 8018484:	4618      	mov	r0, r3
 8018486:	f7f8 fc0f 	bl	8010ca8 <lwip_htons>
 801848a:	4603      	mov	r3, r0
 801848c:	461a      	mov	r2, r3
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018494:	4618      	mov	r0, r3
 8018496:	f7f8 fc07 	bl	8010ca8 <lwip_htons>
 801849a:	4603      	mov	r3, r0
 801849c:	461a      	mov	r2, r3
 801849e:	693b      	ldr	r3, [r7, #16]
 80184a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80184a2:	693b      	ldr	r3, [r7, #16]
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80184a8:	68f8      	ldr	r0, [r7, #12]
 80184aa:	f7f8 fc12 	bl	8010cd2 <lwip_htonl>
 80184ae:	4602      	mov	r2, r0
 80184b0:	693b      	ldr	r3, [r7, #16]
 80184b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80184b4:	897b      	ldrh	r3, [r7, #10]
 80184b6:	089b      	lsrs	r3, r3, #2
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	3305      	adds	r3, #5
 80184bc:	b29b      	uxth	r3, r3
 80184be:	031b      	lsls	r3, r3, #12
 80184c0:	b29a      	uxth	r2, r3
 80184c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	4313      	orrs	r3, r2
 80184ca:	b29b      	uxth	r3, r3
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7f8 fbeb 	bl	8010ca8 <lwip_htons>
 80184d2:	4603      	mov	r3, r0
 80184d4:	461a      	mov	r2, r3
 80184d6:	693b      	ldr	r3, [r7, #16]
 80184d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80184da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80184dc:	4618      	mov	r0, r3
 80184de:	f7f8 fbe3 	bl	8010ca8 <lwip_htons>
 80184e2:	4603      	mov	r3, r0
 80184e4:	461a      	mov	r2, r3
 80184e6:	693b      	ldr	r3, [r7, #16]
 80184e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80184ea:	693b      	ldr	r3, [r7, #16]
 80184ec:	2200      	movs	r2, #0
 80184ee:	741a      	strb	r2, [r3, #16]
 80184f0:	2200      	movs	r2, #0
 80184f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80184f4:	693b      	ldr	r3, [r7, #16]
 80184f6:	2200      	movs	r2, #0
 80184f8:	749a      	strb	r2, [r3, #18]
 80184fa:	2200      	movs	r2, #0
 80184fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80184fe:	697b      	ldr	r3, [r7, #20]
}
 8018500:	4618      	mov	r0, r3
 8018502:	3718      	adds	r7, #24
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}
 8018508:	0801e8c8 	.word	0x0801e8c8
 801850c:	0801efa0 	.word	0x0801efa0
 8018510:	0801e91c 	.word	0x0801e91c

08018514 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018514:	b5b0      	push	{r4, r5, r7, lr}
 8018516:	b08a      	sub	sp, #40	; 0x28
 8018518:	af04      	add	r7, sp, #16
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	607b      	str	r3, [r7, #4]
 801851e:	460b      	mov	r3, r1
 8018520:	817b      	strh	r3, [r7, #10]
 8018522:	4613      	mov	r3, r2
 8018524:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d106      	bne.n	801853a <tcp_output_alloc_header+0x26>
 801852c:	4b15      	ldr	r3, [pc, #84]	; (8018584 <tcp_output_alloc_header+0x70>)
 801852e:	f240 7242 	movw	r2, #1858	; 0x742
 8018532:	4915      	ldr	r1, [pc, #84]	; (8018588 <tcp_output_alloc_header+0x74>)
 8018534:	4815      	ldr	r0, [pc, #84]	; (801858c <tcp_output_alloc_header+0x78>)
 8018536:	f003 fbb5 	bl	801bca4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	8adb      	ldrh	r3, [r3, #22]
 8018542:	68fa      	ldr	r2, [r7, #12]
 8018544:	8b12      	ldrh	r2, [r2, #24]
 8018546:	68f9      	ldr	r1, [r7, #12]
 8018548:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801854a:	893d      	ldrh	r5, [r7, #8]
 801854c:	897c      	ldrh	r4, [r7, #10]
 801854e:	9103      	str	r1, [sp, #12]
 8018550:	2110      	movs	r1, #16
 8018552:	9102      	str	r1, [sp, #8]
 8018554:	9201      	str	r2, [sp, #4]
 8018556:	9300      	str	r3, [sp, #0]
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	462a      	mov	r2, r5
 801855c:	4621      	mov	r1, r4
 801855e:	f7ff ff67 	bl	8018430 <tcp_output_alloc_header_common>
 8018562:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018564:	697b      	ldr	r3, [r7, #20]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d006      	beq.n	8018578 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801856e:	68fa      	ldr	r2, [r7, #12]
 8018570:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018572:	441a      	add	r2, r3
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018578:	697b      	ldr	r3, [r7, #20]
}
 801857a:	4618      	mov	r0, r3
 801857c:	3718      	adds	r7, #24
 801857e:	46bd      	mov	sp, r7
 8018580:	bdb0      	pop	{r4, r5, r7, pc}
 8018582:	bf00      	nop
 8018584:	0801e8c8 	.word	0x0801e8c8
 8018588:	0801efd0 	.word	0x0801efd0
 801858c:	0801e91c 	.word	0x0801e91c

08018590 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b088      	sub	sp, #32
 8018594:	af00      	add	r7, sp, #0
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	60b9      	str	r1, [r7, #8]
 801859a:	4611      	mov	r1, r2
 801859c:	461a      	mov	r2, r3
 801859e:	460b      	mov	r3, r1
 80185a0:	71fb      	strb	r3, [r7, #7]
 80185a2:	4613      	mov	r3, r2
 80185a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80185a6:	2300      	movs	r3, #0
 80185a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d106      	bne.n	80185be <tcp_output_fill_options+0x2e>
 80185b0:	4b12      	ldr	r3, [pc, #72]	; (80185fc <tcp_output_fill_options+0x6c>)
 80185b2:	f240 7256 	movw	r2, #1878	; 0x756
 80185b6:	4912      	ldr	r1, [pc, #72]	; (8018600 <tcp_output_fill_options+0x70>)
 80185b8:	4812      	ldr	r0, [pc, #72]	; (8018604 <tcp_output_fill_options+0x74>)
 80185ba:	f003 fb73 	bl	801bca4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	685b      	ldr	r3, [r3, #4]
 80185c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80185c4:	69bb      	ldr	r3, [r7, #24]
 80185c6:	3314      	adds	r3, #20
 80185c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80185ca:	8bfb      	ldrh	r3, [r7, #30]
 80185cc:	009b      	lsls	r3, r3, #2
 80185ce:	461a      	mov	r2, r3
 80185d0:	79fb      	ldrb	r3, [r7, #7]
 80185d2:	009b      	lsls	r3, r3, #2
 80185d4:	f003 0304 	and.w	r3, r3, #4
 80185d8:	4413      	add	r3, r2
 80185da:	3314      	adds	r3, #20
 80185dc:	69ba      	ldr	r2, [r7, #24]
 80185de:	4413      	add	r3, r2
 80185e0:	697a      	ldr	r2, [r7, #20]
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d006      	beq.n	80185f4 <tcp_output_fill_options+0x64>
 80185e6:	4b05      	ldr	r3, [pc, #20]	; (80185fc <tcp_output_fill_options+0x6c>)
 80185e8:	f240 7275 	movw	r2, #1909	; 0x775
 80185ec:	4906      	ldr	r1, [pc, #24]	; (8018608 <tcp_output_fill_options+0x78>)
 80185ee:	4805      	ldr	r0, [pc, #20]	; (8018604 <tcp_output_fill_options+0x74>)
 80185f0:	f003 fb58 	bl	801bca4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80185f4:	bf00      	nop
 80185f6:	3720      	adds	r7, #32
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd80      	pop	{r7, pc}
 80185fc:	0801e8c8 	.word	0x0801e8c8
 8018600:	0801eff8 	.word	0x0801eff8
 8018604:	0801e91c 	.word	0x0801e91c
 8018608:	0801eef0 	.word	0x0801eef0

0801860c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b08a      	sub	sp, #40	; 0x28
 8018610:	af04      	add	r7, sp, #16
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	607a      	str	r2, [r7, #4]
 8018618:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801861a:	68bb      	ldr	r3, [r7, #8]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d106      	bne.n	801862e <tcp_output_control_segment+0x22>
 8018620:	4b1c      	ldr	r3, [pc, #112]	; (8018694 <tcp_output_control_segment+0x88>)
 8018622:	f240 7287 	movw	r2, #1927	; 0x787
 8018626:	491c      	ldr	r1, [pc, #112]	; (8018698 <tcp_output_control_segment+0x8c>)
 8018628:	481c      	ldr	r0, [pc, #112]	; (801869c <tcp_output_control_segment+0x90>)
 801862a:	f003 fb3b 	bl	801bca4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801862e:	683a      	ldr	r2, [r7, #0]
 8018630:	6879      	ldr	r1, [r7, #4]
 8018632:	68f8      	ldr	r0, [r7, #12]
 8018634:	f7fe fae8 	bl	8016c08 <tcp_route>
 8018638:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d102      	bne.n	8018646 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018640:	23fc      	movs	r3, #252	; 0xfc
 8018642:	75fb      	strb	r3, [r7, #23]
 8018644:	e01c      	b.n	8018680 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d006      	beq.n	801865a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	7adb      	ldrb	r3, [r3, #11]
 8018650:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	7a9b      	ldrb	r3, [r3, #10]
 8018656:	757b      	strb	r3, [r7, #21]
 8018658:	e003      	b.n	8018662 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801865a:	23ff      	movs	r3, #255	; 0xff
 801865c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801865e:	2300      	movs	r3, #0
 8018660:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018662:	7dba      	ldrb	r2, [r7, #22]
 8018664:	693b      	ldr	r3, [r7, #16]
 8018666:	9302      	str	r3, [sp, #8]
 8018668:	2306      	movs	r3, #6
 801866a:	9301      	str	r3, [sp, #4]
 801866c:	7d7b      	ldrb	r3, [r7, #21]
 801866e:	9300      	str	r3, [sp, #0]
 8018670:	4613      	mov	r3, r2
 8018672:	683a      	ldr	r2, [r7, #0]
 8018674:	6879      	ldr	r1, [r7, #4]
 8018676:	68b8      	ldr	r0, [r7, #8]
 8018678:	f001 ff8c 	bl	801a594 <ip4_output_if>
 801867c:	4603      	mov	r3, r0
 801867e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018680:	68b8      	ldr	r0, [r7, #8]
 8018682:	f7f9 fed9 	bl	8012438 <pbuf_free>
  return err;
 8018686:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801868a:	4618      	mov	r0, r3
 801868c:	3718      	adds	r7, #24
 801868e:	46bd      	mov	sp, r7
 8018690:	bd80      	pop	{r7, pc}
 8018692:	bf00      	nop
 8018694:	0801e8c8 	.word	0x0801e8c8
 8018698:	0801f020 	.word	0x0801f020
 801869c:	0801e91c 	.word	0x0801e91c

080186a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80186a0:	b590      	push	{r4, r7, lr}
 80186a2:	b08b      	sub	sp, #44	; 0x2c
 80186a4:	af04      	add	r7, sp, #16
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	60b9      	str	r1, [r7, #8]
 80186aa:	607a      	str	r2, [r7, #4]
 80186ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80186ae:	683b      	ldr	r3, [r7, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d106      	bne.n	80186c2 <tcp_rst+0x22>
 80186b4:	4b1f      	ldr	r3, [pc, #124]	; (8018734 <tcp_rst+0x94>)
 80186b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80186ba:	491f      	ldr	r1, [pc, #124]	; (8018738 <tcp_rst+0x98>)
 80186bc:	481f      	ldr	r0, [pc, #124]	; (801873c <tcp_rst+0x9c>)
 80186be:	f003 faf1 	bl	801bca4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80186c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d106      	bne.n	80186d6 <tcp_rst+0x36>
 80186c8:	4b1a      	ldr	r3, [pc, #104]	; (8018734 <tcp_rst+0x94>)
 80186ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80186ce:	491c      	ldr	r1, [pc, #112]	; (8018740 <tcp_rst+0xa0>)
 80186d0:	481a      	ldr	r0, [pc, #104]	; (801873c <tcp_rst+0x9c>)
 80186d2:	f003 fae7 	bl	801bca4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80186d6:	2300      	movs	r3, #0
 80186d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80186da:	f24d 0316 	movw	r3, #53270	; 0xd016
 80186de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80186e0:	7dfb      	ldrb	r3, [r7, #23]
 80186e2:	b29c      	uxth	r4, r3
 80186e4:	68b8      	ldr	r0, [r7, #8]
 80186e6:	f7f8 faf4 	bl	8010cd2 <lwip_htonl>
 80186ea:	4602      	mov	r2, r0
 80186ec:	8abb      	ldrh	r3, [r7, #20]
 80186ee:	9303      	str	r3, [sp, #12]
 80186f0:	2314      	movs	r3, #20
 80186f2:	9302      	str	r3, [sp, #8]
 80186f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80186f6:	9301      	str	r3, [sp, #4]
 80186f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80186fa:	9300      	str	r3, [sp, #0]
 80186fc:	4613      	mov	r3, r2
 80186fe:	2200      	movs	r2, #0
 8018700:	4621      	mov	r1, r4
 8018702:	6878      	ldr	r0, [r7, #4]
 8018704:	f7ff fe94 	bl	8018430 <tcp_output_alloc_header_common>
 8018708:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801870a:	693b      	ldr	r3, [r7, #16]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d00c      	beq.n	801872a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018710:	7dfb      	ldrb	r3, [r7, #23]
 8018712:	2200      	movs	r2, #0
 8018714:	6939      	ldr	r1, [r7, #16]
 8018716:	68f8      	ldr	r0, [r7, #12]
 8018718:	f7ff ff3a 	bl	8018590 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871e:	683a      	ldr	r2, [r7, #0]
 8018720:	6939      	ldr	r1, [r7, #16]
 8018722:	68f8      	ldr	r0, [r7, #12]
 8018724:	f7ff ff72 	bl	801860c <tcp_output_control_segment>
 8018728:	e000      	b.n	801872c <tcp_rst+0x8c>
    return;
 801872a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801872c:	371c      	adds	r7, #28
 801872e:	46bd      	mov	sp, r7
 8018730:	bd90      	pop	{r4, r7, pc}
 8018732:	bf00      	nop
 8018734:	0801e8c8 	.word	0x0801e8c8
 8018738:	0801f04c 	.word	0x0801f04c
 801873c:	0801e91c 	.word	0x0801e91c
 8018740:	0801f068 	.word	0x0801f068

08018744 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018744:	b590      	push	{r4, r7, lr}
 8018746:	b087      	sub	sp, #28
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801874c:	2300      	movs	r3, #0
 801874e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018750:	2300      	movs	r3, #0
 8018752:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d106      	bne.n	8018768 <tcp_send_empty_ack+0x24>
 801875a:	4b28      	ldr	r3, [pc, #160]	; (80187fc <tcp_send_empty_ack+0xb8>)
 801875c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018760:	4927      	ldr	r1, [pc, #156]	; (8018800 <tcp_send_empty_ack+0xbc>)
 8018762:	4828      	ldr	r0, [pc, #160]	; (8018804 <tcp_send_empty_ack+0xc0>)
 8018764:	f003 fa9e 	bl	801bca4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018768:	7dfb      	ldrb	r3, [r7, #23]
 801876a:	009b      	lsls	r3, r3, #2
 801876c:	b2db      	uxtb	r3, r3
 801876e:	f003 0304 	and.w	r3, r3, #4
 8018772:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018774:	7d7b      	ldrb	r3, [r7, #21]
 8018776:	b29c      	uxth	r4, r3
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801877c:	4618      	mov	r0, r3
 801877e:	f7f8 faa8 	bl	8010cd2 <lwip_htonl>
 8018782:	4603      	mov	r3, r0
 8018784:	2200      	movs	r2, #0
 8018786:	4621      	mov	r1, r4
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f7ff fec3 	bl	8018514 <tcp_output_alloc_header>
 801878e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018790:	693b      	ldr	r3, [r7, #16]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d109      	bne.n	80187aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	8b5b      	ldrh	r3, [r3, #26]
 801879a:	f043 0303 	orr.w	r3, r3, #3
 801879e:	b29a      	uxth	r2, r3
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80187a4:	f06f 0301 	mvn.w	r3, #1
 80187a8:	e023      	b.n	80187f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80187aa:	7dbb      	ldrb	r3, [r7, #22]
 80187ac:	7dfa      	ldrb	r2, [r7, #23]
 80187ae:	6939      	ldr	r1, [r7, #16]
 80187b0:	6878      	ldr	r0, [r7, #4]
 80187b2:	f7ff feed 	bl	8018590 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80187b6:	687a      	ldr	r2, [r7, #4]
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	3304      	adds	r3, #4
 80187bc:	6939      	ldr	r1, [r7, #16]
 80187be:	6878      	ldr	r0, [r7, #4]
 80187c0:	f7ff ff24 	bl	801860c <tcp_output_control_segment>
 80187c4:	4603      	mov	r3, r0
 80187c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80187c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d007      	beq.n	80187e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	8b5b      	ldrh	r3, [r3, #26]
 80187d4:	f043 0303 	orr.w	r3, r3, #3
 80187d8:	b29a      	uxth	r2, r3
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	835a      	strh	r2, [r3, #26]
 80187de:	e006      	b.n	80187ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	8b5b      	ldrh	r3, [r3, #26]
 80187e4:	f023 0303 	bic.w	r3, r3, #3
 80187e8:	b29a      	uxth	r2, r3
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80187ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80187f2:	4618      	mov	r0, r3
 80187f4:	371c      	adds	r7, #28
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd90      	pop	{r4, r7, pc}
 80187fa:	bf00      	nop
 80187fc:	0801e8c8 	.word	0x0801e8c8
 8018800:	0801f084 	.word	0x0801f084
 8018804:	0801e91c 	.word	0x0801e91c

08018808 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018808:	b590      	push	{r4, r7, lr}
 801880a:	b087      	sub	sp, #28
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018810:	2300      	movs	r3, #0
 8018812:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d106      	bne.n	8018828 <tcp_keepalive+0x20>
 801881a:	4b18      	ldr	r3, [pc, #96]	; (801887c <tcp_keepalive+0x74>)
 801881c:	f640 0224 	movw	r2, #2084	; 0x824
 8018820:	4917      	ldr	r1, [pc, #92]	; (8018880 <tcp_keepalive+0x78>)
 8018822:	4818      	ldr	r0, [pc, #96]	; (8018884 <tcp_keepalive+0x7c>)
 8018824:	f003 fa3e 	bl	801bca4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018828:	7dfb      	ldrb	r3, [r7, #23]
 801882a:	b29c      	uxth	r4, r3
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018830:	3b01      	subs	r3, #1
 8018832:	4618      	mov	r0, r3
 8018834:	f7f8 fa4d 	bl	8010cd2 <lwip_htonl>
 8018838:	4603      	mov	r3, r0
 801883a:	2200      	movs	r2, #0
 801883c:	4621      	mov	r1, r4
 801883e:	6878      	ldr	r0, [r7, #4]
 8018840:	f7ff fe68 	bl	8018514 <tcp_output_alloc_header>
 8018844:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d102      	bne.n	8018852 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801884c:	f04f 33ff 	mov.w	r3, #4294967295
 8018850:	e010      	b.n	8018874 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018852:	7dfb      	ldrb	r3, [r7, #23]
 8018854:	2200      	movs	r2, #0
 8018856:	6939      	ldr	r1, [r7, #16]
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f7ff fe99 	bl	8018590 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801885e:	687a      	ldr	r2, [r7, #4]
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	3304      	adds	r3, #4
 8018864:	6939      	ldr	r1, [r7, #16]
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	f7ff fed0 	bl	801860c <tcp_output_control_segment>
 801886c:	4603      	mov	r3, r0
 801886e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018870:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018874:	4618      	mov	r0, r3
 8018876:	371c      	adds	r7, #28
 8018878:	46bd      	mov	sp, r7
 801887a:	bd90      	pop	{r4, r7, pc}
 801887c:	0801e8c8 	.word	0x0801e8c8
 8018880:	0801f0a4 	.word	0x0801f0a4
 8018884:	0801e91c 	.word	0x0801e91c

08018888 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018888:	b590      	push	{r4, r7, lr}
 801888a:	b08b      	sub	sp, #44	; 0x2c
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018890:	2300      	movs	r3, #0
 8018892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d106      	bne.n	80188aa <tcp_zero_window_probe+0x22>
 801889c:	4b4c      	ldr	r3, [pc, #304]	; (80189d0 <tcp_zero_window_probe+0x148>)
 801889e:	f640 024f 	movw	r2, #2127	; 0x84f
 80188a2:	494c      	ldr	r1, [pc, #304]	; (80189d4 <tcp_zero_window_probe+0x14c>)
 80188a4:	484c      	ldr	r0, [pc, #304]	; (80189d8 <tcp_zero_window_probe+0x150>)
 80188a6:	f003 f9fd 	bl	801bca4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80188b0:	6a3b      	ldr	r3, [r7, #32]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d101      	bne.n	80188ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80188b6:	2300      	movs	r3, #0
 80188b8:	e086      	b.n	80189c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80188c0:	2bff      	cmp	r3, #255	; 0xff
 80188c2:	d007      	beq.n	80188d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80188ca:	3301      	adds	r3, #1
 80188cc:	b2da      	uxtb	r2, r3
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80188d4:	6a3b      	ldr	r3, [r7, #32]
 80188d6:	68db      	ldr	r3, [r3, #12]
 80188d8:	899b      	ldrh	r3, [r3, #12]
 80188da:	b29b      	uxth	r3, r3
 80188dc:	4618      	mov	r0, r3
 80188de:	f7f8 f9e3 	bl	8010ca8 <lwip_htons>
 80188e2:	4603      	mov	r3, r0
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	f003 0301 	and.w	r3, r3, #1
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d005      	beq.n	80188fa <tcp_zero_window_probe+0x72>
 80188ee:	6a3b      	ldr	r3, [r7, #32]
 80188f0:	891b      	ldrh	r3, [r3, #8]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d101      	bne.n	80188fa <tcp_zero_window_probe+0x72>
 80188f6:	2301      	movs	r3, #1
 80188f8:	e000      	b.n	80188fc <tcp_zero_window_probe+0x74>
 80188fa:	2300      	movs	r3, #0
 80188fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80188fe:	7ffb      	ldrb	r3, [r7, #31]
 8018900:	2b00      	cmp	r3, #0
 8018902:	bf0c      	ite	eq
 8018904:	2301      	moveq	r3, #1
 8018906:	2300      	movne	r3, #0
 8018908:	b2db      	uxtb	r3, r3
 801890a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801890c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018910:	b299      	uxth	r1, r3
 8018912:	6a3b      	ldr	r3, [r7, #32]
 8018914:	68db      	ldr	r3, [r3, #12]
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	8bba      	ldrh	r2, [r7, #28]
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f7ff fdfa 	bl	8018514 <tcp_output_alloc_header>
 8018920:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018922:	69bb      	ldr	r3, [r7, #24]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d102      	bne.n	801892e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018928:	f04f 33ff 	mov.w	r3, #4294967295
 801892c:	e04c      	b.n	80189c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801892e:	69bb      	ldr	r3, [r7, #24]
 8018930:	685b      	ldr	r3, [r3, #4]
 8018932:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018934:	7ffb      	ldrb	r3, [r7, #31]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d011      	beq.n	801895e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801893a:	697b      	ldr	r3, [r7, #20]
 801893c:	899b      	ldrh	r3, [r3, #12]
 801893e:	b29b      	uxth	r3, r3
 8018940:	b21b      	sxth	r3, r3
 8018942:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018946:	b21c      	sxth	r4, r3
 8018948:	2011      	movs	r0, #17
 801894a:	f7f8 f9ad 	bl	8010ca8 <lwip_htons>
 801894e:	4603      	mov	r3, r0
 8018950:	b21b      	sxth	r3, r3
 8018952:	4323      	orrs	r3, r4
 8018954:	b21b      	sxth	r3, r3
 8018956:	b29a      	uxth	r2, r3
 8018958:	697b      	ldr	r3, [r7, #20]
 801895a:	819a      	strh	r2, [r3, #12]
 801895c:	e010      	b.n	8018980 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801895e:	69bb      	ldr	r3, [r7, #24]
 8018960:	685b      	ldr	r3, [r3, #4]
 8018962:	3314      	adds	r3, #20
 8018964:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018966:	6a3b      	ldr	r3, [r7, #32]
 8018968:	6858      	ldr	r0, [r3, #4]
 801896a:	6a3b      	ldr	r3, [r7, #32]
 801896c:	685b      	ldr	r3, [r3, #4]
 801896e:	891a      	ldrh	r2, [r3, #8]
 8018970:	6a3b      	ldr	r3, [r7, #32]
 8018972:	891b      	ldrh	r3, [r3, #8]
 8018974:	1ad3      	subs	r3, r2, r3
 8018976:	b29b      	uxth	r3, r3
 8018978:	2201      	movs	r2, #1
 801897a:	6939      	ldr	r1, [r7, #16]
 801897c:	f7f9 ff56 	bl	801282c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018980:	6a3b      	ldr	r3, [r7, #32]
 8018982:	68db      	ldr	r3, [r3, #12]
 8018984:	685b      	ldr	r3, [r3, #4]
 8018986:	4618      	mov	r0, r3
 8018988:	f7f8 f9a3 	bl	8010cd2 <lwip_htonl>
 801898c:	4603      	mov	r3, r0
 801898e:	3301      	adds	r3, #1
 8018990:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	1ad3      	subs	r3, r2, r3
 801899a:	2b00      	cmp	r3, #0
 801899c:	da02      	bge.n	80189a4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	68fa      	ldr	r2, [r7, #12]
 80189a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80189a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189a8:	2200      	movs	r2, #0
 80189aa:	69b9      	ldr	r1, [r7, #24]
 80189ac:	6878      	ldr	r0, [r7, #4]
 80189ae:	f7ff fdef 	bl	8018590 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80189b2:	687a      	ldr	r2, [r7, #4]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	3304      	adds	r3, #4
 80189b8:	69b9      	ldr	r1, [r7, #24]
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	f7ff fe26 	bl	801860c <tcp_output_control_segment>
 80189c0:	4603      	mov	r3, r0
 80189c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80189c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80189c8:	4618      	mov	r0, r3
 80189ca:	372c      	adds	r7, #44	; 0x2c
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd90      	pop	{r4, r7, pc}
 80189d0:	0801e8c8 	.word	0x0801e8c8
 80189d4:	0801f0c0 	.word	0x0801f0c0
 80189d8:	0801e91c 	.word	0x0801e91c

080189dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80189e4:	f7fa f810 	bl	8012a08 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80189e8:	4b0a      	ldr	r3, [pc, #40]	; (8018a14 <tcpip_tcp_timer+0x38>)
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d103      	bne.n	80189f8 <tcpip_tcp_timer+0x1c>
 80189f0:	4b09      	ldr	r3, [pc, #36]	; (8018a18 <tcpip_tcp_timer+0x3c>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d005      	beq.n	8018a04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80189f8:	2200      	movs	r2, #0
 80189fa:	4908      	ldr	r1, [pc, #32]	; (8018a1c <tcpip_tcp_timer+0x40>)
 80189fc:	20fa      	movs	r0, #250	; 0xfa
 80189fe:	f000 f8f3 	bl	8018be8 <sys_timeout>
 8018a02:	e003      	b.n	8018a0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018a04:	4b06      	ldr	r3, [pc, #24]	; (8018a20 <tcpip_tcp_timer+0x44>)
 8018a06:	2200      	movs	r2, #0
 8018a08:	601a      	str	r2, [r3, #0]
  }
}
 8018a0a:	bf00      	nop
 8018a0c:	bf00      	nop
 8018a0e:	3708      	adds	r7, #8
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd80      	pop	{r7, pc}
 8018a14:	2000b45c 	.word	0x2000b45c
 8018a18:	2000b460 	.word	0x2000b460
 8018a1c:	080189dd 	.word	0x080189dd
 8018a20:	2000b4a8 	.word	0x2000b4a8

08018a24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018a28:	4b0a      	ldr	r3, [pc, #40]	; (8018a54 <tcp_timer_needed+0x30>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d10f      	bne.n	8018a50 <tcp_timer_needed+0x2c>
 8018a30:	4b09      	ldr	r3, [pc, #36]	; (8018a58 <tcp_timer_needed+0x34>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d103      	bne.n	8018a40 <tcp_timer_needed+0x1c>
 8018a38:	4b08      	ldr	r3, [pc, #32]	; (8018a5c <tcp_timer_needed+0x38>)
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d007      	beq.n	8018a50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018a40:	4b04      	ldr	r3, [pc, #16]	; (8018a54 <tcp_timer_needed+0x30>)
 8018a42:	2201      	movs	r2, #1
 8018a44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018a46:	2200      	movs	r2, #0
 8018a48:	4905      	ldr	r1, [pc, #20]	; (8018a60 <tcp_timer_needed+0x3c>)
 8018a4a:	20fa      	movs	r0, #250	; 0xfa
 8018a4c:	f000 f8cc 	bl	8018be8 <sys_timeout>
  }
}
 8018a50:	bf00      	nop
 8018a52:	bd80      	pop	{r7, pc}
 8018a54:	2000b4a8 	.word	0x2000b4a8
 8018a58:	2000b45c 	.word	0x2000b45c
 8018a5c:	2000b460 	.word	0x2000b460
 8018a60:	080189dd 	.word	0x080189dd

08018a64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b086      	sub	sp, #24
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	60f8      	str	r0, [r7, #12]
 8018a6c:	60b9      	str	r1, [r7, #8]
 8018a6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018a70:	2006      	movs	r0, #6
 8018a72:	f7f8 fdfb 	bl	801166c <memp_malloc>
 8018a76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018a78:	693b      	ldr	r3, [r7, #16]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d109      	bne.n	8018a92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018a7e:	693b      	ldr	r3, [r7, #16]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d151      	bne.n	8018b28 <sys_timeout_abs+0xc4>
 8018a84:	4b2a      	ldr	r3, [pc, #168]	; (8018b30 <sys_timeout_abs+0xcc>)
 8018a86:	22be      	movs	r2, #190	; 0xbe
 8018a88:	492a      	ldr	r1, [pc, #168]	; (8018b34 <sys_timeout_abs+0xd0>)
 8018a8a:	482b      	ldr	r0, [pc, #172]	; (8018b38 <sys_timeout_abs+0xd4>)
 8018a8c:	f003 f90a 	bl	801bca4 <iprintf>
    return;
 8018a90:	e04a      	b.n	8018b28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018a92:	693b      	ldr	r3, [r7, #16]
 8018a94:	2200      	movs	r2, #0
 8018a96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018a98:	693b      	ldr	r3, [r7, #16]
 8018a9a:	68ba      	ldr	r2, [r7, #8]
 8018a9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8018a9e:	693b      	ldr	r3, [r7, #16]
 8018aa0:	687a      	ldr	r2, [r7, #4]
 8018aa2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018aa4:	693b      	ldr	r3, [r7, #16]
 8018aa6:	68fa      	ldr	r2, [r7, #12]
 8018aa8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018aaa:	4b24      	ldr	r3, [pc, #144]	; (8018b3c <sys_timeout_abs+0xd8>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d103      	bne.n	8018aba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018ab2:	4a22      	ldr	r2, [pc, #136]	; (8018b3c <sys_timeout_abs+0xd8>)
 8018ab4:	693b      	ldr	r3, [r7, #16]
 8018ab6:	6013      	str	r3, [r2, #0]
    return;
 8018ab8:	e037      	b.n	8018b2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018aba:	693b      	ldr	r3, [r7, #16]
 8018abc:	685a      	ldr	r2, [r3, #4]
 8018abe:	4b1f      	ldr	r3, [pc, #124]	; (8018b3c <sys_timeout_abs+0xd8>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	685b      	ldr	r3, [r3, #4]
 8018ac4:	1ad3      	subs	r3, r2, r3
 8018ac6:	0fdb      	lsrs	r3, r3, #31
 8018ac8:	f003 0301 	and.w	r3, r3, #1
 8018acc:	b2db      	uxtb	r3, r3
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d007      	beq.n	8018ae2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018ad2:	4b1a      	ldr	r3, [pc, #104]	; (8018b3c <sys_timeout_abs+0xd8>)
 8018ad4:	681a      	ldr	r2, [r3, #0]
 8018ad6:	693b      	ldr	r3, [r7, #16]
 8018ad8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018ada:	4a18      	ldr	r2, [pc, #96]	; (8018b3c <sys_timeout_abs+0xd8>)
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	6013      	str	r3, [r2, #0]
 8018ae0:	e023      	b.n	8018b2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018ae2:	4b16      	ldr	r3, [pc, #88]	; (8018b3c <sys_timeout_abs+0xd8>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	617b      	str	r3, [r7, #20]
 8018ae8:	e01a      	b.n	8018b20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018aea:	697b      	ldr	r3, [r7, #20]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d00b      	beq.n	8018b0a <sys_timeout_abs+0xa6>
 8018af2:	693b      	ldr	r3, [r7, #16]
 8018af4:	685a      	ldr	r2, [r3, #4]
 8018af6:	697b      	ldr	r3, [r7, #20]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	685b      	ldr	r3, [r3, #4]
 8018afc:	1ad3      	subs	r3, r2, r3
 8018afe:	0fdb      	lsrs	r3, r3, #31
 8018b00:	f003 0301 	and.w	r3, r3, #1
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d007      	beq.n	8018b1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018b0a:	697b      	ldr	r3, [r7, #20]
 8018b0c:	681a      	ldr	r2, [r3, #0]
 8018b0e:	693b      	ldr	r3, [r7, #16]
 8018b10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018b12:	697b      	ldr	r3, [r7, #20]
 8018b14:	693a      	ldr	r2, [r7, #16]
 8018b16:	601a      	str	r2, [r3, #0]
        break;
 8018b18:	e007      	b.n	8018b2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	617b      	str	r3, [r7, #20]
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d1e1      	bne.n	8018aea <sys_timeout_abs+0x86>
 8018b26:	e000      	b.n	8018b2a <sys_timeout_abs+0xc6>
    return;
 8018b28:	bf00      	nop
      }
    }
  }
}
 8018b2a:	3718      	adds	r7, #24
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	0801f0e4 	.word	0x0801f0e4
 8018b34:	0801f118 	.word	0x0801f118
 8018b38:	0801f158 	.word	0x0801f158
 8018b3c:	2000b4a0 	.word	0x2000b4a0

08018b40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b086      	sub	sp, #24
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	4798      	blx	r3

  now = sys_now();
 8018b52:	f7e8 ff3f 	bl	80019d4 <sys_now>
 8018b56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018b58:	697b      	ldr	r3, [r7, #20]
 8018b5a:	681a      	ldr	r2, [r3, #0]
 8018b5c:	4b0f      	ldr	r3, [pc, #60]	; (8018b9c <lwip_cyclic_timer+0x5c>)
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	4413      	add	r3, r2
 8018b62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018b64:	68fa      	ldr	r2, [r7, #12]
 8018b66:	693b      	ldr	r3, [r7, #16]
 8018b68:	1ad3      	subs	r3, r2, r3
 8018b6a:	0fdb      	lsrs	r3, r3, #31
 8018b6c:	f003 0301 	and.w	r3, r3, #1
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d009      	beq.n	8018b8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018b76:	697b      	ldr	r3, [r7, #20]
 8018b78:	681a      	ldr	r2, [r3, #0]
 8018b7a:	693b      	ldr	r3, [r7, #16]
 8018b7c:	4413      	add	r3, r2
 8018b7e:	687a      	ldr	r2, [r7, #4]
 8018b80:	4907      	ldr	r1, [pc, #28]	; (8018ba0 <lwip_cyclic_timer+0x60>)
 8018b82:	4618      	mov	r0, r3
 8018b84:	f7ff ff6e 	bl	8018a64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018b88:	e004      	b.n	8018b94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018b8a:	687a      	ldr	r2, [r7, #4]
 8018b8c:	4904      	ldr	r1, [pc, #16]	; (8018ba0 <lwip_cyclic_timer+0x60>)
 8018b8e:	68f8      	ldr	r0, [r7, #12]
 8018b90:	f7ff ff68 	bl	8018a64 <sys_timeout_abs>
}
 8018b94:	bf00      	nop
 8018b96:	3718      	adds	r7, #24
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	2000b4a4 	.word	0x2000b4a4
 8018ba0:	08018b41 	.word	0x08018b41

08018ba4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018baa:	2301      	movs	r3, #1
 8018bac:	607b      	str	r3, [r7, #4]
 8018bae:	e00e      	b.n	8018bce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018bb0:	4a0b      	ldr	r2, [pc, #44]	; (8018be0 <sys_timeouts_init+0x3c>)
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	4a08      	ldr	r2, [pc, #32]	; (8018be0 <sys_timeouts_init+0x3c>)
 8018bbe:	4413      	add	r3, r2
 8018bc0:	461a      	mov	r2, r3
 8018bc2:	4908      	ldr	r1, [pc, #32]	; (8018be4 <sys_timeouts_init+0x40>)
 8018bc4:	f000 f810 	bl	8018be8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	3301      	adds	r3, #1
 8018bcc:	607b      	str	r3, [r7, #4]
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2b02      	cmp	r3, #2
 8018bd2:	d9ed      	bls.n	8018bb0 <sys_timeouts_init+0xc>
  }
}
 8018bd4:	bf00      	nop
 8018bd6:	bf00      	nop
 8018bd8:	3708      	adds	r7, #8
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}
 8018bde:	bf00      	nop
 8018be0:	0801fe70 	.word	0x0801fe70
 8018be4:	08018b41 	.word	0x08018b41

08018be8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b086      	sub	sp, #24
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	60f8      	str	r0, [r7, #12]
 8018bf0:	60b9      	str	r1, [r7, #8]
 8018bf2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018bfa:	d306      	bcc.n	8018c0a <sys_timeout+0x22>
 8018bfc:	4b0a      	ldr	r3, [pc, #40]	; (8018c28 <sys_timeout+0x40>)
 8018bfe:	f240 1229 	movw	r2, #297	; 0x129
 8018c02:	490a      	ldr	r1, [pc, #40]	; (8018c2c <sys_timeout+0x44>)
 8018c04:	480a      	ldr	r0, [pc, #40]	; (8018c30 <sys_timeout+0x48>)
 8018c06:	f003 f84d 	bl	801bca4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018c0a:	f7e8 fee3 	bl	80019d4 <sys_now>
 8018c0e:	4602      	mov	r2, r0
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	4413      	add	r3, r2
 8018c14:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018c16:	687a      	ldr	r2, [r7, #4]
 8018c18:	68b9      	ldr	r1, [r7, #8]
 8018c1a:	6978      	ldr	r0, [r7, #20]
 8018c1c:	f7ff ff22 	bl	8018a64 <sys_timeout_abs>
#endif
}
 8018c20:	bf00      	nop
 8018c22:	3718      	adds	r7, #24
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}
 8018c28:	0801f0e4 	.word	0x0801f0e4
 8018c2c:	0801f180 	.word	0x0801f180
 8018c30:	0801f158 	.word	0x0801f158

08018c34 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b084      	sub	sp, #16
 8018c38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018c3a:	f7e8 fecb 	bl	80019d4 <sys_now>
 8018c3e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8018c40:	4b1a      	ldr	r3, [pc, #104]	; (8018cac <sys_check_timeouts+0x78>)
 8018c42:	781b      	ldrb	r3, [r3, #0]
 8018c44:	b2db      	uxtb	r3, r3
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d001      	beq.n	8018c4e <sys_check_timeouts+0x1a>
 8018c4a:	f7f9 f8bb 	bl	8011dc4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8018c4e:	4b18      	ldr	r3, [pc, #96]	; (8018cb0 <sys_check_timeouts+0x7c>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d022      	beq.n	8018ca0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018c5a:	68bb      	ldr	r3, [r7, #8]
 8018c5c:	685b      	ldr	r3, [r3, #4]
 8018c5e:	68fa      	ldr	r2, [r7, #12]
 8018c60:	1ad3      	subs	r3, r2, r3
 8018c62:	0fdb      	lsrs	r3, r3, #31
 8018c64:	f003 0301 	and.w	r3, r3, #1
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d11a      	bne.n	8018ca4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	4a0f      	ldr	r2, [pc, #60]	; (8018cb0 <sys_check_timeouts+0x7c>)
 8018c74:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018c76:	68bb      	ldr	r3, [r7, #8]
 8018c78:	689b      	ldr	r3, [r3, #8]
 8018c7a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018c7c:	68bb      	ldr	r3, [r7, #8]
 8018c7e:	68db      	ldr	r3, [r3, #12]
 8018c80:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	685b      	ldr	r3, [r3, #4]
 8018c86:	4a0b      	ldr	r2, [pc, #44]	; (8018cb4 <sys_check_timeouts+0x80>)
 8018c88:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018c8a:	68b9      	ldr	r1, [r7, #8]
 8018c8c:	2006      	movs	r0, #6
 8018c8e:	f7f8 fd5d 	bl	801174c <memp_free>
    if (handler != NULL) {
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d0d3      	beq.n	8018c40 <sys_check_timeouts+0xc>
      handler(arg);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	6838      	ldr	r0, [r7, #0]
 8018c9c:	4798      	blx	r3
  do {
 8018c9e:	e7cf      	b.n	8018c40 <sys_check_timeouts+0xc>
      return;
 8018ca0:	bf00      	nop
 8018ca2:	e000      	b.n	8018ca6 <sys_check_timeouts+0x72>
      return;
 8018ca4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018ca6:	3710      	adds	r7, #16
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}
 8018cac:	2000b44d 	.word	0x2000b44d
 8018cb0:	2000b4a0 	.word	0x2000b4a0
 8018cb4:	2000b4a4 	.word	0x2000b4a4

08018cb8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018cbc:	f002 fef2 	bl	801baa4 <rand>
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018cc8:	b29b      	uxth	r3, r3
 8018cca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018cce:	b29a      	uxth	r2, r3
 8018cd0:	4b01      	ldr	r3, [pc, #4]	; (8018cd8 <udp_init+0x20>)
 8018cd2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018cd4:	bf00      	nop
 8018cd6:	bd80      	pop	{r7, pc}
 8018cd8:	20000080 	.word	0x20000080

08018cdc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b084      	sub	sp, #16
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	60f8      	str	r0, [r7, #12]
 8018ce4:	60b9      	str	r1, [r7, #8]
 8018ce6:	4613      	mov	r3, r2
 8018ce8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d105      	bne.n	8018cfc <udp_input_local_match+0x20>
 8018cf0:	4b27      	ldr	r3, [pc, #156]	; (8018d90 <udp_input_local_match+0xb4>)
 8018cf2:	2287      	movs	r2, #135	; 0x87
 8018cf4:	4927      	ldr	r1, [pc, #156]	; (8018d94 <udp_input_local_match+0xb8>)
 8018cf6:	4828      	ldr	r0, [pc, #160]	; (8018d98 <udp_input_local_match+0xbc>)
 8018cf8:	f002 ffd4 	bl	801bca4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d105      	bne.n	8018d0e <udp_input_local_match+0x32>
 8018d02:	4b23      	ldr	r3, [pc, #140]	; (8018d90 <udp_input_local_match+0xb4>)
 8018d04:	2288      	movs	r2, #136	; 0x88
 8018d06:	4925      	ldr	r1, [pc, #148]	; (8018d9c <udp_input_local_match+0xc0>)
 8018d08:	4823      	ldr	r0, [pc, #140]	; (8018d98 <udp_input_local_match+0xbc>)
 8018d0a:	f002 ffcb 	bl	801bca4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	7a1b      	ldrb	r3, [r3, #8]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d00b      	beq.n	8018d2e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	7a1a      	ldrb	r2, [r3, #8]
 8018d1a:	4b21      	ldr	r3, [pc, #132]	; (8018da0 <udp_input_local_match+0xc4>)
 8018d1c:	685b      	ldr	r3, [r3, #4]
 8018d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018d22:	3301      	adds	r3, #1
 8018d24:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d001      	beq.n	8018d2e <udp_input_local_match+0x52>
    return 0;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	e02b      	b.n	8018d86 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018d2e:	79fb      	ldrb	r3, [r7, #7]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d018      	beq.n	8018d66 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d013      	beq.n	8018d62 <udp_input_local_match+0x86>
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d00f      	beq.n	8018d62 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018d42:	4b17      	ldr	r3, [pc, #92]	; (8018da0 <udp_input_local_match+0xc4>)
 8018d44:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d4a:	d00a      	beq.n	8018d62 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	681a      	ldr	r2, [r3, #0]
 8018d50:	4b13      	ldr	r3, [pc, #76]	; (8018da0 <udp_input_local_match+0xc4>)
 8018d52:	695b      	ldr	r3, [r3, #20]
 8018d54:	405a      	eors	r2, r3
 8018d56:	68bb      	ldr	r3, [r7, #8]
 8018d58:	3308      	adds	r3, #8
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d110      	bne.n	8018d84 <udp_input_local_match+0xa8>
          return 1;
 8018d62:	2301      	movs	r3, #1
 8018d64:	e00f      	b.n	8018d86 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d009      	beq.n	8018d80 <udp_input_local_match+0xa4>
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d005      	beq.n	8018d80 <udp_input_local_match+0xa4>
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	681a      	ldr	r2, [r3, #0]
 8018d78:	4b09      	ldr	r3, [pc, #36]	; (8018da0 <udp_input_local_match+0xc4>)
 8018d7a:	695b      	ldr	r3, [r3, #20]
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d101      	bne.n	8018d84 <udp_input_local_match+0xa8>
        return 1;
 8018d80:	2301      	movs	r3, #1
 8018d82:	e000      	b.n	8018d86 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018d84:	2300      	movs	r3, #0
}
 8018d86:	4618      	mov	r0, r3
 8018d88:	3710      	adds	r7, #16
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	0801f1cc 	.word	0x0801f1cc
 8018d94:	0801f1fc 	.word	0x0801f1fc
 8018d98:	0801f220 	.word	0x0801f220
 8018d9c:	0801f248 	.word	0x0801f248
 8018da0:	20004728 	.word	0x20004728

08018da4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018da4:	b590      	push	{r4, r7, lr}
 8018da6:	b08d      	sub	sp, #52	; 0x34
 8018da8:	af02      	add	r7, sp, #8
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018dae:	2300      	movs	r3, #0
 8018db0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d105      	bne.n	8018dc4 <udp_input+0x20>
 8018db8:	4b7c      	ldr	r3, [pc, #496]	; (8018fac <udp_input+0x208>)
 8018dba:	22cf      	movs	r2, #207	; 0xcf
 8018dbc:	497c      	ldr	r1, [pc, #496]	; (8018fb0 <udp_input+0x20c>)
 8018dbe:	487d      	ldr	r0, [pc, #500]	; (8018fb4 <udp_input+0x210>)
 8018dc0:	f002 ff70 	bl	801bca4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d105      	bne.n	8018dd6 <udp_input+0x32>
 8018dca:	4b78      	ldr	r3, [pc, #480]	; (8018fac <udp_input+0x208>)
 8018dcc:	22d0      	movs	r2, #208	; 0xd0
 8018dce:	497a      	ldr	r1, [pc, #488]	; (8018fb8 <udp_input+0x214>)
 8018dd0:	4878      	ldr	r0, [pc, #480]	; (8018fb4 <udp_input+0x210>)
 8018dd2:	f002 ff67 	bl	801bca4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	895b      	ldrh	r3, [r3, #10]
 8018dda:	2b07      	cmp	r3, #7
 8018ddc:	d803      	bhi.n	8018de6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018dde:	6878      	ldr	r0, [r7, #4]
 8018de0:	f7f9 fb2a 	bl	8012438 <pbuf_free>
    goto end;
 8018de4:	e0de      	b.n	8018fa4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018dec:	4b73      	ldr	r3, [pc, #460]	; (8018fbc <udp_input+0x218>)
 8018dee:	695b      	ldr	r3, [r3, #20]
 8018df0:	4a72      	ldr	r2, [pc, #456]	; (8018fbc <udp_input+0x218>)
 8018df2:	6812      	ldr	r2, [r2, #0]
 8018df4:	4611      	mov	r1, r2
 8018df6:	4618      	mov	r0, r3
 8018df8:	f001 fca4 	bl	801a744 <ip4_addr_isbroadcast_u32>
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018e00:	697b      	ldr	r3, [r7, #20]
 8018e02:	881b      	ldrh	r3, [r3, #0]
 8018e04:	b29b      	uxth	r3, r3
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7f7 ff4e 	bl	8010ca8 <lwip_htons>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	885b      	ldrh	r3, [r3, #2]
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7f7 ff46 	bl	8010ca8 <lwip_htons>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018e20:	2300      	movs	r3, #0
 8018e22:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018e24:	2300      	movs	r3, #0
 8018e26:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018e28:	2300      	movs	r3, #0
 8018e2a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018e2c:	4b64      	ldr	r3, [pc, #400]	; (8018fc0 <udp_input+0x21c>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	627b      	str	r3, [r7, #36]	; 0x24
 8018e32:	e054      	b.n	8018ede <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e36:	8a5b      	ldrh	r3, [r3, #18]
 8018e38:	89fa      	ldrh	r2, [r7, #14]
 8018e3a:	429a      	cmp	r2, r3
 8018e3c:	d14a      	bne.n	8018ed4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018e3e:	7cfb      	ldrb	r3, [r7, #19]
 8018e40:	461a      	mov	r2, r3
 8018e42:	6839      	ldr	r1, [r7, #0]
 8018e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e46:	f7ff ff49 	bl	8018cdc <udp_input_local_match>
 8018e4a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d041      	beq.n	8018ed4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e52:	7c1b      	ldrb	r3, [r3, #16]
 8018e54:	f003 0304 	and.w	r3, r3, #4
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d11d      	bne.n	8018e98 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018e5c:	69fb      	ldr	r3, [r7, #28]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d102      	bne.n	8018e68 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e64:	61fb      	str	r3, [r7, #28]
 8018e66:	e017      	b.n	8018e98 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018e68:	7cfb      	ldrb	r3, [r7, #19]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d014      	beq.n	8018e98 <udp_input+0xf4>
 8018e6e:	4b53      	ldr	r3, [pc, #332]	; (8018fbc <udp_input+0x218>)
 8018e70:	695b      	ldr	r3, [r3, #20]
 8018e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e76:	d10f      	bne.n	8018e98 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018e78:	69fb      	ldr	r3, [r7, #28]
 8018e7a:	681a      	ldr	r2, [r3, #0]
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	3304      	adds	r3, #4
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d008      	beq.n	8018e98 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e88:	681a      	ldr	r2, [r3, #0]
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	3304      	adds	r3, #4
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d101      	bne.n	8018e98 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e96:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e9a:	8a9b      	ldrh	r3, [r3, #20]
 8018e9c:	8a3a      	ldrh	r2, [r7, #16]
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d118      	bne.n	8018ed4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d005      	beq.n	8018eb6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eac:	685a      	ldr	r2, [r3, #4]
 8018eae:	4b43      	ldr	r3, [pc, #268]	; (8018fbc <udp_input+0x218>)
 8018eb0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d10e      	bne.n	8018ed4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018eb6:	6a3b      	ldr	r3, [r7, #32]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d014      	beq.n	8018ee6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ebe:	68da      	ldr	r2, [r3, #12]
 8018ec0:	6a3b      	ldr	r3, [r7, #32]
 8018ec2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018ec4:	4b3e      	ldr	r3, [pc, #248]	; (8018fc0 <udp_input+0x21c>)
 8018ec6:	681a      	ldr	r2, [r3, #0]
 8018ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018ecc:	4a3c      	ldr	r2, [pc, #240]	; (8018fc0 <udp_input+0x21c>)
 8018ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018ed2:	e008      	b.n	8018ee6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	627b      	str	r3, [r7, #36]	; 0x24
 8018ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d1a7      	bne.n	8018e34 <udp_input+0x90>
 8018ee4:	e000      	b.n	8018ee8 <udp_input+0x144>
        break;
 8018ee6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d101      	bne.n	8018ef2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018eee:	69fb      	ldr	r3, [r7, #28]
 8018ef0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d002      	beq.n	8018efe <udp_input+0x15a>
    for_us = 1;
 8018ef8:	2301      	movs	r3, #1
 8018efa:	76fb      	strb	r3, [r7, #27]
 8018efc:	e00a      	b.n	8018f14 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	3304      	adds	r3, #4
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	4b2d      	ldr	r3, [pc, #180]	; (8018fbc <udp_input+0x218>)
 8018f06:	695b      	ldr	r3, [r3, #20]
 8018f08:	429a      	cmp	r2, r3
 8018f0a:	bf0c      	ite	eq
 8018f0c:	2301      	moveq	r3, #1
 8018f0e:	2300      	movne	r3, #0
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018f14:	7efb      	ldrb	r3, [r7, #27]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d041      	beq.n	8018f9e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018f1a:	2108      	movs	r1, #8
 8018f1c:	6878      	ldr	r0, [r7, #4]
 8018f1e:	f7f9 fa05 	bl	801232c <pbuf_remove_header>
 8018f22:	4603      	mov	r3, r0
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d00a      	beq.n	8018f3e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018f28:	4b20      	ldr	r3, [pc, #128]	; (8018fac <udp_input+0x208>)
 8018f2a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018f2e:	4925      	ldr	r1, [pc, #148]	; (8018fc4 <udp_input+0x220>)
 8018f30:	4820      	ldr	r0, [pc, #128]	; (8018fb4 <udp_input+0x210>)
 8018f32:	f002 feb7 	bl	801bca4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	f7f9 fa7e 	bl	8012438 <pbuf_free>
      goto end;
 8018f3c:	e032      	b.n	8018fa4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d012      	beq.n	8018f6a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f46:	699b      	ldr	r3, [r3, #24]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d00a      	beq.n	8018f62 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f4e:	699c      	ldr	r4, [r3, #24]
 8018f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f52:	69d8      	ldr	r0, [r3, #28]
 8018f54:	8a3b      	ldrh	r3, [r7, #16]
 8018f56:	9300      	str	r3, [sp, #0]
 8018f58:	4b1b      	ldr	r3, [pc, #108]	; (8018fc8 <udp_input+0x224>)
 8018f5a:	687a      	ldr	r2, [r7, #4]
 8018f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018f5e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018f60:	e021      	b.n	8018fa6 <udp_input+0x202>
        pbuf_free(p);
 8018f62:	6878      	ldr	r0, [r7, #4]
 8018f64:	f7f9 fa68 	bl	8012438 <pbuf_free>
        goto end;
 8018f68:	e01c      	b.n	8018fa4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018f6a:	7cfb      	ldrb	r3, [r7, #19]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d112      	bne.n	8018f96 <udp_input+0x1f2>
 8018f70:	4b12      	ldr	r3, [pc, #72]	; (8018fbc <udp_input+0x218>)
 8018f72:	695b      	ldr	r3, [r3, #20]
 8018f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018f78:	2be0      	cmp	r3, #224	; 0xe0
 8018f7a:	d00c      	beq.n	8018f96 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018f7c:	4b0f      	ldr	r3, [pc, #60]	; (8018fbc <udp_input+0x218>)
 8018f7e:	899b      	ldrh	r3, [r3, #12]
 8018f80:	3308      	adds	r3, #8
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	b21b      	sxth	r3, r3
 8018f86:	4619      	mov	r1, r3
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f7f9 fa42 	bl	8012412 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018f8e:	2103      	movs	r1, #3
 8018f90:	6878      	ldr	r0, [r7, #4]
 8018f92:	f001 f8ad 	bl	801a0f0 <icmp_dest_unreach>
      pbuf_free(p);
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f7f9 fa4e 	bl	8012438 <pbuf_free>
  return;
 8018f9c:	e003      	b.n	8018fa6 <udp_input+0x202>
    pbuf_free(p);
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f7f9 fa4a 	bl	8012438 <pbuf_free>
  return;
 8018fa4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018fa6:	372c      	adds	r7, #44	; 0x2c
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd90      	pop	{r4, r7, pc}
 8018fac:	0801f1cc 	.word	0x0801f1cc
 8018fb0:	0801f270 	.word	0x0801f270
 8018fb4:	0801f220 	.word	0x0801f220
 8018fb8:	0801f288 	.word	0x0801f288
 8018fbc:	20004728 	.word	0x20004728
 8018fc0:	2000b4ac 	.word	0x2000b4ac
 8018fc4:	0801f2a4 	.word	0x0801f2a4
 8018fc8:	20004738 	.word	0x20004738

08018fcc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018fcc:	b480      	push	{r7}
 8018fce:	b085      	sub	sp, #20
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
 8018fd4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d01e      	beq.n	801901a <udp_netif_ip_addr_changed+0x4e>
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d01a      	beq.n	801901a <udp_netif_ip_addr_changed+0x4e>
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d017      	beq.n	801901a <udp_netif_ip_addr_changed+0x4e>
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d013      	beq.n	801901a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018ff2:	4b0d      	ldr	r3, [pc, #52]	; (8019028 <udp_netif_ip_addr_changed+0x5c>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	60fb      	str	r3, [r7, #12]
 8018ff8:	e00c      	b.n	8019014 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	429a      	cmp	r2, r3
 8019004:	d103      	bne.n	801900e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	68db      	ldr	r3, [r3, #12]
 8019012:	60fb      	str	r3, [r7, #12]
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d1ef      	bne.n	8018ffa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801901a:	bf00      	nop
 801901c:	3714      	adds	r7, #20
 801901e:	46bd      	mov	sp, r7
 8019020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019024:	4770      	bx	lr
 8019026:	bf00      	nop
 8019028:	2000b4ac 	.word	0x2000b4ac

0801902c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b082      	sub	sp, #8
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019034:	4915      	ldr	r1, [pc, #84]	; (801908c <etharp_free_entry+0x60>)
 8019036:	687a      	ldr	r2, [r7, #4]
 8019038:	4613      	mov	r3, r2
 801903a:	005b      	lsls	r3, r3, #1
 801903c:	4413      	add	r3, r2
 801903e:	00db      	lsls	r3, r3, #3
 8019040:	440b      	add	r3, r1
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d013      	beq.n	8019070 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019048:	4910      	ldr	r1, [pc, #64]	; (801908c <etharp_free_entry+0x60>)
 801904a:	687a      	ldr	r2, [r7, #4]
 801904c:	4613      	mov	r3, r2
 801904e:	005b      	lsls	r3, r3, #1
 8019050:	4413      	add	r3, r2
 8019052:	00db      	lsls	r3, r3, #3
 8019054:	440b      	add	r3, r1
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	4618      	mov	r0, r3
 801905a:	f7f9 f9ed 	bl	8012438 <pbuf_free>
    arp_table[i].q = NULL;
 801905e:	490b      	ldr	r1, [pc, #44]	; (801908c <etharp_free_entry+0x60>)
 8019060:	687a      	ldr	r2, [r7, #4]
 8019062:	4613      	mov	r3, r2
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	4413      	add	r3, r2
 8019068:	00db      	lsls	r3, r3, #3
 801906a:	440b      	add	r3, r1
 801906c:	2200      	movs	r2, #0
 801906e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019070:	4906      	ldr	r1, [pc, #24]	; (801908c <etharp_free_entry+0x60>)
 8019072:	687a      	ldr	r2, [r7, #4]
 8019074:	4613      	mov	r3, r2
 8019076:	005b      	lsls	r3, r3, #1
 8019078:	4413      	add	r3, r2
 801907a:	00db      	lsls	r3, r3, #3
 801907c:	440b      	add	r3, r1
 801907e:	3314      	adds	r3, #20
 8019080:	2200      	movs	r2, #0
 8019082:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019084:	bf00      	nop
 8019086:	3708      	adds	r7, #8
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	2000b4b0 	.word	0x2000b4b0

08019090 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019096:	2300      	movs	r3, #0
 8019098:	607b      	str	r3, [r7, #4]
 801909a:	e096      	b.n	80191ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801909c:	494f      	ldr	r1, [pc, #316]	; (80191dc <etharp_tmr+0x14c>)
 801909e:	687a      	ldr	r2, [r7, #4]
 80190a0:	4613      	mov	r3, r2
 80190a2:	005b      	lsls	r3, r3, #1
 80190a4:	4413      	add	r3, r2
 80190a6:	00db      	lsls	r3, r3, #3
 80190a8:	440b      	add	r3, r1
 80190aa:	3314      	adds	r3, #20
 80190ac:	781b      	ldrb	r3, [r3, #0]
 80190ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80190b0:	78fb      	ldrb	r3, [r7, #3]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f000 8086 	beq.w	80191c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80190b8:	4948      	ldr	r1, [pc, #288]	; (80191dc <etharp_tmr+0x14c>)
 80190ba:	687a      	ldr	r2, [r7, #4]
 80190bc:	4613      	mov	r3, r2
 80190be:	005b      	lsls	r3, r3, #1
 80190c0:	4413      	add	r3, r2
 80190c2:	00db      	lsls	r3, r3, #3
 80190c4:	440b      	add	r3, r1
 80190c6:	3312      	adds	r3, #18
 80190c8:	881b      	ldrh	r3, [r3, #0]
 80190ca:	3301      	adds	r3, #1
 80190cc:	b298      	uxth	r0, r3
 80190ce:	4943      	ldr	r1, [pc, #268]	; (80191dc <etharp_tmr+0x14c>)
 80190d0:	687a      	ldr	r2, [r7, #4]
 80190d2:	4613      	mov	r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	4413      	add	r3, r2
 80190d8:	00db      	lsls	r3, r3, #3
 80190da:	440b      	add	r3, r1
 80190dc:	3312      	adds	r3, #18
 80190de:	4602      	mov	r2, r0
 80190e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80190e2:	493e      	ldr	r1, [pc, #248]	; (80191dc <etharp_tmr+0x14c>)
 80190e4:	687a      	ldr	r2, [r7, #4]
 80190e6:	4613      	mov	r3, r2
 80190e8:	005b      	lsls	r3, r3, #1
 80190ea:	4413      	add	r3, r2
 80190ec:	00db      	lsls	r3, r3, #3
 80190ee:	440b      	add	r3, r1
 80190f0:	3312      	adds	r3, #18
 80190f2:	881b      	ldrh	r3, [r3, #0]
 80190f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80190f8:	d215      	bcs.n	8019126 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80190fa:	4938      	ldr	r1, [pc, #224]	; (80191dc <etharp_tmr+0x14c>)
 80190fc:	687a      	ldr	r2, [r7, #4]
 80190fe:	4613      	mov	r3, r2
 8019100:	005b      	lsls	r3, r3, #1
 8019102:	4413      	add	r3, r2
 8019104:	00db      	lsls	r3, r3, #3
 8019106:	440b      	add	r3, r1
 8019108:	3314      	adds	r3, #20
 801910a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801910c:	2b01      	cmp	r3, #1
 801910e:	d10e      	bne.n	801912e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019110:	4932      	ldr	r1, [pc, #200]	; (80191dc <etharp_tmr+0x14c>)
 8019112:	687a      	ldr	r2, [r7, #4]
 8019114:	4613      	mov	r3, r2
 8019116:	005b      	lsls	r3, r3, #1
 8019118:	4413      	add	r3, r2
 801911a:	00db      	lsls	r3, r3, #3
 801911c:	440b      	add	r3, r1
 801911e:	3312      	adds	r3, #18
 8019120:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019122:	2b04      	cmp	r3, #4
 8019124:	d903      	bls.n	801912e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019126:	6878      	ldr	r0, [r7, #4]
 8019128:	f7ff ff80 	bl	801902c <etharp_free_entry>
 801912c:	e04a      	b.n	80191c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801912e:	492b      	ldr	r1, [pc, #172]	; (80191dc <etharp_tmr+0x14c>)
 8019130:	687a      	ldr	r2, [r7, #4]
 8019132:	4613      	mov	r3, r2
 8019134:	005b      	lsls	r3, r3, #1
 8019136:	4413      	add	r3, r2
 8019138:	00db      	lsls	r3, r3, #3
 801913a:	440b      	add	r3, r1
 801913c:	3314      	adds	r3, #20
 801913e:	781b      	ldrb	r3, [r3, #0]
 8019140:	2b03      	cmp	r3, #3
 8019142:	d10a      	bne.n	801915a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019144:	4925      	ldr	r1, [pc, #148]	; (80191dc <etharp_tmr+0x14c>)
 8019146:	687a      	ldr	r2, [r7, #4]
 8019148:	4613      	mov	r3, r2
 801914a:	005b      	lsls	r3, r3, #1
 801914c:	4413      	add	r3, r2
 801914e:	00db      	lsls	r3, r3, #3
 8019150:	440b      	add	r3, r1
 8019152:	3314      	adds	r3, #20
 8019154:	2204      	movs	r2, #4
 8019156:	701a      	strb	r2, [r3, #0]
 8019158:	e034      	b.n	80191c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801915a:	4920      	ldr	r1, [pc, #128]	; (80191dc <etharp_tmr+0x14c>)
 801915c:	687a      	ldr	r2, [r7, #4]
 801915e:	4613      	mov	r3, r2
 8019160:	005b      	lsls	r3, r3, #1
 8019162:	4413      	add	r3, r2
 8019164:	00db      	lsls	r3, r3, #3
 8019166:	440b      	add	r3, r1
 8019168:	3314      	adds	r3, #20
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	2b04      	cmp	r3, #4
 801916e:	d10a      	bne.n	8019186 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019170:	491a      	ldr	r1, [pc, #104]	; (80191dc <etharp_tmr+0x14c>)
 8019172:	687a      	ldr	r2, [r7, #4]
 8019174:	4613      	mov	r3, r2
 8019176:	005b      	lsls	r3, r3, #1
 8019178:	4413      	add	r3, r2
 801917a:	00db      	lsls	r3, r3, #3
 801917c:	440b      	add	r3, r1
 801917e:	3314      	adds	r3, #20
 8019180:	2202      	movs	r2, #2
 8019182:	701a      	strb	r2, [r3, #0]
 8019184:	e01e      	b.n	80191c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019186:	4915      	ldr	r1, [pc, #84]	; (80191dc <etharp_tmr+0x14c>)
 8019188:	687a      	ldr	r2, [r7, #4]
 801918a:	4613      	mov	r3, r2
 801918c:	005b      	lsls	r3, r3, #1
 801918e:	4413      	add	r3, r2
 8019190:	00db      	lsls	r3, r3, #3
 8019192:	440b      	add	r3, r1
 8019194:	3314      	adds	r3, #20
 8019196:	781b      	ldrb	r3, [r3, #0]
 8019198:	2b01      	cmp	r3, #1
 801919a:	d113      	bne.n	80191c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801919c:	490f      	ldr	r1, [pc, #60]	; (80191dc <etharp_tmr+0x14c>)
 801919e:	687a      	ldr	r2, [r7, #4]
 80191a0:	4613      	mov	r3, r2
 80191a2:	005b      	lsls	r3, r3, #1
 80191a4:	4413      	add	r3, r2
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	440b      	add	r3, r1
 80191aa:	3308      	adds	r3, #8
 80191ac:	6818      	ldr	r0, [r3, #0]
 80191ae:	687a      	ldr	r2, [r7, #4]
 80191b0:	4613      	mov	r3, r2
 80191b2:	005b      	lsls	r3, r3, #1
 80191b4:	4413      	add	r3, r2
 80191b6:	00db      	lsls	r3, r3, #3
 80191b8:	4a08      	ldr	r2, [pc, #32]	; (80191dc <etharp_tmr+0x14c>)
 80191ba:	4413      	add	r3, r2
 80191bc:	3304      	adds	r3, #4
 80191be:	4619      	mov	r1, r3
 80191c0:	f000 fe6e 	bl	8019ea0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	3301      	adds	r3, #1
 80191c8:	607b      	str	r3, [r7, #4]
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	2b09      	cmp	r3, #9
 80191ce:	f77f af65 	ble.w	801909c <etharp_tmr+0xc>
      }
    }
  }
}
 80191d2:	bf00      	nop
 80191d4:	bf00      	nop
 80191d6:	3708      	adds	r7, #8
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd80      	pop	{r7, pc}
 80191dc:	2000b4b0 	.word	0x2000b4b0

080191e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b08a      	sub	sp, #40	; 0x28
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	60f8      	str	r0, [r7, #12]
 80191e8:	460b      	mov	r3, r1
 80191ea:	607a      	str	r2, [r7, #4]
 80191ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80191ee:	230a      	movs	r3, #10
 80191f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80191f2:	230a      	movs	r3, #10
 80191f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80191f6:	230a      	movs	r3, #10
 80191f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80191fa:	2300      	movs	r3, #0
 80191fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80191fe:	230a      	movs	r3, #10
 8019200:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019202:	2300      	movs	r3, #0
 8019204:	83bb      	strh	r3, [r7, #28]
 8019206:	2300      	movs	r3, #0
 8019208:	837b      	strh	r3, [r7, #26]
 801920a:	2300      	movs	r3, #0
 801920c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801920e:	2300      	movs	r3, #0
 8019210:	843b      	strh	r3, [r7, #32]
 8019212:	e0ae      	b.n	8019372 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019218:	49a6      	ldr	r1, [pc, #664]	; (80194b4 <etharp_find_entry+0x2d4>)
 801921a:	4613      	mov	r3, r2
 801921c:	005b      	lsls	r3, r3, #1
 801921e:	4413      	add	r3, r2
 8019220:	00db      	lsls	r3, r3, #3
 8019222:	440b      	add	r3, r1
 8019224:	3314      	adds	r3, #20
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801922a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801922e:	2b0a      	cmp	r3, #10
 8019230:	d105      	bne.n	801923e <etharp_find_entry+0x5e>
 8019232:	7dfb      	ldrb	r3, [r7, #23]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d102      	bne.n	801923e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019238:	8c3b      	ldrh	r3, [r7, #32]
 801923a:	847b      	strh	r3, [r7, #34]	; 0x22
 801923c:	e095      	b.n	801936a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801923e:	7dfb      	ldrb	r3, [r7, #23]
 8019240:	2b00      	cmp	r3, #0
 8019242:	f000 8092 	beq.w	801936a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019246:	7dfb      	ldrb	r3, [r7, #23]
 8019248:	2b01      	cmp	r3, #1
 801924a:	d009      	beq.n	8019260 <etharp_find_entry+0x80>
 801924c:	7dfb      	ldrb	r3, [r7, #23]
 801924e:	2b01      	cmp	r3, #1
 8019250:	d806      	bhi.n	8019260 <etharp_find_entry+0x80>
 8019252:	4b99      	ldr	r3, [pc, #612]	; (80194b8 <etharp_find_entry+0x2d8>)
 8019254:	f240 1223 	movw	r2, #291	; 0x123
 8019258:	4998      	ldr	r1, [pc, #608]	; (80194bc <etharp_find_entry+0x2dc>)
 801925a:	4899      	ldr	r0, [pc, #612]	; (80194c0 <etharp_find_entry+0x2e0>)
 801925c:	f002 fd22 	bl	801bca4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d020      	beq.n	80192a8 <etharp_find_entry+0xc8>
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	6819      	ldr	r1, [r3, #0]
 801926a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801926e:	4891      	ldr	r0, [pc, #580]	; (80194b4 <etharp_find_entry+0x2d4>)
 8019270:	4613      	mov	r3, r2
 8019272:	005b      	lsls	r3, r3, #1
 8019274:	4413      	add	r3, r2
 8019276:	00db      	lsls	r3, r3, #3
 8019278:	4403      	add	r3, r0
 801927a:	3304      	adds	r3, #4
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	4299      	cmp	r1, r3
 8019280:	d112      	bne.n	80192a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d00c      	beq.n	80192a2 <etharp_find_entry+0xc2>
 8019288:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801928c:	4989      	ldr	r1, [pc, #548]	; (80194b4 <etharp_find_entry+0x2d4>)
 801928e:	4613      	mov	r3, r2
 8019290:	005b      	lsls	r3, r3, #1
 8019292:	4413      	add	r3, r2
 8019294:	00db      	lsls	r3, r3, #3
 8019296:	440b      	add	r3, r1
 8019298:	3308      	adds	r3, #8
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	687a      	ldr	r2, [r7, #4]
 801929e:	429a      	cmp	r2, r3
 80192a0:	d102      	bne.n	80192a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80192a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192a6:	e100      	b.n	80194aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80192a8:	7dfb      	ldrb	r3, [r7, #23]
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d140      	bne.n	8019330 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80192ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192b2:	4980      	ldr	r1, [pc, #512]	; (80194b4 <etharp_find_entry+0x2d4>)
 80192b4:	4613      	mov	r3, r2
 80192b6:	005b      	lsls	r3, r3, #1
 80192b8:	4413      	add	r3, r2
 80192ba:	00db      	lsls	r3, r3, #3
 80192bc:	440b      	add	r3, r1
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d01a      	beq.n	80192fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80192c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192c8:	497a      	ldr	r1, [pc, #488]	; (80194b4 <etharp_find_entry+0x2d4>)
 80192ca:	4613      	mov	r3, r2
 80192cc:	005b      	lsls	r3, r3, #1
 80192ce:	4413      	add	r3, r2
 80192d0:	00db      	lsls	r3, r3, #3
 80192d2:	440b      	add	r3, r1
 80192d4:	3312      	adds	r3, #18
 80192d6:	881b      	ldrh	r3, [r3, #0]
 80192d8:	8bba      	ldrh	r2, [r7, #28]
 80192da:	429a      	cmp	r2, r3
 80192dc:	d845      	bhi.n	801936a <etharp_find_entry+0x18a>
            old_queue = i;
 80192de:	8c3b      	ldrh	r3, [r7, #32]
 80192e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80192e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192e6:	4973      	ldr	r1, [pc, #460]	; (80194b4 <etharp_find_entry+0x2d4>)
 80192e8:	4613      	mov	r3, r2
 80192ea:	005b      	lsls	r3, r3, #1
 80192ec:	4413      	add	r3, r2
 80192ee:	00db      	lsls	r3, r3, #3
 80192f0:	440b      	add	r3, r1
 80192f2:	3312      	adds	r3, #18
 80192f4:	881b      	ldrh	r3, [r3, #0]
 80192f6:	83bb      	strh	r3, [r7, #28]
 80192f8:	e037      	b.n	801936a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80192fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192fe:	496d      	ldr	r1, [pc, #436]	; (80194b4 <etharp_find_entry+0x2d4>)
 8019300:	4613      	mov	r3, r2
 8019302:	005b      	lsls	r3, r3, #1
 8019304:	4413      	add	r3, r2
 8019306:	00db      	lsls	r3, r3, #3
 8019308:	440b      	add	r3, r1
 801930a:	3312      	adds	r3, #18
 801930c:	881b      	ldrh	r3, [r3, #0]
 801930e:	8b7a      	ldrh	r2, [r7, #26]
 8019310:	429a      	cmp	r2, r3
 8019312:	d82a      	bhi.n	801936a <etharp_find_entry+0x18a>
            old_pending = i;
 8019314:	8c3b      	ldrh	r3, [r7, #32]
 8019316:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019318:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801931c:	4965      	ldr	r1, [pc, #404]	; (80194b4 <etharp_find_entry+0x2d4>)
 801931e:	4613      	mov	r3, r2
 8019320:	005b      	lsls	r3, r3, #1
 8019322:	4413      	add	r3, r2
 8019324:	00db      	lsls	r3, r3, #3
 8019326:	440b      	add	r3, r1
 8019328:	3312      	adds	r3, #18
 801932a:	881b      	ldrh	r3, [r3, #0]
 801932c:	837b      	strh	r3, [r7, #26]
 801932e:	e01c      	b.n	801936a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019330:	7dfb      	ldrb	r3, [r7, #23]
 8019332:	2b01      	cmp	r3, #1
 8019334:	d919      	bls.n	801936a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019336:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801933a:	495e      	ldr	r1, [pc, #376]	; (80194b4 <etharp_find_entry+0x2d4>)
 801933c:	4613      	mov	r3, r2
 801933e:	005b      	lsls	r3, r3, #1
 8019340:	4413      	add	r3, r2
 8019342:	00db      	lsls	r3, r3, #3
 8019344:	440b      	add	r3, r1
 8019346:	3312      	adds	r3, #18
 8019348:	881b      	ldrh	r3, [r3, #0]
 801934a:	8b3a      	ldrh	r2, [r7, #24]
 801934c:	429a      	cmp	r2, r3
 801934e:	d80c      	bhi.n	801936a <etharp_find_entry+0x18a>
            old_stable = i;
 8019350:	8c3b      	ldrh	r3, [r7, #32]
 8019352:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019354:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019358:	4956      	ldr	r1, [pc, #344]	; (80194b4 <etharp_find_entry+0x2d4>)
 801935a:	4613      	mov	r3, r2
 801935c:	005b      	lsls	r3, r3, #1
 801935e:	4413      	add	r3, r2
 8019360:	00db      	lsls	r3, r3, #3
 8019362:	440b      	add	r3, r1
 8019364:	3312      	adds	r3, #18
 8019366:	881b      	ldrh	r3, [r3, #0]
 8019368:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801936a:	8c3b      	ldrh	r3, [r7, #32]
 801936c:	3301      	adds	r3, #1
 801936e:	b29b      	uxth	r3, r3
 8019370:	843b      	strh	r3, [r7, #32]
 8019372:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019376:	2b09      	cmp	r3, #9
 8019378:	f77f af4c 	ble.w	8019214 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801937c:	7afb      	ldrb	r3, [r7, #11]
 801937e:	f003 0302 	and.w	r3, r3, #2
 8019382:	2b00      	cmp	r3, #0
 8019384:	d108      	bne.n	8019398 <etharp_find_entry+0x1b8>
 8019386:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801938a:	2b0a      	cmp	r3, #10
 801938c:	d107      	bne.n	801939e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801938e:	7afb      	ldrb	r3, [r7, #11]
 8019390:	f003 0301 	and.w	r3, r3, #1
 8019394:	2b00      	cmp	r3, #0
 8019396:	d102      	bne.n	801939e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019398:	f04f 33ff 	mov.w	r3, #4294967295
 801939c:	e085      	b.n	80194aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801939e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80193a2:	2b09      	cmp	r3, #9
 80193a4:	dc02      	bgt.n	80193ac <etharp_find_entry+0x1cc>
    i = empty;
 80193a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80193a8:	843b      	strh	r3, [r7, #32]
 80193aa:	e039      	b.n	8019420 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80193ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80193b0:	2b09      	cmp	r3, #9
 80193b2:	dc14      	bgt.n	80193de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80193b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80193b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80193b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193bc:	493d      	ldr	r1, [pc, #244]	; (80194b4 <etharp_find_entry+0x2d4>)
 80193be:	4613      	mov	r3, r2
 80193c0:	005b      	lsls	r3, r3, #1
 80193c2:	4413      	add	r3, r2
 80193c4:	00db      	lsls	r3, r3, #3
 80193c6:	440b      	add	r3, r1
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d018      	beq.n	8019400 <etharp_find_entry+0x220>
 80193ce:	4b3a      	ldr	r3, [pc, #232]	; (80194b8 <etharp_find_entry+0x2d8>)
 80193d0:	f240 126d 	movw	r2, #365	; 0x16d
 80193d4:	493b      	ldr	r1, [pc, #236]	; (80194c4 <etharp_find_entry+0x2e4>)
 80193d6:	483a      	ldr	r0, [pc, #232]	; (80194c0 <etharp_find_entry+0x2e0>)
 80193d8:	f002 fc64 	bl	801bca4 <iprintf>
 80193dc:	e010      	b.n	8019400 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80193de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80193e2:	2b09      	cmp	r3, #9
 80193e4:	dc02      	bgt.n	80193ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80193e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80193e8:	843b      	strh	r3, [r7, #32]
 80193ea:	e009      	b.n	8019400 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80193ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80193f0:	2b09      	cmp	r3, #9
 80193f2:	dc02      	bgt.n	80193fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80193f4:	8bfb      	ldrh	r3, [r7, #30]
 80193f6:	843b      	strh	r3, [r7, #32]
 80193f8:	e002      	b.n	8019400 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80193fa:	f04f 33ff 	mov.w	r3, #4294967295
 80193fe:	e054      	b.n	80194aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019400:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019404:	2b09      	cmp	r3, #9
 8019406:	dd06      	ble.n	8019416 <etharp_find_entry+0x236>
 8019408:	4b2b      	ldr	r3, [pc, #172]	; (80194b8 <etharp_find_entry+0x2d8>)
 801940a:	f240 127f 	movw	r2, #383	; 0x17f
 801940e:	492e      	ldr	r1, [pc, #184]	; (80194c8 <etharp_find_entry+0x2e8>)
 8019410:	482b      	ldr	r0, [pc, #172]	; (80194c0 <etharp_find_entry+0x2e0>)
 8019412:	f002 fc47 	bl	801bca4 <iprintf>
    etharp_free_entry(i);
 8019416:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801941a:	4618      	mov	r0, r3
 801941c:	f7ff fe06 	bl	801902c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019420:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019424:	2b09      	cmp	r3, #9
 8019426:	dd06      	ble.n	8019436 <etharp_find_entry+0x256>
 8019428:	4b23      	ldr	r3, [pc, #140]	; (80194b8 <etharp_find_entry+0x2d8>)
 801942a:	f240 1283 	movw	r2, #387	; 0x183
 801942e:	4926      	ldr	r1, [pc, #152]	; (80194c8 <etharp_find_entry+0x2e8>)
 8019430:	4823      	ldr	r0, [pc, #140]	; (80194c0 <etharp_find_entry+0x2e0>)
 8019432:	f002 fc37 	bl	801bca4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801943a:	491e      	ldr	r1, [pc, #120]	; (80194b4 <etharp_find_entry+0x2d4>)
 801943c:	4613      	mov	r3, r2
 801943e:	005b      	lsls	r3, r3, #1
 8019440:	4413      	add	r3, r2
 8019442:	00db      	lsls	r3, r3, #3
 8019444:	440b      	add	r3, r1
 8019446:	3314      	adds	r3, #20
 8019448:	781b      	ldrb	r3, [r3, #0]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d006      	beq.n	801945c <etharp_find_entry+0x27c>
 801944e:	4b1a      	ldr	r3, [pc, #104]	; (80194b8 <etharp_find_entry+0x2d8>)
 8019450:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8019454:	491d      	ldr	r1, [pc, #116]	; (80194cc <etharp_find_entry+0x2ec>)
 8019456:	481a      	ldr	r0, [pc, #104]	; (80194c0 <etharp_find_entry+0x2e0>)
 8019458:	f002 fc24 	bl	801bca4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d00b      	beq.n	801947a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019462:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	6819      	ldr	r1, [r3, #0]
 801946a:	4812      	ldr	r0, [pc, #72]	; (80194b4 <etharp_find_entry+0x2d4>)
 801946c:	4613      	mov	r3, r2
 801946e:	005b      	lsls	r3, r3, #1
 8019470:	4413      	add	r3, r2
 8019472:	00db      	lsls	r3, r3, #3
 8019474:	4403      	add	r3, r0
 8019476:	3304      	adds	r3, #4
 8019478:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801947a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801947e:	490d      	ldr	r1, [pc, #52]	; (80194b4 <etharp_find_entry+0x2d4>)
 8019480:	4613      	mov	r3, r2
 8019482:	005b      	lsls	r3, r3, #1
 8019484:	4413      	add	r3, r2
 8019486:	00db      	lsls	r3, r3, #3
 8019488:	440b      	add	r3, r1
 801948a:	3312      	adds	r3, #18
 801948c:	2200      	movs	r2, #0
 801948e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019490:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019494:	4907      	ldr	r1, [pc, #28]	; (80194b4 <etharp_find_entry+0x2d4>)
 8019496:	4613      	mov	r3, r2
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	4413      	add	r3, r2
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	440b      	add	r3, r1
 80194a0:	3308      	adds	r3, #8
 80194a2:	687a      	ldr	r2, [r7, #4]
 80194a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80194a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	3728      	adds	r7, #40	; 0x28
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	2000b4b0 	.word	0x2000b4b0
 80194b8:	0801f530 	.word	0x0801f530
 80194bc:	0801f568 	.word	0x0801f568
 80194c0:	0801f5a8 	.word	0x0801f5a8
 80194c4:	0801f5d0 	.word	0x0801f5d0
 80194c8:	0801f5e8 	.word	0x0801f5e8
 80194cc:	0801f5fc 	.word	0x0801f5fc

080194d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b088      	sub	sp, #32
 80194d4:	af02      	add	r7, sp, #8
 80194d6:	60f8      	str	r0, [r7, #12]
 80194d8:	60b9      	str	r1, [r7, #8]
 80194da:	607a      	str	r2, [r7, #4]
 80194dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80194e4:	2b06      	cmp	r3, #6
 80194e6:	d006      	beq.n	80194f6 <etharp_update_arp_entry+0x26>
 80194e8:	4b48      	ldr	r3, [pc, #288]	; (801960c <etharp_update_arp_entry+0x13c>)
 80194ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 80194ee:	4948      	ldr	r1, [pc, #288]	; (8019610 <etharp_update_arp_entry+0x140>)
 80194f0:	4848      	ldr	r0, [pc, #288]	; (8019614 <etharp_update_arp_entry+0x144>)
 80194f2:	f002 fbd7 	bl	801bca4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d012      	beq.n	8019522 <etharp_update_arp_entry+0x52>
 80194fc:	68bb      	ldr	r3, [r7, #8]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d00e      	beq.n	8019522 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	68f9      	ldr	r1, [r7, #12]
 801950a:	4618      	mov	r0, r3
 801950c:	f001 f91a 	bl	801a744 <ip4_addr_isbroadcast_u32>
 8019510:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019512:	2b00      	cmp	r3, #0
 8019514:	d105      	bne.n	8019522 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019516:	68bb      	ldr	r3, [r7, #8]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801951e:	2be0      	cmp	r3, #224	; 0xe0
 8019520:	d102      	bne.n	8019528 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019522:	f06f 030f 	mvn.w	r3, #15
 8019526:	e06c      	b.n	8019602 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019528:	78fb      	ldrb	r3, [r7, #3]
 801952a:	68fa      	ldr	r2, [r7, #12]
 801952c:	4619      	mov	r1, r3
 801952e:	68b8      	ldr	r0, [r7, #8]
 8019530:	f7ff fe56 	bl	80191e0 <etharp_find_entry>
 8019534:	4603      	mov	r3, r0
 8019536:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019538:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801953c:	2b00      	cmp	r3, #0
 801953e:	da02      	bge.n	8019546 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019540:	8afb      	ldrh	r3, [r7, #22]
 8019542:	b25b      	sxtb	r3, r3
 8019544:	e05d      	b.n	8019602 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019546:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801954a:	4933      	ldr	r1, [pc, #204]	; (8019618 <etharp_update_arp_entry+0x148>)
 801954c:	4613      	mov	r3, r2
 801954e:	005b      	lsls	r3, r3, #1
 8019550:	4413      	add	r3, r2
 8019552:	00db      	lsls	r3, r3, #3
 8019554:	440b      	add	r3, r1
 8019556:	3314      	adds	r3, #20
 8019558:	2202      	movs	r2, #2
 801955a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801955c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019560:	492d      	ldr	r1, [pc, #180]	; (8019618 <etharp_update_arp_entry+0x148>)
 8019562:	4613      	mov	r3, r2
 8019564:	005b      	lsls	r3, r3, #1
 8019566:	4413      	add	r3, r2
 8019568:	00db      	lsls	r3, r3, #3
 801956a:	440b      	add	r3, r1
 801956c:	3308      	adds	r3, #8
 801956e:	68fa      	ldr	r2, [r7, #12]
 8019570:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019572:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019576:	4613      	mov	r3, r2
 8019578:	005b      	lsls	r3, r3, #1
 801957a:	4413      	add	r3, r2
 801957c:	00db      	lsls	r3, r3, #3
 801957e:	3308      	adds	r3, #8
 8019580:	4a25      	ldr	r2, [pc, #148]	; (8019618 <etharp_update_arp_entry+0x148>)
 8019582:	4413      	add	r3, r2
 8019584:	3304      	adds	r3, #4
 8019586:	2206      	movs	r2, #6
 8019588:	6879      	ldr	r1, [r7, #4]
 801958a:	4618      	mov	r0, r3
 801958c:	f002 fcfb 	bl	801bf86 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019590:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019594:	4920      	ldr	r1, [pc, #128]	; (8019618 <etharp_update_arp_entry+0x148>)
 8019596:	4613      	mov	r3, r2
 8019598:	005b      	lsls	r3, r3, #1
 801959a:	4413      	add	r3, r2
 801959c:	00db      	lsls	r3, r3, #3
 801959e:	440b      	add	r3, r1
 80195a0:	3312      	adds	r3, #18
 80195a2:	2200      	movs	r2, #0
 80195a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80195a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80195aa:	491b      	ldr	r1, [pc, #108]	; (8019618 <etharp_update_arp_entry+0x148>)
 80195ac:	4613      	mov	r3, r2
 80195ae:	005b      	lsls	r3, r3, #1
 80195b0:	4413      	add	r3, r2
 80195b2:	00db      	lsls	r3, r3, #3
 80195b4:	440b      	add	r3, r1
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d021      	beq.n	8019600 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80195bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80195c0:	4915      	ldr	r1, [pc, #84]	; (8019618 <etharp_update_arp_entry+0x148>)
 80195c2:	4613      	mov	r3, r2
 80195c4:	005b      	lsls	r3, r3, #1
 80195c6:	4413      	add	r3, r2
 80195c8:	00db      	lsls	r3, r3, #3
 80195ca:	440b      	add	r3, r1
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80195d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80195d4:	4910      	ldr	r1, [pc, #64]	; (8019618 <etharp_update_arp_entry+0x148>)
 80195d6:	4613      	mov	r3, r2
 80195d8:	005b      	lsls	r3, r3, #1
 80195da:	4413      	add	r3, r2
 80195dc:	00db      	lsls	r3, r3, #3
 80195de:	440b      	add	r3, r1
 80195e0:	2200      	movs	r2, #0
 80195e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80195ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80195ee:	9300      	str	r3, [sp, #0]
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	6939      	ldr	r1, [r7, #16]
 80195f4:	68f8      	ldr	r0, [r7, #12]
 80195f6:	f001 ffb3 	bl	801b560 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80195fa:	6938      	ldr	r0, [r7, #16]
 80195fc:	f7f8 ff1c 	bl	8012438 <pbuf_free>
  }
  return ERR_OK;
 8019600:	2300      	movs	r3, #0
}
 8019602:	4618      	mov	r0, r3
 8019604:	3718      	adds	r7, #24
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}
 801960a:	bf00      	nop
 801960c:	0801f530 	.word	0x0801f530
 8019610:	0801f628 	.word	0x0801f628
 8019614:	0801f5a8 	.word	0x0801f5a8
 8019618:	2000b4b0 	.word	0x2000b4b0

0801961c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b084      	sub	sp, #16
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019624:	2300      	movs	r3, #0
 8019626:	60fb      	str	r3, [r7, #12]
 8019628:	e01e      	b.n	8019668 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801962a:	4913      	ldr	r1, [pc, #76]	; (8019678 <etharp_cleanup_netif+0x5c>)
 801962c:	68fa      	ldr	r2, [r7, #12]
 801962e:	4613      	mov	r3, r2
 8019630:	005b      	lsls	r3, r3, #1
 8019632:	4413      	add	r3, r2
 8019634:	00db      	lsls	r3, r3, #3
 8019636:	440b      	add	r3, r1
 8019638:	3314      	adds	r3, #20
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801963e:	7afb      	ldrb	r3, [r7, #11]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d00e      	beq.n	8019662 <etharp_cleanup_netif+0x46>
 8019644:	490c      	ldr	r1, [pc, #48]	; (8019678 <etharp_cleanup_netif+0x5c>)
 8019646:	68fa      	ldr	r2, [r7, #12]
 8019648:	4613      	mov	r3, r2
 801964a:	005b      	lsls	r3, r3, #1
 801964c:	4413      	add	r3, r2
 801964e:	00db      	lsls	r3, r3, #3
 8019650:	440b      	add	r3, r1
 8019652:	3308      	adds	r3, #8
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	687a      	ldr	r2, [r7, #4]
 8019658:	429a      	cmp	r2, r3
 801965a:	d102      	bne.n	8019662 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801965c:	68f8      	ldr	r0, [r7, #12]
 801965e:	f7ff fce5 	bl	801902c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	3301      	adds	r3, #1
 8019666:	60fb      	str	r3, [r7, #12]
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	2b09      	cmp	r3, #9
 801966c:	dddd      	ble.n	801962a <etharp_cleanup_netif+0xe>
    }
  }
}
 801966e:	bf00      	nop
 8019670:	bf00      	nop
 8019672:	3710      	adds	r7, #16
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}
 8019678:	2000b4b0 	.word	0x2000b4b0

0801967c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801967c:	b5b0      	push	{r4, r5, r7, lr}
 801967e:	b08a      	sub	sp, #40	; 0x28
 8019680:	af04      	add	r7, sp, #16
 8019682:	6078      	str	r0, [r7, #4]
 8019684:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019686:	683b      	ldr	r3, [r7, #0]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d107      	bne.n	801969c <etharp_input+0x20>
 801968c:	4b3d      	ldr	r3, [pc, #244]	; (8019784 <etharp_input+0x108>)
 801968e:	f240 228a 	movw	r2, #650	; 0x28a
 8019692:	493d      	ldr	r1, [pc, #244]	; (8019788 <etharp_input+0x10c>)
 8019694:	483d      	ldr	r0, [pc, #244]	; (801978c <etharp_input+0x110>)
 8019696:	f002 fb05 	bl	801bca4 <iprintf>
 801969a:	e06f      	b.n	801977c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	685b      	ldr	r3, [r3, #4]
 80196a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80196a2:	693b      	ldr	r3, [r7, #16]
 80196a4:	881b      	ldrh	r3, [r3, #0]
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80196ac:	d10c      	bne.n	80196c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80196ae:	693b      	ldr	r3, [r7, #16]
 80196b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80196b2:	2b06      	cmp	r3, #6
 80196b4:	d108      	bne.n	80196c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80196b6:	693b      	ldr	r3, [r7, #16]
 80196b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80196ba:	2b04      	cmp	r3, #4
 80196bc:	d104      	bne.n	80196c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80196be:	693b      	ldr	r3, [r7, #16]
 80196c0:	885b      	ldrh	r3, [r3, #2]
 80196c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80196c4:	2b08      	cmp	r3, #8
 80196c6:	d003      	beq.n	80196d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	f7f8 feb5 	bl	8012438 <pbuf_free>
    return;
 80196ce:	e055      	b.n	801977c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80196d0:	693b      	ldr	r3, [r7, #16]
 80196d2:	330e      	adds	r3, #14
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80196d8:	693b      	ldr	r3, [r7, #16]
 80196da:	3318      	adds	r3, #24
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	3304      	adds	r3, #4
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d102      	bne.n	80196f0 <etharp_input+0x74>
    for_us = 0;
 80196ea:	2300      	movs	r3, #0
 80196ec:	75fb      	strb	r3, [r7, #23]
 80196ee:	e009      	b.n	8019704 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80196f0:	68ba      	ldr	r2, [r7, #8]
 80196f2:	683b      	ldr	r3, [r7, #0]
 80196f4:	3304      	adds	r3, #4
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	429a      	cmp	r2, r3
 80196fa:	bf0c      	ite	eq
 80196fc:	2301      	moveq	r3, #1
 80196fe:	2300      	movne	r3, #0
 8019700:	b2db      	uxtb	r3, r3
 8019702:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019704:	693b      	ldr	r3, [r7, #16]
 8019706:	f103 0208 	add.w	r2, r3, #8
 801970a:	7dfb      	ldrb	r3, [r7, #23]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d001      	beq.n	8019714 <etharp_input+0x98>
 8019710:	2301      	movs	r3, #1
 8019712:	e000      	b.n	8019716 <etharp_input+0x9a>
 8019714:	2302      	movs	r3, #2
 8019716:	f107 010c 	add.w	r1, r7, #12
 801971a:	6838      	ldr	r0, [r7, #0]
 801971c:	f7ff fed8 	bl	80194d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019720:	693b      	ldr	r3, [r7, #16]
 8019722:	88db      	ldrh	r3, [r3, #6]
 8019724:	b29b      	uxth	r3, r3
 8019726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801972a:	d003      	beq.n	8019734 <etharp_input+0xb8>
 801972c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019730:	d01e      	beq.n	8019770 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019732:	e020      	b.n	8019776 <etharp_input+0xfa>
      if (for_us) {
 8019734:	7dfb      	ldrb	r3, [r7, #23]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d01c      	beq.n	8019774 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019746:	683b      	ldr	r3, [r7, #0]
 8019748:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019750:	693a      	ldr	r2, [r7, #16]
 8019752:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019754:	2102      	movs	r1, #2
 8019756:	9103      	str	r1, [sp, #12]
 8019758:	f107 010c 	add.w	r1, r7, #12
 801975c:	9102      	str	r1, [sp, #8]
 801975e:	9201      	str	r2, [sp, #4]
 8019760:	9300      	str	r3, [sp, #0]
 8019762:	462b      	mov	r3, r5
 8019764:	4622      	mov	r2, r4
 8019766:	4601      	mov	r1, r0
 8019768:	6838      	ldr	r0, [r7, #0]
 801976a:	f000 faeb 	bl	8019d44 <etharp_raw>
      break;
 801976e:	e001      	b.n	8019774 <etharp_input+0xf8>
      break;
 8019770:	bf00      	nop
 8019772:	e000      	b.n	8019776 <etharp_input+0xfa>
      break;
 8019774:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019776:	6878      	ldr	r0, [r7, #4]
 8019778:	f7f8 fe5e 	bl	8012438 <pbuf_free>
}
 801977c:	3718      	adds	r7, #24
 801977e:	46bd      	mov	sp, r7
 8019780:	bdb0      	pop	{r4, r5, r7, pc}
 8019782:	bf00      	nop
 8019784:	0801f530 	.word	0x0801f530
 8019788:	0801f680 	.word	0x0801f680
 801978c:	0801f5a8 	.word	0x0801f5a8

08019790 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b086      	sub	sp, #24
 8019794:	af02      	add	r7, sp, #8
 8019796:	60f8      	str	r0, [r7, #12]
 8019798:	60b9      	str	r1, [r7, #8]
 801979a:	4613      	mov	r3, r2
 801979c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801979e:	79fa      	ldrb	r2, [r7, #7]
 80197a0:	4944      	ldr	r1, [pc, #272]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 80197a2:	4613      	mov	r3, r2
 80197a4:	005b      	lsls	r3, r3, #1
 80197a6:	4413      	add	r3, r2
 80197a8:	00db      	lsls	r3, r3, #3
 80197aa:	440b      	add	r3, r1
 80197ac:	3314      	adds	r3, #20
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	2b01      	cmp	r3, #1
 80197b2:	d806      	bhi.n	80197c2 <etharp_output_to_arp_index+0x32>
 80197b4:	4b40      	ldr	r3, [pc, #256]	; (80198b8 <etharp_output_to_arp_index+0x128>)
 80197b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80197ba:	4940      	ldr	r1, [pc, #256]	; (80198bc <etharp_output_to_arp_index+0x12c>)
 80197bc:	4840      	ldr	r0, [pc, #256]	; (80198c0 <etharp_output_to_arp_index+0x130>)
 80197be:	f002 fa71 	bl	801bca4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80197c2:	79fa      	ldrb	r2, [r7, #7]
 80197c4:	493b      	ldr	r1, [pc, #236]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 80197c6:	4613      	mov	r3, r2
 80197c8:	005b      	lsls	r3, r3, #1
 80197ca:	4413      	add	r3, r2
 80197cc:	00db      	lsls	r3, r3, #3
 80197ce:	440b      	add	r3, r1
 80197d0:	3314      	adds	r3, #20
 80197d2:	781b      	ldrb	r3, [r3, #0]
 80197d4:	2b02      	cmp	r3, #2
 80197d6:	d153      	bne.n	8019880 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80197d8:	79fa      	ldrb	r2, [r7, #7]
 80197da:	4936      	ldr	r1, [pc, #216]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 80197dc:	4613      	mov	r3, r2
 80197de:	005b      	lsls	r3, r3, #1
 80197e0:	4413      	add	r3, r2
 80197e2:	00db      	lsls	r3, r3, #3
 80197e4:	440b      	add	r3, r1
 80197e6:	3312      	adds	r3, #18
 80197e8:	881b      	ldrh	r3, [r3, #0]
 80197ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80197ee:	d919      	bls.n	8019824 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80197f0:	79fa      	ldrb	r2, [r7, #7]
 80197f2:	4613      	mov	r3, r2
 80197f4:	005b      	lsls	r3, r3, #1
 80197f6:	4413      	add	r3, r2
 80197f8:	00db      	lsls	r3, r3, #3
 80197fa:	4a2e      	ldr	r2, [pc, #184]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 80197fc:	4413      	add	r3, r2
 80197fe:	3304      	adds	r3, #4
 8019800:	4619      	mov	r1, r3
 8019802:	68f8      	ldr	r0, [r7, #12]
 8019804:	f000 fb4c 	bl	8019ea0 <etharp_request>
 8019808:	4603      	mov	r3, r0
 801980a:	2b00      	cmp	r3, #0
 801980c:	d138      	bne.n	8019880 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801980e:	79fa      	ldrb	r2, [r7, #7]
 8019810:	4928      	ldr	r1, [pc, #160]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 8019812:	4613      	mov	r3, r2
 8019814:	005b      	lsls	r3, r3, #1
 8019816:	4413      	add	r3, r2
 8019818:	00db      	lsls	r3, r3, #3
 801981a:	440b      	add	r3, r1
 801981c:	3314      	adds	r3, #20
 801981e:	2203      	movs	r2, #3
 8019820:	701a      	strb	r2, [r3, #0]
 8019822:	e02d      	b.n	8019880 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019824:	79fa      	ldrb	r2, [r7, #7]
 8019826:	4923      	ldr	r1, [pc, #140]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 8019828:	4613      	mov	r3, r2
 801982a:	005b      	lsls	r3, r3, #1
 801982c:	4413      	add	r3, r2
 801982e:	00db      	lsls	r3, r3, #3
 8019830:	440b      	add	r3, r1
 8019832:	3312      	adds	r3, #18
 8019834:	881b      	ldrh	r3, [r3, #0]
 8019836:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801983a:	d321      	bcc.n	8019880 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801983c:	79fa      	ldrb	r2, [r7, #7]
 801983e:	4613      	mov	r3, r2
 8019840:	005b      	lsls	r3, r3, #1
 8019842:	4413      	add	r3, r2
 8019844:	00db      	lsls	r3, r3, #3
 8019846:	4a1b      	ldr	r2, [pc, #108]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 8019848:	4413      	add	r3, r2
 801984a:	1d19      	adds	r1, r3, #4
 801984c:	79fa      	ldrb	r2, [r7, #7]
 801984e:	4613      	mov	r3, r2
 8019850:	005b      	lsls	r3, r3, #1
 8019852:	4413      	add	r3, r2
 8019854:	00db      	lsls	r3, r3, #3
 8019856:	3308      	adds	r3, #8
 8019858:	4a16      	ldr	r2, [pc, #88]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 801985a:	4413      	add	r3, r2
 801985c:	3304      	adds	r3, #4
 801985e:	461a      	mov	r2, r3
 8019860:	68f8      	ldr	r0, [r7, #12]
 8019862:	f000 fafb 	bl	8019e5c <etharp_request_dst>
 8019866:	4603      	mov	r3, r0
 8019868:	2b00      	cmp	r3, #0
 801986a:	d109      	bne.n	8019880 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801986c:	79fa      	ldrb	r2, [r7, #7]
 801986e:	4911      	ldr	r1, [pc, #68]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 8019870:	4613      	mov	r3, r2
 8019872:	005b      	lsls	r3, r3, #1
 8019874:	4413      	add	r3, r2
 8019876:	00db      	lsls	r3, r3, #3
 8019878:	440b      	add	r3, r1
 801987a:	3314      	adds	r3, #20
 801987c:	2203      	movs	r2, #3
 801987e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8019886:	79fa      	ldrb	r2, [r7, #7]
 8019888:	4613      	mov	r3, r2
 801988a:	005b      	lsls	r3, r3, #1
 801988c:	4413      	add	r3, r2
 801988e:	00db      	lsls	r3, r3, #3
 8019890:	3308      	adds	r3, #8
 8019892:	4a08      	ldr	r2, [pc, #32]	; (80198b4 <etharp_output_to_arp_index+0x124>)
 8019894:	4413      	add	r3, r2
 8019896:	3304      	adds	r3, #4
 8019898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801989c:	9200      	str	r2, [sp, #0]
 801989e:	460a      	mov	r2, r1
 80198a0:	68b9      	ldr	r1, [r7, #8]
 80198a2:	68f8      	ldr	r0, [r7, #12]
 80198a4:	f001 fe5c 	bl	801b560 <ethernet_output>
 80198a8:	4603      	mov	r3, r0
}
 80198aa:	4618      	mov	r0, r3
 80198ac:	3710      	adds	r7, #16
 80198ae:	46bd      	mov	sp, r7
 80198b0:	bd80      	pop	{r7, pc}
 80198b2:	bf00      	nop
 80198b4:	2000b4b0 	.word	0x2000b4b0
 80198b8:	0801f530 	.word	0x0801f530
 80198bc:	0801f6a0 	.word	0x0801f6a0
 80198c0:	0801f5a8 	.word	0x0801f5a8

080198c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b08a      	sub	sp, #40	; 0x28
 80198c8:	af02      	add	r7, sp, #8
 80198ca:	60f8      	str	r0, [r7, #12]
 80198cc:	60b9      	str	r1, [r7, #8]
 80198ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d106      	bne.n	80198e8 <etharp_output+0x24>
 80198da:	4b73      	ldr	r3, [pc, #460]	; (8019aa8 <etharp_output+0x1e4>)
 80198dc:	f240 321e 	movw	r2, #798	; 0x31e
 80198e0:	4972      	ldr	r1, [pc, #456]	; (8019aac <etharp_output+0x1e8>)
 80198e2:	4873      	ldr	r0, [pc, #460]	; (8019ab0 <etharp_output+0x1ec>)
 80198e4:	f002 f9de 	bl	801bca4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d106      	bne.n	80198fc <etharp_output+0x38>
 80198ee:	4b6e      	ldr	r3, [pc, #440]	; (8019aa8 <etharp_output+0x1e4>)
 80198f0:	f240 321f 	movw	r2, #799	; 0x31f
 80198f4:	496f      	ldr	r1, [pc, #444]	; (8019ab4 <etharp_output+0x1f0>)
 80198f6:	486e      	ldr	r0, [pc, #440]	; (8019ab0 <etharp_output+0x1ec>)
 80198f8:	f002 f9d4 	bl	801bca4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d106      	bne.n	8019910 <etharp_output+0x4c>
 8019902:	4b69      	ldr	r3, [pc, #420]	; (8019aa8 <etharp_output+0x1e4>)
 8019904:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019908:	496b      	ldr	r1, [pc, #428]	; (8019ab8 <etharp_output+0x1f4>)
 801990a:	4869      	ldr	r0, [pc, #420]	; (8019ab0 <etharp_output+0x1ec>)
 801990c:	f002 f9ca 	bl	801bca4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	68f9      	ldr	r1, [r7, #12]
 8019916:	4618      	mov	r0, r3
 8019918:	f000 ff14 	bl	801a744 <ip4_addr_isbroadcast_u32>
 801991c:	4603      	mov	r3, r0
 801991e:	2b00      	cmp	r3, #0
 8019920:	d002      	beq.n	8019928 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019922:	4b66      	ldr	r3, [pc, #408]	; (8019abc <etharp_output+0x1f8>)
 8019924:	61fb      	str	r3, [r7, #28]
 8019926:	e0af      	b.n	8019a88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019930:	2be0      	cmp	r3, #224	; 0xe0
 8019932:	d118      	bne.n	8019966 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019934:	2301      	movs	r3, #1
 8019936:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019938:	2300      	movs	r3, #0
 801993a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801993c:	235e      	movs	r3, #94	; 0x5e
 801993e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	3301      	adds	r3, #1
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801994a:	b2db      	uxtb	r3, r3
 801994c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	3302      	adds	r3, #2
 8019952:	781b      	ldrb	r3, [r3, #0]
 8019954:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	3303      	adds	r3, #3
 801995a:	781b      	ldrb	r3, [r3, #0]
 801995c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801995e:	f107 0310 	add.w	r3, r7, #16
 8019962:	61fb      	str	r3, [r7, #28]
 8019964:	e090      	b.n	8019a88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	681a      	ldr	r2, [r3, #0]
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	3304      	adds	r3, #4
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	405a      	eors	r2, r3
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	3308      	adds	r3, #8
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	4013      	ands	r3, r2
 801997a:	2b00      	cmp	r3, #0
 801997c:	d012      	beq.n	80199a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019984:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019988:	4293      	cmp	r3, r2
 801998a:	d00b      	beq.n	80199a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	330c      	adds	r3, #12
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d003      	beq.n	801999e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	330c      	adds	r3, #12
 801999a:	61bb      	str	r3, [r7, #24]
 801999c:	e002      	b.n	80199a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801999e:	f06f 0303 	mvn.w	r3, #3
 80199a2:	e07d      	b.n	8019aa0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80199a4:	4b46      	ldr	r3, [pc, #280]	; (8019ac0 <etharp_output+0x1fc>)
 80199a6:	781b      	ldrb	r3, [r3, #0]
 80199a8:	4619      	mov	r1, r3
 80199aa:	4a46      	ldr	r2, [pc, #280]	; (8019ac4 <etharp_output+0x200>)
 80199ac:	460b      	mov	r3, r1
 80199ae:	005b      	lsls	r3, r3, #1
 80199b0:	440b      	add	r3, r1
 80199b2:	00db      	lsls	r3, r3, #3
 80199b4:	4413      	add	r3, r2
 80199b6:	3314      	adds	r3, #20
 80199b8:	781b      	ldrb	r3, [r3, #0]
 80199ba:	2b01      	cmp	r3, #1
 80199bc:	d925      	bls.n	8019a0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80199be:	4b40      	ldr	r3, [pc, #256]	; (8019ac0 <etharp_output+0x1fc>)
 80199c0:	781b      	ldrb	r3, [r3, #0]
 80199c2:	4619      	mov	r1, r3
 80199c4:	4a3f      	ldr	r2, [pc, #252]	; (8019ac4 <etharp_output+0x200>)
 80199c6:	460b      	mov	r3, r1
 80199c8:	005b      	lsls	r3, r3, #1
 80199ca:	440b      	add	r3, r1
 80199cc:	00db      	lsls	r3, r3, #3
 80199ce:	4413      	add	r3, r2
 80199d0:	3308      	adds	r3, #8
 80199d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80199d4:	68fa      	ldr	r2, [r7, #12]
 80199d6:	429a      	cmp	r2, r3
 80199d8:	d117      	bne.n	8019a0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80199da:	69bb      	ldr	r3, [r7, #24]
 80199dc:	681a      	ldr	r2, [r3, #0]
 80199de:	4b38      	ldr	r3, [pc, #224]	; (8019ac0 <etharp_output+0x1fc>)
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	4618      	mov	r0, r3
 80199e4:	4937      	ldr	r1, [pc, #220]	; (8019ac4 <etharp_output+0x200>)
 80199e6:	4603      	mov	r3, r0
 80199e8:	005b      	lsls	r3, r3, #1
 80199ea:	4403      	add	r3, r0
 80199ec:	00db      	lsls	r3, r3, #3
 80199ee:	440b      	add	r3, r1
 80199f0:	3304      	adds	r3, #4
 80199f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80199f4:	429a      	cmp	r2, r3
 80199f6:	d108      	bne.n	8019a0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80199f8:	4b31      	ldr	r3, [pc, #196]	; (8019ac0 <etharp_output+0x1fc>)
 80199fa:	781b      	ldrb	r3, [r3, #0]
 80199fc:	461a      	mov	r2, r3
 80199fe:	68b9      	ldr	r1, [r7, #8]
 8019a00:	68f8      	ldr	r0, [r7, #12]
 8019a02:	f7ff fec5 	bl	8019790 <etharp_output_to_arp_index>
 8019a06:	4603      	mov	r3, r0
 8019a08:	e04a      	b.n	8019aa0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	75fb      	strb	r3, [r7, #23]
 8019a0e:	e031      	b.n	8019a74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019a10:	7dfa      	ldrb	r2, [r7, #23]
 8019a12:	492c      	ldr	r1, [pc, #176]	; (8019ac4 <etharp_output+0x200>)
 8019a14:	4613      	mov	r3, r2
 8019a16:	005b      	lsls	r3, r3, #1
 8019a18:	4413      	add	r3, r2
 8019a1a:	00db      	lsls	r3, r3, #3
 8019a1c:	440b      	add	r3, r1
 8019a1e:	3314      	adds	r3, #20
 8019a20:	781b      	ldrb	r3, [r3, #0]
 8019a22:	2b01      	cmp	r3, #1
 8019a24:	d923      	bls.n	8019a6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019a26:	7dfa      	ldrb	r2, [r7, #23]
 8019a28:	4926      	ldr	r1, [pc, #152]	; (8019ac4 <etharp_output+0x200>)
 8019a2a:	4613      	mov	r3, r2
 8019a2c:	005b      	lsls	r3, r3, #1
 8019a2e:	4413      	add	r3, r2
 8019a30:	00db      	lsls	r3, r3, #3
 8019a32:	440b      	add	r3, r1
 8019a34:	3308      	adds	r3, #8
 8019a36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019a38:	68fa      	ldr	r2, [r7, #12]
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d117      	bne.n	8019a6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019a3e:	69bb      	ldr	r3, [r7, #24]
 8019a40:	6819      	ldr	r1, [r3, #0]
 8019a42:	7dfa      	ldrb	r2, [r7, #23]
 8019a44:	481f      	ldr	r0, [pc, #124]	; (8019ac4 <etharp_output+0x200>)
 8019a46:	4613      	mov	r3, r2
 8019a48:	005b      	lsls	r3, r3, #1
 8019a4a:	4413      	add	r3, r2
 8019a4c:	00db      	lsls	r3, r3, #3
 8019a4e:	4403      	add	r3, r0
 8019a50:	3304      	adds	r3, #4
 8019a52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019a54:	4299      	cmp	r1, r3
 8019a56:	d10a      	bne.n	8019a6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019a58:	4a19      	ldr	r2, [pc, #100]	; (8019ac0 <etharp_output+0x1fc>)
 8019a5a:	7dfb      	ldrb	r3, [r7, #23]
 8019a5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019a5e:	7dfb      	ldrb	r3, [r7, #23]
 8019a60:	461a      	mov	r2, r3
 8019a62:	68b9      	ldr	r1, [r7, #8]
 8019a64:	68f8      	ldr	r0, [r7, #12]
 8019a66:	f7ff fe93 	bl	8019790 <etharp_output_to_arp_index>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	e018      	b.n	8019aa0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019a6e:	7dfb      	ldrb	r3, [r7, #23]
 8019a70:	3301      	adds	r3, #1
 8019a72:	75fb      	strb	r3, [r7, #23]
 8019a74:	7dfb      	ldrb	r3, [r7, #23]
 8019a76:	2b09      	cmp	r3, #9
 8019a78:	d9ca      	bls.n	8019a10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019a7a:	68ba      	ldr	r2, [r7, #8]
 8019a7c:	69b9      	ldr	r1, [r7, #24]
 8019a7e:	68f8      	ldr	r0, [r7, #12]
 8019a80:	f000 f822 	bl	8019ac8 <etharp_query>
 8019a84:	4603      	mov	r3, r0
 8019a86:	e00b      	b.n	8019aa0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019a92:	9300      	str	r3, [sp, #0]
 8019a94:	69fb      	ldr	r3, [r7, #28]
 8019a96:	68b9      	ldr	r1, [r7, #8]
 8019a98:	68f8      	ldr	r0, [r7, #12]
 8019a9a:	f001 fd61 	bl	801b560 <ethernet_output>
 8019a9e:	4603      	mov	r3, r0
}
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	3720      	adds	r7, #32
 8019aa4:	46bd      	mov	sp, r7
 8019aa6:	bd80      	pop	{r7, pc}
 8019aa8:	0801f530 	.word	0x0801f530
 8019aac:	0801f680 	.word	0x0801f680
 8019ab0:	0801f5a8 	.word	0x0801f5a8
 8019ab4:	0801f6d0 	.word	0x0801f6d0
 8019ab8:	0801f670 	.word	0x0801f670
 8019abc:	0801fe8c 	.word	0x0801fe8c
 8019ac0:	2000b5a0 	.word	0x2000b5a0
 8019ac4:	2000b4b0 	.word	0x2000b4b0

08019ac8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b08c      	sub	sp, #48	; 0x30
 8019acc:	af02      	add	r7, sp, #8
 8019ace:	60f8      	str	r0, [r7, #12]
 8019ad0:	60b9      	str	r1, [r7, #8]
 8019ad2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	3326      	adds	r3, #38	; 0x26
 8019ad8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019ada:	23ff      	movs	r3, #255	; 0xff
 8019adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	68f9      	ldr	r1, [r7, #12]
 8019aea:	4618      	mov	r0, r3
 8019aec:	f000 fe2a 	bl	801a744 <ip4_addr_isbroadcast_u32>
 8019af0:	4603      	mov	r3, r0
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d10c      	bne.n	8019b10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019af6:	68bb      	ldr	r3, [r7, #8]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019afe:	2be0      	cmp	r3, #224	; 0xe0
 8019b00:	d006      	beq.n	8019b10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d003      	beq.n	8019b10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d102      	bne.n	8019b16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019b10:	f06f 030f 	mvn.w	r3, #15
 8019b14:	e101      	b.n	8019d1a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019b16:	68fa      	ldr	r2, [r7, #12]
 8019b18:	2101      	movs	r1, #1
 8019b1a:	68b8      	ldr	r0, [r7, #8]
 8019b1c:	f7ff fb60 	bl	80191e0 <etharp_find_entry>
 8019b20:	4603      	mov	r3, r0
 8019b22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019b24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	da02      	bge.n	8019b32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019b2c:	8a7b      	ldrh	r3, [r7, #18]
 8019b2e:	b25b      	sxtb	r3, r3
 8019b30:	e0f3      	b.n	8019d1a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019b32:	8a7b      	ldrh	r3, [r7, #18]
 8019b34:	2b7e      	cmp	r3, #126	; 0x7e
 8019b36:	d906      	bls.n	8019b46 <etharp_query+0x7e>
 8019b38:	4b7a      	ldr	r3, [pc, #488]	; (8019d24 <etharp_query+0x25c>)
 8019b3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019b3e:	497a      	ldr	r1, [pc, #488]	; (8019d28 <etharp_query+0x260>)
 8019b40:	487a      	ldr	r0, [pc, #488]	; (8019d2c <etharp_query+0x264>)
 8019b42:	f002 f8af 	bl	801bca4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019b46:	8a7b      	ldrh	r3, [r7, #18]
 8019b48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019b4a:	7c7a      	ldrb	r2, [r7, #17]
 8019b4c:	4978      	ldr	r1, [pc, #480]	; (8019d30 <etharp_query+0x268>)
 8019b4e:	4613      	mov	r3, r2
 8019b50:	005b      	lsls	r3, r3, #1
 8019b52:	4413      	add	r3, r2
 8019b54:	00db      	lsls	r3, r3, #3
 8019b56:	440b      	add	r3, r1
 8019b58:	3314      	adds	r3, #20
 8019b5a:	781b      	ldrb	r3, [r3, #0]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d115      	bne.n	8019b8c <etharp_query+0xc4>
    is_new_entry = 1;
 8019b60:	2301      	movs	r3, #1
 8019b62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019b64:	7c7a      	ldrb	r2, [r7, #17]
 8019b66:	4972      	ldr	r1, [pc, #456]	; (8019d30 <etharp_query+0x268>)
 8019b68:	4613      	mov	r3, r2
 8019b6a:	005b      	lsls	r3, r3, #1
 8019b6c:	4413      	add	r3, r2
 8019b6e:	00db      	lsls	r3, r3, #3
 8019b70:	440b      	add	r3, r1
 8019b72:	3314      	adds	r3, #20
 8019b74:	2201      	movs	r2, #1
 8019b76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019b78:	7c7a      	ldrb	r2, [r7, #17]
 8019b7a:	496d      	ldr	r1, [pc, #436]	; (8019d30 <etharp_query+0x268>)
 8019b7c:	4613      	mov	r3, r2
 8019b7e:	005b      	lsls	r3, r3, #1
 8019b80:	4413      	add	r3, r2
 8019b82:	00db      	lsls	r3, r3, #3
 8019b84:	440b      	add	r3, r1
 8019b86:	3308      	adds	r3, #8
 8019b88:	68fa      	ldr	r2, [r7, #12]
 8019b8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019b8c:	7c7a      	ldrb	r2, [r7, #17]
 8019b8e:	4968      	ldr	r1, [pc, #416]	; (8019d30 <etharp_query+0x268>)
 8019b90:	4613      	mov	r3, r2
 8019b92:	005b      	lsls	r3, r3, #1
 8019b94:	4413      	add	r3, r2
 8019b96:	00db      	lsls	r3, r3, #3
 8019b98:	440b      	add	r3, r1
 8019b9a:	3314      	adds	r3, #20
 8019b9c:	781b      	ldrb	r3, [r3, #0]
 8019b9e:	2b01      	cmp	r3, #1
 8019ba0:	d011      	beq.n	8019bc6 <etharp_query+0xfe>
 8019ba2:	7c7a      	ldrb	r2, [r7, #17]
 8019ba4:	4962      	ldr	r1, [pc, #392]	; (8019d30 <etharp_query+0x268>)
 8019ba6:	4613      	mov	r3, r2
 8019ba8:	005b      	lsls	r3, r3, #1
 8019baa:	4413      	add	r3, r2
 8019bac:	00db      	lsls	r3, r3, #3
 8019bae:	440b      	add	r3, r1
 8019bb0:	3314      	adds	r3, #20
 8019bb2:	781b      	ldrb	r3, [r3, #0]
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	d806      	bhi.n	8019bc6 <etharp_query+0xfe>
 8019bb8:	4b5a      	ldr	r3, [pc, #360]	; (8019d24 <etharp_query+0x25c>)
 8019bba:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019bbe:	495d      	ldr	r1, [pc, #372]	; (8019d34 <etharp_query+0x26c>)
 8019bc0:	485a      	ldr	r0, [pc, #360]	; (8019d2c <etharp_query+0x264>)
 8019bc2:	f002 f86f 	bl	801bca4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019bc6:	6a3b      	ldr	r3, [r7, #32]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d102      	bne.n	8019bd2 <etharp_query+0x10a>
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d10c      	bne.n	8019bec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019bd2:	68b9      	ldr	r1, [r7, #8]
 8019bd4:	68f8      	ldr	r0, [r7, #12]
 8019bd6:	f000 f963 	bl	8019ea0 <etharp_request>
 8019bda:	4603      	mov	r3, r0
 8019bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d102      	bne.n	8019bec <etharp_query+0x124>
      return result;
 8019be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019bea:	e096      	b.n	8019d1a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d106      	bne.n	8019c00 <etharp_query+0x138>
 8019bf2:	4b4c      	ldr	r3, [pc, #304]	; (8019d24 <etharp_query+0x25c>)
 8019bf4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019bf8:	494f      	ldr	r1, [pc, #316]	; (8019d38 <etharp_query+0x270>)
 8019bfa:	484c      	ldr	r0, [pc, #304]	; (8019d2c <etharp_query+0x264>)
 8019bfc:	f002 f852 	bl	801bca4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019c00:	7c7a      	ldrb	r2, [r7, #17]
 8019c02:	494b      	ldr	r1, [pc, #300]	; (8019d30 <etharp_query+0x268>)
 8019c04:	4613      	mov	r3, r2
 8019c06:	005b      	lsls	r3, r3, #1
 8019c08:	4413      	add	r3, r2
 8019c0a:	00db      	lsls	r3, r3, #3
 8019c0c:	440b      	add	r3, r1
 8019c0e:	3314      	adds	r3, #20
 8019c10:	781b      	ldrb	r3, [r3, #0]
 8019c12:	2b01      	cmp	r3, #1
 8019c14:	d917      	bls.n	8019c46 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019c16:	4a49      	ldr	r2, [pc, #292]	; (8019d3c <etharp_query+0x274>)
 8019c18:	7c7b      	ldrb	r3, [r7, #17]
 8019c1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019c1c:	7c7a      	ldrb	r2, [r7, #17]
 8019c1e:	4613      	mov	r3, r2
 8019c20:	005b      	lsls	r3, r3, #1
 8019c22:	4413      	add	r3, r2
 8019c24:	00db      	lsls	r3, r3, #3
 8019c26:	3308      	adds	r3, #8
 8019c28:	4a41      	ldr	r2, [pc, #260]	; (8019d30 <etharp_query+0x268>)
 8019c2a:	4413      	add	r3, r2
 8019c2c:	3304      	adds	r3, #4
 8019c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019c32:	9200      	str	r2, [sp, #0]
 8019c34:	697a      	ldr	r2, [r7, #20]
 8019c36:	6879      	ldr	r1, [r7, #4]
 8019c38:	68f8      	ldr	r0, [r7, #12]
 8019c3a:	f001 fc91 	bl	801b560 <ethernet_output>
 8019c3e:	4603      	mov	r3, r0
 8019c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019c44:	e067      	b.n	8019d16 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019c46:	7c7a      	ldrb	r2, [r7, #17]
 8019c48:	4939      	ldr	r1, [pc, #228]	; (8019d30 <etharp_query+0x268>)
 8019c4a:	4613      	mov	r3, r2
 8019c4c:	005b      	lsls	r3, r3, #1
 8019c4e:	4413      	add	r3, r2
 8019c50:	00db      	lsls	r3, r3, #3
 8019c52:	440b      	add	r3, r1
 8019c54:	3314      	adds	r3, #20
 8019c56:	781b      	ldrb	r3, [r3, #0]
 8019c58:	2b01      	cmp	r3, #1
 8019c5a:	d15c      	bne.n	8019d16 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019c64:	e01c      	b.n	8019ca0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019c66:	69fb      	ldr	r3, [r7, #28]
 8019c68:	895a      	ldrh	r2, [r3, #10]
 8019c6a:	69fb      	ldr	r3, [r7, #28]
 8019c6c:	891b      	ldrh	r3, [r3, #8]
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d10a      	bne.n	8019c88 <etharp_query+0x1c0>
 8019c72:	69fb      	ldr	r3, [r7, #28]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d006      	beq.n	8019c88 <etharp_query+0x1c0>
 8019c7a:	4b2a      	ldr	r3, [pc, #168]	; (8019d24 <etharp_query+0x25c>)
 8019c7c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019c80:	492f      	ldr	r1, [pc, #188]	; (8019d40 <etharp_query+0x278>)
 8019c82:	482a      	ldr	r0, [pc, #168]	; (8019d2c <etharp_query+0x264>)
 8019c84:	f002 f80e 	bl	801bca4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019c88:	69fb      	ldr	r3, [r7, #28]
 8019c8a:	7b1b      	ldrb	r3, [r3, #12]
 8019c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d002      	beq.n	8019c9a <etharp_query+0x1d2>
        copy_needed = 1;
 8019c94:	2301      	movs	r3, #1
 8019c96:	61bb      	str	r3, [r7, #24]
        break;
 8019c98:	e005      	b.n	8019ca6 <etharp_query+0x1de>
      }
      p = p->next;
 8019c9a:	69fb      	ldr	r3, [r7, #28]
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019ca0:	69fb      	ldr	r3, [r7, #28]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d1df      	bne.n	8019c66 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019ca6:	69bb      	ldr	r3, [r7, #24]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d007      	beq.n	8019cbc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019cac:	687a      	ldr	r2, [r7, #4]
 8019cae:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019cb2:	200e      	movs	r0, #14
 8019cb4:	f7f8 fe2c 	bl	8012910 <pbuf_clone>
 8019cb8:	61f8      	str	r0, [r7, #28]
 8019cba:	e004      	b.n	8019cc6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019cc0:	69f8      	ldr	r0, [r7, #28]
 8019cc2:	f7f8 fc59 	bl	8012578 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019cc6:	69fb      	ldr	r3, [r7, #28]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d021      	beq.n	8019d10 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019ccc:	7c7a      	ldrb	r2, [r7, #17]
 8019cce:	4918      	ldr	r1, [pc, #96]	; (8019d30 <etharp_query+0x268>)
 8019cd0:	4613      	mov	r3, r2
 8019cd2:	005b      	lsls	r3, r3, #1
 8019cd4:	4413      	add	r3, r2
 8019cd6:	00db      	lsls	r3, r3, #3
 8019cd8:	440b      	add	r3, r1
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d00a      	beq.n	8019cf6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019ce0:	7c7a      	ldrb	r2, [r7, #17]
 8019ce2:	4913      	ldr	r1, [pc, #76]	; (8019d30 <etharp_query+0x268>)
 8019ce4:	4613      	mov	r3, r2
 8019ce6:	005b      	lsls	r3, r3, #1
 8019ce8:	4413      	add	r3, r2
 8019cea:	00db      	lsls	r3, r3, #3
 8019cec:	440b      	add	r3, r1
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f7f8 fba1 	bl	8012438 <pbuf_free>
      }
      arp_table[i].q = p;
 8019cf6:	7c7a      	ldrb	r2, [r7, #17]
 8019cf8:	490d      	ldr	r1, [pc, #52]	; (8019d30 <etharp_query+0x268>)
 8019cfa:	4613      	mov	r3, r2
 8019cfc:	005b      	lsls	r3, r3, #1
 8019cfe:	4413      	add	r3, r2
 8019d00:	00db      	lsls	r3, r3, #3
 8019d02:	440b      	add	r3, r1
 8019d04:	69fa      	ldr	r2, [r7, #28]
 8019d06:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019d08:	2300      	movs	r3, #0
 8019d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019d0e:	e002      	b.n	8019d16 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019d10:	23ff      	movs	r3, #255	; 0xff
 8019d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019d16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	3728      	adds	r7, #40	; 0x28
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	bd80      	pop	{r7, pc}
 8019d22:	bf00      	nop
 8019d24:	0801f530 	.word	0x0801f530
 8019d28:	0801f6dc 	.word	0x0801f6dc
 8019d2c:	0801f5a8 	.word	0x0801f5a8
 8019d30:	2000b4b0 	.word	0x2000b4b0
 8019d34:	0801f6ec 	.word	0x0801f6ec
 8019d38:	0801f6d0 	.word	0x0801f6d0
 8019d3c:	2000b5a0 	.word	0x2000b5a0
 8019d40:	0801f714 	.word	0x0801f714

08019d44 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b08a      	sub	sp, #40	; 0x28
 8019d48:	af02      	add	r7, sp, #8
 8019d4a:	60f8      	str	r0, [r7, #12]
 8019d4c:	60b9      	str	r1, [r7, #8]
 8019d4e:	607a      	str	r2, [r7, #4]
 8019d50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019d52:	2300      	movs	r3, #0
 8019d54:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d106      	bne.n	8019d6a <etharp_raw+0x26>
 8019d5c:	4b3a      	ldr	r3, [pc, #232]	; (8019e48 <etharp_raw+0x104>)
 8019d5e:	f240 4257 	movw	r2, #1111	; 0x457
 8019d62:	493a      	ldr	r1, [pc, #232]	; (8019e4c <etharp_raw+0x108>)
 8019d64:	483a      	ldr	r0, [pc, #232]	; (8019e50 <etharp_raw+0x10c>)
 8019d66:	f001 ff9d 	bl	801bca4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019d6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d6e:	211c      	movs	r1, #28
 8019d70:	200e      	movs	r0, #14
 8019d72:	f7f8 f87d 	bl	8011e70 <pbuf_alloc>
 8019d76:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019d78:	69bb      	ldr	r3, [r7, #24]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d102      	bne.n	8019d84 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d82:	e05d      	b.n	8019e40 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019d84:	69bb      	ldr	r3, [r7, #24]
 8019d86:	895b      	ldrh	r3, [r3, #10]
 8019d88:	2b1b      	cmp	r3, #27
 8019d8a:	d806      	bhi.n	8019d9a <etharp_raw+0x56>
 8019d8c:	4b2e      	ldr	r3, [pc, #184]	; (8019e48 <etharp_raw+0x104>)
 8019d8e:	f240 4262 	movw	r2, #1122	; 0x462
 8019d92:	4930      	ldr	r1, [pc, #192]	; (8019e54 <etharp_raw+0x110>)
 8019d94:	482e      	ldr	r0, [pc, #184]	; (8019e50 <etharp_raw+0x10c>)
 8019d96:	f001 ff85 	bl	801bca4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019d9a:	69bb      	ldr	r3, [r7, #24]
 8019d9c:	685b      	ldr	r3, [r3, #4]
 8019d9e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019da0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019da2:	4618      	mov	r0, r3
 8019da4:	f7f6 ff80 	bl	8010ca8 <lwip_htons>
 8019da8:	4603      	mov	r3, r0
 8019daa:	461a      	mov	r2, r3
 8019dac:	697b      	ldr	r3, [r7, #20]
 8019dae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019db6:	2b06      	cmp	r3, #6
 8019db8:	d006      	beq.n	8019dc8 <etharp_raw+0x84>
 8019dba:	4b23      	ldr	r3, [pc, #140]	; (8019e48 <etharp_raw+0x104>)
 8019dbc:	f240 4269 	movw	r2, #1129	; 0x469
 8019dc0:	4925      	ldr	r1, [pc, #148]	; (8019e58 <etharp_raw+0x114>)
 8019dc2:	4823      	ldr	r0, [pc, #140]	; (8019e50 <etharp_raw+0x10c>)
 8019dc4:	f001 ff6e 	bl	801bca4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	3308      	adds	r3, #8
 8019dcc:	2206      	movs	r2, #6
 8019dce:	6839      	ldr	r1, [r7, #0]
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f002 f8d8 	bl	801bf86 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019dd6:	697b      	ldr	r3, [r7, #20]
 8019dd8:	3312      	adds	r3, #18
 8019dda:	2206      	movs	r2, #6
 8019ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019dde:	4618      	mov	r0, r3
 8019de0:	f002 f8d1 	bl	801bf86 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019de4:	697b      	ldr	r3, [r7, #20]
 8019de6:	330e      	adds	r3, #14
 8019de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019dea:	6812      	ldr	r2, [r2, #0]
 8019dec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	3318      	adds	r3, #24
 8019df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019df4:	6812      	ldr	r2, [r2, #0]
 8019df6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019df8:	697b      	ldr	r3, [r7, #20]
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	701a      	strb	r2, [r3, #0]
 8019dfe:	2200      	movs	r2, #0
 8019e00:	f042 0201 	orr.w	r2, r2, #1
 8019e04:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019e06:	697b      	ldr	r3, [r7, #20]
 8019e08:	2200      	movs	r2, #0
 8019e0a:	f042 0208 	orr.w	r2, r2, #8
 8019e0e:	709a      	strb	r2, [r3, #2]
 8019e10:	2200      	movs	r2, #0
 8019e12:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	2206      	movs	r2, #6
 8019e18:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	2204      	movs	r2, #4
 8019e1e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019e20:	f640 0306 	movw	r3, #2054	; 0x806
 8019e24:	9300      	str	r3, [sp, #0]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	68ba      	ldr	r2, [r7, #8]
 8019e2a:	69b9      	ldr	r1, [r7, #24]
 8019e2c:	68f8      	ldr	r0, [r7, #12]
 8019e2e:	f001 fb97 	bl	801b560 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019e32:	69b8      	ldr	r0, [r7, #24]
 8019e34:	f7f8 fb00 	bl	8012438 <pbuf_free>
  p = NULL;
 8019e38:	2300      	movs	r3, #0
 8019e3a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019e3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019e40:	4618      	mov	r0, r3
 8019e42:	3720      	adds	r7, #32
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}
 8019e48:	0801f530 	.word	0x0801f530
 8019e4c:	0801f680 	.word	0x0801f680
 8019e50:	0801f5a8 	.word	0x0801f5a8
 8019e54:	0801f730 	.word	0x0801f730
 8019e58:	0801f764 	.word	0x0801f764

08019e5c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b088      	sub	sp, #32
 8019e60:	af04      	add	r7, sp, #16
 8019e62:	60f8      	str	r0, [r7, #12]
 8019e64:	60b9      	str	r1, [r7, #8]
 8019e66:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019e78:	2201      	movs	r2, #1
 8019e7a:	9203      	str	r2, [sp, #12]
 8019e7c:	68ba      	ldr	r2, [r7, #8]
 8019e7e:	9202      	str	r2, [sp, #8]
 8019e80:	4a06      	ldr	r2, [pc, #24]	; (8019e9c <etharp_request_dst+0x40>)
 8019e82:	9201      	str	r2, [sp, #4]
 8019e84:	9300      	str	r3, [sp, #0]
 8019e86:	4603      	mov	r3, r0
 8019e88:	687a      	ldr	r2, [r7, #4]
 8019e8a:	68f8      	ldr	r0, [r7, #12]
 8019e8c:	f7ff ff5a 	bl	8019d44 <etharp_raw>
 8019e90:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019e92:	4618      	mov	r0, r3
 8019e94:	3710      	adds	r7, #16
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	0801fe94 	.word	0x0801fe94

08019ea0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b082      	sub	sp, #8
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019eaa:	4a05      	ldr	r2, [pc, #20]	; (8019ec0 <etharp_request+0x20>)
 8019eac:	6839      	ldr	r1, [r7, #0]
 8019eae:	6878      	ldr	r0, [r7, #4]
 8019eb0:	f7ff ffd4 	bl	8019e5c <etharp_request_dst>
 8019eb4:	4603      	mov	r3, r0
}
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	3708      	adds	r7, #8
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	bd80      	pop	{r7, pc}
 8019ebe:	bf00      	nop
 8019ec0:	0801fe8c 	.word	0x0801fe8c

08019ec4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b08e      	sub	sp, #56	; 0x38
 8019ec8:	af04      	add	r7, sp, #16
 8019eca:	6078      	str	r0, [r7, #4]
 8019ecc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019ece:	4b82      	ldr	r3, [pc, #520]	; (801a0d8 <icmp_input+0x214>)
 8019ed0:	689b      	ldr	r3, [r3, #8]
 8019ed2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed6:	781b      	ldrb	r3, [r3, #0]
 8019ed8:	f003 030f 	and.w	r3, r3, #15
 8019edc:	b2db      	uxtb	r3, r3
 8019ede:	009b      	lsls	r3, r3, #2
 8019ee0:	b2db      	uxtb	r3, r3
 8019ee2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ee6:	2b13      	cmp	r3, #19
 8019ee8:	f240 80de 	bls.w	801a0a8 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	895b      	ldrh	r3, [r3, #10]
 8019ef0:	2b03      	cmp	r3, #3
 8019ef2:	f240 80db 	bls.w	801a0ac <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	685b      	ldr	r3, [r3, #4]
 8019efa:	781b      	ldrb	r3, [r3, #0]
 8019efc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019f00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	f000 80c8 	beq.w	801a09a <icmp_input+0x1d6>
 8019f0a:	2b08      	cmp	r3, #8
 8019f0c:	f040 80c8 	bne.w	801a0a0 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019f10:	4b72      	ldr	r3, [pc, #456]	; (801a0dc <icmp_input+0x218>)
 8019f12:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019f14:	4b70      	ldr	r3, [pc, #448]	; (801a0d8 <icmp_input+0x214>)
 8019f16:	695b      	ldr	r3, [r3, #20]
 8019f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019f1c:	2be0      	cmp	r3, #224	; 0xe0
 8019f1e:	f000 80cc 	beq.w	801a0ba <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019f22:	4b6d      	ldr	r3, [pc, #436]	; (801a0d8 <icmp_input+0x214>)
 8019f24:	695b      	ldr	r3, [r3, #20]
 8019f26:	4a6c      	ldr	r2, [pc, #432]	; (801a0d8 <icmp_input+0x214>)
 8019f28:	6812      	ldr	r2, [r2, #0]
 8019f2a:	4611      	mov	r1, r2
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f000 fc09 	bl	801a744 <ip4_addr_isbroadcast_u32>
 8019f32:	4603      	mov	r3, r0
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	f040 80c2 	bne.w	801a0be <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	891b      	ldrh	r3, [r3, #8]
 8019f3e:	2b07      	cmp	r3, #7
 8019f40:	f240 80b6 	bls.w	801a0b0 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f46:	330e      	adds	r3, #14
 8019f48:	4619      	mov	r1, r3
 8019f4a:	6878      	ldr	r0, [r7, #4]
 8019f4c:	f7f8 f9de 	bl	801230c <pbuf_add_header>
 8019f50:	4603      	mov	r3, r0
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d04b      	beq.n	8019fee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	891a      	ldrh	r2, [r3, #8]
 8019f5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f5c:	4413      	add	r3, r2
 8019f5e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	891b      	ldrh	r3, [r3, #8]
 8019f64:	8b7a      	ldrh	r2, [r7, #26]
 8019f66:	429a      	cmp	r2, r3
 8019f68:	f0c0 80ab 	bcc.w	801a0c2 <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019f6c:	8b7b      	ldrh	r3, [r7, #26]
 8019f6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f72:	4619      	mov	r1, r3
 8019f74:	200e      	movs	r0, #14
 8019f76:	f7f7 ff7b 	bl	8011e70 <pbuf_alloc>
 8019f7a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019f7c:	697b      	ldr	r3, [r7, #20]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	f000 80a1 	beq.w	801a0c6 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019f84:	697b      	ldr	r3, [r7, #20]
 8019f86:	895b      	ldrh	r3, [r3, #10]
 8019f88:	461a      	mov	r2, r3
 8019f8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f8c:	3308      	adds	r3, #8
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d203      	bcs.n	8019f9a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019f92:	6978      	ldr	r0, [r7, #20]
 8019f94:	f7f8 fa50 	bl	8012438 <pbuf_free>
          goto icmperr;
 8019f98:	e096      	b.n	801a0c8 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019f9a:	697b      	ldr	r3, [r7, #20]
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f001 ffef 	bl	801bf86 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019fa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019faa:	4619      	mov	r1, r3
 8019fac:	6978      	ldr	r0, [r7, #20]
 8019fae:	f7f8 f9bd 	bl	801232c <pbuf_remove_header>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d009      	beq.n	8019fcc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019fb8:	4b49      	ldr	r3, [pc, #292]	; (801a0e0 <icmp_input+0x21c>)
 8019fba:	22b6      	movs	r2, #182	; 0xb6
 8019fbc:	4949      	ldr	r1, [pc, #292]	; (801a0e4 <icmp_input+0x220>)
 8019fbe:	484a      	ldr	r0, [pc, #296]	; (801a0e8 <icmp_input+0x224>)
 8019fc0:	f001 fe70 	bl	801bca4 <iprintf>
          pbuf_free(r);
 8019fc4:	6978      	ldr	r0, [r7, #20]
 8019fc6:	f7f8 fa37 	bl	8012438 <pbuf_free>
          goto icmperr;
 8019fca:	e07d      	b.n	801a0c8 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019fcc:	6879      	ldr	r1, [r7, #4]
 8019fce:	6978      	ldr	r0, [r7, #20]
 8019fd0:	f7f8 fb5a 	bl	8012688 <pbuf_copy>
 8019fd4:	4603      	mov	r3, r0
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d003      	beq.n	8019fe2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019fda:	6978      	ldr	r0, [r7, #20]
 8019fdc:	f7f8 fa2c 	bl	8012438 <pbuf_free>
          goto icmperr;
 8019fe0:	e072      	b.n	801a0c8 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 8019fe2:	6878      	ldr	r0, [r7, #4]
 8019fe4:	f7f8 fa28 	bl	8012438 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019fe8:	697b      	ldr	r3, [r7, #20]
 8019fea:	607b      	str	r3, [r7, #4]
 8019fec:	e00f      	b.n	801a00e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019fee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ff0:	330e      	adds	r3, #14
 8019ff2:	4619      	mov	r1, r3
 8019ff4:	6878      	ldr	r0, [r7, #4]
 8019ff6:	f7f8 f999 	bl	801232c <pbuf_remove_header>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d006      	beq.n	801a00e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a000:	4b37      	ldr	r3, [pc, #220]	; (801a0e0 <icmp_input+0x21c>)
 801a002:	22c7      	movs	r2, #199	; 0xc7
 801a004:	4939      	ldr	r1, [pc, #228]	; (801a0ec <icmp_input+0x228>)
 801a006:	4838      	ldr	r0, [pc, #224]	; (801a0e8 <icmp_input+0x224>)
 801a008:	f001 fe4c 	bl	801bca4 <iprintf>
          goto icmperr;
 801a00c:	e05c      	b.n	801a0c8 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	685b      	ldr	r3, [r3, #4]
 801a012:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a014:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a016:	4619      	mov	r1, r3
 801a018:	6878      	ldr	r0, [r7, #4]
 801a01a:	f7f8 f977 	bl	801230c <pbuf_add_header>
 801a01e:	4603      	mov	r3, r0
 801a020:	2b00      	cmp	r3, #0
 801a022:	d13c      	bne.n	801a09e <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a02a:	69fb      	ldr	r3, [r7, #28]
 801a02c:	681a      	ldr	r2, [r3, #0]
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a032:	4b29      	ldr	r3, [pc, #164]	; (801a0d8 <icmp_input+0x214>)
 801a034:	691a      	ldr	r2, [r3, #16]
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a03a:	693b      	ldr	r3, [r7, #16]
 801a03c:	2200      	movs	r2, #0
 801a03e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801a040:	693b      	ldr	r3, [r7, #16]
 801a042:	885b      	ldrh	r3, [r3, #2]
 801a044:	b29b      	uxth	r3, r3
 801a046:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801a04a:	4293      	cmp	r3, r2
 801a04c:	d907      	bls.n	801a05e <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801a04e:	693b      	ldr	r3, [r7, #16]
 801a050:	885b      	ldrh	r3, [r3, #2]
 801a052:	b29b      	uxth	r3, r3
 801a054:	3309      	adds	r3, #9
 801a056:	b29a      	uxth	r2, r3
 801a058:	693b      	ldr	r3, [r7, #16]
 801a05a:	805a      	strh	r2, [r3, #2]
 801a05c:	e006      	b.n	801a06c <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801a05e:	693b      	ldr	r3, [r7, #16]
 801a060:	885b      	ldrh	r3, [r3, #2]
 801a062:	b29b      	uxth	r3, r3
 801a064:	3308      	adds	r3, #8
 801a066:	b29a      	uxth	r2, r3
 801a068:	693b      	ldr	r3, [r7, #16]
 801a06a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	22ff      	movs	r2, #255	; 0xff
 801a070:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	2200      	movs	r2, #0
 801a076:	729a      	strb	r2, [r3, #10]
 801a078:	2200      	movs	r2, #0
 801a07a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	9302      	str	r3, [sp, #8]
 801a080:	2301      	movs	r3, #1
 801a082:	9301      	str	r3, [sp, #4]
 801a084:	2300      	movs	r3, #0
 801a086:	9300      	str	r3, [sp, #0]
 801a088:	23ff      	movs	r3, #255	; 0xff
 801a08a:	2200      	movs	r2, #0
 801a08c:	69f9      	ldr	r1, [r7, #28]
 801a08e:	6878      	ldr	r0, [r7, #4]
 801a090:	f000 fa80 	bl	801a594 <ip4_output_if>
 801a094:	4603      	mov	r3, r0
 801a096:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a098:	e001      	b.n	801a09e <icmp_input+0x1da>
      break;
 801a09a:	bf00      	nop
 801a09c:	e000      	b.n	801a0a0 <icmp_input+0x1dc>
      break;
 801a09e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a0a0:	6878      	ldr	r0, [r7, #4]
 801a0a2:	f7f8 f9c9 	bl	8012438 <pbuf_free>
  return;
 801a0a6:	e013      	b.n	801a0d0 <icmp_input+0x20c>
    goto lenerr;
 801a0a8:	bf00      	nop
 801a0aa:	e002      	b.n	801a0b2 <icmp_input+0x1ee>
    goto lenerr;
 801a0ac:	bf00      	nop
 801a0ae:	e000      	b.n	801a0b2 <icmp_input+0x1ee>
        goto lenerr;
 801a0b0:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a0b2:	6878      	ldr	r0, [r7, #4]
 801a0b4:	f7f8 f9c0 	bl	8012438 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a0b8:	e00a      	b.n	801a0d0 <icmp_input+0x20c>
        goto icmperr;
 801a0ba:	bf00      	nop
 801a0bc:	e004      	b.n	801a0c8 <icmp_input+0x204>
        goto icmperr;
 801a0be:	bf00      	nop
 801a0c0:	e002      	b.n	801a0c8 <icmp_input+0x204>
          goto icmperr;
 801a0c2:	bf00      	nop
 801a0c4:	e000      	b.n	801a0c8 <icmp_input+0x204>
          goto icmperr;
 801a0c6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a0c8:	6878      	ldr	r0, [r7, #4]
 801a0ca:	f7f8 f9b5 	bl	8012438 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a0ce:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a0d0:	3728      	adds	r7, #40	; 0x28
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	20004728 	.word	0x20004728
 801a0dc:	2000473c 	.word	0x2000473c
 801a0e0:	0801f7a8 	.word	0x0801f7a8
 801a0e4:	0801f7e0 	.word	0x0801f7e0
 801a0e8:	0801f818 	.word	0x0801f818
 801a0ec:	0801f840 	.word	0x0801f840

0801a0f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b082      	sub	sp, #8
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	460b      	mov	r3, r1
 801a0fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a0fc:	78fb      	ldrb	r3, [r7, #3]
 801a0fe:	461a      	mov	r2, r3
 801a100:	2103      	movs	r1, #3
 801a102:	6878      	ldr	r0, [r7, #4]
 801a104:	f000 f814 	bl	801a130 <icmp_send_response>
}
 801a108:	bf00      	nop
 801a10a:	3708      	adds	r7, #8
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}

0801a110 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b082      	sub	sp, #8
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
 801a118:	460b      	mov	r3, r1
 801a11a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a11c:	78fb      	ldrb	r3, [r7, #3]
 801a11e:	461a      	mov	r2, r3
 801a120:	210b      	movs	r1, #11
 801a122:	6878      	ldr	r0, [r7, #4]
 801a124:	f000 f804 	bl	801a130 <icmp_send_response>
}
 801a128:	bf00      	nop
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}

0801a130 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b08c      	sub	sp, #48	; 0x30
 801a134:	af04      	add	r7, sp, #16
 801a136:	6078      	str	r0, [r7, #4]
 801a138:	460b      	mov	r3, r1
 801a13a:	70fb      	strb	r3, [r7, #3]
 801a13c:	4613      	mov	r3, r2
 801a13e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a140:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a144:	2124      	movs	r1, #36	; 0x24
 801a146:	2022      	movs	r0, #34	; 0x22
 801a148:	f7f7 fe92 	bl	8011e70 <pbuf_alloc>
 801a14c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a14e:	69fb      	ldr	r3, [r7, #28]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d056      	beq.n	801a202 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a154:	69fb      	ldr	r3, [r7, #28]
 801a156:	895b      	ldrh	r3, [r3, #10]
 801a158:	2b23      	cmp	r3, #35	; 0x23
 801a15a:	d806      	bhi.n	801a16a <icmp_send_response+0x3a>
 801a15c:	4b2b      	ldr	r3, [pc, #172]	; (801a20c <icmp_send_response+0xdc>)
 801a15e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a162:	492b      	ldr	r1, [pc, #172]	; (801a210 <icmp_send_response+0xe0>)
 801a164:	482b      	ldr	r0, [pc, #172]	; (801a214 <icmp_send_response+0xe4>)
 801a166:	f001 fd9d 	bl	801bca4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a170:	69fb      	ldr	r3, [r7, #28]
 801a172:	685b      	ldr	r3, [r3, #4]
 801a174:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a176:	697b      	ldr	r3, [r7, #20]
 801a178:	78fa      	ldrb	r2, [r7, #3]
 801a17a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a17c:	697b      	ldr	r3, [r7, #20]
 801a17e:	78ba      	ldrb	r2, [r7, #2]
 801a180:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a182:	697b      	ldr	r3, [r7, #20]
 801a184:	2200      	movs	r2, #0
 801a186:	711a      	strb	r2, [r3, #4]
 801a188:	2200      	movs	r2, #0
 801a18a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a18c:	697b      	ldr	r3, [r7, #20]
 801a18e:	2200      	movs	r2, #0
 801a190:	719a      	strb	r2, [r3, #6]
 801a192:	2200      	movs	r2, #0
 801a194:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a196:	69fb      	ldr	r3, [r7, #28]
 801a198:	685b      	ldr	r3, [r3, #4]
 801a19a:	f103 0008 	add.w	r0, r3, #8
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	685b      	ldr	r3, [r3, #4]
 801a1a2:	221c      	movs	r2, #28
 801a1a4:	4619      	mov	r1, r3
 801a1a6:	f001 feee 	bl	801bf86 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a1aa:	69bb      	ldr	r3, [r7, #24]
 801a1ac:	68db      	ldr	r3, [r3, #12]
 801a1ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a1b0:	f107 030c 	add.w	r3, r7, #12
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f000 f82f 	bl	801a218 <ip4_route>
 801a1ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a1bc:	693b      	ldr	r3, [r7, #16]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d01b      	beq.n	801a1fa <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a1c2:	697b      	ldr	r3, [r7, #20]
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	709a      	strb	r2, [r3, #2]
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801a1cc:	69fb      	ldr	r3, [r7, #28]
 801a1ce:	895b      	ldrh	r3, [r3, #10]
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	6978      	ldr	r0, [r7, #20]
 801a1d4:	f7f6 fdf3 	bl	8010dbe <inet_chksum>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	461a      	mov	r2, r3
 801a1dc:	697b      	ldr	r3, [r7, #20]
 801a1de:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a1e0:	f107 020c 	add.w	r2, r7, #12
 801a1e4:	693b      	ldr	r3, [r7, #16]
 801a1e6:	9302      	str	r3, [sp, #8]
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	9301      	str	r3, [sp, #4]
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	9300      	str	r3, [sp, #0]
 801a1f0:	23ff      	movs	r3, #255	; 0xff
 801a1f2:	2100      	movs	r1, #0
 801a1f4:	69f8      	ldr	r0, [r7, #28]
 801a1f6:	f000 f9cd 	bl	801a594 <ip4_output_if>
  }
  pbuf_free(q);
 801a1fa:	69f8      	ldr	r0, [r7, #28]
 801a1fc:	f7f8 f91c 	bl	8012438 <pbuf_free>
 801a200:	e000      	b.n	801a204 <icmp_send_response+0xd4>
    return;
 801a202:	bf00      	nop
}
 801a204:	3720      	adds	r7, #32
 801a206:	46bd      	mov	sp, r7
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	bf00      	nop
 801a20c:	0801f7a8 	.word	0x0801f7a8
 801a210:	0801f874 	.word	0x0801f874
 801a214:	0801f818 	.word	0x0801f818

0801a218 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a218:	b480      	push	{r7}
 801a21a:	b085      	sub	sp, #20
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a220:	4b33      	ldr	r3, [pc, #204]	; (801a2f0 <ip4_route+0xd8>)
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	60fb      	str	r3, [r7, #12]
 801a226:	e036      	b.n	801a296 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a22e:	f003 0301 	and.w	r3, r3, #1
 801a232:	b2db      	uxtb	r3, r3
 801a234:	2b00      	cmp	r3, #0
 801a236:	d02b      	beq.n	801a290 <ip4_route+0x78>
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a23e:	089b      	lsrs	r3, r3, #2
 801a240:	f003 0301 	and.w	r3, r3, #1
 801a244:	b2db      	uxtb	r3, r3
 801a246:	2b00      	cmp	r3, #0
 801a248:	d022      	beq.n	801a290 <ip4_route+0x78>
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	3304      	adds	r3, #4
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d01d      	beq.n	801a290 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	681a      	ldr	r2, [r3, #0]
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	3304      	adds	r3, #4
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	405a      	eors	r2, r3
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	3308      	adds	r3, #8
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	4013      	ands	r3, r2
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d101      	bne.n	801a270 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	e038      	b.n	801a2e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a276:	f003 0302 	and.w	r3, r3, #2
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d108      	bne.n	801a290 <ip4_route+0x78>
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681a      	ldr	r2, [r3, #0]
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	330c      	adds	r3, #12
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	429a      	cmp	r2, r3
 801a28a:	d101      	bne.n	801a290 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	e028      	b.n	801a2e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	60fb      	str	r3, [r7, #12]
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d1c5      	bne.n	801a228 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a29c:	4b15      	ldr	r3, [pc, #84]	; (801a2f4 <ip4_route+0xdc>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d01a      	beq.n	801a2da <ip4_route+0xc2>
 801a2a4:	4b13      	ldr	r3, [pc, #76]	; (801a2f4 <ip4_route+0xdc>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a2ac:	f003 0301 	and.w	r3, r3, #1
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d012      	beq.n	801a2da <ip4_route+0xc2>
 801a2b4:	4b0f      	ldr	r3, [pc, #60]	; (801a2f4 <ip4_route+0xdc>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a2bc:	f003 0304 	and.w	r3, r3, #4
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d00a      	beq.n	801a2da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a2c4:	4b0b      	ldr	r3, [pc, #44]	; (801a2f4 <ip4_route+0xdc>)
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	3304      	adds	r3, #4
 801a2ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d004      	beq.n	801a2da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	b2db      	uxtb	r3, r3
 801a2d6:	2b7f      	cmp	r3, #127	; 0x7f
 801a2d8:	d101      	bne.n	801a2de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a2da:	2300      	movs	r3, #0
 801a2dc:	e001      	b.n	801a2e2 <ip4_route+0xca>
  }

  return netif_default;
 801a2de:	4b05      	ldr	r3, [pc, #20]	; (801a2f4 <ip4_route+0xdc>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
}
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	3714      	adds	r7, #20
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ec:	4770      	bx	lr
 801a2ee:	bf00      	nop
 801a2f0:	2000b444 	.word	0x2000b444
 801a2f4:	2000b448 	.word	0x2000b448

0801a2f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b082      	sub	sp, #8
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a306:	f003 0301 	and.w	r3, r3, #1
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d016      	beq.n	801a33e <ip4_input_accept+0x46>
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	3304      	adds	r3, #4
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d011      	beq.n	801a33e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a31a:	4b0b      	ldr	r3, [pc, #44]	; (801a348 <ip4_input_accept+0x50>)
 801a31c:	695a      	ldr	r2, [r3, #20]
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	3304      	adds	r3, #4
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	429a      	cmp	r2, r3
 801a326:	d008      	beq.n	801a33a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a328:	4b07      	ldr	r3, [pc, #28]	; (801a348 <ip4_input_accept+0x50>)
 801a32a:	695b      	ldr	r3, [r3, #20]
 801a32c:	6879      	ldr	r1, [r7, #4]
 801a32e:	4618      	mov	r0, r3
 801a330:	f000 fa08 	bl	801a744 <ip4_addr_isbroadcast_u32>
 801a334:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a336:	2b00      	cmp	r3, #0
 801a338:	d001      	beq.n	801a33e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a33a:	2301      	movs	r3, #1
 801a33c:	e000      	b.n	801a340 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a33e:	2300      	movs	r3, #0
}
 801a340:	4618      	mov	r0, r3
 801a342:	3708      	adds	r7, #8
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}
 801a348:	20004728 	.word	0x20004728

0801a34c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b086      	sub	sp, #24
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
 801a354:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	685b      	ldr	r3, [r3, #4]
 801a35a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a35c:	697b      	ldr	r3, [r7, #20]
 801a35e:	781b      	ldrb	r3, [r3, #0]
 801a360:	091b      	lsrs	r3, r3, #4
 801a362:	b2db      	uxtb	r3, r3
 801a364:	2b04      	cmp	r3, #4
 801a366:	d004      	beq.n	801a372 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	f7f8 f865 	bl	8012438 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a36e:	2300      	movs	r3, #0
 801a370:	e107      	b.n	801a582 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a372:	697b      	ldr	r3, [r7, #20]
 801a374:	781b      	ldrb	r3, [r3, #0]
 801a376:	f003 030f 	and.w	r3, r3, #15
 801a37a:	b2db      	uxtb	r3, r3
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	b2db      	uxtb	r3, r3
 801a380:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a382:	697b      	ldr	r3, [r7, #20]
 801a384:	885b      	ldrh	r3, [r3, #2]
 801a386:	b29b      	uxth	r3, r3
 801a388:	4618      	mov	r0, r3
 801a38a:	f7f6 fc8d 	bl	8010ca8 <lwip_htons>
 801a38e:	4603      	mov	r3, r0
 801a390:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	891b      	ldrh	r3, [r3, #8]
 801a396:	89ba      	ldrh	r2, [r7, #12]
 801a398:	429a      	cmp	r2, r3
 801a39a:	d204      	bcs.n	801a3a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801a39c:	89bb      	ldrh	r3, [r7, #12]
 801a39e:	4619      	mov	r1, r3
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	f7f7 fec3 	bl	801212c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	895b      	ldrh	r3, [r3, #10]
 801a3aa:	89fa      	ldrh	r2, [r7, #14]
 801a3ac:	429a      	cmp	r2, r3
 801a3ae:	d807      	bhi.n	801a3c0 <ip4_input+0x74>
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	891b      	ldrh	r3, [r3, #8]
 801a3b4:	89ba      	ldrh	r2, [r7, #12]
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	d802      	bhi.n	801a3c0 <ip4_input+0x74>
 801a3ba:	89fb      	ldrh	r3, [r7, #14]
 801a3bc:	2b13      	cmp	r3, #19
 801a3be:	d804      	bhi.n	801a3ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a3c0:	6878      	ldr	r0, [r7, #4]
 801a3c2:	f7f8 f839 	bl	8012438 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	e0db      	b.n	801a582 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a3ca:	697b      	ldr	r3, [r7, #20]
 801a3cc:	691b      	ldr	r3, [r3, #16]
 801a3ce:	4a6f      	ldr	r2, [pc, #444]	; (801a58c <ip4_input+0x240>)
 801a3d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a3d2:	697b      	ldr	r3, [r7, #20]
 801a3d4:	68db      	ldr	r3, [r3, #12]
 801a3d6:	4a6d      	ldr	r2, [pc, #436]	; (801a58c <ip4_input+0x240>)
 801a3d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a3da:	4b6c      	ldr	r3, [pc, #432]	; (801a58c <ip4_input+0x240>)
 801a3dc:	695b      	ldr	r3, [r3, #20]
 801a3de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a3e2:	2be0      	cmp	r3, #224	; 0xe0
 801a3e4:	d112      	bne.n	801a40c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a3e6:	683b      	ldr	r3, [r7, #0]
 801a3e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a3ec:	f003 0301 	and.w	r3, r3, #1
 801a3f0:	b2db      	uxtb	r3, r3
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d007      	beq.n	801a406 <ip4_input+0xba>
 801a3f6:	683b      	ldr	r3, [r7, #0]
 801a3f8:	3304      	adds	r3, #4
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d002      	beq.n	801a406 <ip4_input+0xba>
      netif = inp;
 801a400:	683b      	ldr	r3, [r7, #0]
 801a402:	613b      	str	r3, [r7, #16]
 801a404:	e02a      	b.n	801a45c <ip4_input+0x110>
    } else {
      netif = NULL;
 801a406:	2300      	movs	r3, #0
 801a408:	613b      	str	r3, [r7, #16]
 801a40a:	e027      	b.n	801a45c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a40c:	6838      	ldr	r0, [r7, #0]
 801a40e:	f7ff ff73 	bl	801a2f8 <ip4_input_accept>
 801a412:	4603      	mov	r3, r0
 801a414:	2b00      	cmp	r3, #0
 801a416:	d002      	beq.n	801a41e <ip4_input+0xd2>
      netif = inp;
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	613b      	str	r3, [r7, #16]
 801a41c:	e01e      	b.n	801a45c <ip4_input+0x110>
    } else {
      netif = NULL;
 801a41e:	2300      	movs	r3, #0
 801a420:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a422:	4b5a      	ldr	r3, [pc, #360]	; (801a58c <ip4_input+0x240>)
 801a424:	695b      	ldr	r3, [r3, #20]
 801a426:	b2db      	uxtb	r3, r3
 801a428:	2b7f      	cmp	r3, #127	; 0x7f
 801a42a:	d017      	beq.n	801a45c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a42c:	4b58      	ldr	r3, [pc, #352]	; (801a590 <ip4_input+0x244>)
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	613b      	str	r3, [r7, #16]
 801a432:	e00e      	b.n	801a452 <ip4_input+0x106>
          if (netif == inp) {
 801a434:	693a      	ldr	r2, [r7, #16]
 801a436:	683b      	ldr	r3, [r7, #0]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d006      	beq.n	801a44a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a43c:	6938      	ldr	r0, [r7, #16]
 801a43e:	f7ff ff5b 	bl	801a2f8 <ip4_input_accept>
 801a442:	4603      	mov	r3, r0
 801a444:	2b00      	cmp	r3, #0
 801a446:	d108      	bne.n	801a45a <ip4_input+0x10e>
 801a448:	e000      	b.n	801a44c <ip4_input+0x100>
            continue;
 801a44a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a44c:	693b      	ldr	r3, [r7, #16]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	613b      	str	r3, [r7, #16]
 801a452:	693b      	ldr	r3, [r7, #16]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d1ed      	bne.n	801a434 <ip4_input+0xe8>
 801a458:	e000      	b.n	801a45c <ip4_input+0x110>
            break;
 801a45a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a45c:	4b4b      	ldr	r3, [pc, #300]	; (801a58c <ip4_input+0x240>)
 801a45e:	691b      	ldr	r3, [r3, #16]
 801a460:	6839      	ldr	r1, [r7, #0]
 801a462:	4618      	mov	r0, r3
 801a464:	f000 f96e 	bl	801a744 <ip4_addr_isbroadcast_u32>
 801a468:	4603      	mov	r3, r0
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d105      	bne.n	801a47a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a46e:	4b47      	ldr	r3, [pc, #284]	; (801a58c <ip4_input+0x240>)
 801a470:	691b      	ldr	r3, [r3, #16]
 801a472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a476:	2be0      	cmp	r3, #224	; 0xe0
 801a478:	d104      	bne.n	801a484 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a47a:	6878      	ldr	r0, [r7, #4]
 801a47c:	f7f7 ffdc 	bl	8012438 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a480:	2300      	movs	r3, #0
 801a482:	e07e      	b.n	801a582 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a484:	693b      	ldr	r3, [r7, #16]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d104      	bne.n	801a494 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a48a:	6878      	ldr	r0, [r7, #4]
 801a48c:	f7f7 ffd4 	bl	8012438 <pbuf_free>
    return ERR_OK;
 801a490:	2300      	movs	r3, #0
 801a492:	e076      	b.n	801a582 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a494:	697b      	ldr	r3, [r7, #20]
 801a496:	88db      	ldrh	r3, [r3, #6]
 801a498:	b29b      	uxth	r3, r3
 801a49a:	461a      	mov	r2, r3
 801a49c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a4a0:	4013      	ands	r3, r2
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d00b      	beq.n	801a4be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a4a6:	6878      	ldr	r0, [r7, #4]
 801a4a8:	f000 fc92 	bl	801add0 <ip4_reass>
 801a4ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d101      	bne.n	801a4b8 <ip4_input+0x16c>
      return ERR_OK;
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	e064      	b.n	801a582 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a4be:	4a33      	ldr	r2, [pc, #204]	; (801a58c <ip4_input+0x240>)
 801a4c0:	693b      	ldr	r3, [r7, #16]
 801a4c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a4c4:	4a31      	ldr	r2, [pc, #196]	; (801a58c <ip4_input+0x240>)
 801a4c6:	683b      	ldr	r3, [r7, #0]
 801a4c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a4ca:	4a30      	ldr	r2, [pc, #192]	; (801a58c <ip4_input+0x240>)
 801a4cc:	697b      	ldr	r3, [r7, #20]
 801a4ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a4d0:	697b      	ldr	r3, [r7, #20]
 801a4d2:	781b      	ldrb	r3, [r3, #0]
 801a4d4:	f003 030f 	and.w	r3, r3, #15
 801a4d8:	b2db      	uxtb	r3, r3
 801a4da:	009b      	lsls	r3, r3, #2
 801a4dc:	b2db      	uxtb	r3, r3
 801a4de:	b29a      	uxth	r2, r3
 801a4e0:	4b2a      	ldr	r3, [pc, #168]	; (801a58c <ip4_input+0x240>)
 801a4e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a4e4:	89fb      	ldrh	r3, [r7, #14]
 801a4e6:	4619      	mov	r1, r3
 801a4e8:	6878      	ldr	r0, [r7, #4]
 801a4ea:	f7f7 ff1f 	bl	801232c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a4ee:	697b      	ldr	r3, [r7, #20]
 801a4f0:	7a5b      	ldrb	r3, [r3, #9]
 801a4f2:	2b11      	cmp	r3, #17
 801a4f4:	d006      	beq.n	801a504 <ip4_input+0x1b8>
 801a4f6:	2b11      	cmp	r3, #17
 801a4f8:	dc13      	bgt.n	801a522 <ip4_input+0x1d6>
 801a4fa:	2b01      	cmp	r3, #1
 801a4fc:	d00c      	beq.n	801a518 <ip4_input+0x1cc>
 801a4fe:	2b06      	cmp	r3, #6
 801a500:	d005      	beq.n	801a50e <ip4_input+0x1c2>
 801a502:	e00e      	b.n	801a522 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a504:	6839      	ldr	r1, [r7, #0]
 801a506:	6878      	ldr	r0, [r7, #4]
 801a508:	f7fe fc4c 	bl	8018da4 <udp_input>
        break;
 801a50c:	e026      	b.n	801a55c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a50e:	6839      	ldr	r1, [r7, #0]
 801a510:	6878      	ldr	r0, [r7, #4]
 801a512:	f7fa f86d 	bl	80145f0 <tcp_input>
        break;
 801a516:	e021      	b.n	801a55c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a518:	6839      	ldr	r1, [r7, #0]
 801a51a:	6878      	ldr	r0, [r7, #4]
 801a51c:	f7ff fcd2 	bl	8019ec4 <icmp_input>
        break;
 801a520:	e01c      	b.n	801a55c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a522:	4b1a      	ldr	r3, [pc, #104]	; (801a58c <ip4_input+0x240>)
 801a524:	695b      	ldr	r3, [r3, #20]
 801a526:	6939      	ldr	r1, [r7, #16]
 801a528:	4618      	mov	r0, r3
 801a52a:	f000 f90b 	bl	801a744 <ip4_addr_isbroadcast_u32>
 801a52e:	4603      	mov	r3, r0
 801a530:	2b00      	cmp	r3, #0
 801a532:	d10f      	bne.n	801a554 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a534:	4b15      	ldr	r3, [pc, #84]	; (801a58c <ip4_input+0x240>)
 801a536:	695b      	ldr	r3, [r3, #20]
 801a538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a53c:	2be0      	cmp	r3, #224	; 0xe0
 801a53e:	d009      	beq.n	801a554 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a544:	4619      	mov	r1, r3
 801a546:	6878      	ldr	r0, [r7, #4]
 801a548:	f7f7 ff63 	bl	8012412 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a54c:	2102      	movs	r1, #2
 801a54e:	6878      	ldr	r0, [r7, #4]
 801a550:	f7ff fdce 	bl	801a0f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a554:	6878      	ldr	r0, [r7, #4]
 801a556:	f7f7 ff6f 	bl	8012438 <pbuf_free>
        break;
 801a55a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a55c:	4b0b      	ldr	r3, [pc, #44]	; (801a58c <ip4_input+0x240>)
 801a55e:	2200      	movs	r2, #0
 801a560:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a562:	4b0a      	ldr	r3, [pc, #40]	; (801a58c <ip4_input+0x240>)
 801a564:	2200      	movs	r2, #0
 801a566:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a568:	4b08      	ldr	r3, [pc, #32]	; (801a58c <ip4_input+0x240>)
 801a56a:	2200      	movs	r2, #0
 801a56c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a56e:	4b07      	ldr	r3, [pc, #28]	; (801a58c <ip4_input+0x240>)
 801a570:	2200      	movs	r2, #0
 801a572:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a574:	4b05      	ldr	r3, [pc, #20]	; (801a58c <ip4_input+0x240>)
 801a576:	2200      	movs	r2, #0
 801a578:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a57a:	4b04      	ldr	r3, [pc, #16]	; (801a58c <ip4_input+0x240>)
 801a57c:	2200      	movs	r2, #0
 801a57e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a580:	2300      	movs	r3, #0
}
 801a582:	4618      	mov	r0, r3
 801a584:	3718      	adds	r7, #24
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	20004728 	.word	0x20004728
 801a590:	2000b444 	.word	0x2000b444

0801a594 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b08a      	sub	sp, #40	; 0x28
 801a598:	af04      	add	r7, sp, #16
 801a59a:	60f8      	str	r0, [r7, #12]
 801a59c:	60b9      	str	r1, [r7, #8]
 801a59e:	607a      	str	r2, [r7, #4]
 801a5a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a5a2:	68bb      	ldr	r3, [r7, #8]
 801a5a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d009      	beq.n	801a5c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d003      	beq.n	801a5ba <ip4_output_if+0x26>
 801a5b2:	68bb      	ldr	r3, [r7, #8]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d102      	bne.n	801a5c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5bc:	3304      	adds	r3, #4
 801a5be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a5c0:	78fa      	ldrb	r2, [r7, #3]
 801a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5c4:	9302      	str	r3, [sp, #8]
 801a5c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a5ca:	9301      	str	r3, [sp, #4]
 801a5cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a5d0:	9300      	str	r3, [sp, #0]
 801a5d2:	4613      	mov	r3, r2
 801a5d4:	687a      	ldr	r2, [r7, #4]
 801a5d6:	6979      	ldr	r1, [r7, #20]
 801a5d8:	68f8      	ldr	r0, [r7, #12]
 801a5da:	f000 f805 	bl	801a5e8 <ip4_output_if_src>
 801a5de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	3718      	adds	r7, #24
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}

0801a5e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b088      	sub	sp, #32
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	60f8      	str	r0, [r7, #12]
 801a5f0:	60b9      	str	r1, [r7, #8]
 801a5f2:	607a      	str	r2, [r7, #4]
 801a5f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	7b9b      	ldrb	r3, [r3, #14]
 801a5fa:	2b01      	cmp	r3, #1
 801a5fc:	d006      	beq.n	801a60c <ip4_output_if_src+0x24>
 801a5fe:	4b4b      	ldr	r3, [pc, #300]	; (801a72c <ip4_output_if_src+0x144>)
 801a600:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a604:	494a      	ldr	r1, [pc, #296]	; (801a730 <ip4_output_if_src+0x148>)
 801a606:	484b      	ldr	r0, [pc, #300]	; (801a734 <ip4_output_if_src+0x14c>)
 801a608:	f001 fb4c 	bl	801bca4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d060      	beq.n	801a6d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a612:	2314      	movs	r3, #20
 801a614:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a616:	2114      	movs	r1, #20
 801a618:	68f8      	ldr	r0, [r7, #12]
 801a61a:	f7f7 fe77 	bl	801230c <pbuf_add_header>
 801a61e:	4603      	mov	r3, r0
 801a620:	2b00      	cmp	r3, #0
 801a622:	d002      	beq.n	801a62a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a624:	f06f 0301 	mvn.w	r3, #1
 801a628:	e07c      	b.n	801a724 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	685b      	ldr	r3, [r3, #4]
 801a62e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	895b      	ldrh	r3, [r3, #10]
 801a634:	2b13      	cmp	r3, #19
 801a636:	d806      	bhi.n	801a646 <ip4_output_if_src+0x5e>
 801a638:	4b3c      	ldr	r3, [pc, #240]	; (801a72c <ip4_output_if_src+0x144>)
 801a63a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a63e:	493e      	ldr	r1, [pc, #248]	; (801a738 <ip4_output_if_src+0x150>)
 801a640:	483c      	ldr	r0, [pc, #240]	; (801a734 <ip4_output_if_src+0x14c>)
 801a642:	f001 fb2f 	bl	801bca4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a646:	69fb      	ldr	r3, [r7, #28]
 801a648:	78fa      	ldrb	r2, [r7, #3]
 801a64a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a64c:	69fb      	ldr	r3, [r7, #28]
 801a64e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a652:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	681a      	ldr	r2, [r3, #0]
 801a658:	69fb      	ldr	r3, [r7, #28]
 801a65a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a65c:	8b7b      	ldrh	r3, [r7, #26]
 801a65e:	089b      	lsrs	r3, r3, #2
 801a660:	b29b      	uxth	r3, r3
 801a662:	b2db      	uxtb	r3, r3
 801a664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a668:	b2da      	uxtb	r2, r3
 801a66a:	69fb      	ldr	r3, [r7, #28]
 801a66c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a66e:	69fb      	ldr	r3, [r7, #28]
 801a670:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a674:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	891b      	ldrh	r3, [r3, #8]
 801a67a:	4618      	mov	r0, r3
 801a67c:	f7f6 fb14 	bl	8010ca8 <lwip_htons>
 801a680:	4603      	mov	r3, r0
 801a682:	461a      	mov	r2, r3
 801a684:	69fb      	ldr	r3, [r7, #28]
 801a686:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a688:	69fb      	ldr	r3, [r7, #28]
 801a68a:	2200      	movs	r2, #0
 801a68c:	719a      	strb	r2, [r3, #6]
 801a68e:	2200      	movs	r2, #0
 801a690:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a692:	4b2a      	ldr	r3, [pc, #168]	; (801a73c <ip4_output_if_src+0x154>)
 801a694:	881b      	ldrh	r3, [r3, #0]
 801a696:	4618      	mov	r0, r3
 801a698:	f7f6 fb06 	bl	8010ca8 <lwip_htons>
 801a69c:	4603      	mov	r3, r0
 801a69e:	461a      	mov	r2, r3
 801a6a0:	69fb      	ldr	r3, [r7, #28]
 801a6a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a6a4:	4b25      	ldr	r3, [pc, #148]	; (801a73c <ip4_output_if_src+0x154>)
 801a6a6:	881b      	ldrh	r3, [r3, #0]
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	b29a      	uxth	r2, r3
 801a6ac:	4b23      	ldr	r3, [pc, #140]	; (801a73c <ip4_output_if_src+0x154>)
 801a6ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d104      	bne.n	801a6c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a6b6:	4b22      	ldr	r3, [pc, #136]	; (801a740 <ip4_output_if_src+0x158>)
 801a6b8:	681a      	ldr	r2, [r3, #0]
 801a6ba:	69fb      	ldr	r3, [r7, #28]
 801a6bc:	60da      	str	r2, [r3, #12]
 801a6be:	e003      	b.n	801a6c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	681a      	ldr	r2, [r3, #0]
 801a6c4:	69fb      	ldr	r3, [r7, #28]
 801a6c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a6c8:	69fb      	ldr	r3, [r7, #28]
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	729a      	strb	r2, [r3, #10]
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	72da      	strb	r2, [r3, #11]
 801a6d2:	e00f      	b.n	801a6f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	895b      	ldrh	r3, [r3, #10]
 801a6d8:	2b13      	cmp	r3, #19
 801a6da:	d802      	bhi.n	801a6e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a6dc:	f06f 0301 	mvn.w	r3, #1
 801a6e0:	e020      	b.n	801a724 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	685b      	ldr	r3, [r3, #4]
 801a6e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a6e8:	69fb      	ldr	r3, [r7, #28]
 801a6ea:	691b      	ldr	r3, [r3, #16]
 801a6ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a6ee:	f107 0314 	add.w	r3, r7, #20
 801a6f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d00c      	beq.n	801a716 <ip4_output_if_src+0x12e>
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	891a      	ldrh	r2, [r3, #8]
 801a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a702:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a704:	429a      	cmp	r2, r3
 801a706:	d906      	bls.n	801a716 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a708:	687a      	ldr	r2, [r7, #4]
 801a70a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a70c:	68f8      	ldr	r0, [r7, #12]
 801a70e:	f000 fd53 	bl	801b1b8 <ip4_frag>
 801a712:	4603      	mov	r3, r0
 801a714:	e006      	b.n	801a724 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a718:	695b      	ldr	r3, [r3, #20]
 801a71a:	687a      	ldr	r2, [r7, #4]
 801a71c:	68f9      	ldr	r1, [r7, #12]
 801a71e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a720:	4798      	blx	r3
 801a722:	4603      	mov	r3, r0
}
 801a724:	4618      	mov	r0, r3
 801a726:	3720      	adds	r7, #32
 801a728:	46bd      	mov	sp, r7
 801a72a:	bd80      	pop	{r7, pc}
 801a72c:	0801f8a0 	.word	0x0801f8a0
 801a730:	0801f8d4 	.word	0x0801f8d4
 801a734:	0801f8e0 	.word	0x0801f8e0
 801a738:	0801f908 	.word	0x0801f908
 801a73c:	2000b5a2 	.word	0x2000b5a2
 801a740:	0801fe88 	.word	0x0801fe88

0801a744 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a744:	b480      	push	{r7}
 801a746:	b085      	sub	sp, #20
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
 801a74c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a758:	d002      	beq.n	801a760 <ip4_addr_isbroadcast_u32+0x1c>
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d101      	bne.n	801a764 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a760:	2301      	movs	r3, #1
 801a762:	e02a      	b.n	801a7ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a764:	683b      	ldr	r3, [r7, #0]
 801a766:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a76a:	f003 0302 	and.w	r3, r3, #2
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d101      	bne.n	801a776 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a772:	2300      	movs	r3, #0
 801a774:	e021      	b.n	801a7ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a776:	683b      	ldr	r3, [r7, #0]
 801a778:	3304      	adds	r3, #4
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	687a      	ldr	r2, [r7, #4]
 801a77e:	429a      	cmp	r2, r3
 801a780:	d101      	bne.n	801a786 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a782:	2300      	movs	r3, #0
 801a784:	e019      	b.n	801a7ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a786:	68fa      	ldr	r2, [r7, #12]
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	3304      	adds	r3, #4
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	405a      	eors	r2, r3
 801a790:	683b      	ldr	r3, [r7, #0]
 801a792:	3308      	adds	r3, #8
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	4013      	ands	r3, r2
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d10d      	bne.n	801a7b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a79c:	683b      	ldr	r3, [r7, #0]
 801a79e:	3308      	adds	r3, #8
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	43da      	mvns	r2, r3
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	3308      	adds	r3, #8
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a7b0:	429a      	cmp	r2, r3
 801a7b2:	d101      	bne.n	801a7b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a7b4:	2301      	movs	r3, #1
 801a7b6:	e000      	b.n	801a7ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a7b8:	2300      	movs	r3, #0
  }
}
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	3714      	adds	r7, #20
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c4:	4770      	bx	lr
	...

0801a7c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b084      	sub	sp, #16
 801a7cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a7d2:	4b12      	ldr	r3, [pc, #72]	; (801a81c <ip_reass_tmr+0x54>)
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a7d8:	e018      	b.n	801a80c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	7fdb      	ldrb	r3, [r3, #31]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d00b      	beq.n	801a7fa <ip_reass_tmr+0x32>
      r->timer--;
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	7fdb      	ldrb	r3, [r3, #31]
 801a7e6:	3b01      	subs	r3, #1
 801a7e8:	b2da      	uxtb	r2, r3
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	60fb      	str	r3, [r7, #12]
 801a7f8:	e008      	b.n	801a80c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a804:	68b9      	ldr	r1, [r7, #8]
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f000 f80a 	bl	801a820 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d1e3      	bne.n	801a7da <ip_reass_tmr+0x12>
    }
  }
}
 801a812:	bf00      	nop
 801a814:	bf00      	nop
 801a816:	3710      	adds	r7, #16
 801a818:	46bd      	mov	sp, r7
 801a81a:	bd80      	pop	{r7, pc}
 801a81c:	2000b5a4 	.word	0x2000b5a4

0801a820 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b088      	sub	sp, #32
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
 801a828:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a82a:	2300      	movs	r3, #0
 801a82c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a82e:	683a      	ldr	r2, [r7, #0]
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	429a      	cmp	r2, r3
 801a834:	d105      	bne.n	801a842 <ip_reass_free_complete_datagram+0x22>
 801a836:	4b45      	ldr	r3, [pc, #276]	; (801a94c <ip_reass_free_complete_datagram+0x12c>)
 801a838:	22ab      	movs	r2, #171	; 0xab
 801a83a:	4945      	ldr	r1, [pc, #276]	; (801a950 <ip_reass_free_complete_datagram+0x130>)
 801a83c:	4845      	ldr	r0, [pc, #276]	; (801a954 <ip_reass_free_complete_datagram+0x134>)
 801a83e:	f001 fa31 	bl	801bca4 <iprintf>
  if (prev != NULL) {
 801a842:	683b      	ldr	r3, [r7, #0]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d00a      	beq.n	801a85e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a848:	683b      	ldr	r3, [r7, #0]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	687a      	ldr	r2, [r7, #4]
 801a84e:	429a      	cmp	r2, r3
 801a850:	d005      	beq.n	801a85e <ip_reass_free_complete_datagram+0x3e>
 801a852:	4b3e      	ldr	r3, [pc, #248]	; (801a94c <ip_reass_free_complete_datagram+0x12c>)
 801a854:	22ad      	movs	r2, #173	; 0xad
 801a856:	4940      	ldr	r1, [pc, #256]	; (801a958 <ip_reass_free_complete_datagram+0x138>)
 801a858:	483e      	ldr	r0, [pc, #248]	; (801a954 <ip_reass_free_complete_datagram+0x134>)
 801a85a:	f001 fa23 	bl	801bca4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	685b      	ldr	r3, [r3, #4]
 801a862:	685b      	ldr	r3, [r3, #4]
 801a864:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a866:	697b      	ldr	r3, [r7, #20]
 801a868:	889b      	ldrh	r3, [r3, #4]
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d12a      	bne.n	801a8c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	685b      	ldr	r3, [r3, #4]
 801a874:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a876:	697b      	ldr	r3, [r7, #20]
 801a878:	681a      	ldr	r2, [r3, #0]
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a87e:	69bb      	ldr	r3, [r7, #24]
 801a880:	6858      	ldr	r0, [r3, #4]
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	3308      	adds	r3, #8
 801a886:	2214      	movs	r2, #20
 801a888:	4619      	mov	r1, r3
 801a88a:	f001 fb7c 	bl	801bf86 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a88e:	2101      	movs	r1, #1
 801a890:	69b8      	ldr	r0, [r7, #24]
 801a892:	f7ff fc3d 	bl	801a110 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a896:	69b8      	ldr	r0, [r7, #24]
 801a898:	f7f7 fe56 	bl	8012548 <pbuf_clen>
 801a89c:	4603      	mov	r3, r0
 801a89e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a8a0:	8bfa      	ldrh	r2, [r7, #30]
 801a8a2:	8a7b      	ldrh	r3, [r7, #18]
 801a8a4:	4413      	add	r3, r2
 801a8a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a8aa:	db05      	blt.n	801a8b8 <ip_reass_free_complete_datagram+0x98>
 801a8ac:	4b27      	ldr	r3, [pc, #156]	; (801a94c <ip_reass_free_complete_datagram+0x12c>)
 801a8ae:	22bc      	movs	r2, #188	; 0xbc
 801a8b0:	492a      	ldr	r1, [pc, #168]	; (801a95c <ip_reass_free_complete_datagram+0x13c>)
 801a8b2:	4828      	ldr	r0, [pc, #160]	; (801a954 <ip_reass_free_complete_datagram+0x134>)
 801a8b4:	f001 f9f6 	bl	801bca4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a8b8:	8bfa      	ldrh	r2, [r7, #30]
 801a8ba:	8a7b      	ldrh	r3, [r7, #18]
 801a8bc:	4413      	add	r3, r2
 801a8be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a8c0:	69b8      	ldr	r0, [r7, #24]
 801a8c2:	f7f7 fdb9 	bl	8012438 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	685b      	ldr	r3, [r3, #4]
 801a8ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a8cc:	e01f      	b.n	801a90e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a8ce:	69bb      	ldr	r3, [r7, #24]
 801a8d0:	685b      	ldr	r3, [r3, #4]
 801a8d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a8d4:	69bb      	ldr	r3, [r7, #24]
 801a8d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a8d8:	697b      	ldr	r3, [r7, #20]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a8de:	68f8      	ldr	r0, [r7, #12]
 801a8e0:	f7f7 fe32 	bl	8012548 <pbuf_clen>
 801a8e4:	4603      	mov	r3, r0
 801a8e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a8e8:	8bfa      	ldrh	r2, [r7, #30]
 801a8ea:	8a7b      	ldrh	r3, [r7, #18]
 801a8ec:	4413      	add	r3, r2
 801a8ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a8f2:	db05      	blt.n	801a900 <ip_reass_free_complete_datagram+0xe0>
 801a8f4:	4b15      	ldr	r3, [pc, #84]	; (801a94c <ip_reass_free_complete_datagram+0x12c>)
 801a8f6:	22cc      	movs	r2, #204	; 0xcc
 801a8f8:	4918      	ldr	r1, [pc, #96]	; (801a95c <ip_reass_free_complete_datagram+0x13c>)
 801a8fa:	4816      	ldr	r0, [pc, #88]	; (801a954 <ip_reass_free_complete_datagram+0x134>)
 801a8fc:	f001 f9d2 	bl	801bca4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a900:	8bfa      	ldrh	r2, [r7, #30]
 801a902:	8a7b      	ldrh	r3, [r7, #18]
 801a904:	4413      	add	r3, r2
 801a906:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a908:	68f8      	ldr	r0, [r7, #12]
 801a90a:	f7f7 fd95 	bl	8012438 <pbuf_free>
  while (p != NULL) {
 801a90e:	69bb      	ldr	r3, [r7, #24]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d1dc      	bne.n	801a8ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a914:	6839      	ldr	r1, [r7, #0]
 801a916:	6878      	ldr	r0, [r7, #4]
 801a918:	f000 f8c2 	bl	801aaa0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a91c:	4b10      	ldr	r3, [pc, #64]	; (801a960 <ip_reass_free_complete_datagram+0x140>)
 801a91e:	881b      	ldrh	r3, [r3, #0]
 801a920:	8bfa      	ldrh	r2, [r7, #30]
 801a922:	429a      	cmp	r2, r3
 801a924:	d905      	bls.n	801a932 <ip_reass_free_complete_datagram+0x112>
 801a926:	4b09      	ldr	r3, [pc, #36]	; (801a94c <ip_reass_free_complete_datagram+0x12c>)
 801a928:	22d2      	movs	r2, #210	; 0xd2
 801a92a:	490e      	ldr	r1, [pc, #56]	; (801a964 <ip_reass_free_complete_datagram+0x144>)
 801a92c:	4809      	ldr	r0, [pc, #36]	; (801a954 <ip_reass_free_complete_datagram+0x134>)
 801a92e:	f001 f9b9 	bl	801bca4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a932:	4b0b      	ldr	r3, [pc, #44]	; (801a960 <ip_reass_free_complete_datagram+0x140>)
 801a934:	881a      	ldrh	r2, [r3, #0]
 801a936:	8bfb      	ldrh	r3, [r7, #30]
 801a938:	1ad3      	subs	r3, r2, r3
 801a93a:	b29a      	uxth	r2, r3
 801a93c:	4b08      	ldr	r3, [pc, #32]	; (801a960 <ip_reass_free_complete_datagram+0x140>)
 801a93e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a940:	8bfb      	ldrh	r3, [r7, #30]
}
 801a942:	4618      	mov	r0, r3
 801a944:	3720      	adds	r7, #32
 801a946:	46bd      	mov	sp, r7
 801a948:	bd80      	pop	{r7, pc}
 801a94a:	bf00      	nop
 801a94c:	0801f938 	.word	0x0801f938
 801a950:	0801f974 	.word	0x0801f974
 801a954:	0801f980 	.word	0x0801f980
 801a958:	0801f9a8 	.word	0x0801f9a8
 801a95c:	0801f9bc 	.word	0x0801f9bc
 801a960:	2000b5a8 	.word	0x2000b5a8
 801a964:	0801f9dc 	.word	0x0801f9dc

0801a968 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b08a      	sub	sp, #40	; 0x28
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a972:	2300      	movs	r3, #0
 801a974:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a976:	2300      	movs	r3, #0
 801a978:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a97a:	2300      	movs	r3, #0
 801a97c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a97e:	2300      	movs	r3, #0
 801a980:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a982:	2300      	movs	r3, #0
 801a984:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a986:	4b28      	ldr	r3, [pc, #160]	; (801aa28 <ip_reass_remove_oldest_datagram+0xc0>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a98c:	e030      	b.n	801a9f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a990:	695a      	ldr	r2, [r3, #20]
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	68db      	ldr	r3, [r3, #12]
 801a996:	429a      	cmp	r2, r3
 801a998:	d10c      	bne.n	801a9b4 <ip_reass_remove_oldest_datagram+0x4c>
 801a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a99c:	699a      	ldr	r2, [r3, #24]
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	691b      	ldr	r3, [r3, #16]
 801a9a2:	429a      	cmp	r2, r3
 801a9a4:	d106      	bne.n	801a9b4 <ip_reass_remove_oldest_datagram+0x4c>
 801a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9a8:	899a      	ldrh	r2, [r3, #12]
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	889b      	ldrh	r3, [r3, #4]
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d014      	beq.n	801a9de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a9b4:	693b      	ldr	r3, [r7, #16]
 801a9b6:	3301      	adds	r3, #1
 801a9b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a9ba:	6a3b      	ldr	r3, [r7, #32]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d104      	bne.n	801a9ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a9c4:	69fb      	ldr	r3, [r7, #28]
 801a9c6:	61bb      	str	r3, [r7, #24]
 801a9c8:	e009      	b.n	801a9de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9cc:	7fda      	ldrb	r2, [r3, #31]
 801a9ce:	6a3b      	ldr	r3, [r7, #32]
 801a9d0:	7fdb      	ldrb	r3, [r3, #31]
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	d803      	bhi.n	801a9de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a9da:	69fb      	ldr	r3, [r7, #28]
 801a9dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d001      	beq.n	801a9ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d1cb      	bne.n	801a98e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a9f6:	6a3b      	ldr	r3, [r7, #32]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d008      	beq.n	801aa0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a9fc:	69b9      	ldr	r1, [r7, #24]
 801a9fe:	6a38      	ldr	r0, [r7, #32]
 801aa00:	f7ff ff0e 	bl	801a820 <ip_reass_free_complete_datagram>
 801aa04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801aa06:	697a      	ldr	r2, [r7, #20]
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	4413      	add	r3, r2
 801aa0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801aa0e:	697a      	ldr	r2, [r7, #20]
 801aa10:	683b      	ldr	r3, [r7, #0]
 801aa12:	429a      	cmp	r2, r3
 801aa14:	da02      	bge.n	801aa1c <ip_reass_remove_oldest_datagram+0xb4>
 801aa16:	693b      	ldr	r3, [r7, #16]
 801aa18:	2b01      	cmp	r3, #1
 801aa1a:	dcac      	bgt.n	801a976 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801aa1c:	697b      	ldr	r3, [r7, #20]
}
 801aa1e:	4618      	mov	r0, r3
 801aa20:	3728      	adds	r7, #40	; 0x28
 801aa22:	46bd      	mov	sp, r7
 801aa24:	bd80      	pop	{r7, pc}
 801aa26:	bf00      	nop
 801aa28:	2000b5a4 	.word	0x2000b5a4

0801aa2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	b084      	sub	sp, #16
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	6078      	str	r0, [r7, #4]
 801aa34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801aa36:	2004      	movs	r0, #4
 801aa38:	f7f6 fe18 	bl	801166c <memp_malloc>
 801aa3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d110      	bne.n	801aa66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801aa44:	6839      	ldr	r1, [r7, #0]
 801aa46:	6878      	ldr	r0, [r7, #4]
 801aa48:	f7ff ff8e 	bl	801a968 <ip_reass_remove_oldest_datagram>
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	4293      	cmp	r3, r2
 801aa52:	dc03      	bgt.n	801aa5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801aa54:	2004      	movs	r0, #4
 801aa56:	f7f6 fe09 	bl	801166c <memp_malloc>
 801aa5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d101      	bne.n	801aa66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801aa62:	2300      	movs	r3, #0
 801aa64:	e016      	b.n	801aa94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801aa66:	2220      	movs	r2, #32
 801aa68:	2100      	movs	r1, #0
 801aa6a:	68f8      	ldr	r0, [r7, #12]
 801aa6c:	f001 f9f2 	bl	801be54 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	220f      	movs	r2, #15
 801aa74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801aa76:	4b09      	ldr	r3, [pc, #36]	; (801aa9c <ip_reass_enqueue_new_datagram+0x70>)
 801aa78:	681a      	ldr	r2, [r3, #0]
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801aa7e:	4a07      	ldr	r2, [pc, #28]	; (801aa9c <ip_reass_enqueue_new_datagram+0x70>)
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	3308      	adds	r3, #8
 801aa88:	2214      	movs	r2, #20
 801aa8a:	6879      	ldr	r1, [r7, #4]
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	f001 fa7a 	bl	801bf86 <memcpy>
  return ipr;
 801aa92:	68fb      	ldr	r3, [r7, #12]
}
 801aa94:	4618      	mov	r0, r3
 801aa96:	3710      	adds	r7, #16
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd80      	pop	{r7, pc}
 801aa9c:	2000b5a4 	.word	0x2000b5a4

0801aaa0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801aaaa:	4b10      	ldr	r3, [pc, #64]	; (801aaec <ip_reass_dequeue_datagram+0x4c>)
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	687a      	ldr	r2, [r7, #4]
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d104      	bne.n	801aabe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	4a0c      	ldr	r2, [pc, #48]	; (801aaec <ip_reass_dequeue_datagram+0x4c>)
 801aaba:	6013      	str	r3, [r2, #0]
 801aabc:	e00d      	b.n	801aada <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d106      	bne.n	801aad2 <ip_reass_dequeue_datagram+0x32>
 801aac4:	4b0a      	ldr	r3, [pc, #40]	; (801aaf0 <ip_reass_dequeue_datagram+0x50>)
 801aac6:	f240 1245 	movw	r2, #325	; 0x145
 801aaca:	490a      	ldr	r1, [pc, #40]	; (801aaf4 <ip_reass_dequeue_datagram+0x54>)
 801aacc:	480a      	ldr	r0, [pc, #40]	; (801aaf8 <ip_reass_dequeue_datagram+0x58>)
 801aace:	f001 f8e9 	bl	801bca4 <iprintf>
    prev->next = ipr->next;
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	681a      	ldr	r2, [r3, #0]
 801aad6:	683b      	ldr	r3, [r7, #0]
 801aad8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801aada:	6879      	ldr	r1, [r7, #4]
 801aadc:	2004      	movs	r0, #4
 801aade:	f7f6 fe35 	bl	801174c <memp_free>
}
 801aae2:	bf00      	nop
 801aae4:	3708      	adds	r7, #8
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}
 801aaea:	bf00      	nop
 801aaec:	2000b5a4 	.word	0x2000b5a4
 801aaf0:	0801f938 	.word	0x0801f938
 801aaf4:	0801fa00 	.word	0x0801fa00
 801aaf8:	0801f980 	.word	0x0801f980

0801aafc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b08c      	sub	sp, #48	; 0x30
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	60f8      	str	r0, [r7, #12]
 801ab04:	60b9      	str	r1, [r7, #8]
 801ab06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ab08:	2300      	movs	r3, #0
 801ab0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	685b      	ldr	r3, [r3, #4]
 801ab14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ab16:	69fb      	ldr	r3, [r7, #28]
 801ab18:	885b      	ldrh	r3, [r3, #2]
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7f6 f8c3 	bl	8010ca8 <lwip_htons>
 801ab22:	4603      	mov	r3, r0
 801ab24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ab26:	69fb      	ldr	r3, [r7, #28]
 801ab28:	781b      	ldrb	r3, [r3, #0]
 801ab2a:	f003 030f 	and.w	r3, r3, #15
 801ab2e:	b2db      	uxtb	r3, r3
 801ab30:	009b      	lsls	r3, r3, #2
 801ab32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ab34:	7e7b      	ldrb	r3, [r7, #25]
 801ab36:	b29b      	uxth	r3, r3
 801ab38:	8b7a      	ldrh	r2, [r7, #26]
 801ab3a:	429a      	cmp	r2, r3
 801ab3c:	d202      	bcs.n	801ab44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ab42:	e135      	b.n	801adb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ab44:	7e7b      	ldrb	r3, [r7, #25]
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	8b7a      	ldrh	r2, [r7, #26]
 801ab4a:	1ad3      	subs	r3, r2, r3
 801ab4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ab4e:	69fb      	ldr	r3, [r7, #28]
 801ab50:	88db      	ldrh	r3, [r3, #6]
 801ab52:	b29b      	uxth	r3, r3
 801ab54:	4618      	mov	r0, r3
 801ab56:	f7f6 f8a7 	bl	8010ca8 <lwip_htons>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ab60:	b29b      	uxth	r3, r3
 801ab62:	00db      	lsls	r3, r3, #3
 801ab64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	685b      	ldr	r3, [r3, #4]
 801ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab6e:	2200      	movs	r2, #0
 801ab70:	701a      	strb	r2, [r3, #0]
 801ab72:	2200      	movs	r2, #0
 801ab74:	705a      	strb	r2, [r3, #1]
 801ab76:	2200      	movs	r2, #0
 801ab78:	709a      	strb	r2, [r3, #2]
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ab7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab80:	8afa      	ldrh	r2, [r7, #22]
 801ab82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ab84:	8afa      	ldrh	r2, [r7, #22]
 801ab86:	8b7b      	ldrh	r3, [r7, #26]
 801ab88:	4413      	add	r3, r2
 801ab8a:	b29a      	uxth	r2, r3
 801ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab92:	88db      	ldrh	r3, [r3, #6]
 801ab94:	b29b      	uxth	r3, r3
 801ab96:	8afa      	ldrh	r2, [r7, #22]
 801ab98:	429a      	cmp	r2, r3
 801ab9a:	d902      	bls.n	801aba2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 801aba0:	e106      	b.n	801adb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	685b      	ldr	r3, [r3, #4]
 801aba6:	627b      	str	r3, [r7, #36]	; 0x24
 801aba8:	e068      	b.n	801ac7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abac:	685b      	ldr	r3, [r3, #4]
 801abae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abb2:	889b      	ldrh	r3, [r3, #4]
 801abb4:	b29a      	uxth	r2, r3
 801abb6:	693b      	ldr	r3, [r7, #16]
 801abb8:	889b      	ldrh	r3, [r3, #4]
 801abba:	b29b      	uxth	r3, r3
 801abbc:	429a      	cmp	r2, r3
 801abbe:	d235      	bcs.n	801ac2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d020      	beq.n	801ac0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abce:	889b      	ldrh	r3, [r3, #4]
 801abd0:	b29a      	uxth	r2, r3
 801abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd4:	88db      	ldrh	r3, [r3, #6]
 801abd6:	b29b      	uxth	r3, r3
 801abd8:	429a      	cmp	r2, r3
 801abda:	d307      	bcc.n	801abec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abde:	88db      	ldrh	r3, [r3, #6]
 801abe0:	b29a      	uxth	r2, r3
 801abe2:	693b      	ldr	r3, [r7, #16]
 801abe4:	889b      	ldrh	r3, [r3, #4]
 801abe6:	b29b      	uxth	r3, r3
 801abe8:	429a      	cmp	r2, r3
 801abea:	d902      	bls.n	801abf2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801abec:	f04f 33ff 	mov.w	r3, #4294967295
 801abf0:	e0de      	b.n	801adb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abf4:	68ba      	ldr	r2, [r7, #8]
 801abf6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abfa:	88db      	ldrh	r3, [r3, #6]
 801abfc:	b29a      	uxth	r2, r3
 801abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac00:	889b      	ldrh	r3, [r3, #4]
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d03d      	beq.n	801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ac08:	2300      	movs	r3, #0
 801ac0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ac0c:	e03a      	b.n	801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ac0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac10:	88db      	ldrh	r3, [r3, #6]
 801ac12:	b29a      	uxth	r2, r3
 801ac14:	693b      	ldr	r3, [r7, #16]
 801ac16:	889b      	ldrh	r3, [r3, #4]
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	d902      	bls.n	801ac24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ac1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac22:	e0c5      	b.n	801adb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	68ba      	ldr	r2, [r7, #8]
 801ac28:	605a      	str	r2, [r3, #4]
      break;
 801ac2a:	e02b      	b.n	801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac2e:	889b      	ldrh	r3, [r3, #4]
 801ac30:	b29a      	uxth	r2, r3
 801ac32:	693b      	ldr	r3, [r7, #16]
 801ac34:	889b      	ldrh	r3, [r3, #4]
 801ac36:	b29b      	uxth	r3, r3
 801ac38:	429a      	cmp	r2, r3
 801ac3a:	d102      	bne.n	801ac42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ac3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac40:	e0b6      	b.n	801adb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac44:	889b      	ldrh	r3, [r3, #4]
 801ac46:	b29a      	uxth	r2, r3
 801ac48:	693b      	ldr	r3, [r7, #16]
 801ac4a:	88db      	ldrh	r3, [r3, #6]
 801ac4c:	b29b      	uxth	r3, r3
 801ac4e:	429a      	cmp	r2, r3
 801ac50:	d202      	bcs.n	801ac58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ac52:	f04f 33ff 	mov.w	r3, #4294967295
 801ac56:	e0ab      	b.n	801adb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d009      	beq.n	801ac72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac60:	88db      	ldrh	r3, [r3, #6]
 801ac62:	b29a      	uxth	r2, r3
 801ac64:	693b      	ldr	r3, [r7, #16]
 801ac66:	889b      	ldrh	r3, [r3, #4]
 801ac68:	b29b      	uxth	r3, r3
 801ac6a:	429a      	cmp	r2, r3
 801ac6c:	d001      	beq.n	801ac72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ac6e:	2300      	movs	r3, #0
 801ac70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ac72:	693b      	ldr	r3, [r7, #16]
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ac78:	693b      	ldr	r3, [r7, #16]
 801ac7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d193      	bne.n	801abaa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ac82:	e000      	b.n	801ac86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ac84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d12d      	bne.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d01c      	beq.n	801accc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac94:	88db      	ldrh	r3, [r3, #6]
 801ac96:	b29a      	uxth	r2, r3
 801ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac9a:	889b      	ldrh	r3, [r3, #4]
 801ac9c:	b29b      	uxth	r3, r3
 801ac9e:	429a      	cmp	r2, r3
 801aca0:	d906      	bls.n	801acb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801aca2:	4b45      	ldr	r3, [pc, #276]	; (801adb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aca4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801aca8:	4944      	ldr	r1, [pc, #272]	; (801adbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801acaa:	4845      	ldr	r0, [pc, #276]	; (801adc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801acac:	f000 fffa 	bl	801bca4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb2:	68ba      	ldr	r2, [r7, #8]
 801acb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb8:	88db      	ldrh	r3, [r3, #6]
 801acba:	b29a      	uxth	r2, r3
 801acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acbe:	889b      	ldrh	r3, [r3, #4]
 801acc0:	b29b      	uxth	r3, r3
 801acc2:	429a      	cmp	r2, r3
 801acc4:	d010      	beq.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801acc6:	2300      	movs	r3, #0
 801acc8:	623b      	str	r3, [r7, #32]
 801acca:	e00d      	b.n	801ace8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d006      	beq.n	801ace2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801acd4:	4b38      	ldr	r3, [pc, #224]	; (801adb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801acd6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801acda:	493a      	ldr	r1, [pc, #232]	; (801adc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801acdc:	4838      	ldr	r0, [pc, #224]	; (801adc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801acde:	f000 ffe1 	bl	801bca4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	68ba      	ldr	r2, [r7, #8]
 801ace6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d105      	bne.n	801acfa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	7f9b      	ldrb	r3, [r3, #30]
 801acf2:	f003 0301 	and.w	r3, r3, #1
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d059      	beq.n	801adae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801acfa:	6a3b      	ldr	r3, [r7, #32]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d04f      	beq.n	801ada0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	685b      	ldr	r3, [r3, #4]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d006      	beq.n	801ad16 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	685b      	ldr	r3, [r3, #4]
 801ad0c:	685b      	ldr	r3, [r3, #4]
 801ad0e:	889b      	ldrh	r3, [r3, #4]
 801ad10:	b29b      	uxth	r3, r3
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d002      	beq.n	801ad1c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ad16:	2300      	movs	r3, #0
 801ad18:	623b      	str	r3, [r7, #32]
 801ad1a:	e041      	b.n	801ada0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad1e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ad20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ad26:	e012      	b.n	801ad4e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2a:	685b      	ldr	r3, [r3, #4]
 801ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad30:	88db      	ldrh	r3, [r3, #6]
 801ad32:	b29a      	uxth	r2, r3
 801ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad36:	889b      	ldrh	r3, [r3, #4]
 801ad38:	b29b      	uxth	r3, r3
 801ad3a:	429a      	cmp	r2, r3
 801ad3c:	d002      	beq.n	801ad44 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ad3e:	2300      	movs	r3, #0
 801ad40:	623b      	str	r3, [r7, #32]
            break;
 801ad42:	e007      	b.n	801ad54 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad46:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d1e9      	bne.n	801ad28 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ad54:	6a3b      	ldr	r3, [r7, #32]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d022      	beq.n	801ada0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	685b      	ldr	r3, [r3, #4]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d106      	bne.n	801ad70 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ad62:	4b15      	ldr	r3, [pc, #84]	; (801adb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad64:	f240 12df 	movw	r2, #479	; 0x1df
 801ad68:	4917      	ldr	r1, [pc, #92]	; (801adc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ad6a:	4815      	ldr	r0, [pc, #84]	; (801adc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ad6c:	f000 ff9a 	bl	801bca4 <iprintf>
          LWIP_ASSERT("sanity check",
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	685b      	ldr	r3, [r3, #4]
 801ad74:	685b      	ldr	r3, [r3, #4]
 801ad76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	d106      	bne.n	801ad8a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ad7c:	4b0e      	ldr	r3, [pc, #56]	; (801adb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ad82:	4911      	ldr	r1, [pc, #68]	; (801adc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ad84:	480e      	ldr	r0, [pc, #56]	; (801adc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ad86:	f000 ff8d 	bl	801bca4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d006      	beq.n	801ada0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ad92:	4b09      	ldr	r3, [pc, #36]	; (801adb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad94:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ad98:	490c      	ldr	r1, [pc, #48]	; (801adcc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ad9a:	4809      	ldr	r0, [pc, #36]	; (801adc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ad9c:	f000 ff82 	bl	801bca4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ada0:	6a3b      	ldr	r3, [r7, #32]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	bf14      	ite	ne
 801ada6:	2301      	movne	r3, #1
 801ada8:	2300      	moveq	r3, #0
 801adaa:	b2db      	uxtb	r3, r3
 801adac:	e000      	b.n	801adb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801adae:	2300      	movs	r3, #0
}
 801adb0:	4618      	mov	r0, r3
 801adb2:	3730      	adds	r7, #48	; 0x30
 801adb4:	46bd      	mov	sp, r7
 801adb6:	bd80      	pop	{r7, pc}
 801adb8:	0801f938 	.word	0x0801f938
 801adbc:	0801fa1c 	.word	0x0801fa1c
 801adc0:	0801f980 	.word	0x0801f980
 801adc4:	0801fa3c 	.word	0x0801fa3c
 801adc8:	0801fa74 	.word	0x0801fa74
 801adcc:	0801fa84 	.word	0x0801fa84

0801add0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b08e      	sub	sp, #56	; 0x38
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	685b      	ldr	r3, [r3, #4]
 801addc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ade0:	781b      	ldrb	r3, [r3, #0]
 801ade2:	f003 030f 	and.w	r3, r3, #15
 801ade6:	b2db      	uxtb	r3, r3
 801ade8:	009b      	lsls	r3, r3, #2
 801adea:	b2db      	uxtb	r3, r3
 801adec:	2b14      	cmp	r3, #20
 801adee:	f040 8171 	bne.w	801b0d4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adf4:	88db      	ldrh	r3, [r3, #6]
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	4618      	mov	r0, r3
 801adfa:	f7f5 ff55 	bl	8010ca8 <lwip_htons>
 801adfe:	4603      	mov	r3, r0
 801ae00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae04:	b29b      	uxth	r3, r3
 801ae06:	00db      	lsls	r3, r3, #3
 801ae08:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae0c:	885b      	ldrh	r3, [r3, #2]
 801ae0e:	b29b      	uxth	r3, r3
 801ae10:	4618      	mov	r0, r3
 801ae12:	f7f5 ff49 	bl	8010ca8 <lwip_htons>
 801ae16:	4603      	mov	r3, r0
 801ae18:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae1c:	781b      	ldrb	r3, [r3, #0]
 801ae1e:	f003 030f 	and.w	r3, r3, #15
 801ae22:	b2db      	uxtb	r3, r3
 801ae24:	009b      	lsls	r3, r3, #2
 801ae26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801ae2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ae2e:	b29b      	uxth	r3, r3
 801ae30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae32:	429a      	cmp	r2, r3
 801ae34:	f0c0 8150 	bcc.w	801b0d8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ae38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ae3c:	b29b      	uxth	r3, r3
 801ae3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae40:	1ad3      	subs	r3, r2, r3
 801ae42:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ae44:	6878      	ldr	r0, [r7, #4]
 801ae46:	f7f7 fb7f 	bl	8012548 <pbuf_clen>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ae4e:	4b8c      	ldr	r3, [pc, #560]	; (801b080 <ip4_reass+0x2b0>)
 801ae50:	881b      	ldrh	r3, [r3, #0]
 801ae52:	461a      	mov	r2, r3
 801ae54:	8c3b      	ldrh	r3, [r7, #32]
 801ae56:	4413      	add	r3, r2
 801ae58:	2b0a      	cmp	r3, #10
 801ae5a:	dd10      	ble.n	801ae7e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ae5c:	8c3b      	ldrh	r3, [r7, #32]
 801ae5e:	4619      	mov	r1, r3
 801ae60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ae62:	f7ff fd81 	bl	801a968 <ip_reass_remove_oldest_datagram>
 801ae66:	4603      	mov	r3, r0
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	f000 8137 	beq.w	801b0dc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ae6e:	4b84      	ldr	r3, [pc, #528]	; (801b080 <ip4_reass+0x2b0>)
 801ae70:	881b      	ldrh	r3, [r3, #0]
 801ae72:	461a      	mov	r2, r3
 801ae74:	8c3b      	ldrh	r3, [r7, #32]
 801ae76:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ae78:	2b0a      	cmp	r3, #10
 801ae7a:	f300 812f 	bgt.w	801b0dc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ae7e:	4b81      	ldr	r3, [pc, #516]	; (801b084 <ip4_reass+0x2b4>)
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	633b      	str	r3, [r7, #48]	; 0x30
 801ae84:	e015      	b.n	801aeb2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae88:	695a      	ldr	r2, [r3, #20]
 801ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	429a      	cmp	r2, r3
 801ae90:	d10c      	bne.n	801aeac <ip4_reass+0xdc>
 801ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae94:	699a      	ldr	r2, [r3, #24]
 801ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae98:	691b      	ldr	r3, [r3, #16]
 801ae9a:	429a      	cmp	r2, r3
 801ae9c:	d106      	bne.n	801aeac <ip4_reass+0xdc>
 801ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea0:	899a      	ldrh	r2, [r3, #12]
 801aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aea4:	889b      	ldrh	r3, [r3, #4]
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	429a      	cmp	r2, r3
 801aeaa:	d006      	beq.n	801aeba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	633b      	str	r3, [r7, #48]	; 0x30
 801aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d1e6      	bne.n	801ae86 <ip4_reass+0xb6>
 801aeb8:	e000      	b.n	801aebc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801aeba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d109      	bne.n	801aed6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801aec2:	8c3b      	ldrh	r3, [r7, #32]
 801aec4:	4619      	mov	r1, r3
 801aec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aec8:	f7ff fdb0 	bl	801aa2c <ip_reass_enqueue_new_datagram>
 801aecc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d11c      	bne.n	801af0e <ip4_reass+0x13e>
      goto nullreturn;
 801aed4:	e105      	b.n	801b0e2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aed8:	88db      	ldrh	r3, [r3, #6]
 801aeda:	b29b      	uxth	r3, r3
 801aedc:	4618      	mov	r0, r3
 801aede:	f7f5 fee3 	bl	8010ca8 <lwip_htons>
 801aee2:	4603      	mov	r3, r0
 801aee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d110      	bne.n	801af0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeee:	89db      	ldrh	r3, [r3, #14]
 801aef0:	4618      	mov	r0, r3
 801aef2:	f7f5 fed9 	bl	8010ca8 <lwip_htons>
 801aef6:	4603      	mov	r3, r0
 801aef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d006      	beq.n	801af0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af02:	3308      	adds	r3, #8
 801af04:	2214      	movs	r2, #20
 801af06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801af08:	4618      	mov	r0, r3
 801af0a:	f001 f83c 	bl	801bf86 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af10:	88db      	ldrh	r3, [r3, #6]
 801af12:	b29b      	uxth	r3, r3
 801af14:	f003 0320 	and.w	r3, r3, #32
 801af18:	2b00      	cmp	r3, #0
 801af1a:	bf0c      	ite	eq
 801af1c:	2301      	moveq	r3, #1
 801af1e:	2300      	movne	r3, #0
 801af20:	b2db      	uxtb	r3, r3
 801af22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d00e      	beq.n	801af48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801af2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801af2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801af2e:	4413      	add	r3, r2
 801af30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801af32:	8b7a      	ldrh	r2, [r7, #26]
 801af34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801af36:	429a      	cmp	r2, r3
 801af38:	f0c0 80a0 	bcc.w	801b07c <ip4_reass+0x2ac>
 801af3c:	8b7b      	ldrh	r3, [r7, #26]
 801af3e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801af42:	4293      	cmp	r3, r2
 801af44:	f200 809a 	bhi.w	801b07c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801af48:	69fa      	ldr	r2, [r7, #28]
 801af4a:	6879      	ldr	r1, [r7, #4]
 801af4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af4e:	f7ff fdd5 	bl	801aafc <ip_reass_chain_frag_into_datagram_and_validate>
 801af52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801af54:	697b      	ldr	r3, [r7, #20]
 801af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af5a:	f000 809b 	beq.w	801b094 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801af5e:	4b48      	ldr	r3, [pc, #288]	; (801b080 <ip4_reass+0x2b0>)
 801af60:	881a      	ldrh	r2, [r3, #0]
 801af62:	8c3b      	ldrh	r3, [r7, #32]
 801af64:	4413      	add	r3, r2
 801af66:	b29a      	uxth	r2, r3
 801af68:	4b45      	ldr	r3, [pc, #276]	; (801b080 <ip4_reass+0x2b0>)
 801af6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801af6c:	69fb      	ldr	r3, [r7, #28]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d00d      	beq.n	801af8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801af72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801af74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801af76:	4413      	add	r3, r2
 801af78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af7c:	8a7a      	ldrh	r2, [r7, #18]
 801af7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af82:	7f9b      	ldrb	r3, [r3, #30]
 801af84:	f043 0301 	orr.w	r3, r3, #1
 801af88:	b2da      	uxtb	r2, r3
 801af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801af8e:	697b      	ldr	r3, [r7, #20]
 801af90:	2b01      	cmp	r3, #1
 801af92:	d171      	bne.n	801b078 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af96:	8b9b      	ldrh	r3, [r3, #28]
 801af98:	3314      	adds	r3, #20
 801af9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af9e:	685b      	ldr	r3, [r3, #4]
 801afa0:	685b      	ldr	r3, [r3, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afa8:	685b      	ldr	r3, [r3, #4]
 801afaa:	685b      	ldr	r3, [r3, #4]
 801afac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afb0:	3308      	adds	r3, #8
 801afb2:	2214      	movs	r2, #20
 801afb4:	4619      	mov	r1, r3
 801afb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801afb8:	f000 ffe5 	bl	801bf86 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801afbc:	8a3b      	ldrh	r3, [r7, #16]
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7f5 fe72 	bl	8010ca8 <lwip_htons>
 801afc4:	4603      	mov	r3, r0
 801afc6:	461a      	mov	r2, r3
 801afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afce:	2200      	movs	r2, #0
 801afd0:	719a      	strb	r2, [r3, #6]
 801afd2:	2200      	movs	r2, #0
 801afd4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afd8:	2200      	movs	r2, #0
 801afda:	729a      	strb	r2, [r3, #10]
 801afdc:	2200      	movs	r2, #0
 801afde:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afe2:	685b      	ldr	r3, [r3, #4]
 801afe4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801afe6:	e00d      	b.n	801b004 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801afe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afea:	685b      	ldr	r3, [r3, #4]
 801afec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801afee:	2114      	movs	r1, #20
 801aff0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801aff2:	f7f7 f99b 	bl	801232c <pbuf_remove_header>
      pbuf_cat(p, r);
 801aff6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aff8:	6878      	ldr	r0, [r7, #4]
 801affa:	f7f7 fadf 	bl	80125bc <pbuf_cat>
      r = iprh->next_pbuf;
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b006:	2b00      	cmp	r3, #0
 801b008:	d1ee      	bne.n	801afe8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b00a:	4b1e      	ldr	r3, [pc, #120]	; (801b084 <ip4_reass+0x2b4>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b010:	429a      	cmp	r2, r3
 801b012:	d102      	bne.n	801b01a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b014:	2300      	movs	r3, #0
 801b016:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b018:	e010      	b.n	801b03c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b01a:	4b1a      	ldr	r3, [pc, #104]	; (801b084 <ip4_reass+0x2b4>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b020:	e007      	b.n	801b032 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b028:	429a      	cmp	r2, r3
 801b02a:	d006      	beq.n	801b03a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b034:	2b00      	cmp	r3, #0
 801b036:	d1f4      	bne.n	801b022 <ip4_reass+0x252>
 801b038:	e000      	b.n	801b03c <ip4_reass+0x26c>
          break;
 801b03a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b03c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b03e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b040:	f7ff fd2e 	bl	801aaa0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b044:	6878      	ldr	r0, [r7, #4]
 801b046:	f7f7 fa7f 	bl	8012548 <pbuf_clen>
 801b04a:	4603      	mov	r3, r0
 801b04c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b04e:	4b0c      	ldr	r3, [pc, #48]	; (801b080 <ip4_reass+0x2b0>)
 801b050:	881b      	ldrh	r3, [r3, #0]
 801b052:	8c3a      	ldrh	r2, [r7, #32]
 801b054:	429a      	cmp	r2, r3
 801b056:	d906      	bls.n	801b066 <ip4_reass+0x296>
 801b058:	4b0b      	ldr	r3, [pc, #44]	; (801b088 <ip4_reass+0x2b8>)
 801b05a:	f240 229b 	movw	r2, #667	; 0x29b
 801b05e:	490b      	ldr	r1, [pc, #44]	; (801b08c <ip4_reass+0x2bc>)
 801b060:	480b      	ldr	r0, [pc, #44]	; (801b090 <ip4_reass+0x2c0>)
 801b062:	f000 fe1f 	bl	801bca4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b066:	4b06      	ldr	r3, [pc, #24]	; (801b080 <ip4_reass+0x2b0>)
 801b068:	881a      	ldrh	r2, [r3, #0]
 801b06a:	8c3b      	ldrh	r3, [r7, #32]
 801b06c:	1ad3      	subs	r3, r2, r3
 801b06e:	b29a      	uxth	r2, r3
 801b070:	4b03      	ldr	r3, [pc, #12]	; (801b080 <ip4_reass+0x2b0>)
 801b072:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	e038      	b.n	801b0ea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b078:	2300      	movs	r3, #0
 801b07a:	e036      	b.n	801b0ea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b07c:	bf00      	nop
 801b07e:	e00a      	b.n	801b096 <ip4_reass+0x2c6>
 801b080:	2000b5a8 	.word	0x2000b5a8
 801b084:	2000b5a4 	.word	0x2000b5a4
 801b088:	0801f938 	.word	0x0801f938
 801b08c:	0801faa8 	.word	0x0801faa8
 801b090:	0801f980 	.word	0x0801f980
    goto nullreturn_ipr;
 801b094:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d106      	bne.n	801b0aa <ip4_reass+0x2da>
 801b09c:	4b15      	ldr	r3, [pc, #84]	; (801b0f4 <ip4_reass+0x324>)
 801b09e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b0a2:	4915      	ldr	r1, [pc, #84]	; (801b0f8 <ip4_reass+0x328>)
 801b0a4:	4815      	ldr	r0, [pc, #84]	; (801b0fc <ip4_reass+0x32c>)
 801b0a6:	f000 fdfd 	bl	801bca4 <iprintf>
  if (ipr->p == NULL) {
 801b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d116      	bne.n	801b0e0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b0b2:	4b13      	ldr	r3, [pc, #76]	; (801b100 <ip4_reass+0x330>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d006      	beq.n	801b0ca <ip4_reass+0x2fa>
 801b0bc:	4b0d      	ldr	r3, [pc, #52]	; (801b0f4 <ip4_reass+0x324>)
 801b0be:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b0c2:	4910      	ldr	r1, [pc, #64]	; (801b104 <ip4_reass+0x334>)
 801b0c4:	480d      	ldr	r0, [pc, #52]	; (801b0fc <ip4_reass+0x32c>)
 801b0c6:	f000 fded 	bl	801bca4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b0ca:	2100      	movs	r1, #0
 801b0cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b0ce:	f7ff fce7 	bl	801aaa0 <ip_reass_dequeue_datagram>
 801b0d2:	e006      	b.n	801b0e2 <ip4_reass+0x312>
    goto nullreturn;
 801b0d4:	bf00      	nop
 801b0d6:	e004      	b.n	801b0e2 <ip4_reass+0x312>
    goto nullreturn;
 801b0d8:	bf00      	nop
 801b0da:	e002      	b.n	801b0e2 <ip4_reass+0x312>
      goto nullreturn;
 801b0dc:	bf00      	nop
 801b0de:	e000      	b.n	801b0e2 <ip4_reass+0x312>
  }

nullreturn:
 801b0e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b0e2:	6878      	ldr	r0, [r7, #4]
 801b0e4:	f7f7 f9a8 	bl	8012438 <pbuf_free>
  return NULL;
 801b0e8:	2300      	movs	r3, #0
}
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	3738      	adds	r7, #56	; 0x38
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	bd80      	pop	{r7, pc}
 801b0f2:	bf00      	nop
 801b0f4:	0801f938 	.word	0x0801f938
 801b0f8:	0801fac4 	.word	0x0801fac4
 801b0fc:	0801f980 	.word	0x0801f980
 801b100:	2000b5a4 	.word	0x2000b5a4
 801b104:	0801fad0 	.word	0x0801fad0

0801b108 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b10c:	2005      	movs	r0, #5
 801b10e:	f7f6 faad 	bl	801166c <memp_malloc>
 801b112:	4603      	mov	r3, r0
}
 801b114:	4618      	mov	r0, r3
 801b116:	bd80      	pop	{r7, pc}

0801b118 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b118:	b580      	push	{r7, lr}
 801b11a:	b082      	sub	sp, #8
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d106      	bne.n	801b134 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b126:	4b07      	ldr	r3, [pc, #28]	; (801b144 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b128:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b12c:	4906      	ldr	r1, [pc, #24]	; (801b148 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b12e:	4807      	ldr	r0, [pc, #28]	; (801b14c <ip_frag_free_pbuf_custom_ref+0x34>)
 801b130:	f000 fdb8 	bl	801bca4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b134:	6879      	ldr	r1, [r7, #4]
 801b136:	2005      	movs	r0, #5
 801b138:	f7f6 fb08 	bl	801174c <memp_free>
}
 801b13c:	bf00      	nop
 801b13e:	3708      	adds	r7, #8
 801b140:	46bd      	mov	sp, r7
 801b142:	bd80      	pop	{r7, pc}
 801b144:	0801f938 	.word	0x0801f938
 801b148:	0801faf0 	.word	0x0801faf0
 801b14c:	0801f980 	.word	0x0801f980

0801b150 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b150:	b580      	push	{r7, lr}
 801b152:	b084      	sub	sp, #16
 801b154:	af00      	add	r7, sp, #0
 801b156:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d106      	bne.n	801b170 <ipfrag_free_pbuf_custom+0x20>
 801b162:	4b11      	ldr	r3, [pc, #68]	; (801b1a8 <ipfrag_free_pbuf_custom+0x58>)
 801b164:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b168:	4910      	ldr	r1, [pc, #64]	; (801b1ac <ipfrag_free_pbuf_custom+0x5c>)
 801b16a:	4811      	ldr	r0, [pc, #68]	; (801b1b0 <ipfrag_free_pbuf_custom+0x60>)
 801b16c:	f000 fd9a 	bl	801bca4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b170:	68fa      	ldr	r2, [r7, #12]
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	429a      	cmp	r2, r3
 801b176:	d006      	beq.n	801b186 <ipfrag_free_pbuf_custom+0x36>
 801b178:	4b0b      	ldr	r3, [pc, #44]	; (801b1a8 <ipfrag_free_pbuf_custom+0x58>)
 801b17a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b17e:	490d      	ldr	r1, [pc, #52]	; (801b1b4 <ipfrag_free_pbuf_custom+0x64>)
 801b180:	480b      	ldr	r0, [pc, #44]	; (801b1b0 <ipfrag_free_pbuf_custom+0x60>)
 801b182:	f000 fd8f 	bl	801bca4 <iprintf>
  if (pcr->original != NULL) {
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	695b      	ldr	r3, [r3, #20]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d004      	beq.n	801b198 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	695b      	ldr	r3, [r3, #20]
 801b192:	4618      	mov	r0, r3
 801b194:	f7f7 f950 	bl	8012438 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b198:	68f8      	ldr	r0, [r7, #12]
 801b19a:	f7ff ffbd 	bl	801b118 <ip_frag_free_pbuf_custom_ref>
}
 801b19e:	bf00      	nop
 801b1a0:	3710      	adds	r7, #16
 801b1a2:	46bd      	mov	sp, r7
 801b1a4:	bd80      	pop	{r7, pc}
 801b1a6:	bf00      	nop
 801b1a8:	0801f938 	.word	0x0801f938
 801b1ac:	0801fafc 	.word	0x0801fafc
 801b1b0:	0801f980 	.word	0x0801f980
 801b1b4:	0801fb08 	.word	0x0801fb08

0801b1b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b094      	sub	sp, #80	; 0x50
 801b1bc:	af02      	add	r7, sp, #8
 801b1be:	60f8      	str	r0, [r7, #12]
 801b1c0:	60b9      	str	r1, [r7, #8]
 801b1c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b1c4:	2300      	movs	r3, #0
 801b1c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b1ca:	68bb      	ldr	r3, [r7, #8]
 801b1cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b1ce:	3b14      	subs	r3, #20
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	da00      	bge.n	801b1d6 <ip4_frag+0x1e>
 801b1d4:	3307      	adds	r3, #7
 801b1d6:	10db      	asrs	r3, r3, #3
 801b1d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b1da:	2314      	movs	r3, #20
 801b1dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	685b      	ldr	r3, [r3, #4]
 801b1e2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b1e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1ea:	781b      	ldrb	r3, [r3, #0]
 801b1ec:	f003 030f 	and.w	r3, r3, #15
 801b1f0:	b2db      	uxtb	r3, r3
 801b1f2:	009b      	lsls	r3, r3, #2
 801b1f4:	b2db      	uxtb	r3, r3
 801b1f6:	2b14      	cmp	r3, #20
 801b1f8:	d002      	beq.n	801b200 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b1fa:	f06f 0305 	mvn.w	r3, #5
 801b1fe:	e110      	b.n	801b422 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	895b      	ldrh	r3, [r3, #10]
 801b204:	2b13      	cmp	r3, #19
 801b206:	d809      	bhi.n	801b21c <ip4_frag+0x64>
 801b208:	4b88      	ldr	r3, [pc, #544]	; (801b42c <ip4_frag+0x274>)
 801b20a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b20e:	4988      	ldr	r1, [pc, #544]	; (801b430 <ip4_frag+0x278>)
 801b210:	4888      	ldr	r0, [pc, #544]	; (801b434 <ip4_frag+0x27c>)
 801b212:	f000 fd47 	bl	801bca4 <iprintf>
 801b216:	f06f 0305 	mvn.w	r3, #5
 801b21a:	e102      	b.n	801b422 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b21e:	88db      	ldrh	r3, [r3, #6]
 801b220:	b29b      	uxth	r3, r3
 801b222:	4618      	mov	r0, r3
 801b224:	f7f5 fd40 	bl	8010ca8 <lwip_htons>
 801b228:	4603      	mov	r3, r0
 801b22a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b22c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b22e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b232:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b236:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b23c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	891b      	ldrh	r3, [r3, #8]
 801b242:	3b14      	subs	r3, #20
 801b244:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b248:	e0e1      	b.n	801b40e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b24a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b24c:	00db      	lsls	r3, r3, #3
 801b24e:	b29b      	uxth	r3, r3
 801b250:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b254:	4293      	cmp	r3, r2
 801b256:	bf28      	it	cs
 801b258:	4613      	movcs	r3, r2
 801b25a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b25c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b260:	2114      	movs	r1, #20
 801b262:	200e      	movs	r0, #14
 801b264:	f7f6 fe04 	bl	8011e70 <pbuf_alloc>
 801b268:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	f000 80d5 	beq.w	801b41c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b274:	895b      	ldrh	r3, [r3, #10]
 801b276:	2b13      	cmp	r3, #19
 801b278:	d806      	bhi.n	801b288 <ip4_frag+0xd0>
 801b27a:	4b6c      	ldr	r3, [pc, #432]	; (801b42c <ip4_frag+0x274>)
 801b27c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b280:	496d      	ldr	r1, [pc, #436]	; (801b438 <ip4_frag+0x280>)
 801b282:	486c      	ldr	r0, [pc, #432]	; (801b434 <ip4_frag+0x27c>)
 801b284:	f000 fd0e 	bl	801bca4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b28a:	685b      	ldr	r3, [r3, #4]
 801b28c:	2214      	movs	r2, #20
 801b28e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b290:	4618      	mov	r0, r3
 801b292:	f000 fe78 	bl	801bf86 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b298:	685b      	ldr	r3, [r3, #4]
 801b29a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b29c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b29e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b2a2:	e064      	b.n	801b36e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	895a      	ldrh	r2, [r3, #10]
 801b2a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b2aa:	1ad3      	subs	r3, r2, r3
 801b2ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	895b      	ldrh	r3, [r3, #10]
 801b2b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b2b4:	429a      	cmp	r2, r3
 801b2b6:	d906      	bls.n	801b2c6 <ip4_frag+0x10e>
 801b2b8:	4b5c      	ldr	r3, [pc, #368]	; (801b42c <ip4_frag+0x274>)
 801b2ba:	f240 322d 	movw	r2, #813	; 0x32d
 801b2be:	495f      	ldr	r1, [pc, #380]	; (801b43c <ip4_frag+0x284>)
 801b2c0:	485c      	ldr	r0, [pc, #368]	; (801b434 <ip4_frag+0x27c>)
 801b2c2:	f000 fcef 	bl	801bca4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b2c6:	8bfa      	ldrh	r2, [r7, #30]
 801b2c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b2cc:	4293      	cmp	r3, r2
 801b2ce:	bf28      	it	cs
 801b2d0:	4613      	movcs	r3, r2
 801b2d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b2d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d105      	bne.n	801b2ea <ip4_frag+0x132>
        poff = 0;
 801b2de:	2300      	movs	r3, #0
 801b2e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	60fb      	str	r3, [r7, #12]
        continue;
 801b2e8:	e041      	b.n	801b36e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b2ea:	f7ff ff0d 	bl	801b108 <ip_frag_alloc_pbuf_custom_ref>
 801b2ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b2f0:	69bb      	ldr	r3, [r7, #24]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d103      	bne.n	801b2fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b2f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b2f8:	f7f7 f89e 	bl	8012438 <pbuf_free>
        goto memerr;
 801b2fc:	e08f      	b.n	801b41e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b2fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b304:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b306:	4413      	add	r3, r2
 801b308:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b30c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b310:	9201      	str	r2, [sp, #4]
 801b312:	9300      	str	r3, [sp, #0]
 801b314:	4603      	mov	r3, r0
 801b316:	2241      	movs	r2, #65	; 0x41
 801b318:	2000      	movs	r0, #0
 801b31a:	f7f6 fed3 	bl	80120c4 <pbuf_alloced_custom>
 801b31e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b320:	697b      	ldr	r3, [r7, #20]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d106      	bne.n	801b334 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b326:	69b8      	ldr	r0, [r7, #24]
 801b328:	f7ff fef6 	bl	801b118 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b32e:	f7f7 f883 	bl	8012438 <pbuf_free>
        goto memerr;
 801b332:	e074      	b.n	801b41e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b334:	68f8      	ldr	r0, [r7, #12]
 801b336:	f7f7 f91f 	bl	8012578 <pbuf_ref>
      pcr->original = p;
 801b33a:	69bb      	ldr	r3, [r7, #24]
 801b33c:	68fa      	ldr	r2, [r7, #12]
 801b33e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b340:	69bb      	ldr	r3, [r7, #24]
 801b342:	4a3f      	ldr	r2, [pc, #252]	; (801b440 <ip4_frag+0x288>)
 801b344:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b346:	6979      	ldr	r1, [r7, #20]
 801b348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b34a:	f7f7 f937 	bl	80125bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b34e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b352:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b356:	1ad3      	subs	r3, r2, r3
 801b358:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b35c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b360:	2b00      	cmp	r3, #0
 801b362:	d004      	beq.n	801b36e <ip4_frag+0x1b6>
        poff = 0;
 801b364:	2300      	movs	r3, #0
 801b366:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b36e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b372:	2b00      	cmp	r3, #0
 801b374:	d196      	bne.n	801b2a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b376:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b378:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b37c:	4413      	add	r3, r2
 801b37e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b384:	f1a3 0213 	sub.w	r2, r3, #19
 801b388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b38c:	429a      	cmp	r2, r3
 801b38e:	bfcc      	ite	gt
 801b390:	2301      	movgt	r3, #1
 801b392:	2300      	movle	r3, #0
 801b394:	b2db      	uxtb	r3, r3
 801b396:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b3a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b3a2:	6a3b      	ldr	r3, [r7, #32]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d002      	beq.n	801b3ae <ip4_frag+0x1f6>
 801b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d003      	beq.n	801b3b6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b3ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b3b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b3b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b3b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7f5 fc75 	bl	8010ca8 <lwip_htons>
 801b3be:	4603      	mov	r3, r0
 801b3c0:	461a      	mov	r2, r3
 801b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b3c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b3c8:	3314      	adds	r3, #20
 801b3ca:	b29b      	uxth	r3, r3
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	f7f5 fc6b 	bl	8010ca8 <lwip_htons>
 801b3d2:	4603      	mov	r3, r0
 801b3d4:	461a      	mov	r2, r3
 801b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3dc:	2200      	movs	r2, #0
 801b3de:	729a      	strb	r2, [r3, #10]
 801b3e0:	2200      	movs	r2, #0
 801b3e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	695b      	ldr	r3, [r3, #20]
 801b3e8:	687a      	ldr	r2, [r7, #4]
 801b3ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b3ec:	68b8      	ldr	r0, [r7, #8]
 801b3ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b3f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b3f2:	f7f7 f821 	bl	8012438 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b3f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b3fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b3fc:	1ad3      	subs	r3, r2, r3
 801b3fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b402:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b406:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b408:	4413      	add	r3, r2
 801b40a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b40e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b412:	2b00      	cmp	r3, #0
 801b414:	f47f af19 	bne.w	801b24a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b418:	2300      	movs	r3, #0
 801b41a:	e002      	b.n	801b422 <ip4_frag+0x26a>
      goto memerr;
 801b41c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b41e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b422:	4618      	mov	r0, r3
 801b424:	3748      	adds	r7, #72	; 0x48
 801b426:	46bd      	mov	sp, r7
 801b428:	bd80      	pop	{r7, pc}
 801b42a:	bf00      	nop
 801b42c:	0801f938 	.word	0x0801f938
 801b430:	0801fb14 	.word	0x0801fb14
 801b434:	0801f980 	.word	0x0801f980
 801b438:	0801fb30 	.word	0x0801fb30
 801b43c:	0801fb50 	.word	0x0801fb50
 801b440:	0801b151 	.word	0x0801b151

0801b444 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b086      	sub	sp, #24
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b44e:	230e      	movs	r3, #14
 801b450:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	895b      	ldrh	r3, [r3, #10]
 801b456:	2b0e      	cmp	r3, #14
 801b458:	d96e      	bls.n	801b538 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	7bdb      	ldrb	r3, [r3, #15]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d106      	bne.n	801b470 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b462:	683b      	ldr	r3, [r7, #0]
 801b464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b468:	3301      	adds	r3, #1
 801b46a:	b2da      	uxtb	r2, r3
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	685b      	ldr	r3, [r3, #4]
 801b474:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b476:	693b      	ldr	r3, [r7, #16]
 801b478:	7b1a      	ldrb	r2, [r3, #12]
 801b47a:	7b5b      	ldrb	r3, [r3, #13]
 801b47c:	021b      	lsls	r3, r3, #8
 801b47e:	4313      	orrs	r3, r2
 801b480:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b482:	693b      	ldr	r3, [r7, #16]
 801b484:	781b      	ldrb	r3, [r3, #0]
 801b486:	f003 0301 	and.w	r3, r3, #1
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d023      	beq.n	801b4d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b48e:	693b      	ldr	r3, [r7, #16]
 801b490:	781b      	ldrb	r3, [r3, #0]
 801b492:	2b01      	cmp	r3, #1
 801b494:	d10f      	bne.n	801b4b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	785b      	ldrb	r3, [r3, #1]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d11b      	bne.n	801b4d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b49e:	693b      	ldr	r3, [r7, #16]
 801b4a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b4a2:	2b5e      	cmp	r3, #94	; 0x5e
 801b4a4:	d117      	bne.n	801b4d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	7b5b      	ldrb	r3, [r3, #13]
 801b4aa:	f043 0310 	orr.w	r3, r3, #16
 801b4ae:	b2da      	uxtb	r2, r3
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	735a      	strb	r2, [r3, #13]
 801b4b4:	e00f      	b.n	801b4d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b4b6:	693b      	ldr	r3, [r7, #16]
 801b4b8:	2206      	movs	r2, #6
 801b4ba:	4928      	ldr	r1, [pc, #160]	; (801b55c <ethernet_input+0x118>)
 801b4bc:	4618      	mov	r0, r3
 801b4be:	f000 fc9f 	bl	801be00 <memcmp>
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d106      	bne.n	801b4d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	7b5b      	ldrb	r3, [r3, #13]
 801b4cc:	f043 0308 	orr.w	r3, r3, #8
 801b4d0:	b2da      	uxtb	r2, r3
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b4d6:	89fb      	ldrh	r3, [r7, #14]
 801b4d8:	2b08      	cmp	r3, #8
 801b4da:	d003      	beq.n	801b4e4 <ethernet_input+0xa0>
 801b4dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b4e0:	d014      	beq.n	801b50c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b4e2:	e032      	b.n	801b54a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b4e4:	683b      	ldr	r3, [r7, #0]
 801b4e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b4ea:	f003 0308 	and.w	r3, r3, #8
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d024      	beq.n	801b53c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b4f2:	8afb      	ldrh	r3, [r7, #22]
 801b4f4:	4619      	mov	r1, r3
 801b4f6:	6878      	ldr	r0, [r7, #4]
 801b4f8:	f7f6 ff18 	bl	801232c <pbuf_remove_header>
 801b4fc:	4603      	mov	r3, r0
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d11e      	bne.n	801b540 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b502:	6839      	ldr	r1, [r7, #0]
 801b504:	6878      	ldr	r0, [r7, #4]
 801b506:	f7fe ff21 	bl	801a34c <ip4_input>
      break;
 801b50a:	e013      	b.n	801b534 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b50c:	683b      	ldr	r3, [r7, #0]
 801b50e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b512:	f003 0308 	and.w	r3, r3, #8
 801b516:	2b00      	cmp	r3, #0
 801b518:	d014      	beq.n	801b544 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b51a:	8afb      	ldrh	r3, [r7, #22]
 801b51c:	4619      	mov	r1, r3
 801b51e:	6878      	ldr	r0, [r7, #4]
 801b520:	f7f6 ff04 	bl	801232c <pbuf_remove_header>
 801b524:	4603      	mov	r3, r0
 801b526:	2b00      	cmp	r3, #0
 801b528:	d10e      	bne.n	801b548 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b52a:	6839      	ldr	r1, [r7, #0]
 801b52c:	6878      	ldr	r0, [r7, #4]
 801b52e:	f7fe f8a5 	bl	801967c <etharp_input>
      break;
 801b532:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b534:	2300      	movs	r3, #0
 801b536:	e00c      	b.n	801b552 <ethernet_input+0x10e>
    goto free_and_return;
 801b538:	bf00      	nop
 801b53a:	e006      	b.n	801b54a <ethernet_input+0x106>
        goto free_and_return;
 801b53c:	bf00      	nop
 801b53e:	e004      	b.n	801b54a <ethernet_input+0x106>
        goto free_and_return;
 801b540:	bf00      	nop
 801b542:	e002      	b.n	801b54a <ethernet_input+0x106>
        goto free_and_return;
 801b544:	bf00      	nop
 801b546:	e000      	b.n	801b54a <ethernet_input+0x106>
        goto free_and_return;
 801b548:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	f7f6 ff74 	bl	8012438 <pbuf_free>
  return ERR_OK;
 801b550:	2300      	movs	r3, #0
}
 801b552:	4618      	mov	r0, r3
 801b554:	3718      	adds	r7, #24
 801b556:	46bd      	mov	sp, r7
 801b558:	bd80      	pop	{r7, pc}
 801b55a:	bf00      	nop
 801b55c:	0801fe8c 	.word	0x0801fe8c

0801b560 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b560:	b580      	push	{r7, lr}
 801b562:	b086      	sub	sp, #24
 801b564:	af00      	add	r7, sp, #0
 801b566:	60f8      	str	r0, [r7, #12]
 801b568:	60b9      	str	r1, [r7, #8]
 801b56a:	607a      	str	r2, [r7, #4]
 801b56c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b56e:	8c3b      	ldrh	r3, [r7, #32]
 801b570:	4618      	mov	r0, r3
 801b572:	f7f5 fb99 	bl	8010ca8 <lwip_htons>
 801b576:	4603      	mov	r3, r0
 801b578:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b57a:	210e      	movs	r1, #14
 801b57c:	68b8      	ldr	r0, [r7, #8]
 801b57e:	f7f6 fec5 	bl	801230c <pbuf_add_header>
 801b582:	4603      	mov	r3, r0
 801b584:	2b00      	cmp	r3, #0
 801b586:	d125      	bne.n	801b5d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b588:	68bb      	ldr	r3, [r7, #8]
 801b58a:	685b      	ldr	r3, [r3, #4]
 801b58c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b58e:	693b      	ldr	r3, [r7, #16]
 801b590:	8afa      	ldrh	r2, [r7, #22]
 801b592:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b594:	693b      	ldr	r3, [r7, #16]
 801b596:	2206      	movs	r2, #6
 801b598:	6839      	ldr	r1, [r7, #0]
 801b59a:	4618      	mov	r0, r3
 801b59c:	f000 fcf3 	bl	801bf86 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b5a0:	693b      	ldr	r3, [r7, #16]
 801b5a2:	3306      	adds	r3, #6
 801b5a4:	2206      	movs	r2, #6
 801b5a6:	6879      	ldr	r1, [r7, #4]
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f000 fcec 	bl	801bf86 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b5b4:	2b06      	cmp	r3, #6
 801b5b6:	d006      	beq.n	801b5c6 <ethernet_output+0x66>
 801b5b8:	4b0a      	ldr	r3, [pc, #40]	; (801b5e4 <ethernet_output+0x84>)
 801b5ba:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b5be:	490a      	ldr	r1, [pc, #40]	; (801b5e8 <ethernet_output+0x88>)
 801b5c0:	480a      	ldr	r0, [pc, #40]	; (801b5ec <ethernet_output+0x8c>)
 801b5c2:	f000 fb6f 	bl	801bca4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	699b      	ldr	r3, [r3, #24]
 801b5ca:	68b9      	ldr	r1, [r7, #8]
 801b5cc:	68f8      	ldr	r0, [r7, #12]
 801b5ce:	4798      	blx	r3
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	e002      	b.n	801b5da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b5d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b5d6:	f06f 0301 	mvn.w	r3, #1
}
 801b5da:	4618      	mov	r0, r3
 801b5dc:	3718      	adds	r7, #24
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	bd80      	pop	{r7, pc}
 801b5e2:	bf00      	nop
 801b5e4:	0801fb60 	.word	0x0801fb60
 801b5e8:	0801fb98 	.word	0x0801fb98
 801b5ec:	0801fbcc 	.word	0x0801fbcc

0801b5f0 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b084      	sub	sp, #16
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	60f8      	str	r0, [r7, #12]
 801b5f8:	60b9      	str	r1, [r7, #8]
 801b5fa:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d005      	beq.n	801b60e <lwrb_init+0x1e>
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d002      	beq.n	801b60e <lwrb_init+0x1e>
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d101      	bne.n	801b612 <lwrb_init+0x22>
        return 0;
 801b60e:	2300      	movs	r3, #0
 801b610:	e00b      	b.n	801b62a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 801b612:	2214      	movs	r2, #20
 801b614:	2100      	movs	r1, #0
 801b616:	68f8      	ldr	r0, [r7, #12]
 801b618:	f000 fc1c 	bl	801be54 <memset>

    buff->size = size;
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	687a      	ldr	r2, [r7, #4]
 801b620:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	68ba      	ldr	r2, [r7, #8]
 801b626:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 801b628:	2301      	movs	r3, #1
}
 801b62a:	4618      	mov	r0, r3
 801b62c:	3710      	adds	r7, #16
 801b62e:	46bd      	mov	sp, r7
 801b630:	bd80      	pop	{r7, pc}

0801b632 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 801b632:	b480      	push	{r7}
 801b634:	b083      	sub	sp, #12
 801b636:	af00      	add	r7, sp, #0
 801b638:	6078      	str	r0, [r7, #4]
 801b63a:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d00a      	beq.n	801b658 <lwrb_set_evt_fn+0x26>
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d006      	beq.n	801b658 <lwrb_set_evt_fn+0x26>
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	685b      	ldr	r3, [r3, #4]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d002      	beq.n	801b658 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	683a      	ldr	r2, [r7, #0]
 801b656:	611a      	str	r2, [r3, #16]
    }
}
 801b658:	bf00      	nop
 801b65a:	370c      	adds	r7, #12
 801b65c:	46bd      	mov	sp, r7
 801b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b662:	4770      	bx	lr

0801b664 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 801b664:	b580      	push	{r7, lr}
 801b666:	b088      	sub	sp, #32
 801b668:	af00      	add	r7, sp, #0
 801b66a:	60f8      	str	r0, [r7, #12]
 801b66c:	60b9      	str	r1, [r7, #8]
 801b66e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 801b670:	68bb      	ldr	r3, [r7, #8]
 801b672:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d00d      	beq.n	801b696 <lwrb_write+0x32>
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d009      	beq.n	801b696 <lwrb_write+0x32>
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	685b      	ldr	r3, [r3, #4]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d005      	beq.n	801b696 <lwrb_write+0x32>
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d002      	beq.n	801b696 <lwrb_write+0x32>
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d101      	bne.n	801b69a <lwrb_write+0x36>
        return 0;
 801b696:	2300      	movs	r3, #0
 801b698:	e059      	b.n	801b74e <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 801b69a:	68f8      	ldr	r0, [r7, #12]
 801b69c:	f000 f85b 	bl	801b756 <lwrb_get_free>
 801b6a0:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 801b6a2:	69fa      	ldr	r2, [r7, #28]
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	429a      	cmp	r2, r3
 801b6a8:	d20d      	bcs.n	801b6c6 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	691b      	ldr	r3, [r3, #16]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d005      	beq.n	801b6be <lwrb_write+0x5a>
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	691b      	ldr	r3, [r3, #16]
 801b6b6:	69fa      	ldr	r2, [r7, #28]
 801b6b8:	2102      	movs	r1, #2
 801b6ba:	68f8      	ldr	r0, [r7, #12]
 801b6bc:	4798      	blx	r3
			free = lwrb_get_free(buff);
 801b6be:	68f8      	ldr	r0, [r7, #12]
 801b6c0:	f000 f849 	bl	801b756 <lwrb_get_free>
 801b6c4:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 801b6c6:	687a      	ldr	r2, [r7, #4]
 801b6c8:	69fb      	ldr	r3, [r7, #28]
 801b6ca:	4293      	cmp	r3, r2
 801b6cc:	bf28      	it	cs
 801b6ce:	4613      	movcs	r3, r2
 801b6d0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d101      	bne.n	801b6dc <lwrb_write+0x78>
        return 0;
 801b6d8:	2300      	movs	r3, #0
 801b6da:	e038      	b.n	801b74e <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	685a      	ldr	r2, [r3, #4]
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	68db      	ldr	r3, [r3, #12]
 801b6e4:	1ad3      	subs	r3, r2, r3
 801b6e6:	687a      	ldr	r2, [r7, #4]
 801b6e8:	4293      	cmp	r3, r2
 801b6ea:	bf28      	it	cs
 801b6ec:	4613      	movcs	r3, r2
 801b6ee:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	681a      	ldr	r2, [r3, #0]
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	68db      	ldr	r3, [r3, #12]
 801b6f8:	4413      	add	r3, r2
 801b6fa:	697a      	ldr	r2, [r7, #20]
 801b6fc:	69b9      	ldr	r1, [r7, #24]
 801b6fe:	4618      	mov	r0, r3
 801b700:	f000 fc41 	bl	801bf86 <memcpy>
    buff->w += tocopy;
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	68da      	ldr	r2, [r3, #12]
 801b708:	697b      	ldr	r3, [r7, #20]
 801b70a:	441a      	add	r2, r3
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 801b710:	687a      	ldr	r2, [r7, #4]
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	1ad3      	subs	r3, r2, r3
 801b716:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d00b      	beq.n	801b736 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	6818      	ldr	r0, [r3, #0]
 801b722:	69ba      	ldr	r2, [r7, #24]
 801b724:	697b      	ldr	r3, [r7, #20]
 801b726:	4413      	add	r3, r2
 801b728:	687a      	ldr	r2, [r7, #4]
 801b72a:	4619      	mov	r1, r3
 801b72c:	f000 fc2b 	bl	801bf86 <memcpy>
        buff->w = btw;
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	687a      	ldr	r2, [r7, #4]
 801b734:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	68da      	ldr	r2, [r3, #12]
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	685b      	ldr	r3, [r3, #4]
 801b73e:	429a      	cmp	r2, r3
 801b740:	d302      	bcc.n	801b748 <lwrb_write+0xe4>
        buff->w = 0;
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	2200      	movs	r2, #0
 801b746:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 801b748:	697a      	ldr	r2, [r7, #20]
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	4413      	add	r3, r2
}
 801b74e:	4618      	mov	r0, r3
 801b750:	3720      	adds	r7, #32
 801b752:	46bd      	mov	sp, r7
 801b754:	bd80      	pop	{r7, pc}

0801b756 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 801b756:	b480      	push	{r7}
 801b758:	b087      	sub	sp, #28
 801b75a:	af00      	add	r7, sp, #0
 801b75c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d007      	beq.n	801b774 <lwrb_get_free+0x1e>
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d003      	beq.n	801b774 <lwrb_get_free+0x1e>
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	685b      	ldr	r3, [r3, #4]
 801b770:	2b00      	cmp	r3, #0
 801b772:	d101      	bne.n	801b778 <lwrb_get_free+0x22>
        return 0;
 801b774:	2300      	movs	r3, #0
 801b776:	e01f      	b.n	801b7b8 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	68db      	ldr	r3, [r3, #12]
 801b77c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	689b      	ldr	r3, [r3, #8]
 801b782:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801b784:	693a      	ldr	r2, [r7, #16]
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	429a      	cmp	r2, r3
 801b78a:	d103      	bne.n	801b794 <lwrb_get_free+0x3e>
        size = buff->size;
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	685b      	ldr	r3, [r3, #4]
 801b790:	617b      	str	r3, [r7, #20]
 801b792:	e00f      	b.n	801b7b4 <lwrb_get_free+0x5e>
    } else if (r > w) {
 801b794:	68fa      	ldr	r2, [r7, #12]
 801b796:	693b      	ldr	r3, [r7, #16]
 801b798:	429a      	cmp	r2, r3
 801b79a:	d904      	bls.n	801b7a6 <lwrb_get_free+0x50>
        size = r - w;
 801b79c:	68fa      	ldr	r2, [r7, #12]
 801b79e:	693b      	ldr	r3, [r7, #16]
 801b7a0:	1ad3      	subs	r3, r2, r3
 801b7a2:	617b      	str	r3, [r7, #20]
 801b7a4:	e006      	b.n	801b7b4 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	685a      	ldr	r2, [r3, #4]
 801b7aa:	68f9      	ldr	r1, [r7, #12]
 801b7ac:	693b      	ldr	r3, [r7, #16]
 801b7ae:	1acb      	subs	r3, r1, r3
 801b7b0:	4413      	add	r3, r2
 801b7b2:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 801b7b4:	697b      	ldr	r3, [r7, #20]
 801b7b6:	3b01      	subs	r3, #1
}
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	371c      	adds	r7, #28
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c2:	4770      	bx	lr

0801b7c4 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 801b7c4:	b480      	push	{r7}
 801b7c6:	b087      	sub	sp, #28
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d007      	beq.n	801b7e2 <lwrb_get_full+0x1e>
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d003      	beq.n	801b7e2 <lwrb_get_full+0x1e>
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	685b      	ldr	r3, [r3, #4]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d101      	bne.n	801b7e6 <lwrb_get_full+0x22>
        return 0;
 801b7e2:	2300      	movs	r3, #0
 801b7e4:	e01d      	b.n	801b822 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	68db      	ldr	r3, [r3, #12]
 801b7ea:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	689b      	ldr	r3, [r3, #8]
 801b7f0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801b7f2:	693a      	ldr	r2, [r7, #16]
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	429a      	cmp	r2, r3
 801b7f8:	d102      	bne.n	801b800 <lwrb_get_full+0x3c>
        size = 0;
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	617b      	str	r3, [r7, #20]
 801b7fe:	e00f      	b.n	801b820 <lwrb_get_full+0x5c>
    } else if (w > r) {
 801b800:	693a      	ldr	r2, [r7, #16]
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	429a      	cmp	r2, r3
 801b806:	d904      	bls.n	801b812 <lwrb_get_full+0x4e>
        size = w - r;
 801b808:	693a      	ldr	r2, [r7, #16]
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	1ad3      	subs	r3, r2, r3
 801b80e:	617b      	str	r3, [r7, #20]
 801b810:	e006      	b.n	801b820 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	685a      	ldr	r2, [r3, #4]
 801b816:	6939      	ldr	r1, [r7, #16]
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	1acb      	subs	r3, r1, r3
 801b81c:	4413      	add	r3, r2
 801b81e:	617b      	str	r3, [r7, #20]
    }
    return size;
 801b820:	697b      	ldr	r3, [r7, #20]
}
 801b822:	4618      	mov	r0, r3
 801b824:	371c      	adds	r7, #28
 801b826:	46bd      	mov	sp, r7
 801b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b82c:	4770      	bx	lr

0801b82e <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 801b82e:	b480      	push	{r7}
 801b830:	b083      	sub	sp, #12
 801b832:	af00      	add	r7, sp, #0
 801b834:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d007      	beq.n	801b84c <lwrb_get_linear_block_read_address+0x1e>
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d003      	beq.n	801b84c <lwrb_get_linear_block_read_address+0x1e>
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	685b      	ldr	r3, [r3, #4]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d101      	bne.n	801b850 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 801b84c:	2300      	movs	r3, #0
 801b84e:	e004      	b.n	801b85a <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	681a      	ldr	r2, [r3, #0]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	689b      	ldr	r3, [r3, #8]
 801b858:	4413      	add	r3, r2
}
 801b85a:	4618      	mov	r0, r3
 801b85c:	370c      	adds	r7, #12
 801b85e:	46bd      	mov	sp, r7
 801b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b864:	4770      	bx	lr

0801b866 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 801b866:	b480      	push	{r7}
 801b868:	b087      	sub	sp, #28
 801b86a:	af00      	add	r7, sp, #0
 801b86c:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d007      	beq.n	801b884 <lwrb_get_linear_block_read_length+0x1e>
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d003      	beq.n	801b884 <lwrb_get_linear_block_read_length+0x1e>
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	685b      	ldr	r3, [r3, #4]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d101      	bne.n	801b888 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 801b884:	2300      	movs	r3, #0
 801b886:	e01b      	b.n	801b8c0 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	68db      	ldr	r3, [r3, #12]
 801b88c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	689b      	ldr	r3, [r3, #8]
 801b892:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 801b894:	693a      	ldr	r2, [r7, #16]
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	429a      	cmp	r2, r3
 801b89a:	d904      	bls.n	801b8a6 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 801b89c:	693a      	ldr	r2, [r7, #16]
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	1ad3      	subs	r3, r2, r3
 801b8a2:	617b      	str	r3, [r7, #20]
 801b8a4:	e00b      	b.n	801b8be <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 801b8a6:	68fa      	ldr	r2, [r7, #12]
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	d905      	bls.n	801b8ba <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	685a      	ldr	r2, [r3, #4]
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	1ad3      	subs	r3, r2, r3
 801b8b6:	617b      	str	r3, [r7, #20]
 801b8b8:	e001      	b.n	801b8be <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	617b      	str	r3, [r7, #20]
    }
    return len;
 801b8be:	697b      	ldr	r3, [r7, #20]
}
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	371c      	adds	r7, #28
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ca:	4770      	bx	lr

0801b8cc <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b084      	sub	sp, #16
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
 801b8d4:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d00a      	beq.n	801b8f2 <lwrb_skip+0x26>
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d006      	beq.n	801b8f2 <lwrb_skip+0x26>
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	685b      	ldr	r3, [r3, #4]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d002      	beq.n	801b8f2 <lwrb_skip+0x26>
 801b8ec:	683b      	ldr	r3, [r7, #0]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d101      	bne.n	801b8f6 <lwrb_skip+0x2a>
        return 0;
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	e01d      	b.n	801b932 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f7ff ff64 	bl	801b7c4 <lwrb_get_full>
 801b8fc:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 801b8fe:	683a      	ldr	r2, [r7, #0]
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	4293      	cmp	r3, r2
 801b904:	bf28      	it	cs
 801b906:	4613      	movcs	r3, r2
 801b908:	603b      	str	r3, [r7, #0]
    buff->r += len;
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	689a      	ldr	r2, [r3, #8]
 801b90e:	683b      	ldr	r3, [r7, #0]
 801b910:	441a      	add	r2, r3
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	689a      	ldr	r2, [r3, #8]
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	685b      	ldr	r3, [r3, #4]
 801b91e:	429a      	cmp	r2, r3
 801b920:	d306      	bcc.n	801b930 <lwrb_skip+0x64>
        buff->r -= buff->size;
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	689a      	ldr	r2, [r3, #8]
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	1ad2      	subs	r2, r2, r3
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 801b930:	683b      	ldr	r3, [r7, #0]
}
 801b932:	4618      	mov	r0, r3
 801b934:	3710      	adds	r7, #16
 801b936:	46bd      	mov	sp, r7
 801b938:	bd80      	pop	{r7, pc}
	...

0801b93c <malloc>:
 801b93c:	4b02      	ldr	r3, [pc, #8]	; (801b948 <malloc+0xc>)
 801b93e:	4601      	mov	r1, r0
 801b940:	6818      	ldr	r0, [r3, #0]
 801b942:	f000 b823 	b.w	801b98c <_malloc_r>
 801b946:	bf00      	nop
 801b948:	200000dc 	.word	0x200000dc

0801b94c <sbrk_aligned>:
 801b94c:	b570      	push	{r4, r5, r6, lr}
 801b94e:	4e0e      	ldr	r6, [pc, #56]	; (801b988 <sbrk_aligned+0x3c>)
 801b950:	460c      	mov	r4, r1
 801b952:	4605      	mov	r5, r0
 801b954:	6831      	ldr	r1, [r6, #0]
 801b956:	b911      	cbnz	r1, 801b95e <sbrk_aligned+0x12>
 801b958:	f000 facc 	bl	801bef4 <_sbrk_r>
 801b95c:	6030      	str	r0, [r6, #0]
 801b95e:	4621      	mov	r1, r4
 801b960:	4628      	mov	r0, r5
 801b962:	f000 fac7 	bl	801bef4 <_sbrk_r>
 801b966:	1c43      	adds	r3, r0, #1
 801b968:	d00a      	beq.n	801b980 <sbrk_aligned+0x34>
 801b96a:	1cc4      	adds	r4, r0, #3
 801b96c:	f024 0403 	bic.w	r4, r4, #3
 801b970:	42a0      	cmp	r0, r4
 801b972:	d007      	beq.n	801b984 <sbrk_aligned+0x38>
 801b974:	1a21      	subs	r1, r4, r0
 801b976:	4628      	mov	r0, r5
 801b978:	f000 fabc 	bl	801bef4 <_sbrk_r>
 801b97c:	3001      	adds	r0, #1
 801b97e:	d101      	bne.n	801b984 <sbrk_aligned+0x38>
 801b980:	f04f 34ff 	mov.w	r4, #4294967295
 801b984:	4620      	mov	r0, r4
 801b986:	bd70      	pop	{r4, r5, r6, pc}
 801b988:	2000b5b0 	.word	0x2000b5b0

0801b98c <_malloc_r>:
 801b98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b990:	1ccd      	adds	r5, r1, #3
 801b992:	4607      	mov	r7, r0
 801b994:	f025 0503 	bic.w	r5, r5, #3
 801b998:	3508      	adds	r5, #8
 801b99a:	2d0c      	cmp	r5, #12
 801b99c:	bf38      	it	cc
 801b99e:	250c      	movcc	r5, #12
 801b9a0:	2d00      	cmp	r5, #0
 801b9a2:	db01      	blt.n	801b9a8 <_malloc_r+0x1c>
 801b9a4:	42a9      	cmp	r1, r5
 801b9a6:	d905      	bls.n	801b9b4 <_malloc_r+0x28>
 801b9a8:	230c      	movs	r3, #12
 801b9aa:	2600      	movs	r6, #0
 801b9ac:	603b      	str	r3, [r7, #0]
 801b9ae:	4630      	mov	r0, r6
 801b9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b9b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ba88 <_malloc_r+0xfc>
 801b9b8:	f000 f868 	bl	801ba8c <__malloc_lock>
 801b9bc:	f8d8 3000 	ldr.w	r3, [r8]
 801b9c0:	461c      	mov	r4, r3
 801b9c2:	bb5c      	cbnz	r4, 801ba1c <_malloc_r+0x90>
 801b9c4:	4629      	mov	r1, r5
 801b9c6:	4638      	mov	r0, r7
 801b9c8:	f7ff ffc0 	bl	801b94c <sbrk_aligned>
 801b9cc:	1c43      	adds	r3, r0, #1
 801b9ce:	4604      	mov	r4, r0
 801b9d0:	d155      	bne.n	801ba7e <_malloc_r+0xf2>
 801b9d2:	f8d8 4000 	ldr.w	r4, [r8]
 801b9d6:	4626      	mov	r6, r4
 801b9d8:	2e00      	cmp	r6, #0
 801b9da:	d145      	bne.n	801ba68 <_malloc_r+0xdc>
 801b9dc:	2c00      	cmp	r4, #0
 801b9de:	d048      	beq.n	801ba72 <_malloc_r+0xe6>
 801b9e0:	6823      	ldr	r3, [r4, #0]
 801b9e2:	4631      	mov	r1, r6
 801b9e4:	4638      	mov	r0, r7
 801b9e6:	eb04 0903 	add.w	r9, r4, r3
 801b9ea:	f000 fa83 	bl	801bef4 <_sbrk_r>
 801b9ee:	4581      	cmp	r9, r0
 801b9f0:	d13f      	bne.n	801ba72 <_malloc_r+0xe6>
 801b9f2:	6821      	ldr	r1, [r4, #0]
 801b9f4:	4638      	mov	r0, r7
 801b9f6:	1a6d      	subs	r5, r5, r1
 801b9f8:	4629      	mov	r1, r5
 801b9fa:	f7ff ffa7 	bl	801b94c <sbrk_aligned>
 801b9fe:	3001      	adds	r0, #1
 801ba00:	d037      	beq.n	801ba72 <_malloc_r+0xe6>
 801ba02:	6823      	ldr	r3, [r4, #0]
 801ba04:	442b      	add	r3, r5
 801ba06:	6023      	str	r3, [r4, #0]
 801ba08:	f8d8 3000 	ldr.w	r3, [r8]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d038      	beq.n	801ba82 <_malloc_r+0xf6>
 801ba10:	685a      	ldr	r2, [r3, #4]
 801ba12:	42a2      	cmp	r2, r4
 801ba14:	d12b      	bne.n	801ba6e <_malloc_r+0xe2>
 801ba16:	2200      	movs	r2, #0
 801ba18:	605a      	str	r2, [r3, #4]
 801ba1a:	e00f      	b.n	801ba3c <_malloc_r+0xb0>
 801ba1c:	6822      	ldr	r2, [r4, #0]
 801ba1e:	1b52      	subs	r2, r2, r5
 801ba20:	d41f      	bmi.n	801ba62 <_malloc_r+0xd6>
 801ba22:	2a0b      	cmp	r2, #11
 801ba24:	d917      	bls.n	801ba56 <_malloc_r+0xca>
 801ba26:	1961      	adds	r1, r4, r5
 801ba28:	42a3      	cmp	r3, r4
 801ba2a:	6025      	str	r5, [r4, #0]
 801ba2c:	bf18      	it	ne
 801ba2e:	6059      	strne	r1, [r3, #4]
 801ba30:	6863      	ldr	r3, [r4, #4]
 801ba32:	bf08      	it	eq
 801ba34:	f8c8 1000 	streq.w	r1, [r8]
 801ba38:	5162      	str	r2, [r4, r5]
 801ba3a:	604b      	str	r3, [r1, #4]
 801ba3c:	f104 060b 	add.w	r6, r4, #11
 801ba40:	4638      	mov	r0, r7
 801ba42:	f000 f829 	bl	801ba98 <__malloc_unlock>
 801ba46:	1d23      	adds	r3, r4, #4
 801ba48:	f026 0607 	bic.w	r6, r6, #7
 801ba4c:	1af2      	subs	r2, r6, r3
 801ba4e:	d0ae      	beq.n	801b9ae <_malloc_r+0x22>
 801ba50:	1b9b      	subs	r3, r3, r6
 801ba52:	50a3      	str	r3, [r4, r2]
 801ba54:	e7ab      	b.n	801b9ae <_malloc_r+0x22>
 801ba56:	42a3      	cmp	r3, r4
 801ba58:	6862      	ldr	r2, [r4, #4]
 801ba5a:	d1dd      	bne.n	801ba18 <_malloc_r+0x8c>
 801ba5c:	f8c8 2000 	str.w	r2, [r8]
 801ba60:	e7ec      	b.n	801ba3c <_malloc_r+0xb0>
 801ba62:	4623      	mov	r3, r4
 801ba64:	6864      	ldr	r4, [r4, #4]
 801ba66:	e7ac      	b.n	801b9c2 <_malloc_r+0x36>
 801ba68:	4634      	mov	r4, r6
 801ba6a:	6876      	ldr	r6, [r6, #4]
 801ba6c:	e7b4      	b.n	801b9d8 <_malloc_r+0x4c>
 801ba6e:	4613      	mov	r3, r2
 801ba70:	e7cc      	b.n	801ba0c <_malloc_r+0x80>
 801ba72:	230c      	movs	r3, #12
 801ba74:	4638      	mov	r0, r7
 801ba76:	603b      	str	r3, [r7, #0]
 801ba78:	f000 f80e 	bl	801ba98 <__malloc_unlock>
 801ba7c:	e797      	b.n	801b9ae <_malloc_r+0x22>
 801ba7e:	6025      	str	r5, [r4, #0]
 801ba80:	e7dc      	b.n	801ba3c <_malloc_r+0xb0>
 801ba82:	605b      	str	r3, [r3, #4]
 801ba84:	deff      	udf	#255	; 0xff
 801ba86:	bf00      	nop
 801ba88:	2000b5ac 	.word	0x2000b5ac

0801ba8c <__malloc_lock>:
 801ba8c:	4801      	ldr	r0, [pc, #4]	; (801ba94 <__malloc_lock+0x8>)
 801ba8e:	f000 ba78 	b.w	801bf82 <__retarget_lock_acquire_recursive>
 801ba92:	bf00      	nop
 801ba94:	2000b6f4 	.word	0x2000b6f4

0801ba98 <__malloc_unlock>:
 801ba98:	4801      	ldr	r0, [pc, #4]	; (801baa0 <__malloc_unlock+0x8>)
 801ba9a:	f000 ba73 	b.w	801bf84 <__retarget_lock_release_recursive>
 801ba9e:	bf00      	nop
 801baa0:	2000b6f4 	.word	0x2000b6f4

0801baa4 <rand>:
 801baa4:	4b16      	ldr	r3, [pc, #88]	; (801bb00 <rand+0x5c>)
 801baa6:	b510      	push	{r4, lr}
 801baa8:	681c      	ldr	r4, [r3, #0]
 801baaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801baac:	b9b3      	cbnz	r3, 801badc <rand+0x38>
 801baae:	2018      	movs	r0, #24
 801bab0:	f7ff ff44 	bl	801b93c <malloc>
 801bab4:	4602      	mov	r2, r0
 801bab6:	6320      	str	r0, [r4, #48]	; 0x30
 801bab8:	b920      	cbnz	r0, 801bac4 <rand+0x20>
 801baba:	4b12      	ldr	r3, [pc, #72]	; (801bb04 <rand+0x60>)
 801babc:	2152      	movs	r1, #82	; 0x52
 801babe:	4812      	ldr	r0, [pc, #72]	; (801bb08 <rand+0x64>)
 801bac0:	f000 fa6e 	bl	801bfa0 <__assert_func>
 801bac4:	4911      	ldr	r1, [pc, #68]	; (801bb0c <rand+0x68>)
 801bac6:	4b12      	ldr	r3, [pc, #72]	; (801bb10 <rand+0x6c>)
 801bac8:	e9c0 1300 	strd	r1, r3, [r0]
 801bacc:	4b11      	ldr	r3, [pc, #68]	; (801bb14 <rand+0x70>)
 801bace:	2100      	movs	r1, #0
 801bad0:	6083      	str	r3, [r0, #8]
 801bad2:	230b      	movs	r3, #11
 801bad4:	8183      	strh	r3, [r0, #12]
 801bad6:	2001      	movs	r0, #1
 801bad8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801badc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bade:	480e      	ldr	r0, [pc, #56]	; (801bb18 <rand+0x74>)
 801bae0:	690b      	ldr	r3, [r1, #16]
 801bae2:	694c      	ldr	r4, [r1, #20]
 801bae4:	4a0d      	ldr	r2, [pc, #52]	; (801bb1c <rand+0x78>)
 801bae6:	4358      	muls	r0, r3
 801bae8:	fb02 0004 	mla	r0, r2, r4, r0
 801baec:	fba3 3202 	umull	r3, r2, r3, r2
 801baf0:	3301      	adds	r3, #1
 801baf2:	eb40 0002 	adc.w	r0, r0, r2
 801baf6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801bafa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801bafe:	bd10      	pop	{r4, pc}
 801bb00:	200000dc 	.word	0x200000dc
 801bb04:	0801fe9a 	.word	0x0801fe9a
 801bb08:	0801feb1 	.word	0x0801feb1
 801bb0c:	abcd330e 	.word	0xabcd330e
 801bb10:	e66d1234 	.word	0xe66d1234
 801bb14:	0005deec 	.word	0x0005deec
 801bb18:	5851f42d 	.word	0x5851f42d
 801bb1c:	4c957f2d 	.word	0x4c957f2d

0801bb20 <std>:
 801bb20:	2300      	movs	r3, #0
 801bb22:	b510      	push	{r4, lr}
 801bb24:	4604      	mov	r4, r0
 801bb26:	6083      	str	r3, [r0, #8]
 801bb28:	8181      	strh	r1, [r0, #12]
 801bb2a:	4619      	mov	r1, r3
 801bb2c:	6643      	str	r3, [r0, #100]	; 0x64
 801bb2e:	81c2      	strh	r2, [r0, #14]
 801bb30:	2208      	movs	r2, #8
 801bb32:	6183      	str	r3, [r0, #24]
 801bb34:	e9c0 3300 	strd	r3, r3, [r0]
 801bb38:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb3c:	305c      	adds	r0, #92	; 0x5c
 801bb3e:	f000 f989 	bl	801be54 <memset>
 801bb42:	4b0d      	ldr	r3, [pc, #52]	; (801bb78 <std+0x58>)
 801bb44:	6224      	str	r4, [r4, #32]
 801bb46:	6263      	str	r3, [r4, #36]	; 0x24
 801bb48:	4b0c      	ldr	r3, [pc, #48]	; (801bb7c <std+0x5c>)
 801bb4a:	62a3      	str	r3, [r4, #40]	; 0x28
 801bb4c:	4b0c      	ldr	r3, [pc, #48]	; (801bb80 <std+0x60>)
 801bb4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bb50:	4b0c      	ldr	r3, [pc, #48]	; (801bb84 <std+0x64>)
 801bb52:	6323      	str	r3, [r4, #48]	; 0x30
 801bb54:	4b0c      	ldr	r3, [pc, #48]	; (801bb88 <std+0x68>)
 801bb56:	429c      	cmp	r4, r3
 801bb58:	d006      	beq.n	801bb68 <std+0x48>
 801bb5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bb5e:	4294      	cmp	r4, r2
 801bb60:	d002      	beq.n	801bb68 <std+0x48>
 801bb62:	33d0      	adds	r3, #208	; 0xd0
 801bb64:	429c      	cmp	r4, r3
 801bb66:	d105      	bne.n	801bb74 <std+0x54>
 801bb68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb70:	f000 ba06 	b.w	801bf80 <__retarget_lock_init_recursive>
 801bb74:	bd10      	pop	{r4, pc}
 801bb76:	bf00      	nop
 801bb78:	0801bcc9 	.word	0x0801bcc9
 801bb7c:	0801bceb 	.word	0x0801bceb
 801bb80:	0801bd23 	.word	0x0801bd23
 801bb84:	0801bd47 	.word	0x0801bd47
 801bb88:	2000b5b4 	.word	0x2000b5b4

0801bb8c <stdio_exit_handler>:
 801bb8c:	4a02      	ldr	r2, [pc, #8]	; (801bb98 <stdio_exit_handler+0xc>)
 801bb8e:	4903      	ldr	r1, [pc, #12]	; (801bb9c <stdio_exit_handler+0x10>)
 801bb90:	4803      	ldr	r0, [pc, #12]	; (801bba0 <stdio_exit_handler+0x14>)
 801bb92:	f000 b869 	b.w	801bc68 <_fwalk_sglue>
 801bb96:	bf00      	nop
 801bb98:	20000084 	.word	0x20000084
 801bb9c:	0801c9d9 	.word	0x0801c9d9
 801bba0:	20000090 	.word	0x20000090

0801bba4 <cleanup_stdio>:
 801bba4:	6841      	ldr	r1, [r0, #4]
 801bba6:	4b0c      	ldr	r3, [pc, #48]	; (801bbd8 <cleanup_stdio+0x34>)
 801bba8:	4299      	cmp	r1, r3
 801bbaa:	b510      	push	{r4, lr}
 801bbac:	4604      	mov	r4, r0
 801bbae:	d001      	beq.n	801bbb4 <cleanup_stdio+0x10>
 801bbb0:	f000 ff12 	bl	801c9d8 <_fflush_r>
 801bbb4:	68a1      	ldr	r1, [r4, #8]
 801bbb6:	4b09      	ldr	r3, [pc, #36]	; (801bbdc <cleanup_stdio+0x38>)
 801bbb8:	4299      	cmp	r1, r3
 801bbba:	d002      	beq.n	801bbc2 <cleanup_stdio+0x1e>
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	f000 ff0b 	bl	801c9d8 <_fflush_r>
 801bbc2:	68e1      	ldr	r1, [r4, #12]
 801bbc4:	4b06      	ldr	r3, [pc, #24]	; (801bbe0 <cleanup_stdio+0x3c>)
 801bbc6:	4299      	cmp	r1, r3
 801bbc8:	d004      	beq.n	801bbd4 <cleanup_stdio+0x30>
 801bbca:	4620      	mov	r0, r4
 801bbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbd0:	f000 bf02 	b.w	801c9d8 <_fflush_r>
 801bbd4:	bd10      	pop	{r4, pc}
 801bbd6:	bf00      	nop
 801bbd8:	2000b5b4 	.word	0x2000b5b4
 801bbdc:	2000b61c 	.word	0x2000b61c
 801bbe0:	2000b684 	.word	0x2000b684

0801bbe4 <global_stdio_init.part.0>:
 801bbe4:	b510      	push	{r4, lr}
 801bbe6:	4b0b      	ldr	r3, [pc, #44]	; (801bc14 <global_stdio_init.part.0+0x30>)
 801bbe8:	2104      	movs	r1, #4
 801bbea:	4c0b      	ldr	r4, [pc, #44]	; (801bc18 <global_stdio_init.part.0+0x34>)
 801bbec:	4a0b      	ldr	r2, [pc, #44]	; (801bc1c <global_stdio_init.part.0+0x38>)
 801bbee:	4620      	mov	r0, r4
 801bbf0:	601a      	str	r2, [r3, #0]
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	f7ff ff94 	bl	801bb20 <std>
 801bbf8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bbfc:	2201      	movs	r2, #1
 801bbfe:	2109      	movs	r1, #9
 801bc00:	f7ff ff8e 	bl	801bb20 <std>
 801bc04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bc08:	2202      	movs	r2, #2
 801bc0a:	2112      	movs	r1, #18
 801bc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc10:	f7ff bf86 	b.w	801bb20 <std>
 801bc14:	2000b6ec 	.word	0x2000b6ec
 801bc18:	2000b5b4 	.word	0x2000b5b4
 801bc1c:	0801bb8d 	.word	0x0801bb8d

0801bc20 <__sfp_lock_acquire>:
 801bc20:	4801      	ldr	r0, [pc, #4]	; (801bc28 <__sfp_lock_acquire+0x8>)
 801bc22:	f000 b9ae 	b.w	801bf82 <__retarget_lock_acquire_recursive>
 801bc26:	bf00      	nop
 801bc28:	2000b6f5 	.word	0x2000b6f5

0801bc2c <__sfp_lock_release>:
 801bc2c:	4801      	ldr	r0, [pc, #4]	; (801bc34 <__sfp_lock_release+0x8>)
 801bc2e:	f000 b9a9 	b.w	801bf84 <__retarget_lock_release_recursive>
 801bc32:	bf00      	nop
 801bc34:	2000b6f5 	.word	0x2000b6f5

0801bc38 <__sinit>:
 801bc38:	b510      	push	{r4, lr}
 801bc3a:	4604      	mov	r4, r0
 801bc3c:	f7ff fff0 	bl	801bc20 <__sfp_lock_acquire>
 801bc40:	6a23      	ldr	r3, [r4, #32]
 801bc42:	b11b      	cbz	r3, 801bc4c <__sinit+0x14>
 801bc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc48:	f7ff bff0 	b.w	801bc2c <__sfp_lock_release>
 801bc4c:	4b04      	ldr	r3, [pc, #16]	; (801bc60 <__sinit+0x28>)
 801bc4e:	6223      	str	r3, [r4, #32]
 801bc50:	4b04      	ldr	r3, [pc, #16]	; (801bc64 <__sinit+0x2c>)
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d1f5      	bne.n	801bc44 <__sinit+0xc>
 801bc58:	f7ff ffc4 	bl	801bbe4 <global_stdio_init.part.0>
 801bc5c:	e7f2      	b.n	801bc44 <__sinit+0xc>
 801bc5e:	bf00      	nop
 801bc60:	0801bba5 	.word	0x0801bba5
 801bc64:	2000b6ec 	.word	0x2000b6ec

0801bc68 <_fwalk_sglue>:
 801bc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc6c:	4607      	mov	r7, r0
 801bc6e:	4688      	mov	r8, r1
 801bc70:	4614      	mov	r4, r2
 801bc72:	2600      	movs	r6, #0
 801bc74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bc78:	f1b9 0901 	subs.w	r9, r9, #1
 801bc7c:	d505      	bpl.n	801bc8a <_fwalk_sglue+0x22>
 801bc7e:	6824      	ldr	r4, [r4, #0]
 801bc80:	2c00      	cmp	r4, #0
 801bc82:	d1f7      	bne.n	801bc74 <_fwalk_sglue+0xc>
 801bc84:	4630      	mov	r0, r6
 801bc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc8a:	89ab      	ldrh	r3, [r5, #12]
 801bc8c:	2b01      	cmp	r3, #1
 801bc8e:	d907      	bls.n	801bca0 <_fwalk_sglue+0x38>
 801bc90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bc94:	3301      	adds	r3, #1
 801bc96:	d003      	beq.n	801bca0 <_fwalk_sglue+0x38>
 801bc98:	4629      	mov	r1, r5
 801bc9a:	4638      	mov	r0, r7
 801bc9c:	47c0      	blx	r8
 801bc9e:	4306      	orrs	r6, r0
 801bca0:	3568      	adds	r5, #104	; 0x68
 801bca2:	e7e9      	b.n	801bc78 <_fwalk_sglue+0x10>

0801bca4 <iprintf>:
 801bca4:	b40f      	push	{r0, r1, r2, r3}
 801bca6:	b507      	push	{r0, r1, r2, lr}
 801bca8:	4906      	ldr	r1, [pc, #24]	; (801bcc4 <iprintf+0x20>)
 801bcaa:	ab04      	add	r3, sp, #16
 801bcac:	6808      	ldr	r0, [r1, #0]
 801bcae:	f853 2b04 	ldr.w	r2, [r3], #4
 801bcb2:	6881      	ldr	r1, [r0, #8]
 801bcb4:	9301      	str	r3, [sp, #4]
 801bcb6:	f000 fb5f 	bl	801c378 <_vfiprintf_r>
 801bcba:	b003      	add	sp, #12
 801bcbc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bcc0:	b004      	add	sp, #16
 801bcc2:	4770      	bx	lr
 801bcc4:	200000dc 	.word	0x200000dc

0801bcc8 <__sread>:
 801bcc8:	b510      	push	{r4, lr}
 801bcca:	460c      	mov	r4, r1
 801bccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bcd0:	f000 f8fe 	bl	801bed0 <_read_r>
 801bcd4:	2800      	cmp	r0, #0
 801bcd6:	bfab      	itete	ge
 801bcd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bcda:	89a3      	ldrhlt	r3, [r4, #12]
 801bcdc:	181b      	addge	r3, r3, r0
 801bcde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bce2:	bfac      	ite	ge
 801bce4:	6563      	strge	r3, [r4, #84]	; 0x54
 801bce6:	81a3      	strhlt	r3, [r4, #12]
 801bce8:	bd10      	pop	{r4, pc}

0801bcea <__swrite>:
 801bcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcee:	461f      	mov	r7, r3
 801bcf0:	898b      	ldrh	r3, [r1, #12]
 801bcf2:	4605      	mov	r5, r0
 801bcf4:	460c      	mov	r4, r1
 801bcf6:	05db      	lsls	r3, r3, #23
 801bcf8:	4616      	mov	r6, r2
 801bcfa:	d505      	bpl.n	801bd08 <__swrite+0x1e>
 801bcfc:	2302      	movs	r3, #2
 801bcfe:	2200      	movs	r2, #0
 801bd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd04:	f000 f8d2 	bl	801beac <_lseek_r>
 801bd08:	89a3      	ldrh	r3, [r4, #12]
 801bd0a:	4632      	mov	r2, r6
 801bd0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd10:	4628      	mov	r0, r5
 801bd12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd16:	81a3      	strh	r3, [r4, #12]
 801bd18:	463b      	mov	r3, r7
 801bd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd1e:	f000 b8f9 	b.w	801bf14 <_write_r>

0801bd22 <__sseek>:
 801bd22:	b510      	push	{r4, lr}
 801bd24:	460c      	mov	r4, r1
 801bd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd2a:	f000 f8bf 	bl	801beac <_lseek_r>
 801bd2e:	1c43      	adds	r3, r0, #1
 801bd30:	89a3      	ldrh	r3, [r4, #12]
 801bd32:	bf15      	itete	ne
 801bd34:	6560      	strne	r0, [r4, #84]	; 0x54
 801bd36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bd3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bd3e:	81a3      	strheq	r3, [r4, #12]
 801bd40:	bf18      	it	ne
 801bd42:	81a3      	strhne	r3, [r4, #12]
 801bd44:	bd10      	pop	{r4, pc}

0801bd46 <__sclose>:
 801bd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd4a:	f000 b89f 	b.w	801be8c <_close_r>

0801bd4e <_vsniprintf_r>:
 801bd4e:	b530      	push	{r4, r5, lr}
 801bd50:	4614      	mov	r4, r2
 801bd52:	b09b      	sub	sp, #108	; 0x6c
 801bd54:	4605      	mov	r5, r0
 801bd56:	461a      	mov	r2, r3
 801bd58:	2c00      	cmp	r4, #0
 801bd5a:	da05      	bge.n	801bd68 <_vsniprintf_r+0x1a>
 801bd5c:	238b      	movs	r3, #139	; 0x8b
 801bd5e:	6003      	str	r3, [r0, #0]
 801bd60:	f04f 30ff 	mov.w	r0, #4294967295
 801bd64:	b01b      	add	sp, #108	; 0x6c
 801bd66:	bd30      	pop	{r4, r5, pc}
 801bd68:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bd6c:	9100      	str	r1, [sp, #0]
 801bd6e:	9104      	str	r1, [sp, #16]
 801bd70:	4669      	mov	r1, sp
 801bd72:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd76:	bf14      	ite	ne
 801bd78:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bd7c:	4623      	moveq	r3, r4
 801bd7e:	9302      	str	r3, [sp, #8]
 801bd80:	9305      	str	r3, [sp, #20]
 801bd82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd86:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bd8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bd8c:	f000 f9cc 	bl	801c128 <_svfiprintf_r>
 801bd90:	1c43      	adds	r3, r0, #1
 801bd92:	bfbc      	itt	lt
 801bd94:	238b      	movlt	r3, #139	; 0x8b
 801bd96:	602b      	strlt	r3, [r5, #0]
 801bd98:	2c00      	cmp	r4, #0
 801bd9a:	d0e3      	beq.n	801bd64 <_vsniprintf_r+0x16>
 801bd9c:	9b00      	ldr	r3, [sp, #0]
 801bd9e:	2200      	movs	r2, #0
 801bda0:	701a      	strb	r2, [r3, #0]
 801bda2:	e7df      	b.n	801bd64 <_vsniprintf_r+0x16>

0801bda4 <vsniprintf>:
 801bda4:	b507      	push	{r0, r1, r2, lr}
 801bda6:	9300      	str	r3, [sp, #0]
 801bda8:	4613      	mov	r3, r2
 801bdaa:	460a      	mov	r2, r1
 801bdac:	4601      	mov	r1, r0
 801bdae:	4803      	ldr	r0, [pc, #12]	; (801bdbc <vsniprintf+0x18>)
 801bdb0:	6800      	ldr	r0, [r0, #0]
 801bdb2:	f7ff ffcc 	bl	801bd4e <_vsniprintf_r>
 801bdb6:	b003      	add	sp, #12
 801bdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801bdbc:	200000dc 	.word	0x200000dc

0801bdc0 <_vsiprintf_r>:
 801bdc0:	b500      	push	{lr}
 801bdc2:	b09b      	sub	sp, #108	; 0x6c
 801bdc4:	9100      	str	r1, [sp, #0]
 801bdc6:	9104      	str	r1, [sp, #16]
 801bdc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bdcc:	9105      	str	r1, [sp, #20]
 801bdce:	9102      	str	r1, [sp, #8]
 801bdd0:	4905      	ldr	r1, [pc, #20]	; (801bde8 <_vsiprintf_r+0x28>)
 801bdd2:	9103      	str	r1, [sp, #12]
 801bdd4:	4669      	mov	r1, sp
 801bdd6:	f000 f9a7 	bl	801c128 <_svfiprintf_r>
 801bdda:	9b00      	ldr	r3, [sp, #0]
 801bddc:	2200      	movs	r2, #0
 801bdde:	701a      	strb	r2, [r3, #0]
 801bde0:	b01b      	add	sp, #108	; 0x6c
 801bde2:	f85d fb04 	ldr.w	pc, [sp], #4
 801bde6:	bf00      	nop
 801bde8:	ffff0208 	.word	0xffff0208

0801bdec <vsiprintf>:
 801bdec:	4613      	mov	r3, r2
 801bdee:	460a      	mov	r2, r1
 801bdf0:	4601      	mov	r1, r0
 801bdf2:	4802      	ldr	r0, [pc, #8]	; (801bdfc <vsiprintf+0x10>)
 801bdf4:	6800      	ldr	r0, [r0, #0]
 801bdf6:	f7ff bfe3 	b.w	801bdc0 <_vsiprintf_r>
 801bdfa:	bf00      	nop
 801bdfc:	200000dc 	.word	0x200000dc

0801be00 <memcmp>:
 801be00:	3901      	subs	r1, #1
 801be02:	4402      	add	r2, r0
 801be04:	b510      	push	{r4, lr}
 801be06:	4290      	cmp	r0, r2
 801be08:	d101      	bne.n	801be0e <memcmp+0xe>
 801be0a:	2000      	movs	r0, #0
 801be0c:	e005      	b.n	801be1a <memcmp+0x1a>
 801be0e:	7803      	ldrb	r3, [r0, #0]
 801be10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801be14:	42a3      	cmp	r3, r4
 801be16:	d001      	beq.n	801be1c <memcmp+0x1c>
 801be18:	1b18      	subs	r0, r3, r4
 801be1a:	bd10      	pop	{r4, pc}
 801be1c:	3001      	adds	r0, #1
 801be1e:	e7f2      	b.n	801be06 <memcmp+0x6>

0801be20 <memmove>:
 801be20:	4288      	cmp	r0, r1
 801be22:	b510      	push	{r4, lr}
 801be24:	eb01 0402 	add.w	r4, r1, r2
 801be28:	d902      	bls.n	801be30 <memmove+0x10>
 801be2a:	4284      	cmp	r4, r0
 801be2c:	4623      	mov	r3, r4
 801be2e:	d807      	bhi.n	801be40 <memmove+0x20>
 801be30:	1e43      	subs	r3, r0, #1
 801be32:	42a1      	cmp	r1, r4
 801be34:	d008      	beq.n	801be48 <memmove+0x28>
 801be36:	f811 2b01 	ldrb.w	r2, [r1], #1
 801be3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801be3e:	e7f8      	b.n	801be32 <memmove+0x12>
 801be40:	4402      	add	r2, r0
 801be42:	4601      	mov	r1, r0
 801be44:	428a      	cmp	r2, r1
 801be46:	d100      	bne.n	801be4a <memmove+0x2a>
 801be48:	bd10      	pop	{r4, pc}
 801be4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801be4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801be52:	e7f7      	b.n	801be44 <memmove+0x24>

0801be54 <memset>:
 801be54:	4402      	add	r2, r0
 801be56:	4603      	mov	r3, r0
 801be58:	4293      	cmp	r3, r2
 801be5a:	d100      	bne.n	801be5e <memset+0xa>
 801be5c:	4770      	bx	lr
 801be5e:	f803 1b01 	strb.w	r1, [r3], #1
 801be62:	e7f9      	b.n	801be58 <memset+0x4>

0801be64 <strncpy>:
 801be64:	3901      	subs	r1, #1
 801be66:	4603      	mov	r3, r0
 801be68:	b510      	push	{r4, lr}
 801be6a:	b132      	cbz	r2, 801be7a <strncpy+0x16>
 801be6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801be70:	3a01      	subs	r2, #1
 801be72:	f803 4b01 	strb.w	r4, [r3], #1
 801be76:	2c00      	cmp	r4, #0
 801be78:	d1f7      	bne.n	801be6a <strncpy+0x6>
 801be7a:	441a      	add	r2, r3
 801be7c:	2100      	movs	r1, #0
 801be7e:	4293      	cmp	r3, r2
 801be80:	d100      	bne.n	801be84 <strncpy+0x20>
 801be82:	bd10      	pop	{r4, pc}
 801be84:	f803 1b01 	strb.w	r1, [r3], #1
 801be88:	e7f9      	b.n	801be7e <strncpy+0x1a>
	...

0801be8c <_close_r>:
 801be8c:	b538      	push	{r3, r4, r5, lr}
 801be8e:	2300      	movs	r3, #0
 801be90:	4d05      	ldr	r5, [pc, #20]	; (801bea8 <_close_r+0x1c>)
 801be92:	4604      	mov	r4, r0
 801be94:	4608      	mov	r0, r1
 801be96:	602b      	str	r3, [r5, #0]
 801be98:	f7e5 f8cf 	bl	800103a <_close>
 801be9c:	1c43      	adds	r3, r0, #1
 801be9e:	d102      	bne.n	801bea6 <_close_r+0x1a>
 801bea0:	682b      	ldr	r3, [r5, #0]
 801bea2:	b103      	cbz	r3, 801bea6 <_close_r+0x1a>
 801bea4:	6023      	str	r3, [r4, #0]
 801bea6:	bd38      	pop	{r3, r4, r5, pc}
 801bea8:	2000b6f0 	.word	0x2000b6f0

0801beac <_lseek_r>:
 801beac:	b538      	push	{r3, r4, r5, lr}
 801beae:	4604      	mov	r4, r0
 801beb0:	4d06      	ldr	r5, [pc, #24]	; (801becc <_lseek_r+0x20>)
 801beb2:	4608      	mov	r0, r1
 801beb4:	4611      	mov	r1, r2
 801beb6:	2200      	movs	r2, #0
 801beb8:	602a      	str	r2, [r5, #0]
 801beba:	461a      	mov	r2, r3
 801bebc:	f7e5 f8e4 	bl	8001088 <_lseek>
 801bec0:	1c43      	adds	r3, r0, #1
 801bec2:	d102      	bne.n	801beca <_lseek_r+0x1e>
 801bec4:	682b      	ldr	r3, [r5, #0]
 801bec6:	b103      	cbz	r3, 801beca <_lseek_r+0x1e>
 801bec8:	6023      	str	r3, [r4, #0]
 801beca:	bd38      	pop	{r3, r4, r5, pc}
 801becc:	2000b6f0 	.word	0x2000b6f0

0801bed0 <_read_r>:
 801bed0:	b538      	push	{r3, r4, r5, lr}
 801bed2:	4604      	mov	r4, r0
 801bed4:	4d06      	ldr	r5, [pc, #24]	; (801bef0 <_read_r+0x20>)
 801bed6:	4608      	mov	r0, r1
 801bed8:	4611      	mov	r1, r2
 801beda:	2200      	movs	r2, #0
 801bedc:	602a      	str	r2, [r5, #0]
 801bede:	461a      	mov	r2, r3
 801bee0:	f7e5 f872 	bl	8000fc8 <_read>
 801bee4:	1c43      	adds	r3, r0, #1
 801bee6:	d102      	bne.n	801beee <_read_r+0x1e>
 801bee8:	682b      	ldr	r3, [r5, #0]
 801beea:	b103      	cbz	r3, 801beee <_read_r+0x1e>
 801beec:	6023      	str	r3, [r4, #0]
 801beee:	bd38      	pop	{r3, r4, r5, pc}
 801bef0:	2000b6f0 	.word	0x2000b6f0

0801bef4 <_sbrk_r>:
 801bef4:	b538      	push	{r3, r4, r5, lr}
 801bef6:	2300      	movs	r3, #0
 801bef8:	4d05      	ldr	r5, [pc, #20]	; (801bf10 <_sbrk_r+0x1c>)
 801befa:	4604      	mov	r4, r0
 801befc:	4608      	mov	r0, r1
 801befe:	602b      	str	r3, [r5, #0]
 801bf00:	f7e5 f8d0 	bl	80010a4 <_sbrk>
 801bf04:	1c43      	adds	r3, r0, #1
 801bf06:	d102      	bne.n	801bf0e <_sbrk_r+0x1a>
 801bf08:	682b      	ldr	r3, [r5, #0]
 801bf0a:	b103      	cbz	r3, 801bf0e <_sbrk_r+0x1a>
 801bf0c:	6023      	str	r3, [r4, #0]
 801bf0e:	bd38      	pop	{r3, r4, r5, pc}
 801bf10:	2000b6f0 	.word	0x2000b6f0

0801bf14 <_write_r>:
 801bf14:	b538      	push	{r3, r4, r5, lr}
 801bf16:	4604      	mov	r4, r0
 801bf18:	4d06      	ldr	r5, [pc, #24]	; (801bf34 <_write_r+0x20>)
 801bf1a:	4608      	mov	r0, r1
 801bf1c:	4611      	mov	r1, r2
 801bf1e:	2200      	movs	r2, #0
 801bf20:	602a      	str	r2, [r5, #0]
 801bf22:	461a      	mov	r2, r3
 801bf24:	f7e5 f86d 	bl	8001002 <_write>
 801bf28:	1c43      	adds	r3, r0, #1
 801bf2a:	d102      	bne.n	801bf32 <_write_r+0x1e>
 801bf2c:	682b      	ldr	r3, [r5, #0]
 801bf2e:	b103      	cbz	r3, 801bf32 <_write_r+0x1e>
 801bf30:	6023      	str	r3, [r4, #0]
 801bf32:	bd38      	pop	{r3, r4, r5, pc}
 801bf34:	2000b6f0 	.word	0x2000b6f0

0801bf38 <__libc_init_array>:
 801bf38:	b570      	push	{r4, r5, r6, lr}
 801bf3a:	4d0d      	ldr	r5, [pc, #52]	; (801bf70 <__libc_init_array+0x38>)
 801bf3c:	2600      	movs	r6, #0
 801bf3e:	4c0d      	ldr	r4, [pc, #52]	; (801bf74 <__libc_init_array+0x3c>)
 801bf40:	1b64      	subs	r4, r4, r5
 801bf42:	10a4      	asrs	r4, r4, #2
 801bf44:	42a6      	cmp	r6, r4
 801bf46:	d109      	bne.n	801bf5c <__libc_init_array+0x24>
 801bf48:	4d0b      	ldr	r5, [pc, #44]	; (801bf78 <__libc_init_array+0x40>)
 801bf4a:	2600      	movs	r6, #0
 801bf4c:	4c0b      	ldr	r4, [pc, #44]	; (801bf7c <__libc_init_array+0x44>)
 801bf4e:	f000 ff27 	bl	801cda0 <_init>
 801bf52:	1b64      	subs	r4, r4, r5
 801bf54:	10a4      	asrs	r4, r4, #2
 801bf56:	42a6      	cmp	r6, r4
 801bf58:	d105      	bne.n	801bf66 <__libc_init_array+0x2e>
 801bf5a:	bd70      	pop	{r4, r5, r6, pc}
 801bf5c:	f855 3b04 	ldr.w	r3, [r5], #4
 801bf60:	3601      	adds	r6, #1
 801bf62:	4798      	blx	r3
 801bf64:	e7ee      	b.n	801bf44 <__libc_init_array+0xc>
 801bf66:	f855 3b04 	ldr.w	r3, [r5], #4
 801bf6a:	3601      	adds	r6, #1
 801bf6c:	4798      	blx	r3
 801bf6e:	e7f2      	b.n	801bf56 <__libc_init_array+0x1e>
 801bf70:	0801ff80 	.word	0x0801ff80
 801bf74:	0801ff80 	.word	0x0801ff80
 801bf78:	0801ff80 	.word	0x0801ff80
 801bf7c:	0801ff84 	.word	0x0801ff84

0801bf80 <__retarget_lock_init_recursive>:
 801bf80:	4770      	bx	lr

0801bf82 <__retarget_lock_acquire_recursive>:
 801bf82:	4770      	bx	lr

0801bf84 <__retarget_lock_release_recursive>:
 801bf84:	4770      	bx	lr

0801bf86 <memcpy>:
 801bf86:	440a      	add	r2, r1
 801bf88:	1e43      	subs	r3, r0, #1
 801bf8a:	4291      	cmp	r1, r2
 801bf8c:	d100      	bne.n	801bf90 <memcpy+0xa>
 801bf8e:	4770      	bx	lr
 801bf90:	b510      	push	{r4, lr}
 801bf92:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bf96:	4291      	cmp	r1, r2
 801bf98:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bf9c:	d1f9      	bne.n	801bf92 <memcpy+0xc>
 801bf9e:	bd10      	pop	{r4, pc}

0801bfa0 <__assert_func>:
 801bfa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bfa2:	4614      	mov	r4, r2
 801bfa4:	461a      	mov	r2, r3
 801bfa6:	4b09      	ldr	r3, [pc, #36]	; (801bfcc <__assert_func+0x2c>)
 801bfa8:	4605      	mov	r5, r0
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	68d8      	ldr	r0, [r3, #12]
 801bfae:	b14c      	cbz	r4, 801bfc4 <__assert_func+0x24>
 801bfb0:	4b07      	ldr	r3, [pc, #28]	; (801bfd0 <__assert_func+0x30>)
 801bfb2:	9100      	str	r1, [sp, #0]
 801bfb4:	4907      	ldr	r1, [pc, #28]	; (801bfd4 <__assert_func+0x34>)
 801bfb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bfba:	462b      	mov	r3, r5
 801bfbc:	f000 fd34 	bl	801ca28 <fiprintf>
 801bfc0:	f000 fde8 	bl	801cb94 <abort>
 801bfc4:	4b04      	ldr	r3, [pc, #16]	; (801bfd8 <__assert_func+0x38>)
 801bfc6:	461c      	mov	r4, r3
 801bfc8:	e7f3      	b.n	801bfb2 <__assert_func+0x12>
 801bfca:	bf00      	nop
 801bfcc:	200000dc 	.word	0x200000dc
 801bfd0:	0801ff09 	.word	0x0801ff09
 801bfd4:	0801ff16 	.word	0x0801ff16
 801bfd8:	0801ff44 	.word	0x0801ff44

0801bfdc <_free_r>:
 801bfdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfde:	2900      	cmp	r1, #0
 801bfe0:	d043      	beq.n	801c06a <_free_r+0x8e>
 801bfe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bfe6:	1f0c      	subs	r4, r1, #4
 801bfe8:	9001      	str	r0, [sp, #4]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	bfb8      	it	lt
 801bfee:	18e4      	addlt	r4, r4, r3
 801bff0:	f7ff fd4c 	bl	801ba8c <__malloc_lock>
 801bff4:	4a1e      	ldr	r2, [pc, #120]	; (801c070 <_free_r+0x94>)
 801bff6:	9801      	ldr	r0, [sp, #4]
 801bff8:	6813      	ldr	r3, [r2, #0]
 801bffa:	b933      	cbnz	r3, 801c00a <_free_r+0x2e>
 801bffc:	6063      	str	r3, [r4, #4]
 801bffe:	6014      	str	r4, [r2, #0]
 801c000:	b003      	add	sp, #12
 801c002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c006:	f7ff bd47 	b.w	801ba98 <__malloc_unlock>
 801c00a:	42a3      	cmp	r3, r4
 801c00c:	d908      	bls.n	801c020 <_free_r+0x44>
 801c00e:	6825      	ldr	r5, [r4, #0]
 801c010:	1961      	adds	r1, r4, r5
 801c012:	428b      	cmp	r3, r1
 801c014:	bf01      	itttt	eq
 801c016:	6819      	ldreq	r1, [r3, #0]
 801c018:	685b      	ldreq	r3, [r3, #4]
 801c01a:	1949      	addeq	r1, r1, r5
 801c01c:	6021      	streq	r1, [r4, #0]
 801c01e:	e7ed      	b.n	801bffc <_free_r+0x20>
 801c020:	461a      	mov	r2, r3
 801c022:	685b      	ldr	r3, [r3, #4]
 801c024:	b10b      	cbz	r3, 801c02a <_free_r+0x4e>
 801c026:	42a3      	cmp	r3, r4
 801c028:	d9fa      	bls.n	801c020 <_free_r+0x44>
 801c02a:	6811      	ldr	r1, [r2, #0]
 801c02c:	1855      	adds	r5, r2, r1
 801c02e:	42a5      	cmp	r5, r4
 801c030:	d10b      	bne.n	801c04a <_free_r+0x6e>
 801c032:	6824      	ldr	r4, [r4, #0]
 801c034:	4421      	add	r1, r4
 801c036:	1854      	adds	r4, r2, r1
 801c038:	6011      	str	r1, [r2, #0]
 801c03a:	42a3      	cmp	r3, r4
 801c03c:	d1e0      	bne.n	801c000 <_free_r+0x24>
 801c03e:	681c      	ldr	r4, [r3, #0]
 801c040:	685b      	ldr	r3, [r3, #4]
 801c042:	440c      	add	r4, r1
 801c044:	6053      	str	r3, [r2, #4]
 801c046:	6014      	str	r4, [r2, #0]
 801c048:	e7da      	b.n	801c000 <_free_r+0x24>
 801c04a:	d902      	bls.n	801c052 <_free_r+0x76>
 801c04c:	230c      	movs	r3, #12
 801c04e:	6003      	str	r3, [r0, #0]
 801c050:	e7d6      	b.n	801c000 <_free_r+0x24>
 801c052:	6825      	ldr	r5, [r4, #0]
 801c054:	1961      	adds	r1, r4, r5
 801c056:	428b      	cmp	r3, r1
 801c058:	bf02      	ittt	eq
 801c05a:	6819      	ldreq	r1, [r3, #0]
 801c05c:	685b      	ldreq	r3, [r3, #4]
 801c05e:	1949      	addeq	r1, r1, r5
 801c060:	6063      	str	r3, [r4, #4]
 801c062:	bf08      	it	eq
 801c064:	6021      	streq	r1, [r4, #0]
 801c066:	6054      	str	r4, [r2, #4]
 801c068:	e7ca      	b.n	801c000 <_free_r+0x24>
 801c06a:	b003      	add	sp, #12
 801c06c:	bd30      	pop	{r4, r5, pc}
 801c06e:	bf00      	nop
 801c070:	2000b5ac 	.word	0x2000b5ac

0801c074 <__ssputs_r>:
 801c074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c078:	461f      	mov	r7, r3
 801c07a:	688e      	ldr	r6, [r1, #8]
 801c07c:	4682      	mov	sl, r0
 801c07e:	460c      	mov	r4, r1
 801c080:	42be      	cmp	r6, r7
 801c082:	4690      	mov	r8, r2
 801c084:	680b      	ldr	r3, [r1, #0]
 801c086:	d82c      	bhi.n	801c0e2 <__ssputs_r+0x6e>
 801c088:	898a      	ldrh	r2, [r1, #12]
 801c08a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c08e:	d026      	beq.n	801c0de <__ssputs_r+0x6a>
 801c090:	6965      	ldr	r5, [r4, #20]
 801c092:	6909      	ldr	r1, [r1, #16]
 801c094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c098:	eba3 0901 	sub.w	r9, r3, r1
 801c09c:	1c7b      	adds	r3, r7, #1
 801c09e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c0a2:	444b      	add	r3, r9
 801c0a4:	106d      	asrs	r5, r5, #1
 801c0a6:	429d      	cmp	r5, r3
 801c0a8:	bf38      	it	cc
 801c0aa:	461d      	movcc	r5, r3
 801c0ac:	0553      	lsls	r3, r2, #21
 801c0ae:	d527      	bpl.n	801c100 <__ssputs_r+0x8c>
 801c0b0:	4629      	mov	r1, r5
 801c0b2:	f7ff fc6b 	bl	801b98c <_malloc_r>
 801c0b6:	4606      	mov	r6, r0
 801c0b8:	b360      	cbz	r0, 801c114 <__ssputs_r+0xa0>
 801c0ba:	464a      	mov	r2, r9
 801c0bc:	6921      	ldr	r1, [r4, #16]
 801c0be:	f7ff ff62 	bl	801bf86 <memcpy>
 801c0c2:	89a3      	ldrh	r3, [r4, #12]
 801c0c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0cc:	81a3      	strh	r3, [r4, #12]
 801c0ce:	6126      	str	r6, [r4, #16]
 801c0d0:	444e      	add	r6, r9
 801c0d2:	6165      	str	r5, [r4, #20]
 801c0d4:	eba5 0509 	sub.w	r5, r5, r9
 801c0d8:	6026      	str	r6, [r4, #0]
 801c0da:	463e      	mov	r6, r7
 801c0dc:	60a5      	str	r5, [r4, #8]
 801c0de:	42be      	cmp	r6, r7
 801c0e0:	d900      	bls.n	801c0e4 <__ssputs_r+0x70>
 801c0e2:	463e      	mov	r6, r7
 801c0e4:	4632      	mov	r2, r6
 801c0e6:	4641      	mov	r1, r8
 801c0e8:	6820      	ldr	r0, [r4, #0]
 801c0ea:	f7ff fe99 	bl	801be20 <memmove>
 801c0ee:	68a3      	ldr	r3, [r4, #8]
 801c0f0:	2000      	movs	r0, #0
 801c0f2:	1b9b      	subs	r3, r3, r6
 801c0f4:	60a3      	str	r3, [r4, #8]
 801c0f6:	6823      	ldr	r3, [r4, #0]
 801c0f8:	4433      	add	r3, r6
 801c0fa:	6023      	str	r3, [r4, #0]
 801c0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c100:	462a      	mov	r2, r5
 801c102:	f000 fd4e 	bl	801cba2 <_realloc_r>
 801c106:	4606      	mov	r6, r0
 801c108:	2800      	cmp	r0, #0
 801c10a:	d1e0      	bne.n	801c0ce <__ssputs_r+0x5a>
 801c10c:	6921      	ldr	r1, [r4, #16]
 801c10e:	4650      	mov	r0, sl
 801c110:	f7ff ff64 	bl	801bfdc <_free_r>
 801c114:	230c      	movs	r3, #12
 801c116:	f04f 30ff 	mov.w	r0, #4294967295
 801c11a:	f8ca 3000 	str.w	r3, [sl]
 801c11e:	89a3      	ldrh	r3, [r4, #12]
 801c120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c124:	81a3      	strh	r3, [r4, #12]
 801c126:	e7e9      	b.n	801c0fc <__ssputs_r+0x88>

0801c128 <_svfiprintf_r>:
 801c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c12c:	4698      	mov	r8, r3
 801c12e:	898b      	ldrh	r3, [r1, #12]
 801c130:	b09d      	sub	sp, #116	; 0x74
 801c132:	4607      	mov	r7, r0
 801c134:	061b      	lsls	r3, r3, #24
 801c136:	460d      	mov	r5, r1
 801c138:	4614      	mov	r4, r2
 801c13a:	d50e      	bpl.n	801c15a <_svfiprintf_r+0x32>
 801c13c:	690b      	ldr	r3, [r1, #16]
 801c13e:	b963      	cbnz	r3, 801c15a <_svfiprintf_r+0x32>
 801c140:	2140      	movs	r1, #64	; 0x40
 801c142:	f7ff fc23 	bl	801b98c <_malloc_r>
 801c146:	6028      	str	r0, [r5, #0]
 801c148:	6128      	str	r0, [r5, #16]
 801c14a:	b920      	cbnz	r0, 801c156 <_svfiprintf_r+0x2e>
 801c14c:	230c      	movs	r3, #12
 801c14e:	603b      	str	r3, [r7, #0]
 801c150:	f04f 30ff 	mov.w	r0, #4294967295
 801c154:	e0d0      	b.n	801c2f8 <_svfiprintf_r+0x1d0>
 801c156:	2340      	movs	r3, #64	; 0x40
 801c158:	616b      	str	r3, [r5, #20]
 801c15a:	2300      	movs	r3, #0
 801c15c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c160:	f04f 0901 	mov.w	r9, #1
 801c164:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c310 <_svfiprintf_r+0x1e8>
 801c168:	9309      	str	r3, [sp, #36]	; 0x24
 801c16a:	2320      	movs	r3, #32
 801c16c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c170:	2330      	movs	r3, #48	; 0x30
 801c172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c176:	4623      	mov	r3, r4
 801c178:	469a      	mov	sl, r3
 801c17a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c17e:	b10a      	cbz	r2, 801c184 <_svfiprintf_r+0x5c>
 801c180:	2a25      	cmp	r2, #37	; 0x25
 801c182:	d1f9      	bne.n	801c178 <_svfiprintf_r+0x50>
 801c184:	ebba 0b04 	subs.w	fp, sl, r4
 801c188:	d00b      	beq.n	801c1a2 <_svfiprintf_r+0x7a>
 801c18a:	465b      	mov	r3, fp
 801c18c:	4622      	mov	r2, r4
 801c18e:	4629      	mov	r1, r5
 801c190:	4638      	mov	r0, r7
 801c192:	f7ff ff6f 	bl	801c074 <__ssputs_r>
 801c196:	3001      	adds	r0, #1
 801c198:	f000 80a9 	beq.w	801c2ee <_svfiprintf_r+0x1c6>
 801c19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c19e:	445a      	add	r2, fp
 801c1a0:	9209      	str	r2, [sp, #36]	; 0x24
 801c1a2:	f89a 3000 	ldrb.w	r3, [sl]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	f000 80a1 	beq.w	801c2ee <_svfiprintf_r+0x1c6>
 801c1ac:	2300      	movs	r3, #0
 801c1ae:	f04f 32ff 	mov.w	r2, #4294967295
 801c1b2:	f10a 0a01 	add.w	sl, sl, #1
 801c1b6:	9304      	str	r3, [sp, #16]
 801c1b8:	9307      	str	r3, [sp, #28]
 801c1ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c1be:	931a      	str	r3, [sp, #104]	; 0x68
 801c1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c1c4:	4654      	mov	r4, sl
 801c1c6:	2205      	movs	r2, #5
 801c1c8:	4851      	ldr	r0, [pc, #324]	; (801c310 <_svfiprintf_r+0x1e8>)
 801c1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1ce:	f000 fcd3 	bl	801cb78 <memchr>
 801c1d2:	9a04      	ldr	r2, [sp, #16]
 801c1d4:	b9d8      	cbnz	r0, 801c20e <_svfiprintf_r+0xe6>
 801c1d6:	06d0      	lsls	r0, r2, #27
 801c1d8:	bf44      	itt	mi
 801c1da:	2320      	movmi	r3, #32
 801c1dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c1e0:	0711      	lsls	r1, r2, #28
 801c1e2:	bf44      	itt	mi
 801c1e4:	232b      	movmi	r3, #43	; 0x2b
 801c1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c1ea:	f89a 3000 	ldrb.w	r3, [sl]
 801c1ee:	2b2a      	cmp	r3, #42	; 0x2a
 801c1f0:	d015      	beq.n	801c21e <_svfiprintf_r+0xf6>
 801c1f2:	9a07      	ldr	r2, [sp, #28]
 801c1f4:	4654      	mov	r4, sl
 801c1f6:	2000      	movs	r0, #0
 801c1f8:	f04f 0c0a 	mov.w	ip, #10
 801c1fc:	4621      	mov	r1, r4
 801c1fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c202:	3b30      	subs	r3, #48	; 0x30
 801c204:	2b09      	cmp	r3, #9
 801c206:	d94d      	bls.n	801c2a4 <_svfiprintf_r+0x17c>
 801c208:	b1b0      	cbz	r0, 801c238 <_svfiprintf_r+0x110>
 801c20a:	9207      	str	r2, [sp, #28]
 801c20c:	e014      	b.n	801c238 <_svfiprintf_r+0x110>
 801c20e:	eba0 0308 	sub.w	r3, r0, r8
 801c212:	46a2      	mov	sl, r4
 801c214:	fa09 f303 	lsl.w	r3, r9, r3
 801c218:	4313      	orrs	r3, r2
 801c21a:	9304      	str	r3, [sp, #16]
 801c21c:	e7d2      	b.n	801c1c4 <_svfiprintf_r+0x9c>
 801c21e:	9b03      	ldr	r3, [sp, #12]
 801c220:	1d19      	adds	r1, r3, #4
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	2b00      	cmp	r3, #0
 801c226:	9103      	str	r1, [sp, #12]
 801c228:	bfbb      	ittet	lt
 801c22a:	425b      	neglt	r3, r3
 801c22c:	f042 0202 	orrlt.w	r2, r2, #2
 801c230:	9307      	strge	r3, [sp, #28]
 801c232:	9307      	strlt	r3, [sp, #28]
 801c234:	bfb8      	it	lt
 801c236:	9204      	strlt	r2, [sp, #16]
 801c238:	7823      	ldrb	r3, [r4, #0]
 801c23a:	2b2e      	cmp	r3, #46	; 0x2e
 801c23c:	d10c      	bne.n	801c258 <_svfiprintf_r+0x130>
 801c23e:	7863      	ldrb	r3, [r4, #1]
 801c240:	2b2a      	cmp	r3, #42	; 0x2a
 801c242:	d134      	bne.n	801c2ae <_svfiprintf_r+0x186>
 801c244:	9b03      	ldr	r3, [sp, #12]
 801c246:	3402      	adds	r4, #2
 801c248:	1d1a      	adds	r2, r3, #4
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	9203      	str	r2, [sp, #12]
 801c250:	bfb8      	it	lt
 801c252:	f04f 33ff 	movlt.w	r3, #4294967295
 801c256:	9305      	str	r3, [sp, #20]
 801c258:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801c320 <_svfiprintf_r+0x1f8>
 801c25c:	2203      	movs	r2, #3
 801c25e:	7821      	ldrb	r1, [r4, #0]
 801c260:	4650      	mov	r0, sl
 801c262:	f000 fc89 	bl	801cb78 <memchr>
 801c266:	b138      	cbz	r0, 801c278 <_svfiprintf_r+0x150>
 801c268:	eba0 000a 	sub.w	r0, r0, sl
 801c26c:	2240      	movs	r2, #64	; 0x40
 801c26e:	9b04      	ldr	r3, [sp, #16]
 801c270:	3401      	adds	r4, #1
 801c272:	4082      	lsls	r2, r0
 801c274:	4313      	orrs	r3, r2
 801c276:	9304      	str	r3, [sp, #16]
 801c278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c27c:	2206      	movs	r2, #6
 801c27e:	4825      	ldr	r0, [pc, #148]	; (801c314 <_svfiprintf_r+0x1ec>)
 801c280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c284:	f000 fc78 	bl	801cb78 <memchr>
 801c288:	2800      	cmp	r0, #0
 801c28a:	d038      	beq.n	801c2fe <_svfiprintf_r+0x1d6>
 801c28c:	4b22      	ldr	r3, [pc, #136]	; (801c318 <_svfiprintf_r+0x1f0>)
 801c28e:	bb1b      	cbnz	r3, 801c2d8 <_svfiprintf_r+0x1b0>
 801c290:	9b03      	ldr	r3, [sp, #12]
 801c292:	3307      	adds	r3, #7
 801c294:	f023 0307 	bic.w	r3, r3, #7
 801c298:	3308      	adds	r3, #8
 801c29a:	9303      	str	r3, [sp, #12]
 801c29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c29e:	4433      	add	r3, r6
 801c2a0:	9309      	str	r3, [sp, #36]	; 0x24
 801c2a2:	e768      	b.n	801c176 <_svfiprintf_r+0x4e>
 801c2a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801c2a8:	460c      	mov	r4, r1
 801c2aa:	2001      	movs	r0, #1
 801c2ac:	e7a6      	b.n	801c1fc <_svfiprintf_r+0xd4>
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	3401      	adds	r4, #1
 801c2b2:	f04f 0c0a 	mov.w	ip, #10
 801c2b6:	4619      	mov	r1, r3
 801c2b8:	9305      	str	r3, [sp, #20]
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2c0:	3a30      	subs	r2, #48	; 0x30
 801c2c2:	2a09      	cmp	r2, #9
 801c2c4:	d903      	bls.n	801c2ce <_svfiprintf_r+0x1a6>
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d0c6      	beq.n	801c258 <_svfiprintf_r+0x130>
 801c2ca:	9105      	str	r1, [sp, #20]
 801c2cc:	e7c4      	b.n	801c258 <_svfiprintf_r+0x130>
 801c2ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801c2d2:	4604      	mov	r4, r0
 801c2d4:	2301      	movs	r3, #1
 801c2d6:	e7f0      	b.n	801c2ba <_svfiprintf_r+0x192>
 801c2d8:	ab03      	add	r3, sp, #12
 801c2da:	462a      	mov	r2, r5
 801c2dc:	a904      	add	r1, sp, #16
 801c2de:	4638      	mov	r0, r7
 801c2e0:	9300      	str	r3, [sp, #0]
 801c2e2:	4b0e      	ldr	r3, [pc, #56]	; (801c31c <_svfiprintf_r+0x1f4>)
 801c2e4:	f3af 8000 	nop.w
 801c2e8:	1c42      	adds	r2, r0, #1
 801c2ea:	4606      	mov	r6, r0
 801c2ec:	d1d6      	bne.n	801c29c <_svfiprintf_r+0x174>
 801c2ee:	89ab      	ldrh	r3, [r5, #12]
 801c2f0:	065b      	lsls	r3, r3, #25
 801c2f2:	f53f af2d 	bmi.w	801c150 <_svfiprintf_r+0x28>
 801c2f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c2f8:	b01d      	add	sp, #116	; 0x74
 801c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2fe:	ab03      	add	r3, sp, #12
 801c300:	462a      	mov	r2, r5
 801c302:	a904      	add	r1, sp, #16
 801c304:	4638      	mov	r0, r7
 801c306:	9300      	str	r3, [sp, #0]
 801c308:	4b04      	ldr	r3, [pc, #16]	; (801c31c <_svfiprintf_r+0x1f4>)
 801c30a:	f000 f9c1 	bl	801c690 <_printf_i>
 801c30e:	e7eb      	b.n	801c2e8 <_svfiprintf_r+0x1c0>
 801c310:	0801ff45 	.word	0x0801ff45
 801c314:	0801ff4f 	.word	0x0801ff4f
 801c318:	00000000 	.word	0x00000000
 801c31c:	0801c075 	.word	0x0801c075
 801c320:	0801ff4b 	.word	0x0801ff4b

0801c324 <__sfputc_r>:
 801c324:	6893      	ldr	r3, [r2, #8]
 801c326:	3b01      	subs	r3, #1
 801c328:	2b00      	cmp	r3, #0
 801c32a:	6093      	str	r3, [r2, #8]
 801c32c:	b410      	push	{r4}
 801c32e:	da08      	bge.n	801c342 <__sfputc_r+0x1e>
 801c330:	6994      	ldr	r4, [r2, #24]
 801c332:	42a3      	cmp	r3, r4
 801c334:	db01      	blt.n	801c33a <__sfputc_r+0x16>
 801c336:	290a      	cmp	r1, #10
 801c338:	d103      	bne.n	801c342 <__sfputc_r+0x1e>
 801c33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c33e:	f000 bb85 	b.w	801ca4c <__swbuf_r>
 801c342:	6813      	ldr	r3, [r2, #0]
 801c344:	1c58      	adds	r0, r3, #1
 801c346:	6010      	str	r0, [r2, #0]
 801c348:	4608      	mov	r0, r1
 801c34a:	7019      	strb	r1, [r3, #0]
 801c34c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c350:	4770      	bx	lr

0801c352 <__sfputs_r>:
 801c352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c354:	4606      	mov	r6, r0
 801c356:	460f      	mov	r7, r1
 801c358:	4614      	mov	r4, r2
 801c35a:	18d5      	adds	r5, r2, r3
 801c35c:	42ac      	cmp	r4, r5
 801c35e:	d101      	bne.n	801c364 <__sfputs_r+0x12>
 801c360:	2000      	movs	r0, #0
 801c362:	e007      	b.n	801c374 <__sfputs_r+0x22>
 801c364:	463a      	mov	r2, r7
 801c366:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c36a:	4630      	mov	r0, r6
 801c36c:	f7ff ffda 	bl	801c324 <__sfputc_r>
 801c370:	1c43      	adds	r3, r0, #1
 801c372:	d1f3      	bne.n	801c35c <__sfputs_r+0xa>
 801c374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c378 <_vfiprintf_r>:
 801c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c37c:	460d      	mov	r5, r1
 801c37e:	b09d      	sub	sp, #116	; 0x74
 801c380:	4614      	mov	r4, r2
 801c382:	4698      	mov	r8, r3
 801c384:	4606      	mov	r6, r0
 801c386:	b118      	cbz	r0, 801c390 <_vfiprintf_r+0x18>
 801c388:	6a03      	ldr	r3, [r0, #32]
 801c38a:	b90b      	cbnz	r3, 801c390 <_vfiprintf_r+0x18>
 801c38c:	f7ff fc54 	bl	801bc38 <__sinit>
 801c390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c392:	07d9      	lsls	r1, r3, #31
 801c394:	d405      	bmi.n	801c3a2 <_vfiprintf_r+0x2a>
 801c396:	89ab      	ldrh	r3, [r5, #12]
 801c398:	059a      	lsls	r2, r3, #22
 801c39a:	d402      	bmi.n	801c3a2 <_vfiprintf_r+0x2a>
 801c39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c39e:	f7ff fdf0 	bl	801bf82 <__retarget_lock_acquire_recursive>
 801c3a2:	89ab      	ldrh	r3, [r5, #12]
 801c3a4:	071b      	lsls	r3, r3, #28
 801c3a6:	d501      	bpl.n	801c3ac <_vfiprintf_r+0x34>
 801c3a8:	692b      	ldr	r3, [r5, #16]
 801c3aa:	b99b      	cbnz	r3, 801c3d4 <_vfiprintf_r+0x5c>
 801c3ac:	4629      	mov	r1, r5
 801c3ae:	4630      	mov	r0, r6
 801c3b0:	f000 fb8a 	bl	801cac8 <__swsetup_r>
 801c3b4:	b170      	cbz	r0, 801c3d4 <_vfiprintf_r+0x5c>
 801c3b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c3b8:	07dc      	lsls	r4, r3, #31
 801c3ba:	d504      	bpl.n	801c3c6 <_vfiprintf_r+0x4e>
 801c3bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c3c0:	b01d      	add	sp, #116	; 0x74
 801c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c6:	89ab      	ldrh	r3, [r5, #12]
 801c3c8:	0598      	lsls	r0, r3, #22
 801c3ca:	d4f7      	bmi.n	801c3bc <_vfiprintf_r+0x44>
 801c3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c3ce:	f7ff fdd9 	bl	801bf84 <__retarget_lock_release_recursive>
 801c3d2:	e7f3      	b.n	801c3bc <_vfiprintf_r+0x44>
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c3da:	f04f 0901 	mov.w	r9, #1
 801c3de:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801c598 <_vfiprintf_r+0x220>
 801c3e2:	9309      	str	r3, [sp, #36]	; 0x24
 801c3e4:	2320      	movs	r3, #32
 801c3e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c3ea:	2330      	movs	r3, #48	; 0x30
 801c3ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c3f0:	4623      	mov	r3, r4
 801c3f2:	469a      	mov	sl, r3
 801c3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c3f8:	b10a      	cbz	r2, 801c3fe <_vfiprintf_r+0x86>
 801c3fa:	2a25      	cmp	r2, #37	; 0x25
 801c3fc:	d1f9      	bne.n	801c3f2 <_vfiprintf_r+0x7a>
 801c3fe:	ebba 0b04 	subs.w	fp, sl, r4
 801c402:	d00b      	beq.n	801c41c <_vfiprintf_r+0xa4>
 801c404:	465b      	mov	r3, fp
 801c406:	4622      	mov	r2, r4
 801c408:	4629      	mov	r1, r5
 801c40a:	4630      	mov	r0, r6
 801c40c:	f7ff ffa1 	bl	801c352 <__sfputs_r>
 801c410:	3001      	adds	r0, #1
 801c412:	f000 80a9 	beq.w	801c568 <_vfiprintf_r+0x1f0>
 801c416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c418:	445a      	add	r2, fp
 801c41a:	9209      	str	r2, [sp, #36]	; 0x24
 801c41c:	f89a 3000 	ldrb.w	r3, [sl]
 801c420:	2b00      	cmp	r3, #0
 801c422:	f000 80a1 	beq.w	801c568 <_vfiprintf_r+0x1f0>
 801c426:	2300      	movs	r3, #0
 801c428:	f04f 32ff 	mov.w	r2, #4294967295
 801c42c:	f10a 0a01 	add.w	sl, sl, #1
 801c430:	9304      	str	r3, [sp, #16]
 801c432:	9307      	str	r3, [sp, #28]
 801c434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c438:	931a      	str	r3, [sp, #104]	; 0x68
 801c43a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c43e:	4654      	mov	r4, sl
 801c440:	2205      	movs	r2, #5
 801c442:	4855      	ldr	r0, [pc, #340]	; (801c598 <_vfiprintf_r+0x220>)
 801c444:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c448:	f000 fb96 	bl	801cb78 <memchr>
 801c44c:	9a04      	ldr	r2, [sp, #16]
 801c44e:	b9d8      	cbnz	r0, 801c488 <_vfiprintf_r+0x110>
 801c450:	06d1      	lsls	r1, r2, #27
 801c452:	bf44      	itt	mi
 801c454:	2320      	movmi	r3, #32
 801c456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c45a:	0713      	lsls	r3, r2, #28
 801c45c:	bf44      	itt	mi
 801c45e:	232b      	movmi	r3, #43	; 0x2b
 801c460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c464:	f89a 3000 	ldrb.w	r3, [sl]
 801c468:	2b2a      	cmp	r3, #42	; 0x2a
 801c46a:	d015      	beq.n	801c498 <_vfiprintf_r+0x120>
 801c46c:	9a07      	ldr	r2, [sp, #28]
 801c46e:	4654      	mov	r4, sl
 801c470:	2000      	movs	r0, #0
 801c472:	f04f 0c0a 	mov.w	ip, #10
 801c476:	4621      	mov	r1, r4
 801c478:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c47c:	3b30      	subs	r3, #48	; 0x30
 801c47e:	2b09      	cmp	r3, #9
 801c480:	d94d      	bls.n	801c51e <_vfiprintf_r+0x1a6>
 801c482:	b1b0      	cbz	r0, 801c4b2 <_vfiprintf_r+0x13a>
 801c484:	9207      	str	r2, [sp, #28]
 801c486:	e014      	b.n	801c4b2 <_vfiprintf_r+0x13a>
 801c488:	eba0 0308 	sub.w	r3, r0, r8
 801c48c:	46a2      	mov	sl, r4
 801c48e:	fa09 f303 	lsl.w	r3, r9, r3
 801c492:	4313      	orrs	r3, r2
 801c494:	9304      	str	r3, [sp, #16]
 801c496:	e7d2      	b.n	801c43e <_vfiprintf_r+0xc6>
 801c498:	9b03      	ldr	r3, [sp, #12]
 801c49a:	1d19      	adds	r1, r3, #4
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	9103      	str	r1, [sp, #12]
 801c4a2:	bfbb      	ittet	lt
 801c4a4:	425b      	neglt	r3, r3
 801c4a6:	f042 0202 	orrlt.w	r2, r2, #2
 801c4aa:	9307      	strge	r3, [sp, #28]
 801c4ac:	9307      	strlt	r3, [sp, #28]
 801c4ae:	bfb8      	it	lt
 801c4b0:	9204      	strlt	r2, [sp, #16]
 801c4b2:	7823      	ldrb	r3, [r4, #0]
 801c4b4:	2b2e      	cmp	r3, #46	; 0x2e
 801c4b6:	d10c      	bne.n	801c4d2 <_vfiprintf_r+0x15a>
 801c4b8:	7863      	ldrb	r3, [r4, #1]
 801c4ba:	2b2a      	cmp	r3, #42	; 0x2a
 801c4bc:	d134      	bne.n	801c528 <_vfiprintf_r+0x1b0>
 801c4be:	9b03      	ldr	r3, [sp, #12]
 801c4c0:	3402      	adds	r4, #2
 801c4c2:	1d1a      	adds	r2, r3, #4
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	9203      	str	r2, [sp, #12]
 801c4ca:	bfb8      	it	lt
 801c4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 801c4d0:	9305      	str	r3, [sp, #20]
 801c4d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c5a8 <_vfiprintf_r+0x230>
 801c4d6:	2203      	movs	r2, #3
 801c4d8:	7821      	ldrb	r1, [r4, #0]
 801c4da:	4650      	mov	r0, sl
 801c4dc:	f000 fb4c 	bl	801cb78 <memchr>
 801c4e0:	b138      	cbz	r0, 801c4f2 <_vfiprintf_r+0x17a>
 801c4e2:	eba0 000a 	sub.w	r0, r0, sl
 801c4e6:	2240      	movs	r2, #64	; 0x40
 801c4e8:	9b04      	ldr	r3, [sp, #16]
 801c4ea:	3401      	adds	r4, #1
 801c4ec:	4082      	lsls	r2, r0
 801c4ee:	4313      	orrs	r3, r2
 801c4f0:	9304      	str	r3, [sp, #16]
 801c4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c4f6:	2206      	movs	r2, #6
 801c4f8:	4828      	ldr	r0, [pc, #160]	; (801c59c <_vfiprintf_r+0x224>)
 801c4fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c4fe:	f000 fb3b 	bl	801cb78 <memchr>
 801c502:	2800      	cmp	r0, #0
 801c504:	d03f      	beq.n	801c586 <_vfiprintf_r+0x20e>
 801c506:	4b26      	ldr	r3, [pc, #152]	; (801c5a0 <_vfiprintf_r+0x228>)
 801c508:	bb1b      	cbnz	r3, 801c552 <_vfiprintf_r+0x1da>
 801c50a:	9b03      	ldr	r3, [sp, #12]
 801c50c:	3307      	adds	r3, #7
 801c50e:	f023 0307 	bic.w	r3, r3, #7
 801c512:	3308      	adds	r3, #8
 801c514:	9303      	str	r3, [sp, #12]
 801c516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c518:	443b      	add	r3, r7
 801c51a:	9309      	str	r3, [sp, #36]	; 0x24
 801c51c:	e768      	b.n	801c3f0 <_vfiprintf_r+0x78>
 801c51e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c522:	460c      	mov	r4, r1
 801c524:	2001      	movs	r0, #1
 801c526:	e7a6      	b.n	801c476 <_vfiprintf_r+0xfe>
 801c528:	2300      	movs	r3, #0
 801c52a:	3401      	adds	r4, #1
 801c52c:	f04f 0c0a 	mov.w	ip, #10
 801c530:	4619      	mov	r1, r3
 801c532:	9305      	str	r3, [sp, #20]
 801c534:	4620      	mov	r0, r4
 801c536:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c53a:	3a30      	subs	r2, #48	; 0x30
 801c53c:	2a09      	cmp	r2, #9
 801c53e:	d903      	bls.n	801c548 <_vfiprintf_r+0x1d0>
 801c540:	2b00      	cmp	r3, #0
 801c542:	d0c6      	beq.n	801c4d2 <_vfiprintf_r+0x15a>
 801c544:	9105      	str	r1, [sp, #20]
 801c546:	e7c4      	b.n	801c4d2 <_vfiprintf_r+0x15a>
 801c548:	fb0c 2101 	mla	r1, ip, r1, r2
 801c54c:	4604      	mov	r4, r0
 801c54e:	2301      	movs	r3, #1
 801c550:	e7f0      	b.n	801c534 <_vfiprintf_r+0x1bc>
 801c552:	ab03      	add	r3, sp, #12
 801c554:	462a      	mov	r2, r5
 801c556:	a904      	add	r1, sp, #16
 801c558:	4630      	mov	r0, r6
 801c55a:	9300      	str	r3, [sp, #0]
 801c55c:	4b11      	ldr	r3, [pc, #68]	; (801c5a4 <_vfiprintf_r+0x22c>)
 801c55e:	f3af 8000 	nop.w
 801c562:	4607      	mov	r7, r0
 801c564:	1c78      	adds	r0, r7, #1
 801c566:	d1d6      	bne.n	801c516 <_vfiprintf_r+0x19e>
 801c568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c56a:	07d9      	lsls	r1, r3, #31
 801c56c:	d405      	bmi.n	801c57a <_vfiprintf_r+0x202>
 801c56e:	89ab      	ldrh	r3, [r5, #12]
 801c570:	059a      	lsls	r2, r3, #22
 801c572:	d402      	bmi.n	801c57a <_vfiprintf_r+0x202>
 801c574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c576:	f7ff fd05 	bl	801bf84 <__retarget_lock_release_recursive>
 801c57a:	89ab      	ldrh	r3, [r5, #12]
 801c57c:	065b      	lsls	r3, r3, #25
 801c57e:	f53f af1d 	bmi.w	801c3bc <_vfiprintf_r+0x44>
 801c582:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c584:	e71c      	b.n	801c3c0 <_vfiprintf_r+0x48>
 801c586:	ab03      	add	r3, sp, #12
 801c588:	462a      	mov	r2, r5
 801c58a:	a904      	add	r1, sp, #16
 801c58c:	4630      	mov	r0, r6
 801c58e:	9300      	str	r3, [sp, #0]
 801c590:	4b04      	ldr	r3, [pc, #16]	; (801c5a4 <_vfiprintf_r+0x22c>)
 801c592:	f000 f87d 	bl	801c690 <_printf_i>
 801c596:	e7e4      	b.n	801c562 <_vfiprintf_r+0x1ea>
 801c598:	0801ff45 	.word	0x0801ff45
 801c59c:	0801ff4f 	.word	0x0801ff4f
 801c5a0:	00000000 	.word	0x00000000
 801c5a4:	0801c353 	.word	0x0801c353
 801c5a8:	0801ff4b 	.word	0x0801ff4b

0801c5ac <_printf_common>:
 801c5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c5b0:	4616      	mov	r6, r2
 801c5b2:	4699      	mov	r9, r3
 801c5b4:	688a      	ldr	r2, [r1, #8]
 801c5b6:	4607      	mov	r7, r0
 801c5b8:	690b      	ldr	r3, [r1, #16]
 801c5ba:	460c      	mov	r4, r1
 801c5bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c5c0:	4293      	cmp	r3, r2
 801c5c2:	bfb8      	it	lt
 801c5c4:	4613      	movlt	r3, r2
 801c5c6:	6033      	str	r3, [r6, #0]
 801c5c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c5cc:	b10a      	cbz	r2, 801c5d2 <_printf_common+0x26>
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	6033      	str	r3, [r6, #0]
 801c5d2:	6823      	ldr	r3, [r4, #0]
 801c5d4:	0699      	lsls	r1, r3, #26
 801c5d6:	bf42      	ittt	mi
 801c5d8:	6833      	ldrmi	r3, [r6, #0]
 801c5da:	3302      	addmi	r3, #2
 801c5dc:	6033      	strmi	r3, [r6, #0]
 801c5de:	6825      	ldr	r5, [r4, #0]
 801c5e0:	f015 0506 	ands.w	r5, r5, #6
 801c5e4:	d106      	bne.n	801c5f4 <_printf_common+0x48>
 801c5e6:	f104 0a19 	add.w	sl, r4, #25
 801c5ea:	68e3      	ldr	r3, [r4, #12]
 801c5ec:	6832      	ldr	r2, [r6, #0]
 801c5ee:	1a9b      	subs	r3, r3, r2
 801c5f0:	42ab      	cmp	r3, r5
 801c5f2:	dc2b      	bgt.n	801c64c <_printf_common+0xa0>
 801c5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c5f8:	1e13      	subs	r3, r2, #0
 801c5fa:	6822      	ldr	r2, [r4, #0]
 801c5fc:	bf18      	it	ne
 801c5fe:	2301      	movne	r3, #1
 801c600:	0692      	lsls	r2, r2, #26
 801c602:	d430      	bmi.n	801c666 <_printf_common+0xba>
 801c604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c608:	4649      	mov	r1, r9
 801c60a:	4638      	mov	r0, r7
 801c60c:	47c0      	blx	r8
 801c60e:	3001      	adds	r0, #1
 801c610:	d023      	beq.n	801c65a <_printf_common+0xae>
 801c612:	6823      	ldr	r3, [r4, #0]
 801c614:	341a      	adds	r4, #26
 801c616:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801c61a:	f003 0306 	and.w	r3, r3, #6
 801c61e:	2b04      	cmp	r3, #4
 801c620:	bf0a      	itet	eq
 801c622:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801c626:	2500      	movne	r5, #0
 801c628:	6833      	ldreq	r3, [r6, #0]
 801c62a:	f04f 0600 	mov.w	r6, #0
 801c62e:	bf08      	it	eq
 801c630:	1aed      	subeq	r5, r5, r3
 801c632:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801c636:	bf08      	it	eq
 801c638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c63c:	4293      	cmp	r3, r2
 801c63e:	bfc4      	itt	gt
 801c640:	1a9b      	subgt	r3, r3, r2
 801c642:	18ed      	addgt	r5, r5, r3
 801c644:	42b5      	cmp	r5, r6
 801c646:	d11a      	bne.n	801c67e <_printf_common+0xd2>
 801c648:	2000      	movs	r0, #0
 801c64a:	e008      	b.n	801c65e <_printf_common+0xb2>
 801c64c:	2301      	movs	r3, #1
 801c64e:	4652      	mov	r2, sl
 801c650:	4649      	mov	r1, r9
 801c652:	4638      	mov	r0, r7
 801c654:	47c0      	blx	r8
 801c656:	3001      	adds	r0, #1
 801c658:	d103      	bne.n	801c662 <_printf_common+0xb6>
 801c65a:	f04f 30ff 	mov.w	r0, #4294967295
 801c65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c662:	3501      	adds	r5, #1
 801c664:	e7c1      	b.n	801c5ea <_printf_common+0x3e>
 801c666:	18e1      	adds	r1, r4, r3
 801c668:	1c5a      	adds	r2, r3, #1
 801c66a:	2030      	movs	r0, #48	; 0x30
 801c66c:	3302      	adds	r3, #2
 801c66e:	4422      	add	r2, r4
 801c670:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c67c:	e7c2      	b.n	801c604 <_printf_common+0x58>
 801c67e:	2301      	movs	r3, #1
 801c680:	4622      	mov	r2, r4
 801c682:	4649      	mov	r1, r9
 801c684:	4638      	mov	r0, r7
 801c686:	47c0      	blx	r8
 801c688:	3001      	adds	r0, #1
 801c68a:	d0e6      	beq.n	801c65a <_printf_common+0xae>
 801c68c:	3601      	adds	r6, #1
 801c68e:	e7d9      	b.n	801c644 <_printf_common+0x98>

0801c690 <_printf_i>:
 801c690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c694:	7e0f      	ldrb	r7, [r1, #24]
 801c696:	4691      	mov	r9, r2
 801c698:	4680      	mov	r8, r0
 801c69a:	460c      	mov	r4, r1
 801c69c:	2f78      	cmp	r7, #120	; 0x78
 801c69e:	469a      	mov	sl, r3
 801c6a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c6a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c6a6:	d807      	bhi.n	801c6b8 <_printf_i+0x28>
 801c6a8:	2f62      	cmp	r7, #98	; 0x62
 801c6aa:	d80a      	bhi.n	801c6c2 <_printf_i+0x32>
 801c6ac:	2f00      	cmp	r7, #0
 801c6ae:	f000 80d3 	beq.w	801c858 <_printf_i+0x1c8>
 801c6b2:	2f58      	cmp	r7, #88	; 0x58
 801c6b4:	f000 80bf 	beq.w	801c836 <_printf_i+0x1a6>
 801c6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c6bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c6c0:	e03a      	b.n	801c738 <_printf_i+0xa8>
 801c6c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c6c6:	2b15      	cmp	r3, #21
 801c6c8:	d8f6      	bhi.n	801c6b8 <_printf_i+0x28>
 801c6ca:	a101      	add	r1, pc, #4	; (adr r1, 801c6d0 <_printf_i+0x40>)
 801c6cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c6d0:	0801c729 	.word	0x0801c729
 801c6d4:	0801c73d 	.word	0x0801c73d
 801c6d8:	0801c6b9 	.word	0x0801c6b9
 801c6dc:	0801c6b9 	.word	0x0801c6b9
 801c6e0:	0801c6b9 	.word	0x0801c6b9
 801c6e4:	0801c6b9 	.word	0x0801c6b9
 801c6e8:	0801c73d 	.word	0x0801c73d
 801c6ec:	0801c6b9 	.word	0x0801c6b9
 801c6f0:	0801c6b9 	.word	0x0801c6b9
 801c6f4:	0801c6b9 	.word	0x0801c6b9
 801c6f8:	0801c6b9 	.word	0x0801c6b9
 801c6fc:	0801c83f 	.word	0x0801c83f
 801c700:	0801c769 	.word	0x0801c769
 801c704:	0801c7fb 	.word	0x0801c7fb
 801c708:	0801c6b9 	.word	0x0801c6b9
 801c70c:	0801c6b9 	.word	0x0801c6b9
 801c710:	0801c861 	.word	0x0801c861
 801c714:	0801c6b9 	.word	0x0801c6b9
 801c718:	0801c769 	.word	0x0801c769
 801c71c:	0801c6b9 	.word	0x0801c6b9
 801c720:	0801c6b9 	.word	0x0801c6b9
 801c724:	0801c803 	.word	0x0801c803
 801c728:	682b      	ldr	r3, [r5, #0]
 801c72a:	1d1a      	adds	r2, r3, #4
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	602a      	str	r2, [r5, #0]
 801c730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c738:	2301      	movs	r3, #1
 801c73a:	e09e      	b.n	801c87a <_printf_i+0x1ea>
 801c73c:	6820      	ldr	r0, [r4, #0]
 801c73e:	682b      	ldr	r3, [r5, #0]
 801c740:	0607      	lsls	r7, r0, #24
 801c742:	f103 0104 	add.w	r1, r3, #4
 801c746:	6029      	str	r1, [r5, #0]
 801c748:	d501      	bpl.n	801c74e <_printf_i+0xbe>
 801c74a:	681e      	ldr	r6, [r3, #0]
 801c74c:	e003      	b.n	801c756 <_printf_i+0xc6>
 801c74e:	0646      	lsls	r6, r0, #25
 801c750:	d5fb      	bpl.n	801c74a <_printf_i+0xba>
 801c752:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c756:	2e00      	cmp	r6, #0
 801c758:	da03      	bge.n	801c762 <_printf_i+0xd2>
 801c75a:	232d      	movs	r3, #45	; 0x2d
 801c75c:	4276      	negs	r6, r6
 801c75e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c762:	4859      	ldr	r0, [pc, #356]	; (801c8c8 <_printf_i+0x238>)
 801c764:	230a      	movs	r3, #10
 801c766:	e012      	b.n	801c78e <_printf_i+0xfe>
 801c768:	682b      	ldr	r3, [r5, #0]
 801c76a:	6820      	ldr	r0, [r4, #0]
 801c76c:	1d19      	adds	r1, r3, #4
 801c76e:	6029      	str	r1, [r5, #0]
 801c770:	0605      	lsls	r5, r0, #24
 801c772:	d501      	bpl.n	801c778 <_printf_i+0xe8>
 801c774:	681e      	ldr	r6, [r3, #0]
 801c776:	e002      	b.n	801c77e <_printf_i+0xee>
 801c778:	0641      	lsls	r1, r0, #25
 801c77a:	d5fb      	bpl.n	801c774 <_printf_i+0xe4>
 801c77c:	881e      	ldrh	r6, [r3, #0]
 801c77e:	2f6f      	cmp	r7, #111	; 0x6f
 801c780:	4851      	ldr	r0, [pc, #324]	; (801c8c8 <_printf_i+0x238>)
 801c782:	bf0c      	ite	eq
 801c784:	2308      	moveq	r3, #8
 801c786:	230a      	movne	r3, #10
 801c788:	2100      	movs	r1, #0
 801c78a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c78e:	6865      	ldr	r5, [r4, #4]
 801c790:	2d00      	cmp	r5, #0
 801c792:	60a5      	str	r5, [r4, #8]
 801c794:	bfa2      	ittt	ge
 801c796:	6821      	ldrge	r1, [r4, #0]
 801c798:	f021 0104 	bicge.w	r1, r1, #4
 801c79c:	6021      	strge	r1, [r4, #0]
 801c79e:	b90e      	cbnz	r6, 801c7a4 <_printf_i+0x114>
 801c7a0:	2d00      	cmp	r5, #0
 801c7a2:	d04a      	beq.n	801c83a <_printf_i+0x1aa>
 801c7a4:	4615      	mov	r5, r2
 801c7a6:	fbb6 f1f3 	udiv	r1, r6, r3
 801c7aa:	fb03 6711 	mls	r7, r3, r1, r6
 801c7ae:	5dc7      	ldrb	r7, [r0, r7]
 801c7b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c7b4:	4637      	mov	r7, r6
 801c7b6:	460e      	mov	r6, r1
 801c7b8:	42bb      	cmp	r3, r7
 801c7ba:	d9f4      	bls.n	801c7a6 <_printf_i+0x116>
 801c7bc:	2b08      	cmp	r3, #8
 801c7be:	d10b      	bne.n	801c7d8 <_printf_i+0x148>
 801c7c0:	6823      	ldr	r3, [r4, #0]
 801c7c2:	07de      	lsls	r6, r3, #31
 801c7c4:	d508      	bpl.n	801c7d8 <_printf_i+0x148>
 801c7c6:	6923      	ldr	r3, [r4, #16]
 801c7c8:	6861      	ldr	r1, [r4, #4]
 801c7ca:	4299      	cmp	r1, r3
 801c7cc:	bfde      	ittt	le
 801c7ce:	2330      	movle	r3, #48	; 0x30
 801c7d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c7d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c7d8:	1b52      	subs	r2, r2, r5
 801c7da:	6122      	str	r2, [r4, #16]
 801c7dc:	464b      	mov	r3, r9
 801c7de:	aa03      	add	r2, sp, #12
 801c7e0:	4621      	mov	r1, r4
 801c7e2:	4640      	mov	r0, r8
 801c7e4:	f8cd a000 	str.w	sl, [sp]
 801c7e8:	f7ff fee0 	bl	801c5ac <_printf_common>
 801c7ec:	3001      	adds	r0, #1
 801c7ee:	d149      	bne.n	801c884 <_printf_i+0x1f4>
 801c7f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c7f4:	b004      	add	sp, #16
 801c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7fa:	6823      	ldr	r3, [r4, #0]
 801c7fc:	f043 0320 	orr.w	r3, r3, #32
 801c800:	6023      	str	r3, [r4, #0]
 801c802:	2778      	movs	r7, #120	; 0x78
 801c804:	4831      	ldr	r0, [pc, #196]	; (801c8cc <_printf_i+0x23c>)
 801c806:	6823      	ldr	r3, [r4, #0]
 801c808:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c80c:	061f      	lsls	r7, r3, #24
 801c80e:	6829      	ldr	r1, [r5, #0]
 801c810:	f851 6b04 	ldr.w	r6, [r1], #4
 801c814:	d402      	bmi.n	801c81c <_printf_i+0x18c>
 801c816:	065f      	lsls	r7, r3, #25
 801c818:	bf48      	it	mi
 801c81a:	b2b6      	uxthmi	r6, r6
 801c81c:	07df      	lsls	r7, r3, #31
 801c81e:	6029      	str	r1, [r5, #0]
 801c820:	bf44      	itt	mi
 801c822:	f043 0320 	orrmi.w	r3, r3, #32
 801c826:	6023      	strmi	r3, [r4, #0]
 801c828:	b91e      	cbnz	r6, 801c832 <_printf_i+0x1a2>
 801c82a:	6823      	ldr	r3, [r4, #0]
 801c82c:	f023 0320 	bic.w	r3, r3, #32
 801c830:	6023      	str	r3, [r4, #0]
 801c832:	2310      	movs	r3, #16
 801c834:	e7a8      	b.n	801c788 <_printf_i+0xf8>
 801c836:	4824      	ldr	r0, [pc, #144]	; (801c8c8 <_printf_i+0x238>)
 801c838:	e7e5      	b.n	801c806 <_printf_i+0x176>
 801c83a:	4615      	mov	r5, r2
 801c83c:	e7be      	b.n	801c7bc <_printf_i+0x12c>
 801c83e:	682b      	ldr	r3, [r5, #0]
 801c840:	6826      	ldr	r6, [r4, #0]
 801c842:	1d18      	adds	r0, r3, #4
 801c844:	6961      	ldr	r1, [r4, #20]
 801c846:	6028      	str	r0, [r5, #0]
 801c848:	0635      	lsls	r5, r6, #24
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	d501      	bpl.n	801c852 <_printf_i+0x1c2>
 801c84e:	6019      	str	r1, [r3, #0]
 801c850:	e002      	b.n	801c858 <_printf_i+0x1c8>
 801c852:	0670      	lsls	r0, r6, #25
 801c854:	d5fb      	bpl.n	801c84e <_printf_i+0x1be>
 801c856:	8019      	strh	r1, [r3, #0]
 801c858:	2300      	movs	r3, #0
 801c85a:	4615      	mov	r5, r2
 801c85c:	6123      	str	r3, [r4, #16]
 801c85e:	e7bd      	b.n	801c7dc <_printf_i+0x14c>
 801c860:	682b      	ldr	r3, [r5, #0]
 801c862:	2100      	movs	r1, #0
 801c864:	1d1a      	adds	r2, r3, #4
 801c866:	602a      	str	r2, [r5, #0]
 801c868:	681d      	ldr	r5, [r3, #0]
 801c86a:	6862      	ldr	r2, [r4, #4]
 801c86c:	4628      	mov	r0, r5
 801c86e:	f000 f983 	bl	801cb78 <memchr>
 801c872:	b108      	cbz	r0, 801c878 <_printf_i+0x1e8>
 801c874:	1b40      	subs	r0, r0, r5
 801c876:	6060      	str	r0, [r4, #4]
 801c878:	6863      	ldr	r3, [r4, #4]
 801c87a:	6123      	str	r3, [r4, #16]
 801c87c:	2300      	movs	r3, #0
 801c87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c882:	e7ab      	b.n	801c7dc <_printf_i+0x14c>
 801c884:	6923      	ldr	r3, [r4, #16]
 801c886:	462a      	mov	r2, r5
 801c888:	4649      	mov	r1, r9
 801c88a:	4640      	mov	r0, r8
 801c88c:	47d0      	blx	sl
 801c88e:	3001      	adds	r0, #1
 801c890:	d0ae      	beq.n	801c7f0 <_printf_i+0x160>
 801c892:	6823      	ldr	r3, [r4, #0]
 801c894:	079b      	lsls	r3, r3, #30
 801c896:	d413      	bmi.n	801c8c0 <_printf_i+0x230>
 801c898:	68e0      	ldr	r0, [r4, #12]
 801c89a:	9b03      	ldr	r3, [sp, #12]
 801c89c:	4298      	cmp	r0, r3
 801c89e:	bfb8      	it	lt
 801c8a0:	4618      	movlt	r0, r3
 801c8a2:	e7a7      	b.n	801c7f4 <_printf_i+0x164>
 801c8a4:	2301      	movs	r3, #1
 801c8a6:	4632      	mov	r2, r6
 801c8a8:	4649      	mov	r1, r9
 801c8aa:	4640      	mov	r0, r8
 801c8ac:	47d0      	blx	sl
 801c8ae:	3001      	adds	r0, #1
 801c8b0:	d09e      	beq.n	801c7f0 <_printf_i+0x160>
 801c8b2:	3501      	adds	r5, #1
 801c8b4:	68e3      	ldr	r3, [r4, #12]
 801c8b6:	9903      	ldr	r1, [sp, #12]
 801c8b8:	1a5b      	subs	r3, r3, r1
 801c8ba:	42ab      	cmp	r3, r5
 801c8bc:	dcf2      	bgt.n	801c8a4 <_printf_i+0x214>
 801c8be:	e7eb      	b.n	801c898 <_printf_i+0x208>
 801c8c0:	2500      	movs	r5, #0
 801c8c2:	f104 0619 	add.w	r6, r4, #25
 801c8c6:	e7f5      	b.n	801c8b4 <_printf_i+0x224>
 801c8c8:	0801ff56 	.word	0x0801ff56
 801c8cc:	0801ff67 	.word	0x0801ff67

0801c8d0 <__sflush_r>:
 801c8d0:	898a      	ldrh	r2, [r1, #12]
 801c8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8d6:	4605      	mov	r5, r0
 801c8d8:	0710      	lsls	r0, r2, #28
 801c8da:	460c      	mov	r4, r1
 801c8dc:	d458      	bmi.n	801c990 <__sflush_r+0xc0>
 801c8de:	684b      	ldr	r3, [r1, #4]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	dc05      	bgt.n	801c8f0 <__sflush_r+0x20>
 801c8e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	dc02      	bgt.n	801c8f0 <__sflush_r+0x20>
 801c8ea:	2000      	movs	r0, #0
 801c8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c8f2:	2e00      	cmp	r6, #0
 801c8f4:	d0f9      	beq.n	801c8ea <__sflush_r+0x1a>
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c8fc:	682f      	ldr	r7, [r5, #0]
 801c8fe:	6a21      	ldr	r1, [r4, #32]
 801c900:	602b      	str	r3, [r5, #0]
 801c902:	d032      	beq.n	801c96a <__sflush_r+0x9a>
 801c904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c906:	89a3      	ldrh	r3, [r4, #12]
 801c908:	075a      	lsls	r2, r3, #29
 801c90a:	d505      	bpl.n	801c918 <__sflush_r+0x48>
 801c90c:	6863      	ldr	r3, [r4, #4]
 801c90e:	1ac0      	subs	r0, r0, r3
 801c910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c912:	b10b      	cbz	r3, 801c918 <__sflush_r+0x48>
 801c914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c916:	1ac0      	subs	r0, r0, r3
 801c918:	2300      	movs	r3, #0
 801c91a:	4602      	mov	r2, r0
 801c91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c91e:	4628      	mov	r0, r5
 801c920:	6a21      	ldr	r1, [r4, #32]
 801c922:	47b0      	blx	r6
 801c924:	1c43      	adds	r3, r0, #1
 801c926:	89a3      	ldrh	r3, [r4, #12]
 801c928:	d106      	bne.n	801c938 <__sflush_r+0x68>
 801c92a:	6829      	ldr	r1, [r5, #0]
 801c92c:	291d      	cmp	r1, #29
 801c92e:	d82b      	bhi.n	801c988 <__sflush_r+0xb8>
 801c930:	4a28      	ldr	r2, [pc, #160]	; (801c9d4 <__sflush_r+0x104>)
 801c932:	410a      	asrs	r2, r1
 801c934:	07d6      	lsls	r6, r2, #31
 801c936:	d427      	bmi.n	801c988 <__sflush_r+0xb8>
 801c938:	2200      	movs	r2, #0
 801c93a:	04d9      	lsls	r1, r3, #19
 801c93c:	6062      	str	r2, [r4, #4]
 801c93e:	6922      	ldr	r2, [r4, #16]
 801c940:	6022      	str	r2, [r4, #0]
 801c942:	d504      	bpl.n	801c94e <__sflush_r+0x7e>
 801c944:	1c42      	adds	r2, r0, #1
 801c946:	d101      	bne.n	801c94c <__sflush_r+0x7c>
 801c948:	682b      	ldr	r3, [r5, #0]
 801c94a:	b903      	cbnz	r3, 801c94e <__sflush_r+0x7e>
 801c94c:	6560      	str	r0, [r4, #84]	; 0x54
 801c94e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c950:	602f      	str	r7, [r5, #0]
 801c952:	2900      	cmp	r1, #0
 801c954:	d0c9      	beq.n	801c8ea <__sflush_r+0x1a>
 801c956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c95a:	4299      	cmp	r1, r3
 801c95c:	d002      	beq.n	801c964 <__sflush_r+0x94>
 801c95e:	4628      	mov	r0, r5
 801c960:	f7ff fb3c 	bl	801bfdc <_free_r>
 801c964:	2000      	movs	r0, #0
 801c966:	6360      	str	r0, [r4, #52]	; 0x34
 801c968:	e7c0      	b.n	801c8ec <__sflush_r+0x1c>
 801c96a:	2301      	movs	r3, #1
 801c96c:	4628      	mov	r0, r5
 801c96e:	47b0      	blx	r6
 801c970:	1c41      	adds	r1, r0, #1
 801c972:	d1c8      	bne.n	801c906 <__sflush_r+0x36>
 801c974:	682b      	ldr	r3, [r5, #0]
 801c976:	2b00      	cmp	r3, #0
 801c978:	d0c5      	beq.n	801c906 <__sflush_r+0x36>
 801c97a:	2b1d      	cmp	r3, #29
 801c97c:	d001      	beq.n	801c982 <__sflush_r+0xb2>
 801c97e:	2b16      	cmp	r3, #22
 801c980:	d101      	bne.n	801c986 <__sflush_r+0xb6>
 801c982:	602f      	str	r7, [r5, #0]
 801c984:	e7b1      	b.n	801c8ea <__sflush_r+0x1a>
 801c986:	89a3      	ldrh	r3, [r4, #12]
 801c988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c98c:	81a3      	strh	r3, [r4, #12]
 801c98e:	e7ad      	b.n	801c8ec <__sflush_r+0x1c>
 801c990:	690f      	ldr	r7, [r1, #16]
 801c992:	2f00      	cmp	r7, #0
 801c994:	d0a9      	beq.n	801c8ea <__sflush_r+0x1a>
 801c996:	0793      	lsls	r3, r2, #30
 801c998:	680e      	ldr	r6, [r1, #0]
 801c99a:	600f      	str	r7, [r1, #0]
 801c99c:	bf0c      	ite	eq
 801c99e:	694b      	ldreq	r3, [r1, #20]
 801c9a0:	2300      	movne	r3, #0
 801c9a2:	eba6 0807 	sub.w	r8, r6, r7
 801c9a6:	608b      	str	r3, [r1, #8]
 801c9a8:	f1b8 0f00 	cmp.w	r8, #0
 801c9ac:	dd9d      	ble.n	801c8ea <__sflush_r+0x1a>
 801c9ae:	4643      	mov	r3, r8
 801c9b0:	463a      	mov	r2, r7
 801c9b2:	6a21      	ldr	r1, [r4, #32]
 801c9b4:	4628      	mov	r0, r5
 801c9b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c9b8:	47b0      	blx	r6
 801c9ba:	2800      	cmp	r0, #0
 801c9bc:	dc06      	bgt.n	801c9cc <__sflush_r+0xfc>
 801c9be:	89a3      	ldrh	r3, [r4, #12]
 801c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 801c9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c9c8:	81a3      	strh	r3, [r4, #12]
 801c9ca:	e78f      	b.n	801c8ec <__sflush_r+0x1c>
 801c9cc:	4407      	add	r7, r0
 801c9ce:	eba8 0800 	sub.w	r8, r8, r0
 801c9d2:	e7e9      	b.n	801c9a8 <__sflush_r+0xd8>
 801c9d4:	dfbffffe 	.word	0xdfbffffe

0801c9d8 <_fflush_r>:
 801c9d8:	b538      	push	{r3, r4, r5, lr}
 801c9da:	690b      	ldr	r3, [r1, #16]
 801c9dc:	4605      	mov	r5, r0
 801c9de:	460c      	mov	r4, r1
 801c9e0:	b913      	cbnz	r3, 801c9e8 <_fflush_r+0x10>
 801c9e2:	2500      	movs	r5, #0
 801c9e4:	4628      	mov	r0, r5
 801c9e6:	bd38      	pop	{r3, r4, r5, pc}
 801c9e8:	b118      	cbz	r0, 801c9f2 <_fflush_r+0x1a>
 801c9ea:	6a03      	ldr	r3, [r0, #32]
 801c9ec:	b90b      	cbnz	r3, 801c9f2 <_fflush_r+0x1a>
 801c9ee:	f7ff f923 	bl	801bc38 <__sinit>
 801c9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d0f3      	beq.n	801c9e2 <_fflush_r+0xa>
 801c9fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c9fc:	07d0      	lsls	r0, r2, #31
 801c9fe:	d404      	bmi.n	801ca0a <_fflush_r+0x32>
 801ca00:	0599      	lsls	r1, r3, #22
 801ca02:	d402      	bmi.n	801ca0a <_fflush_r+0x32>
 801ca04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca06:	f7ff fabc 	bl	801bf82 <__retarget_lock_acquire_recursive>
 801ca0a:	4628      	mov	r0, r5
 801ca0c:	4621      	mov	r1, r4
 801ca0e:	f7ff ff5f 	bl	801c8d0 <__sflush_r>
 801ca12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca14:	4605      	mov	r5, r0
 801ca16:	07da      	lsls	r2, r3, #31
 801ca18:	d4e4      	bmi.n	801c9e4 <_fflush_r+0xc>
 801ca1a:	89a3      	ldrh	r3, [r4, #12]
 801ca1c:	059b      	lsls	r3, r3, #22
 801ca1e:	d4e1      	bmi.n	801c9e4 <_fflush_r+0xc>
 801ca20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca22:	f7ff faaf 	bl	801bf84 <__retarget_lock_release_recursive>
 801ca26:	e7dd      	b.n	801c9e4 <_fflush_r+0xc>

0801ca28 <fiprintf>:
 801ca28:	b40e      	push	{r1, r2, r3}
 801ca2a:	b503      	push	{r0, r1, lr}
 801ca2c:	ab03      	add	r3, sp, #12
 801ca2e:	4601      	mov	r1, r0
 801ca30:	4805      	ldr	r0, [pc, #20]	; (801ca48 <fiprintf+0x20>)
 801ca32:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca36:	6800      	ldr	r0, [r0, #0]
 801ca38:	9301      	str	r3, [sp, #4]
 801ca3a:	f7ff fc9d 	bl	801c378 <_vfiprintf_r>
 801ca3e:	b002      	add	sp, #8
 801ca40:	f85d eb04 	ldr.w	lr, [sp], #4
 801ca44:	b003      	add	sp, #12
 801ca46:	4770      	bx	lr
 801ca48:	200000dc 	.word	0x200000dc

0801ca4c <__swbuf_r>:
 801ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca4e:	460e      	mov	r6, r1
 801ca50:	4614      	mov	r4, r2
 801ca52:	4605      	mov	r5, r0
 801ca54:	b118      	cbz	r0, 801ca5e <__swbuf_r+0x12>
 801ca56:	6a03      	ldr	r3, [r0, #32]
 801ca58:	b90b      	cbnz	r3, 801ca5e <__swbuf_r+0x12>
 801ca5a:	f7ff f8ed 	bl	801bc38 <__sinit>
 801ca5e:	69a3      	ldr	r3, [r4, #24]
 801ca60:	60a3      	str	r3, [r4, #8]
 801ca62:	89a3      	ldrh	r3, [r4, #12]
 801ca64:	071a      	lsls	r2, r3, #28
 801ca66:	d525      	bpl.n	801cab4 <__swbuf_r+0x68>
 801ca68:	6923      	ldr	r3, [r4, #16]
 801ca6a:	b31b      	cbz	r3, 801cab4 <__swbuf_r+0x68>
 801ca6c:	6823      	ldr	r3, [r4, #0]
 801ca6e:	b2f6      	uxtb	r6, r6
 801ca70:	6922      	ldr	r2, [r4, #16]
 801ca72:	4637      	mov	r7, r6
 801ca74:	1a98      	subs	r0, r3, r2
 801ca76:	6963      	ldr	r3, [r4, #20]
 801ca78:	4283      	cmp	r3, r0
 801ca7a:	dc04      	bgt.n	801ca86 <__swbuf_r+0x3a>
 801ca7c:	4621      	mov	r1, r4
 801ca7e:	4628      	mov	r0, r5
 801ca80:	f7ff ffaa 	bl	801c9d8 <_fflush_r>
 801ca84:	b9e0      	cbnz	r0, 801cac0 <__swbuf_r+0x74>
 801ca86:	68a3      	ldr	r3, [r4, #8]
 801ca88:	3b01      	subs	r3, #1
 801ca8a:	60a3      	str	r3, [r4, #8]
 801ca8c:	6823      	ldr	r3, [r4, #0]
 801ca8e:	1c5a      	adds	r2, r3, #1
 801ca90:	6022      	str	r2, [r4, #0]
 801ca92:	701e      	strb	r6, [r3, #0]
 801ca94:	1c43      	adds	r3, r0, #1
 801ca96:	6962      	ldr	r2, [r4, #20]
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	d004      	beq.n	801caa6 <__swbuf_r+0x5a>
 801ca9c:	89a3      	ldrh	r3, [r4, #12]
 801ca9e:	07db      	lsls	r3, r3, #31
 801caa0:	d506      	bpl.n	801cab0 <__swbuf_r+0x64>
 801caa2:	2e0a      	cmp	r6, #10
 801caa4:	d104      	bne.n	801cab0 <__swbuf_r+0x64>
 801caa6:	4621      	mov	r1, r4
 801caa8:	4628      	mov	r0, r5
 801caaa:	f7ff ff95 	bl	801c9d8 <_fflush_r>
 801caae:	b938      	cbnz	r0, 801cac0 <__swbuf_r+0x74>
 801cab0:	4638      	mov	r0, r7
 801cab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cab4:	4621      	mov	r1, r4
 801cab6:	4628      	mov	r0, r5
 801cab8:	f000 f806 	bl	801cac8 <__swsetup_r>
 801cabc:	2800      	cmp	r0, #0
 801cabe:	d0d5      	beq.n	801ca6c <__swbuf_r+0x20>
 801cac0:	f04f 37ff 	mov.w	r7, #4294967295
 801cac4:	e7f4      	b.n	801cab0 <__swbuf_r+0x64>
	...

0801cac8 <__swsetup_r>:
 801cac8:	b538      	push	{r3, r4, r5, lr}
 801caca:	4b2a      	ldr	r3, [pc, #168]	; (801cb74 <__swsetup_r+0xac>)
 801cacc:	4605      	mov	r5, r0
 801cace:	460c      	mov	r4, r1
 801cad0:	6818      	ldr	r0, [r3, #0]
 801cad2:	b118      	cbz	r0, 801cadc <__swsetup_r+0x14>
 801cad4:	6a03      	ldr	r3, [r0, #32]
 801cad6:	b90b      	cbnz	r3, 801cadc <__swsetup_r+0x14>
 801cad8:	f7ff f8ae 	bl	801bc38 <__sinit>
 801cadc:	89a3      	ldrh	r3, [r4, #12]
 801cade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cae2:	0718      	lsls	r0, r3, #28
 801cae4:	d422      	bmi.n	801cb2c <__swsetup_r+0x64>
 801cae6:	06d9      	lsls	r1, r3, #27
 801cae8:	d407      	bmi.n	801cafa <__swsetup_r+0x32>
 801caea:	2309      	movs	r3, #9
 801caec:	602b      	str	r3, [r5, #0]
 801caee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801caf2:	f04f 30ff 	mov.w	r0, #4294967295
 801caf6:	81a3      	strh	r3, [r4, #12]
 801caf8:	e034      	b.n	801cb64 <__swsetup_r+0x9c>
 801cafa:	0758      	lsls	r0, r3, #29
 801cafc:	d512      	bpl.n	801cb24 <__swsetup_r+0x5c>
 801cafe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cb00:	b141      	cbz	r1, 801cb14 <__swsetup_r+0x4c>
 801cb02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cb06:	4299      	cmp	r1, r3
 801cb08:	d002      	beq.n	801cb10 <__swsetup_r+0x48>
 801cb0a:	4628      	mov	r0, r5
 801cb0c:	f7ff fa66 	bl	801bfdc <_free_r>
 801cb10:	2300      	movs	r3, #0
 801cb12:	6363      	str	r3, [r4, #52]	; 0x34
 801cb14:	89a3      	ldrh	r3, [r4, #12]
 801cb16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cb1a:	81a3      	strh	r3, [r4, #12]
 801cb1c:	2300      	movs	r3, #0
 801cb1e:	6063      	str	r3, [r4, #4]
 801cb20:	6923      	ldr	r3, [r4, #16]
 801cb22:	6023      	str	r3, [r4, #0]
 801cb24:	89a3      	ldrh	r3, [r4, #12]
 801cb26:	f043 0308 	orr.w	r3, r3, #8
 801cb2a:	81a3      	strh	r3, [r4, #12]
 801cb2c:	6923      	ldr	r3, [r4, #16]
 801cb2e:	b94b      	cbnz	r3, 801cb44 <__swsetup_r+0x7c>
 801cb30:	89a3      	ldrh	r3, [r4, #12]
 801cb32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cb36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb3a:	d003      	beq.n	801cb44 <__swsetup_r+0x7c>
 801cb3c:	4621      	mov	r1, r4
 801cb3e:	4628      	mov	r0, r5
 801cb40:	f000 f883 	bl	801cc4a <__smakebuf_r>
 801cb44:	89a0      	ldrh	r0, [r4, #12]
 801cb46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cb4a:	f010 0301 	ands.w	r3, r0, #1
 801cb4e:	d00a      	beq.n	801cb66 <__swsetup_r+0x9e>
 801cb50:	2300      	movs	r3, #0
 801cb52:	60a3      	str	r3, [r4, #8]
 801cb54:	6963      	ldr	r3, [r4, #20]
 801cb56:	425b      	negs	r3, r3
 801cb58:	61a3      	str	r3, [r4, #24]
 801cb5a:	6923      	ldr	r3, [r4, #16]
 801cb5c:	b943      	cbnz	r3, 801cb70 <__swsetup_r+0xa8>
 801cb5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cb62:	d1c4      	bne.n	801caee <__swsetup_r+0x26>
 801cb64:	bd38      	pop	{r3, r4, r5, pc}
 801cb66:	0781      	lsls	r1, r0, #30
 801cb68:	bf58      	it	pl
 801cb6a:	6963      	ldrpl	r3, [r4, #20]
 801cb6c:	60a3      	str	r3, [r4, #8]
 801cb6e:	e7f4      	b.n	801cb5a <__swsetup_r+0x92>
 801cb70:	2000      	movs	r0, #0
 801cb72:	e7f7      	b.n	801cb64 <__swsetup_r+0x9c>
 801cb74:	200000dc 	.word	0x200000dc

0801cb78 <memchr>:
 801cb78:	b2c9      	uxtb	r1, r1
 801cb7a:	4402      	add	r2, r0
 801cb7c:	b510      	push	{r4, lr}
 801cb7e:	4290      	cmp	r0, r2
 801cb80:	4603      	mov	r3, r0
 801cb82:	d101      	bne.n	801cb88 <memchr+0x10>
 801cb84:	2300      	movs	r3, #0
 801cb86:	e003      	b.n	801cb90 <memchr+0x18>
 801cb88:	781c      	ldrb	r4, [r3, #0]
 801cb8a:	3001      	adds	r0, #1
 801cb8c:	428c      	cmp	r4, r1
 801cb8e:	d1f6      	bne.n	801cb7e <memchr+0x6>
 801cb90:	4618      	mov	r0, r3
 801cb92:	bd10      	pop	{r4, pc}

0801cb94 <abort>:
 801cb94:	2006      	movs	r0, #6
 801cb96:	b508      	push	{r3, lr}
 801cb98:	f000 f8bc 	bl	801cd14 <raise>
 801cb9c:	2001      	movs	r0, #1
 801cb9e:	f7e4 fa09 	bl	8000fb4 <_exit>

0801cba2 <_realloc_r>:
 801cba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cba6:	4680      	mov	r8, r0
 801cba8:	4614      	mov	r4, r2
 801cbaa:	460e      	mov	r6, r1
 801cbac:	b921      	cbnz	r1, 801cbb8 <_realloc_r+0x16>
 801cbae:	4611      	mov	r1, r2
 801cbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cbb4:	f7fe beea 	b.w	801b98c <_malloc_r>
 801cbb8:	b92a      	cbnz	r2, 801cbc6 <_realloc_r+0x24>
 801cbba:	4625      	mov	r5, r4
 801cbbc:	f7ff fa0e 	bl	801bfdc <_free_r>
 801cbc0:	4628      	mov	r0, r5
 801cbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbc6:	f000 f8e3 	bl	801cd90 <_malloc_usable_size_r>
 801cbca:	4284      	cmp	r4, r0
 801cbcc:	4607      	mov	r7, r0
 801cbce:	d802      	bhi.n	801cbd6 <_realloc_r+0x34>
 801cbd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cbd4:	d812      	bhi.n	801cbfc <_realloc_r+0x5a>
 801cbd6:	4621      	mov	r1, r4
 801cbd8:	4640      	mov	r0, r8
 801cbda:	f7fe fed7 	bl	801b98c <_malloc_r>
 801cbde:	4605      	mov	r5, r0
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	d0ed      	beq.n	801cbc0 <_realloc_r+0x1e>
 801cbe4:	42bc      	cmp	r4, r7
 801cbe6:	4622      	mov	r2, r4
 801cbe8:	4631      	mov	r1, r6
 801cbea:	bf28      	it	cs
 801cbec:	463a      	movcs	r2, r7
 801cbee:	f7ff f9ca 	bl	801bf86 <memcpy>
 801cbf2:	4631      	mov	r1, r6
 801cbf4:	4640      	mov	r0, r8
 801cbf6:	f7ff f9f1 	bl	801bfdc <_free_r>
 801cbfa:	e7e1      	b.n	801cbc0 <_realloc_r+0x1e>
 801cbfc:	4635      	mov	r5, r6
 801cbfe:	e7df      	b.n	801cbc0 <_realloc_r+0x1e>

0801cc00 <__swhatbuf_r>:
 801cc00:	b570      	push	{r4, r5, r6, lr}
 801cc02:	460c      	mov	r4, r1
 801cc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc08:	b096      	sub	sp, #88	; 0x58
 801cc0a:	4615      	mov	r5, r2
 801cc0c:	2900      	cmp	r1, #0
 801cc0e:	461e      	mov	r6, r3
 801cc10:	da0c      	bge.n	801cc2c <__swhatbuf_r+0x2c>
 801cc12:	89a3      	ldrh	r3, [r4, #12]
 801cc14:	2100      	movs	r1, #0
 801cc16:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cc1a:	bf0c      	ite	eq
 801cc1c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cc20:	2340      	movne	r3, #64	; 0x40
 801cc22:	2000      	movs	r0, #0
 801cc24:	6031      	str	r1, [r6, #0]
 801cc26:	602b      	str	r3, [r5, #0]
 801cc28:	b016      	add	sp, #88	; 0x58
 801cc2a:	bd70      	pop	{r4, r5, r6, pc}
 801cc2c:	466a      	mov	r2, sp
 801cc2e:	f000 f879 	bl	801cd24 <_fstat_r>
 801cc32:	2800      	cmp	r0, #0
 801cc34:	dbed      	blt.n	801cc12 <__swhatbuf_r+0x12>
 801cc36:	9901      	ldr	r1, [sp, #4]
 801cc38:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cc3c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cc40:	4259      	negs	r1, r3
 801cc42:	4159      	adcs	r1, r3
 801cc44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc48:	e7eb      	b.n	801cc22 <__swhatbuf_r+0x22>

0801cc4a <__smakebuf_r>:
 801cc4a:	898b      	ldrh	r3, [r1, #12]
 801cc4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc4e:	079d      	lsls	r5, r3, #30
 801cc50:	4606      	mov	r6, r0
 801cc52:	460c      	mov	r4, r1
 801cc54:	d507      	bpl.n	801cc66 <__smakebuf_r+0x1c>
 801cc56:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cc5a:	6023      	str	r3, [r4, #0]
 801cc5c:	6123      	str	r3, [r4, #16]
 801cc5e:	2301      	movs	r3, #1
 801cc60:	6163      	str	r3, [r4, #20]
 801cc62:	b002      	add	sp, #8
 801cc64:	bd70      	pop	{r4, r5, r6, pc}
 801cc66:	ab01      	add	r3, sp, #4
 801cc68:	466a      	mov	r2, sp
 801cc6a:	f7ff ffc9 	bl	801cc00 <__swhatbuf_r>
 801cc6e:	9900      	ldr	r1, [sp, #0]
 801cc70:	4605      	mov	r5, r0
 801cc72:	4630      	mov	r0, r6
 801cc74:	f7fe fe8a 	bl	801b98c <_malloc_r>
 801cc78:	b948      	cbnz	r0, 801cc8e <__smakebuf_r+0x44>
 801cc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc7e:	059a      	lsls	r2, r3, #22
 801cc80:	d4ef      	bmi.n	801cc62 <__smakebuf_r+0x18>
 801cc82:	f023 0303 	bic.w	r3, r3, #3
 801cc86:	f043 0302 	orr.w	r3, r3, #2
 801cc8a:	81a3      	strh	r3, [r4, #12]
 801cc8c:	e7e3      	b.n	801cc56 <__smakebuf_r+0xc>
 801cc8e:	89a3      	ldrh	r3, [r4, #12]
 801cc90:	6020      	str	r0, [r4, #0]
 801cc92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc96:	6120      	str	r0, [r4, #16]
 801cc98:	81a3      	strh	r3, [r4, #12]
 801cc9a:	9b00      	ldr	r3, [sp, #0]
 801cc9c:	6163      	str	r3, [r4, #20]
 801cc9e:	9b01      	ldr	r3, [sp, #4]
 801cca0:	b15b      	cbz	r3, 801ccba <__smakebuf_r+0x70>
 801cca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cca6:	4630      	mov	r0, r6
 801cca8:	f000 f84e 	bl	801cd48 <_isatty_r>
 801ccac:	b128      	cbz	r0, 801ccba <__smakebuf_r+0x70>
 801ccae:	89a3      	ldrh	r3, [r4, #12]
 801ccb0:	f023 0303 	bic.w	r3, r3, #3
 801ccb4:	f043 0301 	orr.w	r3, r3, #1
 801ccb8:	81a3      	strh	r3, [r4, #12]
 801ccba:	89a3      	ldrh	r3, [r4, #12]
 801ccbc:	431d      	orrs	r5, r3
 801ccbe:	81a5      	strh	r5, [r4, #12]
 801ccc0:	e7cf      	b.n	801cc62 <__smakebuf_r+0x18>

0801ccc2 <_raise_r>:
 801ccc2:	291f      	cmp	r1, #31
 801ccc4:	b538      	push	{r3, r4, r5, lr}
 801ccc6:	4604      	mov	r4, r0
 801ccc8:	460d      	mov	r5, r1
 801ccca:	d904      	bls.n	801ccd6 <_raise_r+0x14>
 801cccc:	2316      	movs	r3, #22
 801ccce:	6003      	str	r3, [r0, #0]
 801ccd0:	f04f 30ff 	mov.w	r0, #4294967295
 801ccd4:	bd38      	pop	{r3, r4, r5, pc}
 801ccd6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ccd8:	b112      	cbz	r2, 801cce0 <_raise_r+0x1e>
 801ccda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ccde:	b94b      	cbnz	r3, 801ccf4 <_raise_r+0x32>
 801cce0:	4620      	mov	r0, r4
 801cce2:	f000 f853 	bl	801cd8c <_getpid_r>
 801cce6:	462a      	mov	r2, r5
 801cce8:	4601      	mov	r1, r0
 801ccea:	4620      	mov	r0, r4
 801ccec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ccf0:	f000 b83a 	b.w	801cd68 <_kill_r>
 801ccf4:	2b01      	cmp	r3, #1
 801ccf6:	d00a      	beq.n	801cd0e <_raise_r+0x4c>
 801ccf8:	1c59      	adds	r1, r3, #1
 801ccfa:	d103      	bne.n	801cd04 <_raise_r+0x42>
 801ccfc:	2316      	movs	r3, #22
 801ccfe:	6003      	str	r3, [r0, #0]
 801cd00:	2001      	movs	r0, #1
 801cd02:	e7e7      	b.n	801ccd4 <_raise_r+0x12>
 801cd04:	2400      	movs	r4, #0
 801cd06:	4628      	mov	r0, r5
 801cd08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cd0c:	4798      	blx	r3
 801cd0e:	2000      	movs	r0, #0
 801cd10:	e7e0      	b.n	801ccd4 <_raise_r+0x12>
	...

0801cd14 <raise>:
 801cd14:	4b02      	ldr	r3, [pc, #8]	; (801cd20 <raise+0xc>)
 801cd16:	4601      	mov	r1, r0
 801cd18:	6818      	ldr	r0, [r3, #0]
 801cd1a:	f7ff bfd2 	b.w	801ccc2 <_raise_r>
 801cd1e:	bf00      	nop
 801cd20:	200000dc 	.word	0x200000dc

0801cd24 <_fstat_r>:
 801cd24:	b538      	push	{r3, r4, r5, lr}
 801cd26:	2300      	movs	r3, #0
 801cd28:	4d06      	ldr	r5, [pc, #24]	; (801cd44 <_fstat_r+0x20>)
 801cd2a:	4604      	mov	r4, r0
 801cd2c:	4608      	mov	r0, r1
 801cd2e:	4611      	mov	r1, r2
 801cd30:	602b      	str	r3, [r5, #0]
 801cd32:	f7e4 f98e 	bl	8001052 <_fstat>
 801cd36:	1c43      	adds	r3, r0, #1
 801cd38:	d102      	bne.n	801cd40 <_fstat_r+0x1c>
 801cd3a:	682b      	ldr	r3, [r5, #0]
 801cd3c:	b103      	cbz	r3, 801cd40 <_fstat_r+0x1c>
 801cd3e:	6023      	str	r3, [r4, #0]
 801cd40:	bd38      	pop	{r3, r4, r5, pc}
 801cd42:	bf00      	nop
 801cd44:	2000b6f0 	.word	0x2000b6f0

0801cd48 <_isatty_r>:
 801cd48:	b538      	push	{r3, r4, r5, lr}
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	4d05      	ldr	r5, [pc, #20]	; (801cd64 <_isatty_r+0x1c>)
 801cd4e:	4604      	mov	r4, r0
 801cd50:	4608      	mov	r0, r1
 801cd52:	602b      	str	r3, [r5, #0]
 801cd54:	f7e4 f98d 	bl	8001072 <_isatty>
 801cd58:	1c43      	adds	r3, r0, #1
 801cd5a:	d102      	bne.n	801cd62 <_isatty_r+0x1a>
 801cd5c:	682b      	ldr	r3, [r5, #0]
 801cd5e:	b103      	cbz	r3, 801cd62 <_isatty_r+0x1a>
 801cd60:	6023      	str	r3, [r4, #0]
 801cd62:	bd38      	pop	{r3, r4, r5, pc}
 801cd64:	2000b6f0 	.word	0x2000b6f0

0801cd68 <_kill_r>:
 801cd68:	b538      	push	{r3, r4, r5, lr}
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	4d06      	ldr	r5, [pc, #24]	; (801cd88 <_kill_r+0x20>)
 801cd6e:	4604      	mov	r4, r0
 801cd70:	4608      	mov	r0, r1
 801cd72:	4611      	mov	r1, r2
 801cd74:	602b      	str	r3, [r5, #0]
 801cd76:	f7e4 f90b 	bl	8000f90 <_kill>
 801cd7a:	1c43      	adds	r3, r0, #1
 801cd7c:	d102      	bne.n	801cd84 <_kill_r+0x1c>
 801cd7e:	682b      	ldr	r3, [r5, #0]
 801cd80:	b103      	cbz	r3, 801cd84 <_kill_r+0x1c>
 801cd82:	6023      	str	r3, [r4, #0]
 801cd84:	bd38      	pop	{r3, r4, r5, pc}
 801cd86:	bf00      	nop
 801cd88:	2000b6f0 	.word	0x2000b6f0

0801cd8c <_getpid_r>:
 801cd8c:	f7e4 b8f8 	b.w	8000f80 <_getpid>

0801cd90 <_malloc_usable_size_r>:
 801cd90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cd94:	1f18      	subs	r0, r3, #4
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	bfbc      	itt	lt
 801cd9a:	580b      	ldrlt	r3, [r1, r0]
 801cd9c:	18c0      	addlt	r0, r0, r3
 801cd9e:	4770      	bx	lr

0801cda0 <_init>:
 801cda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cda2:	bf00      	nop
 801cda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cda6:	bc08      	pop	{r3}
 801cda8:	469e      	mov	lr, r3
 801cdaa:	4770      	bx	lr

0801cdac <_fini>:
 801cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdae:	bf00      	nop
 801cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cdb2:	bc08      	pop	{r3}
 801cdb4:	469e      	mov	lr, r3
 801cdb6:	4770      	bx	lr
