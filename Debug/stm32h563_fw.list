
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4c4  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000024  0800f714  0800f714  0001f714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000002f4  0800f738  0800f738  0001f738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800fa2c  0800fa2c  000200b4  2**0
                  CONTENTS
  5 .ARM          00000008  0800fa2c  0800fa2c  0001fa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800fa34  0800fa34  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800fa34  0800fa34  0001fa34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800fa38  0800fa38  0001fa38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000b4  20000000  0800fa3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000035b0  200000b4  0800faf0  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003664  0800faf0  00023664  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029760  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005c8a  00000000  00000000  0004988d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002420  00000000  00000000  0004f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001bdb  00000000  00000000  00051938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037edf  00000000  00000000  00053513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002cdf8  00000000  00000000  0008b3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00159d3c  00000000  00000000  000b81ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009d9c  00000000  00000000  00211f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0021bcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200000b4 	.word	0x200000b4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f6fc 	.word	0x0800f6fc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200000b8 	.word	0x200000b8
 800028c:	0800f6fc 	.word	0x0800f6fc

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
#include "svPlatform.h"
#include "svCLI.h"
#include "svDebug.h"
#include "svRingBuffer.h"
void AppMain()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
  __enable_irq();

  RESET_Init();
 80005de:	f001 f937 	bl	8001850 <RESET_Init>
  LED_Init();
 80005e2:	f001 f885 	bl	80016f0 <LED_Init>
  LED_SimpleAnimation();
 80005e6:	f001 f8dd 	bl	80017a4 <LED_SimpleAnimation>

  svDebugInit();
 80005ea:	f001 faf7 	bl	8001bdc <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 80005ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f2:	2000      	movs	r0, #0
 80005f4:	f001 f994 	bl	8001920 <UART_Init>
  // Chk Reset Count
  uint32_t pre_time = HAL_GetTick();
 80005f8:	f001 fb94 	bl	8001d24 <HAL_GetTick>
 80005fc:	6078      	str	r0, [r7, #4]

  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <AppMain+0x40>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <AppMain+0x38>
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <AppMain+0x44>)
 8000608:	f001 fb1c 	bl	8001c44 <svDebugMessage>
  /* Start scheduler */
  //osKernelStart();
  while(1)
  {

    svDebugProcess();
 800060c:	f001 fa8e 	bl	8001b2c <svDebugProcess>
 8000610:	e7fc      	b.n	800060c <AppMain+0x38>
 8000612:	bf00      	nop
 8000614:	20000020 	.word	0x20000020
 8000618:	0800f738 	.word	0x0800f738

0800061c <HAL_GPIO_EXTI_Rising_Callback>:
    */
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062c:	d103      	bne.n	8000636 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800062e:	2101      	movs	r1, #1
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000632:	f002 fc9b 	bl	8002f6c <HAL_GPIO_TogglePin>
  }
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	42020400 	.word	0x42020400

08000644 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <MX_FREERTOS_Init+0x18>)
 800064a:	2100      	movs	r1, #0
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_FREERTOS_Init+0x1c>)
 800064e:	f00c f823 	bl	800c698 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <MX_FREERTOS_Init+0x20>)
 8000656:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	0800f994 	.word	0x0800f994
 8000660:	08000669 	.word	0x08000669
 8000664:	200000d0 	.word	0x200000d0

08000668 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f00c f8a2 	bl	800c7ba <osDelay>
 8000676:	e7fb      	b.n	8000670 <StartDefaultTask+0x8>

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f001 fb18 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f816 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f978 	bl	8000978 <MX_GPIO_Init>
  MX_FLASH_Init();
 8000688:	f000 f8c2 	bl	8000810 <MX_FLASH_Init>
  MX_ICACHE_Init();
 800068c:	f000 f8d2 	bl	8000834 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 8000690:	f000 f8dc 	bl	800084c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000694:	f000 f924 	bl	80008e0 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000698:	f000 f874 	bl	8000784 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  AppMain();
 800069c:	f7ff ff9a 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006a0:	f00b ffaa 	bl	800c5f8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006a4:	f7ff ffce 	bl	8000644 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006a8:	f00b ffcc 	bl	800c644 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x34>
	...

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	; 0x70
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2250      	movs	r2, #80	; 0x50
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f00e fc20 	bl	800ef04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <SystemClock_Config+0xd0>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	4a29      	ldr	r2, [pc, #164]	; (8000780 <SystemClock_Config+0xd0>)
 80006dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80006e0:	6113      	str	r3, [r2, #16]
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <SystemClock_Config+0xd0>)
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ee:	bf00      	nop
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemClock_Config+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	2b08      	cmp	r3, #8
 80006fa:	d1f9      	bne.n	80006f0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006fc:	2309      	movs	r3, #9
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000700:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000706:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000710:	2303      	movs	r3, #3
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000718:	233e      	movs	r3, #62	; 0x3e
 800071a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000728:	230c      	movs	r3, #12
 800072a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800072c:	2300      	movs	r3, #0
 800072e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fc72 	bl	8003024 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 fa17 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	231f      	movs	r3, #31
 800074c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2105      	movs	r1, #5
 8000768:	4618      	mov	r0, r3
 800076a:	f003 f893 	bl	8003894 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000774:	f000 fa00 	bl	8000b78 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3770      	adds	r7, #112	; 0x70
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	44020800 	.word	0x44020800

08000784 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_FDCAN1_Init+0x84>)
 800078a:	4a20      	ldr	r2, [pc, #128]	; (800080c <MX_FDCAN1_Init+0x88>)
 800078c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_FDCAN1_Init+0x84>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_FDCAN1_Init+0x84>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_FDCAN1_Init+0x84>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007b4:	2210      	movs	r2, #16
 80007b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007d8:	2201      	movs	r2, #1
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007de:	2201      	movs	r2, #1
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_FDCAN1_Init+0x84>)
 80007f6:	f001 fc4b 	bl	8002090 <HAL_FDCAN_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000800:	f000 f9ba 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000d4 	.word	0x200000d4
 800080c:	4000a400 	.word	0x4000a400

08000810 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000814:	f002 f80a 	bl	800282c <HAL_FLASH_Unlock>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 800081e:	f000 f9ab 	bl	8000b78 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8000822:	f002 f829 	bl	8002878 <HAL_FLASH_Lock>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 800082c:	f000 f9a4 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000838:	f002 fbe4 	bl	8003004 <HAL_ICACHE_Enable>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000842:	f000 f999 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 8000852:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <MX_LPUART1_UART_Init+0x8c>)
 8000854:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 8000858:	4a20      	ldr	r2, [pc, #128]	; (80008dc <MX_LPUART1_UART_Init+0x90>)
 800085a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 8000870:	220c      	movs	r2, #12
 8000872:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 8000888:	2200      	movs	r2, #0
 800088a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 800088e:	f008 ffe1 	bl	8009854 <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000898:	f000 f96e 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 80008a0:	f00a ff17 	bl	800b6d2 <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80008aa:	f000 f965 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 80008b2:	f00a ff4c 	bl	800b74e <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80008bc:	f000 f95c 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_LPUART1_UART_Init+0x88>)
 80008c2:	f00a fecd 	bl	800b660 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80008cc:	f000 f954 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000138 	.word	0x20000138
 80008d8:	44002400 	.word	0x44002400
 80008dc:	00033324 	.word	0x00033324

080008e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_USART3_UART_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800092a:	f008 ff93 	bl	8009854 <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f920 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800093c:	f00a fec9 	bl	800b6d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f917 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800094e:	f00a fefe 	bl	800b74e <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f90e 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800095e:	f00a fe7f 	bl	800b660 <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f906 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200001cc 	.word	0x200001cc
 8000974:	40004800 	.word	0x40004800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098e:	4b6b      	ldr	r3, [pc, #428]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	4a69      	ldr	r2, [pc, #420]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800099e:	4b67      	ldr	r3, [pc, #412]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a4:	f003 0310 	and.w	r3, r3, #16
 80009a8:	623b      	str	r3, [r7, #32]
 80009aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ac:	4b63      	ldr	r3, [pc, #396]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	4a62      	ldr	r2, [pc, #392]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009bc:	4b5f      	ldr	r3, [pc, #380]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b5c      	ldr	r3, [pc, #368]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d0:	4a5a      	ldr	r2, [pc, #360]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009da:	4b58      	ldr	r3, [pc, #352]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	61bb      	str	r3, [r7, #24]
 80009e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e8:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ee:	4a53      	ldr	r2, [pc, #332]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009f8:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 80009fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a24:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2a:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a48:	4a3c      	ldr	r2, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a66:	4a35      	ldr	r2, [pc, #212]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2110      	movs	r1, #16
 8000a82:	482f      	ldr	r0, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x1c8>)
 8000a84:	f002 fa5a 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	482d      	ldr	r0, [pc, #180]	; (8000b44 <MX_GPIO_Init+0x1cc>)
 8000a8e:	f002 fa55 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2110      	movs	r1, #16
 8000a96:	482c      	ldr	r0, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x1d0>)
 8000a98:	f002 fa50 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_GPIO_Init+0x1d4>)
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4827      	ldr	r0, [pc, #156]	; (8000b50 <MX_GPIO_Init+0x1d8>)
 8000ab2:	f002 f8f1 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_GPIO_Init+0x1c8>)
 8000ace:	f002 f8e3 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4816      	ldr	r0, [pc, #88]	; (8000b44 <MX_GPIO_Init+0x1cc>)
 8000aea:	f002 f8d5 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000aee:	2310      	movs	r3, #16
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4810      	ldr	r0, [pc, #64]	; (8000b48 <MX_GPIO_Init+0x1d0>)
 8000b06:	f002 f8c7 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_GPIO_Init+0x1d4>)
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <MX_GPIO_Init+0x1d0>)
 8000b1e:	f002 f8bb 	bl	8002c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2105      	movs	r1, #5
 8000b26:	2018      	movs	r0, #24
 8000b28:	f001 f9e4 	bl	8001ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b2c:	2018      	movs	r0, #24
 8000b2e:	f001 f9fb 	bl	8001f28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	3738      	adds	r7, #56	; 0x38
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	44020c00 	.word	0x44020c00
 8000b40:	42021400 	.word	0x42021400
 8000b44:	42020400 	.word	0x42020400
 8000b48:	42021800 	.word	0x42021800
 8000b4c:	10110000 	.word	0x10110000
 8000b50:	42020800 	.word	0x42020800

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f001 f8c9 	bl	8001cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40001000 	.word	0x40001000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>

08000b82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	210f      	movs	r1, #15
 8000b8a:	f06f 0001 	mvn.w	r0, #1
 8000b8e:	f001 f9b1 	bl	8001ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0cc      	sub	sp, #304	; 0x130
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ba6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bbc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f00e f99b 	bl	800ef04 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a37      	ldr	r2, [pc, #220]	; (8000cb8 <HAL_FDCAN_MspInit+0x120>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d166      	bne.n	8000cae <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000be4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	f04f 0304 	mov.w	r3, #4
 8000bf0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bf8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 f9be 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8000c12:	f7ff ffb1 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <HAL_FDCAN_MspInit+0x124>)
 8000c18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000c1c:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <HAL_FDCAN_MspInit+0x124>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <HAL_FDCAN_MspInit+0x124>)
 8000c28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000c2c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8000c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c3e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c42:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_FDCAN_MspInit+0x124>)
 8000c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <HAL_FDCAN_MspInit+0x124>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_FDCAN_MspInit+0x124>)
 8000c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c70:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <HAL_FDCAN_MspInit+0x128>)
 8000c9a:	f001 fffd 	bl	8002c98 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	2027      	movs	r0, #39	; 0x27
 8000ca4:	f001 f926 	bl	8001ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ca8:	2027      	movs	r0, #39	; 0x27
 8000caa:	f001 f93d 	bl	8001f28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	4000a400 	.word	0x4000a400
 8000cbc:	44020c00 	.word	0x44020c00
 8000cc0:	42020000 	.word	0x42020000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0d0      	sub	sp, #320	; 0x140
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000cd2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ce8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cec:	4618      	mov	r0, r3
 8000cee:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f00e f905 	bl	800ef04 <memset>
  if(huart->Instance==LPUART1)
 8000cfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cfe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a9e      	ldr	r2, [pc, #632]	; (8000f80 <HAL_UART_MspInit+0x2bc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d15e      	bne.n	8000dca <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d10:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000d20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 f928 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000d3e:	f7ff ff1b 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d42:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000d44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000d48:	4a8e      	ldr	r2, [pc, #568]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000d52:	4b8c      	ldr	r3, [pc, #560]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000d54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000d58:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000d5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d6a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000d6e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b84      	ldr	r3, [pc, #528]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d76:	4a83      	ldr	r2, [pc, #524]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d80:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d86:	f003 0202 	and.w	r2, r3, #2
 8000d8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000d9c:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000db6:	2308      	movs	r3, #8
 8000db8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4871      	ldr	r0, [pc, #452]	; (8000f88 <HAL_UART_MspInit+0x2c4>)
 8000dc4:	f001 ff68 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc8:	e0d5      	b.n	8000f76 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000dca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a6d      	ldr	r2, [pc, #436]	; (8000f8c <HAL_UART_MspInit+0x2c8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d165      	bne.n	8000ea8 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ddc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000de0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000de4:	f04f 0202 	mov.w	r2, #2
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000df4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000df8:	2200      	movs	r2, #0
 8000dfa:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 f8c1 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000e0c:	f7ff feb4 	bl	8000b78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	4b5c      	ldr	r3, [pc, #368]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e16:	4a5b      	ldr	r2, [pc, #364]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e20:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e26:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000e2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e3c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	4b51      	ldr	r3, [pc, #324]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e44:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e54:	f003 0208 	and.w	r2, r3, #8
 8000e58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000e6a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e6c:	2360      	movs	r3, #96	; 0x60
 8000e6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	483f      	ldr	r0, [pc, #252]	; (8000f90 <HAL_UART_MspInit+0x2cc>)
 8000e92:	f001 ff01 	bl	8002c98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2105      	movs	r1, #5
 8000e9a:	203b      	movs	r0, #59	; 0x3b
 8000e9c:	f001 f82a 	bl	8001ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea0:	203b      	movs	r0, #59	; 0x3b
 8000ea2:	f001 f841 	bl	8001f28 <HAL_NVIC_EnableIRQ>
}
 8000ea6:	e066      	b.n	8000f76 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000ea8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000eac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <HAL_UART_MspInit+0x2d0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d15d      	bne.n	8000f76 <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ebe:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000ec2:	f04f 0204 	mov.w	r2, #4
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ece:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ed2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f852 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000eea:	f7ff fe45 	bl	8000b78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ef4:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f04:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000f08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f1a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_UART_MspInit+0x2c0>)
 8000f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f32:	f003 0208 	and.w	r2, r3, #8
 8000f36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f44:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f48:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f64:	2307      	movs	r3, #7
 8000f66:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <HAL_UART_MspInit+0x2cc>)
 8000f72:	f001 fe91 	bl	8002c98 <HAL_GPIO_Init>
}
 8000f76:	bf00      	nop
 8000f78:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	44002400 	.word	0x44002400
 8000f84:	44020c00 	.word	0x44020c00
 8000f88:	42020400 	.word	0x42020400
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	42020c00 	.word	0x42020c00
 8000f94:	40004800 	.word	0x40004800

08000f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa0:	4b33      	ldr	r3, [pc, #204]	; (8001070 <HAL_InitTick+0xd8>)
 8000fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fa6:	4a32      	ldr	r2, [pc, #200]	; (8001070 <HAL_InitTick+0xd8>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <HAL_InitTick+0xd8>)
 8000fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fbe:	f107 020c 	add.w	r2, r7, #12
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 ffa5 	bl	8003f18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d103      	bne.n	8000fe0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fd8:	f002 ff5c 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8000fdc:	6378      	str	r0, [r7, #52]	; 0x34
 8000fde:	e004      	b.n	8000fea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fe0:	f002 ff58 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_InitTick+0xdc>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	09db      	lsrs	r3, r3, #7
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_InitTick+0xe0>)
 8000ffc:	4a1f      	ldr	r2, [pc, #124]	; (800107c <HAL_InitTick+0xe4>)
 8000ffe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_InitTick+0xe0>)
 8001002:	2263      	movs	r2, #99	; 0x63
 8001004:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <HAL_InitTick+0xe0>)
 8001008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_InitTick+0xe0>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_InitTick+0xe0>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001018:	4817      	ldr	r0, [pc, #92]	; (8001078 <HAL_InitTick+0xe0>)
 800101a:	f008 f835 	bl	8009088 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001028:	2b00      	cmp	r3, #0
 800102a:	d118      	bne.n	800105e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800102c:	4812      	ldr	r0, [pc, #72]	; (8001078 <HAL_InitTick+0xe0>)
 800102e:	f008 f88d 	bl	800914c <HAL_TIM_Base_Start_IT>
 8001032:	4603      	mov	r3, r0
 8001034:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001038:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10e      	bne.n	800105e <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	d808      	bhi.n	8001058 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001046:	2200      	movs	r2, #0
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	2031      	movs	r0, #49	; 0x31
 800104c:	f000 ff52 	bl	8001ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_InitTick+0xe8>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e002      	b.n	800105e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800105e:	2031      	movs	r0, #49	; 0x31
 8001060:	f000 ff62 	bl	8001f28 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001064:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001068:	4618      	mov	r0, r3
 800106a:	3738      	adds	r7, #56	; 0x38
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	44020c00 	.word	0x44020c00
 8001074:	0a7c5ac5 	.word	0x0a7c5ac5
 8001078:	20000260 	.word	0x20000260
 800107c:	40001000 	.word	0x40001000
 8001080:	20000024 	.word	0x20000024

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80010b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b8:	f001 ff72 	bl	8002fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80010c6:	f001 f93d 	bl	8002344 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000d4 	.word	0x200000d4

080010d4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM6_IRQHandler+0x10>)
 80010da:	f008 f8e5 	bl	80092a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000260 	.word	0x20000260

080010e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <USART2_IRQHandler+0x10>)
 80010ee:	f008 fd01 	bl	8009af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002f4 	.word	0x200002f4

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f00d ff16 	bl	800ef5c <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200a0000 	.word	0x200a0000
 800115c:	00000400 	.word	0x00000400
 8001160:	200002ac 	.word	0x200002ac
 8001164:	20003668 	.word	0x20003668

08001168 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <SystemInit+0xdc>)
 8001170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001174:	4a33      	ldr	r2, [pc, #204]	; (8001244 <SystemInit+0xdc>)
 8001176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <SystemInit+0xe0>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <SystemInit+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <SystemInit+0xe0>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <SystemInit+0xe0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	492c      	ldr	r1, [pc, #176]	; (8001248 <SystemInit+0xe0>)
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <SystemInit+0xe4>)
 8001198:	4013      	ands	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <SystemInit+0xe0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <SystemInit+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <SystemInit+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <SystemInit+0xe0>)
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <SystemInit+0xe8>)
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <SystemInit+0xe0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <SystemInit+0xe0>)
 80011bc:	4a24      	ldr	r2, [pc, #144]	; (8001250 <SystemInit+0xe8>)
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <SystemInit+0xe0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <SystemInit+0xe0>)
 80011c8:	4a21      	ldr	r2, [pc, #132]	; (8001250 <SystemInit+0xe8>)
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <SystemInit+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <SystemInit+0xe0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <SystemInit+0xe0>)
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <SystemInit+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <SystemInit+0xdc>)
 80011e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ea:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <SystemInit+0xec>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011f4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80011fc:	d003      	beq.n	8001206 <SystemInit+0x9e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001204:	d117      	bne.n	8001236 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <SystemInit+0xec>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <SystemInit+0xec>)
 8001214:	4a10      	ldr	r2, [pc, #64]	; (8001258 <SystemInit+0xf0>)
 8001216:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <SystemInit+0xec>)
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <SystemInit+0xf4>)
 800121c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <SystemInit+0xec>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <SystemInit+0xec>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <SystemInit+0xec>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <SystemInit+0xec>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	61d3      	str	r3, [r2, #28]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00
 8001248:	44020c00 	.word	0x44020c00
 800124c:	eae2eae3 	.word	0xeae2eae3
 8001250:	01010280 	.word	0x01010280
 8001254:	40022000 	.word	0x40022000
 8001258:	08192a3b 	.word	0x08192a3b
 800125c:	4c5d6e7f 	.word	0x4c5d6e7f

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001262:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001264:	f7ff ff80 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800128e:	f00d fe6b 	bl	800ef68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001292:	f7ff f9f1 	bl	8000678 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   r0, =_estack
 8001298:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80012a4:	0800fa3c 	.word	0x0800fa3c
  ldr r2, =_sbss
 80012a8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80012ac:	20003664 	.word	0x20003664

080012b0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_IRQHandler>
	...

080012b4 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 80012ce:	f001 faad 	bl	800282c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <Flash_Erase+0xb0>)
 80012d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	e013      	b.n	8001314 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f837 	bl	8001368 <Flash_InSector>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d106      	bne.n	800130e <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001302:	2b00      	cmp	r3, #0
 8001304:	da01      	bge.n	800130a <Flash_Erase+0x56>
      {
        start_sector = i;
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	3301      	adds	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	2b7f      	cmp	r3, #127	; 0x7f
 8001318:	dde8      	ble.n	80012ec <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	db19      	blt.n	8001354 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001320:	2304      	movs	r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8001324:	2303      	movs	r3, #3
 8001326:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8001328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132a:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 800132c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	3301      	adds	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8001336:	f107 0208 	add.w	r2, r7, #8
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fba5 	bl	8002a90 <HAL_FLASHEx_Erase>
 8001346:	4603      	mov	r3, r0
 8001348:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 8001350:	2301      	movs	r3, #1
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 8001354:	f001 fa90 	bl	8002878 <HAL_FLASH_Lock>
  return ret;
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800135a:	4618      	mov	r0, r3
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8001368:	b480      	push	{r7}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001380:	035b      	lsls	r3, r3, #13
 8001382:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800138a:	331f      	adds	r3, #31
 800138c:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	3b01      	subs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 800139c:	6a3a      	ldr	r2, [r7, #32]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d305      	bcc.n	80013b0 <Flash_InSector+0x48>
 80013a4:	6a3a      	ldr	r2, [r7, #32]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d801      	bhi.n	80013b0 <Flash_InSector+0x48>
  {
    ret = TRUE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d305      	bcc.n	80013c4 <Flash_InSector+0x5c>
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d801      	bhi.n	80013c4 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d305      	bcc.n	80013d8 <Flash_InSector+0x70>
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d801      	bhi.n	80013d8 <Flash_InSector+0x70>
  {
    ret = TRUE;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d305      	bcc.n	80013ec <Flash_InSector+0x84>
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d801      	bhi.n	80013ec <Flash_InSector+0x84>
  {
    ret = TRUE;
 80013e8:	2301      	movs	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	372c      	adds	r7, #44	; 0x2c
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b092      	sub	sp, #72	; 0x48
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8001406:	2301      	movs	r3, #1
 8001408:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 800140a:	f001 fa0f 	bl	800282c <HAL_FLASH_Unlock>

  index = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 800141a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <Flash_Write+0x2e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	f200 808e 	bhi.w	8001544 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8001430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2210      	movs	r2, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f00d fdbb 	bl	800efb4 <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 800143e:	f107 0210 	add.w	r2, r7, #16
 8001442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001444:	18d0      	adds	r0, r2, r3
 8001446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001448:	f1c3 0210 	rsb	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4293      	cmp	r3, r2
 8001450:	bf28      	it	cs
 8001452:	4613      	movcs	r3, r2
 8001454:	461a      	mov	r2, r3
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	f00d fdac 	bl	800efb4 <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	461a      	mov	r2, r3
 8001462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001464:	2002      	movs	r0, #2
 8001466:	f001 f969 	bl	800273c <HAL_FLASH_Program>
 800146a:	4603      	mov	r3, r0
 800146c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 8001470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <Flash_Write+0x82>
    {
      return FALSE;
 8001478:	2300      	movs	r3, #0
 800147a:	e06c      	b.n	8001556 <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 800147c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <Flash_Write+0x98>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d804      	bhi.n	8001492 <Flash_Write+0x98>
    {
      index += length;
 8001488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
 8001490:	e004      	b.n	800149c <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 8001492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	3310      	adds	r3, #16
 800149a:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 800149c:	e052      	b.n	8001544 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	bf28      	it	cs
 80014a8:	2310      	movcs	r3, #16
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d117      	bne.n	80014e2 <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b6:	18d1      	adds	r1, r2, r3
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014bc:	4413      	add	r3, r2
 80014be:	461a      	mov	r2, r3
 80014c0:	2002      	movs	r0, #2
 80014c2:	f001 f93b 	bl	800273c <HAL_FLASH_Program>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 80014cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <Flash_Write+0xe0>
      {
        ret = FALSE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80014d8:	e03a      	b.n	8001550 <Flash_Write+0x156>
      }
      index += write_length;
 80014da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014de:	4413      	add	r3, r2
 80014e0:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d02c      	beq.n	8001544 <Flash_Write+0x14a>
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d827      	bhi.n	8001544 <Flash_Write+0x14a>
    {
      offset = length - index;
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001500:	4413      	add	r3, r2
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8001504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2210      	movs	r2, #16
 800150c:	4618      	mov	r0, r3
 800150e:	f00d fd51 	bl	800efb4 <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001516:	18d1      	adds	r1, r2, r3
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800151e:	4618      	mov	r0, r3
 8001520:	f00d fd48 	bl	800efb4 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	461a      	mov	r2, r3
 800152a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800152c:	2002      	movs	r0, #2
 800152e:	f001 f905 	bl	800273c <HAL_FLASH_Program>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8001538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <Flash_Write+0x154>
      {
        return FALSE;
 8001540:	2300      	movs	r3, #0
 8001542:	e008      	b.n	8001556 <Flash_Write+0x15c>
  while(index < length)
 8001544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3a8      	bcc.n	800149e <Flash_Write+0xa4>
 800154c:	e000      	b.n	8001550 <Flash_Write+0x156>
      }
      break;
 800154e:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 8001550:	f001 f992 	bl	8002878 <HAL_FLASH_Lock>
  return ret;
 8001554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001556:	4618      	mov	r0, r3
 8001558:	3748      	adds	r7, #72	; 0x48
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 800155e:	b480      	push	{r7}
 8001560:	b089      	sub	sp, #36	; 0x24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e00c      	b.n	8001592 <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4413      	add	r3, r2
 800157e:	7819      	ldrb	r1, [r3, #0]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	460a      	mov	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3301      	adds	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d8ee      	bhi.n	8001578 <Flash_Read+0x1a>
  }



  return ret;
 800159a:	69bb      	ldr	r3, [r7, #24]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3724      	adds	r7, #36	; 0x24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09a      	sub	sp, #104	; 0x68
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	f040 8085 	bne.w	80016c8 <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d049      	beq.n	8001658 <CLI_FlashTest+0xb0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d871      	bhi.n	80016ae <CLI_FlashTest+0x106>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d003      	beq.n	80015d8 <CLI_FlashTest+0x30>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d029      	beq.n	800162a <CLI_FlashTest+0x82>
 80015d6:	e06a      	b.n	80016ae <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <CLI_FlashTest+0x128>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <CLI_FlashTest+0x3e>
 80015e0:	483c      	ldr	r0, [pc, #240]	; (80016d4 <CLI_FlashTest+0x12c>)
 80015e2:	f000 fb2f 	bl	8001c44 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2210      	movs	r2, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f7ff ffb5 	bl	800155e <Flash_Read>
        for(int i=0; i<16; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	667b      	str	r3, [r7, #100]	; 0x64
 80015f8:	e013      	b.n	8001622 <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <CLI_FlashTest+0x128>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00c      	beq.n	800161c <CLI_FlashTest+0x74>
 8001602:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	18d1      	adds	r1, r2, r3
 8001608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	3368      	adds	r3, #104	; 0x68
 800160e:	443b      	add	r3, r7
 8001610:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001614:	461a      	mov	r2, r3
 8001616:	4830      	ldr	r0, [pc, #192]	; (80016d8 <CLI_FlashTest+0x130>)
 8001618:	f000 fb14 	bl	8001c44 <svDebugMessage>
        for(int i=0; i<16; i++)
 800161c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800161e:	3301      	adds	r3, #1
 8001620:	667b      	str	r3, [r7, #100]	; 0x64
 8001622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001624:	2b0f      	cmp	r3, #15
 8001626:	dde8      	ble.n	80015fa <CLI_FlashTest+0x52>
        }
        break;
 8001628:	e04e      	b.n	80016c8 <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 800162a:	2110      	movs	r1, #16
 800162c:	6838      	ldr	r0, [r7, #0]
 800162e:	f7ff fe41 	bl	80012b4 <Flash_Erase>
 8001632:	4603      	mov	r3, r0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <CLI_FlashTest+0x128>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d03e      	beq.n	80016be <CLI_FlashTest+0x116>
 8001640:	4826      	ldr	r0, [pc, #152]	; (80016dc <CLI_FlashTest+0x134>)
 8001642:	f000 faff 	bl	8001c44 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 8001646:	e03a      	b.n	80016be <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <CLI_FlashTest+0x128>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d036      	beq.n	80016be <CLI_FlashTest+0x116>
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <CLI_FlashTest+0x138>)
 8001652:	f000 faf7 	bl	8001c44 <svDebugMessage>
        break;
 8001656:	e032      	b.n	80016be <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 8001658:	2300      	movs	r3, #0
 800165a:	663b      	str	r3, [r7, #96]	; 0x60
 800165c:	e00a      	b.n	8001674 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 800165e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001660:	b2d9      	uxtb	r1, r3
 8001662:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001668:	4413      	add	r3, r2
 800166a:	460a      	mov	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 800166e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001670:	3301      	adds	r3, #1
 8001672:	663b      	str	r3, [r7, #96]	; 0x60
 8001674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001676:	2b0f      	cmp	r3, #15
 8001678:	ddf1      	ble.n	800165e <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 800167a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800167e:	2210      	movs	r2, #16
 8001680:	4619      	mov	r1, r3
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f7ff feb9 	bl	80013fa <Flash_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <CLI_FlashTest+0x128>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d015      	beq.n	80016c2 <CLI_FlashTest+0x11a>
 8001696:	4813      	ldr	r0, [pc, #76]	; (80016e4 <CLI_FlashTest+0x13c>)
 8001698:	f000 fad4 	bl	8001c44 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 800169c:	e011      	b.n	80016c2 <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <CLI_FlashTest+0x128>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00d      	beq.n	80016c2 <CLI_FlashTest+0x11a>
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <CLI_FlashTest+0x140>)
 80016a8:	f000 facc 	bl	8001c44 <svDebugMessage>
        break;
 80016ac:	e009      	b.n	80016c2 <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <CLI_FlashTest+0x128>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <CLI_FlashTest+0x11e>
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <CLI_FlashTest+0x144>)
 80016b8:	f000 fac4 	bl	8001c44 <svDebugMessage>
        break;
 80016bc:	e003      	b.n	80016c6 <CLI_FlashTest+0x11e>
        break;
 80016be:	bf00      	nop
 80016c0:	e002      	b.n	80016c8 <CLI_FlashTest+0x120>
        break;
 80016c2:	bf00      	nop
 80016c4:	e000      	b.n	80016c8 <CLI_FlashTest+0x120>
        break;
 80016c6:	bf00      	nop
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	3768      	adds	r7, #104	; 0x68
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000020 	.word	0x20000020
 80016d4:	0800f7a0 	.word	0x0800f7a0
 80016d8:	0800f7d0 	.word	0x0800f7d0
 80016dc:	0800f7e0 	.word	0x0800f7e0
 80016e0:	0800f7ec 	.word	0x0800f7ec
 80016e4:	0800f7f8 	.word	0x0800f7f8
 80016e8:	0800f804 	.word	0x0800f804
 80016ec:	0800f810 	.word	0x0800f810

080016f0 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LED_Init+0x1c>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <LED_Init+0x20>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002b0 	.word	0x200002b0
 8001710:	200002b4 	.word	0x200002b4

08001714 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <LED_OnOff+0x7c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d02d      	beq.n	8001784 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <LED_OnOff+0x80>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02c      	beq.n	800178a <LED_OnOff+0x76>
  {
    switch(eLED){
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d010      	beq.n	8001758 <LED_OnOff+0x44>
 8001736:	2b03      	cmp	r3, #3
 8001738:	dc26      	bgt.n	8001788 <LED_OnOff+0x74>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d002      	beq.n	8001744 <LED_OnOff+0x30>
 800173e:	2b02      	cmp	r3, #2
 8001740:	d005      	beq.n	800174e <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 8001742:	e021      	b.n	8001788 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <LED_OnOff+0x84>)
 8001746:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 8001748:	2301      	movs	r3, #1
 800174a:	817b      	strh	r3, [r7, #10]
        break;
 800174c:	e009      	b.n	8001762 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <LED_OnOff+0x88>)
 8001750:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 8001752:	2310      	movs	r3, #16
 8001754:	817b      	strh	r3, [r7, #10]
        break;
 8001756:	e004      	b.n	8001762 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <LED_OnOff+0x8c>)
 800175a:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 800175c:	2310      	movs	r3, #16
 800175e:	817b      	strh	r3, [r7, #10]
        break;
 8001760:	bf00      	nop
        break;
    }
    if(bOn)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 8001768:	897b      	ldrh	r3, [r7, #10]
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f001 fbe4 	bl	8002f3c <HAL_GPIO_WritePin>
 8001774:	e009      	b.n	800178a <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 8001776:	897b      	ldrh	r3, [r7, #10]
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f001 fbdd 	bl	8002f3c <HAL_GPIO_WritePin>
 8001782:	e002      	b.n	800178a <LED_OnOff+0x76>
    return;
 8001784:	bf00      	nop
 8001786:	e000      	b.n	800178a <LED_OnOff+0x76>
        return;
 8001788:	bf00      	nop
    }
  }
}
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200002b4 	.word	0x200002b4
 8001794:	200002b0 	.word	0x200002b0
 8001798:	42020400 	.word	0x42020400
 800179c:	42021400 	.word	0x42021400
 80017a0:	42021800 	.word	0x42021800

080017a4 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e02c      	b.n	800180a <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 80017b0:	2101      	movs	r1, #1
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff ffae 	bl	8001714 <LED_OnOff>
    HAL_Delay(50);
 80017b8:	2032      	movs	r0, #50	; 0x32
 80017ba:	f000 fabf 	bl	8001d3c <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 80017be:	2100      	movs	r1, #0
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff ffa7 	bl	8001714 <LED_OnOff>
    HAL_Delay(50);
 80017c6:	2032      	movs	r0, #50	; 0x32
 80017c8:	f000 fab8 	bl	8001d3c <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 80017cc:	2101      	movs	r1, #1
 80017ce:	2002      	movs	r0, #2
 80017d0:	f7ff ffa0 	bl	8001714 <LED_OnOff>
    HAL_Delay(50);
 80017d4:	2032      	movs	r0, #50	; 0x32
 80017d6:	f000 fab1 	bl	8001d3c <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 80017da:	2100      	movs	r1, #0
 80017dc:	2002      	movs	r0, #2
 80017de:	f7ff ff99 	bl	8001714 <LED_OnOff>
    HAL_Delay(50);
 80017e2:	2032      	movs	r0, #50	; 0x32
 80017e4:	f000 faaa 	bl	8001d3c <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 80017e8:	2101      	movs	r1, #1
 80017ea:	2003      	movs	r0, #3
 80017ec:	f7ff ff92 	bl	8001714 <LED_OnOff>
    HAL_Delay(50);
 80017f0:	2032      	movs	r0, #50	; 0x32
 80017f2:	f000 faa3 	bl	8001d3c <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 80017f6:	2100      	movs	r1, #0
 80017f8:	2003      	movs	r0, #3
 80017fa:	f7ff ff8b 	bl	8001714 <LED_OnOff>
    HAL_Delay(50);
 80017fe:	2032      	movs	r0, #50	; 0x32
 8001800:	f000 fa9c 	bl	8001d3c <HAL_Delay>
  for(int i =0; i<3; i++)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	ddcf      	ble.n	80017b0 <LED_SimpleAnimation+0xc>
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d10b      	bne.n	8001846 <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f7ff ff67 	bl	8001714 <LED_OnOff>
  }
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8001856:	2301      	movs	r3, #1
 8001858:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <RESET_Init+0x80>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 800186a:	2301      	movs	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 800186e:	4919      	ldr	r1, [pc, #100]	; (80018d4 <RESET_Init+0x84>)
 8001870:	2002      	movs	r0, #2
 8001872:	f000 f845 	bl	8001900 <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <RESET_Init+0x88>)
 8001878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800187c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01c      	beq.n	80018be <RESET_Init+0x6e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d019      	beq.n	80018be <RESET_Init+0x6e>
 800188a:	2002      	movs	r0, #2
 800188c:	f000 f828 	bl	80018e0 <RTC_ReadBackupReg>
 8001890:	4603      	mov	r3, r0
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <RESET_Init+0x84>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d112      	bne.n	80018be <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 8001898:	2001      	movs	r0, #1
 800189a:	f000 f821 	bl	80018e0 <RTC_ReadBackupReg>
 800189e:	4603      	mov	r3, r0
 80018a0:	3301      	adds	r3, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	2001      	movs	r0, #1
 80018a6:	f000 f82b 	bl	8001900 <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 80018aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ae:	f000 fa45 	bl	8001d3c <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f000 f814 	bl	80018e0 <RTC_ReadBackupReg>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <RESET_Init+0x8c>)
 80018bc:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 80018be:	2100      	movs	r1, #0
 80018c0:	2001      	movs	r0, #1
 80018c2:	f000 f81d 	bl	8001900 <RTC_WriteBackupReg>

  return ret;
 80018c6:	683b      	ldr	r3, [r7, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	e000edf0 	.word	0xe000edf0
 80018d4:	20240215 	.word	0x20240215
 80018d8:	44020c00 	.word	0x44020c00
 80018dc:	200002b8 	.word	0x200002b8

080018e0 <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <RTC_ReadBackupReg+0x1c>)
 80018ec:	f007 fbb6 	bl	800905c <HAL_RTCEx_BKUPRead>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002bc 	.word	0x200002bc

08001900 <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4803      	ldr	r0, [pc, #12]	; (800191c <RTC_WriteBackupReg+0x1c>)
 8001910:	f007 fb8c 	bl	800902c <HAL_RTCEx_BKUPWrite>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002bc 	.word	0x200002bc

08001920 <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d177      	bne.n	8001a22 <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <UART_Init+0x10c>)
 8001934:	4a3e      	ldr	r2, [pc, #248]	; (8001a30 <UART_Init+0x110>)
 8001936:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 8001938:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <UART_Init+0x10c>)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <UART_Init+0x10c>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <UART_Init+0x10c>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <UART_Init+0x10c>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <UART_Init+0x10c>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <UART_Init+0x10c>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <UART_Init+0x10c>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <UART_Init+0x10c>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001968:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <UART_Init+0x10c>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <UART_Init+0x10c>)
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 8001974:	482d      	ldr	r0, [pc, #180]	; (8001a2c <UART_Init+0x10c>)
 8001976:	f007 ff6d 	bl	8009854 <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <UART_Init+0x72>
      {
        Error_Handler();
 8001980:	f7ff f8fa 	bl	8000b78 <Error_Handler>
        s_bUARTConnected = FALSE;
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <UART_Init+0x114>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <UART_Init+0x118>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e031      	b.n	80019f6 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001992:	2100      	movs	r1, #0
 8001994:	4825      	ldr	r0, [pc, #148]	; (8001a2c <UART_Init+0x10c>)
 8001996:	f009 fe9c 	bl	800b6d2 <HAL_UARTEx_SetTxFifoThreshold>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <UART_Init+0x92>
      {
        Error_Handler();
 80019a0:	f7ff f8ea 	bl	8000b78 <Error_Handler>
        s_bUARTConnected = FALSE;
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <UART_Init+0x114>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <UART_Init+0x118>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e021      	b.n	80019f6 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	481d      	ldr	r0, [pc, #116]	; (8001a2c <UART_Init+0x10c>)
 80019b6:	f009 feca 	bl	800b74e <HAL_UARTEx_SetRxFifoThreshold>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <UART_Init+0xb2>
      {
        Error_Handler();
 80019c0:	f7ff f8da 	bl	8000b78 <Error_Handler>
        s_bUARTConnected = FALSE;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <UART_Init+0x114>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <UART_Init+0x118>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e011      	b.n	80019f6 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019d2:	4816      	ldr	r0, [pc, #88]	; (8001a2c <UART_Init+0x10c>)
 80019d4:	f009 fe44 	bl	800b660 <HAL_UARTEx_DisableFifoMode>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <UART_Init+0xd0>
      {
        Error_Handler();
 80019de:	f7ff f8cb 	bl	8000b78 <Error_Handler>
        s_bUARTConnected = FALSE;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <UART_Init+0x114>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <UART_Init+0x118>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e002      	b.n	80019f6 <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 80019f0:	4812      	ldr	r0, [pc, #72]	; (8001a3c <UART_Init+0x11c>)
 80019f2:	f00a fd2c 	bl	800c44e <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 80019f6:	2201      	movs	r2, #1
 80019f8:	4911      	ldr	r1, [pc, #68]	; (8001a40 <UART_Init+0x120>)
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <UART_Init+0x10c>)
 80019fc:	f008 f818 	bl	8009a30 <HAL_UART_Receive_IT>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <UART_Init+0x114>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <UART_Init+0x118>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 8001a12:	e007      	b.n	8001a24 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <UART_Init+0x114>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <UART_Init+0x118>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
      break;
 8001a20:	e000      	b.n	8001a24 <UART_Init+0x104>
    default:
      break;
 8001a22:	bf00      	nop
  }
  return;
 8001a24:	bf00      	nop
}
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200002f4 	.word	0x200002f4
 8001a30:	40004400 	.word	0x40004400
 8001a34:	200002f0 	.word	0x200002f0
 8001a38:	20000408 	.word	0x20000408
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	200002ec 	.word	0x200002ec

08001a44 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <IsUartConnected+0x1c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200002f0 	.word	0x200002f0

08001a64 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	4613      	mov	r3, r2
 8001a72:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d110      	bne.n	8001aa0 <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8001a7e:	88ba      	ldrh	r2, [r7, #4]
 8001a80:	2364      	movs	r3, #100	; 0x64
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <UART_Write+0x4c>)
 8001a86:	f007 ff35 	bl	80098f4 <HAL_UART_Transmit>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d107      	bne.n	8001aa4 <UART_Write+0x40>
      {
        ret = Len;
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <UART_Write+0x50>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
      }
      break;
 8001a9e:	e001      	b.n	8001aa4 <UART_Write+0x40>
    default:
      break;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <UART_Write+0x42>
      break;
 8001aa4:	bf00      	nop
  }
  return ret;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200002f4 	.word	0x200002f4
 8001ab4:	20000408 	.word	0x20000408

08001ab8 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_UART_RxCpltCallback+0x40>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d112      	bne.n	8001af0 <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_UART_RxCpltCallback+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <HAL_UART_RxCpltCallback+0x48>)
 8001ad2:	f00a fcd4 	bl	800c47e <svRingBuffer_Push>
 8001ad6:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f113 0f02 	cmn.w	r3, #2
 8001ade:	d102      	bne.n	8001ae6 <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8001ae0:	4807      	ldr	r0, [pc, #28]	; (8001b00 <HAL_UART_RxCpltCallback+0x48>)
 8001ae2:	f00a fcb4 	bl	800c44e <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4904      	ldr	r1, [pc, #16]	; (8001afc <HAL_UART_RxCpltCallback+0x44>)
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <HAL_UART_RxCpltCallback+0x4c>)
 8001aec:	f007 ffa0 	bl	8009a30 <HAL_UART_Receive_IT>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40004400 	.word	0x40004400
 8001afc:	200002ec 	.word	0x200002ec
 8001b00:	20000004 	.word	0x20000004
 8001b04:	200002f4 	.word	0x200002f4

08001b08 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <svDebugRxChar+0x20>)
 8001b0e:	f00a fc7c 	bl	800c40a <svRingBuffer_GetCount>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <svDebugRxChar+0x20>)
 8001b1a:	f00a fce4 	bl	800c4e6 <svRingBuffer_Pop>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	e000      	b.n	8001b24 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8001b22:	2300      	movs	r3, #0
	}
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000004 	.word	0x20000004

08001b2c <svDebugProcess>:

void svDebugProcess(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff ff86 	bl	8001a44 <IsUartConnected>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d01a      	beq.n	8001b74 <svDebugProcess+0x48>
	  svCLI_Handler();
 8001b3e:	f00a fb11 	bl	800c164 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <svDebugProcess+0x50>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d114      	bne.n	8001b74 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <svDebugProcess+0x54>)
 8001b4c:	f00d f8a3 	bl	800ec96 <lwrb_get_linear_block_read_length>
 8001b50:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <svDebugProcess+0x54>)
 8001b5a:	f00d f880 	bl	800ec5e <lwrb_get_linear_block_read_address>
 8001b5e:	4601      	mov	r1, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff ff7c 	bl	8001a64 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <svDebugProcess+0x54>)
 8001b70:	f00d f8c4 	bl	800ecfc <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000408 	.word	0x20000408
 8001b80:	2000040c 	.word	0x2000040c

08001b84 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d11a      	bne.n	8001bce <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff ff53 	bl	8001a44 <IsUartConnected>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d014      	beq.n	8001bce <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8001ba4:	f000 f8be 	bl	8001d24 <HAL_GetTick>
 8001ba8:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8001baa:	e003      	b.n	8001bb4 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <svDebugCallback+0x54>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d006      	beq.n	8001bc2 <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8001bb4:	6978      	ldr	r0, [r7, #20]
 8001bb6:	f000 f863 	bl	8001c80 <GetElapsedTime>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b63      	cmp	r3, #99	; 0x63
 8001bbe:	d9f5      	bls.n	8001bac <svDebugCallback+0x28>
 8001bc0:	e000      	b.n	8001bc4 <svDebugCallback+0x40>
					break;
 8001bc2:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <svDebugCallback+0x54>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8001bca:	f7ff ffaf 	bl	8001b2c <svDebugProcess>
		}
	}
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000408 	.word	0x20000408

08001bdc <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <svDebugInit+0x2c>)
 8001be2:	f00a fc34 	bl	800c44e <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8001be6:	2200      	movs	r2, #0
 8001be8:	4908      	ldr	r1, [pc, #32]	; (8001c0c <svDebugInit+0x30>)
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <svDebugInit+0x34>)
 8001bec:	f009 fe3c 	bl	800b868 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8001bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <svDebugInit+0x38>)
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <svDebugInit+0x3c>)
 8001bf8:	f00c ff12 	bl	800ea20 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <svDebugInit+0x40>)
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <svDebugInit+0x3c>)
 8001c00:	f00c ff2f 	bl	800ea62 <lwrb_set_evt_fn>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	08001c21 	.word	0x08001c21
 8001c10:	08001b09 	.word	0x08001b09
 8001c14:	20000420 	.word	0x20000420
 8001c18:	2000040c 	.word	0x2000040c
 8001c1c:	08001b85 	.word	0x08001b85

08001c20 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <svDebugPutChar+0x20>)
 8001c32:	f00c ff2f 	bl	800ea94 <lwrb_write>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000040c 	.word	0x2000040c

08001c44 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8001c44:	b40f      	push	{r0, r1, r2, r3}
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	6939      	ldr	r1, [r7, #16]
 8001c56:	4808      	ldr	r0, [pc, #32]	; (8001c78 <svDebugMessage+0x34>)
 8001c58:	f00d f94a 	bl	800eef0 <vsiprintf>
 8001c5c:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4905      	ldr	r1, [pc, #20]	; (8001c78 <svDebugMessage+0x34>)
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <svDebugMessage+0x38>)
 8001c66:	f00c ff15 	bl	800ea94 <lwrb_write>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c74:	b004      	add	sp, #16
 8001c76:	4770      	bx	lr
 8001c78:	20000624 	.word	0x20000624
 8001c7c:	2000040c 	.word	0x2000040c

08001c80 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8001c88:	f000 f84c 	bl	8001d24 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d204      	bcs.n	8001ca0 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	e002      	b.n	8001ca6 <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
	}
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f912 	bl	8001ede <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cba:	f001 ffa3 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_Init+0x40>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	490a      	ldr	r1, [pc, #40]	; (8001cf4 <HAL_Init+0x44>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_Init+0x48>)
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd4:	200f      	movs	r0, #15
 8001cd6:	f7ff f95f 	bl	8000f98 <HAL_InitTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e002      	b.n	8001cea <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7fe ff4d 	bl	8000b82 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	44020c00 	.word	0x44020c00
 8001cf4:	0800f9b8 	.word	0x0800f9b8
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000028 	.word	0x20000028
 8001d20:	200006a4 	.word	0x200006a4

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200006a4 	.word	0x200006a4

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000028 	.word	0x20000028

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	; (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff4c 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f02:	f7ff ff63 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	6978      	ldr	r0, [r7, #20]
 8001f0e:	f7ff ffb3 	bl	8001e78 <NVIC_EncodePriority>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff82 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff56 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001f4c:	f7ff feea 	bl	8001d24 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e06b      	b.n	8002034 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d008      	beq.n	8001f7a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e05c      	b.n	8002034 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0204 	orr.w	r2, r2, #4
 8001f88:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001f92:	e020      	b.n	8001fd6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001f94:	f7ff fec6 	bl	8001d24 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d919      	bls.n	8001fd6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f043 0210 	orr.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e02e      	b.n	8002034 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0d7      	beq.n	8001f94 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0202 	orr.w	r2, r2, #2
 8001ff2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002004:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201e:	2201      	movs	r2, #1
 8002020:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e019      	b.n	8002082 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d004      	beq.n	8002064 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e00e      	b.n	8002082 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2204      	movs	r2, #4
 8002068:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e147      	b.n	8002332 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fd6e 	bl	8000b98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0210 	bic.w	r2, r2, #16
 80020ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020cc:	f7ff fe2a 	bl	8001d24 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020d2:	e012      	b.n	80020fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80020d4:	f7ff fe26 	bl	8001d24 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b0a      	cmp	r3, #10
 80020e0:	d90b      	bls.n	80020fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e11b      	b.n	8002332 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b08      	cmp	r3, #8
 8002106:	d0e5      	beq.n	80020d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002118:	f7ff fe04 	bl	8001d24 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800211e:	e012      	b.n	8002146 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002120:	f7ff fe00 	bl	8001d24 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b0a      	cmp	r3, #10
 800212c:	d90b      	bls.n	8002146 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0f5      	b.n	8002332 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0e5      	beq.n	8002120 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0202 	orr.w	r2, r2, #2
 8002162:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a74      	ldr	r2, [pc, #464]	; (800233c <HAL_FDCAN_Init+0x2ac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d103      	bne.n	8002176 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800216e:	4a74      	ldr	r2, [pc, #464]	; (8002340 <HAL_FDCAN_Init+0x2b0>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7c1b      	ldrb	r3, [r3, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d108      	bne.n	8002190 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	e007      	b.n	80021a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7c5b      	ldrb	r3, [r3, #17]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d108      	bne.n	80021ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b6:	619a      	str	r2, [r3, #24]
 80021b8:	e007      	b.n	80021ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7c9b      	ldrb	r3, [r3, #18]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021e0:	619a      	str	r2, [r3, #24]
 80021e2:	e007      	b.n	80021f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002218:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0210 	bic.w	r2, r2, #16
 8002228:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0204 	orr.w	r2, r2, #4
 8002240:	619a      	str	r2, [r3, #24]
 8002242:	e02c      	b.n	800229e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d028      	beq.n	800229e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d01c      	beq.n	800228e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002262:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0210 	orr.w	r2, r2, #16
 8002272:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d110      	bne.n	800229e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	e007      	b.n	800229e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	3b01      	subs	r3, #1
 80022c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d2:	d115      	bne.n	8002300 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	3b01      	subs	r3, #1
 80022e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	3b01      	subs	r3, #1
 80022ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80022fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9ae 	bl	8002678 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	4000a400 	.word	0x4000a400
 8002340:	4000a500 	.word	0x4000a500

08002344 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002360:	4013      	ands	r3, r2
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002378:	4013      	ands	r3, r2
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	4013      	ands	r3, r2
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800239e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	6a3a      	ldr	r2, [r7, #32]
 80023a8:	4013      	ands	r3, r2
 80023aa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023b6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2240      	movs	r2, #64	; 0x40
 80023ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f921 	bl	8002638 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d019      	beq.n	8002434 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d014      	beq.n	8002434 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002412:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8e3 	bl	80025fa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002440:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f8a2 	bl	800258e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002456:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8a2 	bl	80025a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800246e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8a2 	bl	80025ba <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002492:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f89b 	bl	80025d0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d018      	beq.n	80024d6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d013      	beq.n	80024d6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80024b6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80024ce:	68f9      	ldr	r1, [r7, #12]
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f887 	bl	80025e4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d007      	beq.n	80024fa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f88b 	bl	8002610 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00c      	beq.n	800251e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002516:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f883 	bl	8002624 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00f      	beq.n	8002548 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002556:	69f9      	ldr	r1, [r7, #28]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f881 	bl	8002660 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a3a      	ldr	r2, [r7, #32]
 800256a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f863 	bl	800264c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002586:	bf00      	nop
 8002588:	3730      	adds	r7, #48	; 0x30
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002682:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d103      	bne.n	8002696 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002694:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a4:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ac:	041a      	lsls	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ca:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	061a      	lsls	r2, r3, #24
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e005      	b.n	8002718 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3304      	adds	r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3f3      	bcc.n	800270c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	4000ac00 	.word	0x4000ac00
 8002738:	4000a800 	.word	0x4000a800

0800273c <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_FLASH_Program+0xd8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_FLASH_Program+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e05a      	b.n	800280a <HAL_FLASH_Program+0xce>
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_FLASH_Program+0xd8>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800275a:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <HAL_FLASH_Program+0xd8>)
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002764:	f000 f8a4 	bl	80028b0 <FLASH_WaitForLastOperation>
 8002768:	4603      	mov	r3, r0
 800276a:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 800276c:	7ffb      	ldrb	r3, [r7, #31]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d147      	bne.n	8002802 <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8002772:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_FLASH_Program+0xd8>)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_FLASH_Program+0xdc>)
 800277a:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002782:	2b02      	cmp	r3, #2
 8002784:	d104      	bne.n	8002790 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	f000 f8df 	bl	800294c <FLASH_Program_QuadWord>
 800278e:	e01b      	b.n	80027c8 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_FLASH_Program+0xe0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <HAL_FLASH_Program+0x64>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a21      	ldr	r2, [pc, #132]	; (8002820 <HAL_FLASH_Program+0xe4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d104      	bne.n	80027aa <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68b8      	ldr	r0, [r7, #8]
 80027a4:	f000 f90e 	bl	80029c4 <FLASH_Program_QuadWord_OBK>
 80027a8:	e00e      	b.n	80027c8 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027b0:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <HAL_FLASH_Program+0xe8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d104      	bne.n	80027c0 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68b8      	ldr	r0, [r7, #8]
 80027ba:	f000 f94f 	bl	8002a5c <FLASH_Program_HalfWord>
 80027be:	e003      	b.n	80027c8 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68b8      	ldr	r0, [r7, #8]
 80027c4:	f000 f94a 	bl	8002a5c <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027cc:	f000 f870 	bl	80028b0 <FLASH_WaitForLastOperation>
 80027d0:	4603      	mov	r3, r0
 80027d2:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	43db      	mvns	r3, r3
 80027e4:	401a      	ands	r2, r3
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <HAL_FLASH_Program+0xe4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d107      	bne.n	8002802 <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_FLASH_Program+0xec>)
 80027f4:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0204 	bic.w	r2, r3, #4
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_FLASH_Program+0xd8>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002808:	7ffb      	ldrb	r3, [r7, #31]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000002c 	.word	0x2000002c
 8002818:	40022028 	.word	0x40022028
 800281c:	10000002 	.word	0x10000002
 8002820:	10000006 	.word	0x10000006
 8002824:	40000002 	.word	0x40000002
 8002828:	40022040 	.word	0x40022040

0800282c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_FLASH_Unlock+0x40>)
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_FLASH_Unlock+0x40>)
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_FLASH_Unlock+0x44>)
 8002846:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_FLASH_Unlock+0x40>)
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_FLASH_Unlock+0x48>)
 800284c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_FLASH_Unlock+0x40>)
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800285e:	79fb      	ldrb	r3, [r7, #7]
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40022000 	.word	0x40022000
 8002870:	45670123 	.word	0x45670123
 8002874:	cdef89ab 	.word	0xcdef89ab

08002878 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_FLASH_Lock+0x34>)
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_FLASH_Lock+0x34>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_FLASH_Lock+0x34>)
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800289e:	79fb      	ldrb	r3, [r7, #7]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40022000 	.word	0x40022000

080028b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff fa34 	bl	8001d24 <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <FLASH_WaitForLastOperation+0x90>)
 80028c0:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80028c2:	e010      	b.n	80028e6 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d00c      	beq.n	80028e6 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028cc:	f7ff fa2a 	bl	8001d24 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d302      	bcc.n	80028e2 <FLASH_WaitForLastOperation+0x32>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e027      	b.n	8002936 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030b 	and.w	r3, r3, #11
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e8      	bne.n	80028c4 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <FLASH_WaitForLastOperation+0x94>)
 80028f4:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 80028fe:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <FLASH_WaitForLastOperation+0x98>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <FLASH_WaitForLastOperation+0x98>)
 8002910:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e00a      	b.n	8002936 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002932:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40022020 	.word	0x40022020
 8002944:	40022030 	.word	0x40022030
 8002948:	2000002c 	.word	0x2000002c

0800294c <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800294c:	b480      	push	{r7}
 800294e:	b08b      	sub	sp, #44	; 0x2c
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8002956:	2304      	movs	r3, #4
 8002958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <FLASH_Program_QuadWord+0x74>)
 8002966:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f043 0202 	orr.w	r2, r3, #2
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	613b      	str	r3, [r7, #16]
  return(result);
 800297a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800297c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800297e:	b672      	cpsid	i
}
 8002980:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	3304      	adds	r3, #4
 800298e:	623b      	str	r3, [r7, #32]
    src_addr++;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3304      	adds	r3, #4
 8002994:	61fb      	str	r3, [r7, #28]
    index--;
 8002996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800299a:	3b01      	subs	r3, #1
 800299c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 80029a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ec      	bne.n	8002982 <FLASH_Program_QuadWord+0x36>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f383 8810 	msr	PRIMASK, r3
}
 80029b2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80029b4:	bf00      	nop
 80029b6:	372c      	adds	r7, #44	; 0x2c
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40022028 	.word	0x40022028

080029c4 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b08b      	sub	sp, #44	; 0x2c
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80029ce:	2304      	movs	r3, #4
 80029d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <FLASH_Program_QuadWord_OBK+0x8c>)
 80029de:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <FLASH_Program_QuadWord_OBK+0x90>)
 80029e2:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f043 0202 	orr.w	r2, r3, #2
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <FLASH_Program_QuadWord_OBK+0x94>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	431a      	orrs	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a02:	f3ef 8310 	mrs	r3, PRIMASK
 8002a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a08:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	623b      	str	r3, [r7, #32]
    src_addr++;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3304      	adds	r3, #4
 8002a22:	61fb      	str	r3, [r7, #28]
    index--;
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8002a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ec      	bne.n	8002a10 <FLASH_Program_QuadWord_OBK+0x4c>
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f383 8810 	msr	PRIMASK, r3
}
 8002a40:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002a42:	bf00      	nop
 8002a44:	372c      	adds	r7, #44	; 0x2c
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40022028 	.word	0x40022028
 8002a54:	40022040 	.word	0x40022040
 8002a58:	2000002c 	.word	0x2000002c

08002a5c <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <FLASH_Program_HalfWord+0x30>)
 8002a68:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f043 0202 	orr.w	r2, r3, #2
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8812      	ldrh	r2, [r2, #0]
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	801a      	strh	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40022028 	.word	0x40022028

08002a90 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a9a:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <HAL_FLASHEx_Erase+0xf4>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_FLASHEx_Erase+0x16>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e06a      	b.n	8002b7c <HAL_FLASHEx_Erase+0xec>
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <HAL_FLASHEx_Erase+0xf4>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002aac:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <HAL_FLASHEx_Erase+0xf4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab6:	f7ff fefb 	bl	80028b0 <FLASH_WaitForLastOperation>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d157      	bne.n	8002b74 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_FLASHEx_Erase+0xf4>)
 8002aca:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_FLASHEx_Erase+0xf8>)
 8002ace:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ad8:	f248 0208 	movw	r2, #32776	; 0x8008
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10b      	bne.n	8002af8 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f853 	bl	8002b90 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002aea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aee:	f7ff fedf 	bl	80028b0 <FLASH_WaitForLastOperation>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]
 8002af6:	e033      	b.n	8002b60 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <HAL_FLASHEx_Erase+0xfc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8002b02:	f000 f8b5 	bl	8002c70 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b0a:	f7ff fed1 	bl	80028b0 <FLASH_WaitForLastOperation>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	75fb      	strb	r3, [r7, #23]
 8002b12:	e025      	b.n	8002b60 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e015      	b.n	8002b50 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6938      	ldr	r0, [r7, #16]
 8002b2c:	f000 f868 	bl	8002c00 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b34:	f7ff febc 	bl	80028b0 <FLASH_WaitForLastOperation>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	601a      	str	r2, [r3, #0]
          break;
 8002b48:	e00a      	b.n	8002b60 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4413      	add	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d3e1      	bcc.n	8002b24 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_FLASHEx_Erase+0xf4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]

  return status;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2000002c 	.word	0x2000002c
 8002b88:	40022028 	.word	0x40022028
 8002b8c:	80000008 	.word	0x80000008

08002b90 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <FLASH_MassErase+0x6c>)
 8002b9a:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d108      	bne.n	8002bb8 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8002bb6:	e01b      	b.n	8002bf0 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bca:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002bce:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40022028 	.word	0x40022028

08002c00 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <FLASH_Erase_Sector+0x6c>)
 8002c0c:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c20:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	019b      	lsls	r3, r3, #6
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8002c3a:	e010      	b.n	8002c5e <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c56:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6013      	str	r3, [r2, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40022028 	.word	0x40022028

08002c70 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <FLASH_OBKErase+0x24>)
 8002c78:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f043 0208 	orr.w	r2, r3, #8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40022040 	.word	0x40022040

08002c98 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ca6:	e136      	b.n	8002f16 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8128 	beq.w	8002f10 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x38>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b12      	cmp	r3, #18
 8002cce:	d125      	bne.n	8002d1c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cdc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	6979      	ldr	r1, [r7, #20]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4013      	ands	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d00b      	beq.n	8002d70 <HAL_GPIO_Init+0xd8>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d130      	bne.n	8002dd2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4013      	ands	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002da6:	2201      	movs	r2, #1
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4013      	ands	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0201 	and.w	r2, r3, #1
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d017      	beq.n	8002e0a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	2203      	movs	r2, #3
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4013      	ands	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d07c      	beq.n	8002f10 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e16:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3318      	adds	r3, #24
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4013      	ands	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0a9a      	lsrs	r2, r3, #10
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_GPIO_Init+0x2a0>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	f002 0203 	and.w	r2, r2, #3
 8002e48:	00d2      	lsls	r2, r2, #3
 8002e4a:	4093      	lsls	r3, r2
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e52:	4938      	ldr	r1, [pc, #224]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3318      	adds	r3, #24
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002e84:	4a2b      	ldr	r2, [pc, #172]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4013      	ands	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002eae:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002eda:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <HAL_GPIO_Init+0x29c>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	3301      	adds	r3, #1
 8002f14:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f aec1 	bne.w	8002ca8 <HAL_GPIO_Init+0x10>
  }
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	44022000 	.word	0x44022000
 8002f38:	002f7f7f 	.word	0x002f7f7f

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	041a      	lsls	r2, r3, #16
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43d9      	mvns	r1, r3
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002fb6:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fb2c 	bl	800061c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002fd0:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f807 	bl	8002fec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	44022000 	.word	0x44022000

08002fec <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_ICACHE_Enable+0x1c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <HAL_ICACHE_Enable+0x1c>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40030400 	.word	0x40030400

08003024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f000 bc28 	b.w	8003888 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003038:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f003 0318 	and.w	r3, r3, #24
 8003040:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003042:	4b92      	ldr	r3, [pc, #584]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05b      	beq.n	8003110 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x46>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b18      	cmp	r3, #24
 8003062:	d114      	bne.n	800308e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d111      	bne.n	800308e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f000 bc08 	b.w	8003888 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003078:	4b84      	ldr	r3, [pc, #528]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	4981      	ldr	r1, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003088:	4313      	orrs	r3, r2
 800308a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800308c:	e040      	b.n	8003110 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d023      	beq.n	80030de <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003096:	4b7d      	ldr	r3, [pc, #500]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7c      	ldr	r2, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fe3f 	bl	8001d24 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030aa:	f7fe fe3b 	bl	8001d24 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e3e5      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80030bc:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80030c8:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	496d      	ldr	r1, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	618b      	str	r3, [r1, #24]
 80030dc:	e018      	b.n	8003110 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030de:	4b6b      	ldr	r3, [pc, #428]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6a      	ldr	r2, [pc, #424]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80030e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fe1b 	bl	8001d24 <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030f2:	f7fe fe17 	bl	8001d24 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e3c1      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003104:	4b61      	ldr	r3, [pc, #388]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a0 	beq.w	800325e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b10      	cmp	r3, #16
 8003122:	d005      	beq.n	8003130 <HAL_RCC_OscConfig+0x10c>
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b18      	cmp	r3, #24
 8003128:	d109      	bne.n	800313e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 8092 	bne.w	800325e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e3a4      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x132>
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a4f      	ldr	r2, [pc, #316]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e058      	b.n	8003208 <HAL_RCC_OscConfig+0x1e4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x160>
 800315e:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4a      	ldr	r2, [pc, #296]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b48      	ldr	r3, [pc, #288]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a47      	ldr	r2, [pc, #284]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003170:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b45      	ldr	r3, [pc, #276]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a44      	ldr	r2, [pc, #272]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800317c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e041      	b.n	8003208 <HAL_RCC_OscConfig+0x1e4>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800318c:	d112      	bne.n	80031b4 <HAL_RCC_OscConfig+0x190>
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a3e      	ldr	r2, [pc, #248]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3b      	ldr	r2, [pc, #236]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a38      	ldr	r2, [pc, #224]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e029      	b.n	8003208 <HAL_RCC_OscConfig+0x1e4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1c0>
 80031be:	4b33      	ldr	r3, [pc, #204]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a32      	ldr	r2, [pc, #200]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2f      	ldr	r2, [pc, #188]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2c      	ldr	r2, [pc, #176]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e011      	b.n	8003208 <HAL_RCC_OscConfig+0x1e4>
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_RCC_OscConfig+0x268>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003202:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fd88 	bl	8001d24 <HAL_GetTick>
 8003214:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003218:	f7fe fd84 	bl	8001d24 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e32e      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCC_OscConfig+0x268>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x1f4>
 8003236:	e012      	b.n	800325e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fd74 	bl	8001d24 <HAL_GetTick>
 800323c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003240:	f7fe fd70 	bl	8001d24 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e31a      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RCC_OscConfig+0x268>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 809a 	beq.w	80033a0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x25a>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b18      	cmp	r3, #24
 8003276:	d149      	bne.n	800330c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d146      	bne.n	800330c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e2fe      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
 800328a:	bf00      	nop
 800328c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003296:	4b9a      	ldr	r3, [pc, #616]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0218 	and.w	r2, r3, #24
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d014      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80032a6:	4b96      	ldr	r3, [pc, #600]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0218 	bic.w	r2, r3, #24
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	4993      	ldr	r1, [pc, #588]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80032b8:	f000 fdd0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032bc:	4b91      	ldr	r3, [pc, #580]	; (8003504 <HAL_RCC_OscConfig+0x4e0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fe69 	bl	8000f98 <HAL_InitTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e2db      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fd28 	bl	8001d24 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032d8:	f7fe fd24 	bl	8001d24 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e2ce      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80032f6:	4b82      	ldr	r3, [pc, #520]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	497e      	ldr	r1, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800330a:	e049      	b.n	80033a0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02c      	beq.n	800336e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003314:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 0218 	bic.w	r2, r3, #24
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	4977      	ldr	r1, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe fcf7 	bl	8001d24 <HAL_GetTick>
 8003336:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800333a:	f7fe fcf3 	bl	8001d24 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e29d      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800334c:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	4966      	ldr	r1, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	610b      	str	r3, [r1, #16]
 800336c:	e018      	b.n	80033a0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a63      	ldr	r2, [pc, #396]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe fcd3 	bl	8001d24 <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003382:	f7fe fccf 	bl	8001d24 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e279      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003394:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03c      	beq.n	8003426 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b4:	4b52      	ldr	r3, [pc, #328]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80033b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033ba:	4a51      	ldr	r2, [pc, #324]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80033bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe fcae 	bl	8001d24 <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80033cc:	f7fe fcaa 	bl	8001d24 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e254      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80033de:	4b48      	ldr	r3, [pc, #288]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80033e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <HAL_RCC_OscConfig+0x3a8>
 80033ec:	e01b      	b.n	8003426 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ee:	4b44      	ldr	r3, [pc, #272]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80033f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80033f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe fc91 	bl	8001d24 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003406:	f7fe fc8d 	bl	8001d24 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e237      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 800341a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800341e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ef      	bne.n	8003406 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80d2 	beq.w	80035d8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x4e4>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d118      	bne.n	8003472 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_OscConfig+0x4e4>)
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	4a30      	ldr	r2, [pc, #192]	; (8003508 <HAL_RCC_OscConfig+0x4e4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344c:	f7fe fc6a 	bl	8001d24 <HAL_GetTick>
 8003450:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003454:	f7fe fc66 	bl	8001d24 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e210      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003466:	4b28      	ldr	r3, [pc, #160]	; (8003508 <HAL_RCC_OscConfig+0x4e4>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d108      	bne.n	800348c <HAL_RCC_OscConfig+0x468>
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 800347c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003480:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800348a:	e074      	b.n	8003576 <HAL_RCC_OscConfig+0x552>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d118      	bne.n	80034c6 <HAL_RCC_OscConfig+0x4a2>
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 8003496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800349a:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ba:	4a11      	ldr	r2, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034c4:	e057      	b.n	8003576 <HAL_RCC_OscConfig+0x552>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d11e      	bne.n	800350c <HAL_RCC_OscConfig+0x4e8>
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e4:	4a06      	ldr	r2, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034f4:	4a02      	ldr	r2, [pc, #8]	; (8003500 <HAL_RCC_OscConfig+0x4dc>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034fe:	e03a      	b.n	8003576 <HAL_RCC_OscConfig+0x552>
 8003500:	44020c00 	.word	0x44020c00
 8003504:	20000024 	.word	0x20000024
 8003508:	44020800 	.word	0x44020800
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b85      	cmp	r3, #133	; 0x85
 8003512:	d118      	bne.n	8003546 <HAL_RCC_OscConfig+0x522>
 8003514:	4ba2      	ldr	r3, [pc, #648]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800351a:	4aa1      	ldr	r2, [pc, #644]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003524:	4b9e      	ldr	r3, [pc, #632]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800352a:	4a9d      	ldr	r2, [pc, #628]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003534:	4b9a      	ldr	r3, [pc, #616]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800353a:	4a99      	ldr	r2, [pc, #612]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003544:	e017      	b.n	8003576 <HAL_RCC_OscConfig+0x552>
 8003546:	4b96      	ldr	r3, [pc, #600]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800354c:	4a94      	ldr	r2, [pc, #592]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003556:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800355c:	4a90      	ldr	r2, [pc, #576]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800355e:	f023 0304 	bic.w	r3, r3, #4
 8003562:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003566:	4b8e      	ldr	r3, [pc, #568]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800356c:	4a8c      	ldr	r2, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800356e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fe fbd1 	bl	8001d24 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fbcd 	bl	8001d24 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e175      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800359e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0ed      	beq.n	8003586 <HAL_RCC_OscConfig+0x562>
 80035aa:	e015      	b.n	80035d8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe fbba 	bl	8001d24 <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f7fe fbb6 	bl	8001d24 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e15e      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ca:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80035cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ed      	bne.n	80035b4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d036      	beq.n	8003652 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d019      	beq.n	8003620 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035ec:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6b      	ldr	r2, [pc, #428]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80035f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe fb94 	bl	8001d24 <HAL_GetTick>
 80035fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003600:	f7fe fb90 	bl	8001d24 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e13a      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x5dc>
 800361e:	e018      	b.n	8003652 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003620:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800362a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe fb7a 	bl	8001d24 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003634:	f7fe fb76 	bl	8001d24 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e120      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003646:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8115 	beq.w	8003886 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b18      	cmp	r3, #24
 8003660:	f000 80af 	beq.w	80037c2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2b02      	cmp	r3, #2
 800366a:	f040 8086 	bne.w	800377a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4b      	ldr	r2, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe fb53 	bl	8001d24 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003682:	f7fe fb4f 	bl	8001d24 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0f9      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80036a0:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036a8:	f023 0303 	bic.w	r3, r3, #3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036b4:	0212      	lsls	r2, r2, #8
 80036b6:	430a      	orrs	r2, r1
 80036b8:	4939      	ldr	r1, [pc, #228]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	628b      	str	r3, [r1, #40]	; 0x28
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	3b01      	subs	r3, #1
 80036ce:	025b      	lsls	r3, r3, #9
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	3b01      	subs	r3, #1
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036ee:	492c      	ldr	r1, [pc, #176]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 80036fa:	f023 0310 	bic.w	r3, r3, #16
 80036fe:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800370a:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003710:	f043 0310 	orr.w	r3, r3, #16
 8003714:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	f023 020c 	bic.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	491f      	ldr	r1, [pc, #124]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f023 0220 	bic.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003734:	491a      	ldr	r1, [pc, #104]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800373a:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800374c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fe fae7 	bl	8001d24 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800375a:	f7fe fae3 	bl	8001d24 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e08d      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x736>
 8003778:	e085      	b.n	8003886 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <HAL_RCC_OscConfig+0x77c>)
 8003780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fe facd 	bl	8001d24 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800378e:	f7fe fac9 	bl	8001d24 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d903      	bls.n	80037a4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e073      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
 80037a0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037a4:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ee      	bne.n	800378e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80037b0:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	4a36      	ldr	r2, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 80037b6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	6293      	str	r3, [r2, #40]	; 0x28
 80037c0:	e061      	b.n	8003886 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80037c2:	4b33      	ldr	r3, [pc, #204]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d031      	beq.n	800383a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d12a      	bne.n	800383a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d122      	bne.n	800383a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d11a      	bne.n	800383a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d111      	bne.n	800383a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d108      	bne.n	800383a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	0e1b      	lsrs	r3, r3, #24
 800382c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e024      	b.n	8003888 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800384c:	429a      	cmp	r2, r3
 800384e:	d01a      	beq.n	8003886 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	4a0e      	ldr	r2, [pc, #56]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 8003856:	f023 0310 	bic.w	r3, r3, #16
 800385a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fa62 	bl	8001d24 <HAL_GetTick>
 8003860:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003862:	bf00      	nop
 8003864:	f7fe fa5e 	bl	8001d24 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4293      	cmp	r3, r2
 800386e:	d0f9      	beq.n	8003864 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	4a06      	ldr	r2, [pc, #24]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_RCC_OscConfig+0x86c>)
 8003880:	f043 0310 	orr.w	r3, r3, #16
 8003884:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	44020c00 	.word	0x44020c00

08003894 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e19e      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b83      	ldr	r3, [pc, #524]	; (8003ab8 <HAL_RCC_ClockConfig+0x224>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d910      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b80      	ldr	r3, [pc, #512]	; (8003ab8 <HAL_RCC_ClockConfig+0x224>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 020f 	bic.w	r2, r3, #15
 80038be:	497e      	ldr	r1, [pc, #504]	; (8003ab8 <HAL_RCC_ClockConfig+0x224>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b7c      	ldr	r3, [pc, #496]	; (8003ab8 <HAL_RCC_ClockConfig+0x224>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e186      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	4b74      	ldr	r3, [pc, #464]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d909      	bls.n	800390a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80038f6:	4b71      	ldr	r3, [pc, #452]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	496d      	ldr	r1, [pc, #436]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003906:	4313      	orrs	r3, r2
 8003908:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d012      	beq.n	800393c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	4b68      	ldr	r3, [pc, #416]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003924:	429a      	cmp	r2, r3
 8003926:	d909      	bls.n	800393c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	4961      	ldr	r1, [pc, #388]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003938:	4313      	orrs	r3, r2
 800393a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d010      	beq.n	800396a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003954:	429a      	cmp	r2, r3
 8003956:	d908      	bls.n	800396a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003958:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4955      	ldr	r1, [pc, #340]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003966:	4313      	orrs	r3, r2
 8003968:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d010      	beq.n	8003998 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	4b50      	ldr	r3, [pc, #320]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	429a      	cmp	r2, r3
 8003984:	d908      	bls.n	8003998 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003986:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f023 020f 	bic.w	r2, r3, #15
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	494a      	ldr	r1, [pc, #296]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003994:	4313      	orrs	r3, r2
 8003996:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8093 	beq.w	8003acc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80039ae:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e113      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c6:	4b3d      	ldr	r3, [pc, #244]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d115      	bne.n	80039fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e107      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039de:	4b37      	ldr	r3, [pc, #220]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0fb      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ee:	4b33      	ldr	r3, [pc, #204]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0f3      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80039fe:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	492c      	ldr	r1, [pc, #176]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fe f988 	bl	8001d24 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d112      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7fe f980 	bl	8001d24 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e0d7      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a36:	4b21      	ldr	r3, [pc, #132]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0318 	and.w	r3, r3, #24
 8003a3e:	2b18      	cmp	r3, #24
 8003a40:	d1ee      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x18c>
 8003a42:	e043      	b.n	8003acc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d112      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4e:	f7fe f969 	bl	8001d24 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0c0      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 0318 	and.w	r3, r3, #24
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d1ee      	bne.n	8003a4e <HAL_RCC_ClockConfig+0x1ba>
 8003a70:	e02c      	b.n	8003acc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d122      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fe f952 	bl	8001d24 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0a9      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x228>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 0318 	and.w	r3, r3, #24
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d1ee      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x1e8>
 8003a9e:	e015      	b.n	8003acc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fe f940 	bl	8001d24 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d906      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e097      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
 8003ab6:	bf00      	nop
 8003ab8:	40022000 	.word	0x40022000
 8003abc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f003 0318 	and.w	r3, r3, #24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e9      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d208      	bcs.n	8003afa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003ae8:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f023 020f 	bic.w	r2, r3, #15
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	493e      	ldr	r1, [pc, #248]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <HAL_RCC_ClockConfig+0x360>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d210      	bcs.n	8003b2a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b08:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <HAL_RCC_ClockConfig+0x360>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 020f 	bic.w	r2, r3, #15
 8003b10:	4938      	ldr	r1, [pc, #224]	; (8003bf4 <HAL_RCC_ClockConfig+0x360>)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_RCC_ClockConfig+0x360>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e05d      	b.n	8003be6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d208      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b46:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	4927      	ldr	r1, [pc, #156]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d209      	bcs.n	8003b8a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003b76:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	491a      	ldr	r1, [pc, #104]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d209      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003bbc:	f000 f822 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x35c>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490b      	ldr	r1, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x364>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x368>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x36c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd f9dc 	bl	8000f98 <HAL_InitTick>
 8003be0:	4603      	mov	r3, r0
 8003be2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003be4:	7afb      	ldrb	r3, [r7, #11]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	44020c00 	.word	0x44020c00
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	0800f9b8 	.word	0x0800f9b8
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	20000024 	.word	0x20000024

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c0a:	4b8c      	ldr	r3, [pc, #560]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0318 	and.w	r3, r3, #24
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c16:	4b8a      	ldr	r3, [pc, #552]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	e107      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1c:	4b87      	ldr	r3, [pc, #540]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 0318 	and.w	r3, r3, #24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d112      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003c28:	4b84      	ldr	r3, [pc, #528]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c34:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	4a81      	ldr	r2, [pc, #516]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	e0f1      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003c48:	4b7e      	ldr	r3, [pc, #504]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e0ee      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c4e:	4b7b      	ldr	r3, [pc, #492]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 0318 	and.w	r3, r3, #24
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c5a:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x244>)
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e0e5      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c60:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 0318 	and.w	r3, r3, #24
 8003c68:	2b18      	cmp	r3, #24
 8003c6a:	f040 80dd 	bne.w	8003e28 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c6e:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003c78:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c82:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003c84:	4b6d      	ldr	r3, [pc, #436]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c90:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80b7 	beq.w	8003e22 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xbe>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d056      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x16a>
 8003cc0:	e077      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003cc2:	4b5e      	ldr	r3, [pc, #376]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d02d      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cce:	4b5b      	ldr	r3, [pc, #364]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	08db      	lsrs	r3, r3, #3
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	4a5a      	ldr	r2, [pc, #360]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x240>)
 8003cda:	fa22 f303 	lsr.w	r3, r2, r3
 8003cde:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d00:	ee07 3a90 	vmov	s15, r3
 8003d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d08:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d0c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003e4c <HAL_RCC_GetSysClockFreq+0x248>
 8003d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003d28:	e065      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d34:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003e50 <HAL_RCC_GetSysClockFreq+0x24c>
 8003d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d50:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003e4c <HAL_RCC_GetSysClockFreq+0x248>
 8003d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d68:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003d6c:	e043      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d78:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x250>
 8003d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d80:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d90:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d94:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003e4c <HAL_RCC_GetSysClockFreq+0x248>
 8003d98:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dac:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003db0:	e021      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e58 <HAL_RCC_GetSysClockFreq+0x254>
 8003dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003e4c <HAL_RCC_GetSysClockFreq+0x248>
 8003ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003df4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x238>)
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	0a5b      	lsrs	r3, r3, #9
 8003dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e00:	3301      	adds	r3, #1
 8003e02:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e0e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1a:	ee17 3a90 	vmov	r3, s15
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e004      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e001      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x240>)
 8003e2a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	44020c00 	.word	0x44020c00
 8003e40:	003d0900 	.word	0x003d0900
 8003e44:	03d09000 	.word	0x03d09000
 8003e48:	007a1200 	.word	0x007a1200
 8003e4c:	46000000 	.word	0x46000000
 8003e50:	4c742400 	.word	0x4c742400
 8003e54:	4af42400 	.word	0x4af42400
 8003e58:	4a742400 	.word	0x4a742400

08003e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e60:	f7ff fed0 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e6a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e6e:	4907      	ldr	r1, [pc, #28]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x30>)
 8003e70:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e72:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e7c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e80:	681b      	ldr	r3, [r3, #0]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	44020c00 	.word	0x44020c00
 8003e8c:	0800f9b8 	.word	0x0800f9b8
 8003e90:	20000000 	.word	0x20000000

08003e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003e98:	f7ff ffe0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4904      	ldr	r1, [pc, #16]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	44020c00 	.word	0x44020c00
 8003ebc:	0800f9c8 	.word	0x0800f9c8

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003ec4:	f7ff ffca 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	44020c00 	.word	0x44020c00
 8003ee8:	0800f9c8 	.word	0x0800f9c8

08003eec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003ef0:	f7ff ffb4 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	0b1b      	lsrs	r3, r3, #12
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4904      	ldr	r1, [pc, #16]	; (8003f14 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	44020c00 	.word	0x44020c00
 8003f14:	0800f9c8 	.word	0x0800f9c8

08003f18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	221f      	movs	r2, #31
 8003f26:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <HAL_RCC_GetClockConfig+0x68>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_GetClockConfig+0x68>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 020f 	and.w	r2, r3, #15
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCC_GetClockConfig+0x6c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 020f 	and.w	r2, r3, #15
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	44020c00 	.word	0x44020c00
 8003f84:	40022000 	.word	0x40022000

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b0d8      	sub	sp, #352	; 0x160
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003fac:	2500      	movs	r5, #0
 8003fae:	ea54 0305 	orrs.w	r3, r4, r5
 8003fb2:	d00b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003fb4:	4bcd      	ldr	r3, [pc, #820]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fba:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	4ac9      	ldr	r2, [pc, #804]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f002 0801 	and.w	r8, r2, #1
 8003fd8:	f04f 0900 	mov.w	r9, #0
 8003fdc:	ea58 0309 	orrs.w	r3, r8, r9
 8003fe0:	d042      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	2b05      	cmp	r3, #5
 8003fea:	d823      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	0800403d 	.word	0x0800403d
 8003ff8:	0800400d 	.word	0x0800400d
 8003ffc:	08004021 	.word	0x08004021
 8004000:	0800403d 	.word	0x0800403d
 8004004:	0800403d 	.word	0x0800403d
 8004008:	0800403d 	.word	0x0800403d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800400c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004010:	3308      	adds	r3, #8
 8004012:	4618      	mov	r0, r3
 8004014:	f004 feda 	bl	8008dcc <RCCEx_PLL2_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800401e:	e00e      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004020:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004024:	3330      	adds	r3, #48	; 0x30
 8004026:	4618      	mov	r0, r3
 8004028:	f004 ff68 	bl	8008efc <RCCEx_PLL3_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800403c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004046:	4ba9      	ldr	r3, [pc, #676]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800404c:	f023 0107 	bic.w	r1, r3, #7
 8004050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	4aa5      	ldr	r2, [pc, #660]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004058:	430b      	orrs	r3, r1
 800405a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800405e:	e003      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004064:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004068:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f002 0a02 	and.w	sl, r2, #2
 8004074:	f04f 0b00 	mov.w	fp, #0
 8004078:	ea5a 030b 	orrs.w	r3, sl, fp
 800407c:	f000 8088 	beq.w	8004190 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004080:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004086:	2b28      	cmp	r3, #40	; 0x28
 8004088:	d868      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	08004165 	.word	0x08004165
 8004094:	0800415d 	.word	0x0800415d
 8004098:	0800415d 	.word	0x0800415d
 800409c:	0800415d 	.word	0x0800415d
 80040a0:	0800415d 	.word	0x0800415d
 80040a4:	0800415d 	.word	0x0800415d
 80040a8:	0800415d 	.word	0x0800415d
 80040ac:	0800415d 	.word	0x0800415d
 80040b0:	08004135 	.word	0x08004135
 80040b4:	0800415d 	.word	0x0800415d
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	0800415d 	.word	0x0800415d
 80040c0:	0800415d 	.word	0x0800415d
 80040c4:	0800415d 	.word	0x0800415d
 80040c8:	0800415d 	.word	0x0800415d
 80040cc:	0800415d 	.word	0x0800415d
 80040d0:	08004149 	.word	0x08004149
 80040d4:	0800415d 	.word	0x0800415d
 80040d8:	0800415d 	.word	0x0800415d
 80040dc:	0800415d 	.word	0x0800415d
 80040e0:	0800415d 	.word	0x0800415d
 80040e4:	0800415d 	.word	0x0800415d
 80040e8:	0800415d 	.word	0x0800415d
 80040ec:	0800415d 	.word	0x0800415d
 80040f0:	08004165 	.word	0x08004165
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	0800415d 	.word	0x0800415d
 8004100:	0800415d 	.word	0x0800415d
 8004104:	0800415d 	.word	0x0800415d
 8004108:	0800415d 	.word	0x0800415d
 800410c:	0800415d 	.word	0x0800415d
 8004110:	08004165 	.word	0x08004165
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800415d 	.word	0x0800415d
 800411c:	0800415d 	.word	0x0800415d
 8004120:	0800415d 	.word	0x0800415d
 8004124:	0800415d 	.word	0x0800415d
 8004128:	0800415d 	.word	0x0800415d
 800412c:	0800415d 	.word	0x0800415d
 8004130:	08004165 	.word	0x08004165
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004138:	3308      	adds	r3, #8
 800413a:	4618      	mov	r0, r3
 800413c:	f004 fe46 	bl	8008dcc <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004146:	e00e      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004148:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800414c:	3330      	adds	r3, #48	; 0x30
 800414e:	4618      	mov	r0, r3
 8004150:	f004 fed4 	bl	8008efc <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10c      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800416e:	4b5f      	ldr	r3, [pc, #380]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004174:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004178:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800417c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417e:	4a5b      	ldr	r2, [pc, #364]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004180:	430b      	orrs	r3, r1
 8004182:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800418c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 0304 	and.w	r3, r2, #4
 800419c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80041a6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	d04e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80041b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041ba:	d02c      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80041bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041c0:	d825      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c6:	d028      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	d81f      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80041ce:	2bc0      	cmp	r3, #192	; 0xc0
 80041d0:	d025      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80041d2:	2bc0      	cmp	r3, #192	; 0xc0
 80041d4:	d81b      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80041d6:	2b80      	cmp	r3, #128	; 0x80
 80041d8:	d00f      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x272>
 80041da:	2b80      	cmp	r3, #128	; 0x80
 80041dc:	d817      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01f      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d113      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ea:	3308      	adds	r3, #8
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 fded 	bl	8008dcc <RCCEx_PLL2_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80041f8:	e014      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041fe:	3330      	adds	r3, #48	; 0x30
 8004200:	4618      	mov	r0, r3
 8004202:	f004 fe7b 	bl	8008efc <RCCEx_PLL3_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800420c:	e00a      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004214:	e006      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004216:	bf00      	nop
 8004218:	e004      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004224:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10c      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800422c:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800422e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004232:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800423a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423c:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800423e:	430b      	orrs	r3, r1
 8004240:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800424a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800424e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f002 0308 	and.w	r3, r2, #8
 800425a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004264:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d056      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800426e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004274:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004278:	d031      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x356>
 800427a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800427e:	d82a      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004284:	d02d      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d824      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800428c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004290:	d029      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004292:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004296:	d81e      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d011      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a2:	d818      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ac:	d113      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b2:	3308      	adds	r3, #8
 80042b4:	4618      	mov	r0, r3
 80042b6:	f004 fd89 	bl	8008dcc <RCCEx_PLL2_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80042c0:	e017      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042c6:	3330      	adds	r3, #48	; 0x30
 80042c8:	4618      	mov	r0, r3
 80042ca:	f004 fe17 	bl	8008efc <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80042d4:	e00d      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042dc:	e009      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80042de:	bf00      	nop
 80042e0:	e007      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80042e2:	bf00      	nop
 80042e4:	e005      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80042e6:	bf00      	nop
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80042ea:	bf00      	nop
 80042ec:	44020c00 	.word	0x44020c00
        break;
 80042f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80042fa:	4bbb      	ldr	r3, [pc, #748]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80042fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004300:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004304:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430a:	4ab7      	ldr	r2, [pc, #732]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800430c:	430b      	orrs	r3, r1
 800430e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004318:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800431c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f002 0310 	and.w	r3, r2, #16
 8004328:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004332:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d053      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800433c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004342:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004346:	d031      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004348:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800434c:	d82a      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800434e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004352:	d02d      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004358:	d824      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800435a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800435e:	d029      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004360:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004364:	d81e      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436a:	d011      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d818      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d020      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	d113      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004380:	3308      	adds	r3, #8
 8004382:	4618      	mov	r0, r3
 8004384:	f004 fd22 	bl	8008dcc <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800438e:	e014      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004390:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004394:	3330      	adds	r3, #48	; 0x30
 8004396:	4618      	mov	r0, r3
 8004398:	f004 fdb0 	bl	8008efc <RCCEx_PLL3_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80043a2:	e00a      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043aa:	e006      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043ac:	bf00      	nop
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043b0:	bf00      	nop
 80043b2:	e002      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80043c2:	4b89      	ldr	r3, [pc, #548]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80043c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80043cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d2:	4a85      	ldr	r2, [pc, #532]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 0320 	and.w	r3, r2, #32
 80043f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80043fa:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80043fe:	460b      	mov	r3, r1
 8004400:	4313      	orrs	r3, r2
 8004402:	d053      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004404:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800440e:	d031      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004410:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004414:	d82a      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800441a:	d02d      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800441c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004420:	d824      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004422:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004426:	d029      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004428:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800442c:	d81e      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d818      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d020      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	d113      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004444:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004448:	3308      	adds	r3, #8
 800444a:	4618      	mov	r0, r3
 800444c:	f004 fcbe 	bl	8008dcc <RCCEx_PLL2_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004456:	e014      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004458:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800445c:	3330      	adds	r3, #48	; 0x30
 800445e:	4618      	mov	r0, r3
 8004460:	f004 fd4c 	bl	8008efc <RCCEx_PLL3_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800446a:	e00a      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004472:	e006      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004474:	bf00      	nop
 8004476:	e004      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10c      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800448a:	4b57      	ldr	r3, [pc, #348]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800448c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004490:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8004494:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a53      	ldr	r2, [pc, #332]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800449c:	430b      	orrs	r3, r1
 800449e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044a2:	e003      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80044b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044c2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d053      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80044cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044d6:	d031      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80044d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044dc:	d82a      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80044de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e2:	d02d      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80044e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e8:	d824      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80044ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044ee:	d029      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80044f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044f4:	d81e      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80044f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044fa:	d011      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80044fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004500:	d818      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d020      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800450a:	d113      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800450c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004510:	3308      	adds	r3, #8
 8004512:	4618      	mov	r0, r3
 8004514:	f004 fc5a 	bl	8008dcc <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800451e:	e014      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004520:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004524:	3330      	adds	r3, #48	; 0x30
 8004526:	4618      	mov	r0, r3
 8004528:	f004 fce8 	bl	8008efc <RCCEx_PLL3_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004532:	e00a      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800453a:	e006      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800453c:	bf00      	nop
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10c      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004558:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 800455c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004564:	430b      	orrs	r3, r1
 8004566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800456a:	e003      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004570:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004580:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800458a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800458e:	460b      	mov	r3, r1
 8004590:	4313      	orrs	r3, r2
 8004592:	d055      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004594:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800459e:	d033      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80045a0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80045a4:	d82c      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045aa:	d02f      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x684>
 80045ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b0:	d826      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045b6:	d02b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80045b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045bc:	d820      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c2:	d013      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80045c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c8:	d81a      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d022      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80045ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d2:	d115      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045d8:	3308      	adds	r3, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f004 fbf6 	bl	8008dcc <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80045e6:	e016      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80045e8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045f0:	3330      	adds	r3, #48	; 0x30
 80045f2:	4618      	mov	r0, r3
 80045f4:	f004 fc82 	bl	8008efc <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80045fe:	e00a      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004606:	e006      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004608:	bf00      	nop
 800460a:	e004      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800461e:	4bbb      	ldr	r3, [pc, #748]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004624:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800462c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462e:	4ab7      	ldr	r2, [pc, #732]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004630:	430b      	orrs	r3, r1
 8004632:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004636:	e003      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800463c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800464c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004656:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800465a:	460b      	mov	r3, r1
 800465c:	4313      	orrs	r3, r2
 800465e:	d053      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004666:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800466a:	d031      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800466c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004670:	d82a      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004676:	d02d      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467c:	d824      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800467e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004682:	d029      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004688:	d81e      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800468a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800468e:	d011      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004694:	d818      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x754>
 800469a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800469e:	d113      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046a4:	3308      	adds	r3, #8
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 fb90 	bl	8008dcc <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80046b2:	e014      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046b8:	3330      	adds	r3, #48	; 0x30
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 fc1e 	bl	8008efc <RCCEx_PLL3_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80046c6:	e00a      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046ce:	e006      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80046d0:	bf00      	nop
 80046d2:	e004      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80046d4:	bf00      	nop
 80046d6:	e002      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80046d8:	bf00      	nop
 80046da:	e000      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80046dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80046e6:	4b89      	ldr	r3, [pc, #548]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80046e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046ec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80046f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f6:	4a85      	ldr	r2, [pc, #532]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80046f8:	430b      	orrs	r3, r1
 80046fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80046fe:	e003      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004704:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004708:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004714:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800471e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004722:	460b      	mov	r3, r1
 8004724:	4313      	orrs	r3, r2
 8004726:	d055      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004728:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004730:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004734:	d031      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004736:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800473a:	d82a      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800473c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004740:	d02d      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004746:	d824      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004748:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800474c:	d029      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800474e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004752:	d81e      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800475a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800475e:	d818      	bhi.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d020      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004768:	d113      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800476a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800476e:	3308      	adds	r3, #8
 8004770:	4618      	mov	r0, r3
 8004772:	f004 fb2b 	bl	8008dcc <RCCEx_PLL2_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800477c:	e014      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800477e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004782:	3330      	adds	r3, #48	; 0x30
 8004784:	4618      	mov	r0, r3
 8004786:	f004 fbb9 	bl	8008efc <RCCEx_PLL3_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004790:	e00a      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800479a:	bf00      	nop
 800479c:	e004      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80047b0:	4b56      	ldr	r3, [pc, #344]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80047b6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80047ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c2:	4a52      	ldr	r2, [pc, #328]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047c4:	430b      	orrs	r3, r1
 80047c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80047ca:	e003      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80047d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80047e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047e4:	2300      	movs	r3, #0
 80047e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047ea:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80047ee:	460b      	mov	r3, r1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	d044      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80047f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d823      	bhi.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004851 	.word	0x08004851
 800480c:	08004821 	.word	0x08004821
 8004810:	08004835 	.word	0x08004835
 8004814:	08004851 	.word	0x08004851
 8004818:	08004851 	.word	0x08004851
 800481c:	08004851 	.word	0x08004851
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004820:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004824:	3308      	adds	r3, #8
 8004826:	4618      	mov	r0, r3
 8004828:	f004 fad0 	bl	8008dcc <RCCEx_PLL2_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004832:	e00e      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004834:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004838:	3330      	adds	r3, #48	; 0x30
 800483a:	4618      	mov	r0, r3
 800483c:	f004 fb5e 	bl	8008efc <RCCEx_PLL3_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004846:	e004      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004852:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10d      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800485a:	4b2c      	ldr	r3, [pc, #176]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800485c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004860:	f023 0107 	bic.w	r1, r3, #7
 8004864:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800486e:	430b      	orrs	r3, r1
 8004870:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004874:	e003      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800487a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800487e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800488a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800488e:	2300      	movs	r3, #0
 8004890:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004894:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004898:	460b      	mov	r3, r1
 800489a:	4313      	orrs	r3, r2
 800489c:	d04f      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800489e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	2b50      	cmp	r3, #80	; 0x50
 80048a8:	d029      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x976>
 80048aa:	2b50      	cmp	r3, #80	; 0x50
 80048ac:	d823      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d027      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d81f      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048b6:	2b30      	cmp	r3, #48	; 0x30
 80048b8:	d025      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	d81b      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d00f      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d817      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d022      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d113      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048d2:	3308      	adds	r3, #8
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fa79 	bl	8008dcc <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80048e0:	e017      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e6:	3330      	adds	r3, #48	; 0x30
 80048e8:	4618      	mov	r0, r3
 80048ea:	f004 fb07 	bl	8008efc <RCCEx_PLL3_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80048f4:	e00d      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048fc:	e009      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80048fe:	bf00      	nop
 8004900:	e007      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004902:	bf00      	nop
 8004904:	e005      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004906:	bf00      	nop
 8004908:	e003      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800490a:	bf00      	nop
 800490c:	44020c00 	.word	0x44020c00
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10d      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800491a:	4baf      	ldr	r3, [pc, #700]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800491c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004920:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	4aaa      	ldr	r2, [pc, #680]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800492e:	430b      	orrs	r3, r1
 8004930:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004936:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800493a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800493e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800494a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800494e:	2300      	movs	r3, #0
 8004950:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004954:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d055      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800495e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004966:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800496a:	d031      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800496c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004970:	d82a      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004976:	d02d      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800497c:	d824      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800497e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004982:	d029      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004984:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004988:	d81e      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800498a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498e:	d011      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004994:	d818      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800499a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800499e:	d113      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049a4:	3308      	adds	r3, #8
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 fa10 	bl	8008dcc <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80049b2:	e014      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049b8:	3330      	adds	r3, #48	; 0x30
 80049ba:	4618      	mov	r0, r3
 80049bc:	f004 fa9e 	bl	8008efc <RCCEx_PLL3_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80049c6:	e00a      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049ce:	e006      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80049d0:	bf00      	nop
 80049d2:	e004      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80049d4:	bf00      	nop
 80049d6:	e002      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80049d8:	bf00      	nop
 80049da:	e000      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80049dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80049e6:	4b7c      	ldr	r3, [pc, #496]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80049e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80049f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f8:	4a77      	ldr	r2, [pc, #476]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80049fa:	430b      	orrs	r3, r1
 80049fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a06:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004a24:	460b      	mov	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d03d      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a36:	d01b      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a3c:	d814      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a42:	d017      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a48:	d80e      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d014      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d109      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a58:	3330      	adds	r3, #48	; 0x30
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f004 fa4e 	bl	8008efc <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004a66:	e008      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004a70:	bf00      	nop
 8004a72:	e002      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004a82:	4b55      	ldr	r3, [pc, #340]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a88:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a94:	4a50      	ldr	r2, [pc, #320]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a96:	430b      	orrs	r3, r1
 8004a98:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a9c:	e003      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004aa2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004ab2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004abc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	d03d      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ace:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad2:	d01b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004ad4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad8:	d814      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004ada:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ade:	d017      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004ae0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ae4:	d80e      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d014      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004aea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004aee:	d109      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004af4:	3330      	adds	r3, #48	; 0x30
 8004af6:	4618      	mov	r0, r3
 8004af8:	f004 fa00 	bl	8008efc <RCCEx_PLL3_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004b02:	e008      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b0a:	e004      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b0c:	bf00      	nop
 8004b0e:	e002      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b10:	bf00      	nop
 8004b12:	e000      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10d      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b24:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b30:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b32:	430b      	orrs	r3, r1
 8004b34:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b38:	e003      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b3e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b58:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	d040      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004b62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004b70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b74:	d814      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b7a:	d017      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b80:	d80e      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d014      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8a:	d109      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b90:	3330      	adds	r3, #48	; 0x30
 8004b92:	4618      	mov	r0, r3
 8004b94:	f004 f9b2 	bl	8008efc <RCCEx_PLL3_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ba6:	e004      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004ba8:	bf00      	nop
 8004baa:	e002      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d110      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004bbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004bc0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bcc:	4a02      	ldr	r2, [pc, #8]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004bd4:	e006      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004bd6:	bf00      	nop
 8004bd8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004be0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	2100      	movs	r1, #0
 8004bee:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4313      	orrs	r3, r2
 8004c02:	d03d      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c10:	d01b      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004c12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c16:	d814      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004c18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c1c:	d017      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c22:	d80e      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d014      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2c:	d109      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c32:	3330      	adds	r3, #48	; 0x30
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 f961 	bl	8008efc <RCCEx_PLL3_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004c40:	e008      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c48:	e004      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c54:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10d      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c5c:	4bbe      	ldr	r3, [pc, #760]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c62:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c6e:	4aba      	ldr	r2, [pc, #744]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c70:	430b      	orrs	r3, r1
 8004c72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c76:	e003      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c7c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c90:	2300      	movs	r3, #0
 8004c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d035      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cac:	d015      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb2:	d80e      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d012      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cc2:	3330      	adds	r3, #48	; 0x30
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f004 f919 	bl	8008efc <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004cd8:	e002      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004ce8:	4b9b      	ldr	r3, [pc, #620]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004cea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cee:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004cf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cfa:	4a97      	ldr	r2, [pc, #604]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d08:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	2100      	movs	r1, #0
 8004d16:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004d2c:	4b8a      	ldr	r3, [pc, #552]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4a89      	ldr	r2, [pc, #548]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d36:	61d3      	str	r3, [r2, #28]
 8004d38:	4b87      	ldr	r3, [pc, #540]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d3a:	69d9      	ldr	r1, [r3, #28]
 8004d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d40:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004d44:	4a84      	ldr	r2, [pc, #528]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004d64:	460b      	mov	r3, r1
 8004d66:	4313      	orrs	r3, r2
 8004d68:	d055      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004d76:	d031      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004d78:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004d7c:	d82a      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d02d      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d88:	d824      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8e:	d029      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d81e      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d9a:	d011      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da0:	d818      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d020      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d113      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004db0:	3308      	adds	r3, #8
 8004db2:	4618      	mov	r0, r3
 8004db4:	f004 f80a 	bl	8008dcc <RCCEx_PLL2_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004dbe:	e014      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dc4:	3330      	adds	r3, #48	; 0x30
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f004 f898 	bl	8008efc <RCCEx_PLL3_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004dd2:	e00a      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004dda:	e006      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ddc:	bf00      	nop
 8004dde:	e004      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004df2:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004df4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004df8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e04:	4a54      	ldr	r2, [pc, #336]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e26:	2300      	movs	r3, #0
 8004e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e2c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4313      	orrs	r3, r2
 8004e34:	d055      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e3e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e42:	d031      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004e44:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e48:	d82a      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4e:	d02d      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e54:	d824      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e5a:	d029      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e60:	d81e      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e66:	d011      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6c:	d818      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d020      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	d113      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f003 ffa4 	bl	8008dcc <RCCEx_PLL2_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004e8a:	e014      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e90:	3330      	adds	r3, #48	; 0x30
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 f832 	bl	8008efc <RCCEx_PLL3_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ea6:	e006      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004ea8:	bf00      	nop
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004eac:	bf00      	nop
 8004eae:	e002      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004eb0:	bf00      	nop
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10d      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004ebe:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ec0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ec4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ecc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ed0:	4a21      	ldr	r2, [pc, #132]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004ed8:	e003      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ede:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	2100      	movs	r1, #0
 8004eec:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004efc:	460b      	mov	r3, r1
 8004efe:	4313      	orrs	r3, r2
 8004f00:	d057      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f0e:	d033      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f14:	d82c      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f1a:	d02f      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f20:	d826      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f26:	d02b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004f28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f2c:	d820      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f32:	d013      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f38:	d81a      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d022      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d115      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f48:	3308      	adds	r3, #8
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f003 ff3e 	bl	8008dcc <RCCEx_PLL2_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004f56:	e016      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004f58:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f60:	3330      	adds	r3, #48	; 0x30
 8004f62:	4618      	mov	r0, r3
 8004f64:	f003 ffca 	bl	8008efc <RCCEx_PLL3_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f76:	e006      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f78:	bf00      	nop
 8004f7a:	e004      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f7c:	bf00      	nop
 8004f7e:	e002      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f80:	bf00      	nop
 8004f82:	e000      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10d      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004f8e:	4bbb      	ldr	r3, [pc, #748]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f94:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fa0:	4ab6      	ldr	r2, [pc, #728]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004fa8:	e003      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004faa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	d055      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fda:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004fde:	d031      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004fe0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004fe4:	d82a      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fea:	d02d      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff0:	d824      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004ff2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ff6:	d029      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004ff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ffc:	d81e      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005002:	d011      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005008:	d818      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d113      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005014:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005018:	3308      	adds	r3, #8
 800501a:	4618      	mov	r0, r3
 800501c:	f003 fed6 	bl	8008dcc <RCCEx_PLL2_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005026:	e014      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800502c:	3330      	adds	r3, #48	; 0x30
 800502e:	4618      	mov	r0, r3
 8005030:	f003 ff64 	bl	8008efc <RCCEx_PLL3_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800503a:	e00a      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005042:	e006      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005044:	bf00      	nop
 8005046:	e004      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005048:	bf00      	nop
 800504a:	e002      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800504c:	bf00      	nop
 800504e:	e000      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005052:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800505a:	4b88      	ldr	r3, [pc, #544]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800505c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005060:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8005064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005068:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800506c:	4a83      	ldr	r2, [pc, #524]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800506e:	430b      	orrs	r3, r1
 8005070:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005074:	e003      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800507a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800507e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	2100      	movs	r1, #0
 8005088:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800508c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005094:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005098:	460b      	mov	r3, r1
 800509a:	4313      	orrs	r3, r2
 800509c:	d055      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800509e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80050aa:	d031      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80050ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80050b0:	d82a      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050b6:	d02d      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80050b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050bc:	d824      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050c2:	d029      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80050c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050c8:	d81e      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ce:	d011      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80050d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d4:	d818      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d020      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80050da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050de:	d113      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050e4:	3308      	adds	r3, #8
 80050e6:	4618      	mov	r0, r3
 80050e8:	f003 fe70 	bl	8008dcc <RCCEx_PLL2_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80050f2:	e014      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050f8:	3330      	adds	r3, #48	; 0x30
 80050fa:	4618      	mov	r0, r3
 80050fc:	f003 fefe 	bl	8008efc <RCCEx_PLL3_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005106:	e00a      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800510e:	e006      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005110:	bf00      	nop
 8005112:	e004      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005114:	bf00      	nop
 8005116:	e002      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800511c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005126:	4b55      	ldr	r3, [pc, #340]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005128:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800512c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005134:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005138:	4a50      	ldr	r2, [pc, #320]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800513a:	430b      	orrs	r3, r1
 800513c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005140:	e003      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005142:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005146:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800514a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	2100      	movs	r1, #0
 8005154:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005160:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005164:	460b      	mov	r3, r1
 8005166:	4313      	orrs	r3, r2
 8005168:	d055      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800516a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800516e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005176:	d031      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800517c:	d82a      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d02d      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d824      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800518a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800518e:	d029      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005194:	d81e      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519a:	d011      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800519c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a0:	d818      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80051a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051aa:	d113      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051b0:	3308      	adds	r3, #8
 80051b2:	4618      	mov	r0, r3
 80051b4:	f003 fe0a 	bl	8008dcc <RCCEx_PLL2_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80051be:	e014      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051c4:	3330      	adds	r3, #48	; 0x30
 80051c6:	4618      	mov	r0, r3
 80051c8:	f003 fe98 	bl	8008efc <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80051d2:	e00a      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051da:	e006      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80051dc:	bf00      	nop
 80051de:	e004      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80051e0:	bf00      	nop
 80051e2:	e002      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80051e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10d      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80051f2:	4b22      	ldr	r3, [pc, #136]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80051f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80051f8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80051fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005200:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005204:	4a1d      	ldr	r2, [pc, #116]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005206:	430b      	orrs	r3, r1
 8005208:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800520c:	e003      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005212:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005216:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005226:	2300      	movs	r3, #0
 8005228:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800522c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005230:	460b      	mov	r3, r1
 8005232:	4313      	orrs	r3, r2
 8005234:	d055      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800523a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800523e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005242:	d035      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005248:	d82e      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800524a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800524e:	d031      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005250:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005254:	d828      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800525a:	d01b      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800525c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005260:	d822      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526a:	d009      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800526c:	e01c      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526e:	4b03      	ldr	r3, [pc, #12]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	4a02      	ldr	r2, [pc, #8]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005278:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800527a:	e01c      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800527c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005280:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005284:	3308      	adds	r3, #8
 8005286:	4618      	mov	r0, r3
 8005288:	f003 fda0 	bl	8008dcc <RCCEx_PLL2_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005292:	e010      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005294:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005298:	3330      	adds	r3, #48	; 0x30
 800529a:	4618      	mov	r0, r3
 800529c:	f003 fe2e 	bl	8008efc <RCCEx_PLL3_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052a6:	e006      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052ae:	e002      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80052b0:	bf00      	nop
 80052b2:	e000      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80052b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80052be:	4bc3      	ldr	r3, [pc, #780]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80052c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80052c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80052d0:	4abe      	ldr	r2, [pc, #760]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052d8:	e003      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80052e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80052ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f2:	2300      	movs	r3, #0
 80052f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80052fc:	460b      	mov	r3, r1
 80052fe:	4313      	orrs	r3, r2
 8005300:	d051      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005306:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800530a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800530e:	d033      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005314:	d82c      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005316:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800531a:	d02d      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800531c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005320:	d826      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005326:	d019      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532c:	d820      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005332:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005336:	d007      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005338:	e01a      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800533a:	4ba4      	ldr	r3, [pc, #656]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	4aa3      	ldr	r2, [pc, #652]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005344:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005346:	e018      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800534c:	3308      	adds	r3, #8
 800534e:	4618      	mov	r0, r3
 8005350:	f003 fd3c 	bl	8008dcc <RCCEx_PLL2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800535a:	e00e      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800535c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005360:	3330      	adds	r3, #48	; 0x30
 8005362:	4618      	mov	r0, r3
 8005364:	f003 fdca 	bl	8008efc <RCCEx_PLL3_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800536e:	e004      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005376:	e000      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10d      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005382:	4b92      	ldr	r3, [pc, #584]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005388:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800538c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005390:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005394:	4a8d      	ldr	r2, [pc, #564]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005396:	430b      	orrs	r3, r1
 8005398:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800539c:	e003      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053a2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80053b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80053b4:	2300      	movs	r3, #0
 80053b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80053bc:	460b      	mov	r3, r1
 80053be:	4313      	orrs	r3, r2
 80053c0:	d032      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80053c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d80f      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d211      	bcs.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d911      	bls.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d109      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053de:	3308      	adds	r3, #8
 80053e0:	4618      	mov	r0, r3
 80053e2:	f003 fcf3 	bl	8008dcc <RCCEx_PLL2_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053ec:	e006      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053f4:	e002      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80053fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005404:	4b71      	ldr	r3, [pc, #452]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800540a:	f023 0107 	bic.w	r1, r3, #7
 800540e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005412:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005416:	4a6d      	ldr	r2, [pc, #436]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005418:	430b      	orrs	r3, r1
 800541a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800541e:	e003      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005424:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	2100      	movs	r1, #0
 8005432:	6739      	str	r1, [r7, #112]	; 0x70
 8005434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005438:	677b      	str	r3, [r7, #116]	; 0x74
 800543a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800543e:	460b      	mov	r3, r1
 8005440:	4313      	orrs	r3, r2
 8005442:	d024      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005444:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005450:	2b08      	cmp	r3, #8
 8005452:	d005      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005462:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800546a:	4b58      	ldr	r3, [pc, #352]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800546c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005470:	f023 0108 	bic.w	r1, r3, #8
 8005474:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800547c:	4a53      	ldr	r2, [pc, #332]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800547e:	430b      	orrs	r3, r1
 8005480:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005486:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800548a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800548e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800549a:	66bb      	str	r3, [r7, #104]	; 0x68
 800549c:	2300      	movs	r3, #0
 800549e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f000 80b9 	beq.w	800561e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80054ac:	4b48      	ldr	r3, [pc, #288]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	4a47      	ldr	r2, [pc, #284]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b8:	f7fc fc34 	bl	8001d24 <HAL_GetTick>
 80054bc:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80054c0:	e00b      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fc fc2f 	bl	8001d24 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d903      	bls.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80054d8:	e005      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80054da:	4b3d      	ldr	r3, [pc, #244]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ed      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80054e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 8093 	bne.w	8005616 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80054fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d023      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005506:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800550a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800550e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005512:	4293      	cmp	r3, r2
 8005514:	d01b      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005516:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800551c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005520:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005524:	4b29      	ldr	r3, [pc, #164]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800552a:	4a28      	ldr	r2, [pc, #160]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800553a:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005544:	4a21      	ldr	r2, [pc, #132]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005546:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800554a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800554e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d019      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fc fbe3 	bl	8001d24 <HAL_GetTick>
 800555e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005562:	e00d      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fc fbde 	bl	8001d24 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	f241 3388 	movw	r3, #5000	; 0x1388
 8005574:	429a      	cmp	r2, r3
 8005576:	d903      	bls.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800557e:	e006      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005580:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ea      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800558e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005592:	2b00      	cmp	r3, #0
 8005594:	d13a      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005596:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800559a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055a6:	d115      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80055b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055b4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80055c2:	4a02      	ldr	r2, [pc, #8]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055c4:	430b      	orrs	r3, r1
 80055c6:	61d3      	str	r3, [r2, #28]
 80055c8:	e00a      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80055ca:	bf00      	nop
 80055cc:	44020c00 	.word	0x44020c00
 80055d0:	44020800 	.word	0x44020800
 80055d4:	4b9f      	ldr	r3, [pc, #636]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	4a9e      	ldr	r2, [pc, #632]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055de:	61d3      	str	r3, [r2, #28]
 80055e0:	4b9c      	ldr	r3, [pc, #624]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e6:	4a9b      	ldr	r2, [pc, #620]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055f0:	4b98      	ldr	r3, [pc, #608]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055f2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80055f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80055fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005602:	4a94      	ldr	r2, [pc, #592]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005604:	430b      	orrs	r3, r1
 8005606:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800560a:	e008      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800560c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005610:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005614:	e003      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005616:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800561a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800561e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800562a:	663b      	str	r3, [r7, #96]	; 0x60
 800562c:	2300      	movs	r3, #0
 800562e:	667b      	str	r3, [r7, #100]	; 0x64
 8005630:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d035      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800563a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800563e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005642:	2b30      	cmp	r3, #48	; 0x30
 8005644:	d014      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005646:	2b30      	cmp	r3, #48	; 0x30
 8005648:	d80e      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800564a:	2b20      	cmp	r3, #32
 800564c:	d012      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800564e:	2b20      	cmp	r3, #32
 8005650:	d80a      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005656:	2b10      	cmp	r3, #16
 8005658:	d106      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565a:	4b7e      	ldr	r3, [pc, #504]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	4a7d      	ldr	r2, [pc, #500]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005664:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005666:	e008      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800566e:	e004      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005670:	bf00      	nop
 8005672:	e002      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10d      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005682:	4b74      	ldr	r3, [pc, #464]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005688:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800568c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005690:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005694:	4a6f      	ldr	r2, [pc, #444]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005696:	430b      	orrs	r3, r1
 8005698:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800569c:	e003      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056a2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80056b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80056b4:	2300      	movs	r3, #0
 80056b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80056bc:	460b      	mov	r3, r1
 80056be:	4313      	orrs	r3, r2
 80056c0:	d033      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80056c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d007      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80056d2:	e010      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d4:	4b5f      	ldr	r3, [pc, #380]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	4a5e      	ldr	r2, [pc, #376]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056de:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80056e0:	e00d      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056e6:	3308      	adds	r3, #8
 80056e8:	4618      	mov	r0, r3
 80056ea:	f003 fb6f 	bl	8008dcc <RCCEx_PLL2_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005706:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005708:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800570c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005710:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005714:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005718:	4a4e      	ldr	r2, [pc, #312]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800571a:	430b      	orrs	r3, r1
 800571c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005726:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800572a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005736:	653b      	str	r3, [r7, #80]	; 0x50
 8005738:	2300      	movs	r3, #0
 800573a:	657b      	str	r3, [r7, #84]	; 0x54
 800573c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d033      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800574a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d007      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005756:	e010      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4b3e      	ldr	r3, [pc, #248]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	4a3d      	ldr	r2, [pc, #244]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005762:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005764:	e00d      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005766:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800576a:	3308      	adds	r3, #8
 800576c:	4618      	mov	r0, r3
 800576e:	f003 fb2d 	bl	8008dcc <RCCEx_PLL2_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800578a:	4b32      	ldr	r3, [pc, #200]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800578c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005790:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005794:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005798:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80057ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80057ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80057bc:	2300      	movs	r3, #0
 80057be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057c4:	460b      	mov	r3, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	d04a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80057ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d827      	bhi.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057f1 	.word	0x080057f1
 80057e0:	080057ff 	.word	0x080057ff
 80057e4:	08005813 	.word	0x08005813
 80057e8:	0800582f 	.word	0x0800582f
 80057ec:	0800582f 	.word	0x0800582f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b18      	ldr	r3, [pc, #96]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	4a17      	ldr	r2, [pc, #92]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057fc:	e018      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005802:	3308      	adds	r3, #8
 8005804:	4618      	mov	r0, r3
 8005806:	f003 fae1 	bl	8008dcc <RCCEx_PLL2_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005810:	e00e      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005812:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005816:	3330      	adds	r3, #48	; 0x30
 8005818:	4618      	mov	r0, r3
 800581a:	f003 fb6f 	bl	8008efc <RCCEx_PLL3_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10f      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800583a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800583e:	f023 0107 	bic.w	r1, r3, #7
 8005842:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800584a:	4a02      	ldr	r2, [pc, #8]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800584c:	430b      	orrs	r3, r1
 800584e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005852:	e005      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005854:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005858:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800585c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005860:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800586c:	643b      	str	r3, [r7, #64]	; 0x40
 800586e:	2300      	movs	r3, #0
 8005870:	647b      	str	r3, [r7, #68]	; 0x44
 8005872:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005876:	460b      	mov	r3, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	f000 8081 	beq.w	8005980 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800587e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005886:	2b20      	cmp	r3, #32
 8005888:	d85f      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	08005915 	.word	0x08005915
 8005894:	0800594b 	.word	0x0800594b
 8005898:	0800594b 	.word	0x0800594b
 800589c:	0800594b 	.word	0x0800594b
 80058a0:	0800594b 	.word	0x0800594b
 80058a4:	0800594b 	.word	0x0800594b
 80058a8:	0800594b 	.word	0x0800594b
 80058ac:	0800594b 	.word	0x0800594b
 80058b0:	08005923 	.word	0x08005923
 80058b4:	0800594b 	.word	0x0800594b
 80058b8:	0800594b 	.word	0x0800594b
 80058bc:	0800594b 	.word	0x0800594b
 80058c0:	0800594b 	.word	0x0800594b
 80058c4:	0800594b 	.word	0x0800594b
 80058c8:	0800594b 	.word	0x0800594b
 80058cc:	0800594b 	.word	0x0800594b
 80058d0:	08005937 	.word	0x08005937
 80058d4:	0800594b 	.word	0x0800594b
 80058d8:	0800594b 	.word	0x0800594b
 80058dc:	0800594b 	.word	0x0800594b
 80058e0:	0800594b 	.word	0x0800594b
 80058e4:	0800594b 	.word	0x0800594b
 80058e8:	0800594b 	.word	0x0800594b
 80058ec:	0800594b 	.word	0x0800594b
 80058f0:	08005953 	.word	0x08005953
 80058f4:	0800594b 	.word	0x0800594b
 80058f8:	0800594b 	.word	0x0800594b
 80058fc:	0800594b 	.word	0x0800594b
 8005900:	0800594b 	.word	0x0800594b
 8005904:	0800594b 	.word	0x0800594b
 8005908:	0800594b 	.word	0x0800594b
 800590c:	0800594b 	.word	0x0800594b
 8005910:	08005953 	.word	0x08005953
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005914:	4bab      	ldr	r3, [pc, #684]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	4aaa      	ldr	r2, [pc, #680]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800591a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800591e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005920:	e018      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005922:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005926:	3308      	adds	r3, #8
 8005928:	4618      	mov	r0, r3
 800592a:	f003 fa4f 	bl	8008dcc <RCCEx_PLL2_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005934:	e00e      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005936:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800593a:	3330      	adds	r3, #48	; 0x30
 800593c:	4618      	mov	r0, r3
 800593e:	f003 fadd 	bl	8008efc <RCCEx_PLL3_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005948:	e004      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005950:	e000      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005954:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10d      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800595c:	4b99      	ldr	r3, [pc, #612]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800595e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005962:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800596a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800596e:	4a95      	ldr	r2, [pc, #596]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005970:	430b      	orrs	r3, r1
 8005972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800597c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005992:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d04e      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800599c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a8:	d02e      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80059aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ae:	d827      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059b0:	2bc0      	cmp	r3, #192	; 0xc0
 80059b2:	d02b      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80059b4:	2bc0      	cmp	r3, #192	; 0xc0
 80059b6:	d823      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d017      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80059bc:	2b80      	cmp	r3, #128	; 0x80
 80059be:	d81f      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d007      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80059c8:	e01a      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ca:	4b7e      	ldr	r3, [pc, #504]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	4a7d      	ldr	r2, [pc, #500]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80059d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059d6:	e01a      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059dc:	3308      	adds	r3, #8
 80059de:	4618      	mov	r0, r3
 80059e0:	f003 f9f4 	bl	8008dcc <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059ea:	e010      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059f0:	3330      	adds	r3, #48	; 0x30
 80059f2:	4618      	mov	r0, r3
 80059f4:	f003 fa82 	bl	8008efc <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059fe:	e006      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a06:	e002      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005a16:	4b6b      	ldr	r3, [pc, #428]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a1c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005a20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a28:	4a66      	ldr	r2, [pc, #408]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a30:	e003      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a36:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005a3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
 8005a48:	2300      	movs	r3, #0
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d055      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005a5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005a62:	d031      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005a64:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005a68:	d82a      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6e:	d02d      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a74:	d824      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a7a:	d029      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005a7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a80:	d81e      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a86:	d011      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8c:	d818      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a96:	d113      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f003 f994 	bl	8008dcc <RCCEx_PLL2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005aaa:	e014      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ab0:	3330      	adds	r3, #48	; 0x30
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f003 fa22 	bl	8008efc <RCCEx_PLL3_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ac6:	e006      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ac8:	bf00      	nop
 8005aca:	e004      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005acc:	bf00      	nop
 8005ace:	e002      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10d      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005ade:	4b39      	ldr	r3, [pc, #228]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ae4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005aec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005af0:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005af2:	430b      	orrs	r3, r1
 8005af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005af8:	e003      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005afe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b10:	2300      	movs	r3, #0
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	d058      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005b1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005b2a:	d031      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005b2c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005b30:	d82a      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b36:	d02d      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b3c:	d824      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b42:	d029      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005b44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b48:	d81e      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4e:	d011      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b54:	d818      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d020      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	d113      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b64:	3308      	adds	r3, #8
 8005b66:	4618      	mov	r0, r3
 8005b68:	f003 f930 	bl	8008dcc <RCCEx_PLL2_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005b72:	e014      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b78:	3330      	adds	r3, #48	; 0x30
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f003 f9be 	bl	8008efc <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005b86:	e00a      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b8e:	e006      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b90:	bf00      	nop
 8005b92:	e004      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b94:	bf00      	nop
 8005b96:	e002      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b98:	bf00      	nop
 8005b9a:	e000      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d110      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bb8:	4902      	ldr	r1, [pc, #8]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005bc0:	e006      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005bc2:	bf00      	nop
 8005bc4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bcc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6239      	str	r1, [r7, #32]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
 8005be2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d055      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bf4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005bf8:	d031      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005bfa:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005bfe:	d82a      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c04:	d02d      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c0a:	d824      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c0c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005c10:	d029      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005c12:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005c16:	d81e      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1c:	d011      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c22:	d818      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2c:	d113      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c32:	3308      	adds	r3, #8
 8005c34:	4618      	mov	r0, r3
 8005c36:	f003 f8c9 	bl	8008dcc <RCCEx_PLL2_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c40:	e014      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c46:	3330      	adds	r3, #48	; 0x30
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f003 f957 	bl	8008efc <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c54:	e00a      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10d      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005c74:	4b88      	ldr	r3, [pc, #544]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c7a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8005c7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c86:	4984      	ldr	r1, [pc, #528]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005c8e:	e003      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c94:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	61b9      	str	r1, [r7, #24]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d03d      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cb8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d81c      	bhi.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005cc0:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005d03 	.word	0x08005d03
 8005ccc:	08005cd9 	.word	0x08005cd9
 8005cd0:	08005ce7 	.word	0x08005ce7
 8005cd4:	08005d03 	.word	0x08005d03
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd8:	4b6f      	ldr	r3, [pc, #444]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	4a6e      	ldr	r2, [pc, #440]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005ce4:	e00e      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cea:	3308      	adds	r3, #8
 8005cec:	4618      	mov	r0, r3
 8005cee:	f003 f86d 	bl	8008dcc <RCCEx_PLL2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005cf8:	e004      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d00:	e000      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d04:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10d      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005d0c:	4b62      	ldr	r3, [pc, #392]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d12:	f023 0203 	bic.w	r2, r3, #3
 8005d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005d1e:	495e      	ldr	r1, [pc, #376]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005d26:	e003      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d2c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	2100      	movs	r1, #0
 8005d3a:	6139      	str	r1, [r7, #16]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d46:	460b      	mov	r3, r1
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	d03a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d58:	d00e      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5e:	d815      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d017      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d68:	d110      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6a:	4b4b      	ldr	r3, [pc, #300]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	4a4a      	ldr	r2, [pc, #296]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d74:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005d76:	e00e      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f003 f824 	bl	8008dcc <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005d8a:	e004      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005d9e:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005db0:	4939      	ldr	r1, [pc, #228]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dbe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d038      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005de2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	d01b      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005dea:	2b30      	cmp	r3, #48	; 0x30
 8005dec:	d815      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d002      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d007      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005df6:	e010      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df8:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	4a26      	ldr	r2, [pc, #152]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e02:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e04:	e00e      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e0a:	3330      	adds	r3, #48	; 0x30
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f003 f875 	bl	8008efc <RCCEx_PLL3_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005e18:	e004      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e20:	e000      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e24:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10d      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005e3e:	4916      	ldr	r1, [pc, #88]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005e46:	e003      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	6039      	str	r1, [r7, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e66:	460b      	mov	r3, r1
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	d00c      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e7a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005e7e:	4906      	ldr	r1, [pc, #24]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005e86:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005e90:	46bd      	mov	sp, r7
 8005e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e96:	bf00      	nop
 8005e98:	44020c00 	.word	0x44020c00

08005e9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b08b      	sub	sp, #44	; 0x2c
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005ea4:	4bad      	ldr	r3, [pc, #692]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eac:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005eae:	4bab      	ldr	r3, [pc, #684]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005eb8:	4ba8      	ldr	r3, [pc, #672]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005ec4:	4ba5      	ldr	r3, [pc, #660]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ece:	4ba3      	ldr	r3, [pc, #652]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	08db      	lsrs	r3, r3, #3
 8005ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8126 	beq.w	800613e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d053      	beq.n	8005fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d86f      	bhi.n	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d003      	beq.n	8005f0c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d02b      	beq.n	8005f62 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005f0a:	e068      	b.n	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f0c:	4b93      	ldr	r3, [pc, #588]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	4a92      	ldr	r2, [pc, #584]	; (8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f40:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f44:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005f60:	e068      	b.n	8006034 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006168 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005f9e:	e049      	b.n	8006034 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a70 	vldr	s13, [pc, #448]	; 800616c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbc:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fc0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005fdc:	e02a      	b.n	8006034 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fde:	4b5f      	ldr	r3, [pc, #380]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	08db      	lsrs	r3, r3, #3
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	4a5d      	ldr	r2, [pc, #372]	; (8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a04 	vldr	s12, [r7, #16]
 8006016:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006032:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006034:	4b49      	ldr	r3, [pc, #292]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006040:	d121      	bne.n	8006086 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006042:	4b46      	ldr	r3, [pc, #280]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d017      	beq.n	800607e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800604e:	4b43      	ldr	r3, [pc, #268]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	0a5b      	lsrs	r3, r3, #9
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006064:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006068:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800606c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006074:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	e006      	b.n	800608c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e002      	b.n	800608c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800608c:	4b33      	ldr	r3, [pc, #204]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006098:	d121      	bne.n	80060de <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800609a:	4b30      	ldr	r3, [pc, #192]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d017      	beq.n	80060d6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060a6:	4b2d      	ldr	r3, [pc, #180]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	0c1b      	lsrs	r3, r3, #16
 80060ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80060b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060bc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80060c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80060c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060cc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	e006      	b.n	80060e4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	605a      	str	r2, [r3, #4]
 80060dc:	e002      	b.n	80060e4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060e4:	4b1d      	ldr	r3, [pc, #116]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f0:	d121      	bne.n	8006136 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80060f2:	4b1a      	ldr	r3, [pc, #104]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d017      	beq.n	800612e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060fe:	4b17      	ldr	r3, [pc, #92]	; (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	0e1b      	lsrs	r3, r3, #24
 8006104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006114:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006118:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800611c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006124:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800612c:	e010      	b.n	8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	e00c      	b.n	8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	609a      	str	r2, [r3, #8]
}
 800613c:	e008      	b.n	8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	609a      	str	r2, [r3, #8]
}
 8006150:	bf00      	nop
 8006152:	372c      	adds	r7, #44	; 0x2c
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	44020c00 	.word	0x44020c00
 8006160:	03d09000 	.word	0x03d09000
 8006164:	46000000 	.word	0x46000000
 8006168:	4a742400 	.word	0x4a742400
 800616c:	4af42400 	.word	0x4af42400

08006170 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006170:	b480      	push	{r7}
 8006172:	b08b      	sub	sp, #44	; 0x2c
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006178:	4bad      	ldr	r3, [pc, #692]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006180:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006182:	4bab      	ldr	r3, [pc, #684]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800618c:	4ba8      	ldr	r3, [pc, #672]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006196:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006198:	4ba5      	ldr	r3, [pc, #660]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80061a2:	4ba3      	ldr	r3, [pc, #652]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	08db      	lsrs	r3, r3, #3
 80061a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ba:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 8126 	beq.w	8006412 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d053      	beq.n	8006274 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d86f      	bhi.n	80062b2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d003      	beq.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d02b      	beq.n	8006236 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80061de:	e068      	b.n	80062b2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061e0:	4b93      	ldr	r3, [pc, #588]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	08db      	lsrs	r3, r3, #3
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	4a92      	ldr	r2, [pc, #584]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006214:	ed97 6a04 	vldr	s12, [r7, #16]
 8006218:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800621c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006230:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006234:	e068      	b.n	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006240:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800643c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006252:	ed97 6a04 	vldr	s12, [r7, #16]
 8006256:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800625a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006272:	e049      	b.n	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006440 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006290:	ed97 6a04 	vldr	s12, [r7, #16]
 8006294:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80062b0:	e02a      	b.n	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062b2:	4b5f      	ldr	r3, [pc, #380]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	4a5d      	ldr	r2, [pc, #372]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062be:	fa22 f303 	lsr.w	r3, r2, r3
 80062c2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80062ea:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006306:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006308:	4b49      	ldr	r3, [pc, #292]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006314:	d121      	bne.n	800635a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006316:	4b46      	ldr	r3, [pc, #280]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d017      	beq.n	8006352 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006322:	4b43      	ldr	r3, [pc, #268]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	0a5b      	lsrs	r3, r3, #9
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006338:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800633c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006348:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006360:	4b33      	ldr	r3, [pc, #204]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800636c:	d121      	bne.n	80063b2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800636e:	4b30      	ldr	r3, [pc, #192]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d017      	beq.n	80063aa <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800637a:	4b2d      	ldr	r3, [pc, #180]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800638c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006390:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006394:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	605a      	str	r2, [r3, #4]
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c4:	d121      	bne.n	800640a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80063c6:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d017      	beq.n	8006402 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	0e1b      	lsrs	r3, r3, #24
 80063d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80063e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80063ec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80063f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006400:	e010      	b.n	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	e00c      	b.n	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	e008      	b.n	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	372c      	adds	r7, #44	; 0x2c
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	44020c00 	.word	0x44020c00
 8006434:	03d09000 	.word	0x03d09000
 8006438:	46000000 	.word	0x46000000
 800643c:	4a742400 	.word	0x4a742400
 8006440:	4af42400 	.word	0x4af42400

08006444 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006444:	b480      	push	{r7}
 8006446:	b08b      	sub	sp, #44	; 0x2c
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800644c:	4bad      	ldr	r3, [pc, #692]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006454:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006456:	4bab      	ldr	r3, [pc, #684]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006460:	4ba8      	ldr	r3, [pc, #672]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800646a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800646c:	4ba5      	ldr	r3, [pc, #660]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006476:	4ba3      	ldr	r3, [pc, #652]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647a:	08db      	lsrs	r3, r3, #3
 800647c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8126 	beq.w	80066e6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d053      	beq.n	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d86f      	bhi.n	8006586 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d003      	beq.n	80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d02b      	beq.n	800650a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80064b2:	e068      	b.n	8006586 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064b4:	4b93      	ldr	r3, [pc, #588]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	08db      	lsrs	r3, r3, #3
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	4a92      	ldr	r2, [pc, #584]	; (8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80064ec:	eddf 5a87 	vldr	s11, [pc, #540]	; 800670c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80064f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006504:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006508:	e068      	b.n	80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006514:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006526:	ed97 6a04 	vldr	s12, [r7, #16]
 800652a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800670c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800652e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800653a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006546:	e049      	b.n	80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006552:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006564:	ed97 6a04 	vldr	s12, [r7, #16]
 8006568:	eddf 5a68 	vldr	s11, [pc, #416]	; 800670c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800656c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006580:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006584:	e02a      	b.n	80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006586:	4b5f      	ldr	r3, [pc, #380]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	08db      	lsrs	r3, r3, #3
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	4a5d      	ldr	r2, [pc, #372]	; (8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006592:	fa22 f303 	lsr.w	r3, r2, r3
 8006596:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80065be:	eddf 5a53 	vldr	s11, [pc, #332]	; 800670c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80065c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80065da:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065dc:	4b49      	ldr	r3, [pc, #292]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d121      	bne.n	800662e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80065ea:	4b46      	ldr	r3, [pc, #280]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d017      	beq.n	8006626 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065f6:	4b43      	ldr	r3, [pc, #268]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	0a5b      	lsrs	r3, r3, #9
 80065fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800660c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006610:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e006      	b.n	8006634 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e002      	b.n	8006634 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006634:	4b33      	ldr	r3, [pc, #204]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800663c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006640:	d121      	bne.n	8006686 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006642:	4b30      	ldr	r3, [pc, #192]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d017      	beq.n	800667e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800664e:	4b2d      	ldr	r3, [pc, #180]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006664:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006668:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800666c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006674:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	605a      	str	r2, [r3, #4]
 800667c:	e006      	b.n	800668c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
 8006684:	e002      	b.n	800668c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800668c:	4b1d      	ldr	r3, [pc, #116]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006698:	d121      	bne.n	80066de <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d017      	beq.n	80066d6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066a6:	4b17      	ldr	r3, [pc, #92]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066aa:	0e1b      	lsrs	r3, r3, #24
 80066ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80066b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066bc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80066c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80066c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066cc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80066d4:	e010      	b.n	80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	e00c      	b.n	80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
}
 80066e4:	e008      	b.n	80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	609a      	str	r2, [r3, #8]
}
 80066f8:	bf00      	nop
 80066fa:	372c      	adds	r7, #44	; 0x2c
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	44020c00 	.word	0x44020c00
 8006708:	03d09000 	.word	0x03d09000
 800670c:	46000000 	.word	0x46000000
 8006710:	4a742400 	.word	0x4a742400
 8006714:	4af42400 	.word	0x4af42400

08006718 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b08f      	sub	sp, #60	; 0x3c
 800671c:	af00      	add	r7, sp, #0
 800671e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006726:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800672a:	4321      	orrs	r1, r4
 800672c:	d150      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800672e:	4b26      	ldr	r3, [pc, #152]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006738:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800673c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d108      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674e:	d104      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006754:	637b      	str	r3, [r7, #52]	; 0x34
 8006756:	f002 bb2a 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800675a:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800675c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006768:	d108      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006770:	d104      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006772:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	f002 bb19 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800677c:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006788:	d119      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006790:	d115      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800679a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679e:	d30a      	bcc.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80067a0:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	0a1b      	lsrs	r3, r3, #8
 80067a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067aa:	4a08      	ldr	r2, [pc, #32]	; (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80067b2:	f002 bafc 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80067ba:	f002 baf8 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
 80067c2:	f002 baf4 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067c6:	bf00      	nop
 80067c8:	44020c00 	.word	0x44020c00
 80067cc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80067d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067d4:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80067d8:	ea50 0104 	orrs.w	r1, r0, r4
 80067dc:	f001 8275 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80067e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067e4:	2801      	cmp	r0, #1
 80067e6:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80067ea:	f082 82dd 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067f2:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80067f6:	ea50 0104 	orrs.w	r1, r0, r4
 80067fa:	f001 816c 	beq.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80067fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006802:	2801      	cmp	r0, #1
 8006804:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006808:	f082 82ce 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800680c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006810:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006814:	ea50 0104 	orrs.w	r1, r0, r4
 8006818:	f001 8602 	beq.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800681c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006820:	2801      	cmp	r0, #1
 8006822:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8006826:	f082 82bf 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800682a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800682e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006832:	ea50 0104 	orrs.w	r1, r0, r4
 8006836:	f001 854c 	beq.w	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800683a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800683e:	2801      	cmp	r0, #1
 8006840:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8006844:	f082 82b0 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800684c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006850:	ea50 0104 	orrs.w	r1, r0, r4
 8006854:	f001 849e 	beq.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800685c:	2801      	cmp	r0, #1
 800685e:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8006862:	f082 82a1 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800686a:	f1a1 0420 	sub.w	r4, r1, #32
 800686e:	ea50 0104 	orrs.w	r1, r0, r4
 8006872:	f001 83e8 	beq.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006876:	e9d7 0100 	ldrd	r0, r1, [r7]
 800687a:	2801      	cmp	r0, #1
 800687c:	f171 0120 	sbcs.w	r1, r1, #32
 8006880:	f082 8292 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006888:	f1a1 0410 	sub.w	r4, r1, #16
 800688c:	ea50 0104 	orrs.w	r1, r0, r4
 8006890:	f002 8256 	beq.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006894:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006898:	2801      	cmp	r0, #1
 800689a:	f171 0110 	sbcs.w	r1, r1, #16
 800689e:	f082 8283 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068a6:	f1a1 0408 	sub.w	r4, r1, #8
 80068aa:	ea50 0104 	orrs.w	r1, r0, r4
 80068ae:	f002 81cc 	beq.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80068b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068b6:	2801      	cmp	r0, #1
 80068b8:	f171 0108 	sbcs.w	r1, r1, #8
 80068bc:	f082 8274 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068c4:	1f0c      	subs	r4, r1, #4
 80068c6:	ea50 0104 	orrs.w	r1, r0, r4
 80068ca:	f001 8648 	beq.w	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80068ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068d2:	2801      	cmp	r0, #1
 80068d4:	f171 0104 	sbcs.w	r1, r1, #4
 80068d8:	f082 8266 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068e0:	1e8c      	subs	r4, r1, #2
 80068e2:	ea50 0104 	orrs.w	r1, r0, r4
 80068e6:	f002 8143 	beq.w	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80068ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ee:	2801      	cmp	r0, #1
 80068f0:	f171 0102 	sbcs.w	r1, r1, #2
 80068f4:	f082 8258 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068fc:	1e4c      	subs	r4, r1, #1
 80068fe:	ea50 0104 	orrs.w	r1, r0, r4
 8006902:	f002 80ce 	beq.w	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800690a:	2801      	cmp	r0, #1
 800690c:	f171 0101 	sbcs.w	r1, r1, #1
 8006910:	f082 824a 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006918:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800691c:	4321      	orrs	r1, r4
 800691e:	f002 8059 	beq.w	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006926:	4cd9      	ldr	r4, [pc, #868]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006928:	42a0      	cmp	r0, r4
 800692a:	f171 0100 	sbcs.w	r1, r1, #0
 800692e:	f082 823b 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006936:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800693a:	4321      	orrs	r1, r4
 800693c:	f001 87d9 	beq.w	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006944:	4cd2      	ldr	r4, [pc, #840]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006946:	42a0      	cmp	r0, r4
 8006948:	f171 0100 	sbcs.w	r1, r1, #0
 800694c:	f082 822c 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006954:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006958:	4321      	orrs	r1, r4
 800695a:	f001 8751 	beq.w	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800695e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006962:	4ccc      	ldr	r4, [pc, #816]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006964:	42a0      	cmp	r0, r4
 8006966:	f171 0100 	sbcs.w	r1, r1, #0
 800696a:	f082 821d 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800696e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006972:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8006976:	4321      	orrs	r1, r4
 8006978:	f001 869a 	beq.w	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800697c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006980:	4cc5      	ldr	r4, [pc, #788]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006982:	42a0      	cmp	r0, r4
 8006984:	f171 0100 	sbcs.w	r1, r1, #0
 8006988:	f082 820e 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800698c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006990:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8006994:	4321      	orrs	r1, r4
 8006996:	f001 8612 	beq.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800699a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800699e:	4cbf      	ldr	r4, [pc, #764]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	f171 0100 	sbcs.w	r1, r1, #0
 80069a6:	f082 81ff 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ae:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80069b2:	4321      	orrs	r1, r4
 80069b4:	f002 817e 	beq.w	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80069b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069bc:	4cb8      	ldr	r4, [pc, #736]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069be:	42a0      	cmp	r0, r4
 80069c0:	f171 0100 	sbcs.w	r1, r1, #0
 80069c4:	f082 81f0 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069cc:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80069d0:	4321      	orrs	r1, r4
 80069d2:	f000 829e 	beq.w	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80069d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069da:	4cb2      	ldr	r4, [pc, #712]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069dc:	42a0      	cmp	r0, r4
 80069de:	f171 0100 	sbcs.w	r1, r1, #0
 80069e2:	f082 81e1 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ea:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80069ee:	4321      	orrs	r1, r4
 80069f0:	f000 826d 	beq.w	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80069f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069f8:	4cab      	ldr	r4, [pc, #684]	; (8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069fa:	42a0      	cmp	r0, r4
 80069fc:	f171 0100 	sbcs.w	r1, r1, #0
 8006a00:	f082 81d2 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a08:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006a0c:	4321      	orrs	r1, r4
 8006a0e:	f001 800d 	beq.w	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a16:	4ca5      	ldr	r4, [pc, #660]	; (8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	f171 0100 	sbcs.w	r1, r1, #0
 8006a1e:	f082 81c3 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a26:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006a2a:	4321      	orrs	r1, r4
 8006a2c:	f000 81d0 	beq.w	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a34:	4c9e      	ldr	r4, [pc, #632]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a36:	42a0      	cmp	r0, r4
 8006a38:	f171 0100 	sbcs.w	r1, r1, #0
 8006a3c:	f082 81b4 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a44:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006a48:	4321      	orrs	r1, r4
 8006a4a:	f000 8142 	beq.w	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a52:	4c98      	ldr	r4, [pc, #608]	; (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	f171 0100 	sbcs.w	r1, r1, #0
 8006a5a:	f082 81a5 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a62:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8006a66:	4321      	orrs	r1, r4
 8006a68:	f001 824e 	beq.w	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a70:	4c91      	ldr	r4, [pc, #580]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006a72:	42a0      	cmp	r0, r4
 8006a74:	f171 0100 	sbcs.w	r1, r1, #0
 8006a78:	f082 8196 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a80:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006a84:	4321      	orrs	r1, r4
 8006a86:	f001 8197 	beq.w	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8e:	4c8b      	ldr	r4, [pc, #556]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	f171 0100 	sbcs.w	r1, r1, #0
 8006a96:	f082 8187 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a9e:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006aa2:	4321      	orrs	r1, r4
 8006aa4:	f001 8154 	beq.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aac:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006ab0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ab4:	f082 8178 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006abc:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006ac0:	4321      	orrs	r1, r4
 8006ac2:	f001 80b7 	beq.w	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aca:	f248 0401 	movw	r4, #32769	; 0x8001
 8006ace:	42a0      	cmp	r0, r4
 8006ad0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ad4:	f082 8168 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006adc:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006ae0:	4321      	orrs	r1, r4
 8006ae2:	f001 8064 	beq.w	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aea:	f244 0401 	movw	r4, #16385	; 0x4001
 8006aee:	42a0      	cmp	r0, r4
 8006af0:	f171 0100 	sbcs.w	r1, r1, #0
 8006af4:	f082 8158 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006afc:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006b00:	4321      	orrs	r1, r4
 8006b02:	f001 8011 	beq.w	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b0a:	f242 0401 	movw	r4, #8193	; 0x2001
 8006b0e:	42a0      	cmp	r0, r4
 8006b10:	f171 0100 	sbcs.w	r1, r1, #0
 8006b14:	f082 8148 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b1c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006b20:	4321      	orrs	r1, r4
 8006b22:	f000 871e 	beq.w	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b2a:	f241 0401 	movw	r4, #4097	; 0x1001
 8006b2e:	42a0      	cmp	r0, r4
 8006b30:	f171 0100 	sbcs.w	r1, r1, #0
 8006b34:	f082 8138 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b3c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006b40:	4321      	orrs	r1, r4
 8006b42:	f000 86a8 	beq.w	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006b46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b4a:	f640 0401 	movw	r4, #2049	; 0x801
 8006b4e:	42a0      	cmp	r0, r4
 8006b50:	f171 0100 	sbcs.w	r1, r1, #0
 8006b54:	f082 8128 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b5c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8006b60:	4321      	orrs	r1, r4
 8006b62:	f000 8632 	beq.w	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b6a:	f240 4401 	movw	r4, #1025	; 0x401
 8006b6e:	42a0      	cmp	r0, r4
 8006b70:	f171 0100 	sbcs.w	r1, r1, #0
 8006b74:	f082 8118 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7c:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8006b80:	4321      	orrs	r1, r4
 8006b82:	f000 85b0 	beq.w	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b8a:	f240 2401 	movw	r4, #513	; 0x201
 8006b8e:	42a0      	cmp	r0, r4
 8006b90:	f171 0100 	sbcs.w	r1, r1, #0
 8006b94:	f082 8108 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b9c:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006ba0:	4321      	orrs	r1, r4
 8006ba2:	f000 8535 	beq.w	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006baa:	f240 1401 	movw	r4, #257	; 0x101
 8006bae:	42a0      	cmp	r0, r4
 8006bb0:	f171 0100 	sbcs.w	r1, r1, #0
 8006bb4:	f082 80f8 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bbc:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006bc0:	4321      	orrs	r1, r4
 8006bc2:	f000 84ba 	beq.w	800753a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bca:	2881      	cmp	r0, #129	; 0x81
 8006bcc:	f171 0100 	sbcs.w	r1, r1, #0
 8006bd0:	f082 80ea 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bd8:	2821      	cmp	r0, #33	; 0x21
 8006bda:	f171 0100 	sbcs.w	r1, r1, #0
 8006bde:	d26f      	bcs.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be4:	4301      	orrs	r1, r0
 8006be6:	f002 80df 	beq.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bee:	1e42      	subs	r2, r0, #1
 8006bf0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006bf4:	2a20      	cmp	r2, #32
 8006bf6:	f173 0100 	sbcs.w	r1, r3, #0
 8006bfa:	f082 80d5 	bcs.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bfe:	2a1f      	cmp	r2, #31
 8006c00:	f202 80d2 	bhi.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c04:	a101      	add	r1, pc, #4	; (adr r1, 8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006c06:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006f6d 	.word	0x08006f6d
 8006c10:	08007039 	.word	0x08007039
 8006c14:	08008da9 	.word	0x08008da9
 8006c18:	080070f9 	.word	0x080070f9
 8006c1c:	08008da9 	.word	0x08008da9
 8006c20:	08008da9 	.word	0x08008da9
 8006c24:	08008da9 	.word	0x08008da9
 8006c28:	080071c9 	.word	0x080071c9
 8006c2c:	08008da9 	.word	0x08008da9
 8006c30:	08008da9 	.word	0x08008da9
 8006c34:	08008da9 	.word	0x08008da9
 8006c38:	08008da9 	.word	0x08008da9
 8006c3c:	08008da9 	.word	0x08008da9
 8006c40:	08008da9 	.word	0x08008da9
 8006c44:	08008da9 	.word	0x08008da9
 8006c48:	080072ab 	.word	0x080072ab
 8006c4c:	08008da9 	.word	0x08008da9
 8006c50:	08008da9 	.word	0x08008da9
 8006c54:	08008da9 	.word	0x08008da9
 8006c58:	08008da9 	.word	0x08008da9
 8006c5c:	08008da9 	.word	0x08008da9
 8006c60:	08008da9 	.word	0x08008da9
 8006c64:	08008da9 	.word	0x08008da9
 8006c68:	08008da9 	.word	0x08008da9
 8006c6c:	08008da9 	.word	0x08008da9
 8006c70:	08008da9 	.word	0x08008da9
 8006c74:	08008da9 	.word	0x08008da9
 8006c78:	08008da9 	.word	0x08008da9
 8006c7c:	08008da9 	.word	0x08008da9
 8006c80:	08008da9 	.word	0x08008da9
 8006c84:	08008da9 	.word	0x08008da9
 8006c88:	08007381 	.word	0x08007381
 8006c8c:	80000001 	.word	0x80000001
 8006c90:	40000001 	.word	0x40000001
 8006c94:	20000001 	.word	0x20000001
 8006c98:	10000001 	.word	0x10000001
 8006c9c:	08000001 	.word	0x08000001
 8006ca0:	04000001 	.word	0x04000001
 8006ca4:	00800001 	.word	0x00800001
 8006ca8:	00400001 	.word	0x00400001
 8006cac:	00200001 	.word	0x00200001
 8006cb0:	00100001 	.word	0x00100001
 8006cb4:	00080001 	.word	0x00080001
 8006cb8:	00040001 	.word	0x00040001
 8006cbc:	00020001 	.word	0x00020001
 8006cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	f000 83c4 	beq.w	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006cce:	f002 b86b 	b.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006cd2:	4ba1      	ldr	r3, [pc, #644]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cd8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ce4:	d036      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cec:	d86b      	bhi.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cf4:	d02b      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cfc:	d863      	bhi.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d04:	d01b      	beq.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0c:	d85b      	bhi.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1a:	d008      	beq.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006d1c:	e053      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d1e:	f107 0320 	add.w	r3, r7, #32
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff f8ba 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d2c:	e04e      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d2e:	f107 0314 	add.w	r3, r7, #20
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fa1c 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d3c:	e046      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fb7e 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d4c:	e03e      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006d4e:	4b83      	ldr	r3, [pc, #524]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006d50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d52:	e03b      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d54:	4b80      	ldr	r3, [pc, #512]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d60:	4b7d      	ldr	r3, [pc, #500]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d10c      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d72:	4b79      	ldr	r3, [pc, #484]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	08db      	lsrs	r3, r3, #3
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	4a78      	ldr	r2, [pc, #480]	; (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
 8006d84:	e01e      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d86:	4b74      	ldr	r3, [pc, #464]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d92:	d106      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9a:	d102      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d9c:	4b71      	ldr	r3, [pc, #452]	; (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006da0:	e010      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006da2:	4b6d      	ldr	r3, [pc, #436]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dae:	d106      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006db6:	d102      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006db8:	4b6b      	ldr	r3, [pc, #428]	; (8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbc:	e002      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006dc2:	e003      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006dc4:	e002      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dca:	bf00      	nop
          }
        }
        break;
 8006dcc:	f001 bfef 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006dd0:	4b61      	ldr	r3, [pc, #388]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dd6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006de2:	d036      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dea:	d86b      	bhi.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006df2:	d02b      	beq.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006dfa:	d863      	bhi.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e02:	d01b      	beq.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e0a:	d85b      	bhi.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e18:	d008      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006e1a:	e053      	b.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e1c:	f107 0320 	add.w	r3, r7, #32
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff f83b 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e2a:	e04e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e2c:	f107 0314 	add.w	r3, r7, #20
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff f99d 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e3a:	e046      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e3c:	f107 0308 	add.w	r3, r7, #8
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff faff 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e4a:	e03e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e4c:	4b43      	ldr	r3, [pc, #268]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e50:	e03b      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e52:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e58:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e5e:	4b3e      	ldr	r3, [pc, #248]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d10c      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d109      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e70:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	4a39      	ldr	r2, [pc, #228]	; (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
 8006e82:	e01e      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e84:	4b34      	ldr	r3, [pc, #208]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e98:	d102      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e9a:	4b32      	ldr	r3, [pc, #200]	; (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9e:	e010      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ea0:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eac:	d106      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb4:	d102      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006eb6:	4b2c      	ldr	r3, [pc, #176]	; (8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	e002      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006ec0:	e003      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006ec2:	e002      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ec8:	bf00      	nop
          }
        }
        break;
 8006eca:	f001 bf70 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006ece:	4b22      	ldr	r3, [pc, #136]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d108      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ee0:	f107 0320 	add.w	r3, r7, #32
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe ffd9 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eee:	f001 bf5e 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d108      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff f937 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f06:	f001 bf52 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f0e:	f001 bf4e 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006f12:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d108      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f24:	f107 0320 	add.w	r3, r7, #32
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe ffb7 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f32:	f001 bf3c 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	2b80      	cmp	r3, #128	; 0x80
 8006f3a:	d108      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3c:	f107 0314 	add.w	r3, r7, #20
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff f915 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f4a:	f001 bf30 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f52:	f001 bf2c 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f56:	bf00      	nop
 8006f58:	44020c00 	.word	0x44020c00
 8006f5c:	00bb8000 	.word	0x00bb8000
 8006f60:	03d09000 	.word	0x03d09000
 8006f64:	003d0900 	.word	0x003d0900
 8006f68:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006f6c:	4b9d      	ldr	r3, [pc, #628]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006f7e:	f7fc ff9f 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8006f82:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f84:	f001 bf13 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006f88:	4b96      	ldr	r3, [pc, #600]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f94:	d10a      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d107      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff f8e5 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006faa:	e043      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006fac:	4b8d      	ldr	r3, [pc, #564]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb8:	d10a      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d107      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fc0:	f107 0308 	add.w	r3, r7, #8
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fa3d 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fce:	e031      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006fd0:	4b84      	ldr	r3, [pc, #528]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d10c      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d109      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fe2:	4b80      	ldr	r3, [pc, #512]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	08db      	lsrs	r3, r3, #3
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	4a7e      	ldr	r2, [pc, #504]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff4:	e01e      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007002:	d105      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2b04      	cmp	r3, #4
 8007008:	d102      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800700a:	4b78      	ldr	r3, [pc, #480]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
 800700e:	e011      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007010:	4b74      	ldr	r3, [pc, #464]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b02      	cmp	r3, #2
 800701c:	d106      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	2b05      	cmp	r3, #5
 8007022:	d103      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	e003      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007030:	f001 bebd 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007034:	f001 bebb 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007038:	4b6a      	ldr	r3, [pc, #424]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800703a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800703e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007042:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800704a:	f7fc ff23 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 800704e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007050:	f001 bead 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007054:	4b63      	ldr	r3, [pc, #396]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800705c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007060:	d10a      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	2b08      	cmp	r3, #8
 8007066:	d107      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007068:	f107 0314 	add.w	r3, r7, #20
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff f87f 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	637b      	str	r3, [r7, #52]	; 0x34
 8007076:	e03d      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	2b10      	cmp	r3, #16
 800707c:	d108      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff f9de 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800708c:	f001 be8f 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007090:	4b54      	ldr	r3, [pc, #336]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b02      	cmp	r3, #2
 800709a:	d10c      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	2b18      	cmp	r3, #24
 80070a0:	d109      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070a2:	4b50      	ldr	r3, [pc, #320]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	08db      	lsrs	r3, r3, #3
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	4a4e      	ldr	r2, [pc, #312]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80070ae:	fa22 f303 	lsr.w	r3, r2, r3
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
 80070b4:	e01e      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80070b6:	4b4b      	ldr	r3, [pc, #300]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c2:	d105      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d102      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80070ca:	4b48      	ldr	r3, [pc, #288]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	e011      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80070d0:	4b44      	ldr	r3, [pc, #272]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d106      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b28      	cmp	r3, #40	; 0x28
 80070e2:	d103      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80070e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070f0:	f001 be5d 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070f4:	f001 be5b 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80070f8:	4b3a      	ldr	r3, [pc, #232]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007102:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800710a:	f7fc fec3 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 800710e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007110:	f001 be4d 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007114:	4b33      	ldr	r3, [pc, #204]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800711c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007120:	d10a      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	2b40      	cmp	r3, #64	; 0x40
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007128:	f107 0314 	add.w	r3, r7, #20
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff f81f 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
 8007136:	e045      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007138:	4b2a      	ldr	r3, [pc, #168]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007144:	d10a      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	2b80      	cmp	r3, #128	; 0x80
 800714a:	d107      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff f977 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
 800715a:	e033      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800715c:	4b21      	ldr	r3, [pc, #132]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b02      	cmp	r3, #2
 8007166:	d10c      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2bc0      	cmp	r3, #192	; 0xc0
 800716c:	d109      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800716e:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	4a1b      	ldr	r2, [pc, #108]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800717a:	fa22 f303 	lsr.w	r3, r2, r3
 800717e:	637b      	str	r3, [r7, #52]	; 0x34
 8007180:	e020      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007182:	4b18      	ldr	r3, [pc, #96]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800718a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718e:	d106      	bne.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007196:	d102      	bne.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007198:	4b14      	ldr	r3, [pc, #80]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
 800719c:	e012      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d107      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80071b2:	d103      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80071b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ba:	e003      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071c0:	f001 bdf5 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071c4:	f001 bdf3 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80071c8:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80071ce:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80071d2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80071da:	f7fc fe5b 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 80071de:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80071e0:	f001 bde5 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071e4:	44020c00 	.word	0x44020c00
 80071e8:	03d09000 	.word	0x03d09000
 80071ec:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80071f0:	4ba0      	ldr	r3, [pc, #640]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071fc:	d10b      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007204:	d107      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007206:	f107 0314 	add.w	r3, r7, #20
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe ffb0 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
 8007214:	e047      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007216:	4b97      	ldr	r3, [pc, #604]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800721e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007222:	d10b      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722a:	d107      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff f907 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
 800723a:	e034      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800723c:	4b8d      	ldr	r3, [pc, #564]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b02      	cmp	r3, #2
 8007246:	d10d      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800724e:	d109      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007250:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	08db      	lsrs	r3, r3, #3
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	4a87      	ldr	r2, [pc, #540]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	e020      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007264:	4b83      	ldr	r3, [pc, #524]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800726c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007270:	d106      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007278:	d102      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800727a:	4b80      	ldr	r3, [pc, #512]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
 800727e:	e012      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007280:	4b7c      	ldr	r3, [pc, #496]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d107      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007294:	d103      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
 800729c:	e003      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072a2:	f001 bd84 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072a6:	f001 bd82 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80072aa:	4b72      	ldr	r3, [pc, #456]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80072b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80072b4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072bc:	f7fc fdea 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 80072c0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80072c2:	f001 bd74 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80072c6:	4b6b      	ldr	r3, [pc, #428]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072d2:	d10b      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072da:	d107      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072dc:	f107 0314 	add.w	r3, r7, #20
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe ff45 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ea:	e047      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80072ec:	4b61      	ldr	r3, [pc, #388]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f8:	d10b      	bne.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007300:	d107      	bne.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff f89c 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
 8007310:	e034      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007312:	4b58      	ldr	r3, [pc, #352]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b02      	cmp	r3, #2
 800731c:	d10d      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007324:	d109      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007326:	4b53      	ldr	r3, [pc, #332]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	08db      	lsrs	r3, r3, #3
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	4a51      	ldr	r2, [pc, #324]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007332:	fa22 f303 	lsr.w	r3, r2, r3
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	e020      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800733a:	4b4e      	ldr	r3, [pc, #312]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007346:	d106      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800734e:	d102      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007350:	4b4a      	ldr	r3, [pc, #296]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
 8007354:	e012      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007356:	4b47      	ldr	r3, [pc, #284]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b02      	cmp	r3, #2
 8007362:	d107      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800736a:	d103      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800736c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
 8007372:	e003      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007378:	f001 bd19 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800737c:	f001 bd17 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007380:	4b3c      	ldr	r3, [pc, #240]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007386:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800738a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007392:	f7fc fd7f 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8007396:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007398:	f001 bd09 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800739c:	4b35      	ldr	r3, [pc, #212]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073a8:	d10b      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b0:	d107      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b2:	f107 0314 	add.w	r3, r7, #20
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe feda 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
 80073c0:	e047      	b.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80073c2:	4b2c      	ldr	r3, [pc, #176]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ce:	d10b      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d6:	d107      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d8:	f107 0308 	add.w	r3, r7, #8
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff f831 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
 80073e6:	e034      	b.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80073e8:	4b22      	ldr	r3, [pc, #136]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d10d      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80073fa:	d109      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073fc:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	4a1c      	ldr	r2, [pc, #112]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
 800740e:	e020      	b.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007410:	4b18      	ldr	r3, [pc, #96]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741c:	d106      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007424:	d102      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007426:	4b15      	ldr	r3, [pc, #84]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	e012      	b.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800742c:	4b11      	ldr	r3, [pc, #68]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800742e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b02      	cmp	r3, #2
 8007438:	d107      	bne.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007440:	d103      	bne.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800744e:	f001 bcae 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007452:	f001 bcac 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007456:	4b07      	ldr	r3, [pc, #28]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800745c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8007460:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007468:	f7fc fd14 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 800746c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800746e:	f001 bc9e 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007472:	bf00      	nop
 8007474:	44020c00 	.word	0x44020c00
 8007478:	03d09000 	.word	0x03d09000
 800747c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007480:	4ba0      	ldr	r3, [pc, #640]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800748c:	d10b      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007494:	d107      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007496:	f107 0314 	add.w	r3, r7, #20
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fe68 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
 80074a4:	e047      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80074a6:	4b97      	ldr	r3, [pc, #604]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b2:	d10b      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074ba:	d107      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074bc:	f107 0308 	add.w	r3, r7, #8
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe ffbf 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ca:	e034      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80074cc:	4b8d      	ldr	r3, [pc, #564]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d10d      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80074de:	d109      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074e0:	4b88      	ldr	r3, [pc, #544]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	08db      	lsrs	r3, r3, #3
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	4a87      	ldr	r2, [pc, #540]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
 80074f2:	e020      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80074f4:	4b83      	ldr	r3, [pc, #524]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007500:	d106      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007508:	d102      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800750a:	4b80      	ldr	r3, [pc, #512]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
 800750e:	e012      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007510:	4b7c      	ldr	r3, [pc, #496]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d107      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007524:	d103      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
 800752c:	e003      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007532:	f001 bc3c 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007536:	f001 bc3a 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800753a:	4b72      	ldr	r3, [pc, #456]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800753c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007540:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007544:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800754c:	f7fc fca2 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8007550:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007552:	f001 bc2c 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007556:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800755e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007562:	d10b      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800756a:	d107      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800756c:	f107 0314 	add.w	r3, r7, #20
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe fdfd 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	637b      	str	r3, [r7, #52]	; 0x34
 800757a:	e047      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800757c:	4b61      	ldr	r3, [pc, #388]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007588:	d10b      	bne.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007590:	d107      	bne.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007592:	f107 0308 	add.w	r3, r7, #8
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe ff54 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
 80075a0:	e034      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80075a2:	4b58      	ldr	r3, [pc, #352]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d10d      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075b4:	d109      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075b6:	4b53      	ldr	r3, [pc, #332]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	08db      	lsrs	r3, r3, #3
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	4a51      	ldr	r2, [pc, #324]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80075c2:	fa22 f303 	lsr.w	r3, r2, r3
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
 80075c8:	e020      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80075ca:	4b4e      	ldr	r3, [pc, #312]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d6:	d106      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075de:	d102      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80075e0:	4b4a      	ldr	r3, [pc, #296]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34
 80075e4:	e012      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80075e6:	4b47      	ldr	r3, [pc, #284]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d107      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80075fa:	d103      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80075fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
 8007602:	e003      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007608:	f001 bbd1 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800760c:	f001 bbcf 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007610:	4b3c      	ldr	r3, [pc, #240]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007612:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007616:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800761a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007622:	f7fc fc37 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8007626:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007628:	f001 bbc1 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800762c:	4b35      	ldr	r3, [pc, #212]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007638:	d10b      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007640:	d107      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007642:	f107 0314 	add.w	r3, r7, #20
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fd92 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	637b      	str	r3, [r7, #52]	; 0x34
 8007650:	e047      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007652:	4b2c      	ldr	r3, [pc, #176]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800765a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800765e:	d10b      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007666:	d107      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007668:	f107 0308 	add.w	r3, r7, #8
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fee9 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
 8007676:	e034      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007678:	4b22      	ldr	r3, [pc, #136]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b02      	cmp	r3, #2
 8007682:	d10d      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800768a:	d109      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800768c:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	08db      	lsrs	r3, r3, #3
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	4a1c      	ldr	r2, [pc, #112]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
 800769e:	e020      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80076a0:	4b18      	ldr	r3, [pc, #96]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ac:	d106      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80076b6:	4b15      	ldr	r3, [pc, #84]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ba:	e012      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80076bc:	4b11      	ldr	r3, [pc, #68]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d107      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80076d0:	d103      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80076d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	e003      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076de:	f001 bb66 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076e2:	f001 bb64 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80076e6:	4b07      	ldr	r3, [pc, #28]	; (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80076ec:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076f8:	f7fc fbcc 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 80076fc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80076fe:	f001 bb56 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007702:	bf00      	nop
 8007704:	44020c00 	.word	0x44020c00
 8007708:	03d09000 	.word	0x03d09000
 800770c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007710:	4ba1      	ldr	r3, [pc, #644]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800771c:	d10b      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007724:	d107      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007726:	f107 0314 	add.w	r3, r7, #20
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fd20 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
 8007734:	e047      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007736:	4b98      	ldr	r3, [pc, #608]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800773e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007742:	d10b      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800774a:	d107      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800774c:	f107 0308 	add.w	r3, r7, #8
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe fe77 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
 800775a:	e034      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800775c:	4b8e      	ldr	r3, [pc, #568]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b02      	cmp	r3, #2
 8007766:	d10d      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800776e:	d109      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007770:	4b89      	ldr	r3, [pc, #548]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	08db      	lsrs	r3, r3, #3
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	4a88      	ldr	r2, [pc, #544]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
 8007782:	e020      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007784:	4b84      	ldr	r3, [pc, #528]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800778c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007790:	d106      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007798:	d102      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800779a:	4b81      	ldr	r3, [pc, #516]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	e012      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80077a0:	4b7d      	ldr	r3, [pc, #500]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d107      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80077b4:	d103      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
 80077bc:	e003      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c2:	f001 baf4 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077c6:	f001 baf2 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80077ca:	4b73      	ldr	r3, [pc, #460]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fc fb5a 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 80077e0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80077e2:	f001 bae4 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80077e6:	4b6c      	ldr	r3, [pc, #432]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f2:	d10a      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d107      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077fa:	f107 0314 	add.w	r3, r7, #20
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fcb6 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
 8007808:	e043      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800780a:	4b63      	ldr	r3, [pc, #396]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007816:	d10a      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	2b02      	cmp	r3, #2
 800781c:	d107      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800781e:	f107 0308 	add.w	r3, r7, #8
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fe0e 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
 800782c:	e031      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800782e:	4b5a      	ldr	r3, [pc, #360]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d10c      	bne.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2b03      	cmp	r3, #3
 800783e:	d109      	bne.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007840:	4b55      	ldr	r3, [pc, #340]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	08db      	lsrs	r3, r3, #3
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	4a54      	ldr	r2, [pc, #336]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800784c:	fa22 f303 	lsr.w	r3, r2, r3
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
 8007852:	e01e      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007854:	4b50      	ldr	r3, [pc, #320]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800785c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007860:	d105      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	2b04      	cmp	r3, #4
 8007866:	d102      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007868:	4b4d      	ldr	r3, [pc, #308]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
 800786c:	e011      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800786e:	4b4a      	ldr	r3, [pc, #296]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b02      	cmp	r3, #2
 800787a:	d106      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	2b05      	cmp	r3, #5
 8007880:	d103      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
 8007888:	e003      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800788e:	f001 ba8e 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007892:	f001 ba8c 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007896:	4b40      	ldr	r3, [pc, #256]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007898:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800789c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078a0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078a8:	f7fc faf4 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 80078ac:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80078ae:	f001 ba7e 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80078b2:	4b39      	ldr	r3, [pc, #228]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078be:	d10a      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d107      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c6:	f107 0314 	add.w	r3, r7, #20
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fc50 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
 80078d4:	e043      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80078d6:	4b30      	ldr	r3, [pc, #192]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e2:	d10a      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d107      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ea:	f107 0308 	add.w	r3, r7, #8
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fda8 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
 80078f8:	e031      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80078fa:	4b27      	ldr	r3, [pc, #156]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b02      	cmp	r3, #2
 8007904:	d10c      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	2b30      	cmp	r3, #48	; 0x30
 800790a:	d109      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800790c:	4b22      	ldr	r3, [pc, #136]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	08db      	lsrs	r3, r3, #3
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	4a21      	ldr	r2, [pc, #132]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
 800791e:	e01e      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007920:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792c:	d105      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d102      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007934:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
 8007938:	e011      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800793a:	4b17      	ldr	r3, [pc, #92]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800793c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b02      	cmp	r3, #2
 8007946:	d106      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	2b50      	cmp	r3, #80	; 0x50
 800794c:	d103      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800794e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
 8007954:	e003      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800795a:	f001 ba28 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800795e:	f001 ba26 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007962:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007968:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800796c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007974:	f7fc faba 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 8007978:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800797a:	f001 ba18 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007984:	d10e      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007986:	f107 0314 	add.w	r3, r7, #20
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fbf0 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007994:	f001 ba0b 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007998:	44020c00 	.word	0x44020c00
 800799c:	03d09000 	.word	0x03d09000
 80079a0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079aa:	d108      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fe fd47 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ba:	f001 b9f8 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80079be:	4ba4      	ldr	r3, [pc, #656]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d10d      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079d0:	d109      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079d2:	4b9f      	ldr	r3, [pc, #636]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	08db      	lsrs	r3, r3, #3
 80079d8:	f003 0303 	and.w	r3, r3, #3
 80079dc:	4a9d      	ldr	r2, [pc, #628]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80079de:	fa22 f303 	lsr.w	r3, r2, r3
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
 80079e4:	e020      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80079e6:	4b9a      	ldr	r3, [pc, #616]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f2:	d106      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079fa:	d102      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80079fc:	4b96      	ldr	r3, [pc, #600]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007a00:	e012      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007a02:	4b93      	ldr	r3, [pc, #588]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d107      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007a16:	d103      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a24:	f001 b9c3 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a28:	f001 b9c1 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007a2c:	4b88      	ldr	r3, [pc, #544]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007a3e:	f7fc fa0d 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8007a42:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007a44:	f001 b9b3 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d104      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fc f8d9 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8007a52:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a54:	f001 b9ab 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d108      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a5e:	f107 0314 	add.w	r3, r7, #20
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fb84 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a6c:	f001 b99f 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007a70:	4b77      	ldr	r3, [pc, #476]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a7c:	d105      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d102      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007a84:	4b75      	ldr	r3, [pc, #468]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007a86:	637b      	str	r3, [r7, #52]	; 0x34
 8007a88:	e023      	b.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007a8a:	4b71      	ldr	r3, [pc, #452]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d10c      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d109      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a9c:	4b6c      	ldr	r3, [pc, #432]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a6b      	ldr	r2, [pc, #428]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
 8007aae:	e010      	b.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007ab0:	4b67      	ldr	r3, [pc, #412]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007abc:	d105      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	2b05      	cmp	r3, #5
 8007ac2:	d102      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007ac4:	4b64      	ldr	r3, [pc, #400]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac8:	e003      	b.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ace:	f001 b96e 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ad2:	f001 b96c 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007ad6:	4b5e      	ldr	r3, [pc, #376]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007ae2:	4b5b      	ldr	r3, [pc, #364]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d106      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
 8007afc:	e012      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007afe:	4b54      	ldr	r3, [pc, #336]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b0c:	d106      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d103      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007b14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1a:	e003      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007b20:	f001 b945 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b24:	f001 b943 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007b28:	4b49      	ldr	r3, [pc, #292]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b32:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b3a:	f7fc f9ab 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8007b3e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b40:	f001 b935 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4a:	d108      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe fc77 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b5a:	f001 b928 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007b5e:	4b3c      	ldr	r3, [pc, #240]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d10d      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b70:	d109      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b72:	4b37      	ldr	r3, [pc, #220]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	08db      	lsrs	r3, r3, #3
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	4a35      	ldr	r2, [pc, #212]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	e011      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007b86:	4b32      	ldr	r3, [pc, #200]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b9a:	d102      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007b9c:	4b2e      	ldr	r3, [pc, #184]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba0:	e003      	b.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ba6:	f001 b902 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007baa:	f001 b900 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007bae:	4b28      	ldr	r3, [pc, #160]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007bb8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bc0:	f7fc f968 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8007bc4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bc6:	f001 b8f2 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bd0:	d108      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd2:	f107 0308 	add.w	r3, r7, #8
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fc34 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007be0:	f001 b8e5 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007be4:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d10d      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bf6:	d109      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bf8:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	08db      	lsrs	r3, r3, #3
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	4a14      	ldr	r2, [pc, #80]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007c04:	fa22 f303 	lsr.w	r3, r2, r3
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0a:	e011      	b.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007c0c:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c18:	d106      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c20:	d102      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007c22:	4b0d      	ldr	r3, [pc, #52]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
 8007c26:	e003      	b.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c2c:	f001 b8bf 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c30:	f001 b8bd 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c3e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10c      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c46:	f7fc f951 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 8007c4a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c4c:	f001 b8af 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c50:	44020c00 	.word	0x44020c00
 8007c54:	03d09000 	.word	0x03d09000
 8007c58:	003d0900 	.word	0x003d0900
 8007c5c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c66:	d108      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c68:	f107 0308 	add.w	r3, r7, #8
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fbe9 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c76:	f001 b89a 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007c7a:	4b9f      	ldr	r3, [pc, #636]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d10d      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c8c:	d109      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c8e:	4b9a      	ldr	r3, [pc, #616]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	08db      	lsrs	r3, r3, #3
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	4a98      	ldr	r2, [pc, #608]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca0:	e011      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007ca2:	4b95      	ldr	r3, [pc, #596]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cae:	d106      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cb6:	d102      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007cb8:	4b91      	ldr	r3, [pc, #580]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
 8007cbc:	e003      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cc2:	f001 b874 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cc6:	f001 b872 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007cca:	4b8b      	ldr	r3, [pc, #556]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007cd0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007cdc:	f7fc f906 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 8007ce0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ce2:	f001 b864 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cec:	d108      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fba6 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cfc:	f001 b857 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007d00:	4b7d      	ldr	r3, [pc, #500]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d10d      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d12:	d109      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d14:	4b78      	ldr	r3, [pc, #480]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	08db      	lsrs	r3, r3, #3
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	4a77      	ldr	r2, [pc, #476]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
 8007d24:	637b      	str	r3, [r7, #52]	; 0x34
 8007d26:	e011      	b.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007d28:	4b73      	ldr	r3, [pc, #460]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d34:	d106      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d3c:	d102      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007d3e:	4b70      	ldr	r3, [pc, #448]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
 8007d42:	e003      	b.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d48:	f001 b831 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d4c:	f001 b82f 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007d50:	4b69      	ldr	r3, [pc, #420]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d56:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007d5a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d104      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d62:	f7fc f897 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8007d66:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d68:	f001 b821 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d72:	d108      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d74:	f107 0308 	add.w	r3, r7, #8
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fb63 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d82:	f001 b814 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007d86:	4b5c      	ldr	r3, [pc, #368]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d10e      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d98:	d10a      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d9a:	4b57      	ldr	r3, [pc, #348]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	08db      	lsrs	r3, r3, #3
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	4a55      	ldr	r2, [pc, #340]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007da6:	fa22 f303 	lsr.w	r3, r2, r3
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dac:	f000 bfff 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007db4:	f000 bffb 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007db8:	4b4f      	ldr	r3, [pc, #316]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007dba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007dbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007dca:	d056      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007dd2:	f200 808b 	bhi.w	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ddc:	d03e      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de4:	f200 8082 	bhi.w	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dee:	d027      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007df6:	d879      	bhi.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfe:	d017      	beq.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e06:	d871      	bhi.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e14:	d004      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007e16:	e069      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007e18:	f7fc f868 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 8007e1c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007e1e:	e068      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe f9a3 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e2e:	e060      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e30:	f107 0308 	add.w	r3, r7, #8
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fb05 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e3e:	e058      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e40:	4b2d      	ldr	r3, [pc, #180]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d103      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e54:	e04d      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e5a:	e04a      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007e5c:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e6a:	d103      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007e6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e72:	e03e      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e78:	e03b      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e7a:	4b1f      	ldr	r3, [pc, #124]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e80:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e84:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e86:	4b1c      	ldr	r3, [pc, #112]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d10c      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d109      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e98:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	08db      	lsrs	r3, r3, #3
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	4a16      	ldr	r2, [pc, #88]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eaa:	e01e      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eac:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb8:	d106      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec0:	d102      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec6:	e010      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ec8:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed4:	d106      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007edc:	d102      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee2:	e002      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007ee8:	e003      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007eea:	e002      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ef0:	bf00      	nop
          }
        }
        break;
 8007ef2:	f000 bf5c 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ef6:	bf00      	nop
 8007ef8:	44020c00 	.word	0x44020c00
 8007efc:	03d09000 	.word	0x03d09000
 8007f00:	003d0900 	.word	0x003d0900
 8007f04:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f08:	4b9e      	ldr	r3, [pc, #632]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f0e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007f12:	633b      	str	r3, [r7, #48]	; 0x30
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007f1a:	d056      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007f22:	f200 808b 	bhi.w	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f2c:	d03e      	beq.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f34:	f200 8082 	bhi.w	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f3e:	d027      	beq.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f46:	d879      	bhi.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f4e:	d017      	beq.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f56:	d871      	bhi.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f64:	d004      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007f66:	e069      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007f68:	f7fb ff94 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8007f6c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007f6e:	e068      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f70:	f107 0314 	add.w	r3, r7, #20
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe f8fb 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f7e:	e060      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f80:	f107 0308 	add.w	r3, r7, #8
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fa5d 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f8e:	e058      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f90:	4b7c      	ldr	r3, [pc, #496]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d103      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007fa4:	e04d      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007faa:	e04a      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007fac:	4b75      	ldr	r3, [pc, #468]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fba:	d103      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007fbc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007fc0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007fc2:	e03e      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fc8:	e03b      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fca:	4b6e      	ldr	r3, [pc, #440]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fd0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fd6:	4b6b      	ldr	r3, [pc, #428]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d10c      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d109      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fe8:	4b66      	ldr	r3, [pc, #408]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	08db      	lsrs	r3, r3, #3
 8007fee:	f003 0303 	and.w	r3, r3, #3
 8007ff2:	4a65      	ldr	r2, [pc, #404]	; (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8007ffa:	e01e      	b.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ffc:	4b61      	ldr	r3, [pc, #388]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008008:	d106      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008010:	d102      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008012:	4b5e      	ldr	r3, [pc, #376]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	e010      	b.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008018:	4b5a      	ldr	r3, [pc, #360]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008024:	d106      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800802c:	d102      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800802e:	4b58      	ldr	r3, [pc, #352]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
 8008032:	e002      	b.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008038:	e003      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800803a:	e002      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008040:	bf00      	nop
          }
        }
        break;
 8008042:	f000 beb4 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008046:	4b4f      	ldr	r3, [pc, #316]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008048:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800804c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008050:	633b      	str	r3, [r7, #48]	; 0x30
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008058:	d056      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008060:	f200 808b 	bhi.w	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800806a:	d03e      	beq.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008072:	f200 8082 	bhi.w	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800807c:	d027      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008084:	d879      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800808c:	d017      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008094:	d871      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a2:	d004      	beq.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80080a4:	e069      	b.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80080a6:	f7fb ff21 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 80080aa:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80080ac:	e068      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ae:	f107 0314 	add.w	r3, r7, #20
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe f85c 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080bc:	e060      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe f9be 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080cc:	e058      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080ce:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d103      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80080dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80080e2:	e04d      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080e8:	e04a      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80080ea:	4b26      	ldr	r3, [pc, #152]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080f8:	d103      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80080fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008100:	e03e      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008106:	e03b      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008108:	4b1e      	ldr	r3, [pc, #120]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800810a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800810e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008114:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b02      	cmp	r3, #2
 800811e:	d10c      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008126:	4b17      	ldr	r3, [pc, #92]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	08db      	lsrs	r3, r3, #3
 800812c:	f003 0303 	and.w	r3, r3, #3
 8008130:	4a15      	ldr	r2, [pc, #84]	; (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008132:	fa22 f303 	lsr.w	r3, r2, r3
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
 8008138:	e01e      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008146:	d106      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814e:	d102      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008150:	4b0e      	ldr	r3, [pc, #56]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
 8008154:	e010      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008162:	d106      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800816a:	d102      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800816c:	4b08      	ldr	r3, [pc, #32]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800816e:	637b      	str	r3, [r7, #52]	; 0x34
 8008170:	e002      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008176:	e003      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008178:	e002      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800817e:	bf00      	nop
          }
        }
        break;
 8008180:	f000 be15 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008184:	44020c00 	.word	0x44020c00
 8008188:	03d09000 	.word	0x03d09000
 800818c:	003d0900 	.word	0x003d0900
 8008190:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008194:	4b9e      	ldr	r3, [pc, #632]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008196:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800819a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800819e:	633b      	str	r3, [r7, #48]	; 0x30
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80081a6:	d056      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80081ae:	f200 808b 	bhi.w	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081b8:	d03e      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081c0:	f200 8082 	bhi.w	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081ca:	d027      	beq.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081d2:	d879      	bhi.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081da:	d017      	beq.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081e2:	d871      	bhi.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d004      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f0:	d004      	beq.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80081f2:	e069      	b.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80081f4:	f7fb fe7a 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 80081f8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80081fa:	e068      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081fc:	f107 0314 	add.w	r3, r7, #20
 8008200:	4618      	mov	r0, r3
 8008202:	f7fd ffb5 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800820a:	e060      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe f917 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800821a:	e058      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800821c:	4b7c      	ldr	r3, [pc, #496]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800821e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b02      	cmp	r3, #2
 8008228:	d103      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800822a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008230:	e04d      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008236:	e04a      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008238:	4b75      	ldr	r3, [pc, #468]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800823a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800823e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008246:	d103      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008248:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800824c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800824e:	e03e      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008254:	e03b      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008256:	4b6e      	ldr	r3, [pc, #440]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800825c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008262:	4b6b      	ldr	r3, [pc, #428]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b02      	cmp	r3, #2
 800826c:	d10c      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008274:	4b66      	ldr	r3, [pc, #408]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	4a65      	ldr	r2, [pc, #404]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
 8008286:	e01e      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008288:	4b61      	ldr	r3, [pc, #388]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008294:	d106      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829c:	d102      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800829e:	4b5e      	ldr	r3, [pc, #376]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	e010      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082a4:	4b5a      	ldr	r3, [pc, #360]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082b0:	d106      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082b8:	d102      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80082ba:	4b58      	ldr	r3, [pc, #352]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
 80082be:	e002      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80082c4:	e003      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80082c6:	e002      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082cc:	bf00      	nop
          }
        }
        break;
 80082ce:	f000 bd6e 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80082d2:	4b4f      	ldr	r3, [pc, #316]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80082d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80082d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80082dc:	633b      	str	r3, [r7, #48]	; 0x30
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80082e4:	d056      	beq.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80082ec:	f200 808b 	bhi.w	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082f6:	d03e      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082fe:	f200 8082 	bhi.w	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008308:	d027      	beq.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008310:	d879      	bhi.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008318:	d017      	beq.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008320:	d871      	bhi.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800832e:	d004      	beq.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008330:	e069      	b.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008332:	f7fb fddb 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 8008336:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008338:	e068      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800833a:	f107 0314 	add.w	r3, r7, #20
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd ff16 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008348:	e060      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800834a:	f107 0308 	add.w	r3, r7, #8
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe f878 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008358:	e058      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800835a:	4b2d      	ldr	r3, [pc, #180]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800835c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008360:	f003 0302 	and.w	r3, r3, #2
 8008364:	2b02      	cmp	r3, #2
 8008366:	d103      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800836e:	e04d      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008374:	e04a      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008376:	4b26      	ldr	r3, [pc, #152]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800837c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008384:	d103      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008386:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800838c:	e03e      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008392:	e03b      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008394:	4b1e      	ldr	r3, [pc, #120]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800839a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083a0:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d10c      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083b2:	4b17      	ldr	r3, [pc, #92]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	08db      	lsrs	r3, r3, #3
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	4a15      	ldr	r2, [pc, #84]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80083be:	fa22 f303 	lsr.w	r3, r2, r3
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
 80083c4:	e01e      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083c6:	4b12      	ldr	r3, [pc, #72]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d2:	d106      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083da:	d102      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80083dc:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
 80083e0:	e010      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083e2:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ee:	d106      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f6:	d102      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	e002      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008402:	e003      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008404:	e002      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800840a:	bf00      	nop
          }
        }
        break;
 800840c:	f000 bccf 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008410:	44020c00 	.word	0x44020c00
 8008414:	03d09000 	.word	0x03d09000
 8008418:	003d0900 	.word	0x003d0900
 800841c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008420:	4b9e      	ldr	r3, [pc, #632]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008422:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008426:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800842a:	633b      	str	r3, [r7, #48]	; 0x30
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008432:	d056      	beq.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800843a:	f200 808b 	bhi.w	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008444:	d03e      	beq.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844c:	f200 8082 	bhi.w	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008456:	d027      	beq.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800845e:	d879      	bhi.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008466:	d017      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800846e:	d871      	bhi.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800847c:	d004      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800847e:	e069      	b.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008480:	f7fb fd34 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 8008484:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008486:	e068      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd fe6f 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008496:	e060      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008498:	f107 0308 	add.w	r3, r7, #8
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd ffd1 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084a6:	e058      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084a8:	4b7c      	ldr	r3, [pc, #496]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d103      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80084b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084bc:	e04d      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084c2:	e04a      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80084c4:	4b75      	ldr	r3, [pc, #468]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084d2:	d103      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80084d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084da:	e03e      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084e0:	e03b      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084e2:	4b6e      	ldr	r3, [pc, #440]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084e8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084ee:	4b6b      	ldr	r3, [pc, #428]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d10c      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008500:	4b66      	ldr	r3, [pc, #408]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	08db      	lsrs	r3, r3, #3
 8008506:	f003 0303 	and.w	r3, r3, #3
 800850a:	4a65      	ldr	r2, [pc, #404]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800850c:	fa22 f303 	lsr.w	r3, r2, r3
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
 8008512:	e01e      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008514:	4b61      	ldr	r3, [pc, #388]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800851c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008520:	d106      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008528:	d102      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800852a:	4b5e      	ldr	r3, [pc, #376]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800852c:	637b      	str	r3, [r7, #52]	; 0x34
 800852e:	e010      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008530:	4b5a      	ldr	r3, [pc, #360]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800853c:	d106      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008544:	d102      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008546:	4b58      	ldr	r3, [pc, #352]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008548:	637b      	str	r3, [r7, #52]	; 0x34
 800854a:	e002      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008550:	e003      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008552:	e002      	b.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008558:	bf00      	nop
          }
        }
        break;
 800855a:	f000 bc28 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800855e:	4b4f      	ldr	r3, [pc, #316]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008568:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800856a:	4b4c      	ldr	r3, [pc, #304]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008576:	d106      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800857e:	4b4a      	ldr	r3, [pc, #296]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008580:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008582:	f000 bc14 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858c:	d108      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800858e:	f107 0320 	add.w	r3, r7, #32
 8008592:	4618      	mov	r0, r3
 8008594:	f7fd fc82 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800859c:	f000 bc07 	b.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a6:	d107      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a8:	f107 0314 	add.w	r3, r7, #20
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fd fddf 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085b6:	e3fa      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085bc:	e3f7      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80085be:	4b37      	ldr	r3, [pc, #220]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085c4:	f003 0307 	and.w	r3, r3, #7
 80085c8:	633b      	str	r3, [r7, #48]	; 0x30
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d861      	bhi.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085ed 	.word	0x080085ed
 80085dc:	080085fd 	.word	0x080085fd
 80085e0:	0800860d 	.word	0x0800860d
 80085e4:	0800861d 	.word	0x0800861d
 80085e8:	08008623 	.word	0x08008623
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085ec:	f107 0320 	add.w	r3, r7, #32
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fd fc53 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085fa:	e04e      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fc:	f107 0314 	add.w	r3, r7, #20
 8008600:	4618      	mov	r0, r3
 8008602:	f7fd fdb5 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800860a:	e046      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800860c:	f107 0308 	add.w	r3, r7, #8
 8008610:	4618      	mov	r0, r3
 8008612:	f7fd ff17 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800861a:	e03e      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800861c:	4b23      	ldr	r3, [pc, #140]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008620:	e03b      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008622:	4b1e      	ldr	r3, [pc, #120]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008628:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800862c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800862e:	4b1b      	ldr	r3, [pc, #108]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b02      	cmp	r3, #2
 8008638:	d10c      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d109      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008640:	4b16      	ldr	r3, [pc, #88]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	08db      	lsrs	r3, r3, #3
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800864c:	fa22 f303 	lsr.w	r3, r2, r3
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
 8008652:	e01e      	b.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008654:	4b11      	ldr	r3, [pc, #68]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800865c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008660:	d106      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008668:	d102      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800866a:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800866c:	637b      	str	r3, [r7, #52]	; 0x34
 800866e:	e010      	b.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800867c:	d106      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008684:	d102      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008686:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
 800868a:	e002      	b.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008690:	e003      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008692:	e002      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008698:	bf00      	nop
          }
        }
        break;
 800869a:	e388      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800869c:	44020c00 	.word	0x44020c00
 80086a0:	03d09000 	.word	0x03d09000
 80086a4:	003d0900 	.word	0x003d0900
 80086a8:	007a1200 	.word	0x007a1200
 80086ac:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80086b0:	4ba9      	ldr	r3, [pc, #676]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80086b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ba:	633b      	str	r3, [r7, #48]	; 0x30
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	2b20      	cmp	r3, #32
 80086c0:	f200 809a 	bhi.w	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	08008751 	.word	0x08008751
 80086d0:	080087f9 	.word	0x080087f9
 80086d4:	080087f9 	.word	0x080087f9
 80086d8:	080087f9 	.word	0x080087f9
 80086dc:	080087f9 	.word	0x080087f9
 80086e0:	080087f9 	.word	0x080087f9
 80086e4:	080087f9 	.word	0x080087f9
 80086e8:	080087f9 	.word	0x080087f9
 80086ec:	08008761 	.word	0x08008761
 80086f0:	080087f9 	.word	0x080087f9
 80086f4:	080087f9 	.word	0x080087f9
 80086f8:	080087f9 	.word	0x080087f9
 80086fc:	080087f9 	.word	0x080087f9
 8008700:	080087f9 	.word	0x080087f9
 8008704:	080087f9 	.word	0x080087f9
 8008708:	080087f9 	.word	0x080087f9
 800870c:	08008771 	.word	0x08008771
 8008710:	080087f9 	.word	0x080087f9
 8008714:	080087f9 	.word	0x080087f9
 8008718:	080087f9 	.word	0x080087f9
 800871c:	080087f9 	.word	0x080087f9
 8008720:	080087f9 	.word	0x080087f9
 8008724:	080087f9 	.word	0x080087f9
 8008728:	080087f9 	.word	0x080087f9
 800872c:	08008781 	.word	0x08008781
 8008730:	080087f9 	.word	0x080087f9
 8008734:	080087f9 	.word	0x080087f9
 8008738:	080087f9 	.word	0x080087f9
 800873c:	080087f9 	.word	0x080087f9
 8008740:	080087f9 	.word	0x080087f9
 8008744:	080087f9 	.word	0x080087f9
 8008748:	080087f9 	.word	0x080087f9
 800874c:	08008787 	.word	0x08008787
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008750:	f107 0320 	add.w	r3, r7, #32
 8008754:	4618      	mov	r0, r3
 8008756:	f7fd fba1 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800875e:	e04e      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008760:	f107 0314 	add.w	r3, r7, #20
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd fd03 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800876e:	e046      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008770:	f107 0308 	add.w	r3, r7, #8
 8008774:	4618      	mov	r0, r3
 8008776:	f7fd fe65 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800877e:	e03e      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008780:	4b76      	ldr	r3, [pc, #472]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008782:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008784:	e03b      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008786:	4b74      	ldr	r3, [pc, #464]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800878c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008792:	4b71      	ldr	r3, [pc, #452]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b02      	cmp	r3, #2
 800879c:	d10c      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d109      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087a4:	4b6c      	ldr	r3, [pc, #432]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	08db      	lsrs	r3, r3, #3
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	4a6c      	ldr	r2, [pc, #432]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80087b0:	fa22 f303 	lsr.w	r3, r2, r3
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
 80087b6:	e01e      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087b8:	4b67      	ldr	r3, [pc, #412]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c4:	d106      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087cc:	d102      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087ce:	4b65      	ldr	r3, [pc, #404]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80087d0:	637b      	str	r3, [r7, #52]	; 0x34
 80087d2:	e010      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087d4:	4b60      	ldr	r3, [pc, #384]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087e0:	d106      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e8:	d102      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087ea:	4b5f      	ldr	r3, [pc, #380]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
 80087ee:	e002      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80087f4:	e003      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80087f6:	e002      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087fc:	bf00      	nop
          }
        }
        break;
 80087fe:	e2d6      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008800:	4b55      	ldr	r3, [pc, #340]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008806:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800880a:	633b      	str	r3, [r7, #48]	; 0x30
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008812:	d031      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881a:	d866      	bhi.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	2bc0      	cmp	r3, #192	; 0xc0
 8008820:	d027      	beq.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	2bc0      	cmp	r3, #192	; 0xc0
 8008826:	d860      	bhi.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	2b80      	cmp	r3, #128	; 0x80
 800882c:	d019      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2b80      	cmp	r3, #128	; 0x80
 8008832:	d85a      	bhi.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	2b40      	cmp	r3, #64	; 0x40
 800883e:	d008      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008840:	e053      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008842:	f107 0320 	add.w	r3, r7, #32
 8008846:	4618      	mov	r0, r3
 8008848:	f7fd fb28 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008850:	e04e      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	4618      	mov	r0, r3
 8008858:	f7fd fc8a 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008860:	e046      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008862:	f107 0308 	add.w	r3, r7, #8
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd fdec 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008870:	e03e      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008872:	4b3a      	ldr	r3, [pc, #232]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008874:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008876:	e03b      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008878:	4b37      	ldr	r3, [pc, #220]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800887a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800887e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008884:	4b34      	ldr	r3, [pc, #208]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b02      	cmp	r3, #2
 800888e:	d10c      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008896:	4b30      	ldr	r3, [pc, #192]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	08db      	lsrs	r3, r3, #3
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	4a2f      	ldr	r2, [pc, #188]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80088a2:	fa22 f303 	lsr.w	r3, r2, r3
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
 80088a8:	e01e      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088aa:	4b2b      	ldr	r3, [pc, #172]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b6:	d106      	bne.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088be:	d102      	bne.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
 80088c4:	e010      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088c6:	4b24      	ldr	r3, [pc, #144]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088d2:	d106      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088da:	d102      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80088dc:	4b22      	ldr	r3, [pc, #136]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
 80088e0:	e002      	b.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80088e6:	e003      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80088e8:	e002      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088ee:	bf00      	nop
          }
        }
        break;
 80088f0:	e25d      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80088f2:	4b19      	ldr	r3, [pc, #100]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088f8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80088fc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	2b00      	cmp	r3, #0
 8008902:	d103      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008904:	f7fb fadc 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8008908:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800890a:	e250      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800890c:	4b12      	ldr	r3, [pc, #72]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008918:	d10b      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008920:	d107      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008922:	f107 0314 	add.w	r3, r7, #20
 8008926:	4618      	mov	r0, r3
 8008928:	f7fd fc22 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	637b      	str	r3, [r7, #52]	; 0x34
 8008930:	e04f      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800893a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800893e:	d115      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008946:	d111      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008948:	f107 0308 	add.w	r3, r7, #8
 800894c:	4618      	mov	r0, r3
 800894e:	f7fd fd79 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	637b      	str	r3, [r7, #52]	; 0x34
 8008956:	e03c      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008958:	44020c00 	.word	0x44020c00
 800895c:	00bb8000 	.word	0x00bb8000
 8008960:	03d09000 	.word	0x03d09000
 8008964:	003d0900 	.word	0x003d0900
 8008968:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800896c:	4b94      	ldr	r3, [pc, #592]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b02      	cmp	r3, #2
 8008976:	d10d      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800897e:	d109      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008980:	4b8f      	ldr	r3, [pc, #572]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	4a8e      	ldr	r2, [pc, #568]	; (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
 8008992:	e01e      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008994:	4b8a      	ldr	r3, [pc, #552]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800899c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a0:	d106      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a8:	d102      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80089aa:	4b87      	ldr	r3, [pc, #540]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80089ac:	637b      	str	r3, [r7, #52]	; 0x34
 80089ae:	e010      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80089b0:	4b83      	ldr	r3, [pc, #524]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089bc:	d106      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80089c4:	d102      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80089c6:	4b81      	ldr	r3, [pc, #516]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ca:	e002      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089d0:	e1ed      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089d2:	e1ec      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80089d4:	4b7a      	ldr	r3, [pc, #488]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80089de:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d103      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80089e6:	f7fb fa81 	bl	8003eec <HAL_RCC_GetPCLK3Freq>
 80089ea:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80089ec:	e1df      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80089ee:	4b74      	ldr	r3, [pc, #464]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089fa:	d10b      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a02:	d107      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a04:	f107 0314 	add.w	r3, r7, #20
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fd fbb1 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	637b      	str	r3, [r7, #52]	; 0x34
 8008a12:	e045      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008a14:	4b6a      	ldr	r3, [pc, #424]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a20:	d10b      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a28:	d107      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a2a:	f107 0308 	add.w	r3, r7, #8
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fd fd08 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
 8008a38:	e032      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008a3a:	4b61      	ldr	r3, [pc, #388]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d10d      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a4c:	d109      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a4e:	4b5c      	ldr	r3, [pc, #368]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	08db      	lsrs	r3, r3, #3
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	4a5a      	ldr	r2, [pc, #360]	; (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a60:	e01e      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008a62:	4b57      	ldr	r3, [pc, #348]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a76:	d102      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008a78:	4b53      	ldr	r3, [pc, #332]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a7c:	e010      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008a7e:	4b50      	ldr	r3, [pc, #320]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a8a:	d106      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008a92:	d102      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008a94:	4b4d      	ldr	r3, [pc, #308]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
 8008a98:	e002      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a9e:	e186      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008aa0:	e185      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008aa2:	4b47      	ldr	r3, [pc, #284]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aa8:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008aac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d103      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008ab4:	f7fb fa04 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8008ab8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008aba:	e178      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008abc:	4b40      	ldr	r3, [pc, #256]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ac8:	d10b      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad0:	d107      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad2:	f107 0314 	add.w	r3, r7, #20
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fd fb4a 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae0:	e045      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008ae2:	4b37      	ldr	r3, [pc, #220]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aee:	d10b      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af6:	d107      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008af8:	f107 0308 	add.w	r3, r7, #8
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fd fca1 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	637b      	str	r3, [r7, #52]	; 0x34
 8008b06:	e032      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008b08:	4b2d      	ldr	r3, [pc, #180]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d10d      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008b1a:	d109      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b1c:	4b28      	ldr	r3, [pc, #160]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	08db      	lsrs	r3, r3, #3
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	4a27      	ldr	r2, [pc, #156]	; (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b2e:	e01e      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008b30:	4b23      	ldr	r3, [pc, #140]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b3c:	d106      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b44:	d102      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008b46:	4b20      	ldr	r3, [pc, #128]	; (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008b48:	637b      	str	r3, [r7, #52]	; 0x34
 8008b4a:	e010      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008b4c:	4b1c      	ldr	r3, [pc, #112]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b58:	d106      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008b60:	d102      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008b62:	4b1a      	ldr	r3, [pc, #104]	; (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
 8008b66:	e002      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b6c:	e11f      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b6e:	e11e      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008b70:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d85f      	bhi.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008b82:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008ba1 	.word	0x08008ba1
 8008b90:	08008bb1 	.word	0x08008bb1
 8008b94:	08008bd1 	.word	0x08008bd1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008b98:	f7fb f960 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8008b9c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008b9e:	e053      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ba0:	f107 0320 	add.w	r3, r7, #32
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fd f979 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bae:	e04b      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bb0:	f107 0314 	add.w	r3, r7, #20
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fd fadb 	bl	8006170 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bbe:	e043      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008bc0:	44020c00 	.word	0x44020c00
 8008bc4:	03d09000 	.word	0x03d09000
 8008bc8:	003d0900 	.word	0x003d0900
 8008bcc:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bd0:	4b79      	ldr	r3, [pc, #484]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008bd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008bd6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bdc:	4b76      	ldr	r3, [pc, #472]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d10c      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d109      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bee:	4b72      	ldr	r3, [pc, #456]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	08db      	lsrs	r3, r3, #3
 8008bf4:	f003 0303 	and.w	r3, r3, #3
 8008bf8:	4a70      	ldr	r2, [pc, #448]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008c00:	e01e      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c02:	4b6d      	ldr	r3, [pc, #436]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c0e:	d106      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c16:	d102      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008c18:	4b69      	ldr	r3, [pc, #420]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1c:	e010      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c1e:	4b66      	ldr	r3, [pc, #408]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c2a:	d106      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c32:	d102      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c34:	4b63      	ldr	r3, [pc, #396]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
 8008c38:	e002      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008c3e:	e003      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c46:	bf00      	nop
          }
        }
        break;
 8008c48:	e0b1      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008c4a:	4b5b      	ldr	r3, [pc, #364]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008c56:	4b58      	ldr	r3, [pc, #352]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d106      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c70:	e01f      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008c72:	4b51      	ldr	r3, [pc, #324]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c80:	d106      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	2b40      	cmp	r3, #64	; 0x40
 8008c86:	d103      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008c88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8e:	e010      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008c90:	4b49      	ldr	r3, [pc, #292]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c9c:	d106      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	2b80      	cmp	r3, #128	; 0x80
 8008ca2:	d103      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008ca4:	f248 0312 	movw	r3, #32786	; 0x8012
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8008caa:	e002      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008cb0:	e07d      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cb2:	e07c      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008cb4:	4b40      	ldr	r3, [pc, #256]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008cbe:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008cc0:	4b3d      	ldr	r3, [pc, #244]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ccc:	d105      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008cd4:	4b3c      	ldr	r3, [pc, #240]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd8:	e031      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008cda:	4b37      	ldr	r3, [pc, #220]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ce6:	d10a      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	2b10      	cmp	r3, #16
 8008cec:	d107      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cee:	f107 0320 	add.w	r3, r7, #32
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fd f8d2 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfc:	e01f      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008cfe:	4b2e      	ldr	r3, [pc, #184]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d106      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d103      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8008d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d16:	637b      	str	r3, [r7, #52]	; 0x34
 8008d18:	e011      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008d1a:	4b27      	ldr	r3, [pc, #156]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d28:	d106      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	2b30      	cmp	r3, #48	; 0x30
 8008d2e:	d103      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008d30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
 8008d36:	e002      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008d3c:	e037      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d3e:	e036      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008d40:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d4a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	2b10      	cmp	r3, #16
 8008d50:	d107      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d52:	f107 0320 	add.w	r3, r7, #32
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fd f8a0 	bl	8005e9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008d60:	e025      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008d62:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d6e:	d10a      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d107      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d76:	f107 0308 	add.w	r3, r7, #8
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fd fb62 	bl	8006444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	637b      	str	r3, [r7, #52]	; 0x34
 8008d84:	e00f      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008d86:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d92:	d105      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	2b30      	cmp	r3, #48	; 0x30
 8008d98:	d102      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d9e:	e002      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008da4:	e003      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008da6:	e002      	b.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008dac:	bf00      	nop
    }
  }

  return (frequency);
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	373c      	adds	r7, #60	; 0x3c
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd90      	pop	{r4, r7, pc}
 8008db8:	44020c00 	.word	0x44020c00
 8008dbc:	03d09000 	.word	0x03d09000
 8008dc0:	003d0900 	.word	0x003d0900
 8008dc4:	007a1200 	.word	0x007a1200
 8008dc8:	02dc6c00 	.word	0x02dc6c00

08008dcc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008dd4:	4b48      	ldr	r3, [pc, #288]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a47      	ldr	r2, [pc, #284]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008dda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dde:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008de0:	f7f8 ffa0 	bl	8001d24 <HAL_GetTick>
 8008de4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008de6:	e008      	b.n	8008dfa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008de8:	f7f8 ff9c 	bl	8001d24 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d901      	bls.n	8008dfa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e07a      	b.n	8008ef0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dfa:	4b3f      	ldr	r3, [pc, #252]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f0      	bne.n	8008de8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008e06:	4b3c      	ldr	r3, [pc, #240]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6852      	ldr	r2, [r2, #4]
 8008e1a:	0212      	lsls	r2, r2, #8
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	4936      	ldr	r1, [pc, #216]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	025b      	lsls	r3, r3, #9
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	041b      	lsls	r3, r3, #16
 8008e42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e46:	431a      	orrs	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	061b      	lsls	r3, r3, #24
 8008e50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e54:	4928      	ldr	r1, [pc, #160]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008e5a:	4b27      	ldr	r3, [pc, #156]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	f023 020c 	bic.w	r2, r3, #12
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	4924      	ldr	r1, [pc, #144]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008e6c:	4b22      	ldr	r3, [pc, #136]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	f023 0220 	bic.w	r2, r3, #32
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	491f      	ldr	r1, [pc, #124]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008e7e:	4b1e      	ldr	r3, [pc, #120]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	491c      	ldr	r1, [pc, #112]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	4a19      	ldr	r2, [pc, #100]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e92:	f023 0310 	bic.w	r3, r3, #16
 8008e96:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008e98:	4b17      	ldr	r3, [pc, #92]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ea0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	6a12      	ldr	r2, [r2, #32]
 8008ea8:	00d2      	lsls	r2, r2, #3
 8008eaa:	4913      	ldr	r1, [pc, #76]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008eb0:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	4a10      	ldr	r2, [pc, #64]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008eb6:	f043 0310 	orr.w	r3, r3, #16
 8008eba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a0d      	ldr	r2, [pc, #52]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ec6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ec8:	f7f8 ff2c 	bl	8001d24 <HAL_GetTick>
 8008ecc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ece:	e008      	b.n	8008ee2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ed0:	f7f8 ff28 	bl	8001d24 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e006      	b.n	8008ef0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <RCCEx_PLL2_Config+0x12c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0f0      	beq.n	8008ed0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0

}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	44020c00 	.word	0x44020c00

08008efc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008f04:	4b48      	ldr	r3, [pc, #288]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a47      	ldr	r2, [pc, #284]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f10:	f7f8 ff08 	bl	8001d24 <HAL_GetTick>
 8008f14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f16:	e008      	b.n	8008f2a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f18:	f7f8 ff04 	bl	8001d24 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d901      	bls.n	8008f2a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e07a      	b.n	8009020 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f2a:	4b3f      	ldr	r3, [pc, #252]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f0      	bne.n	8008f18 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008f36:	4b3c      	ldr	r3, [pc, #240]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f3e:	f023 0303 	bic.w	r3, r3, #3
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	6811      	ldr	r1, [r2, #0]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6852      	ldr	r2, [r2, #4]
 8008f4a:	0212      	lsls	r2, r2, #8
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	4936      	ldr	r1, [pc, #216]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	630b      	str	r3, [r1, #48]	; 0x30
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	025b      	lsls	r3, r3, #9
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	041b      	lsls	r3, r3, #16
 8008f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	061b      	lsls	r3, r3, #24
 8008f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f84:	4928      	ldr	r1, [pc, #160]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f8a:	4b27      	ldr	r3, [pc, #156]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	f023 020c 	bic.w	r2, r3, #12
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	4924      	ldr	r1, [pc, #144]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008f9c:	4b22      	ldr	r3, [pc, #136]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa0:	f023 0220 	bic.w	r2, r3, #32
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	491f      	ldr	r1, [pc, #124]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008fae:	4b1e      	ldr	r3, [pc, #120]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	491c      	ldr	r1, [pc, #112]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc0:	4a19      	ldr	r2, [pc, #100]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fc2:	f023 0310 	bic.w	r3, r3, #16
 8008fc6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008fc8:	4b17      	ldr	r3, [pc, #92]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fd0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6a12      	ldr	r2, [r2, #32]
 8008fd8:	00d2      	lsls	r2, r2, #3
 8008fda:	4913      	ldr	r1, [pc, #76]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008fe0:	4b11      	ldr	r3, [pc, #68]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	4a10      	ldr	r2, [pc, #64]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fe6:	f043 0310 	orr.w	r3, r3, #16
 8008fea:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008fec:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a0d      	ldr	r2, [pc, #52]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8008ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ff8:	f7f8 fe94 	bl	8001d24 <HAL_GetTick>
 8008ffc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ffe:	e008      	b.n	8009012 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009000:	f7f8 fe90 	bl	8001d24 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b02      	cmp	r3, #2
 800900c:	d901      	bls.n	8009012 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e006      	b.n	8009020 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <RCCEx_PLL3_Config+0x12c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0f0      	beq.n	8009000 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	44020c00 	.word	0x44020c00

0800902c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <HAL_RTCEx_BKUPWrite+0x2c>)
 800903a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4413      	add	r3, r2
 8009044:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	601a      	str	r2, [r3, #0]
}
 800904c:	bf00      	nop
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	44007d00 	.word	0x44007d00

0800905c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8009066:	4b07      	ldr	r3, [pc, #28]	; (8009084 <HAL_RTCEx_BKUPRead+0x28>)
 8009068:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	44007d00 	.word	0x44007d00

08009088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e049      	b.n	800912e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f841 	bl	8009136 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f000 fa60 	bl	800958c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	d001      	beq.n	8009164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e07c      	b.n	800925e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0201 	orr.w	r2, r2, #1
 800917a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a3a      	ldr	r2, [pc, #232]	; (800926c <HAL_TIM_Base_Start_IT+0x120>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d04a      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a39      	ldr	r2, [pc, #228]	; (8009270 <HAL_TIM_Base_Start_IT+0x124>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d045      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009198:	d040      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091a2:	d03b      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a32      	ldr	r2, [pc, #200]	; (8009274 <HAL_TIM_Base_Start_IT+0x128>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d036      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a31      	ldr	r2, [pc, #196]	; (8009278 <HAL_TIM_Base_Start_IT+0x12c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d031      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a2f      	ldr	r2, [pc, #188]	; (800927c <HAL_TIM_Base_Start_IT+0x130>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d02c      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a2e      	ldr	r2, [pc, #184]	; (8009280 <HAL_TIM_Base_Start_IT+0x134>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d027      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a2c      	ldr	r2, [pc, #176]	; (8009284 <HAL_TIM_Base_Start_IT+0x138>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d022      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a2b      	ldr	r2, [pc, #172]	; (8009288 <HAL_TIM_Base_Start_IT+0x13c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d01d      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a29      	ldr	r2, [pc, #164]	; (800928c <HAL_TIM_Base_Start_IT+0x140>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d018      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a28      	ldr	r2, [pc, #160]	; (8009290 <HAL_TIM_Base_Start_IT+0x144>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d013      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a26      	ldr	r2, [pc, #152]	; (8009294 <HAL_TIM_Base_Start_IT+0x148>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00e      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a25      	ldr	r2, [pc, #148]	; (8009298 <HAL_TIM_Base_Start_IT+0x14c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d009      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a23      	ldr	r2, [pc, #140]	; (800929c <HAL_TIM_Base_Start_IT+0x150>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d004      	beq.n	800921c <HAL_TIM_Base_Start_IT+0xd0>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a22      	ldr	r2, [pc, #136]	; (80092a0 <HAL_TIM_Base_Start_IT+0x154>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d115      	bne.n	8009248 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	4b20      	ldr	r3, [pc, #128]	; (80092a4 <HAL_TIM_Base_Start_IT+0x158>)
 8009224:	4013      	ands	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b06      	cmp	r3, #6
 800922c:	d015      	beq.n	800925a <HAL_TIM_Base_Start_IT+0x10e>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009234:	d011      	beq.n	800925a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0201 	orr.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009246:	e008      	b.n	800925a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	e000      	b.n	800925c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800925a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	40012c00 	.word	0x40012c00
 8009270:	50012c00 	.word	0x50012c00
 8009274:	40000400 	.word	0x40000400
 8009278:	50000400 	.word	0x50000400
 800927c:	40000800 	.word	0x40000800
 8009280:	50000800 	.word	0x50000800
 8009284:	40000c00 	.word	0x40000c00
 8009288:	50000c00 	.word	0x50000c00
 800928c:	40013400 	.word	0x40013400
 8009290:	50013400 	.word	0x50013400
 8009294:	40001800 	.word	0x40001800
 8009298:	50001800 	.word	0x50001800
 800929c:	40014000 	.word	0x40014000
 80092a0:	50014000 	.word	0x50014000
 80092a4:	00010007 	.word	0x00010007

080092a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d020      	beq.n	800930c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01b      	beq.n	800930c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0202 	mvn.w	r2, #2
 80092dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f003 0303 	and.w	r3, r3, #3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f92c 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 80092f8:	e005      	b.n	8009306 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f91e 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f92f 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f003 0304 	and.w	r3, r3, #4
 8009312:	2b00      	cmp	r3, #0
 8009314:	d020      	beq.n	8009358 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01b      	beq.n	8009358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0204 	mvn.w	r2, #4
 8009328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2202      	movs	r2, #2
 800932e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f906 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 8009344:	e005      	b.n	8009352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f8f8 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f909 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d020      	beq.n	80093a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01b      	beq.n	80093a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f06f 0208 	mvn.w	r2, #8
 8009374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2204      	movs	r2, #4
 800937a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	f003 0303 	and.w	r3, r3, #3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f8e0 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 8009390:	e005      	b.n	800939e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f8d2 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f8e3 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f003 0310 	and.w	r3, r3, #16
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d020      	beq.n	80093f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01b      	beq.n	80093f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f06f 0210 	mvn.w	r2, #16
 80093c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2208      	movs	r2, #8
 80093c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f8ba 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 80093dc:	e005      	b.n	80093ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f8ac 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f8bd 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00c      	beq.n	8009414 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d007      	beq.n	8009414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0201 	mvn.w	r2, #1
 800940c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7f7 fba0 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00c      	beq.n	8009438 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009424:	2b00      	cmp	r3, #0
 8009426:	d007      	beq.n	8009438 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f9d2 	bl	80097dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00c      	beq.n	800945c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f9ca 	bl	80097f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00c      	beq.n	8009480 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d007      	beq.n	8009480 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f87c 	bl	8009578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00c      	beq.n	80094a4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b00      	cmp	r3, #0
 8009492:	d007      	beq.n	80094a4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f06f 0220 	mvn.w	r2, #32
 800949c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f992 	bl	80097c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00c      	beq.n	80094c8 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80094c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f99e 	bl	8009804 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00c      	beq.n	80094ec <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d007      	beq.n	80094ec <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80094e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f996 	bl	8009818 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f98e 	bl	800982c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00c      	beq.n	8009534 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800952c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f986 	bl	8009840 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009534:	bf00      	nop
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a74      	ldr	r2, [pc, #464]	; (8009770 <TIM_Base_SetConfig+0x1e4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d02b      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a73      	ldr	r2, [pc, #460]	; (8009774 <TIM_Base_SetConfig+0x1e8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d027      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b2:	d023      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ba:	d01f      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a6e      	ldr	r2, [pc, #440]	; (8009778 <TIM_Base_SetConfig+0x1ec>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d01b      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a6d      	ldr	r2, [pc, #436]	; (800977c <TIM_Base_SetConfig+0x1f0>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d017      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a6c      	ldr	r2, [pc, #432]	; (8009780 <TIM_Base_SetConfig+0x1f4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d013      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a6b      	ldr	r2, [pc, #428]	; (8009784 <TIM_Base_SetConfig+0x1f8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d00f      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a6a      	ldr	r2, [pc, #424]	; (8009788 <TIM_Base_SetConfig+0x1fc>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d00b      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a69      	ldr	r2, [pc, #420]	; (800978c <TIM_Base_SetConfig+0x200>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d007      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a68      	ldr	r2, [pc, #416]	; (8009790 <TIM_Base_SetConfig+0x204>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_Base_SetConfig+0x70>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a67      	ldr	r2, [pc, #412]	; (8009794 <TIM_Base_SetConfig+0x208>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d108      	bne.n	800960e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a57      	ldr	r2, [pc, #348]	; (8009770 <TIM_Base_SetConfig+0x1e4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d05b      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a56      	ldr	r2, [pc, #344]	; (8009774 <TIM_Base_SetConfig+0x1e8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d057      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009624:	d053      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800962c:	d04f      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a51      	ldr	r2, [pc, #324]	; (8009778 <TIM_Base_SetConfig+0x1ec>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d04b      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a50      	ldr	r2, [pc, #320]	; (800977c <TIM_Base_SetConfig+0x1f0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d047      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a4f      	ldr	r2, [pc, #316]	; (8009780 <TIM_Base_SetConfig+0x1f4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d043      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a4e      	ldr	r2, [pc, #312]	; (8009784 <TIM_Base_SetConfig+0x1f8>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d03f      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a4d      	ldr	r2, [pc, #308]	; (8009788 <TIM_Base_SetConfig+0x1fc>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d03b      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a4c      	ldr	r2, [pc, #304]	; (800978c <TIM_Base_SetConfig+0x200>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d037      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a4b      	ldr	r2, [pc, #300]	; (8009790 <TIM_Base_SetConfig+0x204>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d033      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a4a      	ldr	r2, [pc, #296]	; (8009794 <TIM_Base_SetConfig+0x208>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d02f      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a49      	ldr	r2, [pc, #292]	; (8009798 <TIM_Base_SetConfig+0x20c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d02b      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a48      	ldr	r2, [pc, #288]	; (800979c <TIM_Base_SetConfig+0x210>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d027      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a47      	ldr	r2, [pc, #284]	; (80097a0 <TIM_Base_SetConfig+0x214>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d023      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a46      	ldr	r2, [pc, #280]	; (80097a4 <TIM_Base_SetConfig+0x218>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d01f      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a45      	ldr	r2, [pc, #276]	; (80097a8 <TIM_Base_SetConfig+0x21c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d01b      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a44      	ldr	r2, [pc, #272]	; (80097ac <TIM_Base_SetConfig+0x220>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d017      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a43      	ldr	r2, [pc, #268]	; (80097b0 <TIM_Base_SetConfig+0x224>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d013      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a42      	ldr	r2, [pc, #264]	; (80097b4 <TIM_Base_SetConfig+0x228>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00f      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a41      	ldr	r2, [pc, #260]	; (80097b8 <TIM_Base_SetConfig+0x22c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00b      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a40      	ldr	r2, [pc, #256]	; (80097bc <TIM_Base_SetConfig+0x230>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d007      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a3f      	ldr	r2, [pc, #252]	; (80097c0 <TIM_Base_SetConfig+0x234>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d003      	beq.n	80096ce <TIM_Base_SetConfig+0x142>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a3e      	ldr	r2, [pc, #248]	; (80097c4 <TIM_Base_SetConfig+0x238>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d108      	bne.n	80096e0 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a1a      	ldr	r2, [pc, #104]	; (8009770 <TIM_Base_SetConfig+0x1e4>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d023      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a19      	ldr	r2, [pc, #100]	; (8009774 <TIM_Base_SetConfig+0x1e8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d01f      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <TIM_Base_SetConfig+0x204>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d01b      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <TIM_Base_SetConfig+0x208>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d017      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a22      	ldr	r2, [pc, #136]	; (80097b0 <TIM_Base_SetConfig+0x224>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d013      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a21      	ldr	r2, [pc, #132]	; (80097b4 <TIM_Base_SetConfig+0x228>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00f      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <TIM_Base_SetConfig+0x22c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d00b      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <TIM_Base_SetConfig+0x230>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d007      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <TIM_Base_SetConfig+0x234>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_Base_SetConfig+0x1c8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <TIM_Base_SetConfig+0x238>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d103      	bne.n	800975c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	615a      	str	r2, [r3, #20]
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	40012c00 	.word	0x40012c00
 8009774:	50012c00 	.word	0x50012c00
 8009778:	40000400 	.word	0x40000400
 800977c:	50000400 	.word	0x50000400
 8009780:	40000800 	.word	0x40000800
 8009784:	50000800 	.word	0x50000800
 8009788:	40000c00 	.word	0x40000c00
 800978c:	50000c00 	.word	0x50000c00
 8009790:	40013400 	.word	0x40013400
 8009794:	50013400 	.word	0x50013400
 8009798:	40001800 	.word	0x40001800
 800979c:	50001800 	.word	0x50001800
 80097a0:	40001c00 	.word	0x40001c00
 80097a4:	50001c00 	.word	0x50001c00
 80097a8:	40002000 	.word	0x40002000
 80097ac:	50002000 	.word	0x50002000
 80097b0:	40014000 	.word	0x40014000
 80097b4:	50014000 	.word	0x50014000
 80097b8:	40014400 	.word	0x40014400
 80097bc:	50014400 	.word	0x50014400
 80097c0:	40014800 	.word	0x40014800
 80097c4:	50014800 	.word	0x50014800

080097c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e042      	b.n	80098ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7f7 fa23 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2224      	movs	r2, #36	; 0x24
 8009882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0201 	bic.w	r2, r2, #1
 8009894:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fe0a 	bl	800a4b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fc19 	bl	800a0dc <UART_SetConfig>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d101      	bne.n	80098b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e01b      	b.n	80098ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fe89 	bl	800a5fc <UART_CheckIdleState>
 80098ea:	4603      	mov	r3, r0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08a      	sub	sp, #40	; 0x28
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800990a:	2b20      	cmp	r3, #32
 800990c:	f040 808b 	bne.w	8009a26 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <HAL_UART_Transmit+0x28>
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e083      	b.n	8009a28 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992a:	2b80      	cmp	r3, #128	; 0x80
 800992c:	d107      	bne.n	800993e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800993c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2221      	movs	r2, #33	; 0x21
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800994e:	f7f8 f9e9 	bl	8001d24 <HAL_GetTick>
 8009952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	88fa      	ldrh	r2, [r7, #6]
 8009958:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996c:	d108      	bne.n	8009980 <HAL_UART_Transmit+0x8c>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d104      	bne.n	8009980 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	e003      	b.n	8009988 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009984:	2300      	movs	r3, #0
 8009986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009988:	e030      	b.n	80099ec <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2200      	movs	r2, #0
 8009992:	2180      	movs	r1, #128	; 0x80
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fedb 	bl	800a750 <UART_WaitOnFlagUntilTimeout>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e03d      	b.n	8009a28 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	3302      	adds	r3, #2
 80099c6:	61bb      	str	r3, [r7, #24]
 80099c8:	e007      	b.n	80099da <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	3301      	adds	r3, #1
 80099d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1c8      	bne.n	800998a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2200      	movs	r2, #0
 8009a00:	2140      	movs	r1, #64	; 0x40
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fea4 	bl	800a750 <UART_WaitOnFlagUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d005      	beq.n	8009a1a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e006      	b.n	8009a28 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e000      	b.n	8009a28 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009a26:	2302      	movs	r3, #2
  }
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d14b      	bne.n	8009ae0 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <HAL_UART_Receive_IT+0x24>
 8009a4e:	88fb      	ldrh	r3, [r7, #6]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e044      	b.n	8009ae2 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a68:	2b40      	cmp	r3, #64	; 0x40
 8009a6a:	d107      	bne.n	8009a7c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689a      	ldr	r2, [r3, #8]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a7a:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1a      	ldr	r2, [pc, #104]	; (8009aec <HAL_UART_Receive_IT+0xbc>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d024      	beq.n	8009ad0 <HAL_UART_Receive_IT+0xa0>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a19      	ldr	r2, [pc, #100]	; (8009af0 <HAL_UART_Receive_IT+0xc0>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d01f      	beq.n	8009ad0 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d018      	beq.n	8009ad0 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	623b      	str	r3, [r7, #32]
 8009abe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	69f9      	ldr	r1, [r7, #28]
 8009ac2:	6a3a      	ldr	r2, [r7, #32]
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e6      	bne.n	8009a9e <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ad0:	88fb      	ldrh	r3, [r7, #6]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fea2 	bl	800a820 <UART_Start_Receive_IT>
 8009adc:	4603      	mov	r3, r0
 8009ade:	e000      	b.n	8009ae2 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009ae0:	2302      	movs	r3, #2
  }
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3728      	adds	r7, #40	; 0x28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	44002400 	.word	0x44002400
 8009af0:	54002400 	.word	0x54002400

08009af4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b0ae      	sub	sp, #184	; 0xb8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009b22:	4013      	ands	r3, r2
 8009b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8009b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d11b      	bne.n	8009b68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b34:	f003 0320 	and.w	r3, r3, #32
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d015      	beq.n	8009b68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d105      	bne.n	8009b54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d009      	beq.n	8009b68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 8293 	beq.w	800a084 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
      }
      return;
 8009b66:	e28d      	b.n	800a084 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80fd 	beq.w	8009d6c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b76:	4b7a      	ldr	r3, [pc, #488]	; (8009d60 <HAL_UART_IRQHandler+0x26c>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d106      	bne.n	8009b8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b82:	4b78      	ldr	r3, [pc, #480]	; (8009d64 <HAL_UART_IRQHandler+0x270>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 80f0 	beq.w	8009d6c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d011      	beq.n	8009bbc <HAL_UART_IRQHandler+0xc8>
 8009b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb2:	f043 0201 	orr.w	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d011      	beq.n	8009bec <HAL_UART_IRQHandler+0xf8>
 8009bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00b      	beq.n	8009bec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be2:	f043 0204 	orr.w	r2, r3, #4
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d011      	beq.n	8009c1c <HAL_UART_IRQHandler+0x128>
 8009bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00b      	beq.n	8009c1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2204      	movs	r2, #4
 8009c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c12:	f043 0202 	orr.w	r2, r3, #2
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d017      	beq.n	8009c58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d105      	bne.n	8009c40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c38:	4b49      	ldr	r3, [pc, #292]	; (8009d60 <HAL_UART_IRQHandler+0x26c>)
 8009c3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2208      	movs	r2, #8
 8009c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c4e:	f043 0208 	orr.w	r2, r3, #8
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d012      	beq.n	8009c8a <HAL_UART_IRQHandler+0x196>
 8009c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00c      	beq.n	8009c8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c80:	f043 0220 	orr.w	r2, r3, #32
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 81f9 	beq.w	800a088 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d013      	beq.n	8009cca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ca2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d007      	beq.n	8009cca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d005      	beq.n	8009cee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d02e      	beq.n	8009d4c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 feb8 	bl	800aa64 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d120      	bne.n	8009d44 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d017      	beq.n	8009d3c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <HAL_UART_IRQHandler+0x274>)
 8009d14:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7f8 f98d 	bl	800203c <HAL_DMA_Abort_IT>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d019      	beq.n	8009d5c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009d36:	4610      	mov	r0, r2
 8009d38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3a:	e00f      	b.n	8009d5c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f9b7 	bl	800a0b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d42:	e00b      	b.n	8009d5c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f9b3 	bl	800a0b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4a:	e007      	b.n	8009d5c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f9af 	bl	800a0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009d5a:	e195      	b.n	800a088 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5c:	bf00      	nop
    return;
 8009d5e:	e193      	b.n	800a088 <HAL_UART_IRQHandler+0x594>
 8009d60:	10000001 	.word	0x10000001
 8009d64:	04000120 	.word	0x04000120
 8009d68:	0800ab31 	.word	0x0800ab31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	f040 8129 	bne.w	8009fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d7a:	f003 0310 	and.w	r3, r3, #16
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 8122 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d88:	f003 0310 	and.w	r3, r3, #16
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 811b 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2210      	movs	r2, #16
 8009d98:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da4:	2b40      	cmp	r3, #64	; 0x40
 8009da6:	f040 8091 	bne.w	8009ecc <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8009db8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8165 	beq.w	800a08c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dc8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	f080 815d 	bcs.w	800a08c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de4:	2b81      	cmp	r3, #129	; 0x81
 8009de6:	d060      	beq.n	8009eaa <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e2      	bne.n	8009de8 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e34:	f023 0301 	bic.w	r3, r3, #1
 8009e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3308      	adds	r3, #8
 8009e42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e3      	bne.n	8009e22 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e70:	e853 3f00 	ldrex	r3, [r3]
 8009e74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e78:	f023 0310 	bic.w	r3, r3, #16
 8009e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e4      	bne.n	8009e68 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f8 f84d 	bl	8001f44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2202      	movs	r2, #2
 8009eae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f8fd 	bl	800a0c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009eca:	e0df      	b.n	800a08c <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 80d1 	beq.w	800a090 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8009eee:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 80cc 	beq.w	800a090 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e4      	bne.n	8009ef8 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f44:	f023 0301 	bic.w	r3, r3, #1
 8009f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3308      	adds	r3, #8
 8009f52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009f56:	633a      	str	r2, [r7, #48]	; 0x30
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e1      	bne.n	8009f2e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 0310 	bic.w	r3, r3, #16
 8009f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	69b9      	ldr	r1, [r7, #24]
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	617b      	str	r3, [r7, #20]
   return(result);
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f87f 	bl	800a0c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fc6:	e063      	b.n	800a090 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00e      	beq.n	8009ff2 <HAL_UART_IRQHandler+0x4fe>
 8009fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d008      	beq.n	8009ff2 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009fe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 fb1a 	bl	800b624 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ff0:	e051      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d014      	beq.n	800a028 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a006:	2b00      	cmp	r3, #0
 800a008:	d105      	bne.n	800a016 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a00a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a00e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d008      	beq.n	800a028 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d03a      	beq.n	800a094 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
    }
    return;
 800a026:	e035      	b.n	800a094 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <HAL_UART_IRQHandler+0x554>
 800a034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d003      	beq.n	800a048 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fd8b 	bl	800ab5c <UART_EndTransmit_IT>
    return;
 800a046:	e026      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a04c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d009      	beq.n	800a068 <HAL_UART_IRQHandler+0x574>
 800a054:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a058:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 faf3 	bl	800b64c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a066:	e016      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a06c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d010      	beq.n	800a096 <HAL_UART_IRQHandler+0x5a2>
 800a074:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da0c      	bge.n	800a096 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 fadb 	bl	800b638 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a082:	e008      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
      return;
 800a084:	bf00      	nop
 800a086:	e006      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
    return;
 800a088:	bf00      	nop
 800a08a:	e004      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
      return;
 800a08c:	bf00      	nop
 800a08e:	e002      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
      return;
 800a090:	bf00      	nop
 800a092:	e000      	b.n	800a096 <HAL_UART_IRQHandler+0x5a2>
    return;
 800a094:	bf00      	nop
  }
}
 800a096:	37b8      	adds	r7, #184	; 0xb8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0e0:	b094      	sub	sp, #80	; 0x50
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	4b78      	ldr	r3, [pc, #480]	; (800a2d4 <UART_SetConfig+0x1f8>)
 800a0f2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	431a      	orrs	r2, r3
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	4313      	orrs	r3, r2
 800a10a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4971      	ldr	r1, [pc, #452]	; (800a2d8 <UART_SetConfig+0x1fc>)
 800a114:	4019      	ands	r1, r3
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11c:	430b      	orrs	r3, r1
 800a11e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	68d9      	ldr	r1, [r3, #12]
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	ea40 0301 	orr.w	r3, r0, r1
 800a136:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	4b64      	ldr	r3, [pc, #400]	; (800a2d4 <UART_SetConfig+0x1f8>)
 800a144:	429a      	cmp	r2, r3
 800a146:	d009      	beq.n	800a15c <UART_SetConfig+0x80>
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	4b63      	ldr	r3, [pc, #396]	; (800a2dc <UART_SetConfig+0x200>)
 800a14e:	429a      	cmp	r2, r3
 800a150:	d004      	beq.n	800a15c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	6a1a      	ldr	r2, [r3, #32]
 800a156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a158:	4313      	orrs	r3, r2
 800a15a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a166:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a170:	430b      	orrs	r3, r1
 800a172:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	f023 000f 	bic.w	r0, r3, #15
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	ea40 0301 	orr.w	r3, r0, r1
 800a18a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	4b53      	ldr	r3, [pc, #332]	; (800a2e0 <UART_SetConfig+0x204>)
 800a192:	429a      	cmp	r2, r3
 800a194:	d102      	bne.n	800a19c <UART_SetConfig+0xc0>
 800a196:	2301      	movs	r3, #1
 800a198:	64bb      	str	r3, [r7, #72]	; 0x48
 800a19a:	e066      	b.n	800a26a <UART_SetConfig+0x18e>
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	4b50      	ldr	r3, [pc, #320]	; (800a2e4 <UART_SetConfig+0x208>)
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d102      	bne.n	800a1ac <UART_SetConfig+0xd0>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1aa:	e05e      	b.n	800a26a <UART_SetConfig+0x18e>
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4b4d      	ldr	r3, [pc, #308]	; (800a2e8 <UART_SetConfig+0x20c>)
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d102      	bne.n	800a1bc <UART_SetConfig+0xe0>
 800a1b6:	2304      	movs	r3, #4
 800a1b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ba:	e056      	b.n	800a26a <UART_SetConfig+0x18e>
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	4b4a      	ldr	r3, [pc, #296]	; (800a2ec <UART_SetConfig+0x210>)
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d102      	bne.n	800a1cc <UART_SetConfig+0xf0>
 800a1c6:	2308      	movs	r3, #8
 800a1c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ca:	e04e      	b.n	800a26a <UART_SetConfig+0x18e>
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	4b47      	ldr	r3, [pc, #284]	; (800a2f0 <UART_SetConfig+0x214>)
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d102      	bne.n	800a1dc <UART_SetConfig+0x100>
 800a1d6:	2310      	movs	r3, #16
 800a1d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1da:	e046      	b.n	800a26a <UART_SetConfig+0x18e>
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	4b44      	ldr	r3, [pc, #272]	; (800a2f4 <UART_SetConfig+0x218>)
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d102      	bne.n	800a1ec <UART_SetConfig+0x110>
 800a1e6:	2320      	movs	r3, #32
 800a1e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ea:	e03e      	b.n	800a26a <UART_SetConfig+0x18e>
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b41      	ldr	r3, [pc, #260]	; (800a2f8 <UART_SetConfig+0x21c>)
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d102      	bne.n	800a1fc <UART_SetConfig+0x120>
 800a1f6:	2340      	movs	r3, #64	; 0x40
 800a1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1fa:	e036      	b.n	800a26a <UART_SetConfig+0x18e>
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	4b3e      	ldr	r3, [pc, #248]	; (800a2fc <UART_SetConfig+0x220>)
 800a202:	429a      	cmp	r2, r3
 800a204:	d102      	bne.n	800a20c <UART_SetConfig+0x130>
 800a206:	2380      	movs	r3, #128	; 0x80
 800a208:	64bb      	str	r3, [r7, #72]	; 0x48
 800a20a:	e02e      	b.n	800a26a <UART_SetConfig+0x18e>
 800a20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	4b3b      	ldr	r3, [pc, #236]	; (800a300 <UART_SetConfig+0x224>)
 800a212:	429a      	cmp	r2, r3
 800a214:	d103      	bne.n	800a21e <UART_SetConfig+0x142>
 800a216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a21a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a21c:	e025      	b.n	800a26a <UART_SetConfig+0x18e>
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4b38      	ldr	r3, [pc, #224]	; (800a304 <UART_SetConfig+0x228>)
 800a224:	429a      	cmp	r2, r3
 800a226:	d103      	bne.n	800a230 <UART_SetConfig+0x154>
 800a228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a22c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a22e:	e01c      	b.n	800a26a <UART_SetConfig+0x18e>
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	4b34      	ldr	r3, [pc, #208]	; (800a308 <UART_SetConfig+0x22c>)
 800a236:	429a      	cmp	r2, r3
 800a238:	d103      	bne.n	800a242 <UART_SetConfig+0x166>
 800a23a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a23e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a240:	e013      	b.n	800a26a <UART_SetConfig+0x18e>
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4b31      	ldr	r3, [pc, #196]	; (800a30c <UART_SetConfig+0x230>)
 800a248:	429a      	cmp	r2, r3
 800a24a:	d103      	bne.n	800a254 <UART_SetConfig+0x178>
 800a24c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a250:	64bb      	str	r3, [r7, #72]	; 0x48
 800a252:	e00a      	b.n	800a26a <UART_SetConfig+0x18e>
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	4b1e      	ldr	r3, [pc, #120]	; (800a2d4 <UART_SetConfig+0x1f8>)
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d103      	bne.n	800a266 <UART_SetConfig+0x18a>
 800a25e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a262:	64bb      	str	r3, [r7, #72]	; 0x48
 800a264:	e001      	b.n	800a26a <UART_SetConfig+0x18e>
 800a266:	2300      	movs	r3, #0
 800a268:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b19      	ldr	r3, [pc, #100]	; (800a2d4 <UART_SetConfig+0x1f8>)
 800a270:	429a      	cmp	r2, r3
 800a272:	d005      	beq.n	800a280 <UART_SetConfig+0x1a4>
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	4b18      	ldr	r3, [pc, #96]	; (800a2dc <UART_SetConfig+0x200>)
 800a27a:	429a      	cmp	r2, r3
 800a27c:	f040 8094 	bne.w	800a3a8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a282:	2200      	movs	r2, #0
 800a284:	623b      	str	r3, [r7, #32]
 800a286:	627a      	str	r2, [r7, #36]	; 0x24
 800a288:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a28c:	f7fc fa44 	bl	8006718 <HAL_RCCEx_GetPeriphCLKFreq>
 800a290:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 80f7 	beq.w	800a488 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	4a1c      	ldr	r2, [pc, #112]	; (800a310 <UART_SetConfig+0x234>)
 800a2a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2ac:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4413      	add	r3, r2
 800a2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d305      	bcc.n	800a2ca <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d924      	bls.n	800a314 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a2d0:	e069      	b.n	800a3a6 <UART_SetConfig+0x2ca>
 800a2d2:	bf00      	nop
 800a2d4:	44002400 	.word	0x44002400
 800a2d8:	cfff69f3 	.word	0xcfff69f3
 800a2dc:	54002400 	.word	0x54002400
 800a2e0:	40013800 	.word	0x40013800
 800a2e4:	40004400 	.word	0x40004400
 800a2e8:	40004800 	.word	0x40004800
 800a2ec:	40004c00 	.word	0x40004c00
 800a2f0:	40005000 	.word	0x40005000
 800a2f4:	40006400 	.word	0x40006400
 800a2f8:	40007800 	.word	0x40007800
 800a2fc:	40007c00 	.word	0x40007c00
 800a300:	40008000 	.word	0x40008000
 800a304:	40006800 	.word	0x40006800
 800a308:	40006c00 	.word	0x40006c00
 800a30c:	40008400 	.word	0x40008400
 800a310:	0800f9d0 	.word	0x0800f9d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a316:	2200      	movs	r2, #0
 800a318:	61bb      	str	r3, [r7, #24]
 800a31a:	61fa      	str	r2, [r7, #28]
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	4a64      	ldr	r2, [pc, #400]	; (800a4b4 <UART_SetConfig+0x3d8>)
 800a322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a326:	b29b      	uxth	r3, r3
 800a328:	2200      	movs	r2, #0
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	617a      	str	r2, [r7, #20]
 800a32e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a336:	f7f5 ffbd 	bl	80002b4 <__aeabi_uldivmod>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4610      	mov	r0, r2
 800a340:	4619      	mov	r1, r3
 800a342:	f04f 0200 	mov.w	r2, #0
 800a346:	f04f 0300 	mov.w	r3, #0
 800a34a:	020b      	lsls	r3, r1, #8
 800a34c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a350:	0202      	lsls	r2, r0, #8
 800a352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a354:	6849      	ldr	r1, [r1, #4]
 800a356:	0849      	lsrs	r1, r1, #1
 800a358:	2000      	movs	r0, #0
 800a35a:	460c      	mov	r4, r1
 800a35c:	4605      	mov	r5, r0
 800a35e:	eb12 0804 	adds.w	r8, r2, r4
 800a362:	eb43 0905 	adc.w	r9, r3, r5
 800a366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	60bb      	str	r3, [r7, #8]
 800a36e:	60fa      	str	r2, [r7, #12]
 800a370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a374:	4640      	mov	r0, r8
 800a376:	4649      	mov	r1, r9
 800a378:	f7f5 ff9c 	bl	80002b4 <__aeabi_uldivmod>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4613      	mov	r3, r2
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a38a:	d308      	bcc.n	800a39e <UART_SetConfig+0x2c2>
 800a38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a392:	d204      	bcs.n	800a39e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	e003      	b.n	800a3a6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a3a4:	e070      	b.n	800a488 <UART_SetConfig+0x3ac>
 800a3a6:	e06f      	b.n	800a488 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b0:	d13c      	bne.n	800a42c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	607a      	str	r2, [r7, #4]
 800a3ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3be:	f7fc f9ab 	bl	8006718 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3c2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d05e      	beq.n	800a488 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	4a39      	ldr	r2, [pc, #228]	; (800a4b4 <UART_SetConfig+0x3d8>)
 800a3d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3dc:	005a      	lsls	r2, r3, #1
 800a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	441a      	add	r2, r3
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f2:	2b0f      	cmp	r3, #15
 800a3f4:	d916      	bls.n	800a424 <UART_SetConfig+0x348>
 800a3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fc:	d212      	bcs.n	800a424 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a400:	b29b      	uxth	r3, r3
 800a402:	f023 030f 	bic.w	r3, r3, #15
 800a406:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	b29a      	uxth	r2, r3
 800a414:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a416:	4313      	orrs	r3, r2
 800a418:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	e031      	b.n	800a488 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a42a:	e02d      	b.n	800a488 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a42e:	2200      	movs	r2, #0
 800a430:	469a      	mov	sl, r3
 800a432:	4693      	mov	fp, r2
 800a434:	4650      	mov	r0, sl
 800a436:	4659      	mov	r1, fp
 800a438:	f7fc f96e 	bl	8006718 <HAL_RCCEx_GetPeriphCLKFreq>
 800a43c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d021      	beq.n	800a488 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	4a1a      	ldr	r2, [pc, #104]	; (800a4b4 <UART_SetConfig+0x3d8>)
 800a44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a44e:	461a      	mov	r2, r3
 800a450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a452:	fbb3 f2f2 	udiv	r2, r3, r2
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	085b      	lsrs	r3, r3, #1
 800a45c:	441a      	add	r2, r3
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	fbb2 f3f3 	udiv	r3, r2, r3
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46a:	2b0f      	cmp	r3, #15
 800a46c:	d909      	bls.n	800a482 <UART_SetConfig+0x3a6>
 800a46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a474:	d205      	bcs.n	800a482 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a478:	b29a      	uxth	r2, r3
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60da      	str	r2, [r3, #12]
 800a480:	e002      	b.n	800a488 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	2201      	movs	r2, #1
 800a494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	2200      	movs	r2, #0
 800a49c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a4a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3750      	adds	r7, #80	; 0x50
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4b2:	bf00      	nop
 800a4b4:	0800f9d0 	.word	0x0800f9d0

0800a4b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c4:	f003 0308 	and.w	r3, r3, #8
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00a      	beq.n	800a504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00a      	beq.n	800a526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52a:	f003 0304 	and.w	r3, r3, #4
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54c:	f003 0310 	and.w	r3, r3, #16
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00a      	beq.n	800a56a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01a      	beq.n	800a5ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b6:	d10a      	bne.n	800a5ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	605a      	str	r2, [r3, #4]
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b098      	sub	sp, #96	; 0x60
 800a600:	af02      	add	r7, sp, #8
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a60c:	f7f7 fb8a 	bl	8001d24 <HAL_GetTick>
 800a610:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0308 	and.w	r3, r3, #8
 800a61c:	2b08      	cmp	r3, #8
 800a61e:	d12f      	bne.n	800a680 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a628:	2200      	movs	r2, #0
 800a62a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f88e 	bl	800a750 <UART_WaitOnFlagUntilTimeout>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d022      	beq.n	800a680 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	e853 3f00 	ldrex	r3, [r3]
 800a646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a64e:	653b      	str	r3, [r7, #80]	; 0x50
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	461a      	mov	r2, r3
 800a656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a658:	647b      	str	r3, [r7, #68]	; 0x44
 800a65a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a65e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a660:	e841 2300 	strex	r3, r2, [r1]
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1e6      	bne.n	800a63a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2220      	movs	r2, #32
 800a670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e063      	b.n	800a748 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0304 	and.w	r3, r3, #4
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d149      	bne.n	800a722 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a68e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a696:	2200      	movs	r2, #0
 800a698:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f857 	bl	800a750 <UART_WaitOnFlagUntilTimeout>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d03c      	beq.n	800a722 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	623b      	str	r3, [r7, #32]
   return(result);
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c6:	633b      	str	r3, [r7, #48]	; 0x30
 800a6c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e6      	bne.n	800a6a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f023 0301 	bic.w	r3, r3, #1
 800a6f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6fa:	61fa      	str	r2, [r7, #28]
 800a6fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	69b9      	ldr	r1, [r7, #24]
 800a700:	69fa      	ldr	r2, [r7, #28]
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	617b      	str	r3, [r7, #20]
   return(result);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e5      	bne.n	800a6da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e012      	b.n	800a748 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2220      	movs	r2, #32
 800a726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3758      	adds	r7, #88	; 0x58
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	4613      	mov	r3, r2
 800a75e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a760:	e049      	b.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a768:	d045      	beq.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76a:	f7f7 fadb 	bl	8001d24 <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	429a      	cmp	r2, r3
 800a778:	d302      	bcc.n	800a780 <UART_WaitOnFlagUntilTimeout+0x30>
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e048      	b.n	800a816 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d031      	beq.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69db      	ldr	r3, [r3, #28]
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	2b08      	cmp	r3, #8
 800a79e:	d110      	bne.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2208      	movs	r2, #8
 800a7a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 f95b 	bl	800aa64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2208      	movs	r2, #8
 800a7b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e029      	b.n	800a816 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d0:	d111      	bne.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 f941 	bl	800aa64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2220      	movs	r2, #32
 800a7e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e00f      	b.n	800a816 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69da      	ldr	r2, [r3, #28]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	4013      	ands	r3, r2
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	429a      	cmp	r2, r3
 800a804:	bf0c      	ite	eq
 800a806:	2301      	moveq	r3, #1
 800a808:	2300      	movne	r3, #0
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	461a      	mov	r2, r3
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	429a      	cmp	r2, r3
 800a812:	d0a6      	beq.n	800a762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a820:	b480      	push	{r7}
 800a822:	b0a3      	sub	sp, #140	; 0x8c
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	88fa      	ldrh	r2, [r7, #6]
 800a838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	88fa      	ldrh	r2, [r7, #6]
 800a840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a852:	d10e      	bne.n	800a872 <UART_Start_Receive_IT+0x52>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d105      	bne.n	800a868 <UART_Start_Receive_IT+0x48>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a866:	e02d      	b.n	800a8c4 <UART_Start_Receive_IT+0xa4>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	22ff      	movs	r2, #255	; 0xff
 800a86c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a870:	e028      	b.n	800a8c4 <UART_Start_Receive_IT+0xa4>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10d      	bne.n	800a896 <UART_Start_Receive_IT+0x76>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d104      	bne.n	800a88c <UART_Start_Receive_IT+0x6c>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	22ff      	movs	r2, #255	; 0xff
 800a886:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a88a:	e01b      	b.n	800a8c4 <UART_Start_Receive_IT+0xa4>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	227f      	movs	r2, #127	; 0x7f
 800a890:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a894:	e016      	b.n	800a8c4 <UART_Start_Receive_IT+0xa4>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a89e:	d10d      	bne.n	800a8bc <UART_Start_Receive_IT+0x9c>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d104      	bne.n	800a8b2 <UART_Start_Receive_IT+0x92>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	227f      	movs	r2, #127	; 0x7f
 800a8ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8b0:	e008      	b.n	800a8c4 <UART_Start_Receive_IT+0xa4>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	223f      	movs	r2, #63	; 0x3f
 800a8b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8ba:	e003      	b.n	800a8c4 <UART_Start_Receive_IT+0xa4>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2222      	movs	r2, #34	; 0x22
 800a8d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3308      	adds	r3, #8
 800a8da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8de:	e853 3f00 	ldrex	r3, [r3]
 800a8e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a8e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a8f8:	673a      	str	r2, [r7, #112]	; 0x70
 800a8fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a8fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a900:	e841 2300 	strex	r3, r2, [r1]
 800a904:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e3      	bne.n	800a8d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a914:	d14f      	bne.n	800a9b6 <UART_Start_Receive_IT+0x196>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a91c:	88fa      	ldrh	r2, [r7, #6]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d349      	bcc.n	800a9b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92a:	d107      	bne.n	800a93c <UART_Start_Receive_IT+0x11c>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d103      	bne.n	800a93c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4a47      	ldr	r2, [pc, #284]	; (800aa54 <UART_Start_Receive_IT+0x234>)
 800a938:	675a      	str	r2, [r3, #116]	; 0x74
 800a93a:	e002      	b.n	800a942 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4a46      	ldr	r2, [pc, #280]	; (800aa58 <UART_Start_Receive_IT+0x238>)
 800a940:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d01a      	beq.n	800a980 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a952:	e853 3f00 	ldrex	r3, [r3]
 800a956:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a95a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a95e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a96c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a96e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a970:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a974:	e841 2300 	strex	r3, r2, [r1]
 800a978:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e4      	bne.n	800a94a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3308      	adds	r3, #8
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98a:	e853 3f00 	ldrex	r3, [r3]
 800a98e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a996:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3308      	adds	r3, #8
 800a99e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a9a0:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9a8:	e841 2300 	strex	r3, r2, [r1]
 800a9ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1e5      	bne.n	800a980 <UART_Start_Receive_IT+0x160>
 800a9b4:	e046      	b.n	800aa44 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9be:	d107      	bne.n	800a9d0 <UART_Start_Receive_IT+0x1b0>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d103      	bne.n	800a9d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4a24      	ldr	r2, [pc, #144]	; (800aa5c <UART_Start_Receive_IT+0x23c>)
 800a9cc:	675a      	str	r2, [r3, #116]	; 0x74
 800a9ce:	e002      	b.n	800a9d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4a23      	ldr	r2, [pc, #140]	; (800aa60 <UART_Start_Receive_IT+0x240>)
 800a9d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d019      	beq.n	800aa12 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a9f2:	677b      	str	r3, [r7, #116]	; 0x74
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a9fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e6      	bne.n	800a9de <UART_Start_Receive_IT+0x1be>
 800aa10:	e018      	b.n	800aa44 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	f043 0320 	orr.w	r3, r3, #32
 800aa26:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa30:	623b      	str	r3, [r7, #32]
 800aa32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	69f9      	ldr	r1, [r7, #28]
 800aa36:	6a3a      	ldr	r2, [r7, #32]
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e6      	bne.n	800aa12 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	378c      	adds	r7, #140	; 0x8c
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	0800b2ad 	.word	0x0800b2ad
 800aa58:	0800af3d 	.word	0x0800af3d
 800aa5c:	0800ad79 	.word	0x0800ad79
 800aa60:	0800abb5 	.word	0x0800abb5

0800aa64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b095      	sub	sp, #84	; 0x54
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa8a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e6      	bne.n	800aa6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e3      	bne.n	800aa9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d118      	bne.n	800ab10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f023 0310 	bic.w	r3, r3, #16
 800aaf2:	647b      	str	r3, [r7, #68]	; 0x44
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6979      	ldr	r1, [r7, #20]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	613b      	str	r3, [r7, #16]
   return(result);
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e6      	bne.n	800aade <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ab24:	bf00      	nop
 800ab26:	3754      	adds	r7, #84	; 0x54
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff faae 	bl	800a0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab54:	bf00      	nop
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b088      	sub	sp, #32
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	61bb      	str	r3, [r7, #24]
 800ab84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6979      	ldr	r1, [r7, #20]
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e6      	bne.n	800ab64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff fa79 	bl	800a09c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abaa:	bf00      	nop
 800abac:	3720      	adds	r7, #32
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b09c      	sub	sp, #112	; 0x70
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abcc:	2b22      	cmp	r3, #34	; 0x22
 800abce:	f040 80c3 	bne.w	800ad58 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800abe0:	b2d9      	uxtb	r1, r3
 800abe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abec:	400a      	ands	r2, r1
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf6:	1c5a      	adds	r2, r3, #1
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	3b01      	subs	r3, #1
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f040 80a6 	bne.w	800ad68 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac24:	e853 3f00 	ldrex	r3, [r3]
 800ac28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac30:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac42:	e841 2300 	strex	r3, r2, [r1]
 800ac46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1e6      	bne.n	800ac1c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3308      	adds	r3, #8
 800ac54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac60:	f023 0301 	bic.w	r3, r3, #1
 800ac64:	667b      	str	r3, [r7, #100]	; 0x64
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac6e:	647a      	str	r2, [r7, #68]	; 0x44
 800ac70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e5      	bne.n	800ac4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2220      	movs	r2, #32
 800ac86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a35      	ldr	r2, [pc, #212]	; (800ad70 <UART_RxISR_8BIT+0x1bc>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d024      	beq.n	800acea <UART_RxISR_8BIT+0x136>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a33      	ldr	r2, [pc, #204]	; (800ad74 <UART_RxISR_8BIT+0x1c0>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d01f      	beq.n	800acea <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d018      	beq.n	800acea <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	e853 3f00 	ldrex	r3, [r3]
 800acc4:	623b      	str	r3, [r7, #32]
   return(result);
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800accc:	663b      	str	r3, [r7, #96]	; 0x60
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	461a      	mov	r2, r3
 800acd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acd6:	633b      	str	r3, [r7, #48]	; 0x30
 800acd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acde:	e841 2300 	strex	r3, r2, [r1]
 800ace2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e6      	bne.n	800acb8 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d12e      	bne.n	800ad50 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f023 0310 	bic.w	r3, r3, #16
 800ad0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad16:	61fb      	str	r3, [r7, #28]
 800ad18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	69b9      	ldr	r1, [r7, #24]
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	617b      	str	r3, [r7, #20]
   return(result);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e6      	bne.n	800acf8 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	f003 0310 	and.w	r3, r3, #16
 800ad34:	2b10      	cmp	r3, #16
 800ad36:	d103      	bne.n	800ad40 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2210      	movs	r2, #16
 800ad3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff f9bb 	bl	800a0c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad4e:	e00b      	b.n	800ad68 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7f6 feb1 	bl	8001ab8 <HAL_UART_RxCpltCallback>
}
 800ad56:	e007      	b.n	800ad68 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	699a      	ldr	r2, [r3, #24]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f042 0208 	orr.w	r2, r2, #8
 800ad66:	619a      	str	r2, [r3, #24]
}
 800ad68:	bf00      	nop
 800ad6a:	3770      	adds	r7, #112	; 0x70
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	44002400 	.word	0x44002400
 800ad74:	54002400 	.word	0x54002400

0800ad78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b09c      	sub	sp, #112	; 0x70
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad90:	2b22      	cmp	r3, #34	; 0x22
 800ad92:	f040 80c3 	bne.w	800af1c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ada6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800adaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800adae:	4013      	ands	r3, r2
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adb4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adba:	1c9a      	adds	r2, r3, #2
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	3b01      	subs	r3, #1
 800adca:	b29a      	uxth	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800add8:	b29b      	uxth	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	f040 80a6 	bne.w	800af2c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ade8:	e853 3f00 	ldrex	r3, [r3]
 800adec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800adee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adf4:	667b      	str	r3, [r7, #100]	; 0x64
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adfe:	657b      	str	r3, [r7, #84]	; 0x54
 800ae00:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae06:	e841 2300 	strex	r3, r2, [r1]
 800ae0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e6      	bne.n	800ade0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3308      	adds	r3, #8
 800ae18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	f023 0301 	bic.w	r3, r3, #1
 800ae28:	663b      	str	r3, [r7, #96]	; 0x60
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3308      	adds	r3, #8
 800ae30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae32:	643a      	str	r2, [r7, #64]	; 0x40
 800ae34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae3a:	e841 2300 	strex	r3, r2, [r1]
 800ae3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e5      	bne.n	800ae12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a35      	ldr	r2, [pc, #212]	; (800af34 <UART_RxISR_16BIT+0x1bc>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d024      	beq.n	800aeae <UART_RxISR_16BIT+0x136>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a33      	ldr	r2, [pc, #204]	; (800af38 <UART_RxISR_16BIT+0x1c0>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d01f      	beq.n	800aeae <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d018      	beq.n	800aeae <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	e853 3f00 	ldrex	r3, [r3]
 800ae88:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e6      	bne.n	800ae7c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d12e      	bne.n	800af14 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f023 0310 	bic.w	r3, r3, #16
 800aed0:	65bb      	str	r3, [r7, #88]	; 0x58
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aeda:	61bb      	str	r3, [r7, #24]
 800aedc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aede:	6979      	ldr	r1, [r7, #20]
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	613b      	str	r3, [r7, #16]
   return(result);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e6      	bne.n	800aebc <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	f003 0310 	and.w	r3, r3, #16
 800aef8:	2b10      	cmp	r3, #16
 800aefa:	d103      	bne.n	800af04 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2210      	movs	r2, #16
 800af02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff f8d9 	bl	800a0c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af12:	e00b      	b.n	800af2c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7f6 fdcf 	bl	8001ab8 <HAL_UART_RxCpltCallback>
}
 800af1a:	e007      	b.n	800af2c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	699a      	ldr	r2, [r3, #24]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0208 	orr.w	r2, r2, #8
 800af2a:	619a      	str	r2, [r3, #24]
}
 800af2c:	bf00      	nop
 800af2e:	3770      	adds	r7, #112	; 0x70
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	44002400 	.word	0x44002400
 800af38:	54002400 	.word	0x54002400

0800af3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b0ac      	sub	sp, #176	; 0xb0
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af72:	2b22      	cmp	r3, #34	; 0x22
 800af74:	f040 8187 	bne.w	800b286 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af7e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af82:	e12a      	b.n	800b1da <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800af92:	b2d9      	uxtb	r1, r3
 800af94:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9e:	400a      	ands	r2, r1
 800afa0:	b2d2      	uxtb	r2, r2
 800afa2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	3b01      	subs	r3, #1
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800afca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afce:	f003 0307 	and.w	r3, r3, #7
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d053      	beq.n	800b07e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d011      	beq.n	800b006 <UART_RxISR_8BIT_FIFOEN+0xca>
 800afe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800afe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2201      	movs	r2, #1
 800aff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affc:	f043 0201 	orr.w	r2, r3, #1
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d011      	beq.n	800b036 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2202      	movs	r2, #2
 800b024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b02c:	f043 0204 	orr.w	r2, r3, #4
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d011      	beq.n	800b066 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2204      	movs	r2, #4
 800b054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b05c:	f043 0202 	orr.w	r2, r3, #2
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d006      	beq.n	800b07e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff f81d 	bl	800a0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b084:	b29b      	uxth	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	f040 80a7 	bne.w	800b1da <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b094:	e853 3f00 	ldrex	r3, [r3]
 800b098:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b09a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b09c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0b0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b0b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b0b6:	e841 2300 	strex	r3, r2, [r1]
 800b0ba:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b0bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1e4      	bne.n	800b08c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0cc:	e853 3f00 	ldrex	r3, [r3]
 800b0d0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b0d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0ea:	66ba      	str	r2, [r7, #104]	; 0x68
 800b0ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b0f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0f2:	e841 2300 	strex	r3, r2, [r1]
 800b0f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b0f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1e1      	bne.n	800b0c2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2220      	movs	r2, #32
 800b102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a62      	ldr	r2, [pc, #392]	; (800b2a0 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d026      	beq.n	800b16a <UART_RxISR_8BIT_FIFOEN+0x22e>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a60      	ldr	r2, [pc, #384]	; (800b2a4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d021      	beq.n	800b16a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d01a      	beq.n	800b16a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b144:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b156:	657b      	str	r3, [r7, #84]	; 0x54
 800b158:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b15c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e4      	bne.n	800b134 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d130      	bne.n	800b1d4 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	f023 0310 	bic.w	r3, r3, #16
 800b18c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b19a:	643b      	str	r3, [r7, #64]	; 0x40
 800b19c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e4      	bne.n	800b178 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69db      	ldr	r3, [r3, #28]
 800b1b4:	f003 0310 	and.w	r3, r3, #16
 800b1b8:	2b10      	cmp	r3, #16
 800b1ba:	d103      	bne.n	800b1c4 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2210      	movs	r2, #16
 800b1c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7fe ff79 	bl	800a0c4 <HAL_UARTEx_RxEventCallback>
 800b1d2:	e002      	b.n	800b1da <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7f6 fc6f 	bl	8001ab8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1da:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d006      	beq.n	800b1f0 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800b1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1e6:	f003 0320 	and.w	r3, r3, #32
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f47f aeca 	bne.w	800af84 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b1fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d049      	beq.n	800b296 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b208:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d242      	bcs.n	800b296 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3308      	adds	r3, #8
 800b216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	e853 3f00 	ldrex	r3, [r3]
 800b21e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3308      	adds	r3, #8
 800b230:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b23c:	e841 2300 	strex	r3, r2, [r1]
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1e3      	bne.n	800b210 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a17      	ldr	r2, [pc, #92]	; (800b2a8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800b24c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	e853 3f00 	ldrex	r3, [r3]
 800b25a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f043 0320 	orr.w	r3, r3, #32
 800b262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b270:	61bb      	str	r3, [r7, #24]
 800b272:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	6979      	ldr	r1, [r7, #20]
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	613b      	str	r3, [r7, #16]
   return(result);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e4      	bne.n	800b24e <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b284:	e007      	b.n	800b296 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	699a      	ldr	r2, [r3, #24]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 0208 	orr.w	r2, r2, #8
 800b294:	619a      	str	r2, [r3, #24]
}
 800b296:	bf00      	nop
 800b298:	37b0      	adds	r7, #176	; 0xb0
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	44002400 	.word	0x44002400
 800b2a4:	54002400 	.word	0x54002400
 800b2a8:	0800abb5 	.word	0x0800abb5

0800b2ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b0ae      	sub	sp, #184	; 0xb8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2e2:	2b22      	cmp	r3, #34	; 0x22
 800b2e4:	f040 818b 	bne.w	800b5fe <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2f2:	e12e      	b.n	800b552 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b306:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b30a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b30e:	4013      	ands	r3, r2
 800b310:	b29a      	uxth	r2, r3
 800b312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b316:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31c:	1c9a      	adds	r2, r3, #2
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b328:	b29b      	uxth	r3, r3
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b33e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b342:	f003 0307 	and.w	r3, r3, #7
 800b346:	2b00      	cmp	r3, #0
 800b348:	d053      	beq.n	800b3f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b34a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d011      	beq.n	800b37a <UART_RxISR_16BIT_FIFOEN+0xce>
 800b356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00b      	beq.n	800b37a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2201      	movs	r2, #1
 800b368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b370:	f043 0201 	orr.w	r2, r3, #1
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b37a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b37e:	f003 0302 	and.w	r3, r3, #2
 800b382:	2b00      	cmp	r3, #0
 800b384:	d011      	beq.n	800b3aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00b      	beq.n	800b3aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2202      	movs	r2, #2
 800b398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a0:	f043 0204 	orr.w	r2, r3, #4
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d011      	beq.n	800b3da <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b3b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00b      	beq.n	800b3da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d0:	f043 0202 	orr.w	r2, r3, #2
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d006      	beq.n	800b3f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7fe fe63 	bl	800a0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f040 80a9 	bne.w	800b552 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b408:	e853 3f00 	ldrex	r3, [r3]
 800b40c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b40e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	461a      	mov	r2, r3
 800b41e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b426:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b42a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b42e:	e841 2300 	strex	r3, r2, [r1]
 800b432:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1e2      	bne.n	800b400 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3308      	adds	r3, #8
 800b440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b44a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b44c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b450:	f023 0301 	bic.w	r3, r3, #1
 800b454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3308      	adds	r3, #8
 800b45e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b462:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b466:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b46a:	e841 2300 	strex	r3, r2, [r1]
 800b46e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1e1      	bne.n	800b43a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2220      	movs	r2, #32
 800b47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a62      	ldr	r2, [pc, #392]	; (800b618 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d026      	beq.n	800b4e2 <UART_RxISR_16BIT_FIFOEN+0x236>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a60      	ldr	r2, [pc, #384]	; (800b61c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d021      	beq.n	800b4e2 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01a      	beq.n	800b4e2 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4d6:	e841 2300 	strex	r3, r2, [r1]
 800b4da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1e4      	bne.n	800b4ac <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d130      	bne.n	800b54c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f8:	e853 3f00 	ldrex	r3, [r3]
 800b4fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b500:	f023 0310 	bic.w	r3, r3, #16
 800b504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	461a      	mov	r2, r3
 800b50e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b512:	647b      	str	r3, [r7, #68]	; 0x44
 800b514:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b51a:	e841 2300 	strex	r3, r2, [r1]
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1e4      	bne.n	800b4f0 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	f003 0310 	and.w	r3, r3, #16
 800b530:	2b10      	cmp	r3, #16
 800b532:	d103      	bne.n	800b53c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2210      	movs	r2, #16
 800b53a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7fe fdbd 	bl	800a0c4 <HAL_UARTEx_RxEventCallback>
 800b54a:	e002      	b.n	800b552 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7f6 fab3 	bl	8001ab8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b552:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b556:	2b00      	cmp	r3, #0
 800b558:	d006      	beq.n	800b568 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800b55a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	f47f aec6 	bne.w	800b2f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b56e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b572:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b576:	2b00      	cmp	r3, #0
 800b578:	d049      	beq.n	800b60e <UART_RxISR_16BIT_FIFOEN+0x362>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b580:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b584:	429a      	cmp	r2, r3
 800b586:	d242      	bcs.n	800b60e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3308      	adds	r3, #8
 800b58e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	623b      	str	r3, [r7, #32]
   return(result);
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b59e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5ac:	633a      	str	r2, [r7, #48]	; 0x30
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b4:	e841 2300 	strex	r3, r2, [r1]
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1e3      	bne.n	800b588 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a17      	ldr	r2, [pc, #92]	; (800b620 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800b5c4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	e853 3f00 	ldrex	r3, [r3]
 800b5d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f043 0320 	orr.w	r3, r3, #32
 800b5da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5e8:	61fb      	str	r3, [r7, #28]
 800b5ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	69b9      	ldr	r1, [r7, #24]
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e4      	bne.n	800b5c6 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5fc:	e007      	b.n	800b60e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	699a      	ldr	r2, [r3, #24]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f042 0208 	orr.w	r2, r2, #8
 800b60c:	619a      	str	r2, [r3, #24]
}
 800b60e:	bf00      	nop
 800b610:	37b8      	adds	r7, #184	; 0xb8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	44002400 	.word	0x44002400
 800b61c:	54002400 	.word	0x54002400
 800b620:	0800ad79 	.word	0x0800ad79

0800b624 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <HAL_UARTEx_DisableFifoMode+0x16>
 800b672:	2302      	movs	r3, #2
 800b674:	e027      	b.n	800b6c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2224      	movs	r2, #36	; 0x24
 800b682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f022 0201 	bic.w	r2, r2, #1
 800b69c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d101      	bne.n	800b6ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6e6:	2302      	movs	r3, #2
 800b6e8:	e02d      	b.n	800b746 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2224      	movs	r2, #36	; 0x24
 800b6f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f022 0201 	bic.w	r2, r2, #1
 800b710:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f850 	bl	800b7cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2220      	movs	r2, #32
 800b738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b084      	sub	sp, #16
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d101      	bne.n	800b766 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b762:	2302      	movs	r3, #2
 800b764:	e02d      	b.n	800b7c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2224      	movs	r2, #36	; 0x24
 800b772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0201 	bic.w	r2, r2, #1
 800b78c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f812 	bl	800b7cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2220      	movs	r2, #32
 800b7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d108      	bne.n	800b7ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7ec:	e031      	b.n	800b852 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7ee:	2308      	movs	r3, #8
 800b7f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7f2:	2308      	movs	r3, #8
 800b7f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	0e5b      	lsrs	r3, r3, #25
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0307 	and.w	r3, r3, #7
 800b804:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	0f5b      	lsrs	r3, r3, #29
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f003 0307 	and.w	r3, r3, #7
 800b814:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	7b3a      	ldrb	r2, [r7, #12]
 800b81a:	4911      	ldr	r1, [pc, #68]	; (800b860 <UARTEx_SetNbDataToProcess+0x94>)
 800b81c:	5c8a      	ldrb	r2, [r1, r2]
 800b81e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b822:	7b3a      	ldrb	r2, [r7, #12]
 800b824:	490f      	ldr	r1, [pc, #60]	; (800b864 <UARTEx_SetNbDataToProcess+0x98>)
 800b826:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b828:	fb93 f3f2 	sdiv	r3, r3, r2
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b834:	7bfb      	ldrb	r3, [r7, #15]
 800b836:	7b7a      	ldrb	r2, [r7, #13]
 800b838:	4909      	ldr	r1, [pc, #36]	; (800b860 <UARTEx_SetNbDataToProcess+0x94>)
 800b83a:	5c8a      	ldrb	r2, [r1, r2]
 800b83c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b840:	7b7a      	ldrb	r2, [r7, #13]
 800b842:	4908      	ldr	r1, [pc, #32]	; (800b864 <UARTEx_SetNbDataToProcess+0x98>)
 800b844:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b846:	fb93 f3f2 	sdiv	r3, r3, r2
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b852:	bf00      	nop
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	0800f9e8 	.word	0x0800f9e8
 800b864:	0800f9f0 	.word	0x0800f9f0

0800b868 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
	svGetChar = funcGetChar;
 800b874:	4a18      	ldr	r2, [pc, #96]	; (800b8d8 <svCLI_Init+0x70>)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6013      	str	r3, [r2, #0]
	svPutChar = funcPutChar;
 800b87a:	4a18      	ldr	r2, [pc, #96]	; (800b8dc <svCLI_Init+0x74>)
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	6013      	str	r3, [r2, #0]
	svCommit = funcCommit;
 800b880:	4a17      	ldr	r2, [pc, #92]	; (800b8e0 <svCLI_Init+0x78>)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6013      	str	r3, [r2, #0]
	szCLIString[0] = 0;
 800b886:	4b17      	ldr	r3, [pc, #92]	; (800b8e4 <svCLI_Init+0x7c>)
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800b88c:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <svCLI_Init+0x80>)
 800b88e:	4a17      	ldr	r2, [pc, #92]	; (800b8ec <svCLI_Init+0x84>)
 800b890:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800b892:	4b17      	ldr	r3, [pc, #92]	; (800b8f0 <svCLI_Init+0x88>)
 800b894:	4a17      	ldr	r2, [pc, #92]	; (800b8f4 <svCLI_Init+0x8c>)
 800b896:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800b898:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <svCLI_Init+0x90>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00d      	beq.n	800b8bc <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800b8a0:	4b16      	ldr	r3, [pc, #88]	; (800b8fc <svCLI_Init+0x94>)
 800b8a2:	4a17      	ldr	r2, [pc, #92]	; (800b900 <svCLI_Init+0x98>)
 800b8a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b8a8:	6018      	str	r0, [r3, #0]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	8019      	strh	r1, [r3, #0]
 800b8ae:	3302      	adds	r3, #2
 800b8b0:	0c0a      	lsrs	r2, r1, #16
 800b8b2:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800b8b4:	4b13      	ldr	r3, [pc, #76]	; (800b904 <svCLI_Init+0x9c>)
 800b8b6:	2206      	movs	r2, #6
 800b8b8:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800b8ba:	e007      	b.n	800b8cc <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <svCLI_Init+0x94>)
 800b8be:	4a12      	ldr	r2, [pc, #72]	; (800b908 <svCLI_Init+0xa0>)
 800b8c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8c2:	c303      	stmia	r3!, {r0, r1}
 800b8c4:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <svCLI_Init+0x9c>)
 800b8c8:	2209      	movs	r2, #9
 800b8ca:	601a      	str	r2, [r3, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	200008bc 	.word	0x200008bc
 800b8dc:	200008c0 	.word	0x200008c0
 800b8e0:	200008c4 	.word	0x200008c4
 800b8e4:	200006a8 	.word	0x200006a8
 800b8e8:	200008b4 	.word	0x200008b4
 800b8ec:	0800f714 	.word	0x0800f714
 800b8f0:	200008b8 	.word	0x200008b8
 800b8f4:	0800f738 	.word	0x0800f738
 800b8f8:	20000048 	.word	0x20000048
 800b8fc:	2000004c 	.word	0x2000004c
 800b900:	0800f868 	.word	0x0800f868
 800b904:	20000058 	.word	0x20000058
 800b908:	0800f870 	.word	0x0800f870

0800b90c <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800b90c:	b40f      	push	{r0, r1, r2, r3}
 800b90e:	b580      	push	{r7, lr}
 800b910:	b084      	sub	sp, #16
 800b912:	af00      	add	r7, sp, #0
static char msg[256];
	va_list ap;
	int len;

	va_start(ap, fmt);
 800b914:	f107 031c 	add.w	r3, r7, #28
 800b918:	607b      	str	r3, [r7, #4]
	len = vsprintf(msg, fmt, ap);
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	69b9      	ldr	r1, [r7, #24]
 800b91e:	480f      	ldr	r0, [pc, #60]	; (800b95c <svCLI_Printf+0x50>)
 800b920:	f003 fae6 	bl	800eef0 <vsiprintf>
 800b924:	60b8      	str	r0, [r7, #8]
	va_end(ap);
	for (int i=0;i<len;i++) {
 800b926:	2300      	movs	r3, #0
 800b928:	60fb      	str	r3, [r7, #12]
 800b92a:	e00a      	b.n	800b942 <svCLI_Printf+0x36>
		svPutChar(msg[i]);
 800b92c:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <svCLI_Printf+0x54>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	490a      	ldr	r1, [pc, #40]	; (800b95c <svCLI_Printf+0x50>)
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	440a      	add	r2, r1
 800b936:	7812      	ldrb	r2, [r2, #0]
 800b938:	4610      	mov	r0, r2
 800b93a:	4798      	blx	r3
	for (int i=0;i<len;i++) {
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	3301      	adds	r3, #1
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	429a      	cmp	r2, r3
 800b948:	dbf0      	blt.n	800b92c <svCLI_Printf+0x20>
	}
	return len;
 800b94a:	68bb      	ldr	r3, [r7, #8]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b956:	b004      	add	sp, #16
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	200008d4 	.word	0x200008d4
 800b960:	200008c0 	.word	0x200008c0

0800b964 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
	if (svPutChar) {
 800b96a:	4b2d      	ldr	r3, [pc, #180]	; (800ba20 <svCLI_ShowHelp+0xbc>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d04a      	beq.n	800ba08 <svCLI_ShowHelp+0xa4>
		if (sCLITableBegin != sCLITablEnd) {
 800b972:	4b2c      	ldr	r3, [pc, #176]	; (800ba24 <svCLI_ShowHelp+0xc0>)
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	4b2c      	ldr	r3, [pc, #176]	; (800ba28 <svCLI_ShowHelp+0xc4>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d03e      	beq.n	800b9fc <svCLI_ShowHelp+0x98>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800b97e:	2300      	movs	r3, #0
 800b980:	60fb      	str	r3, [r7, #12]
 800b982:	e006      	b.n	800b992 <svCLI_ShowHelp+0x2e>
 800b984:	4b26      	ldr	r3, [pc, #152]	; (800ba20 <svCLI_ShowHelp+0xbc>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	203d      	movs	r0, #61	; 0x3d
 800b98a:	4798      	blx	r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	3301      	adds	r3, #1
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b4f      	cmp	r3, #79	; 0x4f
 800b996:	d9f5      	bls.n	800b984 <svCLI_ShowHelp+0x20>
			svCLI_Printf("\r\n");
 800b998:	4824      	ldr	r0, [pc, #144]	; (800ba2c <svCLI_ShowHelp+0xc8>)
 800b99a:	f7ff ffb7 	bl	800b90c <svCLI_Printf>
			SVCLI_t* pCLIEntry;
			int nCount = 1;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	607b      	str	r3, [r7, #4]
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800b9a2:	4b20      	ldr	r3, [pc, #128]	; (800ba24 <svCLI_ShowHelp+0xc0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60bb      	str	r3, [r7, #8]
 800b9a8:	e012      	b.n	800b9d0 <svCLI_ShowHelp+0x6c>
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	1c4b      	adds	r3, r1, #1
 800b9ae:	607b      	str	r3, [r7, #4]
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <svCLI_ShowHelp+0x5e>
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	e000      	b.n	800b9c4 <svCLI_ShowHelp+0x60>
 800b9c2:	4b1b      	ldr	r3, [pc, #108]	; (800ba30 <svCLI_ShowHelp+0xcc>)
 800b9c4:	481b      	ldr	r0, [pc, #108]	; (800ba34 <svCLI_ShowHelp+0xd0>)
 800b9c6:	f7ff ffa1 	bl	800b90c <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	330c      	adds	r3, #12
 800b9ce:	60bb      	str	r3, [r7, #8]
 800b9d0:	4b15      	ldr	r3, [pc, #84]	; (800ba28 <svCLI_ShowHelp+0xc4>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d3e7      	bcc.n	800b9aa <svCLI_ShowHelp+0x46>
			}
			svCLI_Printf(AES_RESET);
 800b9da:	4817      	ldr	r0, [pc, #92]	; (800ba38 <svCLI_ShowHelp+0xd4>)
 800b9dc:	f7ff ff96 	bl	800b90c <svCLI_Printf>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	e006      	b.n	800b9f4 <svCLI_ShowHelp+0x90>
 800b9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <svCLI_ShowHelp+0xbc>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	203d      	movs	r0, #61	; 0x3d
 800b9ec:	4798      	blx	r3
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	603b      	str	r3, [r7, #0]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b4f      	cmp	r3, #79	; 0x4f
 800b9f8:	d9f5      	bls.n	800b9e6 <svCLI_ShowHelp+0x82>
 800b9fa:	e002      	b.n	800ba02 <svCLI_ShowHelp+0x9e>
		}
		else {	// No CLI Entry
			svCLI_Printf("No CLI Entries !!!");
 800b9fc:	480f      	ldr	r0, [pc, #60]	; (800ba3c <svCLI_ShowHelp+0xd8>)
 800b9fe:	f7ff ff85 	bl	800b90c <svCLI_Printf>
		}
		svCLI_Printf("\r\n");
 800ba02:	480a      	ldr	r0, [pc, #40]	; (800ba2c <svCLI_ShowHelp+0xc8>)
 800ba04:	f7ff ff82 	bl	800b90c <svCLI_Printf>
	}
	if (svCommit) {
 800ba08:	4b0d      	ldr	r3, [pc, #52]	; (800ba40 <svCLI_ShowHelp+0xdc>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <svCLI_ShowHelp+0xb2>
		svCommit();
 800ba10:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <svCLI_ShowHelp+0xdc>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4798      	blx	r3
	}
}
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	200008c0 	.word	0x200008c0
 800ba24:	200008b4 	.word	0x200008b4
 800ba28:	200008b8 	.word	0x200008b8
 800ba2c:	0800f87c 	.word	0x0800f87c
 800ba30:	0800f880 	.word	0x0800f880
 800ba34:	0800f884 	.word	0x0800f884
 800ba38:	0800f8a4 	.word	0x0800f8a4
 800ba3c:	0800f8ac 	.word	0x0800f8ac
 800ba40:	200008c4 	.word	0x200008c4

0800ba44 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	int nCount = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]
	if ((szString == NULL) || (*szString == 0))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <_strlenOffspace+0x1a>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d104      	bne.n	800ba68 <_strlenOffspace+0x24>
		return 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e017      	b.n	800ba92 <_strlenOffspace+0x4e>
	// Strip off first spaces
	while (*szString == ' ') szString++;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	3301      	adds	r3, #1
 800ba66:	607b      	str	r3, [r7, #4]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b20      	cmp	r3, #32
 800ba6e:	d0f8      	beq.n	800ba62 <_strlenOffspace+0x1e>
	// Count
	while (*szString) {
 800ba70:	e008      	b.n	800ba84 <_strlenOffspace+0x40>
		if (*szString++ != ' ') {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	2b20      	cmp	r3, #32
 800ba7c:	d007      	beq.n	800ba8e <_strlenOffspace+0x4a>
			nCount++;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3301      	adds	r3, #1
 800ba82:	60fb      	str	r3, [r7, #12]
	while (*szString) {
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1f2      	bne.n	800ba72 <_strlenOffspace+0x2e>
 800ba8c:	e000      	b.n	800ba90 <_strlenOffspace+0x4c>
		}
		else
			break;
 800ba8e:	bf00      	nop
	}
	return nCount;
 800ba90:	68fb      	ldr	r3, [r7, #12]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <_toLower>:

static char _toLower(char c)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b083      	sub	sp, #12
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	4603      	mov	r3, r0
 800baa6:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800baa8:	79fb      	ldrb	r3, [r7, #7]
 800baaa:	2b40      	cmp	r3, #64	; 0x40
 800baac:	d905      	bls.n	800baba <_toLower+0x1c>
 800baae:	79fb      	ldrb	r3, [r7, #7]
 800bab0:	2b5a      	cmp	r3, #90	; 0x5a
 800bab2:	d802      	bhi.n	800baba <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	3320      	adds	r3, #32
 800bab8:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800baba:	79fb      	ldrb	r3, [r7, #7]
}
 800babc:	4618      	mov	r0, r3
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <_isPrintable>:

static int _isPrintable(char c)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	4603      	mov	r3, r0
 800bad0:	71fb      	strb	r3, [r7, #7]
	if ((' ' <= c) && (c <= '~'))
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	2b1f      	cmp	r3, #31
 800bad6:	d904      	bls.n	800bae2 <_isPrintable+0x1a>
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	2b7e      	cmp	r3, #126	; 0x7e
 800badc:	d801      	bhi.n	800bae2 <_isPrintable+0x1a>
		return 1;
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <_isPrintable+0x1c>
	return 0;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <_isHex>:

static int _isHex(char c)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||				\
 800bafa:	79fb      	ldrb	r3, [r7, #7]
 800bafc:	2b2f      	cmp	r3, #47	; 0x2f
 800bafe:	d902      	bls.n	800bb06 <_isHex+0x16>
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	2b39      	cmp	r3, #57	; 0x39
 800bb04:	d90b      	bls.n	800bb1e <_isHex+0x2e>
 800bb06:	79fb      	ldrb	r3, [r7, #7]
 800bb08:	2b40      	cmp	r3, #64	; 0x40
 800bb0a:	d902      	bls.n	800bb12 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||  	\
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	2b46      	cmp	r3, #70	; 0x46
 800bb10:	d905      	bls.n	800bb1e <_isHex+0x2e>
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	2b60      	cmp	r3, #96	; 0x60
 800bb16:	d904      	bls.n	800bb22 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	2b66      	cmp	r3, #102	; 0x66
 800bb1c:	d801      	bhi.n	800bb22 <_isHex+0x32>
    return 1;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <_isHex+0x34>
	return 0;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <_fromHex>:

static int _fromHex(char c) 
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	2b2f      	cmp	r3, #47	; 0x2f
 800bb42:	d906      	bls.n	800bb52 <_fromHex+0x22>
 800bb44:	79fb      	ldrb	r3, [r7, #7]
 800bb46:	2b39      	cmp	r3, #57	; 0x39
 800bb48:	d803      	bhi.n	800bb52 <_fromHex+0x22>
    ret = (c - '0');
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	3b30      	subs	r3, #48	; 0x30
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	e012      	b.n	800bb78 <_fromHex+0x48>
  } 
	else if ((c >= 'a') && (c <= 'f')) {
 800bb52:	79fb      	ldrb	r3, [r7, #7]
 800bb54:	2b60      	cmp	r3, #96	; 0x60
 800bb56:	d906      	bls.n	800bb66 <_fromHex+0x36>
 800bb58:	79fb      	ldrb	r3, [r7, #7]
 800bb5a:	2b66      	cmp	r3, #102	; 0x66
 800bb5c:	d803      	bhi.n	800bb66 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	3b57      	subs	r3, #87	; 0x57
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	e008      	b.n	800bb78 <_fromHex+0x48>
  } 
	else if ((c >= 'A') && (c <= 'F')) {
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	2b40      	cmp	r3, #64	; 0x40
 800bb6a:	d905      	bls.n	800bb78 <_fromHex+0x48>
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	2b46      	cmp	r3, #70	; 0x46
 800bb70:	d802      	bhi.n	800bb78 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	3b37      	subs	r3, #55	; 0x37
 800bb76:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800bb78:	68fb      	ldr	r3, [r7, #12]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b086      	sub	sp, #24
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	60f8      	str	r0, [r7, #12]
 800bb8e:	60b9      	str	r1, [r7, #8]
 800bb90:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <_strNoCaseCmp+0x16>
    return 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e026      	b.n	800bbea <_strNoCaseCmp+0x64>
  do {
		if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	60fa      	str	r2, [r7, #12]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff ff7a 	bl	800ba9e <_toLower>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	75fb      	strb	r3, [r7, #23]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	1c5a      	adds	r2, r3, #1
 800bbb2:	60ba      	str	r2, [r7, #8]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff ff71 	bl	800ba9e <_toLower>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75bb      	strb	r3, [r7, #22]
 800bbc0:	7dfa      	ldrb	r2, [r7, #23]
 800bbc2:	7dbb      	ldrb	r3, [r7, #22]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d009      	beq.n	800bbdc <_strNoCaseCmp+0x56>
			if ((c1 == 0) || (c2 == 0))
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00c      	beq.n	800bbe8 <_strNoCaseCmp+0x62>
 800bbce:	7dbb      	ldrb	r3, [r7, #22]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d009      	beq.n	800bbe8 <_strNoCaseCmp+0x62>
					break;
			return ((unsigned char)c1 - (unsigned char)c2);
 800bbd4:	7dfa      	ldrb	r2, [r7, #23]
 800bbd6:	7dbb      	ldrb	r3, [r7, #22]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	e006      	b.n	800bbea <_strNoCaseCmp+0x64>
		}
  } while (--nLenghth != 0);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	607b      	str	r3, [r7, #4]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1d9      	bne.n	800bb9c <_strNoCaseCmp+0x16>
  return 0;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	60f8      	str	r0, [r7, #12]
 800bbfa:	60b9      	str	r1, [r7, #8]
 800bbfc:	607a      	str	r2, [r7, #4]
	while (nLength--) {
 800bbfe:	e007      	b.n	800bc10 <_svMemCpy+0x1e>
		*dst++=*src++;
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	1c53      	adds	r3, r2, #1
 800bc04:	60bb      	str	r3, [r7, #8]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	1c59      	adds	r1, r3, #1
 800bc0a:	60f9      	str	r1, [r7, #12]
 800bc0c:	7812      	ldrb	r2, [r2, #0]
 800bc0e:	701a      	strb	r2, [r3, #0]
	while (nLength--) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	1e5a      	subs	r2, r3, #1
 800bc14:	607a      	str	r2, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1f2      	bne.n	800bc00 <_svMemCpy+0xe>
	}
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <_svClearLine>:

static void _svClearLine(void)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
	svPutChar('\r');
 800bc2e:	4b16      	ldr	r3, [pc, #88]	; (800bc88 <_svClearLine+0x60>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	200d      	movs	r0, #13
 800bc34:	4798      	blx	r3
	// Remove Strings
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800bc36:	2300      	movs	r3, #0
 800bc38:	607b      	str	r3, [r7, #4]
 800bc3a:	e006      	b.n	800bc4a <_svClearLine+0x22>
		svPutChar(' ');
 800bc3c:	4b12      	ldr	r3, [pc, #72]	; (800bc88 <_svClearLine+0x60>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2020      	movs	r0, #32
 800bc42:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3301      	adds	r3, #1
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	4b10      	ldr	r3, [pc, #64]	; (800bc8c <_svClearLine+0x64>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a10      	ldr	r2, [pc, #64]	; (800bc90 <_svClearLine+0x68>)
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	441a      	add	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d8f0      	bhi.n	800bc3c <_svClearLine+0x14>
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	603b      	str	r3, [r7, #0]
 800bc5e:	e006      	b.n	800bc6e <_svClearLine+0x46>
		svPutChar('\b');
 800bc60:	4b09      	ldr	r3, [pc, #36]	; (800bc88 <_svClearLine+0x60>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2008      	movs	r0, #8
 800bc66:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	603b      	str	r3, [r7, #0]
 800bc6e:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <_svClearLine+0x64>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a07      	ldr	r2, [pc, #28]	; (800bc90 <_svClearLine+0x68>)
 800bc74:	6812      	ldr	r2, [r2, #0]
 800bc76:	441a      	add	r2, r3
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d8f0      	bhi.n	800bc60 <_svClearLine+0x38>
}
 800bc7e:	bf00      	nop
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	200008c0 	.word	0x200008c0
 800bc8c:	200008b0 	.word	0x200008b0
 800bc90:	20000058 	.word	0x20000058

0800bc94 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	71fb      	strb	r3, [r7, #7]
	switch (eHistoryCmd) {
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d03f      	beq.n	800bd24 <svCLIHandleHistory+0x90>
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	dc6f      	bgt.n	800bd88 <svCLIHandleHistory+0xf4>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <svCLIHandleHistory+0x1e>
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d052      	beq.n	800bd56 <svCLIHandleHistory+0xc2>
			if (snCLIHistoryPos >= snCLIHistoryCount)
				snCLIHistoryPos = 0;
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
			break;
		default:
			break;
 800bcb0:	e06a      	b.n	800bd88 <svCLIHandleHistory+0xf4>
			if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {	// Full
 800bcb2:	4b38      	ldr	r3, [pc, #224]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d11c      	bne.n	800bcf4 <svCLIHandleHistory+0x60>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800bcba:	2301      	movs	r3, #1
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	e00f      	b.n	800bce0 <svCLIHandleHistory+0x4c>
	        _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	01db      	lsls	r3, r3, #7
 800bcc6:	4a34      	ldr	r2, [pc, #208]	; (800bd98 <svCLIHandleHistory+0x104>)
 800bcc8:	1898      	adds	r0, r3, r2
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	01db      	lsls	r3, r3, #7
 800bcce:	4a32      	ldr	r2, [pc, #200]	; (800bd98 <svCLIHandleHistory+0x104>)
 800bcd0:	4413      	add	r3, r2
 800bcd2:	2280      	movs	r2, #128	; 0x80
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f7ff ff8c 	bl	800bbf2 <_svMemCpy>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	60fb      	str	r3, [r7, #12]
 800bce0:	4b2c      	ldr	r3, [pc, #176]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	dbea      	blt.n	800bcc0 <svCLIHandleHistory+0x2c>
				snCLIHistoryCount--;
 800bcea:	4b2a      	ldr	r3, [pc, #168]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	4a28      	ldr	r2, [pc, #160]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bcf2:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800bcf4:	4b27      	ldr	r3, [pc, #156]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	01db      	lsls	r3, r3, #7
 800bcfa:	4a27      	ldr	r2, [pc, #156]	; (800bd98 <svCLIHandleHistory+0x104>)
 800bcfc:	4413      	add	r3, r2
 800bcfe:	2280      	movs	r2, #128	; 0x80
 800bd00:	4926      	ldr	r1, [pc, #152]	; (800bd9c <svCLIHandleHistory+0x108>)
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7ff ff75 	bl	800bbf2 <_svMemCpy>
			if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800bd08:	4b22      	ldr	r3, [pc, #136]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	dc04      	bgt.n	800bd1a <svCLIHandleHistory+0x86>
				snCLIHistoryCount++;
 800bd10:	4b20      	ldr	r3, [pc, #128]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3301      	adds	r3, #1
 800bd16:	4a1f      	ldr	r2, [pc, #124]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bd18:	6013      	str	r3, [r2, #0]
			snCLIHistoryPos = snCLIHistoryCount;
 800bd1a:	4b1e      	ldr	r3, [pc, #120]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a20      	ldr	r2, [pc, #128]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd20:	6013      	str	r3, [r2, #0]
			break;
 800bd22:	e032      	b.n	800bd8a <svCLIHandleHistory+0xf6>
			snCLIHistoryPos--;
 800bd24:	4b1e      	ldr	r3, [pc, #120]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	4a1d      	ldr	r2, [pc, #116]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd2c:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos < 0)
 800bd2e:	4b1c      	ldr	r3, [pc, #112]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	da04      	bge.n	800bd40 <svCLIHandleHistory+0xac>
				snCLIHistoryPos = snCLIHistoryCount - 1;
 800bd36:	4b17      	ldr	r3, [pc, #92]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	4a18      	ldr	r2, [pc, #96]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd3e:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800bd40:	4b17      	ldr	r3, [pc, #92]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	01db      	lsls	r3, r3, #7
 800bd46:	4a14      	ldr	r2, [pc, #80]	; (800bd98 <svCLIHandleHistory+0x104>)
 800bd48:	4413      	add	r3, r2
 800bd4a:	2280      	movs	r2, #128	; 0x80
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4813      	ldr	r0, [pc, #76]	; (800bd9c <svCLIHandleHistory+0x108>)
 800bd50:	f7ff ff4f 	bl	800bbf2 <_svMemCpy>
			break;
 800bd54:	e019      	b.n	800bd8a <svCLIHandleHistory+0xf6>
			snCLIHistoryPos++;
 800bd56:	4b12      	ldr	r3, [pc, #72]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	4a10      	ldr	r2, [pc, #64]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd5e:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos >= snCLIHistoryCount)
 800bd60:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <svCLIHandleHistory+0x100>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	db02      	blt.n	800bd72 <svCLIHandleHistory+0xde>
				snCLIHistoryPos = 0;
 800bd6c:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	601a      	str	r2, [r3, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <svCLIHandleHistory+0x10c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	01db      	lsls	r3, r3, #7
 800bd78:	4a07      	ldr	r2, [pc, #28]	; (800bd98 <svCLIHandleHistory+0x104>)
 800bd7a:	4413      	add	r3, r2
 800bd7c:	2280      	movs	r2, #128	; 0x80
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4806      	ldr	r0, [pc, #24]	; (800bd9c <svCLIHandleHistory+0x108>)
 800bd82:	f7ff ff36 	bl	800bbf2 <_svMemCpy>
			break;
 800bd86:	e000      	b.n	800bd8a <svCLIHandleHistory+0xf6>
			break;
 800bd88:	bf00      	nop
	}
}
 800bd8a:	bf00      	nop
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	200008a8 	.word	0x200008a8
 800bd98:	20000728 	.word	0x20000728
 800bd9c:	200006a8 	.word	0x200006a8
 800bda0:	200008ac 	.word	0x200008ac

0800bda4 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	SVCLI_t* pCLIEntry;
	char* pCurrent = *line;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800bdb2:	e002      	b.n	800bdba <svCLI_Search+0x16>
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	613b      	str	r3, [r7, #16]
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <svCLI_Search+0x26>
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b20      	cmp	r3, #32
 800bdc8:	d0f4      	beq.n	800bdb4 <svCLI_Search+0x10>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800bdca:	4b22      	ldr	r3, [pc, #136]	; (800be54 <svCLI_Search+0xb0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	e035      	b.n	800be3e <svCLI_Search+0x9a>
		int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fe34 	bl	800ba44 <_strlenOffspace>
 800bddc:	60f8      	str	r0, [r7, #12]
		int nArgLength = _strlenOffspace(pCurrent);
 800bdde:	6938      	ldr	r0, [r7, #16]
 800bde0:	f7ff fe30 	bl	800ba44 <_strlenOffspace>
 800bde4:	60b8      	str	r0, [r7, #8]
		pCurrent[nArgLength] = 0;	// NULL termination just after command for comparing
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	4413      	add	r3, r2
 800bdec:	2200      	movs	r2, #0
 800bdee:	701a      	strb	r2, [r3, #0]
		if (nCmdLength >= nArgLength) {
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	db1f      	blt.n	800be38 <svCLI_Search+0x94>
			if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) {	// Partial Command OK !!
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4619      	mov	r1, r3
 800be00:	6938      	ldr	r0, [r7, #16]
 800be02:	f7ff fec0 	bl	800bb86 <_strNoCaseCmp>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d115      	bne.n	800be38 <svCLI_Search+0x94>
				pCurrent += (nArgLength + 1);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	3301      	adds	r3, #1
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	4413      	add	r3, r2
 800be14:	613b      	str	r3, [r7, #16]
			  // strip off trailing spaces
			  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800be16:	e002      	b.n	800be1e <svCLI_Search+0x7a>
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	3301      	adds	r3, #1
 800be1c:	613b      	str	r3, [r7, #16]
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <svCLI_Search+0x8a>
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b20      	cmp	r3, #32
 800be2c:	d0f4      	beq.n	800be18 <svCLI_Search+0x74>
				*line = pCurrent;		// remove command & return
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	601a      	str	r2, [r3, #0]
				
				return pCLIEntry;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	e008      	b.n	800be4a <svCLI_Search+0xa6>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	330c      	adds	r3, #12
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	4b06      	ldr	r3, [pc, #24]	; (800be58 <svCLI_Search+0xb4>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	429a      	cmp	r2, r3
 800be46:	d3c4      	bcc.n	800bdd2 <svCLI_Search+0x2e>
			}
		}
	}
	return NULL;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200008b4 	.word	0x200008b4
 800be58:	200008b8 	.word	0x200008b8

0800be5c <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	; 0x28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]
  int first = 1;
 800be6a:	2301      	movs	r3, #1
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 800be6e:	230a      	movs	r3, #10
 800be70:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	61fb      	str	r3, [r7, #28]
  int digit;
		// strip off leading spaces
    while (*s == ' ') s++;
 800be76:	e002      	b.n	800be7e <svCLI_ParseNumber+0x22>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3301      	adds	r3, #1
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b20      	cmp	r3, #32
 800be84:	d0f8      	beq.n	800be78 <svCLI_ParseNumber+0x1c>
		if (*s == 0)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d14d      	bne.n	800bf2a <svCLI_ParseNumber+0xce>
			return 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	e05b      	b.n	800bf4a <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 800be92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be94:	2b00      	cmp	r3, #0
 800be96:	d011      	beq.n	800bebc <svCLI_ParseNumber+0x60>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b30      	cmp	r3, #48	; 0x30
 800be9e:	d10d      	bne.n	800bebc <svCLI_ParseNumber+0x60>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3301      	adds	r3, #1
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff fdf9 	bl	800ba9e <_toLower>
 800beac:	4603      	mov	r3, r0
 800beae:	2b78      	cmp	r3, #120	; 0x78
 800beb0:	d104      	bne.n	800bebc <svCLI_ParseNumber+0x60>
        radix = 16;
 800beb2:	2310      	movs	r3, #16
 800beb4:	623b      	str	r3, [r7, #32]
        s += 2;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3302      	adds	r3, #2
 800beba:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	60fa      	str	r2, [r7, #12]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	4618      	mov	r0, r3
 800bece:	f7ff fe0f 	bl	800baf0 <_isHex>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d010      	beq.n	800befa <svCLI_ParseNumber+0x9e>
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff fe28 	bl	800bb30 <_fromHex>
 800bee0:	6138      	str	r0, [r7, #16]
 800bee2:	693a      	ldr	r2, [r7, #16]
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	da07      	bge.n	800befa <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	69fa      	ldr	r2, [r7, #28]
 800beee:	fb03 f202 	mul.w	r2, r3, r2
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	4413      	add	r3, r2
 800bef6:	61fb      	str	r3, [r7, #28]
 800bef8:	e017      	b.n	800bf2a <svCLI_ParseNumber+0xce>
      } 
			else {
        if (delimiter != (char *)0) {
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d012      	beq.n	800bf26 <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 800bf04:	e002      	b.n	800bf0c <svCLI_ParseNumber+0xb0>
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	61bb      	str	r3, [r7, #24]
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d004      	beq.n	800bf1e <svCLI_ParseNumber+0xc2>
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	7dfa      	ldrb	r2, [r7, #23]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d1f3      	bne.n	800bf06 <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d106      	bne.n	800bf34 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 800bf26:	2300      	movs	r3, #0
 800bf28:	e00f      	b.n	800bf4a <svCLI_ParseNumber+0xee>
    while (*s) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1af      	bne.n	800be92 <svCLI_ParseNumber+0x36>
 800bf32:	e000      	b.n	800bf36 <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 800bf34:	bf00      	nop
      }
    }
    *val = result;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	69fa      	ldr	r2, [r7, #28]
 800bf3a:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <svCLI_ParseNumber+0xec>
      *res = s;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800bf48:	2301      	movs	r3, #1
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3728      	adds	r7, #40	; 0x28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
	...

0800bf54 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 800bf54:	b590      	push	{r4, r7, lr}
 800bf56:	b089      	sub	sp, #36	; 0x24
 800bf58:	af00      	add	r7, sp, #0
	if (s_bPwdOK == FALSE) {	// Input Password
 800bf5a:	4b3a      	ldr	r3, [pc, #232]	; (800c044 <svCLI_ParsenExecute+0xf0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d120      	bne.n	800bfa4 <svCLI_ParsenExecute+0x50>
		if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 800bf62:	4939      	ldr	r1, [pc, #228]	; (800c048 <svCLI_ParsenExecute+0xf4>)
 800bf64:	4839      	ldr	r0, [pc, #228]	; (800c04c <svCLI_ParsenExecute+0xf8>)
 800bf66:	f7f4 f993 	bl	8000290 <strcmp>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d115      	bne.n	800bf9c <svCLI_ParsenExecute+0x48>
			s_bPwdOK = TRUE;
 800bf70:	4b34      	ldr	r3, [pc, #208]	; (800c044 <svCLI_ParsenExecute+0xf0>)
 800bf72:	2201      	movs	r2, #1
 800bf74:	601a      	str	r2, [r3, #0]
			svCLI_Printf("Welcome !!\r\n");
 800bf76:	4836      	ldr	r0, [pc, #216]	; (800c050 <svCLI_ParsenExecute+0xfc>)
 800bf78:	f7ff fcc8 	bl	800b90c <svCLI_Printf>
			strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800bf7c:	4b35      	ldr	r3, [pc, #212]	; (800c054 <svCLI_ParsenExecute+0x100>)
 800bf7e:	4a36      	ldr	r2, [pc, #216]	; (800c058 <svCLI_ParsenExecute+0x104>)
 800bf80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf84:	6018      	str	r0, [r3, #0]
 800bf86:	3304      	adds	r3, #4
 800bf88:	8019      	strh	r1, [r3, #0]
 800bf8a:	3302      	adds	r3, #2
 800bf8c:	0c0a      	lsrs	r2, r1, #16
 800bf8e:	701a      	strb	r2, [r3, #0]
			snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800bf90:	4b32      	ldr	r3, [pc, #200]	; (800c05c <svCLI_ParsenExecute+0x108>)
 800bf92:	2206      	movs	r2, #6
 800bf94:	601a      	str	r2, [r3, #0]
			svCLI_ShowHelp();
 800bf96:	f7ff fce5 	bl	800b964 <svCLI_ShowHelp>
		}
		else {
			svCLI_Printf("Invalid Password !!\r\n");
		}
		return;
 800bf9a:	e04f      	b.n	800c03c <svCLI_ParsenExecute+0xe8>
			svCLI_Printf("Invalid Password !!\r\n");
 800bf9c:	4830      	ldr	r0, [pc, #192]	; (800c060 <svCLI_ParsenExecute+0x10c>)
 800bf9e:	f7ff fcb5 	bl	800b90c <svCLI_Printf>
		return;
 800bfa2:	e04b      	b.n	800c03c <svCLI_ParsenExecute+0xe8>
	}
	SVCLI_t* pCLIEntry;
	if (sCLITableBegin == sCLITablEnd) {
 800bfa4:	4b2f      	ldr	r3, [pc, #188]	; (800c064 <svCLI_ParsenExecute+0x110>)
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	4b2f      	ldr	r3, [pc, #188]	; (800c068 <svCLI_ParsenExecute+0x114>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d103      	bne.n	800bfb8 <svCLI_ParsenExecute+0x64>
		svCLI_Printf("No CLI Entries !!!\r\n");
 800bfb0:	482e      	ldr	r0, [pc, #184]	; (800c06c <svCLI_ParsenExecute+0x118>)
 800bfb2:	f7ff fcab 	bl	800b90c <svCLI_Printf>
		return;
 800bfb6:	e041      	b.n	800c03c <svCLI_ParsenExecute+0xe8>
	}
	char* pLine = szCLIString;
 800bfb8:	4b24      	ldr	r3, [pc, #144]	; (800c04c <svCLI_ParsenExecute+0xf8>)
 800bfba:	613b      	str	r3, [r7, #16]
	pCLIEntry = svCLI_Search(&pLine);
 800bfbc:	f107 0310 	add.w	r3, r7, #16
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7ff feef 	bl	800bda4 <svCLI_Search>
 800bfc6:	61b8      	str	r0, [r7, #24]
	if (pCLIEntry) {
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d033      	beq.n	800c036 <svCLI_ParsenExecute+0xe2>
		// Parse more for CLI function
		unsigned int nFirst, nSecond, nCount;
		nCount = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	61fb      	str	r3, [r7, #28]
		nFirst = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60fb      	str	r3, [r7, #12]
		nSecond = 0;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60bb      	str	r3, [r7, #8]
		char* pParseLine = pLine;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	617b      	str	r3, [r7, #20]
		char delim[3] = ", ";
 800bfde:	4a24      	ldr	r2, [pc, #144]	; (800c070 <svCLI_ParsenExecute+0x11c>)
 800bfe0:	1d3b      	adds	r3, r7, #4
 800bfe2:	6812      	ldr	r2, [r2, #0]
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	8019      	strh	r1, [r3, #0]
 800bfe8:	3302      	adds	r3, #2
 800bfea:	0c12      	lsrs	r2, r2, #16
 800bfec:	701a      	strb	r2, [r3, #0]
		if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 800bfee:	6938      	ldr	r0, [r7, #16]
 800bff0:	1d3b      	adds	r3, r7, #4
 800bff2:	f107 0210 	add.w	r2, r7, #16
 800bff6:	f107 010c 	add.w	r1, r7, #12
 800bffa:	f7ff ff2f 	bl	800be5c <svCLI_ParseNumber>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d010      	beq.n	800c026 <svCLI_ParsenExecute+0xd2>
			nCount++;
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	3301      	adds	r3, #1
 800c008:	61fb      	str	r3, [r7, #28]
			if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 800c00a:	6938      	ldr	r0, [r7, #16]
 800c00c:	1d3b      	adds	r3, r7, #4
 800c00e:	f107 0210 	add.w	r2, r7, #16
 800c012:	f107 0108 	add.w	r1, r7, #8
 800c016:	f7ff ff21 	bl	800be5c <svCLI_ParseNumber>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d002      	beq.n	800c026 <svCLI_ParsenExecute+0xd2>
				nCount++;
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	3301      	adds	r3, #1
 800c024:	61fb      	str	r3, [r7, #28]
			}
		}
		pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	689c      	ldr	r4, [r3, #8]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	69f9      	ldr	r1, [r7, #28]
 800c030:	6978      	ldr	r0, [r7, #20]
 800c032:	47a0      	blx	r4
 800c034:	e002      	b.n	800c03c <svCLI_ParsenExecute+0xe8>
	}
	else {
		svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 800c036:	480f      	ldr	r0, [pc, #60]	; (800c074 <svCLI_ParsenExecute+0x120>)
 800c038:	f7ff fc68 	bl	800b90c <svCLI_Printf>
	}
}
 800c03c:	3724      	adds	r7, #36	; 0x24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd90      	pop	{r4, r7, pc}
 800c042:	bf00      	nop
 800c044:	20000048 	.word	0x20000048
 800c048:	0800f8c0 	.word	0x0800f8c0
 800c04c:	200006a8 	.word	0x200006a8
 800c050:	0800f8cc 	.word	0x0800f8cc
 800c054:	2000004c 	.word	0x2000004c
 800c058:	0800f868 	.word	0x0800f868
 800c05c:	20000058 	.word	0x20000058
 800c060:	0800f8dc 	.word	0x0800f8dc
 800c064:	200008b4 	.word	0x200008b4
 800c068:	200008b8 	.word	0x200008b8
 800c06c:	0800f8f4 	.word	0x0800f8f4
 800c070:	0800f934 	.word	0x0800f934
 800c074:	0800f90c 	.word	0x0800f90c

0800c078 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	4613      	mov	r3, r2
 800c086:	71fb      	strb	r3, [r7, #7]
	if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d005      	beq.n	800c09a <svCLI_SetBypassFtn+0x22>
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <svCLI_SetBypassFtn+0x22>
 800c094:	79fb      	ldrb	r3, [r7, #7]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d136      	bne.n	800c108 <svCLI_SetBypassFtn+0x90>
		if (svBypass == NULL) {
 800c09a:	4b28      	ldr	r3, [pc, #160]	; (800c13c <svCLI_SetBypassFtn+0xc4>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d048      	beq.n	800c134 <svCLI_SetBypassFtn+0xbc>
			// Nothing to do..
			return;
		}
		strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c0a2:	4b27      	ldr	r3, [pc, #156]	; (800c140 <svCLI_SetBypassFtn+0xc8>)
 800c0a4:	4a27      	ldr	r2, [pc, #156]	; (800c144 <svCLI_SetBypassFtn+0xcc>)
 800c0a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0aa:	6018      	str	r0, [r3, #0]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	8019      	strh	r1, [r3, #0]
 800c0b0:	3302      	adds	r3, #2
 800c0b2:	0c0a      	lsrs	r2, r1, #16
 800c0b4:	701a      	strb	r2, [r3, #0]
		snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c0b6:	4b24      	ldr	r3, [pc, #144]	; (800c148 <svCLI_SetBypassFtn+0xd0>)
 800c0b8:	2206      	movs	r2, #6
 800c0ba:	601a      	str	r2, [r3, #0]
		svBypass = NULL;
 800c0bc:	4b1f      	ldr	r3, [pc, #124]	; (800c13c <svCLI_SetBypassFtn+0xc4>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]

		svExit = NULL;
 800c0c2:	4b22      	ldr	r3, [pc, #136]	; (800c14c <svCLI_SetBypassFtn+0xd4>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
		sbEnter = FALSE;
 800c0c8:	4b21      	ldr	r3, [pc, #132]	; (800c150 <svCLI_SetBypassFtn+0xd8>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
		
		scntCLIString = 0;	// Clean Up Char
 800c0ce:	4b21      	ldr	r3, [pc, #132]	; (800c154 <svCLI_SetBypassFtn+0xdc>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	601a      	str	r2, [r3, #0]
		// clean up line string
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e007      	b.n	800c0ea <svCLI_SetBypassFtn+0x72>
			szCLIString[i] = '\0';
 800c0da:	4a1f      	ldr	r2, [pc, #124]	; (800c158 <svCLI_SetBypassFtn+0xe0>)
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	4413      	add	r3, r2
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	617b      	str	r3, [r7, #20]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c0ee:	ddf4      	ble.n	800c0da <svCLI_SetBypassFtn+0x62>
		}
		svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 800c0f0:	4913      	ldr	r1, [pc, #76]	; (800c140 <svCLI_SetBypassFtn+0xc8>)
 800c0f2:	481a      	ldr	r0, [pc, #104]	; (800c15c <svCLI_SetBypassFtn+0xe4>)
 800c0f4:	f7ff fc0a 	bl	800b90c <svCLI_Printf>

		if (svCommit) {
 800c0f8:	4b19      	ldr	r3, [pc, #100]	; (800c160 <svCLI_SetBypassFtn+0xe8>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d01a      	beq.n	800c136 <svCLI_SetBypassFtn+0xbe>
			svCommit();
 800c100:	4b17      	ldr	r3, [pc, #92]	; (800c160 <svCLI_SetBypassFtn+0xe8>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4798      	blx	r3
		if (svCommit) {
 800c106:	e016      	b.n	800c136 <svCLI_SetBypassFtn+0xbe>
		}
	}
	else {
		strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 800c108:	2209      	movs	r2, #9
 800c10a:	68b9      	ldr	r1, [r7, #8]
 800c10c:	480c      	ldr	r0, [pc, #48]	; (800c140 <svCLI_SetBypassFtn+0xc8>)
 800c10e:	f002 ff01 	bl	800ef14 <strncpy>
		snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 800c112:	480b      	ldr	r0, [pc, #44]	; (800c140 <svCLI_SetBypassFtn+0xc8>)
 800c114:	f7f4 f8c6 	bl	80002a4 <strlen>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b0a      	ldr	r3, [pc, #40]	; (800c148 <svCLI_SetBypassFtn+0xd0>)
 800c11e:	601a      	str	r2, [r3, #0]
		svBypass = pfnBypass;
 800c120:	4a06      	ldr	r2, [pc, #24]	; (800c13c <svCLI_SetBypassFtn+0xc4>)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6013      	str	r3, [r2, #0]
		svExit = szExit;
 800c126:	4a09      	ldr	r2, [pc, #36]	; (800c14c <svCLI_SetBypassFtn+0xd4>)
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	7013      	strb	r3, [r2, #0]
		sbEnter = bEnter;
 800c12c:	4a08      	ldr	r2, [pc, #32]	; (800c150 <svCLI_SetBypassFtn+0xd8>)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	e000      	b.n	800c136 <svCLI_SetBypassFtn+0xbe>
			return;
 800c134:	bf00      	nop
	}
}
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	200008c8 	.word	0x200008c8
 800c140:	2000004c 	.word	0x2000004c
 800c144:	0800f868 	.word	0x0800f868
 800c148:	20000058 	.word	0x20000058
 800c14c:	200008cc 	.word	0x200008cc
 800c150:	200008d0 	.word	0x200008d0
 800c154:	200008b0 	.word	0x200008b0
 800c158:	200006a8 	.word	0x200006a8
 800c15c:	0800f938 	.word	0x0800f938
 800c160:	200008c4 	.word	0x200008c4

0800c164 <svCLI_Handler>:

void svCLI_Handler(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
	if (sbFirst) {
		svCLI_Printf("\r\n%s", szCLI_PROMPT);
		sbFirst = 0;
	}
#endif	
	if (svGetChar) {
 800c16a:	4b92      	ldr	r3, [pc, #584]	; (800c3b4 <svCLI_Handler+0x250>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 8114 	beq.w	800c39c <svCLI_Handler+0x238>
		char bSkipPrompt = 0;
 800c174:	2300      	movs	r3, #0
 800c176:	73fb      	strb	r3, [r7, #15]
		char szChar = svGetChar();
 800c178:	4b8e      	ldr	r3, [pc, #568]	; (800c3b4 <svCLI_Handler+0x250>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4798      	blx	r3
 800c17e:	4603      	mov	r3, r0
 800c180:	71fb      	strb	r3, [r7, #7]
		if ((szChar != 0) && (szChar != '\n')) {
 800c182:	79fb      	ldrb	r3, [r7, #7]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 8109 	beq.w	800c39c <svCLI_Handler+0x238>
 800c18a:	79fb      	ldrb	r3, [r7, #7]
 800c18c:	2b0a      	cmp	r3, #10
 800c18e:	f000 8105 	beq.w	800c39c <svCLI_Handler+0x238>
			if (szChar == '\r') {
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	2b0d      	cmp	r3, #13
 800c196:	d154      	bne.n	800c242 <svCLI_Handler+0xde>
				sbInEsc = 0;
 800c198:	4b87      	ldr	r3, [pc, #540]	; (800c3b8 <svCLI_Handler+0x254>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	701a      	strb	r2, [r3, #0]
				svCLI_Printf("\r\n");
 800c19e:	4887      	ldr	r0, [pc, #540]	; (800c3bc <svCLI_Handler+0x258>)
 800c1a0:	f7ff fbb4 	bl	800b90c <svCLI_Printf>
				if (scntCLIString > 0) {
 800c1a4:	4b86      	ldr	r3, [pc, #536]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d031      	beq.n	800c210 <svCLI_Handler+0xac>
					// Parse and Execute
					szCLIString[scntCLIString] = '\0';	// NULL Termination
 800c1ac:	4b84      	ldr	r3, [pc, #528]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a84      	ldr	r2, [pc, #528]	; (800c3c4 <svCLI_Handler+0x260>)
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	54d1      	strb	r1, [r2, r3]
					// Save to history Buffer
					svCLIHandleHistory(CLI_HISTORY_ADD);					
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	f7ff fd6c 	bl	800bc94 <svCLIHandleHistory>
					// Call Parser
					if (svBypass) {	// hellosmk 210225 added
 800c1bc:	4b82      	ldr	r3, [pc, #520]	; (800c3c8 <svCLI_Handler+0x264>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d011      	beq.n	800c1e8 <svCLI_Handler+0x84>
						bSkipPrompt = 1;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	73fb      	strb	r3, [r7, #15]
						szCLIString[scntCLIString] = '\r';
 800c1c8:	4b7d      	ldr	r3, [pc, #500]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a7d      	ldr	r2, [pc, #500]	; (800c3c4 <svCLI_Handler+0x260>)
 800c1ce:	210d      	movs	r1, #13
 800c1d0:	54d1      	strb	r1, [r2, r3]
						szCLIString[scntCLIString+1] = '\0';
 800c1d2:	4b7b      	ldr	r3, [pc, #492]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	4a7a      	ldr	r2, [pc, #488]	; (800c3c4 <svCLI_Handler+0x260>)
 800c1da:	2100      	movs	r1, #0
 800c1dc:	54d1      	strb	r1, [r2, r3]
						svBypass(szCLIString);
 800c1de:	4b7a      	ldr	r3, [pc, #488]	; (800c3c8 <svCLI_Handler+0x264>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4878      	ldr	r0, [pc, #480]	; (800c3c4 <svCLI_Handler+0x260>)
 800c1e4:	4798      	blx	r3
 800c1e6:	e001      	b.n	800c1ec <svCLI_Handler+0x88>
					}
					else {
						svCLI_ParsenExecute();
 800c1e8:	f7ff feb4 	bl	800bf54 <svCLI_ParsenExecute>
					}
					scntCLIString = 0;	// Clean Up Char
 800c1ec:	4b74      	ldr	r3, [pc, #464]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	601a      	str	r2, [r3, #0]
					// clean up line string
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60bb      	str	r3, [r7, #8]
 800c1f6:	e007      	b.n	800c208 <svCLI_Handler+0xa4>
						szCLIString[i] = '\0';
 800c1f8:	4a72      	ldr	r2, [pc, #456]	; (800c3c4 <svCLI_Handler+0x260>)
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	2200      	movs	r2, #0
 800c200:	701a      	strb	r2, [r3, #0]
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	3301      	adds	r3, #1
 800c206:	60bb      	str	r3, [r7, #8]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b7f      	cmp	r3, #127	; 0x7f
 800c20c:	ddf4      	ble.n	800c1f8 <svCLI_Handler+0x94>
 800c20e:	e010      	b.n	800c232 <svCLI_Handler+0xce>
					}
				}
				else if (sbEnter && svBypass) {
 800c210:	4b6e      	ldr	r3, [pc, #440]	; (800c3cc <svCLI_Handler+0x268>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00c      	beq.n	800c232 <svCLI_Handler+0xce>
 800c218:	4b6b      	ldr	r3, [pc, #428]	; (800c3c8 <svCLI_Handler+0x264>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d008      	beq.n	800c232 <svCLI_Handler+0xce>
					const char cszRet[2] = {'\n',0};
 800c220:	230a      	movs	r3, #10
 800c222:	80bb      	strh	r3, [r7, #4]
					svBypass((char*)cszRet);
 800c224:	4b68      	ldr	r3, [pc, #416]	; (800c3c8 <svCLI_Handler+0x264>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	1d3a      	adds	r2, r7, #4
 800c22a:	4610      	mov	r0, r2
 800c22c:	4798      	blx	r3
					bSkipPrompt = 1;
 800c22e:	2301      	movs	r3, #1
 800c230:	73fb      	strb	r3, [r7, #15]
				}
				
				if (bSkipPrompt == 0) {
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	2b00      	cmp	r3, #0
 800c236:	f040 80b1 	bne.w	800c39c <svCLI_Handler+0x238>
					svCLI_Printf(szCLI_PROMPT);
 800c23a:	4865      	ldr	r0, [pc, #404]	; (800c3d0 <svCLI_Handler+0x26c>)
 800c23c:	f7ff fb66 	bl	800b90c <svCLI_Printf>
 800c240:	e0ac      	b.n	800c39c <svCLI_Handler+0x238>
				}
			}
			else if (svBypass && (szChar == svExit)) {
 800c242:	4b61      	ldr	r3, [pc, #388]	; (800c3c8 <svCLI_Handler+0x264>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d019      	beq.n	800c27e <svCLI_Handler+0x11a>
 800c24a:	4b62      	ldr	r3, [pc, #392]	; (800c3d4 <svCLI_Handler+0x270>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	79fa      	ldrb	r2, [r7, #7]
 800c250:	429a      	cmp	r2, r3
 800c252:	d114      	bne.n	800c27e <svCLI_Handler+0x11a>
				// Exit Bypass mode
				if (0x11 == svExit) {
 800c254:	4b5f      	ldr	r3, [pc, #380]	; (800c3d4 <svCLI_Handler+0x270>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b11      	cmp	r3, #17
 800c25a:	d102      	bne.n	800c262 <svCLI_Handler+0xfe>
					svCLI_Printf("^Q");
 800c25c:	485e      	ldr	r0, [pc, #376]	; (800c3d8 <svCLI_Handler+0x274>)
 800c25e:	f7ff fb55 	bl	800b90c <svCLI_Printf>
				}
				svBypass(NULL);	// Notify Exit !!
 800c262:	4b59      	ldr	r3, [pc, #356]	; (800c3c8 <svCLI_Handler+0x264>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2000      	movs	r0, #0
 800c268:	4798      	blx	r3
				svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 800c26a:	2300      	movs	r3, #0
 800c26c:	2200      	movs	r2, #0
 800c26e:	2100      	movs	r1, #0
 800c270:	2000      	movs	r0, #0
 800c272:	f7ff ff01 	bl	800c078 <svCLI_SetBypassFtn>
				sbInEsc = 0;
 800c276:	4b50      	ldr	r3, [pc, #320]	; (800c3b8 <svCLI_Handler+0x254>)
 800c278:	2200      	movs	r2, #0
 800c27a:	701a      	strb	r2, [r3, #0]
 800c27c:	e08e      	b.n	800c39c <svCLI_Handler+0x238>
			}
			else if (svBypass && (szChar == 0X1A)) {		// Ctrl+Z
 800c27e:	4b52      	ldr	r3, [pc, #328]	; (800c3c8 <svCLI_Handler+0x264>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d014      	beq.n	800c2b0 <svCLI_Handler+0x14c>
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	2b1a      	cmp	r3, #26
 800c28a:	d111      	bne.n	800c2b0 <svCLI_Handler+0x14c>
				bSkipPrompt = 1;
 800c28c:	2301      	movs	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
				szCLIString[scntCLIString] = 0X1A;	//Ctrl+z
 800c290:	4b4b      	ldr	r3, [pc, #300]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a4b      	ldr	r2, [pc, #300]	; (800c3c4 <svCLI_Handler+0x260>)
 800c296:	211a      	movs	r1, #26
 800c298:	54d1      	strb	r1, [r2, r3]
				szCLIString[scntCLIString+1] = '\0';	// NULL Termination
 800c29a:	4b49      	ldr	r3, [pc, #292]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	4a48      	ldr	r2, [pc, #288]	; (800c3c4 <svCLI_Handler+0x260>)
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	54d1      	strb	r1, [r2, r3]
				svBypass(szCLIString);
 800c2a6:	4b48      	ldr	r3, [pc, #288]	; (800c3c8 <svCLI_Handler+0x264>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4846      	ldr	r0, [pc, #280]	; (800c3c4 <svCLI_Handler+0x260>)
 800c2ac:	4798      	blx	r3
 800c2ae:	e075      	b.n	800c39c <svCLI_Handler+0x238>
			}
			else {
				if (szChar == '\b')	{ // Back space
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	2b08      	cmp	r3, #8
 800c2b4:	d118      	bne.n	800c2e8 <svCLI_Handler+0x184>
					sbInEsc = 0;
 800c2b6:	4b40      	ldr	r3, [pc, #256]	; (800c3b8 <svCLI_Handler+0x254>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
					if (scntCLIString > 0) {
 800c2bc:	4b40      	ldr	r3, [pc, #256]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d06b      	beq.n	800c39c <svCLI_Handler+0x238>
						_svClearLine();
 800c2c4:	f7ff fcb0 	bl	800bc28 <_svClearLine>
						scntCLIString--;
 800c2c8:	4b3d      	ldr	r3, [pc, #244]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	4a3c      	ldr	r2, [pc, #240]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c2d0:	6013      	str	r3, [r2, #0]
						szCLIString[scntCLIString] = '\0';	// NULL Termination
 800c2d2:	4b3b      	ldr	r3, [pc, #236]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a3b      	ldr	r2, [pc, #236]	; (800c3c4 <svCLI_Handler+0x260>)
 800c2d8:	2100      	movs	r1, #0
 800c2da:	54d1      	strb	r1, [r2, r3]
						svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 800c2dc:	4a39      	ldr	r2, [pc, #228]	; (800c3c4 <svCLI_Handler+0x260>)
 800c2de:	493c      	ldr	r1, [pc, #240]	; (800c3d0 <svCLI_Handler+0x26c>)
 800c2e0:	483e      	ldr	r0, [pc, #248]	; (800c3dc <svCLI_Handler+0x278>)
 800c2e2:	f7ff fb13 	bl	800b90c <svCLI_Printf>
 800c2e6:	e059      	b.n	800c39c <svCLI_Handler+0x238>
					}
				}
				else if (szChar == '[') {	// ESC sequence started
 800c2e8:	79fb      	ldrb	r3, [r7, #7]
 800c2ea:	2b5b      	cmp	r3, #91	; 0x5b
 800c2ec:	d103      	bne.n	800c2f6 <svCLI_Handler+0x192>
					sbInEsc = 1;
 800c2ee:	4b32      	ldr	r3, [pc, #200]	; (800c3b8 <svCLI_Handler+0x254>)
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	701a      	strb	r2, [r3, #0]
 800c2f4:	e052      	b.n	800c39c <svCLI_Handler+0x238>
				}
				else if (_isPrintable(szChar)) {
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fbe5 	bl	800bac8 <_isPrintable>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d04b      	beq.n	800c39c <svCLI_Handler+0x238>
					if (sbInEsc) {
 800c304:	4b2c      	ldr	r3, [pc, #176]	; (800c3b8 <svCLI_Handler+0x254>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d036      	beq.n	800c37a <svCLI_Handler+0x216>
						sbInEsc = 0;
 800c30c:	4b2a      	ldr	r3, [pc, #168]	; (800c3b8 <svCLI_Handler+0x254>)
 800c30e:	2200      	movs	r2, #0
 800c310:	701a      	strb	r2, [r3, #0]
						if (snCLIHistoryCount > 0) {
 800c312:	4b33      	ldr	r3, [pc, #204]	; (800c3e0 <svCLI_Handler+0x27c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	dd27      	ble.n	800c36a <svCLI_Handler+0x206>
							switch (szChar) {
 800c31a:	79fb      	ldrb	r3, [r7, #7]
 800c31c:	2b41      	cmp	r3, #65	; 0x41
 800c31e:	d002      	beq.n	800c326 <svCLI_Handler+0x1c2>
 800c320:	2b42      	cmp	r3, #66	; 0x42
 800c322:	d011      	beq.n	800c348 <svCLI_Handler+0x1e4>
									// echo back
									scntCLIString = svCLI_Printf("%s", szCLIString);
									// echo back
									break;
								default:	// Do Nothing
									break;
 800c324:	e021      	b.n	800c36a <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_PREV);
 800c326:	2002      	movs	r0, #2
 800c328:	f7ff fcb4 	bl	800bc94 <svCLIHandleHistory>
									_svClearLine();
 800c32c:	f7ff fc7c 	bl	800bc28 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800c330:	4827      	ldr	r0, [pc, #156]	; (800c3d0 <svCLI_Handler+0x26c>)
 800c332:	f7ff faeb 	bl	800b90c <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800c336:	4923      	ldr	r1, [pc, #140]	; (800c3c4 <svCLI_Handler+0x260>)
 800c338:	482a      	ldr	r0, [pc, #168]	; (800c3e4 <svCLI_Handler+0x280>)
 800c33a:	f7ff fae7 	bl	800b90c <svCLI_Printf>
 800c33e:	4603      	mov	r3, r0
 800c340:	461a      	mov	r2, r3
 800c342:	4b1f      	ldr	r3, [pc, #124]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c344:	601a      	str	r2, [r3, #0]
									break;
 800c346:	e010      	b.n	800c36a <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_NEXT);
 800c348:	2001      	movs	r0, #1
 800c34a:	f7ff fca3 	bl	800bc94 <svCLIHandleHistory>
									_svClearLine();
 800c34e:	f7ff fc6b 	bl	800bc28 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800c352:	481f      	ldr	r0, [pc, #124]	; (800c3d0 <svCLI_Handler+0x26c>)
 800c354:	f7ff fada 	bl	800b90c <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800c358:	491a      	ldr	r1, [pc, #104]	; (800c3c4 <svCLI_Handler+0x260>)
 800c35a:	4822      	ldr	r0, [pc, #136]	; (800c3e4 <svCLI_Handler+0x280>)
 800c35c:	f7ff fad6 	bl	800b90c <svCLI_Printf>
 800c360:	4603      	mov	r3, r0
 800c362:	461a      	mov	r2, r3
 800c364:	4b16      	ldr	r3, [pc, #88]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c366:	601a      	str	r2, [r3, #0]
									break;
 800c368:	bf00      	nop
							}
						}
						if (svCommit) {
 800c36a:	4b1f      	ldr	r3, [pc, #124]	; (800c3e8 <svCLI_Handler+0x284>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d01c      	beq.n	800c3ac <svCLI_Handler+0x248>
							svCommit();
 800c372:	4b1d      	ldr	r3, [pc, #116]	; (800c3e8 <svCLI_Handler+0x284>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4798      	blx	r3
						}
						return;
 800c378:	e018      	b.n	800c3ac <svCLI_Handler+0x248>
					}
					if (scntCLIString < (MAX_CLI_CHARS-1)) {
 800c37a:	4b11      	ldr	r3, [pc, #68]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b7e      	cmp	r3, #126	; 0x7e
 800c380:	d80c      	bhi.n	800c39c <svCLI_Handler+0x238>
						// echo back
						svPutChar(szChar);
 800c382:	4b1a      	ldr	r3, [pc, #104]	; (800c3ec <svCLI_Handler+0x288>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	79fa      	ldrb	r2, [r7, #7]
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
						szCLIString[scntCLIString++] = szChar;
 800c38c:	4b0c      	ldr	r3, [pc, #48]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	490b      	ldr	r1, [pc, #44]	; (800c3c0 <svCLI_Handler+0x25c>)
 800c394:	600a      	str	r2, [r1, #0]
 800c396:	490b      	ldr	r1, [pc, #44]	; (800c3c4 <svCLI_Handler+0x260>)
 800c398:	79fa      	ldrb	r2, [r7, #7]
 800c39a:	54ca      	strb	r2, [r1, r3]
					}
				}
			}
		}
	}
	if (svCommit) {
 800c39c:	4b12      	ldr	r3, [pc, #72]	; (800c3e8 <svCLI_Handler+0x284>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d004      	beq.n	800c3ae <svCLI_Handler+0x24a>
		svCommit();
 800c3a4:	4b10      	ldr	r3, [pc, #64]	; (800c3e8 <svCLI_Handler+0x284>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4798      	blx	r3
 800c3aa:	e000      	b.n	800c3ae <svCLI_Handler+0x24a>
						return;
 800c3ac:	bf00      	nop
	}
}
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	200008bc 	.word	0x200008bc
 800c3b8:	200009d4 	.word	0x200009d4
 800c3bc:	0800f87c 	.word	0x0800f87c
 800c3c0:	200008b0 	.word	0x200008b0
 800c3c4:	200006a8 	.word	0x200006a8
 800c3c8:	200008c8 	.word	0x200008c8
 800c3cc:	200008d0 	.word	0x200008d0
 800c3d0:	2000004c 	.word	0x2000004c
 800c3d4:	200008cc 	.word	0x200008cc
 800c3d8:	0800f950 	.word	0x0800f950
 800c3dc:	0800f954 	.word	0x0800f954
 800c3e0:	200008a8 	.word	0x200008a8
 800c3e4:	0800f95c 	.word	0x0800f95c
 800c3e8:	200008c4 	.word	0x200008c4
 800c3ec:	200008c0 	.word	0x200008c0

0800c3f0 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	603b      	str	r3, [r7, #0]
	svCLI_ShowHelp();
 800c3fe:	f7ff fab1 	bl	800b964 <svCLI_ShowHelp>
}
 800c402:	bf00      	nop
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b085      	sub	sp, #20
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	429a      	cmp	r2, r3
 800c424:	d303      	bcc.n	800c42e <svRingBuffer_GetCount+0x24>
	  return (h - t);
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	e009      	b.n	800c442 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68da      	ldr	r2, [r3, #12]
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	461a      	mov	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	441a      	add	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	1ad3      	subs	r3, r2, r3
}
 800c442:	4618      	mov	r0, r3
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	609a      	str	r2, [r3, #8]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	689a      	ldr	r2, [r3, #8]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	619a      	str	r2, [r3, #24]
}
 800c472:	bf00      	nop
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 800c47e:	b480      	push	{r7}
 800c480:	b085      	sub	sp, #20
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	460b      	mov	r3, r1
 800c488:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	78fa      	ldrb	r2, [r7, #3]
 800c494:	701a      	strb	r2, [r3, #0]
	rb->head++;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d109      	bne.n	800c4c0 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	619a      	str	r2, [r3, #24]
		nRet = -1;
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c4be:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d105      	bne.n	800c4d8 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	615a      	str	r2, [r3, #20]
		nRet = -2;
 800c4d2:	f06f 0301 	mvn.w	r3, #1
 800c4d6:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b085      	sub	sp, #20
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	1c5a      	adds	r2, r3, #1
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d103      	bne.n	800c514 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	609a      	str	r2, [r3, #8]
	return byData;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
	...

0800c524 <__NVIC_SetPriority>:
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c534:	2b00      	cmp	r3, #0
 800c536:	db0a      	blt.n	800c54e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	490c      	ldr	r1, [pc, #48]	; (800c570 <__NVIC_SetPriority+0x4c>)
 800c53e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c542:	0112      	lsls	r2, r2, #4
 800c544:	b2d2      	uxtb	r2, r2
 800c546:	440b      	add	r3, r1
 800c548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c54c:	e00a      	b.n	800c564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	b2da      	uxtb	r2, r3
 800c552:	4908      	ldr	r1, [pc, #32]	; (800c574 <__NVIC_SetPriority+0x50>)
 800c554:	88fb      	ldrh	r3, [r7, #6]
 800c556:	f003 030f 	and.w	r3, r3, #15
 800c55a:	3b04      	subs	r3, #4
 800c55c:	0112      	lsls	r2, r2, #4
 800c55e:	b2d2      	uxtb	r2, r2
 800c560:	440b      	add	r3, r1
 800c562:	761a      	strb	r2, [r3, #24]
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	e000e100 	.word	0xe000e100
 800c574:	e000ed00 	.word	0xe000ed00

0800c578 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800c57c:	4b05      	ldr	r3, [pc, #20]	; (800c594 <SysTick_Handler+0x1c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c580:	f001 fb8c 	bl	800dc9c <xTaskGetSchedulerState>
 800c584:	4603      	mov	r3, r0
 800c586:	2b01      	cmp	r3, #1
 800c588:	d001      	beq.n	800c58e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c58a:	f001 ff2f 	bl	800e3ec <xPortSysTickHandler>
  }
}
 800c58e:	bf00      	nop
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	e000e010 	.word	0xe000e010

0800c598 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800c59c:	2100      	movs	r1, #0
 800c59e:	f06f 0004 	mvn.w	r0, #4
 800c5a2:	f7ff ffbf 	bl	800c524 <__NVIC_SetPriority>
#endif
}
 800c5a6:	bf00      	nop
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b086      	sub	sp, #24
 800c5ae:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b4:	f3ef 8305 	mrs	r3, IPSR
 800c5b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5ba:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	617b      	str	r3, [r7, #20]
 800c5c4:	e013      	b.n	800c5ee <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800c5c6:	f001 fb69 	bl	800dc9c <xTaskGetSchedulerState>
 800c5ca:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d00d      	beq.n	800c5ee <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c5d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c5d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d105      	bne.n	800c5ea <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c5de:	f3ef 8311 	mrs	r3, BASEPRI
 800c5e2:	607b      	str	r3, [r7, #4]
  return(result);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800c5ee:	697b      	ldr	r3, [r7, #20]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800c5fe:	f7ff ffd4 	bl	800c5aa <IRQ_Context>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800c608:	f06f 0305 	mvn.w	r3, #5
 800c60c:	607b      	str	r3, [r7, #4]
 800c60e:	e012      	b.n	800c636 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800c610:	f001 fb44 	bl	800dc9c <xTaskGetSchedulerState>
 800c614:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d109      	bne.n	800c630 <osKernelInitialize+0x38>
 800c61c:	4b08      	ldr	r3, [pc, #32]	; (800c640 <osKernelInitialize+0x48>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d105      	bne.n	800c630 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c624:	4b06      	ldr	r3, [pc, #24]	; (800c640 <osKernelInitialize+0x48>)
 800c626:	2201      	movs	r2, #1
 800c628:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	607b      	str	r3, [r7, #4]
 800c62e:	e002      	b.n	800c636 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800c630:	f04f 33ff 	mov.w	r3, #4294967295
 800c634:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800c636:	687b      	ldr	r3, [r7, #4]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	200009d8 	.word	0x200009d8

0800c644 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800c64a:	f7ff ffae 	bl	800c5aa <IRQ_Context>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <osKernelStart+0x18>
    stat = osErrorISR;
 800c654:	f06f 0305 	mvn.w	r3, #5
 800c658:	607b      	str	r3, [r7, #4]
 800c65a:	e016      	b.n	800c68a <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800c65c:	f001 fb1e 	bl	800dc9c <xTaskGetSchedulerState>
 800c660:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d10d      	bne.n	800c684 <osKernelStart+0x40>
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <osKernelStart+0x50>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d109      	bne.n	800c684 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c670:	f7ff ff92 	bl	800c598 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800c674:	4b07      	ldr	r3, [pc, #28]	; (800c694 <osKernelStart+0x50>)
 800c676:	2202      	movs	r2, #2
 800c678:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c67a:	f000 fde5 	bl	800d248 <vTaskStartScheduler>
      stat = osOK;
 800c67e:	2300      	movs	r3, #0
 800c680:	607b      	str	r3, [r7, #4]
 800c682:	e002      	b.n	800c68a <osKernelStart+0x46>
    } else {
      stat = osError;
 800c684:	f04f 33ff 	mov.w	r3, #4294967295
 800c688:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800c68a:	687b      	ldr	r3, [r7, #4]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	200009d8 	.word	0x200009d8

0800c698 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08e      	sub	sp, #56	; 0x38
 800c69c:	af04      	add	r7, sp, #16
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800c6a8:	f7ff ff7f 	bl	800c5aa <IRQ_Context>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d17e      	bne.n	800c7b0 <osThreadNew+0x118>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d07b      	beq.n	800c7b0 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800c6b8:	2380      	movs	r3, #128	; 0x80
 800c6ba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c6bc:	2318      	movs	r3, #24
 800c6be:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d045      	beq.n	800c75c <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <osThreadNew+0x46>
        name = attr->name;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d002      	beq.n	800c6ec <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d008      	beq.n	800c704 <osThreadNew+0x6c>
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	2b38      	cmp	r3, #56	; 0x38
 800c6f6:	d805      	bhi.n	800c704 <osThreadNew+0x6c>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800c704:	2300      	movs	r3, #0
 800c706:	e054      	b.n	800c7b2 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d003      	beq.n	800c718 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	695b      	ldr	r3, [r3, #20]
 800c714:	089b      	lsrs	r3, r3, #2
 800c716:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00e      	beq.n	800c73e <osThreadNew+0xa6>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	2b5b      	cmp	r3, #91	; 0x5b
 800c726:	d90a      	bls.n	800c73e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d006      	beq.n	800c73e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800c738:	2301      	movs	r3, #1
 800c73a:	61bb      	str	r3, [r7, #24]
 800c73c:	e010      	b.n	800c760 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10c      	bne.n	800c760 <osThreadNew+0xc8>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d108      	bne.n	800c760 <osThreadNew+0xc8>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d104      	bne.n	800c760 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	61bb      	str	r3, [r7, #24]
 800c75a:	e001      	b.n	800c760 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d110      	bne.n	800c788 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c76e:	9202      	str	r2, [sp, #8]
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	6a3a      	ldr	r2, [r7, #32]
 800c77a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 fb9b 	bl	800ceb8 <xTaskCreateStatic>
 800c782:	4603      	mov	r3, r0
 800c784:	617b      	str	r3, [r7, #20]
 800c786:	e013      	b.n	800c7b0 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d110      	bne.n	800c7b0 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	b29a      	uxth	r2, r3
 800c792:	f107 0314 	add.w	r3, r7, #20
 800c796:	9301      	str	r3, [sp, #4]
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f000 fbd3 	bl	800cf4c <xTaskCreate>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d001      	beq.n	800c7b0 <osThreadNew+0x118>
            hTask = NULL;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800c7b0:	697b      	ldr	r3, [r7, #20]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3728      	adds	r7, #40	; 0x28
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b084      	sub	sp, #16
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800c7c2:	f7ff fef2 	bl	800c5aa <IRQ_Context>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <osDelay+0x1a>
    stat = osErrorISR;
 800c7cc:	f06f 0305 	mvn.w	r3, #5
 800c7d0:	60fb      	str	r3, [r7, #12]
 800c7d2:	e007      	b.n	800c7e4 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d002      	beq.n	800c7e4 <osDelay+0x2a>
      vTaskDelay(ticks);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fd0e 	bl	800d200 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
	...

0800c7f0 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4a07      	ldr	r2, [pc, #28]	; (800c81c <vApplicationGetIdleTaskMemory+0x2c>)
 800c800:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4a06      	ldr	r2, [pc, #24]	; (800c820 <vApplicationGetIdleTaskMemory+0x30>)
 800c806:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2280      	movs	r2, #128	; 0x80
 800c80c:	601a      	str	r2, [r3, #0]
}
 800c80e:	bf00      	nop
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	200009dc 	.word	0x200009dc
 800c820:	20000a38 	.word	0x20000a38

0800c824 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4a07      	ldr	r2, [pc, #28]	; (800c850 <vApplicationGetTimerTaskMemory+0x2c>)
 800c834:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	4a06      	ldr	r2, [pc, #24]	; (800c854 <vApplicationGetTimerTaskMemory+0x30>)
 800c83a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2280      	movs	r2, #128	; 0x80
 800c840:	601a      	str	r2, [r3, #0]
}
 800c842:	bf00      	nop
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20000c38 	.word	0x20000c38
 800c854:	20000c94 	.word	0x20000c94

0800c858 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f103 0208 	add.w	r2, r3, #8
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f04f 32ff 	mov.w	r2, #4294967295
 800c870:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f103 0208 	add.w	r2, r3, #8
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f103 0208 	add.w	r2, r3, #8
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b085      	sub	sp, #20
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c8:	d103      	bne.n	800c8d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	e00c      	b.n	800c8ec <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	60fb      	str	r3, [r7, #12]
 800c8d8:	e002      	b.n	800c8e0 <vListInsert+0x2e>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d2f6      	bcs.n	800c8da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	685a      	ldr	r2, [r3, #4]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	601a      	str	r2, [r3, #0]
}
 800c918:	bf00      	nop
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	6892      	ldr	r2, [r2, #8]
 800c93a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	6852      	ldr	r2, [r2, #4]
 800c944:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d103      	bne.n	800c958 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	689a      	ldr	r2, [r3, #8]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	1e5a      	subs	r2, r3, #1
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c982:	2301      	movs	r3, #1
 800c984:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d102      	bne.n	800c996 <xQueueGenericReset+0x1e>
 800c990:	f001 fe3a 	bl	800e608 <ulSetInterruptMask>
 800c994:	e7fe      	b.n	800c994 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d057      	beq.n	800ca4c <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d053      	beq.n	800ca4c <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	fba3 2302 	umull	r2, r3, r3, r2
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d000      	beq.n	800c9b8 <xQueueGenericReset+0x40>
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d146      	bne.n	800ca4c <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800c9be:	f001 fce9 	bl	800e394 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9ce:	fb01 f303 	mul.w	r3, r1, r3
 800c9d2:	441a      	add	r2, r3
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	68b9      	ldr	r1, [r7, #8]
 800c9f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9f4:	fb01 f303 	mul.w	r3, r1, r3
 800c9f8:	441a      	add	r2, r3
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	22ff      	movs	r2, #255	; 0xff
 800ca02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	22ff      	movs	r2, #255	; 0xff
 800ca0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10e      	bne.n	800ca32 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d014      	beq.n	800ca46 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	3310      	adds	r3, #16
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 ff33 	bl	800d88c <xTaskRemoveFromEventList>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00c      	beq.n	800ca46 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ca2c:	f001 fca0 	bl	800e370 <vPortYield>
 800ca30:	e009      	b.n	800ca46 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	3310      	adds	r3, #16
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff ff0e 	bl	800c858 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	3324      	adds	r3, #36	; 0x24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7ff ff09 	bl	800c858 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800ca46:	f001 fcb7 	bl	800e3b8 <vPortExitCritical>
 800ca4a:	e001      	b.n	800ca50 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d102      	bne.n	800ca5c <xQueueGenericReset+0xe4>
 800ca56:	f001 fdd7 	bl	800e608 <ulSetInterruptMask>
 800ca5a:	e7fe      	b.n	800ca5a <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b088      	sub	sp, #32
 800ca6a:	af02      	add	r7, sp, #8
 800ca6c:	60f8      	str	r0, [r7, #12]
 800ca6e:	60b9      	str	r1, [r7, #8]
 800ca70:	607a      	str	r2, [r7, #4]
 800ca72:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d102      	bne.n	800ca84 <xQueueGenericCreateStatic+0x1e>
 800ca7e:	f001 fdc3 	bl	800e608 <ulSetInterruptMask>
 800ca82:	e7fe      	b.n	800ca82 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d028      	beq.n	800cadc <xQueueGenericCreateStatic+0x76>
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d025      	beq.n	800cadc <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d002      	beq.n	800ca9c <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d01f      	beq.n	800cadc <xQueueGenericCreateStatic+0x76>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d102      	bne.n	800caa8 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d119      	bne.n	800cadc <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800caa8:	2350      	movs	r3, #80	; 0x50
 800caaa:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	2b50      	cmp	r3, #80	; 0x50
 800cab0:	d002      	beq.n	800cab8 <xQueueGenericCreateStatic+0x52>
 800cab2:	f001 fda9 	bl	800e608 <ulSetInterruptMask>
 800cab6:	e7fe      	b.n	800cab6 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800cab8:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cac6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	4613      	mov	r3, r2
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	68b9      	ldr	r1, [r7, #8]
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 f80c 	bl	800caf2 <prvInitialiseNewQueue>
 800cada:	e005      	b.n	800cae8 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d102      	bne.n	800cae8 <xQueueGenericCreateStatic+0x82>
 800cae2:	f001 fd91 	bl	800e608 <ulSetInterruptMask>
 800cae6:	e7fe      	b.n	800cae6 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800cae8:	697b      	ldr	r3, [r7, #20]
    }
 800caea:	4618      	mov	r0, r3
 800caec:	3718      	adds	r7, #24
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	60b9      	str	r1, [r7, #8]
 800cafc:	607a      	str	r2, [r7, #4]
 800cafe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d103      	bne.n	800cb0e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	e002      	b.n	800cb14 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb20:	2101      	movs	r1, #1
 800cb22:	69b8      	ldr	r0, [r7, #24]
 800cb24:	f7ff ff28 	bl	800c978 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	78fa      	ldrb	r2, [r7, #3]
 800cb2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800cb30:	bf00      	nop
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08a      	sub	sp, #40	; 0x28
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d102      	bne.n	800cb58 <xQueueReceive+0x20>
 800cb52:	f001 fd59 	bl	800e608 <ulSetInterruptMask>
 800cb56:	e7fe      	b.n	800cb56 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d103      	bne.n	800cb66 <xQueueReceive+0x2e>
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <xQueueReceive+0x32>
 800cb66:	2301      	movs	r3, #1
 800cb68:	e000      	b.n	800cb6c <xQueueReceive+0x34>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d102      	bne.n	800cb76 <xQueueReceive+0x3e>
 800cb70:	f001 fd4a 	bl	800e608 <ulSetInterruptMask>
 800cb74:	e7fe      	b.n	800cb74 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb76:	f001 f891 	bl	800dc9c <xTaskGetSchedulerState>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d102      	bne.n	800cb86 <xQueueReceive+0x4e>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d101      	bne.n	800cb8a <xQueueReceive+0x52>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <xQueueReceive+0x54>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d102      	bne.n	800cb96 <xQueueReceive+0x5e>
 800cb90:	f001 fd3a 	bl	800e608 <ulSetInterruptMask>
 800cb94:	e7fe      	b.n	800cb94 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800cb96:	f001 fbfd 	bl	800e394 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9e:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d019      	beq.n	800cbda <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	6a38      	ldr	r0, [r7, #32]
 800cbaa:	f000 f87e 	bl	800ccaa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	1e5a      	subs	r2, r3, #1
 800cbb2:	6a3b      	ldr	r3, [r7, #32]
 800cbb4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbb6:	6a3b      	ldr	r3, [r7, #32]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	3310      	adds	r3, #16
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 fe62 	bl	800d88c <xTaskRemoveFromEventList>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cbce:	f001 fbcf 	bl	800e370 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cbd2:	f001 fbf1 	bl	800e3b8 <vPortExitCritical>
                return pdPASS;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e063      	b.n	800cca2 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d103      	bne.n	800cbe8 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800cbe0:	f001 fbea 	bl	800e3b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e05c      	b.n	800cca2 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d106      	bne.n	800cbfc <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cbee:	f107 0314 	add.w	r3, r7, #20
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 ff18 	bl	800da28 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cbfc:	f001 fbdc 	bl	800e3b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cc00:	f000 fb7c 	bl	800d2fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cc04:	f001 fbc6 	bl	800e394 <vPortEnterCritical>
 800cc08:	6a3b      	ldr	r3, [r7, #32]
 800cc0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc0e:	b25b      	sxtb	r3, r3
 800cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc14:	d103      	bne.n	800cc1e <xQueueReceive+0xe6>
 800cc16:	6a3b      	ldr	r3, [r7, #32]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc24:	b25b      	sxtb	r3, r3
 800cc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2a:	d103      	bne.n	800cc34 <xQueueReceive+0xfc>
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc34:	f001 fbc0 	bl	800e3b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc38:	1d3a      	adds	r2, r7, #4
 800cc3a:	f107 0314 	add.w	r3, r7, #20
 800cc3e:	4611      	mov	r1, r2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 ff07 	bl	800da54 <xTaskCheckForTimeOut>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d11d      	bne.n	800cc88 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc4c:	6a38      	ldr	r0, [r7, #32]
 800cc4e:	f000 f8a4 	bl	800cd9a <prvIsQueueEmpty>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d011      	beq.n	800cc7c <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	3324      	adds	r3, #36	; 0x24
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	4611      	mov	r1, r2
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 fdb9 	bl	800d7d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cc66:	6a38      	ldr	r0, [r7, #32]
 800cc68:	f000 f845 	bl	800ccf6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cc6c:	f000 fb54 	bl	800d318 <xTaskResumeAll>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d18f      	bne.n	800cb96 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800cc76:	f001 fb7b 	bl	800e370 <vPortYield>
 800cc7a:	e78c      	b.n	800cb96 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800cc7c:	6a38      	ldr	r0, [r7, #32]
 800cc7e:	f000 f83a 	bl	800ccf6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cc82:	f000 fb49 	bl	800d318 <xTaskResumeAll>
 800cc86:	e786      	b.n	800cb96 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800cc88:	6a38      	ldr	r0, [r7, #32]
 800cc8a:	f000 f834 	bl	800ccf6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cc8e:	f000 fb43 	bl	800d318 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc92:	6a38      	ldr	r0, [r7, #32]
 800cc94:	f000 f881 	bl	800cd9a <prvIsQueueEmpty>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f43f af7b 	beq.w	800cb96 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cca0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3728      	adds	r7, #40	; 0x28
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b082      	sub	sp, #8
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
 800ccb2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d018      	beq.n	800ccee <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68da      	ldr	r2, [r3, #12]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc4:	441a      	add	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68da      	ldr	r2, [r3, #12]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d303      	bcc.n	800ccde <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68d9      	ldr	r1, [r3, #12]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce6:	461a      	mov	r2, r3
 800cce8:	6838      	ldr	r0, [r7, #0]
 800ccea:	f002 f963 	bl	800efb4 <memcpy>
    }
}
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800ccfe:	f001 fb49 	bl	800e394 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd08:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd0a:	e011      	b.n	800cd30 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d012      	beq.n	800cd3a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3324      	adds	r3, #36	; 0x24
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 fdb7 	bl	800d88c <xTaskRemoveFromEventList>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800cd24:	f000 feec 	bl	800db00 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800cd28:	7bfb      	ldrb	r3, [r7, #15]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	dce9      	bgt.n	800cd0c <prvUnlockQueue+0x16>
 800cd38:	e000      	b.n	800cd3c <prvUnlockQueue+0x46>
                    break;
 800cd3a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	22ff      	movs	r2, #255	; 0xff
 800cd40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800cd44:	f001 fb38 	bl	800e3b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cd48:	f001 fb24 	bl	800e394 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd52:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd54:	e011      	b.n	800cd7a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d012      	beq.n	800cd84 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	3310      	adds	r3, #16
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 fd92 	bl	800d88c <xTaskRemoveFromEventList>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cd6e:	f000 fec7 	bl	800db00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cd72:	7bbb      	ldrb	r3, [r7, #14]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dce9      	bgt.n	800cd56 <prvUnlockQueue+0x60>
 800cd82:	e000      	b.n	800cd86 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cd84:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	22ff      	movs	r2, #255	; 0xff
 800cd8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800cd8e:	f001 fb13 	bl	800e3b8 <vPortExitCritical>
}
 800cd92:	bf00      	nop
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cda2:	f001 faf7 	bl	800e394 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d102      	bne.n	800cdb4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	e001      	b.n	800cdb8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cdb8:	f001 fafe 	bl	800e3b8 <vPortExitCritical>

    return xReturn;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
	...

0800cdc8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <vQueueAddToRegistry+0x1a>
 800cddc:	f001 fc14 	bl	800e608 <ulSetInterruptMask>
 800cde0:	e7fe      	b.n	800cde0 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d024      	beq.n	800ce32 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cde8:	2300      	movs	r3, #0
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	e01e      	b.n	800ce2c <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800cdee:	4a17      	ldr	r2, [pc, #92]	; (800ce4c <vQueueAddToRegistry+0x84>)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	4413      	add	r3, r2
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d105      	bne.n	800ce0a <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	00db      	lsls	r3, r3, #3
 800ce02:	4a12      	ldr	r2, [pc, #72]	; (800ce4c <vQueueAddToRegistry+0x84>)
 800ce04:	4413      	add	r3, r2
 800ce06:	60bb      	str	r3, [r7, #8]
                    break;
 800ce08:	e013      	b.n	800ce32 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10a      	bne.n	800ce26 <vQueueAddToRegistry+0x5e>
 800ce10:	4a0e      	ldr	r2, [pc, #56]	; (800ce4c <vQueueAddToRegistry+0x84>)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d104      	bne.n	800ce26 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	4a0a      	ldr	r2, [pc, #40]	; (800ce4c <vQueueAddToRegistry+0x84>)
 800ce22:	4413      	add	r3, r2
 800ce24:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b07      	cmp	r3, #7
 800ce30:	d9dd      	bls.n	800cdee <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800ce44:	bf00      	nop
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	20000e94 	.word	0x20000e94

0800ce50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800ce60:	f001 fa98 	bl	800e394 <vPortEnterCritical>
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce6a:	b25b      	sxtb	r3, r3
 800ce6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce70:	d103      	bne.n	800ce7a <vQueueWaitForMessageRestricted+0x2a>
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce80:	b25b      	sxtb	r3, r3
 800ce82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce86:	d103      	bne.n	800ce90 <vQueueWaitForMessageRestricted+0x40>
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce90:	f001 fa92 	bl	800e3b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d106      	bne.n	800ceaa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	3324      	adds	r3, #36	; 0x24
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 fcb3 	bl	800d810 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800ceaa:	6978      	ldr	r0, [r7, #20]
 800ceac:	f7ff ff23 	bl	800ccf6 <prvUnlockQueue>
    }
 800ceb0:	bf00      	nop
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08c      	sub	sp, #48	; 0x30
 800cebc:	af04      	add	r7, sp, #16
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <xTaskCreateStatic+0x1a>
 800cecc:	f001 fb9c 	bl	800e608 <ulSetInterruptMask>
 800ced0:	e7fe      	b.n	800ced0 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <xTaskCreateStatic+0x26>
 800ced8:	f001 fb96 	bl	800e608 <ulSetInterruptMask>
 800cedc:	e7fe      	b.n	800cedc <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800cede:	235c      	movs	r3, #92	; 0x5c
 800cee0:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	2b5c      	cmp	r3, #92	; 0x5c
 800cee6:	d002      	beq.n	800ceee <xTaskCreateStatic+0x36>
 800cee8:	f001 fb8e 	bl	800e608 <ulSetInterruptMask>
 800ceec:	e7fe      	b.n	800ceec <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ceee:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d023      	beq.n	800cf3e <xTaskCreateStatic+0x86>
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d020      	beq.n	800cf3e <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800cf00:	225c      	movs	r2, #92	; 0x5c
 800cf02:	2100      	movs	r1, #0
 800cf04:	69f8      	ldr	r0, [r7, #28]
 800cf06:	f001 fffd 	bl	800ef04 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf0e:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	2202      	movs	r2, #2
 800cf14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf18:	2300      	movs	r3, #0
 800cf1a:	9303      	str	r3, [sp, #12]
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	9302      	str	r3, [sp, #8]
 800cf20:	f107 0318 	add.w	r3, r7, #24
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf28:	9300      	str	r3, [sp, #0]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	68b9      	ldr	r1, [r7, #8]
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f000 f855 	bl	800cfe0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800cf36:	69f8      	ldr	r0, [r7, #28]
 800cf38:	f000 f8d2 	bl	800d0e0 <prvAddNewTaskToReadyList>
 800cf3c:	e001      	b.n	800cf42 <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800cf42:	69bb      	ldr	r3, [r7, #24]
    }
 800cf44:	4618      	mov	r0, r3
 800cf46:	3720      	adds	r7, #32
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08c      	sub	sp, #48	; 0x30
 800cf50:	af04      	add	r7, sp, #16
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	603b      	str	r3, [r7, #0]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf5c:	88fb      	ldrh	r3, [r7, #6]
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4618      	mov	r0, r3
 800cf62:	f001 fbb1 	bl	800e6c8 <pvPortMalloc>
 800cf66:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d013      	beq.n	800cf96 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf6e:	205c      	movs	r0, #92	; 0x5c
 800cf70:	f001 fbaa 	bl	800e6c8 <pvPortMalloc>
 800cf74:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d008      	beq.n	800cf8e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800cf7c:	225c      	movs	r2, #92	; 0x5c
 800cf7e:	2100      	movs	r1, #0
 800cf80:	69f8      	ldr	r0, [r7, #28]
 800cf82:	f001 ffbf 	bl	800ef04 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	631a      	str	r2, [r3, #48]	; 0x30
 800cf8c:	e005      	b.n	800cf9a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800cf8e:	6978      	ldr	r0, [r7, #20]
 800cf90:	f001 fc44 	bl	800e81c <vPortFree>
 800cf94:	e001      	b.n	800cf9a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800cf96:	2300      	movs	r3, #0
 800cf98:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d017      	beq.n	800cfd0 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfa8:	88fa      	ldrh	r2, [r7, #6]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	9303      	str	r3, [sp, #12]
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	9302      	str	r3, [sp, #8]
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68b9      	ldr	r1, [r7, #8]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f000 f80e 	bl	800cfe0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800cfc4:	69f8      	ldr	r0, [r7, #28]
 800cfc6:	f000 f88b 	bl	800d0e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	61bb      	str	r3, [r7, #24]
 800cfce:	e002      	b.n	800cfd6 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800cfd6:	69bb      	ldr	r3, [r7, #24]
    }
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3720      	adds	r7, #32
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	461a      	mov	r2, r3
 800cff8:	21a5      	movs	r1, #165	; 0xa5
 800cffa:	f001 ff83 	bl	800ef04 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d008:	3b01      	subs	r3, #1
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f023 0307 	bic.w	r3, r3, #7
 800d016:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	f003 0307 	and.w	r3, r3, #7
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <prvInitialiseNewTask+0x48>
 800d022:	f001 faf1 	bl	800e608 <ulSetInterruptMask>
 800d026:	e7fe      	b.n	800d026 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d01e      	beq.n	800d06c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d02e:	2300      	movs	r3, #0
 800d030:	617b      	str	r3, [r7, #20]
 800d032:	e012      	b.n	800d05a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	4413      	add	r3, r2
 800d03a:	7819      	ldrb	r1, [r3, #0]
 800d03c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	4413      	add	r3, r2
 800d042:	3334      	adds	r3, #52	; 0x34
 800d044:	460a      	mov	r2, r1
 800d046:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	4413      	add	r3, r2
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d006      	beq.n	800d062 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	3301      	adds	r3, #1
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2b0f      	cmp	r3, #15
 800d05e:	d9e9      	bls.n	800d034 <prvInitialiseNewTask+0x54>
 800d060:	e000      	b.n	800d064 <prvInitialiseNewTask+0x84>
            {
                break;
 800d062:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d066:	2200      	movs	r2, #0
 800d068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d06c:	6a3b      	ldr	r3, [r7, #32]
 800d06e:	2b37      	cmp	r3, #55	; 0x37
 800d070:	d902      	bls.n	800d078 <prvInitialiseNewTask+0x98>
 800d072:	f001 fac9 	bl	800e608 <ulSetInterruptMask>
 800d076:	e7fe      	b.n	800d076 <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	2b37      	cmp	r3, #55	; 0x37
 800d07c:	d901      	bls.n	800d082 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d07e:	2337      	movs	r3, #55	; 0x37
 800d080:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d084:	6a3a      	ldr	r2, [r7, #32]
 800d086:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	6a3a      	ldr	r2, [r7, #32]
 800d08c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	3304      	adds	r3, #4
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fc00 	bl	800c898 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	3318      	adds	r3, #24
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fbfb 	bl	800c898 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0a6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b6:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	6938      	ldr	r0, [r7, #16]
 800d0c2:	f001 f9c3 	bl	800e44c <pxPortInitialiseStack>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ca:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d002      	beq.n	800d0d8 <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0d6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d0d8:	bf00      	nop
 800d0da:	3718      	adds	r7, #24
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d0e8:	f001 f954 	bl	800e394 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d0ec:	4b3e      	ldr	r3, [pc, #248]	; (800d1e8 <prvAddNewTaskToReadyList+0x108>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	4a3d      	ldr	r2, [pc, #244]	; (800d1e8 <prvAddNewTaskToReadyList+0x108>)
 800d0f4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d0f6:	4b3d      	ldr	r3, [pc, #244]	; (800d1ec <prvAddNewTaskToReadyList+0x10c>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d109      	bne.n	800d112 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d0fe:	4a3b      	ldr	r2, [pc, #236]	; (800d1ec <prvAddNewTaskToReadyList+0x10c>)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d104:	4b38      	ldr	r3, [pc, #224]	; (800d1e8 <prvAddNewTaskToReadyList+0x108>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d110      	bne.n	800d12e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d10c:	f000 fd14 	bl	800db38 <prvInitialiseTaskLists>
 800d110:	e00d      	b.n	800d12e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d112:	4b37      	ldr	r3, [pc, #220]	; (800d1f0 <prvAddNewTaskToReadyList+0x110>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d109      	bne.n	800d12e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d11a:	4b34      	ldr	r3, [pc, #208]	; (800d1ec <prvAddNewTaskToReadyList+0x10c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d124:	429a      	cmp	r2, r3
 800d126:	d802      	bhi.n	800d12e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d128:	4a30      	ldr	r2, [pc, #192]	; (800d1ec <prvAddNewTaskToReadyList+0x10c>)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d12e:	4b31      	ldr	r3, [pc, #196]	; (800d1f4 <prvAddNewTaskToReadyList+0x114>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	4a2f      	ldr	r2, [pc, #188]	; (800d1f4 <prvAddNewTaskToReadyList+0x114>)
 800d136:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d138:	4b2e      	ldr	r3, [pc, #184]	; (800d1f4 <prvAddNewTaskToReadyList+0x114>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d144:	4b2c      	ldr	r3, [pc, #176]	; (800d1f8 <prvAddNewTaskToReadyList+0x118>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d903      	bls.n	800d154 <prvAddNewTaskToReadyList+0x74>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d150:	4a29      	ldr	r2, [pc, #164]	; (800d1f8 <prvAddNewTaskToReadyList+0x118>)
 800d152:	6013      	str	r3, [r2, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d158:	4928      	ldr	r1, [pc, #160]	; (800d1fc <prvAddNewTaskToReadyList+0x11c>)
 800d15a:	4613      	mov	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	440b      	add	r3, r1
 800d164:	3304      	adds	r3, #4
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	60fb      	str	r3, [r7, #12]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	609a      	str	r2, [r3, #8]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	689a      	ldr	r2, [r3, #8]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	60da      	str	r2, [r3, #12]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	3204      	adds	r2, #4
 800d180:	605a      	str	r2, [r3, #4]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	1d1a      	adds	r2, r3, #4
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	609a      	str	r2, [r3, #8]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18e:	4613      	mov	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4a19      	ldr	r2, [pc, #100]	; (800d1fc <prvAddNewTaskToReadyList+0x11c>)
 800d198:	441a      	add	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	615a      	str	r2, [r3, #20]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a2:	4916      	ldr	r1, [pc, #88]	; (800d1fc <prvAddNewTaskToReadyList+0x11c>)
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	440b      	add	r3, r1
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	1c59      	adds	r1, r3, #1
 800d1b2:	4812      	ldr	r0, [pc, #72]	; (800d1fc <prvAddNewTaskToReadyList+0x11c>)
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4403      	add	r3, r0
 800d1be:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d1c0:	f001 f8fa 	bl	800e3b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d1c4:	4b0a      	ldr	r3, [pc, #40]	; (800d1f0 <prvAddNewTaskToReadyList+0x110>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d008      	beq.n	800d1de <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1cc:	4b07      	ldr	r3, [pc, #28]	; (800d1ec <prvAddNewTaskToReadyList+0x10c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d201      	bcs.n	800d1de <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d1da:	f001 f8c9 	bl	800e370 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d1de:	bf00      	nop
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	200013a8 	.word	0x200013a8
 800d1ec:	20000ed4 	.word	0x20000ed4
 800d1f0:	200013b4 	.word	0x200013b4
 800d1f4:	200013c4 	.word	0x200013c4
 800d1f8:	200013b0 	.word	0x200013b0
 800d1fc:	20000ed8 	.word	0x20000ed8

0800d200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d208:	2300      	movs	r3, #0
 800d20a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00f      	beq.n	800d232 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800d212:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <vTaskDelay+0x44>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <vTaskDelay+0x20>
 800d21a:	f001 f9f5 	bl	800e608 <ulSetInterruptMask>
 800d21e:	e7fe      	b.n	800d21e <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d220:	f000 f86c 	bl	800d2fc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d224:	2100      	movs	r1, #0
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fd56 	bl	800dcd8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d22c:	f000 f874 	bl	800d318 <xTaskResumeAll>
 800d230:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800d238:	f001 f89a 	bl	800e370 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d23c:	bf00      	nop
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	200013d0 	.word	0x200013d0

0800d248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b088      	sub	sp, #32
 800d24c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d252:	2300      	movs	r3, #0
 800d254:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d256:	463a      	mov	r2, r7
 800d258:	1d39      	adds	r1, r7, #4
 800d25a:	f107 0308 	add.w	r3, r7, #8
 800d25e:	4618      	mov	r0, r3
 800d260:	f7ff fac6 	bl	800c7f0 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	9202      	str	r2, [sp, #8]
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	2300      	movs	r3, #0
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	2300      	movs	r3, #0
 800d274:	460a      	mov	r2, r1
 800d276:	491a      	ldr	r1, [pc, #104]	; (800d2e0 <vTaskStartScheduler+0x98>)
 800d278:	481a      	ldr	r0, [pc, #104]	; (800d2e4 <vTaskStartScheduler+0x9c>)
 800d27a:	f7ff fe1d 	bl	800ceb8 <xTaskCreateStatic>
 800d27e:	4603      	mov	r3, r0
 800d280:	4a19      	ldr	r2, [pc, #100]	; (800d2e8 <vTaskStartScheduler+0xa0>)
 800d282:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d284:	4b18      	ldr	r3, [pc, #96]	; (800d2e8 <vTaskStartScheduler+0xa0>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d28c:	2301      	movs	r3, #1
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e001      	b.n	800d296 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d292:	2300      	movs	r3, #0
 800d294:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d102      	bne.n	800d2a2 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d29c:	f000 fd8a 	bl	800ddb4 <xTimerCreateTimerTask>
 800d2a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d10e      	bne.n	800d2c6 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d2a8:	f001 f9ae 	bl	800e608 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d2ac:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <vTaskStartScheduler+0xa4>)
 800d2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d2b4:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <vTaskStartScheduler+0xa8>)
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2ba:	4b0e      	ldr	r3, [pc, #56]	; (800d2f4 <vTaskStartScheduler+0xac>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d2c0:	f001 f94e 	bl	800e560 <xPortStartScheduler>
 800d2c4:	e006      	b.n	800d2d4 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2cc:	d102      	bne.n	800d2d4 <vTaskStartScheduler+0x8c>
 800d2ce:	f001 f99b 	bl	800e608 <ulSetInterruptMask>
 800d2d2:	e7fe      	b.n	800d2d2 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d2d4:	4b08      	ldr	r3, [pc, #32]	; (800d2f8 <vTaskStartScheduler+0xb0>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
}
 800d2d8:	bf00      	nop
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	0800f97c 	.word	0x0800f97c
 800d2e4:	0800db19 	.word	0x0800db19
 800d2e8:	200013cc 	.word	0x200013cc
 800d2ec:	200013c8 	.word	0x200013c8
 800d2f0:	200013b4 	.word	0x200013b4
 800d2f4:	200013ac 	.word	0x200013ac
 800d2f8:	2000005c 	.word	0x2000005c

0800d2fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d300:	4b04      	ldr	r3, [pc, #16]	; (800d314 <vTaskSuspendAll+0x18>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	4a03      	ldr	r2, [pc, #12]	; (800d314 <vTaskSuspendAll+0x18>)
 800d308:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d30a:	bf00      	nop
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	200013d0 	.word	0x200013d0

0800d318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b086      	sub	sp, #24
 800d31c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d322:	2300      	movs	r3, #0
 800d324:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d326:	4b6a      	ldr	r3, [pc, #424]	; (800d4d0 <xTaskResumeAll+0x1b8>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d102      	bne.n	800d334 <xTaskResumeAll+0x1c>
 800d32e:	f001 f96b 	bl	800e608 <ulSetInterruptMask>
 800d332:	e7fe      	b.n	800d332 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d334:	f001 f82e 	bl	800e394 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d338:	4b65      	ldr	r3, [pc, #404]	; (800d4d0 <xTaskResumeAll+0x1b8>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	4a64      	ldr	r2, [pc, #400]	; (800d4d0 <xTaskResumeAll+0x1b8>)
 800d340:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d342:	4b63      	ldr	r3, [pc, #396]	; (800d4d0 <xTaskResumeAll+0x1b8>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	f040 80bb 	bne.w	800d4c2 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d34c:	4b61      	ldr	r3, [pc, #388]	; (800d4d4 <xTaskResumeAll+0x1bc>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	f000 80b6 	beq.w	800d4c2 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d356:	e08b      	b.n	800d470 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d358:	4b5f      	ldr	r3, [pc, #380]	; (800d4d8 <xTaskResumeAll+0x1c0>)
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d364:	60bb      	str	r3, [r7, #8]
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	69db      	ldr	r3, [r3, #28]
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	6a12      	ldr	r2, [r2, #32]
 800d36e:	609a      	str	r2, [r3, #8]
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	6a1b      	ldr	r3, [r3, #32]
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	69d2      	ldr	r2, [r2, #28]
 800d378:	605a      	str	r2, [r3, #4]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	685a      	ldr	r2, [r3, #4]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	3318      	adds	r3, #24
 800d382:	429a      	cmp	r2, r3
 800d384:	d103      	bne.n	800d38e <xTaskResumeAll+0x76>
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	6a1a      	ldr	r2, [r3, #32]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	605a      	str	r2, [r3, #4]
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	2200      	movs	r2, #0
 800d392:	629a      	str	r2, [r3, #40]	; 0x28
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	1e5a      	subs	r2, r3, #1
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	607b      	str	r3, [r7, #4]
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	697a      	ldr	r2, [r7, #20]
 800d3aa:	68d2      	ldr	r2, [r2, #12]
 800d3ac:	609a      	str	r2, [r3, #8]
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	6892      	ldr	r2, [r2, #8]
 800d3b6:	605a      	str	r2, [r3, #4]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d103      	bne.n	800d3cc <xTaskResumeAll+0xb4>
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	68da      	ldr	r2, [r3, #12]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	605a      	str	r2, [r3, #4]
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	615a      	str	r2, [r3, #20]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	1e5a      	subs	r2, r3, #1
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e0:	4b3e      	ldr	r3, [pc, #248]	; (800d4dc <xTaskResumeAll+0x1c4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d903      	bls.n	800d3f0 <xTaskResumeAll+0xd8>
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ec:	4a3b      	ldr	r2, [pc, #236]	; (800d4dc <xTaskResumeAll+0x1c4>)
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f4:	493a      	ldr	r1, [pc, #232]	; (800d4e0 <xTaskResumeAll+0x1c8>)
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4413      	add	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	440b      	add	r3, r1
 800d400:	3304      	adds	r3, #4
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	603b      	str	r3, [r7, #0]
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	609a      	str	r2, [r3, #8]
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	689a      	ldr	r2, [r3, #8]
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	60da      	str	r2, [r3, #12]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	697a      	ldr	r2, [r7, #20]
 800d41a:	3204      	adds	r2, #4
 800d41c:	605a      	str	r2, [r3, #4]
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	1d1a      	adds	r2, r3, #4
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	609a      	str	r2, [r3, #8]
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42a:	4613      	mov	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4413      	add	r3, r2
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	4a2b      	ldr	r2, [pc, #172]	; (800d4e0 <xTaskResumeAll+0x1c8>)
 800d434:	441a      	add	r2, r3
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	615a      	str	r2, [r3, #20]
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43e:	4928      	ldr	r1, [pc, #160]	; (800d4e0 <xTaskResumeAll+0x1c8>)
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	440b      	add	r3, r1
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	1c59      	adds	r1, r3, #1
 800d44e:	4824      	ldr	r0, [pc, #144]	; (800d4e0 <xTaskResumeAll+0x1c8>)
 800d450:	4613      	mov	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4403      	add	r3, r0
 800d45a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d460:	4b20      	ldr	r3, [pc, #128]	; (800d4e4 <xTaskResumeAll+0x1cc>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d466:	429a      	cmp	r2, r3
 800d468:	d302      	bcc.n	800d470 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800d46a:	4b1f      	ldr	r3, [pc, #124]	; (800d4e8 <xTaskResumeAll+0x1d0>)
 800d46c:	2201      	movs	r2, #1
 800d46e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d470:	4b19      	ldr	r3, [pc, #100]	; (800d4d8 <xTaskResumeAll+0x1c0>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	f47f af6f 	bne.w	800d358 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d480:	f000 fbf0 	bl	800dc64 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d484:	4b19      	ldr	r3, [pc, #100]	; (800d4ec <xTaskResumeAll+0x1d4>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d010      	beq.n	800d4b2 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d490:	f000 f83e 	bl	800d510 <xTaskIncrementTick>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800d49a:	4b13      	ldr	r3, [pc, #76]	; (800d4e8 <xTaskResumeAll+0x1d0>)
 800d49c:	2201      	movs	r2, #1
 800d49e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1f1      	bne.n	800d490 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800d4ac:	4b0f      	ldr	r3, [pc, #60]	; (800d4ec <xTaskResumeAll+0x1d4>)
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d4b2:	4b0d      	ldr	r3, [pc, #52]	; (800d4e8 <xTaskResumeAll+0x1d0>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d4be:	f000 ff57 	bl	800e370 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d4c2:	f000 ff79 	bl	800e3b8 <vPortExitCritical>

    return xAlreadyYielded;
 800d4c6:	693b      	ldr	r3, [r7, #16]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	200013d0 	.word	0x200013d0
 800d4d4:	200013a8 	.word	0x200013a8
 800d4d8:	20001368 	.word	0x20001368
 800d4dc:	200013b0 	.word	0x200013b0
 800d4e0:	20000ed8 	.word	0x20000ed8
 800d4e4:	20000ed4 	.word	0x20000ed4
 800d4e8:	200013bc 	.word	0x200013bc
 800d4ec:	200013b8 	.word	0x200013b8

0800d4f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d4f6:	4b05      	ldr	r3, [pc, #20]	; (800d50c <xTaskGetTickCount+0x1c>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d4fc:	687b      	ldr	r3, [r7, #4]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	370c      	adds	r7, #12
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	200013ac 	.word	0x200013ac

0800d510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b088      	sub	sp, #32
 800d514:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d516:	2300      	movs	r3, #0
 800d518:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d51a:	4b7a      	ldr	r3, [pc, #488]	; (800d704 <xTaskIncrementTick+0x1f4>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f040 80e5 	bne.w	800d6ee <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d524:	4b78      	ldr	r3, [pc, #480]	; (800d708 <xTaskIncrementTick+0x1f8>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3301      	adds	r3, #1
 800d52a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d52c:	4a76      	ldr	r2, [pc, #472]	; (800d708 <xTaskIncrementTick+0x1f8>)
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d118      	bne.n	800d56a <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800d538:	4b74      	ldr	r3, [pc, #464]	; (800d70c <xTaskIncrementTick+0x1fc>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <xTaskIncrementTick+0x38>
 800d542:	f001 f861 	bl	800e608 <ulSetInterruptMask>
 800d546:	e7fe      	b.n	800d546 <xTaskIncrementTick+0x36>
 800d548:	4b70      	ldr	r3, [pc, #448]	; (800d70c <xTaskIncrementTick+0x1fc>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	4b70      	ldr	r3, [pc, #448]	; (800d710 <xTaskIncrementTick+0x200>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a6e      	ldr	r2, [pc, #440]	; (800d70c <xTaskIncrementTick+0x1fc>)
 800d554:	6013      	str	r3, [r2, #0]
 800d556:	4a6e      	ldr	r2, [pc, #440]	; (800d710 <xTaskIncrementTick+0x200>)
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	4b6d      	ldr	r3, [pc, #436]	; (800d714 <xTaskIncrementTick+0x204>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	3301      	adds	r3, #1
 800d562:	4a6c      	ldr	r2, [pc, #432]	; (800d714 <xTaskIncrementTick+0x204>)
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	f000 fb7d 	bl	800dc64 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d56a:	4b6b      	ldr	r3, [pc, #428]	; (800d718 <xTaskIncrementTick+0x208>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	69ba      	ldr	r2, [r7, #24]
 800d570:	429a      	cmp	r2, r3
 800d572:	f0c0 80a7 	bcc.w	800d6c4 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d576:	4b65      	ldr	r3, [pc, #404]	; (800d70c <xTaskIncrementTick+0x1fc>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d104      	bne.n	800d58a <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d580:	4b65      	ldr	r3, [pc, #404]	; (800d718 <xTaskIncrementTick+0x208>)
 800d582:	f04f 32ff 	mov.w	r2, #4294967295
 800d586:	601a      	str	r2, [r3, #0]
                    break;
 800d588:	e09c      	b.n	800d6c4 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d58a:	4b60      	ldr	r3, [pc, #384]	; (800d70c <xTaskIncrementTick+0x1fc>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d59a:	69ba      	ldr	r2, [r7, #24]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d203      	bcs.n	800d5aa <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d5a2:	4a5d      	ldr	r2, [pc, #372]	; (800d718 <xTaskIncrementTick+0x208>)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d5a8:	e08c      	b.n	800d6c4 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	60bb      	str	r3, [r7, #8]
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	693a      	ldr	r2, [r7, #16]
 800d5b6:	68d2      	ldr	r2, [r2, #12]
 800d5b8:	609a      	str	r2, [r3, #8]
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	693a      	ldr	r2, [r7, #16]
 800d5c0:	6892      	ldr	r2, [r2, #8]
 800d5c2:	605a      	str	r2, [r3, #4]
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d103      	bne.n	800d5d8 <xTaskIncrementTick+0xc8>
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	68da      	ldr	r2, [r3, #12]
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	605a      	str	r2, [r3, #4]
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	615a      	str	r2, [r3, #20]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	1e5a      	subs	r2, r3, #1
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d01e      	beq.n	800d62e <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f4:	607b      	str	r3, [r7, #4]
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	69db      	ldr	r3, [r3, #28]
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	6a12      	ldr	r2, [r2, #32]
 800d5fe:	609a      	str	r2, [r3, #8]
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	6a1b      	ldr	r3, [r3, #32]
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	69d2      	ldr	r2, [r2, #28]
 800d608:	605a      	str	r2, [r3, #4]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	3318      	adds	r3, #24
 800d612:	429a      	cmp	r2, r3
 800d614:	d103      	bne.n	800d61e <xTaskIncrementTick+0x10e>
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	6a1a      	ldr	r2, [r3, #32]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	605a      	str	r2, [r3, #4]
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	2200      	movs	r2, #0
 800d622:	629a      	str	r2, [r3, #40]	; 0x28
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	1e5a      	subs	r2, r3, #1
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d632:	4b3a      	ldr	r3, [pc, #232]	; (800d71c <xTaskIncrementTick+0x20c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d903      	bls.n	800d642 <xTaskIncrementTick+0x132>
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	4a37      	ldr	r2, [pc, #220]	; (800d71c <xTaskIncrementTick+0x20c>)
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d646:	4936      	ldr	r1, [pc, #216]	; (800d720 <xTaskIncrementTick+0x210>)
 800d648:	4613      	mov	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4413      	add	r3, r2
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	440b      	add	r3, r1
 800d652:	3304      	adds	r3, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	609a      	str	r2, [r3, #8]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	689a      	ldr	r2, [r3, #8]
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	60da      	str	r2, [r3, #12]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	693a      	ldr	r2, [r7, #16]
 800d66c:	3204      	adds	r2, #4
 800d66e:	605a      	str	r2, [r3, #4]
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	1d1a      	adds	r2, r3, #4
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	609a      	str	r2, [r3, #8]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67c:	4613      	mov	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4413      	add	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4a26      	ldr	r2, [pc, #152]	; (800d720 <xTaskIncrementTick+0x210>)
 800d686:	441a      	add	r2, r3
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	615a      	str	r2, [r3, #20]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d690:	4923      	ldr	r1, [pc, #140]	; (800d720 <xTaskIncrementTick+0x210>)
 800d692:	4613      	mov	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	4413      	add	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	440b      	add	r3, r1
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	1c59      	adds	r1, r3, #1
 800d6a0:	481f      	ldr	r0, [pc, #124]	; (800d720 <xTaskIncrementTick+0x210>)
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4403      	add	r3, r0
 800d6ac:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b2:	4b1c      	ldr	r3, [pc, #112]	; (800d724 <xTaskIncrementTick+0x214>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	f67f af5c 	bls.w	800d576 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6c2:	e758      	b.n	800d576 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d6c4:	4b17      	ldr	r3, [pc, #92]	; (800d724 <xTaskIncrementTick+0x214>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ca:	4915      	ldr	r1, [pc, #84]	; (800d720 <xTaskIncrementTick+0x210>)
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	440b      	add	r3, r1
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d901      	bls.n	800d6e0 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d6e0:	4b11      	ldr	r3, [pc, #68]	; (800d728 <xTaskIncrementTick+0x218>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d007      	beq.n	800d6f8 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	61fb      	str	r3, [r7, #28]
 800d6ec:	e004      	b.n	800d6f8 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <xTaskIncrementTick+0x21c>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	4a0d      	ldr	r2, [pc, #52]	; (800d72c <xTaskIncrementTick+0x21c>)
 800d6f6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3720      	adds	r7, #32
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	200013d0 	.word	0x200013d0
 800d708:	200013ac 	.word	0x200013ac
 800d70c:	20001360 	.word	0x20001360
 800d710:	20001364 	.word	0x20001364
 800d714:	200013c0 	.word	0x200013c0
 800d718:	200013c8 	.word	0x200013c8
 800d71c:	200013b0 	.word	0x200013b0
 800d720:	20000ed8 	.word	0x20000ed8
 800d724:	20000ed4 	.word	0x20000ed4
 800d728:	200013bc 	.word	0x200013bc
 800d72c:	200013b8 	.word	0x200013b8

0800d730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d736:	4b23      	ldr	r3, [pc, #140]	; (800d7c4 <vTaskSwitchContext+0x94>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d73e:	4b22      	ldr	r3, [pc, #136]	; (800d7c8 <vTaskSwitchContext+0x98>)
 800d740:	2201      	movs	r2, #1
 800d742:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800d744:	e039      	b.n	800d7ba <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800d746:	4b20      	ldr	r3, [pc, #128]	; (800d7c8 <vTaskSwitchContext+0x98>)
 800d748:	2200      	movs	r2, #0
 800d74a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d74c:	4b1f      	ldr	r3, [pc, #124]	; (800d7cc <vTaskSwitchContext+0x9c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	607b      	str	r3, [r7, #4]
 800d752:	e008      	b.n	800d766 <vTaskSwitchContext+0x36>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d102      	bne.n	800d760 <vTaskSwitchContext+0x30>
 800d75a:	f000 ff55 	bl	800e608 <ulSetInterruptMask>
 800d75e:	e7fe      	b.n	800d75e <vTaskSwitchContext+0x2e>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3b01      	subs	r3, #1
 800d764:	607b      	str	r3, [r7, #4]
 800d766:	491a      	ldr	r1, [pc, #104]	; (800d7d0 <vTaskSwitchContext+0xa0>)
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	440b      	add	r3, r1
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0ec      	beq.n	800d754 <vTaskSwitchContext+0x24>
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	4613      	mov	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4413      	add	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4a12      	ldr	r2, [pc, #72]	; (800d7d0 <vTaskSwitchContext+0xa0>)
 800d786:	4413      	add	r3, r2
 800d788:	603b      	str	r3, [r7, #0]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	605a      	str	r2, [r3, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685a      	ldr	r2, [r3, #4]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	3308      	adds	r3, #8
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d104      	bne.n	800d7aa <vTaskSwitchContext+0x7a>
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	605a      	str	r2, [r3, #4]
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	4a08      	ldr	r2, [pc, #32]	; (800d7d4 <vTaskSwitchContext+0xa4>)
 800d7b2:	6013      	str	r3, [r2, #0]
 800d7b4:	4a05      	ldr	r2, [pc, #20]	; (800d7cc <vTaskSwitchContext+0x9c>)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6013      	str	r3, [r2, #0]
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	200013d0 	.word	0x200013d0
 800d7c8:	200013bc 	.word	0x200013bc
 800d7cc:	200013b0 	.word	0x200013b0
 800d7d0:	20000ed8 	.word	0x20000ed8
 800d7d4:	20000ed4 	.word	0x20000ed4

0800d7d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d102      	bne.n	800d7ee <vTaskPlaceOnEventList+0x16>
 800d7e8:	f000 ff0e 	bl	800e608 <ulSetInterruptMask>
 800d7ec:	e7fe      	b.n	800d7ec <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7ee:	4b07      	ldr	r3, [pc, #28]	; (800d80c <vTaskPlaceOnEventList+0x34>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3318      	adds	r3, #24
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7ff f85b 	bl	800c8b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7fc:	2101      	movs	r1, #1
 800d7fe:	6838      	ldr	r0, [r7, #0]
 800d800:	f000 fa6a 	bl	800dcd8 <prvAddCurrentTaskToDelayedList>
}
 800d804:	bf00      	nop
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	20000ed4 	.word	0x20000ed4

0800d810 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d102      	bne.n	800d828 <vTaskPlaceOnEventListRestricted+0x18>
 800d822:	f000 fef1 	bl	800e608 <ulSetInterruptMask>
 800d826:	e7fe      	b.n	800d826 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	4b16      	ldr	r3, [pc, #88]	; (800d888 <vTaskPlaceOnEventListRestricted+0x78>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	697a      	ldr	r2, [r7, #20]
 800d834:	61da      	str	r2, [r3, #28]
 800d836:	4b14      	ldr	r3, [pc, #80]	; (800d888 <vTaskPlaceOnEventListRestricted+0x78>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	6892      	ldr	r2, [r2, #8]
 800d83e:	621a      	str	r2, [r3, #32]
 800d840:	4b11      	ldr	r3, [pc, #68]	; (800d888 <vTaskPlaceOnEventListRestricted+0x78>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	3218      	adds	r2, #24
 800d84a:	605a      	str	r2, [r3, #4]
 800d84c:	4b0e      	ldr	r3, [pc, #56]	; (800d888 <vTaskPlaceOnEventListRestricted+0x78>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f103 0218 	add.w	r2, r3, #24
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	609a      	str	r2, [r3, #8]
 800d858:	4b0b      	ldr	r3, [pc, #44]	; (800d888 <vTaskPlaceOnEventListRestricted+0x78>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	629a      	str	r2, [r3, #40]	; 0x28
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	1c5a      	adds	r2, r3, #1
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800d870:	f04f 33ff 	mov.w	r3, #4294967295
 800d874:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	68b8      	ldr	r0, [r7, #8]
 800d87a:	f000 fa2d 	bl	800dcd8 <prvAddCurrentTaskToDelayedList>
    }
 800d87e:	bf00      	nop
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20000ed4 	.word	0x20000ed4

0800d88c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d102      	bne.n	800d8a8 <xTaskRemoveFromEventList+0x1c>
 800d8a2:	f000 feb1 	bl	800e608 <ulSetInterruptMask>
 800d8a6:	e7fe      	b.n	800d8a6 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ac:	617b      	str	r3, [r7, #20]
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	69db      	ldr	r3, [r3, #28]
 800d8b2:	69ba      	ldr	r2, [r7, #24]
 800d8b4:	6a12      	ldr	r2, [r2, #32]
 800d8b6:	609a      	str	r2, [r3, #8]
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	6a1b      	ldr	r3, [r3, #32]
 800d8bc:	69ba      	ldr	r2, [r7, #24]
 800d8be:	69d2      	ldr	r2, [r2, #28]
 800d8c0:	605a      	str	r2, [r3, #4]
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	3318      	adds	r3, #24
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d103      	bne.n	800d8d6 <xTaskRemoveFromEventList+0x4a>
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	6a1a      	ldr	r2, [r3, #32]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	605a      	str	r2, [r3, #4]
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	629a      	str	r2, [r3, #40]	; 0x28
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	1e5a      	subs	r2, r3, #1
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8e6:	4b4a      	ldr	r3, [pc, #296]	; (800da10 <xTaskRemoveFromEventList+0x184>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d15f      	bne.n	800d9ae <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	695b      	ldr	r3, [r3, #20]
 800d8f2:	60fb      	str	r3, [r7, #12]
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	69ba      	ldr	r2, [r7, #24]
 800d8fa:	68d2      	ldr	r2, [r2, #12]
 800d8fc:	609a      	str	r2, [r3, #8]
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	69ba      	ldr	r2, [r7, #24]
 800d904:	6892      	ldr	r2, [r2, #8]
 800d906:	605a      	str	r2, [r3, #4]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	3304      	adds	r3, #4
 800d910:	429a      	cmp	r2, r3
 800d912:	d103      	bne.n	800d91c <xTaskRemoveFromEventList+0x90>
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	68da      	ldr	r2, [r3, #12]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	605a      	str	r2, [r3, #4]
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	2200      	movs	r2, #0
 800d920:	615a      	str	r2, [r3, #20]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	1e5a      	subs	r2, r3, #1
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d930:	4b38      	ldr	r3, [pc, #224]	; (800da14 <xTaskRemoveFromEventList+0x188>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	429a      	cmp	r2, r3
 800d936:	d903      	bls.n	800d940 <xTaskRemoveFromEventList+0xb4>
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	4a35      	ldr	r2, [pc, #212]	; (800da14 <xTaskRemoveFromEventList+0x188>)
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d944:	4934      	ldr	r1, [pc, #208]	; (800da18 <xTaskRemoveFromEventList+0x18c>)
 800d946:	4613      	mov	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	4413      	add	r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	440b      	add	r3, r1
 800d950:	3304      	adds	r3, #4
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60bb      	str	r3, [r7, #8]
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	609a      	str	r2, [r3, #8]
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	689a      	ldr	r2, [r3, #8]
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	60da      	str	r2, [r3, #12]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	69ba      	ldr	r2, [r7, #24]
 800d96a:	3204      	adds	r2, #4
 800d96c:	605a      	str	r2, [r3, #4]
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	1d1a      	adds	r2, r3, #4
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	609a      	str	r2, [r3, #8]
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d97a:	4613      	mov	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	4a25      	ldr	r2, [pc, #148]	; (800da18 <xTaskRemoveFromEventList+0x18c>)
 800d984:	441a      	add	r2, r3
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	615a      	str	r2, [r3, #20]
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d98e:	4922      	ldr	r1, [pc, #136]	; (800da18 <xTaskRemoveFromEventList+0x18c>)
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	440b      	add	r3, r1
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	1c59      	adds	r1, r3, #1
 800d99e:	481e      	ldr	r0, [pc, #120]	; (800da18 <xTaskRemoveFromEventList+0x18c>)
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	4403      	add	r3, r0
 800d9aa:	6019      	str	r1, [r3, #0]
 800d9ac:	e01b      	b.n	800d9e6 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d9ae:	4b1b      	ldr	r3, [pc, #108]	; (800da1c <xTaskRemoveFromEventList+0x190>)
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	613b      	str	r3, [r7, #16]
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	693a      	ldr	r2, [r7, #16]
 800d9b8:	61da      	str	r2, [r3, #28]
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	689a      	ldr	r2, [r3, #8]
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	621a      	str	r2, [r3, #32]
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	69ba      	ldr	r2, [r7, #24]
 800d9c8:	3218      	adds	r2, #24
 800d9ca:	605a      	str	r2, [r3, #4]
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	f103 0218 	add.w	r2, r3, #24
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	609a      	str	r2, [r3, #8]
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	4a10      	ldr	r2, [pc, #64]	; (800da1c <xTaskRemoveFromEventList+0x190>)
 800d9da:	629a      	str	r2, [r3, #40]	; 0x28
 800d9dc:	4b0f      	ldr	r3, [pc, #60]	; (800da1c <xTaskRemoveFromEventList+0x190>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	4a0e      	ldr	r2, [pc, #56]	; (800da1c <xTaskRemoveFromEventList+0x190>)
 800d9e4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ea:	4b0d      	ldr	r3, [pc, #52]	; (800da20 <xTaskRemoveFromEventList+0x194>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d905      	bls.n	800da00 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d9f8:	4b0a      	ldr	r3, [pc, #40]	; (800da24 <xTaskRemoveFromEventList+0x198>)
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	601a      	str	r2, [r3, #0]
 800d9fe:	e001      	b.n	800da04 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800da00:	2300      	movs	r3, #0
 800da02:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800da04:	69fb      	ldr	r3, [r7, #28]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3720      	adds	r7, #32
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	200013d0 	.word	0x200013d0
 800da14:	200013b0 	.word	0x200013b0
 800da18:	20000ed8 	.word	0x20000ed8
 800da1c:	20001368 	.word	0x20001368
 800da20:	20000ed4 	.word	0x20000ed4
 800da24:	200013bc 	.word	0x200013bc

0800da28 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da30:	4b06      	ldr	r3, [pc, #24]	; (800da4c <vTaskInternalSetTimeOutState+0x24>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <vTaskInternalSetTimeOutState+0x28>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	605a      	str	r2, [r3, #4]
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	200013c0 	.word	0x200013c0
 800da50:	200013ac 	.word	0x200013ac

0800da54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <xTaskCheckForTimeOut+0x16>
 800da64:	f000 fdd0 	bl	800e608 <ulSetInterruptMask>
 800da68:	e7fe      	b.n	800da68 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d102      	bne.n	800da76 <xTaskCheckForTimeOut+0x22>
 800da70:	f000 fdca 	bl	800e608 <ulSetInterruptMask>
 800da74:	e7fe      	b.n	800da74 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800da76:	f000 fc8d 	bl	800e394 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800da7a:	4b1f      	ldr	r3, [pc, #124]	; (800daf8 <xTaskCheckForTimeOut+0xa4>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da92:	d102      	bne.n	800da9a <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800da94:	2300      	movs	r3, #0
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	e026      	b.n	800dae8 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	4b17      	ldr	r3, [pc, #92]	; (800dafc <xTaskCheckForTimeOut+0xa8>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d00a      	beq.n	800dabc <xTaskCheckForTimeOut+0x68>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	693a      	ldr	r2, [r7, #16]
 800daac:	429a      	cmp	r2, r3
 800daae:	d305      	bcc.n	800dabc <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800dab0:	2301      	movs	r3, #1
 800dab2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	e015      	b.n	800dae8 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d20b      	bcs.n	800dade <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	1ad2      	subs	r2, r2, r3
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7ff ffa8 	bl	800da28 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800dad8:	2300      	movs	r3, #0
 800dada:	617b      	str	r3, [r7, #20]
 800dadc:	e004      	b.n	800dae8 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800dae4:	2301      	movs	r3, #1
 800dae6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800dae8:	f000 fc66 	bl	800e3b8 <vPortExitCritical>

    return xReturn;
 800daec:	697b      	ldr	r3, [r7, #20]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	200013ac 	.word	0x200013ac
 800dafc:	200013c0 	.word	0x200013c0

0800db00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800db00:	b480      	push	{r7}
 800db02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800db04:	4b03      	ldr	r3, [pc, #12]	; (800db14 <vTaskMissedYield+0x14>)
 800db06:	2201      	movs	r2, #1
 800db08:	601a      	str	r2, [r3, #0]
}
 800db0a:	bf00      	nop
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	200013bc 	.word	0x200013bc

0800db18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800db20:	f000 f84a 	bl	800dbb8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800db24:	4b03      	ldr	r3, [pc, #12]	; (800db34 <prvIdleTask+0x1c>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d9f9      	bls.n	800db20 <prvIdleTask+0x8>
            {
                taskYIELD();
 800db2c:	f000 fc20 	bl	800e370 <vPortYield>
        prvCheckTasksWaitingTermination();
 800db30:	e7f6      	b.n	800db20 <prvIdleTask+0x8>
 800db32:	bf00      	nop
 800db34:	20000ed8 	.word	0x20000ed8

0800db38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db3e:	2300      	movs	r3, #0
 800db40:	607b      	str	r3, [r7, #4]
 800db42:	e00c      	b.n	800db5e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	4613      	mov	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4413      	add	r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4a12      	ldr	r2, [pc, #72]	; (800db98 <prvInitialiseTaskLists+0x60>)
 800db50:	4413      	add	r3, r2
 800db52:	4618      	mov	r0, r3
 800db54:	f7fe fe80 	bl	800c858 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	3301      	adds	r3, #1
 800db5c:	607b      	str	r3, [r7, #4]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b37      	cmp	r3, #55	; 0x37
 800db62:	d9ef      	bls.n	800db44 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800db64:	480d      	ldr	r0, [pc, #52]	; (800db9c <prvInitialiseTaskLists+0x64>)
 800db66:	f7fe fe77 	bl	800c858 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800db6a:	480d      	ldr	r0, [pc, #52]	; (800dba0 <prvInitialiseTaskLists+0x68>)
 800db6c:	f7fe fe74 	bl	800c858 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800db70:	480c      	ldr	r0, [pc, #48]	; (800dba4 <prvInitialiseTaskLists+0x6c>)
 800db72:	f7fe fe71 	bl	800c858 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800db76:	480c      	ldr	r0, [pc, #48]	; (800dba8 <prvInitialiseTaskLists+0x70>)
 800db78:	f7fe fe6e 	bl	800c858 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800db7c:	480b      	ldr	r0, [pc, #44]	; (800dbac <prvInitialiseTaskLists+0x74>)
 800db7e:	f7fe fe6b 	bl	800c858 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800db82:	4b0b      	ldr	r3, [pc, #44]	; (800dbb0 <prvInitialiseTaskLists+0x78>)
 800db84:	4a05      	ldr	r2, [pc, #20]	; (800db9c <prvInitialiseTaskLists+0x64>)
 800db86:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db88:	4b0a      	ldr	r3, [pc, #40]	; (800dbb4 <prvInitialiseTaskLists+0x7c>)
 800db8a:	4a05      	ldr	r2, [pc, #20]	; (800dba0 <prvInitialiseTaskLists+0x68>)
 800db8c:	601a      	str	r2, [r3, #0]
}
 800db8e:	bf00      	nop
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	20000ed8 	.word	0x20000ed8
 800db9c:	20001338 	.word	0x20001338
 800dba0:	2000134c 	.word	0x2000134c
 800dba4:	20001368 	.word	0x20001368
 800dba8:	2000137c 	.word	0x2000137c
 800dbac:	20001394 	.word	0x20001394
 800dbb0:	20001360 	.word	0x20001360
 800dbb4:	20001364 	.word	0x20001364

0800dbb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbbe:	e019      	b.n	800dbf4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800dbc0:	f000 fbe8 	bl	800e394 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbc4:	4b10      	ldr	r3, [pc, #64]	; (800dc08 <prvCheckTasksWaitingTermination+0x50>)
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	3304      	adds	r3, #4
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fe fea7 	bl	800c924 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800dbd6:	4b0d      	ldr	r3, [pc, #52]	; (800dc0c <prvCheckTasksWaitingTermination+0x54>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	4a0b      	ldr	r2, [pc, #44]	; (800dc0c <prvCheckTasksWaitingTermination+0x54>)
 800dbde:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800dbe0:	4b0b      	ldr	r3, [pc, #44]	; (800dc10 <prvCheckTasksWaitingTermination+0x58>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	4a0a      	ldr	r2, [pc, #40]	; (800dc10 <prvCheckTasksWaitingTermination+0x58>)
 800dbe8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800dbea:	f000 fbe5 	bl	800e3b8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f810 	bl	800dc14 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbf4:	4b06      	ldr	r3, [pc, #24]	; (800dc10 <prvCheckTasksWaitingTermination+0x58>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1e1      	bne.n	800dbc0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800dbfc:	bf00      	nop
 800dbfe:	bf00      	nop
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	2000137c 	.word	0x2000137c
 800dc0c:	200013a8 	.word	0x200013a8
 800dc10:	20001390 	.word	0x20001390

0800dc14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d108      	bne.n	800dc38 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 fdf6 	bl	800e81c <vPortFree>
                vPortFree( pxTCB );
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fdf3 	bl	800e81c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800dc36:	e010      	b.n	800dc5a <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d103      	bne.n	800dc4a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fdea 	bl	800e81c <vPortFree>
    }
 800dc48:	e007      	b.n	800dc5a <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d002      	beq.n	800dc5a <prvDeleteTCB+0x46>
 800dc54:	f000 fcd8 	bl	800e608 <ulSetInterruptMask>
 800dc58:	e7fe      	b.n	800dc58 <prvDeleteTCB+0x44>
    }
 800dc5a:	bf00      	nop
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
	...

0800dc64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc64:	b480      	push	{r7}
 800dc66:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc68:	4b0a      	ldr	r3, [pc, #40]	; (800dc94 <prvResetNextTaskUnblockTime+0x30>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d104      	bne.n	800dc7c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800dc72:	4b09      	ldr	r3, [pc, #36]	; (800dc98 <prvResetNextTaskUnblockTime+0x34>)
 800dc74:	f04f 32ff 	mov.w	r2, #4294967295
 800dc78:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800dc7a:	e005      	b.n	800dc88 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dc7c:	4b05      	ldr	r3, [pc, #20]	; (800dc94 <prvResetNextTaskUnblockTime+0x30>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a04      	ldr	r2, [pc, #16]	; (800dc98 <prvResetNextTaskUnblockTime+0x34>)
 800dc86:	6013      	str	r3, [r2, #0]
}
 800dc88:	bf00      	nop
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	20001360 	.word	0x20001360
 800dc98:	200013c8 	.word	0x200013c8

0800dc9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800dca2:	4b0b      	ldr	r3, [pc, #44]	; (800dcd0 <xTaskGetSchedulerState+0x34>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d102      	bne.n	800dcb0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	607b      	str	r3, [r7, #4]
 800dcae:	e008      	b.n	800dcc2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcb0:	4b08      	ldr	r3, [pc, #32]	; (800dcd4 <xTaskGetSchedulerState+0x38>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d102      	bne.n	800dcbe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800dcb8:	2302      	movs	r3, #2
 800dcba:	607b      	str	r3, [r7, #4]
 800dcbc:	e001      	b.n	800dcc2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800dcc2:	687b      	ldr	r3, [r7, #4]
    }
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	200013b4 	.word	0x200013b4
 800dcd4:	200013d0 	.word	0x200013d0

0800dcd8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800dce2:	4b2e      	ldr	r3, [pc, #184]	; (800dd9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dce8:	4b2d      	ldr	r3, [pc, #180]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	3304      	adds	r3, #4
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fe fe18 	bl	800c924 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfa:	d124      	bne.n	800dd46 <prvAddCurrentTaskToDelayedList+0x6e>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d021      	beq.n	800dd46 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd02:	4b28      	ldr	r3, [pc, #160]	; (800dda4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	613b      	str	r3, [r7, #16]
 800dd08:	4b25      	ldr	r3, [pc, #148]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	693a      	ldr	r2, [r7, #16]
 800dd0e:	609a      	str	r2, [r3, #8]
 800dd10:	4b23      	ldr	r3, [pc, #140]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	6892      	ldr	r2, [r2, #8]
 800dd18:	60da      	str	r2, [r3, #12]
 800dd1a:	4b21      	ldr	r3, [pc, #132]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	3204      	adds	r2, #4
 800dd24:	605a      	str	r2, [r3, #4]
 800dd26:	4b1e      	ldr	r3, [pc, #120]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	1d1a      	adds	r2, r3, #4
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	609a      	str	r2, [r3, #8]
 800dd30:	4b1b      	ldr	r3, [pc, #108]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a1b      	ldr	r2, [pc, #108]	; (800dda4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800dd36:	615a      	str	r2, [r3, #20]
 800dd38:	4b1a      	ldr	r3, [pc, #104]	; (800dda4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	4a19      	ldr	r2, [pc, #100]	; (800dda4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800dd40:	6013      	str	r3, [r2, #0]
 800dd42:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800dd44:	e026      	b.n	800dd94 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd4e:	4b14      	ldr	r3, [pc, #80]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d209      	bcs.n	800dd72 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd5e:	4b12      	ldr	r3, [pc, #72]	; (800dda8 <prvAddCurrentTaskToDelayedList+0xd0>)
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	4b0f      	ldr	r3, [pc, #60]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3304      	adds	r3, #4
 800dd68:	4619      	mov	r1, r3
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	f7fe fda1 	bl	800c8b2 <vListInsert>
}
 800dd70:	e010      	b.n	800dd94 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd72:	4b0e      	ldr	r3, [pc, #56]	; (800ddac <prvAddCurrentTaskToDelayedList+0xd4>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	3304      	adds	r3, #4
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4610      	mov	r0, r2
 800dd80:	f7fe fd97 	bl	800c8b2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d202      	bcs.n	800dd94 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800dd8e:	4a08      	ldr	r2, [pc, #32]	; (800ddb0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6013      	str	r3, [r2, #0]
}
 800dd94:	bf00      	nop
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	200013ac 	.word	0x200013ac
 800dda0:	20000ed4 	.word	0x20000ed4
 800dda4:	20001394 	.word	0x20001394
 800dda8:	20001364 	.word	0x20001364
 800ddac:	20001360 	.word	0x20001360
 800ddb0:	200013c8 	.word	0x200013c8

0800ddb4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b088      	sub	sp, #32
 800ddb8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800ddbe:	f000 fa59 	bl	800e274 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800ddc2:	4b18      	ldr	r3, [pc, #96]	; (800de24 <xTimerCreateTimerTask+0x70>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d020      	beq.n	800de0c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ddd2:	463a      	mov	r2, r7
 800ddd4:	1d39      	adds	r1, r7, #4
 800ddd6:	f107 0308 	add.w	r3, r7, #8
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fd22 	bl	800c824 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68ba      	ldr	r2, [r7, #8]
 800dde6:	9202      	str	r2, [sp, #8]
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	2302      	movs	r3, #2
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	460a      	mov	r2, r1
 800ddf2:	490d      	ldr	r1, [pc, #52]	; (800de28 <xTimerCreateTimerTask+0x74>)
 800ddf4:	480d      	ldr	r0, [pc, #52]	; (800de2c <xTimerCreateTimerTask+0x78>)
 800ddf6:	f7ff f85f 	bl	800ceb8 <xTaskCreateStatic>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	4a0c      	ldr	r2, [pc, #48]	; (800de30 <xTimerCreateTimerTask+0x7c>)
 800ddfe:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800de00:	4b0b      	ldr	r3, [pc, #44]	; (800de30 <xTimerCreateTimerTask+0x7c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800de08:	2301      	movs	r3, #1
 800de0a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <xTimerCreateTimerTask+0x64>
 800de12:	f000 fbf9 	bl	800e608 <ulSetInterruptMask>
 800de16:	e7fe      	b.n	800de16 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800de18:	68fb      	ldr	r3, [r7, #12]
    }
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	20001404 	.word	0x20001404
 800de28:	0800f984 	.word	0x0800f984
 800de2c:	0800ded9 	.word	0x0800ded9
 800de30:	20001408 	.word	0x20001408

0800de34 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800de40:	e008      	b.n	800de54 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	4413      	add	r3, r2
 800de4a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	699a      	ldr	r2, [r3, #24]
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	18d1      	adds	r1, r2, r3
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 f8d5 	bl	800e010 <prvInsertTimerInActiveList>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1ea      	bne.n	800de42 <prvReloadTimer+0xe>
        }
    }
 800de6c:	bf00      	nop
 800de6e:	bf00      	nop
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
	...

0800de78 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de82:	4b14      	ldr	r3, [pc, #80]	; (800ded4 <prvProcessExpiredTimer+0x5c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3304      	adds	r3, #4
 800de90:	4618      	mov	r0, r3
 800de92:	f7fe fd47 	bl	800c924 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de9c:	f003 0304 	and.w	r3, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d005      	beq.n	800deb0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800dea4:	683a      	ldr	r2, [r7, #0]
 800dea6:	6879      	ldr	r1, [r7, #4]
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f7ff ffc3 	bl	800de34 <prvReloadTimer>
 800deae:	e008      	b.n	800dec2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deb6:	f023 0301 	bic.w	r3, r3, #1
 800deba:	b2da      	uxtb	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	4798      	blx	r3
    }
 800deca:	bf00      	nop
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	200013fc 	.word	0x200013fc

0800ded8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dee0:	f107 0308 	add.w	r3, r7, #8
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 f84f 	bl	800df88 <prvGetNextExpireTime>
 800deea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	4619      	mov	r1, r3
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 f803 	bl	800defc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800def6:	f000 f8cd 	bl	800e094 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800defa:	e7f1      	b.n	800dee0 <prvTimerTask+0x8>

0800defc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800df06:	f7ff f9f9 	bl	800d2fc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df0a:	f107 0308 	add.w	r3, r7, #8
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 f85e 	bl	800dfd0 <prvSampleTimeNow>
 800df14:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d12a      	bne.n	800df72 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10a      	bne.n	800df38 <prvProcessTimerOrBlockTask+0x3c>
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	429a      	cmp	r2, r3
 800df28:	d806      	bhi.n	800df38 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800df2a:	f7ff f9f5 	bl	800d318 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df2e:	68f9      	ldr	r1, [r7, #12]
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff ffa1 	bl	800de78 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800df36:	e01e      	b.n	800df76 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d008      	beq.n	800df50 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df3e:	4b10      	ldr	r3, [pc, #64]	; (800df80 <prvProcessTimerOrBlockTask+0x84>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <prvProcessTimerOrBlockTask+0x50>
 800df48:	2301      	movs	r3, #1
 800df4a:	e000      	b.n	800df4e <prvProcessTimerOrBlockTask+0x52>
 800df4c:	2300      	movs	r3, #0
 800df4e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df50:	4b0c      	ldr	r3, [pc, #48]	; (800df84 <prvProcessTimerOrBlockTask+0x88>)
 800df52:	6818      	ldr	r0, [r3, #0]
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	4619      	mov	r1, r3
 800df5e:	f7fe ff77 	bl	800ce50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800df62:	f7ff f9d9 	bl	800d318 <xTaskResumeAll>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d104      	bne.n	800df76 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800df6c:	f000 fa00 	bl	800e370 <vPortYield>
    }
 800df70:	e001      	b.n	800df76 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800df72:	f7ff f9d1 	bl	800d318 <xTaskResumeAll>
    }
 800df76:	bf00      	nop
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	20001400 	.word	0x20001400
 800df84:	20001404 	.word	0x20001404

0800df88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df90:	4b0e      	ldr	r3, [pc, #56]	; (800dfcc <prvGetNextExpireTime+0x44>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d101      	bne.n	800df9e <prvGetNextExpireTime+0x16>
 800df9a:	2201      	movs	r2, #1
 800df9c:	e000      	b.n	800dfa0 <prvGetNextExpireTime+0x18>
 800df9e:	2200      	movs	r2, #0
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d105      	bne.n	800dfb8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfac:	4b07      	ldr	r3, [pc, #28]	; (800dfcc <prvGetNextExpireTime+0x44>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	60fb      	str	r3, [r7, #12]
 800dfb6:	e001      	b.n	800dfbc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
    }
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	200013fc 	.word	0x200013fc

0800dfd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800dfd8:	f7ff fa8a 	bl	800d4f0 <xTaskGetTickCount>
 800dfdc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800dfde:	4b0b      	ldr	r3, [pc, #44]	; (800e00c <prvSampleTimeNow+0x3c>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d205      	bcs.n	800dff4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800dfe8:	f000 f91e 	bl	800e228 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	e002      	b.n	800dffa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2200      	movs	r2, #0
 800dff8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800dffa:	4a04      	ldr	r2, [pc, #16]	; (800e00c <prvSampleTimeNow+0x3c>)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e000:	68fb      	ldr	r3, [r7, #12]
    }
 800e002:	4618      	mov	r0, r3
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	2000140c 	.word	0x2000140c

0800e010 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
 800e01c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e01e:	2300      	movs	r3, #0
 800e020:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	429a      	cmp	r2, r3
 800e034:	d812      	bhi.n	800e05c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	1ad2      	subs	r2, r2, r3
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	429a      	cmp	r2, r3
 800e042:	d302      	bcc.n	800e04a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e044:	2301      	movs	r3, #1
 800e046:	617b      	str	r3, [r7, #20]
 800e048:	e01b      	b.n	800e082 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e04a:	4b10      	ldr	r3, [pc, #64]	; (800e08c <prvInsertTimerInActiveList+0x7c>)
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	3304      	adds	r3, #4
 800e052:	4619      	mov	r1, r3
 800e054:	4610      	mov	r0, r2
 800e056:	f7fe fc2c 	bl	800c8b2 <vListInsert>
 800e05a:	e012      	b.n	800e082 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	d206      	bcs.n	800e072 <prvInsertTimerInActiveList+0x62>
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d302      	bcc.n	800e072 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e06c:	2301      	movs	r3, #1
 800e06e:	617b      	str	r3, [r7, #20]
 800e070:	e007      	b.n	800e082 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e072:	4b07      	ldr	r3, [pc, #28]	; (800e090 <prvInsertTimerInActiveList+0x80>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	3304      	adds	r3, #4
 800e07a:	4619      	mov	r1, r3
 800e07c:	4610      	mov	r0, r2
 800e07e:	f7fe fc18 	bl	800c8b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e082:	697b      	ldr	r3, [r7, #20]
    }
 800e084:	4618      	mov	r0, r3
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20001400 	.word	0x20001400
 800e090:	200013fc 	.word	0x200013fc

0800e094 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e094:	b580      	push	{r7, lr}
 800e096:	b088      	sub	sp, #32
 800e098:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e09a:	e0b2      	b.n	800e202 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	da10      	bge.n	800e0c4 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e0a2:	1d3b      	adds	r3, r7, #4
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d102      	bne.n	800e0b4 <prvProcessReceivedCommands+0x20>
 800e0ae:	f000 faab 	bl	800e608 <ulSetInterruptMask>
 800e0b2:	e7fe      	b.n	800e0b2 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69fa      	ldr	r2, [r7, #28]
 800e0ba:	6850      	ldr	r0, [r2, #4]
 800e0bc:	69fa      	ldr	r2, [r7, #28]
 800e0be:	6892      	ldr	r2, [r2, #8]
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f2c0 809b 	blt.w	800e202 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	695b      	ldr	r3, [r3, #20]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d004      	beq.n	800e0e2 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	3304      	adds	r3, #4
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fe fc21 	bl	800c924 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7ff ff73 	bl	800dfd0 <prvSampleTimeNow>
 800e0ea:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	2b08      	cmp	r3, #8
 800e0f2:	f200 8085 	bhi.w	800e200 <prvProcessReceivedCommands+0x16c>
 800e0f6:	a201      	add	r2, pc, #4	; (adr r2, 800e0fc <prvProcessReceivedCommands+0x68>)
 800e0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fc:	0800e121 	.word	0x0800e121
 800e100:	0800e121 	.word	0x0800e121
 800e104:	0800e189 	.word	0x0800e189
 800e108:	0800e19d 	.word	0x0800e19d
 800e10c:	0800e1d7 	.word	0x0800e1d7
 800e110:	0800e121 	.word	0x0800e121
 800e114:	0800e121 	.word	0x0800e121
 800e118:	0800e189 	.word	0x0800e189
 800e11c:	0800e19d 	.word	0x0800e19d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e126:	f043 0301 	orr.w	r3, r3, #1
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	18d1      	adds	r1, r2, r3
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	697a      	ldr	r2, [r7, #20]
 800e13e:	69b8      	ldr	r0, [r7, #24]
 800e140:	f7ff ff66 	bl	800e010 <prvInsertTimerInActiveList>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d05b      	beq.n	800e202 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e150:	f003 0304 	and.w	r3, r3, #4
 800e154:	2b00      	cmp	r3, #0
 800e156:	d009      	beq.n	800e16c <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	4413      	add	r3, r2
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	4619      	mov	r1, r3
 800e164:	69b8      	ldr	r0, [r7, #24]
 800e166:	f7ff fe65 	bl	800de34 <prvReloadTimer>
 800e16a:	e008      	b.n	800e17e <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e16c:	69bb      	ldr	r3, [r7, #24]
 800e16e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e172:	f023 0301 	bic.w	r3, r3, #1
 800e176:	b2da      	uxtb	r2, r3
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	6a1b      	ldr	r3, [r3, #32]
 800e182:	69b8      	ldr	r0, [r7, #24]
 800e184:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e186:	e03c      	b.n	800e202 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e18e:	f023 0301 	bic.w	r3, r3, #1
 800e192:	b2da      	uxtb	r2, r3
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800e19a:	e032      	b.n	800e202 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1a2:	f043 0301 	orr.w	r3, r3, #1
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	699b      	ldr	r3, [r3, #24]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d102      	bne.n	800e1c2 <prvProcessReceivedCommands+0x12e>
 800e1bc:	f000 fa24 	bl	800e608 <ulSetInterruptMask>
 800e1c0:	e7fe      	b.n	800e1c0 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	18d1      	adds	r1, r2, r3
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	697a      	ldr	r2, [r7, #20]
 800e1ce:	69b8      	ldr	r0, [r7, #24]
 800e1d0:	f7ff ff1e 	bl	800e010 <prvInsertTimerInActiveList>
                        break;
 800e1d4:	e015      	b.n	800e202 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1dc:	f003 0302 	and.w	r3, r3, #2
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d103      	bne.n	800e1ec <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800e1e4:	69b8      	ldr	r0, [r7, #24]
 800e1e6:	f000 fb19 	bl	800e81c <vPortFree>
 800e1ea:	e00a      	b.n	800e202 <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1f2:	f023 0301 	bic.w	r3, r3, #1
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e1fe:	e000      	b.n	800e202 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e200:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e202:	4b08      	ldr	r3, [pc, #32]	; (800e224 <prvProcessReceivedCommands+0x190>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	1d39      	adds	r1, r7, #4
 800e208:	2200      	movs	r2, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fc94 	bl	800cb38 <xQueueReceive>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	f47f af42 	bne.w	800e09c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e218:	bf00      	nop
 800e21a:	bf00      	nop
 800e21c:	3720      	adds	r7, #32
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	20001404 	.word	0x20001404

0800e228 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e22e:	e009      	b.n	800e244 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e230:	4b0e      	ldr	r3, [pc, #56]	; (800e26c <prvSwitchTimerLists+0x44>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e23a:	f04f 31ff 	mov.w	r1, #4294967295
 800e23e:	6838      	ldr	r0, [r7, #0]
 800e240:	f7ff fe1a 	bl	800de78 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e244:	4b09      	ldr	r3, [pc, #36]	; (800e26c <prvSwitchTimerLists+0x44>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1f0      	bne.n	800e230 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e24e:	4b07      	ldr	r3, [pc, #28]	; (800e26c <prvSwitchTimerLists+0x44>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e254:	4b06      	ldr	r3, [pc, #24]	; (800e270 <prvSwitchTimerLists+0x48>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a04      	ldr	r2, [pc, #16]	; (800e26c <prvSwitchTimerLists+0x44>)
 800e25a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e25c:	4a04      	ldr	r2, [pc, #16]	; (800e270 <prvSwitchTimerLists+0x48>)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6013      	str	r3, [r2, #0]
    }
 800e262:	bf00      	nop
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	200013fc 	.word	0x200013fc
 800e270:	20001400 	.word	0x20001400

0800e274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e27a:	f000 f88b 	bl	800e394 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e27e:	4b15      	ldr	r3, [pc, #84]	; (800e2d4 <prvCheckForValidListAndQueue+0x60>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d120      	bne.n	800e2c8 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e286:	4814      	ldr	r0, [pc, #80]	; (800e2d8 <prvCheckForValidListAndQueue+0x64>)
 800e288:	f7fe fae6 	bl	800c858 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e28c:	4813      	ldr	r0, [pc, #76]	; (800e2dc <prvCheckForValidListAndQueue+0x68>)
 800e28e:	f7fe fae3 	bl	800c858 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e292:	4b13      	ldr	r3, [pc, #76]	; (800e2e0 <prvCheckForValidListAndQueue+0x6c>)
 800e294:	4a10      	ldr	r2, [pc, #64]	; (800e2d8 <prvCheckForValidListAndQueue+0x64>)
 800e296:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e298:	4b12      	ldr	r3, [pc, #72]	; (800e2e4 <prvCheckForValidListAndQueue+0x70>)
 800e29a:	4a10      	ldr	r2, [pc, #64]	; (800e2dc <prvCheckForValidListAndQueue+0x68>)
 800e29c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e29e:	2300      	movs	r3, #0
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	4b11      	ldr	r3, [pc, #68]	; (800e2e8 <prvCheckForValidListAndQueue+0x74>)
 800e2a4:	4a11      	ldr	r2, [pc, #68]	; (800e2ec <prvCheckForValidListAndQueue+0x78>)
 800e2a6:	2110      	movs	r1, #16
 800e2a8:	200a      	movs	r0, #10
 800e2aa:	f7fe fbdc 	bl	800ca66 <xQueueGenericCreateStatic>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4a08      	ldr	r2, [pc, #32]	; (800e2d4 <prvCheckForValidListAndQueue+0x60>)
 800e2b2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e2b4:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <prvCheckForValidListAndQueue+0x60>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d005      	beq.n	800e2c8 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2bc:	4b05      	ldr	r3, [pc, #20]	; (800e2d4 <prvCheckForValidListAndQueue+0x60>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	490b      	ldr	r1, [pc, #44]	; (800e2f0 <prvCheckForValidListAndQueue+0x7c>)
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fe fd80 	bl	800cdc8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e2c8:	f000 f876 	bl	800e3b8 <vPortExitCritical>
    }
 800e2cc:	bf00      	nop
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	20001404 	.word	0x20001404
 800e2d8:	200013d4 	.word	0x200013d4
 800e2dc:	200013e8 	.word	0x200013e8
 800e2e0:	200013fc 	.word	0x200013fc
 800e2e4:	20001400 	.word	0x20001400
 800e2e8:	200014b0 	.word	0x200014b0
 800e2ec:	20001410 	.word	0x20001410
 800e2f0:	0800f98c 	.word	0x0800f98c

0800e2f4 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e2f8:	4b0b      	ldr	r3, [pc, #44]	; (800e328 <vPortSetupTimerInterrupt+0x34>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e2fe:	4b0b      	ldr	r3, [pc, #44]	; (800e32c <vPortSetupTimerInterrupt+0x38>)
 800e300:	2200      	movs	r2, #0
 800e302:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e304:	4b0a      	ldr	r3, [pc, #40]	; (800e330 <vPortSetupTimerInterrupt+0x3c>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a0a      	ldr	r2, [pc, #40]	; (800e334 <vPortSetupTimerInterrupt+0x40>)
 800e30a:	fba2 2303 	umull	r2, r3, r2, r3
 800e30e:	099b      	lsrs	r3, r3, #6
 800e310:	4a09      	ldr	r2, [pc, #36]	; (800e338 <vPortSetupTimerInterrupt+0x44>)
 800e312:	3b01      	subs	r3, #1
 800e314:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e316:	4b04      	ldr	r3, [pc, #16]	; (800e328 <vPortSetupTimerInterrupt+0x34>)
 800e318:	2207      	movs	r2, #7
 800e31a:	601a      	str	r2, [r3, #0]
}
 800e31c:	bf00      	nop
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	e000e010 	.word	0xe000e010
 800e32c:	e000e018 	.word	0xe000e018
 800e330:	20000000 	.word	0x20000000
 800e334:	10624dd3 	.word	0x10624dd3
 800e338:	e000e014 	.word	0xe000e014

0800e33c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e342:	2300      	movs	r3, #0
 800e344:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e346:	4b09      	ldr	r3, [pc, #36]	; (800e36c <prvTaskExitError+0x30>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d002      	beq.n	800e356 <prvTaskExitError+0x1a>
 800e350:	f000 f95a 	bl	800e608 <ulSetInterruptMask>
 800e354:	e7fe      	b.n	800e354 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e356:	f000 f957 	bl	800e608 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e35a:	bf00      	nop
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d0fc      	beq.n	800e35c <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e362:	bf00      	nop
 800e364:	bf00      	nop
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	20000060 	.word	0x20000060

0800e370 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800e370:	b480      	push	{r7}
 800e372:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e374:	4b06      	ldr	r3, [pc, #24]	; (800e390 <vPortYield+0x20>)
 800e376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e37a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e37c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e380:	f3bf 8f6f 	isb	sy
}
 800e384:	bf00      	nop
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	e000ed04 	.word	0xe000ed04

0800e394 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e398:	f000 f936 	bl	800e608 <ulSetInterruptMask>
    ulCriticalNesting++;
 800e39c:	4b05      	ldr	r3, [pc, #20]	; (800e3b4 <vPortEnterCritical+0x20>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	4a04      	ldr	r2, [pc, #16]	; (800e3b4 <vPortEnterCritical+0x20>)
 800e3a4:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e3a6:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e3aa:	f3bf 8f6f 	isb	sy
}
 800e3ae:	bf00      	nop
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20000060 	.word	0x20000060

0800e3b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800e3bc:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <vPortExitCritical+0x30>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <vPortExitCritical+0x12>
 800e3c4:	f000 f920 	bl	800e608 <ulSetInterruptMask>
 800e3c8:	e7fe      	b.n	800e3c8 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800e3ca:	4b07      	ldr	r3, [pc, #28]	; (800e3e8 <vPortExitCritical+0x30>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	4a05      	ldr	r2, [pc, #20]	; (800e3e8 <vPortExitCritical+0x30>)
 800e3d2:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800e3d4:	4b04      	ldr	r3, [pc, #16]	; (800e3e8 <vPortExitCritical+0x30>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d102      	bne.n	800e3e2 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800e3dc:	2000      	movs	r0, #0
 800e3de:	f000 f920 	bl	800e622 <vClearInterruptMask>
    }
}
 800e3e2:	bf00      	nop
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	20000060 	.word	0x20000060

0800e3ec <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3f2:	f000 f909 	bl	800e608 <ulSetInterruptMask>
 800e3f6:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e3f8:	f7ff f88a 	bl	800d510 <xTaskIncrementTick>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d003      	beq.n	800e40a <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e402:	4b05      	ldr	r3, [pc, #20]	; (800e418 <xPortSysTickHandler+0x2c>)
 800e404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e408:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f909 	bl	800e622 <vClearInterruptMask>
}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	e000ed04 	.word	0xe000ed04

0800e41c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3b02      	subs	r3, #2
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800e432:	7afb      	ldrb	r3, [r7, #11]
 800e434:	2b02      	cmp	r3, #2
 800e436:	d102      	bne.n	800e43e <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800e438:	f000 f8b2 	bl	800e5a0 <vRestoreContextOfFirstTask>
            break;
 800e43c:	e002      	b.n	800e444 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800e43e:	f000 f8e3 	bl	800e608 <ulSetInterruptMask>
 800e442:	e7fe      	b.n	800e442 <vPortSVCHandler_C+0x26>
    }
}
 800e444:	bf00      	nop
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	3b04      	subs	r3, #4
 800e45e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e466:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3b04      	subs	r3, #4
 800e46c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	3b04      	subs	r3, #4
 800e478:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800e47a:	4a38      	ldr	r2, [pc, #224]	; (800e55c <pxPortInitialiseStack+0x110>)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	3b04      	subs	r3, #4
 800e484:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800e48c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	3b04      	subs	r3, #4
 800e492:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800e49a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	3b04      	subs	r3, #4
 800e4a0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800e4a8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3b04      	subs	r3, #4
 800e4ae:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800e4b6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3b04      	subs	r3, #4
 800e4bc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	3b04      	subs	r3, #4
 800e4c8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800e4d0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	3b04      	subs	r3, #4
 800e4d6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800e4de:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3b04      	subs	r3, #4
 800e4e4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800e4ec:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3b04      	subs	r3, #4
 800e4f2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800e4fa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3b04      	subs	r3, #4
 800e500:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800e508:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3b04      	subs	r3, #4
 800e50e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800e516:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3b04      	subs	r3, #4
 800e51c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800e524:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3b04      	subs	r3, #4
 800e52a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800e532:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3b04      	subs	r3, #4
 800e538:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800e540:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3b04      	subs	r3, #4
 800e546:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800e548:	68ba      	ldr	r2, [r7, #8]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800e54e:	68fb      	ldr	r3, [r7, #12]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3714      	adds	r7, #20
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr
 800e55c:	0800e33d 	.word	0x0800e33d

0800e560 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800e560:	b580      	push	{r7, lr}
 800e562:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800e564:	4b0c      	ldr	r3, [pc, #48]	; (800e598 <xPortStartScheduler+0x38>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a0b      	ldr	r2, [pc, #44]	; (800e598 <xPortStartScheduler+0x38>)
 800e56a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e56e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800e570:	4b09      	ldr	r3, [pc, #36]	; (800e598 <xPortStartScheduler+0x38>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a08      	ldr	r2, [pc, #32]	; (800e598 <xPortStartScheduler+0x38>)
 800e576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e57a:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800e57c:	f7ff feba 	bl	800e2f4 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800e580:	4b06      	ldr	r3, [pc, #24]	; (800e59c <xPortStartScheduler+0x3c>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800e586:	f000 f82b 	bl	800e5e0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800e58a:	f7ff f8d1 	bl	800d730 <vTaskSwitchContext>
    prvTaskExitError();
 800e58e:	f7ff fed5 	bl	800e33c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	bd80      	pop	{r7, pc}
 800e598:	e000ed20 	.word	0xe000ed20
 800e59c:	20000060 	.word	0x20000060

0800e5a0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e5a0:	4a0b      	ldr	r2, [pc, #44]	; (800e5d0 <pxCurrentTCBConst2>)
 800e5a2:	6811      	ldr	r1, [r2, #0]
 800e5a4:	6808      	ldr	r0, [r1, #0]
 800e5a6:	c806      	ldmia	r0!, {r1, r2}
 800e5a8:	f381 880b 	msr	PSPLIM, r1
 800e5ac:	2102      	movs	r1, #2
 800e5ae:	f381 8814 	msr	CONTROL, r1
 800e5b2:	3020      	adds	r0, #32
 800e5b4:	f380 8809 	msr	PSP, r0
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f04f 0000 	mov.w	r0, #0
 800e5c0:	f380 8811 	msr	BASEPRI, r0
 800e5c4:	4710      	bx	r2
 800e5c6:	bf00      	nop
 800e5c8:	f3af 8000 	nop.w
 800e5cc:	f3af 8000 	nop.w

0800e5d0 <pxCurrentTCBConst2>:
 800e5d0:	20000ed4 	.word	0x20000ed4
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800e5d4:	bf00      	nop
 800e5d6:	bf00      	nop
	...

0800e5e0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e5e0:	4807      	ldr	r0, [pc, #28]	; (800e600 <xVTORConst>)
 800e5e2:	6800      	ldr	r0, [r0, #0]
 800e5e4:	6800      	ldr	r0, [r0, #0]
 800e5e6:	f380 8808 	msr	MSP, r0
 800e5ea:	b662      	cpsie	i
 800e5ec:	b661      	cpsie	f
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	df02      	svc	2
 800e5f8:	bf00      	nop
 800e5fa:	bf00      	nop
 800e5fc:	f3af 8000 	nop.w

0800e600 <xVTORConst>:
 800e600:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800e604:	bf00      	nop
 800e606:	bf00      	nop

0800e608 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e608:	f3ef 8011 	mrs	r0, BASEPRI
 800e60c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800e610:	f381 8811 	msr	BASEPRI, r1
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800e61e:	bf00      	nop
 800e620:	4618      	mov	r0, r3

0800e622 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e622:	f380 8811 	msr	BASEPRI, r0
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800e630:	bf00      	nop
	...

0800e640 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e640:	f3ef 8009 	mrs	r0, PSP
 800e644:	f3ef 820b 	mrs	r2, PSPLIM
 800e648:	4673      	mov	r3, lr
 800e64a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e64e:	4a10      	ldr	r2, [pc, #64]	; (800e690 <pxCurrentTCBConst>)
 800e650:	6811      	ldr	r1, [r2, #0]
 800e652:	6008      	str	r0, [r1, #0]
 800e654:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e658:	f380 8811 	msr	BASEPRI, r0
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	f3bf 8f6f 	isb	sy
 800e664:	f7ff f864 	bl	800d730 <vTaskSwitchContext>
 800e668:	f04f 0000 	mov.w	r0, #0
 800e66c:	f380 8811 	msr	BASEPRI, r0
 800e670:	4a07      	ldr	r2, [pc, #28]	; (800e690 <pxCurrentTCBConst>)
 800e672:	6811      	ldr	r1, [r2, #0]
 800e674:	6808      	ldr	r0, [r1, #0]
 800e676:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e67a:	f382 880b 	msr	PSPLIM, r2
 800e67e:	f380 8809 	msr	PSP, r0
 800e682:	4718      	bx	r3
 800e684:	f3af 8000 	nop.w
 800e688:	f3af 8000 	nop.w
 800e68c:	f3af 8000 	nop.w

0800e690 <pxCurrentTCBConst>:
 800e690:	20000ed4 	.word	0x20000ed4
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800e694:	bf00      	nop
 800e696:	bf00      	nop
	...

0800e6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e6a0:	f01e 0f04 	tst.w	lr, #4
 800e6a4:	bf0c      	ite	eq
 800e6a6:	f3ef 8008 	mrseq	r0, MSP
 800e6aa:	f3ef 8009 	mrsne	r0, PSP
 800e6ae:	4904      	ldr	r1, [pc, #16]	; (800e6c0 <svchandler_address_const>)
 800e6b0:	4708      	bx	r1
 800e6b2:	bf00      	nop
 800e6b4:	f3af 8000 	nop.w
 800e6b8:	f3af 8000 	nop.w
 800e6bc:	f3af 8000 	nop.w

0800e6c0 <svchandler_address_const>:
 800e6c0:	0800e41d 	.word	0x0800e41d
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop

0800e6c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800e6d4:	f7fe fe12 	bl	800d2fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800e6d8:	4b4b      	ldr	r3, [pc, #300]	; (800e808 <pvPortMalloc+0x140>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800e6e0:	f000 f8e8 	bl	800e8b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d012      	beq.n	800e710 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800e6ea:	2208      	movs	r2, #8
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f003 0307 	and.w	r3, r3, #7
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	3308      	adds	r3, #8
 800e6f6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	43db      	mvns	r3, r3
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d804      	bhi.n	800e70c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	4413      	add	r3, r2
 800e708:	607b      	str	r3, [r7, #4]
 800e70a:	e001      	b.n	800e710 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800e70c:	2300      	movs	r3, #0
 800e70e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	db68      	blt.n	800e7e8 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d065      	beq.n	800e7e8 <pvPortMalloc+0x120>
 800e71c:	4b3b      	ldr	r3, [pc, #236]	; (800e80c <pvPortMalloc+0x144>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	429a      	cmp	r2, r3
 800e724:	d860      	bhi.n	800e7e8 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800e726:	4b3a      	ldr	r3, [pc, #232]	; (800e810 <pvPortMalloc+0x148>)
 800e728:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800e72a:	4b39      	ldr	r3, [pc, #228]	; (800e810 <pvPortMalloc+0x148>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e730:	e004      	b.n	800e73c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d903      	bls.n	800e74e <pvPortMalloc+0x86>
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1f1      	bne.n	800e732 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800e74e:	4b2e      	ldr	r3, [pc, #184]	; (800e808 <pvPortMalloc+0x140>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	69fa      	ldr	r2, [r7, #28]
 800e754:	429a      	cmp	r2, r3
 800e756:	d047      	beq.n	800e7e8 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2208      	movs	r2, #8
 800e75e:	4413      	add	r3, r2
 800e760:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	1ad2      	subs	r2, r2, r3
 800e772:	2308      	movs	r3, #8
 800e774:	005b      	lsls	r3, r3, #1
 800e776:	429a      	cmp	r2, r3
 800e778:	d917      	bls.n	800e7aa <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e77a:	69fa      	ldr	r2, [r7, #28]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4413      	add	r3, r2
 800e780:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f003 0307 	and.w	r3, r3, #7
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <pvPortMalloc+0xca>
 800e78c:	f7ff ff3c 	bl	800e608 <ulSetInterruptMask>
 800e790:	e7fe      	b.n	800e790 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	685a      	ldr	r2, [r3, #4]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	1ad2      	subs	r2, r2, r3
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7a4:	68f8      	ldr	r0, [r7, #12]
 800e7a6:	f000 f8e1 	bl	800e96c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7aa:	4b18      	ldr	r3, [pc, #96]	; (800e80c <pvPortMalloc+0x144>)
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	4a15      	ldr	r2, [pc, #84]	; (800e80c <pvPortMalloc+0x144>)
 800e7b6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7b8:	4b14      	ldr	r3, [pc, #80]	; (800e80c <pvPortMalloc+0x144>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	4b15      	ldr	r3, [pc, #84]	; (800e814 <pvPortMalloc+0x14c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d203      	bcs.n	800e7cc <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7c4:	4b11      	ldr	r3, [pc, #68]	; (800e80c <pvPortMalloc+0x144>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a12      	ldr	r2, [pc, #72]	; (800e814 <pvPortMalloc+0x14c>)
 800e7ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800e7de:	4b0e      	ldr	r3, [pc, #56]	; (800e818 <pvPortMalloc+0x150>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	4a0c      	ldr	r2, [pc, #48]	; (800e818 <pvPortMalloc+0x150>)
 800e7e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800e7e8:	f7fe fd96 	bl	800d318 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	f003 0307 	and.w	r3, r3, #7
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <pvPortMalloc+0x134>
 800e7f6:	f7ff ff07 	bl	800e608 <ulSetInterruptMask>
 800e7fa:	e7fe      	b.n	800e7fa <pvPortMalloc+0x132>
    return pvReturn;
 800e7fc:	697b      	ldr	r3, [r7, #20]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3720      	adds	r7, #32
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20003508 	.word	0x20003508
 800e80c:	2000350c 	.word	0x2000350c
 800e810:	20003500 	.word	0x20003500
 800e814:	20003510 	.word	0x20003510
 800e818:	20003514 	.word	0x20003514

0800e81c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d039      	beq.n	800e8a2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800e82e:	2308      	movs	r3, #8
 800e830:	425b      	negs	r3, r3
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	4413      	add	r3, r2
 800e836:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	db02      	blt.n	800e84a <vPortFree+0x2e>
 800e844:	f7ff fee0 	bl	800e608 <ulSetInterruptMask>
 800e848:	e7fe      	b.n	800e848 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d002      	beq.n	800e858 <vPortFree+0x3c>
 800e852:	f7ff fed9 	bl	800e608 <ulSetInterruptMask>
 800e856:	e7fe      	b.n	800e856 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	0fdb      	lsrs	r3, r3, #31
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	b2db      	uxtb	r3, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01c      	beq.n	800e8a2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d118      	bne.n	800e8a2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800e87c:	f7fe fd3e 	bl	800d2fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <vPortFree+0x90>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4413      	add	r3, r2
 800e88a:	4a08      	ldr	r2, [pc, #32]	; (800e8ac <vPortFree+0x90>)
 800e88c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e88e:	68b8      	ldr	r0, [r7, #8]
 800e890:	f000 f86c 	bl	800e96c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800e894:	4b06      	ldr	r3, [pc, #24]	; (800e8b0 <vPortFree+0x94>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3301      	adds	r3, #1
 800e89a:	4a05      	ldr	r2, [pc, #20]	; (800e8b0 <vPortFree+0x94>)
 800e89c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800e89e:	f7fe fd3b 	bl	800d318 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800e8a2:	bf00      	nop
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	2000350c 	.word	0x2000350c
 800e8b0:	20003518 	.word	0x20003518

0800e8b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e8ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800e8c0:	4b25      	ldr	r3, [pc, #148]	; (800e958 <prvHeapInit+0xa4>)
 800e8c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f003 0307 	and.w	r3, r3, #7
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00c      	beq.n	800e8e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3307      	adds	r3, #7
 800e8d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f023 0307 	bic.w	r3, r3, #7
 800e8da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	4a1d      	ldr	r2, [pc, #116]	; (800e958 <prvHeapInit+0xa4>)
 800e8e4:	4413      	add	r3, r2
 800e8e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8ec:	4a1b      	ldr	r2, [pc, #108]	; (800e95c <prvHeapInit+0xa8>)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800e8f2:	4b1a      	ldr	r3, [pc, #104]	; (800e95c <prvHeapInit+0xa8>)
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800e900:	2208      	movs	r2, #8
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	1a9b      	subs	r3, r3, r2
 800e906:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f023 0307 	bic.w	r3, r3, #7
 800e90e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4a13      	ldr	r2, [pc, #76]	; (800e960 <prvHeapInit+0xac>)
 800e914:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800e916:	4b12      	ldr	r3, [pc, #72]	; (800e960 <prvHeapInit+0xac>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2200      	movs	r2, #0
 800e91c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800e91e:	4b10      	ldr	r3, [pc, #64]	; (800e960 <prvHeapInit+0xac>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2200      	movs	r2, #0
 800e924:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e934:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <prvHeapInit+0xac>)
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	4a08      	ldr	r2, [pc, #32]	; (800e964 <prvHeapInit+0xb0>)
 800e942:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	4a07      	ldr	r2, [pc, #28]	; (800e968 <prvHeapInit+0xb4>)
 800e94a:	6013      	str	r3, [r2, #0]
}
 800e94c:	bf00      	nop
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	20001500 	.word	0x20001500
 800e95c:	20003500 	.word	0x20003500
 800e960:	20003508 	.word	0x20003508
 800e964:	20003510 	.word	0x20003510
 800e968:	2000350c 	.word	0x2000350c

0800e96c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e974:	4b28      	ldr	r3, [pc, #160]	; (800ea18 <prvInsertBlockIntoFreeList+0xac>)
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	e002      	b.n	800e980 <prvInsertBlockIntoFreeList+0x14>
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	60fb      	str	r3, [r7, #12]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d8f7      	bhi.n	800e97a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	4413      	add	r3, r2
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d108      	bne.n	800e9ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	441a      	add	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	68ba      	ldr	r2, [r7, #8]
 800e9b8:	441a      	add	r2, r3
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d118      	bne.n	800e9f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	4b15      	ldr	r3, [pc, #84]	; (800ea1c <prvInsertBlockIntoFreeList+0xb0>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d00d      	beq.n	800e9ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	441a      	add	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	601a      	str	r2, [r3, #0]
 800e9e8:	e008      	b.n	800e9fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <prvInsertBlockIntoFreeList+0xb0>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	601a      	str	r2, [r3, #0]
 800e9f2:	e003      	b.n	800e9fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d002      	beq.n	800ea0a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ea0a:	bf00      	nop
 800ea0c:	3714      	adds	r7, #20
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	20003500 	.word	0x20003500
 800ea1c:	20003508 	.word	0x20003508

0800ea20 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d005      	beq.n	800ea3e <lwrb_init+0x1e>
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d002      	beq.n	800ea3e <lwrb_init+0x1e>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d101      	bne.n	800ea42 <lwrb_init+0x22>
        return 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e00b      	b.n	800ea5a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 800ea42:	2214      	movs	r2, #20
 800ea44:	2100      	movs	r1, #0
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f000 fa5c 	bl	800ef04 <memset>

    buff->size = size;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 800ea58:	2301      	movs	r3, #1
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <lwrb_set_evt_fn+0x26>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d006      	beq.n	800ea88 <lwrb_set_evt_fn+0x26>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d002      	beq.n	800ea88 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	611a      	str	r2, [r3, #16]
    }
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b088      	sub	sp, #32
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00d      	beq.n	800eac6 <lwrb_write+0x32>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <lwrb_write+0x32>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d005      	beq.n	800eac6 <lwrb_write+0x32>
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <lwrb_write+0x32>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d101      	bne.n	800eaca <lwrb_write+0x36>
        return 0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	e059      	b.n	800eb7e <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f000 f85b 	bl	800eb86 <lwrb_get_free>
 800ead0:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 800ead2:	69fa      	ldr	r2, [r7, #28]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d20d      	bcs.n	800eaf6 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	691b      	ldr	r3, [r3, #16]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d005      	beq.n	800eaee <lwrb_write+0x5a>
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	691b      	ldr	r3, [r3, #16]
 800eae6:	69fa      	ldr	r2, [r7, #28]
 800eae8:	2102      	movs	r1, #2
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	4798      	blx	r3
			free = lwrb_get_free(buff);
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f000 f849 	bl	800eb86 <lwrb_get_free>
 800eaf4:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	4293      	cmp	r3, r2
 800eafc:	bf28      	it	cs
 800eafe:	4613      	movcs	r3, r2
 800eb00:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d101      	bne.n	800eb0c <lwrb_write+0x78>
        return 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	e038      	b.n	800eb7e <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	bf28      	it	cs
 800eb1c:	4613      	movcs	r3, r2
 800eb1e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	4413      	add	r3, r2
 800eb2a:	697a      	ldr	r2, [r7, #20]
 800eb2c:	69b9      	ldr	r1, [r7, #24]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 fa40 	bl	800efb4 <memcpy>
    buff->w += tocopy;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	68da      	ldr	r2, [r3, #12]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	441a      	add	r2, r3
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00b      	beq.n	800eb66 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6818      	ldr	r0, [r3, #0]
 800eb52:	69ba      	ldr	r2, [r7, #24]
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	4413      	add	r3, r2
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	f000 fa2a 	bl	800efb4 <memcpy>
        buff->w = btw;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	68da      	ldr	r2, [r3, #12]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d302      	bcc.n	800eb78 <lwrb_write+0xe4>
        buff->w = 0;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 800eb78:	697a      	ldr	r2, [r7, #20]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4413      	add	r3, r2
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3720      	adds	r7, #32
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800eb86:	b480      	push	{r7}
 800eb88:	b087      	sub	sp, #28
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d007      	beq.n	800eba4 <lwrb_get_free+0x1e>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d003      	beq.n	800eba4 <lwrb_get_free+0x1e>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d101      	bne.n	800eba8 <lwrb_get_free+0x22>
        return 0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	e01f      	b.n	800ebe8 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d103      	bne.n	800ebc4 <lwrb_get_free+0x3e>
        size = buff->size;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	617b      	str	r3, [r7, #20]
 800ebc2:	e00f      	b.n	800ebe4 <lwrb_get_free+0x5e>
    } else if (r > w) {
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d904      	bls.n	800ebd6 <lwrb_get_free+0x50>
        size = r - w;
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	617b      	str	r3, [r7, #20]
 800ebd4:	e006      	b.n	800ebe4 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685a      	ldr	r2, [r3, #4]
 800ebda:	68f9      	ldr	r1, [r7, #12]
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	1acb      	subs	r3, r1, r3
 800ebe0:	4413      	add	r3, r2
 800ebe2:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	3b01      	subs	r3, #1
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	371c      	adds	r7, #28
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d007      	beq.n	800ec12 <lwrb_get_full+0x1e>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <lwrb_get_full+0x1e>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d101      	bne.n	800ec16 <lwrb_get_full+0x22>
        return 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	e01d      	b.n	800ec52 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d102      	bne.n	800ec30 <lwrb_get_full+0x3c>
        size = 0;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	617b      	str	r3, [r7, #20]
 800ec2e:	e00f      	b.n	800ec50 <lwrb_get_full+0x5c>
    } else if (w > r) {
 800ec30:	693a      	ldr	r2, [r7, #16]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d904      	bls.n	800ec42 <lwrb_get_full+0x4e>
        size = w - r;
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	617b      	str	r3, [r7, #20]
 800ec40:	e006      	b.n	800ec50 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	685a      	ldr	r2, [r3, #4]
 800ec46:	6939      	ldr	r1, [r7, #16]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	1acb      	subs	r3, r1, r3
 800ec4c:	4413      	add	r3, r2
 800ec4e:	617b      	str	r3, [r7, #20]
    }
    return size;
 800ec50:	697b      	ldr	r3, [r7, #20]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	371c      	adds	r7, #28
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 800ec5e:	b480      	push	{r7}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d007      	beq.n	800ec7c <lwrb_get_linear_block_read_address+0x1e>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d003      	beq.n	800ec7c <lwrb_get_linear_block_read_address+0x1e>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d101      	bne.n	800ec80 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	e004      	b.n	800ec8a <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	4413      	add	r3, r2
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 800ec96:	b480      	push	{r7}
 800ec98:	b087      	sub	sp, #28
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d007      	beq.n	800ecb4 <lwrb_get_linear_block_read_length+0x1e>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d003      	beq.n	800ecb4 <lwrb_get_linear_block_read_length+0x1e>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d101      	bne.n	800ecb8 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	e01b      	b.n	800ecf0 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 800ecc4:	693a      	ldr	r2, [r7, #16]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d904      	bls.n	800ecd6 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	617b      	str	r3, [r7, #20]
 800ecd4:	e00b      	b.n	800ecee <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d905      	bls.n	800ecea <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	617b      	str	r3, [r7, #20]
 800ece8:	e001      	b.n	800ecee <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	617b      	str	r3, [r7, #20]
    }
    return len;
 800ecee:	697b      	ldr	r3, [r7, #20]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	371c      	adds	r7, #28
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00a      	beq.n	800ed22 <lwrb_skip+0x26>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d006      	beq.n	800ed22 <lwrb_skip+0x26>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d002      	beq.n	800ed22 <lwrb_skip+0x26>
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d101      	bne.n	800ed26 <lwrb_skip+0x2a>
        return 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	e01d      	b.n	800ed62 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff ff64 	bl	800ebf4 <lwrb_get_full>
 800ed2c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	4293      	cmp	r3, r2
 800ed34:	bf28      	it	cs
 800ed36:	4613      	movcs	r3, r2
 800ed38:	603b      	str	r3, [r7, #0]
    buff->r += len;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	689a      	ldr	r2, [r3, #8]
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	441a      	add	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	689a      	ldr	r2, [r3, #8]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d306      	bcc.n	800ed60 <lwrb_skip+0x64>
        buff->r -= buff->size;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	689a      	ldr	r2, [r3, #8]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	1ad2      	subs	r2, r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 800ed60:	683b      	ldr	r3, [r7, #0]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
	...

0800ed6c <sbrk_aligned>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	4e0e      	ldr	r6, [pc, #56]	; (800eda8 <sbrk_aligned+0x3c>)
 800ed70:	460c      	mov	r4, r1
 800ed72:	4605      	mov	r5, r0
 800ed74:	6831      	ldr	r1, [r6, #0]
 800ed76:	b911      	cbnz	r1, 800ed7e <sbrk_aligned+0x12>
 800ed78:	f000 f8e0 	bl	800ef3c <_sbrk_r>
 800ed7c:	6030      	str	r0, [r6, #0]
 800ed7e:	4621      	mov	r1, r4
 800ed80:	4628      	mov	r0, r5
 800ed82:	f000 f8db 	bl	800ef3c <_sbrk_r>
 800ed86:	1c43      	adds	r3, r0, #1
 800ed88:	d00a      	beq.n	800eda0 <sbrk_aligned+0x34>
 800ed8a:	1cc4      	adds	r4, r0, #3
 800ed8c:	f024 0403 	bic.w	r4, r4, #3
 800ed90:	42a0      	cmp	r0, r4
 800ed92:	d007      	beq.n	800eda4 <sbrk_aligned+0x38>
 800ed94:	1a21      	subs	r1, r4, r0
 800ed96:	4628      	mov	r0, r5
 800ed98:	f000 f8d0 	bl	800ef3c <_sbrk_r>
 800ed9c:	3001      	adds	r0, #1
 800ed9e:	d101      	bne.n	800eda4 <sbrk_aligned+0x38>
 800eda0:	f04f 34ff 	mov.w	r4, #4294967295
 800eda4:	4620      	mov	r0, r4
 800eda6:	bd70      	pop	{r4, r5, r6, pc}
 800eda8:	20003520 	.word	0x20003520

0800edac <_malloc_r>:
 800edac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edb0:	1ccd      	adds	r5, r1, #3
 800edb2:	4607      	mov	r7, r0
 800edb4:	f025 0503 	bic.w	r5, r5, #3
 800edb8:	3508      	adds	r5, #8
 800edba:	2d0c      	cmp	r5, #12
 800edbc:	bf38      	it	cc
 800edbe:	250c      	movcc	r5, #12
 800edc0:	2d00      	cmp	r5, #0
 800edc2:	db01      	blt.n	800edc8 <_malloc_r+0x1c>
 800edc4:	42a9      	cmp	r1, r5
 800edc6:	d905      	bls.n	800edd4 <_malloc_r+0x28>
 800edc8:	230c      	movs	r3, #12
 800edca:	2600      	movs	r6, #0
 800edcc:	603b      	str	r3, [r7, #0]
 800edce:	4630      	mov	r0, r6
 800edd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eea8 <_malloc_r+0xfc>
 800edd8:	f000 f868 	bl	800eeac <__malloc_lock>
 800eddc:	f8d8 3000 	ldr.w	r3, [r8]
 800ede0:	461c      	mov	r4, r3
 800ede2:	bb5c      	cbnz	r4, 800ee3c <_malloc_r+0x90>
 800ede4:	4629      	mov	r1, r5
 800ede6:	4638      	mov	r0, r7
 800ede8:	f7ff ffc0 	bl	800ed6c <sbrk_aligned>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	4604      	mov	r4, r0
 800edf0:	d155      	bne.n	800ee9e <_malloc_r+0xf2>
 800edf2:	f8d8 4000 	ldr.w	r4, [r8]
 800edf6:	4626      	mov	r6, r4
 800edf8:	2e00      	cmp	r6, #0
 800edfa:	d145      	bne.n	800ee88 <_malloc_r+0xdc>
 800edfc:	2c00      	cmp	r4, #0
 800edfe:	d048      	beq.n	800ee92 <_malloc_r+0xe6>
 800ee00:	6823      	ldr	r3, [r4, #0]
 800ee02:	4631      	mov	r1, r6
 800ee04:	4638      	mov	r0, r7
 800ee06:	eb04 0903 	add.w	r9, r4, r3
 800ee0a:	f000 f897 	bl	800ef3c <_sbrk_r>
 800ee0e:	4581      	cmp	r9, r0
 800ee10:	d13f      	bne.n	800ee92 <_malloc_r+0xe6>
 800ee12:	6821      	ldr	r1, [r4, #0]
 800ee14:	4638      	mov	r0, r7
 800ee16:	1a6d      	subs	r5, r5, r1
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7ff ffa7 	bl	800ed6c <sbrk_aligned>
 800ee1e:	3001      	adds	r0, #1
 800ee20:	d037      	beq.n	800ee92 <_malloc_r+0xe6>
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	442b      	add	r3, r5
 800ee26:	6023      	str	r3, [r4, #0]
 800ee28:	f8d8 3000 	ldr.w	r3, [r8]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d038      	beq.n	800eea2 <_malloc_r+0xf6>
 800ee30:	685a      	ldr	r2, [r3, #4]
 800ee32:	42a2      	cmp	r2, r4
 800ee34:	d12b      	bne.n	800ee8e <_malloc_r+0xe2>
 800ee36:	2200      	movs	r2, #0
 800ee38:	605a      	str	r2, [r3, #4]
 800ee3a:	e00f      	b.n	800ee5c <_malloc_r+0xb0>
 800ee3c:	6822      	ldr	r2, [r4, #0]
 800ee3e:	1b52      	subs	r2, r2, r5
 800ee40:	d41f      	bmi.n	800ee82 <_malloc_r+0xd6>
 800ee42:	2a0b      	cmp	r2, #11
 800ee44:	d917      	bls.n	800ee76 <_malloc_r+0xca>
 800ee46:	1961      	adds	r1, r4, r5
 800ee48:	42a3      	cmp	r3, r4
 800ee4a:	6025      	str	r5, [r4, #0]
 800ee4c:	bf18      	it	ne
 800ee4e:	6059      	strne	r1, [r3, #4]
 800ee50:	6863      	ldr	r3, [r4, #4]
 800ee52:	bf08      	it	eq
 800ee54:	f8c8 1000 	streq.w	r1, [r8]
 800ee58:	5162      	str	r2, [r4, r5]
 800ee5a:	604b      	str	r3, [r1, #4]
 800ee5c:	f104 060b 	add.w	r6, r4, #11
 800ee60:	4638      	mov	r0, r7
 800ee62:	f000 f829 	bl	800eeb8 <__malloc_unlock>
 800ee66:	1d23      	adds	r3, r4, #4
 800ee68:	f026 0607 	bic.w	r6, r6, #7
 800ee6c:	1af2      	subs	r2, r6, r3
 800ee6e:	d0ae      	beq.n	800edce <_malloc_r+0x22>
 800ee70:	1b9b      	subs	r3, r3, r6
 800ee72:	50a3      	str	r3, [r4, r2]
 800ee74:	e7ab      	b.n	800edce <_malloc_r+0x22>
 800ee76:	42a3      	cmp	r3, r4
 800ee78:	6862      	ldr	r2, [r4, #4]
 800ee7a:	d1dd      	bne.n	800ee38 <_malloc_r+0x8c>
 800ee7c:	f8c8 2000 	str.w	r2, [r8]
 800ee80:	e7ec      	b.n	800ee5c <_malloc_r+0xb0>
 800ee82:	4623      	mov	r3, r4
 800ee84:	6864      	ldr	r4, [r4, #4]
 800ee86:	e7ac      	b.n	800ede2 <_malloc_r+0x36>
 800ee88:	4634      	mov	r4, r6
 800ee8a:	6876      	ldr	r6, [r6, #4]
 800ee8c:	e7b4      	b.n	800edf8 <_malloc_r+0x4c>
 800ee8e:	4613      	mov	r3, r2
 800ee90:	e7cc      	b.n	800ee2c <_malloc_r+0x80>
 800ee92:	230c      	movs	r3, #12
 800ee94:	4638      	mov	r0, r7
 800ee96:	603b      	str	r3, [r7, #0]
 800ee98:	f000 f80e 	bl	800eeb8 <__malloc_unlock>
 800ee9c:	e797      	b.n	800edce <_malloc_r+0x22>
 800ee9e:	6025      	str	r5, [r4, #0]
 800eea0:	e7dc      	b.n	800ee5c <_malloc_r+0xb0>
 800eea2:	605b      	str	r3, [r3, #4]
 800eea4:	deff      	udf	#255	; 0xff
 800eea6:	bf00      	nop
 800eea8:	2000351c 	.word	0x2000351c

0800eeac <__malloc_lock>:
 800eeac:	4801      	ldr	r0, [pc, #4]	; (800eeb4 <__malloc_lock+0x8>)
 800eeae:	f000 b87f 	b.w	800efb0 <__retarget_lock_acquire_recursive>
 800eeb2:	bf00      	nop
 800eeb4:	20003660 	.word	0x20003660

0800eeb8 <__malloc_unlock>:
 800eeb8:	4801      	ldr	r0, [pc, #4]	; (800eec0 <__malloc_unlock+0x8>)
 800eeba:	f000 b87a 	b.w	800efb2 <__retarget_lock_release_recursive>
 800eebe:	bf00      	nop
 800eec0:	20003660 	.word	0x20003660

0800eec4 <_vsiprintf_r>:
 800eec4:	b500      	push	{lr}
 800eec6:	b09b      	sub	sp, #108	; 0x6c
 800eec8:	9100      	str	r1, [sp, #0]
 800eeca:	9104      	str	r1, [sp, #16]
 800eecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eed0:	9105      	str	r1, [sp, #20]
 800eed2:	9102      	str	r1, [sp, #8]
 800eed4:	4905      	ldr	r1, [pc, #20]	; (800eeec <_vsiprintf_r+0x28>)
 800eed6:	9103      	str	r1, [sp, #12]
 800eed8:	4669      	mov	r1, sp
 800eeda:	f000 f91f 	bl	800f11c <_svfiprintf_r>
 800eede:	9b00      	ldr	r3, [sp, #0]
 800eee0:	2200      	movs	r2, #0
 800eee2:	701a      	strb	r2, [r3, #0]
 800eee4:	b01b      	add	sp, #108	; 0x6c
 800eee6:	f85d fb04 	ldr.w	pc, [sp], #4
 800eeea:	bf00      	nop
 800eeec:	ffff0208 	.word	0xffff0208

0800eef0 <vsiprintf>:
 800eef0:	4613      	mov	r3, r2
 800eef2:	460a      	mov	r2, r1
 800eef4:	4601      	mov	r1, r0
 800eef6:	4802      	ldr	r0, [pc, #8]	; (800ef00 <vsiprintf+0x10>)
 800eef8:	6800      	ldr	r0, [r0, #0]
 800eefa:	f7ff bfe3 	b.w	800eec4 <_vsiprintf_r>
 800eefe:	bf00      	nop
 800ef00:	200000b0 	.word	0x200000b0

0800ef04 <memset>:
 800ef04:	4402      	add	r2, r0
 800ef06:	4603      	mov	r3, r0
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d100      	bne.n	800ef0e <memset+0xa>
 800ef0c:	4770      	bx	lr
 800ef0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef12:	e7f9      	b.n	800ef08 <memset+0x4>

0800ef14 <strncpy>:
 800ef14:	3901      	subs	r1, #1
 800ef16:	4603      	mov	r3, r0
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	b132      	cbz	r2, 800ef2a <strncpy+0x16>
 800ef1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ef20:	3a01      	subs	r2, #1
 800ef22:	f803 4b01 	strb.w	r4, [r3], #1
 800ef26:	2c00      	cmp	r4, #0
 800ef28:	d1f7      	bne.n	800ef1a <strncpy+0x6>
 800ef2a:	441a      	add	r2, r3
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d100      	bne.n	800ef34 <strncpy+0x20>
 800ef32:	bd10      	pop	{r4, pc}
 800ef34:	f803 1b01 	strb.w	r1, [r3], #1
 800ef38:	e7f9      	b.n	800ef2e <strncpy+0x1a>
	...

0800ef3c <_sbrk_r>:
 800ef3c:	b538      	push	{r3, r4, r5, lr}
 800ef3e:	2300      	movs	r3, #0
 800ef40:	4d05      	ldr	r5, [pc, #20]	; (800ef58 <_sbrk_r+0x1c>)
 800ef42:	4604      	mov	r4, r0
 800ef44:	4608      	mov	r0, r1
 800ef46:	602b      	str	r3, [r5, #0]
 800ef48:	f7f2 f8d8 	bl	80010fc <_sbrk>
 800ef4c:	1c43      	adds	r3, r0, #1
 800ef4e:	d102      	bne.n	800ef56 <_sbrk_r+0x1a>
 800ef50:	682b      	ldr	r3, [r5, #0]
 800ef52:	b103      	cbz	r3, 800ef56 <_sbrk_r+0x1a>
 800ef54:	6023      	str	r3, [r4, #0]
 800ef56:	bd38      	pop	{r3, r4, r5, pc}
 800ef58:	2000365c 	.word	0x2000365c

0800ef5c <__errno>:
 800ef5c:	4b01      	ldr	r3, [pc, #4]	; (800ef64 <__errno+0x8>)
 800ef5e:	6818      	ldr	r0, [r3, #0]
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	200000b0 	.word	0x200000b0

0800ef68 <__libc_init_array>:
 800ef68:	b570      	push	{r4, r5, r6, lr}
 800ef6a:	4d0d      	ldr	r5, [pc, #52]	; (800efa0 <__libc_init_array+0x38>)
 800ef6c:	2600      	movs	r6, #0
 800ef6e:	4c0d      	ldr	r4, [pc, #52]	; (800efa4 <__libc_init_array+0x3c>)
 800ef70:	1b64      	subs	r4, r4, r5
 800ef72:	10a4      	asrs	r4, r4, #2
 800ef74:	42a6      	cmp	r6, r4
 800ef76:	d109      	bne.n	800ef8c <__libc_init_array+0x24>
 800ef78:	4d0b      	ldr	r5, [pc, #44]	; (800efa8 <__libc_init_array+0x40>)
 800ef7a:	2600      	movs	r6, #0
 800ef7c:	4c0b      	ldr	r4, [pc, #44]	; (800efac <__libc_init_array+0x44>)
 800ef7e:	f000 fbbd 	bl	800f6fc <_init>
 800ef82:	1b64      	subs	r4, r4, r5
 800ef84:	10a4      	asrs	r4, r4, #2
 800ef86:	42a6      	cmp	r6, r4
 800ef88:	d105      	bne.n	800ef96 <__libc_init_array+0x2e>
 800ef8a:	bd70      	pop	{r4, r5, r6, pc}
 800ef8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef90:	3601      	adds	r6, #1
 800ef92:	4798      	blx	r3
 800ef94:	e7ee      	b.n	800ef74 <__libc_init_array+0xc>
 800ef96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef9a:	3601      	adds	r6, #1
 800ef9c:	4798      	blx	r3
 800ef9e:	e7f2      	b.n	800ef86 <__libc_init_array+0x1e>
 800efa0:	0800fa34 	.word	0x0800fa34
 800efa4:	0800fa34 	.word	0x0800fa34
 800efa8:	0800fa34 	.word	0x0800fa34
 800efac:	0800fa38 	.word	0x0800fa38

0800efb0 <__retarget_lock_acquire_recursive>:
 800efb0:	4770      	bx	lr

0800efb2 <__retarget_lock_release_recursive>:
 800efb2:	4770      	bx	lr

0800efb4 <memcpy>:
 800efb4:	440a      	add	r2, r1
 800efb6:	1e43      	subs	r3, r0, #1
 800efb8:	4291      	cmp	r1, r2
 800efba:	d100      	bne.n	800efbe <memcpy+0xa>
 800efbc:	4770      	bx	lr
 800efbe:	b510      	push	{r4, lr}
 800efc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efc4:	4291      	cmp	r1, r2
 800efc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efca:	d1f9      	bne.n	800efc0 <memcpy+0xc>
 800efcc:	bd10      	pop	{r4, pc}
	...

0800efd0 <_free_r>:
 800efd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efd2:	2900      	cmp	r1, #0
 800efd4:	d043      	beq.n	800f05e <_free_r+0x8e>
 800efd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efda:	1f0c      	subs	r4, r1, #4
 800efdc:	9001      	str	r0, [sp, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bfb8      	it	lt
 800efe2:	18e4      	addlt	r4, r4, r3
 800efe4:	f7ff ff62 	bl	800eeac <__malloc_lock>
 800efe8:	4a1e      	ldr	r2, [pc, #120]	; (800f064 <_free_r+0x94>)
 800efea:	9801      	ldr	r0, [sp, #4]
 800efec:	6813      	ldr	r3, [r2, #0]
 800efee:	b933      	cbnz	r3, 800effe <_free_r+0x2e>
 800eff0:	6063      	str	r3, [r4, #4]
 800eff2:	6014      	str	r4, [r2, #0]
 800eff4:	b003      	add	sp, #12
 800eff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800effa:	f7ff bf5d 	b.w	800eeb8 <__malloc_unlock>
 800effe:	42a3      	cmp	r3, r4
 800f000:	d908      	bls.n	800f014 <_free_r+0x44>
 800f002:	6825      	ldr	r5, [r4, #0]
 800f004:	1961      	adds	r1, r4, r5
 800f006:	428b      	cmp	r3, r1
 800f008:	bf01      	itttt	eq
 800f00a:	6819      	ldreq	r1, [r3, #0]
 800f00c:	685b      	ldreq	r3, [r3, #4]
 800f00e:	1949      	addeq	r1, r1, r5
 800f010:	6021      	streq	r1, [r4, #0]
 800f012:	e7ed      	b.n	800eff0 <_free_r+0x20>
 800f014:	461a      	mov	r2, r3
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	b10b      	cbz	r3, 800f01e <_free_r+0x4e>
 800f01a:	42a3      	cmp	r3, r4
 800f01c:	d9fa      	bls.n	800f014 <_free_r+0x44>
 800f01e:	6811      	ldr	r1, [r2, #0]
 800f020:	1855      	adds	r5, r2, r1
 800f022:	42a5      	cmp	r5, r4
 800f024:	d10b      	bne.n	800f03e <_free_r+0x6e>
 800f026:	6824      	ldr	r4, [r4, #0]
 800f028:	4421      	add	r1, r4
 800f02a:	1854      	adds	r4, r2, r1
 800f02c:	6011      	str	r1, [r2, #0]
 800f02e:	42a3      	cmp	r3, r4
 800f030:	d1e0      	bne.n	800eff4 <_free_r+0x24>
 800f032:	681c      	ldr	r4, [r3, #0]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	440c      	add	r4, r1
 800f038:	6053      	str	r3, [r2, #4]
 800f03a:	6014      	str	r4, [r2, #0]
 800f03c:	e7da      	b.n	800eff4 <_free_r+0x24>
 800f03e:	d902      	bls.n	800f046 <_free_r+0x76>
 800f040:	230c      	movs	r3, #12
 800f042:	6003      	str	r3, [r0, #0]
 800f044:	e7d6      	b.n	800eff4 <_free_r+0x24>
 800f046:	6825      	ldr	r5, [r4, #0]
 800f048:	1961      	adds	r1, r4, r5
 800f04a:	428b      	cmp	r3, r1
 800f04c:	bf02      	ittt	eq
 800f04e:	6819      	ldreq	r1, [r3, #0]
 800f050:	685b      	ldreq	r3, [r3, #4]
 800f052:	1949      	addeq	r1, r1, r5
 800f054:	6063      	str	r3, [r4, #4]
 800f056:	bf08      	it	eq
 800f058:	6021      	streq	r1, [r4, #0]
 800f05a:	6054      	str	r4, [r2, #4]
 800f05c:	e7ca      	b.n	800eff4 <_free_r+0x24>
 800f05e:	b003      	add	sp, #12
 800f060:	bd30      	pop	{r4, r5, pc}
 800f062:	bf00      	nop
 800f064:	2000351c 	.word	0x2000351c

0800f068 <__ssputs_r>:
 800f068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f06c:	461f      	mov	r7, r3
 800f06e:	688e      	ldr	r6, [r1, #8]
 800f070:	4682      	mov	sl, r0
 800f072:	460c      	mov	r4, r1
 800f074:	42be      	cmp	r6, r7
 800f076:	4690      	mov	r8, r2
 800f078:	680b      	ldr	r3, [r1, #0]
 800f07a:	d82c      	bhi.n	800f0d6 <__ssputs_r+0x6e>
 800f07c:	898a      	ldrh	r2, [r1, #12]
 800f07e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f082:	d026      	beq.n	800f0d2 <__ssputs_r+0x6a>
 800f084:	6965      	ldr	r5, [r4, #20]
 800f086:	6909      	ldr	r1, [r1, #16]
 800f088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f08c:	eba3 0901 	sub.w	r9, r3, r1
 800f090:	1c7b      	adds	r3, r7, #1
 800f092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f096:	444b      	add	r3, r9
 800f098:	106d      	asrs	r5, r5, #1
 800f09a:	429d      	cmp	r5, r3
 800f09c:	bf38      	it	cc
 800f09e:	461d      	movcc	r5, r3
 800f0a0:	0553      	lsls	r3, r2, #21
 800f0a2:	d527      	bpl.n	800f0f4 <__ssputs_r+0x8c>
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	f7ff fe81 	bl	800edac <_malloc_r>
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	b360      	cbz	r0, 800f108 <__ssputs_r+0xa0>
 800f0ae:	464a      	mov	r2, r9
 800f0b0:	6921      	ldr	r1, [r4, #16]
 800f0b2:	f7ff ff7f 	bl	800efb4 <memcpy>
 800f0b6:	89a3      	ldrh	r3, [r4, #12]
 800f0b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0c0:	81a3      	strh	r3, [r4, #12]
 800f0c2:	6126      	str	r6, [r4, #16]
 800f0c4:	444e      	add	r6, r9
 800f0c6:	6165      	str	r5, [r4, #20]
 800f0c8:	eba5 0509 	sub.w	r5, r5, r9
 800f0cc:	6026      	str	r6, [r4, #0]
 800f0ce:	463e      	mov	r6, r7
 800f0d0:	60a5      	str	r5, [r4, #8]
 800f0d2:	42be      	cmp	r6, r7
 800f0d4:	d900      	bls.n	800f0d8 <__ssputs_r+0x70>
 800f0d6:	463e      	mov	r6, r7
 800f0d8:	4632      	mov	r2, r6
 800f0da:	4641      	mov	r1, r8
 800f0dc:	6820      	ldr	r0, [r4, #0]
 800f0de:	f000 faad 	bl	800f63c <memmove>
 800f0e2:	68a3      	ldr	r3, [r4, #8]
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	1b9b      	subs	r3, r3, r6
 800f0e8:	60a3      	str	r3, [r4, #8]
 800f0ea:	6823      	ldr	r3, [r4, #0]
 800f0ec:	4433      	add	r3, r6
 800f0ee:	6023      	str	r3, [r4, #0]
 800f0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f4:	462a      	mov	r2, r5
 800f0f6:	f000 fac9 	bl	800f68c <_realloc_r>
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d1e0      	bne.n	800f0c2 <__ssputs_r+0x5a>
 800f100:	6921      	ldr	r1, [r4, #16]
 800f102:	4650      	mov	r0, sl
 800f104:	f7ff ff64 	bl	800efd0 <_free_r>
 800f108:	230c      	movs	r3, #12
 800f10a:	f04f 30ff 	mov.w	r0, #4294967295
 800f10e:	f8ca 3000 	str.w	r3, [sl]
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f118:	81a3      	strh	r3, [r4, #12]
 800f11a:	e7e9      	b.n	800f0f0 <__ssputs_r+0x88>

0800f11c <_svfiprintf_r>:
 800f11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f120:	4698      	mov	r8, r3
 800f122:	898b      	ldrh	r3, [r1, #12]
 800f124:	b09d      	sub	sp, #116	; 0x74
 800f126:	4607      	mov	r7, r0
 800f128:	061b      	lsls	r3, r3, #24
 800f12a:	460d      	mov	r5, r1
 800f12c:	4614      	mov	r4, r2
 800f12e:	d50e      	bpl.n	800f14e <_svfiprintf_r+0x32>
 800f130:	690b      	ldr	r3, [r1, #16]
 800f132:	b963      	cbnz	r3, 800f14e <_svfiprintf_r+0x32>
 800f134:	2140      	movs	r1, #64	; 0x40
 800f136:	f7ff fe39 	bl	800edac <_malloc_r>
 800f13a:	6028      	str	r0, [r5, #0]
 800f13c:	6128      	str	r0, [r5, #16]
 800f13e:	b920      	cbnz	r0, 800f14a <_svfiprintf_r+0x2e>
 800f140:	230c      	movs	r3, #12
 800f142:	603b      	str	r3, [r7, #0]
 800f144:	f04f 30ff 	mov.w	r0, #4294967295
 800f148:	e0d0      	b.n	800f2ec <_svfiprintf_r+0x1d0>
 800f14a:	2340      	movs	r3, #64	; 0x40
 800f14c:	616b      	str	r3, [r5, #20]
 800f14e:	2300      	movs	r3, #0
 800f150:	f8cd 800c 	str.w	r8, [sp, #12]
 800f154:	f04f 0901 	mov.w	r9, #1
 800f158:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f304 <_svfiprintf_r+0x1e8>
 800f15c:	9309      	str	r3, [sp, #36]	; 0x24
 800f15e:	2320      	movs	r3, #32
 800f160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f164:	2330      	movs	r3, #48	; 0x30
 800f166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f16a:	4623      	mov	r3, r4
 800f16c:	469a      	mov	sl, r3
 800f16e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f172:	b10a      	cbz	r2, 800f178 <_svfiprintf_r+0x5c>
 800f174:	2a25      	cmp	r2, #37	; 0x25
 800f176:	d1f9      	bne.n	800f16c <_svfiprintf_r+0x50>
 800f178:	ebba 0b04 	subs.w	fp, sl, r4
 800f17c:	d00b      	beq.n	800f196 <_svfiprintf_r+0x7a>
 800f17e:	465b      	mov	r3, fp
 800f180:	4622      	mov	r2, r4
 800f182:	4629      	mov	r1, r5
 800f184:	4638      	mov	r0, r7
 800f186:	f7ff ff6f 	bl	800f068 <__ssputs_r>
 800f18a:	3001      	adds	r0, #1
 800f18c:	f000 80a9 	beq.w	800f2e2 <_svfiprintf_r+0x1c6>
 800f190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f192:	445a      	add	r2, fp
 800f194:	9209      	str	r2, [sp, #36]	; 0x24
 800f196:	f89a 3000 	ldrb.w	r3, [sl]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f000 80a1 	beq.w	800f2e2 <_svfiprintf_r+0x1c6>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a6:	f10a 0a01 	add.w	sl, sl, #1
 800f1aa:	9304      	str	r3, [sp, #16]
 800f1ac:	9307      	str	r3, [sp, #28]
 800f1ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1b2:	931a      	str	r3, [sp, #104]	; 0x68
 800f1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1b8:	4654      	mov	r4, sl
 800f1ba:	2205      	movs	r2, #5
 800f1bc:	4851      	ldr	r0, [pc, #324]	; (800f304 <_svfiprintf_r+0x1e8>)
 800f1be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1c2:	f000 fa55 	bl	800f670 <memchr>
 800f1c6:	9a04      	ldr	r2, [sp, #16]
 800f1c8:	b9d8      	cbnz	r0, 800f202 <_svfiprintf_r+0xe6>
 800f1ca:	06d0      	lsls	r0, r2, #27
 800f1cc:	bf44      	itt	mi
 800f1ce:	2320      	movmi	r3, #32
 800f1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1d4:	0711      	lsls	r1, r2, #28
 800f1d6:	bf44      	itt	mi
 800f1d8:	232b      	movmi	r3, #43	; 0x2b
 800f1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1de:	f89a 3000 	ldrb.w	r3, [sl]
 800f1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e4:	d015      	beq.n	800f212 <_svfiprintf_r+0xf6>
 800f1e6:	9a07      	ldr	r2, [sp, #28]
 800f1e8:	4654      	mov	r4, sl
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	f04f 0c0a 	mov.w	ip, #10
 800f1f0:	4621      	mov	r1, r4
 800f1f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1f6:	3b30      	subs	r3, #48	; 0x30
 800f1f8:	2b09      	cmp	r3, #9
 800f1fa:	d94d      	bls.n	800f298 <_svfiprintf_r+0x17c>
 800f1fc:	b1b0      	cbz	r0, 800f22c <_svfiprintf_r+0x110>
 800f1fe:	9207      	str	r2, [sp, #28]
 800f200:	e014      	b.n	800f22c <_svfiprintf_r+0x110>
 800f202:	eba0 0308 	sub.w	r3, r0, r8
 800f206:	46a2      	mov	sl, r4
 800f208:	fa09 f303 	lsl.w	r3, r9, r3
 800f20c:	4313      	orrs	r3, r2
 800f20e:	9304      	str	r3, [sp, #16]
 800f210:	e7d2      	b.n	800f1b8 <_svfiprintf_r+0x9c>
 800f212:	9b03      	ldr	r3, [sp, #12]
 800f214:	1d19      	adds	r1, r3, #4
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	9103      	str	r1, [sp, #12]
 800f21c:	bfbb      	ittet	lt
 800f21e:	425b      	neglt	r3, r3
 800f220:	f042 0202 	orrlt.w	r2, r2, #2
 800f224:	9307      	strge	r3, [sp, #28]
 800f226:	9307      	strlt	r3, [sp, #28]
 800f228:	bfb8      	it	lt
 800f22a:	9204      	strlt	r2, [sp, #16]
 800f22c:	7823      	ldrb	r3, [r4, #0]
 800f22e:	2b2e      	cmp	r3, #46	; 0x2e
 800f230:	d10c      	bne.n	800f24c <_svfiprintf_r+0x130>
 800f232:	7863      	ldrb	r3, [r4, #1]
 800f234:	2b2a      	cmp	r3, #42	; 0x2a
 800f236:	d134      	bne.n	800f2a2 <_svfiprintf_r+0x186>
 800f238:	9b03      	ldr	r3, [sp, #12]
 800f23a:	3402      	adds	r4, #2
 800f23c:	1d1a      	adds	r2, r3, #4
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	9203      	str	r2, [sp, #12]
 800f244:	bfb8      	it	lt
 800f246:	f04f 33ff 	movlt.w	r3, #4294967295
 800f24a:	9305      	str	r3, [sp, #20]
 800f24c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f314 <_svfiprintf_r+0x1f8>
 800f250:	2203      	movs	r2, #3
 800f252:	7821      	ldrb	r1, [r4, #0]
 800f254:	4650      	mov	r0, sl
 800f256:	f000 fa0b 	bl	800f670 <memchr>
 800f25a:	b138      	cbz	r0, 800f26c <_svfiprintf_r+0x150>
 800f25c:	eba0 000a 	sub.w	r0, r0, sl
 800f260:	2240      	movs	r2, #64	; 0x40
 800f262:	9b04      	ldr	r3, [sp, #16]
 800f264:	3401      	adds	r4, #1
 800f266:	4082      	lsls	r2, r0
 800f268:	4313      	orrs	r3, r2
 800f26a:	9304      	str	r3, [sp, #16]
 800f26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f270:	2206      	movs	r2, #6
 800f272:	4825      	ldr	r0, [pc, #148]	; (800f308 <_svfiprintf_r+0x1ec>)
 800f274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f278:	f000 f9fa 	bl	800f670 <memchr>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d038      	beq.n	800f2f2 <_svfiprintf_r+0x1d6>
 800f280:	4b22      	ldr	r3, [pc, #136]	; (800f30c <_svfiprintf_r+0x1f0>)
 800f282:	bb1b      	cbnz	r3, 800f2cc <_svfiprintf_r+0x1b0>
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	3307      	adds	r3, #7
 800f288:	f023 0307 	bic.w	r3, r3, #7
 800f28c:	3308      	adds	r3, #8
 800f28e:	9303      	str	r3, [sp, #12]
 800f290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f292:	4433      	add	r3, r6
 800f294:	9309      	str	r3, [sp, #36]	; 0x24
 800f296:	e768      	b.n	800f16a <_svfiprintf_r+0x4e>
 800f298:	fb0c 3202 	mla	r2, ip, r2, r3
 800f29c:	460c      	mov	r4, r1
 800f29e:	2001      	movs	r0, #1
 800f2a0:	e7a6      	b.n	800f1f0 <_svfiprintf_r+0xd4>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	3401      	adds	r4, #1
 800f2a6:	f04f 0c0a 	mov.w	ip, #10
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	9305      	str	r3, [sp, #20]
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2b4:	3a30      	subs	r2, #48	; 0x30
 800f2b6:	2a09      	cmp	r2, #9
 800f2b8:	d903      	bls.n	800f2c2 <_svfiprintf_r+0x1a6>
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d0c6      	beq.n	800f24c <_svfiprintf_r+0x130>
 800f2be:	9105      	str	r1, [sp, #20]
 800f2c0:	e7c4      	b.n	800f24c <_svfiprintf_r+0x130>
 800f2c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e7f0      	b.n	800f2ae <_svfiprintf_r+0x192>
 800f2cc:	ab03      	add	r3, sp, #12
 800f2ce:	462a      	mov	r2, r5
 800f2d0:	a904      	add	r1, sp, #16
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	4b0e      	ldr	r3, [pc, #56]	; (800f310 <_svfiprintf_r+0x1f4>)
 800f2d8:	f3af 8000 	nop.w
 800f2dc:	1c42      	adds	r2, r0, #1
 800f2de:	4606      	mov	r6, r0
 800f2e0:	d1d6      	bne.n	800f290 <_svfiprintf_r+0x174>
 800f2e2:	89ab      	ldrh	r3, [r5, #12]
 800f2e4:	065b      	lsls	r3, r3, #25
 800f2e6:	f53f af2d 	bmi.w	800f144 <_svfiprintf_r+0x28>
 800f2ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ec:	b01d      	add	sp, #116	; 0x74
 800f2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f2:	ab03      	add	r3, sp, #12
 800f2f4:	462a      	mov	r2, r5
 800f2f6:	a904      	add	r1, sp, #16
 800f2f8:	4638      	mov	r0, r7
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	4b04      	ldr	r3, [pc, #16]	; (800f310 <_svfiprintf_r+0x1f4>)
 800f2fe:	f000 f87d 	bl	800f3fc <_printf_i>
 800f302:	e7eb      	b.n	800f2dc <_svfiprintf_r+0x1c0>
 800f304:	0800f9f8 	.word	0x0800f9f8
 800f308:	0800fa02 	.word	0x0800fa02
 800f30c:	00000000 	.word	0x00000000
 800f310:	0800f069 	.word	0x0800f069
 800f314:	0800f9fe 	.word	0x0800f9fe

0800f318 <_printf_common>:
 800f318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f31c:	4616      	mov	r6, r2
 800f31e:	4699      	mov	r9, r3
 800f320:	688a      	ldr	r2, [r1, #8]
 800f322:	4607      	mov	r7, r0
 800f324:	690b      	ldr	r3, [r1, #16]
 800f326:	460c      	mov	r4, r1
 800f328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f32c:	4293      	cmp	r3, r2
 800f32e:	bfb8      	it	lt
 800f330:	4613      	movlt	r3, r2
 800f332:	6033      	str	r3, [r6, #0]
 800f334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f338:	b10a      	cbz	r2, 800f33e <_printf_common+0x26>
 800f33a:	3301      	adds	r3, #1
 800f33c:	6033      	str	r3, [r6, #0]
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	0699      	lsls	r1, r3, #26
 800f342:	bf42      	ittt	mi
 800f344:	6833      	ldrmi	r3, [r6, #0]
 800f346:	3302      	addmi	r3, #2
 800f348:	6033      	strmi	r3, [r6, #0]
 800f34a:	6825      	ldr	r5, [r4, #0]
 800f34c:	f015 0506 	ands.w	r5, r5, #6
 800f350:	d106      	bne.n	800f360 <_printf_common+0x48>
 800f352:	f104 0a19 	add.w	sl, r4, #25
 800f356:	68e3      	ldr	r3, [r4, #12]
 800f358:	6832      	ldr	r2, [r6, #0]
 800f35a:	1a9b      	subs	r3, r3, r2
 800f35c:	42ab      	cmp	r3, r5
 800f35e:	dc2b      	bgt.n	800f3b8 <_printf_common+0xa0>
 800f360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f364:	1e13      	subs	r3, r2, #0
 800f366:	6822      	ldr	r2, [r4, #0]
 800f368:	bf18      	it	ne
 800f36a:	2301      	movne	r3, #1
 800f36c:	0692      	lsls	r2, r2, #26
 800f36e:	d430      	bmi.n	800f3d2 <_printf_common+0xba>
 800f370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f374:	4649      	mov	r1, r9
 800f376:	4638      	mov	r0, r7
 800f378:	47c0      	blx	r8
 800f37a:	3001      	adds	r0, #1
 800f37c:	d023      	beq.n	800f3c6 <_printf_common+0xae>
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	341a      	adds	r4, #26
 800f382:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f386:	f003 0306 	and.w	r3, r3, #6
 800f38a:	2b04      	cmp	r3, #4
 800f38c:	bf0a      	itet	eq
 800f38e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f392:	2500      	movne	r5, #0
 800f394:	6833      	ldreq	r3, [r6, #0]
 800f396:	f04f 0600 	mov.w	r6, #0
 800f39a:	bf08      	it	eq
 800f39c:	1aed      	subeq	r5, r5, r3
 800f39e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f3a2:	bf08      	it	eq
 800f3a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	bfc4      	itt	gt
 800f3ac:	1a9b      	subgt	r3, r3, r2
 800f3ae:	18ed      	addgt	r5, r5, r3
 800f3b0:	42b5      	cmp	r5, r6
 800f3b2:	d11a      	bne.n	800f3ea <_printf_common+0xd2>
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e008      	b.n	800f3ca <_printf_common+0xb2>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	4652      	mov	r2, sl
 800f3bc:	4649      	mov	r1, r9
 800f3be:	4638      	mov	r0, r7
 800f3c0:	47c0      	blx	r8
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	d103      	bne.n	800f3ce <_printf_common+0xb6>
 800f3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ce:	3501      	adds	r5, #1
 800f3d0:	e7c1      	b.n	800f356 <_printf_common+0x3e>
 800f3d2:	18e1      	adds	r1, r4, r3
 800f3d4:	1c5a      	adds	r2, r3, #1
 800f3d6:	2030      	movs	r0, #48	; 0x30
 800f3d8:	3302      	adds	r3, #2
 800f3da:	4422      	add	r2, r4
 800f3dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3e8:	e7c2      	b.n	800f370 <_printf_common+0x58>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	4649      	mov	r1, r9
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	47c0      	blx	r8
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	d0e6      	beq.n	800f3c6 <_printf_common+0xae>
 800f3f8:	3601      	adds	r6, #1
 800f3fa:	e7d9      	b.n	800f3b0 <_printf_common+0x98>

0800f3fc <_printf_i>:
 800f3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	7e0f      	ldrb	r7, [r1, #24]
 800f402:	4691      	mov	r9, r2
 800f404:	4680      	mov	r8, r0
 800f406:	460c      	mov	r4, r1
 800f408:	2f78      	cmp	r7, #120	; 0x78
 800f40a:	469a      	mov	sl, r3
 800f40c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f40e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f412:	d807      	bhi.n	800f424 <_printf_i+0x28>
 800f414:	2f62      	cmp	r7, #98	; 0x62
 800f416:	d80a      	bhi.n	800f42e <_printf_i+0x32>
 800f418:	2f00      	cmp	r7, #0
 800f41a:	f000 80d3 	beq.w	800f5c4 <_printf_i+0x1c8>
 800f41e:	2f58      	cmp	r7, #88	; 0x58
 800f420:	f000 80bf 	beq.w	800f5a2 <_printf_i+0x1a6>
 800f424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f42c:	e03a      	b.n	800f4a4 <_printf_i+0xa8>
 800f42e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f432:	2b15      	cmp	r3, #21
 800f434:	d8f6      	bhi.n	800f424 <_printf_i+0x28>
 800f436:	a101      	add	r1, pc, #4	; (adr r1, 800f43c <_printf_i+0x40>)
 800f438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f43c:	0800f495 	.word	0x0800f495
 800f440:	0800f4a9 	.word	0x0800f4a9
 800f444:	0800f425 	.word	0x0800f425
 800f448:	0800f425 	.word	0x0800f425
 800f44c:	0800f425 	.word	0x0800f425
 800f450:	0800f425 	.word	0x0800f425
 800f454:	0800f4a9 	.word	0x0800f4a9
 800f458:	0800f425 	.word	0x0800f425
 800f45c:	0800f425 	.word	0x0800f425
 800f460:	0800f425 	.word	0x0800f425
 800f464:	0800f425 	.word	0x0800f425
 800f468:	0800f5ab 	.word	0x0800f5ab
 800f46c:	0800f4d5 	.word	0x0800f4d5
 800f470:	0800f567 	.word	0x0800f567
 800f474:	0800f425 	.word	0x0800f425
 800f478:	0800f425 	.word	0x0800f425
 800f47c:	0800f5cd 	.word	0x0800f5cd
 800f480:	0800f425 	.word	0x0800f425
 800f484:	0800f4d5 	.word	0x0800f4d5
 800f488:	0800f425 	.word	0x0800f425
 800f48c:	0800f425 	.word	0x0800f425
 800f490:	0800f56f 	.word	0x0800f56f
 800f494:	682b      	ldr	r3, [r5, #0]
 800f496:	1d1a      	adds	r2, r3, #4
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	602a      	str	r2, [r5, #0]
 800f49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e09e      	b.n	800f5e6 <_printf_i+0x1ea>
 800f4a8:	6820      	ldr	r0, [r4, #0]
 800f4aa:	682b      	ldr	r3, [r5, #0]
 800f4ac:	0607      	lsls	r7, r0, #24
 800f4ae:	f103 0104 	add.w	r1, r3, #4
 800f4b2:	6029      	str	r1, [r5, #0]
 800f4b4:	d501      	bpl.n	800f4ba <_printf_i+0xbe>
 800f4b6:	681e      	ldr	r6, [r3, #0]
 800f4b8:	e003      	b.n	800f4c2 <_printf_i+0xc6>
 800f4ba:	0646      	lsls	r6, r0, #25
 800f4bc:	d5fb      	bpl.n	800f4b6 <_printf_i+0xba>
 800f4be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f4c2:	2e00      	cmp	r6, #0
 800f4c4:	da03      	bge.n	800f4ce <_printf_i+0xd2>
 800f4c6:	232d      	movs	r3, #45	; 0x2d
 800f4c8:	4276      	negs	r6, r6
 800f4ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4ce:	4859      	ldr	r0, [pc, #356]	; (800f634 <_printf_i+0x238>)
 800f4d0:	230a      	movs	r3, #10
 800f4d2:	e012      	b.n	800f4fa <_printf_i+0xfe>
 800f4d4:	682b      	ldr	r3, [r5, #0]
 800f4d6:	6820      	ldr	r0, [r4, #0]
 800f4d8:	1d19      	adds	r1, r3, #4
 800f4da:	6029      	str	r1, [r5, #0]
 800f4dc:	0605      	lsls	r5, r0, #24
 800f4de:	d501      	bpl.n	800f4e4 <_printf_i+0xe8>
 800f4e0:	681e      	ldr	r6, [r3, #0]
 800f4e2:	e002      	b.n	800f4ea <_printf_i+0xee>
 800f4e4:	0641      	lsls	r1, r0, #25
 800f4e6:	d5fb      	bpl.n	800f4e0 <_printf_i+0xe4>
 800f4e8:	881e      	ldrh	r6, [r3, #0]
 800f4ea:	2f6f      	cmp	r7, #111	; 0x6f
 800f4ec:	4851      	ldr	r0, [pc, #324]	; (800f634 <_printf_i+0x238>)
 800f4ee:	bf0c      	ite	eq
 800f4f0:	2308      	moveq	r3, #8
 800f4f2:	230a      	movne	r3, #10
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4fa:	6865      	ldr	r5, [r4, #4]
 800f4fc:	2d00      	cmp	r5, #0
 800f4fe:	60a5      	str	r5, [r4, #8]
 800f500:	bfa2      	ittt	ge
 800f502:	6821      	ldrge	r1, [r4, #0]
 800f504:	f021 0104 	bicge.w	r1, r1, #4
 800f508:	6021      	strge	r1, [r4, #0]
 800f50a:	b90e      	cbnz	r6, 800f510 <_printf_i+0x114>
 800f50c:	2d00      	cmp	r5, #0
 800f50e:	d04a      	beq.n	800f5a6 <_printf_i+0x1aa>
 800f510:	4615      	mov	r5, r2
 800f512:	fbb6 f1f3 	udiv	r1, r6, r3
 800f516:	fb03 6711 	mls	r7, r3, r1, r6
 800f51a:	5dc7      	ldrb	r7, [r0, r7]
 800f51c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f520:	4637      	mov	r7, r6
 800f522:	460e      	mov	r6, r1
 800f524:	42bb      	cmp	r3, r7
 800f526:	d9f4      	bls.n	800f512 <_printf_i+0x116>
 800f528:	2b08      	cmp	r3, #8
 800f52a:	d10b      	bne.n	800f544 <_printf_i+0x148>
 800f52c:	6823      	ldr	r3, [r4, #0]
 800f52e:	07de      	lsls	r6, r3, #31
 800f530:	d508      	bpl.n	800f544 <_printf_i+0x148>
 800f532:	6923      	ldr	r3, [r4, #16]
 800f534:	6861      	ldr	r1, [r4, #4]
 800f536:	4299      	cmp	r1, r3
 800f538:	bfde      	ittt	le
 800f53a:	2330      	movle	r3, #48	; 0x30
 800f53c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f540:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f544:	1b52      	subs	r2, r2, r5
 800f546:	6122      	str	r2, [r4, #16]
 800f548:	464b      	mov	r3, r9
 800f54a:	aa03      	add	r2, sp, #12
 800f54c:	4621      	mov	r1, r4
 800f54e:	4640      	mov	r0, r8
 800f550:	f8cd a000 	str.w	sl, [sp]
 800f554:	f7ff fee0 	bl	800f318 <_printf_common>
 800f558:	3001      	adds	r0, #1
 800f55a:	d149      	bne.n	800f5f0 <_printf_i+0x1f4>
 800f55c:	f04f 30ff 	mov.w	r0, #4294967295
 800f560:	b004      	add	sp, #16
 800f562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	f043 0320 	orr.w	r3, r3, #32
 800f56c:	6023      	str	r3, [r4, #0]
 800f56e:	2778      	movs	r7, #120	; 0x78
 800f570:	4831      	ldr	r0, [pc, #196]	; (800f638 <_printf_i+0x23c>)
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f578:	061f      	lsls	r7, r3, #24
 800f57a:	6829      	ldr	r1, [r5, #0]
 800f57c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f580:	d402      	bmi.n	800f588 <_printf_i+0x18c>
 800f582:	065f      	lsls	r7, r3, #25
 800f584:	bf48      	it	mi
 800f586:	b2b6      	uxthmi	r6, r6
 800f588:	07df      	lsls	r7, r3, #31
 800f58a:	6029      	str	r1, [r5, #0]
 800f58c:	bf44      	itt	mi
 800f58e:	f043 0320 	orrmi.w	r3, r3, #32
 800f592:	6023      	strmi	r3, [r4, #0]
 800f594:	b91e      	cbnz	r6, 800f59e <_printf_i+0x1a2>
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	f023 0320 	bic.w	r3, r3, #32
 800f59c:	6023      	str	r3, [r4, #0]
 800f59e:	2310      	movs	r3, #16
 800f5a0:	e7a8      	b.n	800f4f4 <_printf_i+0xf8>
 800f5a2:	4824      	ldr	r0, [pc, #144]	; (800f634 <_printf_i+0x238>)
 800f5a4:	e7e5      	b.n	800f572 <_printf_i+0x176>
 800f5a6:	4615      	mov	r5, r2
 800f5a8:	e7be      	b.n	800f528 <_printf_i+0x12c>
 800f5aa:	682b      	ldr	r3, [r5, #0]
 800f5ac:	6826      	ldr	r6, [r4, #0]
 800f5ae:	1d18      	adds	r0, r3, #4
 800f5b0:	6961      	ldr	r1, [r4, #20]
 800f5b2:	6028      	str	r0, [r5, #0]
 800f5b4:	0635      	lsls	r5, r6, #24
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	d501      	bpl.n	800f5be <_printf_i+0x1c2>
 800f5ba:	6019      	str	r1, [r3, #0]
 800f5bc:	e002      	b.n	800f5c4 <_printf_i+0x1c8>
 800f5be:	0670      	lsls	r0, r6, #25
 800f5c0:	d5fb      	bpl.n	800f5ba <_printf_i+0x1be>
 800f5c2:	8019      	strh	r1, [r3, #0]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4615      	mov	r5, r2
 800f5c8:	6123      	str	r3, [r4, #16]
 800f5ca:	e7bd      	b.n	800f548 <_printf_i+0x14c>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	1d1a      	adds	r2, r3, #4
 800f5d2:	602a      	str	r2, [r5, #0]
 800f5d4:	681d      	ldr	r5, [r3, #0]
 800f5d6:	6862      	ldr	r2, [r4, #4]
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f000 f849 	bl	800f670 <memchr>
 800f5de:	b108      	cbz	r0, 800f5e4 <_printf_i+0x1e8>
 800f5e0:	1b40      	subs	r0, r0, r5
 800f5e2:	6060      	str	r0, [r4, #4]
 800f5e4:	6863      	ldr	r3, [r4, #4]
 800f5e6:	6123      	str	r3, [r4, #16]
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5ee:	e7ab      	b.n	800f548 <_printf_i+0x14c>
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	462a      	mov	r2, r5
 800f5f4:	4649      	mov	r1, r9
 800f5f6:	4640      	mov	r0, r8
 800f5f8:	47d0      	blx	sl
 800f5fa:	3001      	adds	r0, #1
 800f5fc:	d0ae      	beq.n	800f55c <_printf_i+0x160>
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	079b      	lsls	r3, r3, #30
 800f602:	d413      	bmi.n	800f62c <_printf_i+0x230>
 800f604:	68e0      	ldr	r0, [r4, #12]
 800f606:	9b03      	ldr	r3, [sp, #12]
 800f608:	4298      	cmp	r0, r3
 800f60a:	bfb8      	it	lt
 800f60c:	4618      	movlt	r0, r3
 800f60e:	e7a7      	b.n	800f560 <_printf_i+0x164>
 800f610:	2301      	movs	r3, #1
 800f612:	4632      	mov	r2, r6
 800f614:	4649      	mov	r1, r9
 800f616:	4640      	mov	r0, r8
 800f618:	47d0      	blx	sl
 800f61a:	3001      	adds	r0, #1
 800f61c:	d09e      	beq.n	800f55c <_printf_i+0x160>
 800f61e:	3501      	adds	r5, #1
 800f620:	68e3      	ldr	r3, [r4, #12]
 800f622:	9903      	ldr	r1, [sp, #12]
 800f624:	1a5b      	subs	r3, r3, r1
 800f626:	42ab      	cmp	r3, r5
 800f628:	dcf2      	bgt.n	800f610 <_printf_i+0x214>
 800f62a:	e7eb      	b.n	800f604 <_printf_i+0x208>
 800f62c:	2500      	movs	r5, #0
 800f62e:	f104 0619 	add.w	r6, r4, #25
 800f632:	e7f5      	b.n	800f620 <_printf_i+0x224>
 800f634:	0800fa09 	.word	0x0800fa09
 800f638:	0800fa1a 	.word	0x0800fa1a

0800f63c <memmove>:
 800f63c:	4288      	cmp	r0, r1
 800f63e:	b510      	push	{r4, lr}
 800f640:	eb01 0402 	add.w	r4, r1, r2
 800f644:	d902      	bls.n	800f64c <memmove+0x10>
 800f646:	4284      	cmp	r4, r0
 800f648:	4623      	mov	r3, r4
 800f64a:	d807      	bhi.n	800f65c <memmove+0x20>
 800f64c:	1e43      	subs	r3, r0, #1
 800f64e:	42a1      	cmp	r1, r4
 800f650:	d008      	beq.n	800f664 <memmove+0x28>
 800f652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f65a:	e7f8      	b.n	800f64e <memmove+0x12>
 800f65c:	4402      	add	r2, r0
 800f65e:	4601      	mov	r1, r0
 800f660:	428a      	cmp	r2, r1
 800f662:	d100      	bne.n	800f666 <memmove+0x2a>
 800f664:	bd10      	pop	{r4, pc}
 800f666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f66a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f66e:	e7f7      	b.n	800f660 <memmove+0x24>

0800f670 <memchr>:
 800f670:	b2c9      	uxtb	r1, r1
 800f672:	4402      	add	r2, r0
 800f674:	b510      	push	{r4, lr}
 800f676:	4290      	cmp	r0, r2
 800f678:	4603      	mov	r3, r0
 800f67a:	d101      	bne.n	800f680 <memchr+0x10>
 800f67c:	2300      	movs	r3, #0
 800f67e:	e003      	b.n	800f688 <memchr+0x18>
 800f680:	781c      	ldrb	r4, [r3, #0]
 800f682:	3001      	adds	r0, #1
 800f684:	428c      	cmp	r4, r1
 800f686:	d1f6      	bne.n	800f676 <memchr+0x6>
 800f688:	4618      	mov	r0, r3
 800f68a:	bd10      	pop	{r4, pc}

0800f68c <_realloc_r>:
 800f68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f690:	4680      	mov	r8, r0
 800f692:	4614      	mov	r4, r2
 800f694:	460e      	mov	r6, r1
 800f696:	b921      	cbnz	r1, 800f6a2 <_realloc_r+0x16>
 800f698:	4611      	mov	r1, r2
 800f69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f69e:	f7ff bb85 	b.w	800edac <_malloc_r>
 800f6a2:	b92a      	cbnz	r2, 800f6b0 <_realloc_r+0x24>
 800f6a4:	4625      	mov	r5, r4
 800f6a6:	f7ff fc93 	bl	800efd0 <_free_r>
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b0:	f000 f81b 	bl	800f6ea <_malloc_usable_size_r>
 800f6b4:	4284      	cmp	r4, r0
 800f6b6:	4607      	mov	r7, r0
 800f6b8:	d802      	bhi.n	800f6c0 <_realloc_r+0x34>
 800f6ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6be:	d812      	bhi.n	800f6e6 <_realloc_r+0x5a>
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	4640      	mov	r0, r8
 800f6c4:	f7ff fb72 	bl	800edac <_malloc_r>
 800f6c8:	4605      	mov	r5, r0
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d0ed      	beq.n	800f6aa <_realloc_r+0x1e>
 800f6ce:	42bc      	cmp	r4, r7
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	4631      	mov	r1, r6
 800f6d4:	bf28      	it	cs
 800f6d6:	463a      	movcs	r2, r7
 800f6d8:	f7ff fc6c 	bl	800efb4 <memcpy>
 800f6dc:	4631      	mov	r1, r6
 800f6de:	4640      	mov	r0, r8
 800f6e0:	f7ff fc76 	bl	800efd0 <_free_r>
 800f6e4:	e7e1      	b.n	800f6aa <_realloc_r+0x1e>
 800f6e6:	4635      	mov	r5, r6
 800f6e8:	e7df      	b.n	800f6aa <_realloc_r+0x1e>

0800f6ea <_malloc_usable_size_r>:
 800f6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6ee:	1f18      	subs	r0, r3, #4
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	bfbc      	itt	lt
 800f6f4:	580b      	ldrlt	r3, [r1, r0]
 800f6f6:	18c0      	addlt	r0, r0, r3
 800f6f8:	4770      	bx	lr
	...

0800f6fc <_init>:
 800f6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fe:	bf00      	nop
 800f700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f702:	bc08      	pop	{r3}
 800f704:	469e      	mov	lr, r3
 800f706:	4770      	bx	lr

0800f708 <_fini>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	bf00      	nop
 800f70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f70e:	bc08      	pop	{r3}
 800f710:	469e      	mov	lr, r3
 800f712:	4770      	bx	lr
